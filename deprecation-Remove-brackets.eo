memory > xinspect
memory > xwarn_about_renamed_method
memory > xrenamed_method
memory > xValueError
memory > xsync_to_async
memory > xwarnings
memory > xbase
memory > xtype
memory > xhasattr
memory > xDeprecationWarning
memory > xargs
memory > xgetattr
memory > xPendingDeprecationWarning
memory > xsetattr
memory > xkwargs
memory > xasyncio
memory > xsuper
memory > xRemovedInDjango50Warning
[] > deprecation
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_async_check
        memory > x__repr__
        memory > x__call__
        memory > x__acall__
        memory > xasync_capable
        memory > x__instancecheck__
        memory > xRemovedAfterNextVersionWarning
        memory > xsync_capable
        memory > x__init__
        memory > x__new__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xDeprecationWarning)))
            (((unsupported)).apply ((xPendingDeprecationWarning)))
            xRemovedAfterNextVersionWarning.write (xRemovedInDjango50Warning)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xclass_name xold_method_name xnew_method_name xdeprecation_warning]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xclass_name)) ((xclass_name)))
                        (((unsupported)).apply (((xself).xold_method_name)) ((xold_method_name)))
                        (((unsupported)).apply (((xself).xnew_method_name)) ((xnew_method_name)))
                        (((unsupported)).apply (((xself).xdeprecation_warning)) ((xdeprecation_warning)))
                x__call__.write
                  [xself xf]
                    memory > xwrapped
                    seq > @
                      seq
                        xwrapped.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xwarnings).xwarn)).apply (("`%s.%s` is deprecated, use `%s` instead.".mod (((unsupported)).apply (((xself).xclass_name)) (((xself).xold_method_name)) (((xself).xnew_method_name))))) (((xself).xdeprecation_warning)) (2))
                                (((unsupported)).apply ((((xf)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply ((xwrapped)))
            (((unsupported)).apply ((xtype)))
              seq
                (((unsupported)).apply)
                seq
                seq
                x__new__.write
                  [xcls xname xbases xattrs]
                    memory > xclass_name
                    memory > xnew_method_name
                    memory > xold_method_name
                    memory > xnew_class
                    memory > xwrapper
                    memory > xdeprecation_warning
                    memory > xnew_method
                    memory > xold_method
                    seq > @
                      seq
                        xnew_class.write ((((xsuper).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xattrs)))
                        (((unsupported)).apply ((xbase)) (((((xinspect).xgetmro)).apply ((xnew_class)))))
                          seq
                            xclass_name.write ((xbase).x__name__)
                            (((unsupported)).apply ((xrenamed_method)) (((xcls).xrenamed_methods)))
                              seq
                                xold_method_name.write (((unsupported)).apply ((xrenamed_method)) (0))
                                xold_method.write (((((xbase).x__dict__).xget)).apply ((xold_method_name)))
                                xnew_method_name.write (((unsupported)).apply ((xrenamed_method)) (1))
                                xnew_method.write (((((xbase).x__dict__).xget)).apply ((xnew_method_name)))
                                xdeprecation_warning.write (((unsupported)).apply ((xrenamed_method)) (2))
                                xwrapper.write (((xwarn_about_renamed_method)).apply ((xclass_name)) ((((unsupported)).apply ((xrenamed_method)))))
                                (((xnew_method).not).and (xold_method)).if
                                  seq
                                    bogusForceDataize.write ((((xwarnings).xwarn)).apply (("`%s.%s` method should be renamed `%s`.".mod (((unsupported)).apply ((xclass_name)) ((xold_method_name)) ((xnew_method_name))))) ((xdeprecation_warning)) (2))
                                    bogusForceDataize.write (((xsetattr)).apply ((xbase)) ((xnew_method_name)) ((xold_method)))
                                    bogusForceDataize.write (((xsetattr)).apply ((xbase)) ((xold_method_name)) ((((xwrapper)).apply ((xold_method)))))
                                (((xold_method).not).and (xnew_method)).if
                                  bogusForceDataize.write (((xsetattr)).apply ((xbase)) ((xold_method_name)) ((((xwrapper)).apply ((xnew_method)))))
                        (((unsupported)).apply ((xnew_class)))
            (((unsupported)).apply ((xtype)))
              x__instancecheck__.write
                [xself xinstance]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xwarnings).xwarn)).apply (("`%s` is deprecated, use `%s` instead.".mod (((unsupported)).apply (((xself).x__name__)) (((xself).xalternative))))) (((xself).xdeprecation_warning)) (2))
                      (((unsupported)).apply (((((xsuper).x__instancecheck__)).apply ((xinstance)))))
            (((unsupported)).apply)
              seq
                xsync_capable.write TRUE
                xasync_capable.write TRUE
                x__init__.write
                  [xself xget_response]
                    seq > @
                      seq
                        (((unsupported)).apply ((xget_response)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xValueError)).apply ("get_response must be provided."))))
                        (((unsupported)).apply (((xself).xget_response)) ((xget_response)))
                        unsupported
                        unsupported
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s get_response=%s>".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((xgetattr)).apply (((xself).xget_response)) ("__qualname__") (((((xself).xget_response).x__class__).x__name__))))))))
                x_async_check.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xasyncio).xiscoroutinefunction)).apply (((xself).xget_response))).if
                          (((unsupported)).apply (((xself).x_is_coroutine)) ((((xasyncio).xcoroutines).x_is_coroutine)))
                          (((unsupported)).apply (((xself).x_is_coroutine)) ("None: is there a None literal in the EO language?"))
                x__call__.write
                  [xself xrequest]
                    memory > xresponse
                    seq > @
                      seq
                        ((xself).x_is_coroutine).if
                          (((unsupported)).apply (((((xself).x__acall__)).apply ((xrequest)))))
                        xresponse.write "None: is there a None literal in the EO language?"
                        (((xhasattr)).apply ((xself)) ("process_request")).if
                          xresponse.write ((((xself).xprocess_request)).apply ((xrequest)))
                        xresponse.write ((xresponse).or ((((xself).xget_response)).apply ((xrequest))))
                        (((xhasattr)).apply ((xself)) ("process_response")).if
                          xresponse.write ((((xself).xprocess_response)).apply ((xrequest)) ((xresponse)))
                        (((unsupported)).apply ((xresponse)))
                x__acall__.write
                  [xself xrequest]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xresponse.write "None: is there a None literal in the EO language?"
                        (((xhasattr)).apply ((xself)) ("process_request")).if
                          xresponse.write (((unsupported)).apply ((((((unsupported)).apply ((xsync_to_async)) (((xself).xprocess_request)) (TRUE))).apply ((xrequest)))))
                        xresponse.write ((xresponse).or (((unsupported)).apply (((((xself).xget_response)).apply ((xrequest))))))
                        (((xhasattr)).apply ((xself)) ("process_response")).if
                          xresponse.write (((unsupported)).apply ((((((unsupported)).apply ((xsync_to_async)) (((xself).xprocess_response)) (TRUE))).apply ((xrequest)) ((xresponse)))))
                        (((unsupported)).apply ((xresponse)))