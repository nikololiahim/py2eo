memory > xSwappableModel
memory > xValueError
memory > xMMembership
memory > xrel_name
memory > xError
memory > xAbstractModel
memory > xFKRel
memory > xtype
memory > xx
memory > xStub
memory > xmock
memory > xParent
memory > xerror_id
memory > xinvalid_related_name
memory > xEvent
memory > xfield
memory > xInvalidRelationship
memory > xPerson
memory > xFan
memory > xconnection
memory > xrelated_name
memory > xSwappedModel
memory > xclash_name
memory > xManyToManyRel
memory > xGroup
memory > xModel
memory > xChild
memory > xattr
memory > xModelM2M
memory > xWrongModel
memory > xTarget
memory > xmodels
memory > xfield_name
memory > xisolate_apps
memory > xSimpleTestCase
[] > test_relative_fields
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_accessor_clash
        memory > xtest_invalid_field
        memory > xtest_many_to_many_to_missing_model
        memory > xtest_intersection_foreign_object
        memory > xtest_m2m_to_m2m_with_inheritance
        memory > xtest_to_fields_not_checked_if_related_model_doesnt_exist
        memory > xtest_foreign_key_to_non_unique_field
        memory > xtest_many_to_many_with_useless_related_name
        memory > xtest_hidden_m2m_to_m2m
        memory > xtest_clash_between_accessors
        memory > xtest_foreign_key_to_non_unique_field_under_explicit_model
        memory > xtest_ambiguous_relationship_model_to
        memory > xtest_foreign_key_to_isolate_apps_model
        memory > xtest_hidden_fk_to_m2m
        memory > xtest_unique_m2m
        memory > xtest_relationship_model_missing_foreign_key
        memory > xtest_to_fields_exist
        memory > xtest_hidden_fk_to_integer
        memory > xtest_many_to_many_through_isolate_apps_model
        memory > xtest_hidden_fk_to_fk
        memory > xtest_m2m_to_m2m
        memory > xtest_superset_foreign_object
        memory > xtest_too_many_foreign_keys_in_self_referential_model
        memory > xtest_related_field_has_valid_related_name
        memory > xtest_fk_to_integer
        memory > xtest_related_field_has_invalid_related_name
        memory > xtest_clash_under_explicit_related_name
        memory > xtest_m2m_to_abstract_model
        memory > xtest_many_to_many_with_useless_options
        memory > x_test_reverse_query_name_clash
        memory > xtest_foreign_object_to_partially_unique_field
        memory > xtest_complex_clash
        memory > xtest_no_clash_across_apps_without_accessor
        memory > x_test_explicit_related_query_name_clash
        memory > xtest_m2m_to_fk
        memory > xtest_on_delete_set_null_on_non_nullable_field
        memory > xtest_no_clash_for_hidden_related_name
        memory > xtest_reverse_query_name_clash
        memory > xtest_relationship_model_with_foreign_key_to_wrong_model
        memory > xtest_explicit_field_names
        memory > xtest_fk_to_fk
        memory > xtest_foreign_key_to_partially_unique_field
        memory > x_test_explicit_related_name_clash
        memory > xtest_foreign_object_to_unique_field_with_meta_constraint
        memory > xtest_foreign_key_to_unique_field_with_meta_constraint
        memory > xtest_m2m_field_argument_validation
        memory > xtest_invalid_order
        memory > xtest_missing_relationship_model_on_model_check
        memory > xtest_ambiguous_relationship_model_from
        memory > xtest_nullable_primary_key
        memory > xtest_fk_to_m2m
        memory > xtest_m2m_to_integer
        memory > xtest_many_to_many_to_isolate_apps_model
        memory > xtest_hidden_m2m_to_fk
        memory > xtest_foreign_object_to_non_unique_fields
        memory > xtest_on_delete_set_default_without_default_value
        memory > xDjangoWarning
        memory > x_test_accessor_clash
        memory > xtest_foreign_key_to_abstract_model
        memory > xtest_missing_relationship_model
        memory > xtest_not_swapped_model
        memory > xtest_foreign_key_to_missing_model
        memory > xtest_valid_foreign_key_without_accessor
        memory > xtest_valid_model
        memory > xtest_referencing_to_swapped_model
        memory > xtest_hidden_m2m_to_integer
        memory > xtest_clash_parent_link
        memory > xtest_invalid_related_query_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_valid_foreign_key_without_accessor.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel.write ((((xmodels).xIntegerField)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("+"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_foreign_key_to_missing_model.write
                  [xself]
                    memory > xfield
                    memory > xforeign_key
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xforeign_key.write ((((xmodels).xForeignKey)).apply ("Rel1") (((xmodels).xCASCADE)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("foreign_key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field defines a relation with model 'Rel1', which is either not installed, or is abstract.") ((xfield)) ("fields.E300"))))))
                xtest_foreign_key_to_isolate_apps_model.write
                  [xself]
                    memory > xfield
                    memory > xforeign_key
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xforeign_key.write ((((xmodels).xForeignKey)).apply ("OtherModel") (((xmodels).xCASCADE)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("foreign_key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xModel)))) ((((unsupported)).apply)))
                xtest_many_to_many_to_missing_model.write
                  [xself]
                    memory > xfield
                    memory > xm2m
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xm2m.write ((((xmodels).xManyToManyField)).apply ("Rel2"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xModel)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field defines a relation with model 'Rel2', which is either not installed, or is abstract.") ((xfield)) ("fields.E300"))))))
                xtest_many_to_many_to_isolate_apps_model.write
                  [xself]
                    memory > xfield
                    memory > xm2m
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xm2m.write ((((xmodels).xManyToManyField)).apply ("OtherModel"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xModel)))) ((((unsupported)).apply)))
                xtest_many_to_many_with_useless_options.write
                  [xself]
                    memory > xname
                    memory > xfield
                    memory > xm2m
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (20))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xm2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xModel)) (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xx)))))))
                        xfield.write (((((xModelM2M).x_meta).xget_field)).apply ("m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModelM2M).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("null has no effect on ManyToManyField.") ((xfield)) ("fields.W340"))) ((((unsupported)).apply ((xDjangoWarning)) ("ManyToManyField does not support validators.") ((xfield)) ("fields.W341"))))))
                xtest_many_to_many_with_useless_related_name.write
                  [xself]
                    memory > xfield
                    memory > xm2m
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xm2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") ("children"))
                        xfield.write (((((xModelM2M).x_meta).xget_field)).apply ("m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModelM2M).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("related_name has no effect on ManyToManyField with a symmetrical relationship, e.g. to \"self\".") ((xfield)) ("fields.W345"))))))
                xtest_ambiguous_relationship_model_from.write
                  [xself]
                    memory > xsecond_group
                    memory > xfield
                    memory > xperson
                    memory > xfirst_group
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("AmbiguousRelationship"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson.write ((((xmodels).xForeignKey)).apply ((xPerson)) (((xmodels).xCASCADE)))
                            xfirst_group.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xGroup)) (((xmodels).xCASCADE)) ("first"))
                            xsecond_group.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xGroup)) (((xmodels).xCASCADE)) ("second"))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The model is used as an intermediate model by 'invalid_models_tests.Group.field', but it has more than one foreign key from 'Group', which is ambiguous. You must specify which foreign key Django should use via the through_fields keyword argument.") ("If you want to create a recursive relationship, use ManyToManyField(\"self\", through=\"AmbiguousRelationship\").") ((xfield)) ("fields.E334"))))))
                xtest_ambiguous_relationship_model_to.write
                  [xself]
                    memory > xfield
                    memory > xsecond_person
                    memory > xsecond_model
                    memory > xfirst_person
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("AmbiguousRelationship") ("tertiary"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst_person.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xPerson)) (((xmodels).xCASCADE)) ("first"))
                            xsecond_person.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xPerson)) (((xmodels).xCASCADE)) ("second"))
                            xsecond_model.write ((((xmodels).xForeignKey)).apply ((xGroup)) (((xmodels).xCASCADE)))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The model is used as an intermediate model by 'invalid_models_tests.Group.field', but it has more than one foreign key to 'Person', which is ambiguous. You must specify which foreign key Django should use via the through_fields keyword argument.") ("If you want to create a recursive relationship, use ManyToManyField(\"self\", through=\"AmbiguousRelationship\").") ((xfield)) ("fields.E335"))))))
                xtest_relationship_model_with_foreign_key_to_wrong_model.write
                  [xself]
                    memory > xmembers
                    memory > xperson
                    memory > xfield
                    memory > xwrong_foreign_key
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("InvalidRelationship"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson.write ((((xmodels).xForeignKey)).apply ((xPerson)) (((xmodels).xCASCADE)))
                            xwrong_foreign_key.write ((((xmodels).xForeignKey)).apply ((xWrongModel)) (((xmodels).xCASCADE)))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The model is used as an intermediate model by 'invalid_models_tests.Group.members', but it does not have a foreign key to 'Group' or 'Person'.") ((xInvalidRelationship)) ("fields.E336"))))))
                xtest_relationship_model_missing_foreign_key.write
                  [xself]
                    memory > xfield
                    memory > xgroup
                    memory > xmembers
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("InvalidRelationship"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xgroup.write ((((xmodels).xForeignKey)).apply ((xGroup)) (((xmodels).xCASCADE)))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The model is used as an intermediate model by 'invalid_models_tests.Group.members', but it does not have a foreign key to 'Group' or 'Person'.") ((xInvalidRelationship)) ("fields.E336"))))))
                xtest_missing_relationship_model.write
                  [xself]
                    memory > xfield
                    memory > xmembers
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("MissingM2MModel"))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field specifies a many-to-many relation through model 'MissingM2MModel', which has not been installed.") ((xfield)) ("fields.E331"))))))
                xtest_missing_relationship_model_on_model_check.write
                  [xself]
                    memory > xmembers
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("MissingM2MModel"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xGroup).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field specifies a many-to-many relation through model 'MissingM2MModel', which has not been installed.") ((((((xGroup).x_meta).xget_field)).apply ("members"))) ("fields.E331"))))))
                xtest_many_to_many_through_isolate_apps_model.write
                  [xself]
                    memory > xfield
                    memory > xperson
                    memory > xgroup
                    memory > xmembers
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson.write ((((xmodels).xForeignKey)).apply ("Person") (((xmodels).xCASCADE)))
                            xgroup.write ((((xmodels).xForeignKey)).apply ("Group") (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") ("GroupMember"))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply)))
                xtest_too_many_foreign_keys_in_self_referential_model.write
                  [xself]
                    memory > xsecond
                    memory > xfriends
                    memory > xfirst
                    memory > xfield
                    memory > xthird
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfriends.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") ("InvalidRelationship") (FALSE))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xPerson)) (((xmodels).xCASCADE)) ("rel_from_set_2"))
                            xsecond.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xPerson)) (((xmodels).xCASCADE)) ("rel_to_set_2"))
                            xthird.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xPerson)) (((xmodels).xCASCADE)) ("too_many_by_far"))
                        xfield.write (((((xPerson).x_meta).xget_field)).apply ("friends"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xPerson)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The model is used as an intermediate model by 'invalid_models_tests.Person.friends', but it has more than two foreign keys to 'Person', which is ambiguous. You must specify which two foreign keys Django should use via the through_fields keyword argument.") ("Use through_fields to specify which two foreign keys Django should use.") ((xInvalidRelationship)) ("fields.E333"))))))
                xtest_foreign_key_to_abstract_model.write
                  [xself]
                    memory > xrel_class_foreign_key
                    memory > xfields
                    memory > xexpected_error
                    memory > xrel_string_foreign_key
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xabstract.write TRUE
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xrel_string_foreign_key.write ((((xmodels).xForeignKey)).apply ("AbstractModel") (((xmodels).xCASCADE)))
                            xrel_class_foreign_key.write ((((xmodels).xForeignKey)).apply ((xAbstractModel)) (((xmodels).xCASCADE)))
                        xfields.write (((unsupported)).apply ((((((xModel).x_meta).xget_field)).apply ("rel_string_foreign_key"))) ((((((xModel).x_meta).xget_field)).apply ("rel_class_foreign_key"))))
                        xexpected_error.write (((unsupported)).apply ((xError)) ("Field defines a relation with model 'AbstractModel', which is either not installed, or is abstract.") ("fields.E300"))
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          seq
                            (((unsupported)).apply (((xexpected_error).xobj)) ((xfield)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((xexpected_error)))))
                xtest_m2m_to_abstract_model.write
                  [xself]
                    memory > xrel_string_m2m
                    memory > xfields
                    memory > xabstract
                    memory > xrel_class_m2m
                    memory > xexpected_error
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xabstract.write TRUE
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xrel_string_m2m.write ((((xmodels).xManyToManyField)).apply ("AbstractModel"))
                            xrel_class_m2m.write ((((xmodels).xManyToManyField)).apply ((xAbstractModel)))
                        xfields.write (((unsupported)).apply ((((((xModel).x_meta).xget_field)).apply ("rel_string_m2m"))) ((((((xModel).x_meta).xget_field)).apply ("rel_class_m2m"))))
                        xexpected_error.write (((unsupported)).apply ((xError)) ("Field defines a relation with model 'AbstractModel', which is either not installed, or is abstract.") ("fields.E300"))
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          seq
                            (((unsupported)).apply (((xexpected_error).xobj)) ((xfield)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xModel)))) ((((unsupported)).apply ((xexpected_error)))))
                xtest_unique_m2m.write
                  [xself]
                    memory > xname
                    memory > xfield
                    memory > xmembers
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (5))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmembers.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Person") (TRUE))
                        xfield.write (((((xGroup).x_meta).xget_field)).apply ("members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xGroup)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("ManyToManyFields cannot be unique.") ((xfield)) ("fields.E330"))))))
                xtest_foreign_key_to_non_unique_field.write
                  [xself]
                    memory > xforeign_key
                    memory > xbad
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xbad.write ((((xmodels).xIntegerField)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xforeign_key.write (((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("foreign_key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'Target.bad' must be unique because it is referenced by a foreign key.") ("Add unique=True to this field or add a UniqueConstraint (without condition) in the model Meta.constraints.") ((xfield)) ("fields.E311"))))))
                xtest_foreign_key_to_non_unique_field_under_explicit_model.write
                  [xself]
                    memory > xbad
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xbad.write ((((xmodels).xIntegerField)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'Target.bad' must be unique because it is referenced by a foreign key.") ("Add unique=True to this field or add a UniqueConstraint (without condition) in the model Meta.constraints.") ((xfield)) ("fields.E311"))))))
                xtest_foreign_key_to_partially_unique_field.write
                  [xself]
                    memory > xfield
                    memory > xsource
                    memory > xconstraints
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsource.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xconstraints.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xUniqueConstraint)) ((((unsupported)).apply ("source"))) ("tfktpuf_partial_unique") ((((unsupported)).apply (((xmodels).xQ)) (2))))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("source"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'Target.source' must be unique because it is referenced by a foreign key.") ("Add unique=True to this field or add a UniqueConstraint (without condition) in the model Meta.constraints.") ((xfield)) ("fields.E311"))))))
                xtest_foreign_key_to_unique_field_with_meta_constraint.write
                  [xself]
                    memory > xfield
                    memory > xsource
                    memory > xconstraints
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsource.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xconstraints.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xUniqueConstraint)) ((((unsupported)).apply ("source"))) ("tfktufwmc_unique"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("source"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_foreign_object_to_non_unique_fields.write
                  [xself]
                    memory > xperson_country_id
                    memory > xperson_city_id
                    memory > xfield
                    memory > xcity_id
                    memory > xcountry_id
                    memory > xperson
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcountry_id.write ((((xmodels).xIntegerField)).apply)
                            xcity_id.write ((((xmodels).xIntegerField)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson_country_id.write ((((xmodels).xIntegerField)).apply)
                            xperson_city_id.write ((((xmodels).xIntegerField)).apply)
                            xperson.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xPerson)) (((xmodels).xCASCADE)) ((((unsupported)).apply ("person_country_id") ("person_city_id"))) ((((unsupported)).apply ("country_id") ("city_id"))))
                        xfield.write (((((xMMembership).x_meta).xget_field)).apply ("person"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("No subset of the fields 'country_id', 'city_id' on model 'Person' is unique.") ("Mark a single field as unique=True or add a set of fields to a unique constraint (via unique_together or a UniqueConstraint (without condition) in the model Meta.constraints).") ((xfield)) ("fields.E310"))))))
                xtest_foreign_object_to_partially_unique_field.write
                  [xself]
                    memory > xconstraints
                    memory > xperson_country_id
                    memory > xperson_city_id
                    memory > xfield
                    memory > xcity_id
                    memory > xcountry_id
                    memory > xperson
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcountry_id.write ((((xmodels).xIntegerField)).apply)
                            xcity_id.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xconstraints.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xUniqueConstraint)) ((((unsupported)).apply ("country_id") ("city_id"))) ("tfotpuf_partial_unique") ((((unsupported)).apply (((xmodels).xQ)) (2))))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson_country_id.write ((((xmodels).xIntegerField)).apply)
                            xperson_city_id.write ((((xmodels).xIntegerField)).apply)
                            xperson.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xPerson)) (((xmodels).xCASCADE)) ((((unsupported)).apply ("person_country_id") ("person_city_id"))) ((((unsupported)).apply ("country_id") ("city_id"))))
                        xfield.write (((((xMMembership).x_meta).xget_field)).apply ("person"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("No subset of the fields 'country_id', 'city_id' on model 'Person' is unique.") ("Mark a single field as unique=True or add a set of fields to a unique constraint (via unique_together or a UniqueConstraint (without condition) in the model Meta.constraints).") ((xfield)) ("fields.E310"))))))
                xtest_foreign_object_to_unique_field_with_meta_constraint.write
                  [xself]
                    memory > xconstraints
                    memory > xperson_country_id
                    memory > xperson_city_id
                    memory > xfield
                    memory > xcity_id
                    memory > xcountry_id
                    memory > xperson
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcountry_id.write ((((xmodels).xIntegerField)).apply)
                            xcity_id.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xconstraints.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xUniqueConstraint)) ((((unsupported)).apply ("country_id") ("city_id"))) ("tfotpuf_unique"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xperson_country_id.write ((((xmodels).xIntegerField)).apply)
                            xperson_city_id.write ((((xmodels).xIntegerField)).apply)
                            xperson.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xPerson)) (((xmodels).xCASCADE)) ((((unsupported)).apply ("person_country_id") ("person_city_id"))) ((((unsupported)).apply ("country_id") ("city_id"))))
                        xfield.write (((((xMMembership).x_meta).xget_field)).apply ("person"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_on_delete_set_null_on_non_nullable_field.write
                  [xself]
                    memory > xfield
                    memory > xforeign_key
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xforeign_key.write ((((xmodels).xForeignKey)).apply ("Person") (((xmodels).xSET_NULL)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("foreign_key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field specifies on_delete=SET_NULL, but cannot be null.") ("Set null=True argument on the field, or change the on_delete rule.") ((xfield)) ("fields.E320"))))))
                xtest_on_delete_set_default_without_default_value.write
                  [xself]
                    memory > xfield
                    memory > xforeign_key
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xforeign_key.write ((((xmodels).xForeignKey)).apply ("Person") (((xmodels).xSET_DEFAULT)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("foreign_key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field specifies on_delete=SET_DEFAULT, but has no default value.") ("Set a default value, or change the on_delete rule.") ((xfield)) ("fields.E321"))))))
                xtest_nullable_primary_key.write
                  [xself]
                    memory > xfield
                    memory > xresults
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xconnection).xfeatures)) ("interprets_empty_strings_as_nulls") (FALSE))))
                          xresults.write ((((xfield).xcheck)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresults)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Primary keys must not have null=True.") ("Set null=False on the field, or remove primary_key=True argument.") ((xfield)) ("fields.E007"))))))
                xtest_not_swapped_model.write
                  [xself]
                    memory > xexplicit_m2m
                    memory > ximplicit_m2m
                    memory > xexplicit_fk
                    memory > ximplicit_fk
                    memory > xswappable
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xswappable.write "TEST_SWAPPABLE_MODEL"
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xexplicit_fk.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xSwappableModel)) (((xmodels).xCASCADE)) ("explicit_fk"))
                            ximplicit_fk.write (((unsupported)).apply (((xmodels).xForeignKey)) ("invalid_models_tests.SwappableModel") (((xmodels).xCASCADE)) ("implicit_fk"))
                            xexplicit_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xSwappableModel)) ("explicit_m2m"))
                            ximplicit_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("invalid_models_tests.SwappableModel") ("implicit_m2m"))
                        xexplicit_fk.write (((((xModel).x_meta).xget_field)).apply ("explicit_fk"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexplicit_fk).xcheck)).apply)) ((((unsupported)).apply)))
                        ximplicit_fk.write (((((xModel).x_meta).xget_field)).apply ("implicit_fk"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximplicit_fk).xcheck)).apply)) ((((unsupported)).apply)))
                        xexplicit_m2m.write (((((xModel).x_meta).xget_field)).apply ("explicit_m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xexplicit_m2m).xcheck)) ((xModel)))) ((((unsupported)).apply)))
                        ximplicit_m2m.write (((((xModel).x_meta).xget_field)).apply ("implicit_m2m"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((ximplicit_m2m).xcheck)) ((xModel)))) ((((unsupported)).apply)))
                xtest_referencing_to_swapped_model.write
                  [xself]
                    memory > xfields
                    memory > xexplicit_m2m
                    memory > xexplicit_fk
                    memory > xexpected_error
                    memory > ximplicit_m2m
                    memory > ximplicit_fk
                    memory > xswappable
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xswappable.write "TEST_SWAPPED_MODEL"
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xexplicit_fk.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xSwappedModel)) (((xmodels).xCASCADE)) ("explicit_fk"))
                            ximplicit_fk.write (((unsupported)).apply (((xmodels).xForeignKey)) ("invalid_models_tests.SwappedModel") (((xmodels).xCASCADE)) ("implicit_fk"))
                            xexplicit_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xSwappedModel)) ("explicit_m2m"))
                            ximplicit_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("invalid_models_tests.SwappedModel") ("implicit_m2m"))
                        xfields.write (((unsupported)).apply ((((((xModel).x_meta).xget_field)).apply ("explicit_fk"))) ((((((xModel).x_meta).xget_field)).apply ("implicit_fk"))) ((((((xModel).x_meta).xget_field)).apply ("explicit_m2m"))) ((((((xModel).x_meta).xget_field)).apply ("implicit_m2m"))))
                        xexpected_error.write (((unsupported)).apply ((xError)) ("Field defines a relation with the model 'invalid_models_tests.SwappedModel', which has been swapped out.") ("Update the relation to point at 'settings.TEST_SWAPPED_MODEL'.") ("fields.E301"))
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          seq
                            (((unsupported)).apply (((xexpected_error).xobj)) ((xfield)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xModel)))) ((((unsupported)).apply ((xexpected_error)))))
                xtest_related_field_has_invalid_related_name.write
                  [xself]
                    memory > xinvalid_related_names
                    memory > xfield
                    memory > xillegal_non_alphanumeric
                    memory > xwhitespace
                    memory > xdigit
                    memory > xChild
                    seq > @
                      seq
                        xdigit.write 0
                        xillegal_non_alphanumeric.write "!"
                        xwhitespace.write "t"
                        xinvalid_related_names.write (((unsupported)).apply (("%s_begins_with_digit".mod (xdigit))) (("%s_begins_with_illegal_non_alphanumeric".mod (xillegal_non_alphanumeric))) (("%s_begins_with_whitespace".mod (xwhitespace))) (("contains_%s_illegal_non_alphanumeric".mod (xillegal_non_alphanumeric))) (("contains_%s_whitespace".mod (xwhitespace))) (("ends_with_with_illegal_non_alphanumeric_%s".mod (xillegal_non_alphanumeric))) (("ends_with_whitespace_%s".mod (xwhitespace))) ("with") ("related_namen") ("") ("，"))
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply ((xinvalid_related_name)) ((xinvalid_related_names)))
                          seq
                            xChild.write (((xtype)).apply (("Child%s".mod (xinvalid_related_name))) ((((unsupported)).apply (((xmodels).xModel)))) ((((unsupported)).apply ("parent") ((((unsupported)).apply (((xmodels).xForeignKey)) ("Parent") (((xmodels).xCASCADE)) ((xinvalid_related_name)))) ("__module__") (((xParent).x__module__)))))
                            xfield.write (((((xChild).x_meta).xget_field)).apply ("parent"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xChild).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) (("The name '%s' is invalid related_name for field Child%s.parent".mod (((unsupported)).apply ((xinvalid_related_name)) ((xinvalid_related_name))))) ("Related name must be a valid Python identifier or end with a '+'") ((xfield)) ("fields.E306"))))))
                xtest_related_field_has_valid_related_name.write
                  [xself]
                    memory > xrelated_names
                    memory > xdigit
                    memory > xlowercase
                    memory > xChild
                    memory > xuppercase
                    seq > @
                      seq
                        xlowercase.write "a"
                        xuppercase.write "A"
                        xdigit.write 0
                        xrelated_names.write (((unsupported)).apply (("%s_starts_with_lowercase".mod (xlowercase))) (("%s_tarts_with_uppercase".mod (xuppercase))) ("_starts_with_underscore") (("contains_%s_digit".mod (xdigit))) ("ends_with_plus+") ("_+") ("+") ("試") ("試驗+"))
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply ((xrelated_name)) ((xrelated_names)))
                          seq
                            xChild.write (((xtype)).apply (("Child%s".mod (xrelated_name))) ((((unsupported)).apply (((xmodels).xModel)))) ((((unsupported)).apply ("parent") ((((unsupported)).apply (((xmodels).xForeignKey)) ("Parent") (((xmodels).xCASCADE)) ((xrelated_name)))) ("__module__") (((xParent).x__module__)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xChild).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_to_fields_exist.write
                  [xself]
                    memory > xfield
                    memory > xparent
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xparent.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xParent)) (((xmodels).xSET_NULL)) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("a") ("b"))))
                        xfield.write (((((xChild).x_meta).xget_field)).apply ("parent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The to_field 'a' doesn't exist on the related model 'invalid_models_tests.Parent'.") ((xfield)) ("fields.E312"))) ((((unsupported)).apply ((xError)) ("The to_field 'b' doesn't exist on the related model 'invalid_models_tests.Parent'.") ((xfield)) ("fields.E312"))))))
                xtest_to_fields_not_checked_if_related_model_doesnt_exist.write
                  [xself]
                    memory > xfield
                    memory > xparent
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xparent.write (((unsupported)).apply (((xmodels).xForeignObject)) ("invalid_models_tests.Parent") (((xmodels).xSET_NULL)) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("a") ("b"))))
                        xfield.write (((((xChild).x_meta).xget_field)).apply ("parent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field defines a relation with model 'invalid_models_tests.Parent', which is either not installed, or is abstract.") ("fields.E300") ((xfield)))))))
                xtest_invalid_related_query_name.write
                  [xself]
                    memory > xfirst
                    memory > xsecond
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("contains__double"))
                            xsecond.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("ends_underscore_"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse query name 'contains__double' must not contain '__'.") ("Add or change a related_name or related_query_name argument for this field.") ((((((xModel).x_meta).xget_field)).apply ("first"))) ("fields.E309"))) ((((unsupported)).apply ((xError)) ("Reverse query name 'ends_underscore_' must not end with an underscore.") ("Add or change a related_name or related_query_name argument for this field.") ((((((xModel).x_meta).xget_field)).apply ("second"))) ("fields.E308"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_fk_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xIntegerField)).apply)) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_fk_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_fk_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_m2m_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xIntegerField)).apply)) (((((xmodels).xManyToManyField)).apply ("Target"))))
                xtest_m2m_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) (((((xmodels).xManyToManyField)).apply ("Target"))))
                xtest_m2m_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_accessor_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) (((((xmodels).xManyToManyField)).apply ("Target"))))
                x_test_accessor_clash.write
                  [xself xtarget xrelative]
                    memory > xmodel_set
                    memory > xrel
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel_set.write (xtarget)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xrel.write (xrelative)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.model_set' for 'invalid_models_tests.Model.rel' clashes with field name 'invalid_models_tests.Target.model_set'.") ("Rename field 'invalid_models_tests.Target.model_set', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.rel'.") ((((((xModel).x_meta).xget_field)).apply ("rel"))) ("fields.E302"))))))
                xtest_clash_between_accessors.write
                  [xself]
                    memory > xm2m
                    memory > xforeign
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xforeign.write ((((xmodels).xForeignKey)).apply ((xTarget)) (((xmodels).xCASCADE)))
                            xm2m.write ((((xmodels).xManyToManyField)).apply ((xTarget)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.model_set' for 'invalid_models_tests.Model.foreign' clashes with reverse accessor for 'invalid_models_tests.Model.m2m'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.foreign' or 'invalid_models_tests.Model.m2m'.") ((((((xModel).x_meta).xget_field)).apply ("foreign"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.model_set' for 'invalid_models_tests.Model.m2m' clashes with reverse accessor for 'invalid_models_tests.Model.foreign'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.m2m' or 'invalid_models_tests.Model.foreign'.") ((((((xModel).x_meta).xget_field)).apply ("m2m"))) ("fields.E304"))))))
                xtest_m2m_to_m2m_with_inheritance.write
                  [xself]
                    memory > xchildren
                    memory > xm2m_clash
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xchildren.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("Child") ("m2m_clash") ("no_clash"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xm2m_clash.write ((((xmodels).xManyToManyField)).apply ("Target"))
                        (((unsupported)).apply ((xParent)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Child.m2m_clash' for 'invalid_models_tests.Model.children' clashes with field name 'invalid_models_tests.Child.m2m_clash'.") ("Rename field 'invalid_models_tests.Child.m2m_clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.children'.") ((((((xModel).x_meta).xget_field)).apply ("children"))) ("fields.E302"))))))
                xtest_no_clash_for_hidden_related_name.write
                  [xself]
                    memory > xthing2
                    memory > xthing1
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xthing1.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xStub)) ("+"))
                            xthing2.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xStub)) ("+"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xthing1.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xStub)) (((xmodels).xCASCADE)) ("+"))
                            xthing2.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xStub)) (((xmodels).xCASCADE)) ("+"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xManyToManyRel).xcheck)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xFKRel).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_fk_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xIntegerField)).apply)) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_fk_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_fk_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) (((((xmodels).xForeignKey)).apply ("Target") (((xmodels).xCASCADE)))))
                xtest_m2m_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xIntegerField)).apply)) (((((xmodels).xManyToManyField)).apply ("Target"))))
                xtest_m2m_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) (((((xmodels).xManyToManyField)).apply ("Target"))))
                xtest_m2m_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_reverse_query_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) (((((xmodels).xManyToManyField)).apply ("Target"))))
                x_test_reverse_query_name_clash.write
                  [xself xtarget xrelative]
                    memory > xmodel
                    memory > xrel
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel.write (xtarget)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xrel.write (xrelative)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.rel' clashes with field name 'invalid_models_tests.Target.model'.") ("Rename field 'invalid_models_tests.Target.model', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.rel'.") ((((((xModel).x_meta).xget_field)).apply ("rel"))) ("fields.E303"))))))
                xtest_no_clash_across_apps_without_accessor.write
                  [xself]
                    memory > x_test
                    memory > xm2m
                    memory > xapp_label
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xapp_label.write "invalid_models_tests"
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xm2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xTarget)) ("+"))
                            (((unsupported)).apply)
                              xapp_label.write "basic"
                        x_test.write
                          []
                            memory > xm2m
                            memory > xapp_label
                            seq > @
                              seq
                                (((unsupported)).apply (((xmodels).xModel)))
                                  seq
                                    xm2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xTarget)) ("+"))
                                    (((unsupported)).apply)
                                      xapp_label.write "invalid_models_tests"
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((x_test)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_fk_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xIntegerField)).apply)) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ("clash"))))
                xtest_fk_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ("clash"))))
                xtest_fk_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ("clash"))))
                xtest_m2m_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xIntegerField)).apply)) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ("clash"))))
                xtest_m2m_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ("clash"))))
                xtest_m2m_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_explicit_related_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ("clash"))))
                x_test_explicit_related_name_clash.write
                  [xself xtarget xrelative]
                    memory > xrel
                    memory > xclash
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xclash.write (xtarget)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xrel.write (xrelative)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.clash' for 'invalid_models_tests.Model.rel' clashes with field name 'invalid_models_tests.Target.clash'.") ("Rename field 'invalid_models_tests.Target.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.rel'.") ((((((xModel).x_meta).xget_field)).apply ("rel"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.rel' clashes with field name 'invalid_models_tests.Target.clash'.") ("Rename field 'invalid_models_tests.Target.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.rel'.") ((((((xModel).x_meta).xget_field)).apply ("rel"))) ("fields.E303"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_fk_to_integer.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xIntegerField)).apply)) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ((xrelated_name)) ("clash"))))
                xtest_hidden_fk_to_integer.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xtest_fk_to_integer)) ("+"))
                xtest_fk_to_fk.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ((xrelated_name)) ("clash"))))
                xtest_hidden_fk_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_fk_to_fk)) ("+"))
                xtest_fk_to_m2m.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) ((((unsupported)).apply (((xmodels).xForeignKey)) ("Target") (((xmodels).xCASCADE)) ((xrelated_name)) ("clash"))))
                xtest_hidden_fk_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_fk_to_m2m)) ("+"))
                xtest_m2m_to_integer.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xIntegerField)).apply)) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ((xrelated_name)) ("clash"))))
                xtest_hidden_m2m_to_integer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_m2m_to_integer)) ("+"))
                xtest_m2m_to_fk.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xForeignKey)).apply ("Another") (((xmodels).xCASCADE)))) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ((xrelated_name)) ("clash"))))
                xtest_hidden_m2m_to_fk.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_m2m_to_fk)) ("+"))
                xtest_m2m_to_m2m.write
                  [xself xrelated_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_explicit_related_query_name_clash)) (((((xmodels).xManyToManyField)).apply ("Another"))) ((((unsupported)).apply (((xmodels).xManyToManyField)) ("Target") ((xrelated_name)) ("clash"))))
                xtest_hidden_m2m_to_m2m.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_m2m_to_m2m)) ("+"))
                x_test_explicit_related_query_name_clash.write
                  [xself xtarget xrelative]
                    memory > xrel
                    memory > xclash
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xclash.write (xtarget)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xrel.write (xrelative)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.rel' clashes with field name 'invalid_models_tests.Target.clash'.") ("Rename field 'invalid_models_tests.Target.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.rel'.") ((((((xModel).x_meta).xget_field)).apply ("rel"))) ("fields.E303"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_clash_between_accessors.write
                  [xself]
                    memory > xfirst_m2m
                    memory > xsecond_m2m
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE))
                            xsecond_m2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.model_set' for 'invalid_models_tests.Model.first_m2m' clashes with reverse accessor for 'invalid_models_tests.Model.second_m2m'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.first_m2m' or 'invalid_models_tests.Model.second_m2m'.") ((((((xModel).x_meta).xget_field)).apply ("first_m2m"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.model_set' for 'invalid_models_tests.Model.second_m2m' clashes with reverse accessor for 'invalid_models_tests.Model.first_m2m'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.second_m2m' or 'invalid_models_tests.Model.first_m2m'.") ((((((xModel).x_meta).xget_field)).apply ("second_m2m"))) ("fields.E304"))))))
                xtest_accessor_clash.write
                  [xself]
                    memory > xmodel_set
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel_set.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.model_set' for 'invalid_models_tests.Model.model_set' clashes with field name 'invalid_models_tests.Model.model_set'.") ("Rename field 'invalid_models_tests.Model.model_set', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.model_set'.") ((((((xModel).x_meta).xget_field)).apply ("model_set"))) ("fields.E302"))))))
                xtest_reverse_query_name_clash.write
                  [xself]
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.model' clashes with field name 'invalid_models_tests.Model.model'.") ("Rename field 'invalid_models_tests.Model.model', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.model'.") ((((((xModel).x_meta).xget_field)).apply ("model"))) ("fields.E303"))))))
                xtest_clash_under_explicit_related_name.write
                  [xself]
                    memory > xm2m
                    memory > xclash
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xclash.write ((((xmodels).xIntegerField)).apply)
                            xm2m.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE) ("clash"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.clash' for 'invalid_models_tests.Model.m2m' clashes with field name 'invalid_models_tests.Model.clash'.") ("Rename field 'invalid_models_tests.Model.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.m2m'.") ((((((xModel).x_meta).xget_field)).apply ("m2m"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.m2m' clashes with field name 'invalid_models_tests.Model.clash'.") ("Rename field 'invalid_models_tests.Model.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.m2m'.") ((((((xModel).x_meta).xget_field)).apply ("m2m"))) ("fields.E303"))))))
                xtest_valid_model.write
                  [xself]
                    memory > xfirst
                    memory > xsecond
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE) ("first_accessor"))
                            xsecond.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("self") (FALSE) ("second_accessor"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_accessor_clash.write
                  [xself]
                    memory > xmodel_set
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel_set.write ((((xmodels).xForeignKey)).apply ("Model") (((xmodels).xCASCADE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.model_set' for 'invalid_models_tests.Model.model_set' clashes with field name 'invalid_models_tests.Model.model_set'.") ("Rename field 'invalid_models_tests.Model.model_set', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.model_set'.") ((((((xModel).x_meta).xget_field)).apply ("model_set"))) ("fields.E302"))))))
                xtest_reverse_query_name_clash.write
                  [xself]
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xmodel.write ((((xmodels).xForeignKey)).apply ("Model") (((xmodels).xCASCADE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.model' clashes with field name 'invalid_models_tests.Model.model'.") ("Rename field 'invalid_models_tests.Model.model', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.model'.") ((((((xModel).x_meta).xget_field)).apply ("model"))) ("fields.E303"))))))
                xtest_clash_under_explicit_related_name.write
                  [xself]
                    memory > xforeign
                    memory > xclash
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xclash.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                            xforeign.write (((unsupported)).apply (((xmodels).xForeignKey)) ("Model") (((xmodels).xCASCADE)) ("clash"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Model.clash' for 'invalid_models_tests.Model.foreign' clashes with field name 'invalid_models_tests.Model.clash'.") ("Rename field 'invalid_models_tests.Model.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.foreign'.") ((((((xModel).x_meta).xget_field)).apply ("foreign"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.foreign' clashes with field name 'invalid_models_tests.Model.clash'.") ("Rename field 'invalid_models_tests.Model.clash', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.foreign'.") ((((((xModel).x_meta).xget_field)).apply ("foreign"))) ("fields.E303"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_complex_clash.write
                  [xself]
                    memory > xtgt_safe
                    memory > xclash
                    memory > xm2m_2
                    memory > xclash1_set
                    memory > xmodel
                    memory > xforeign_1
                    memory > xm2m_1
                    memory > xforeign_2
                    memory > xsrc_safe
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtgt_safe.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                            xclash.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                            xmodel.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                            xclash1_set.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsrc_safe.write (((unsupported)).apply (((xmodels).xCharField)) (10))
                            xforeign_1.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("id"))
                            xforeign_2.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xTarget)) (((xmodels).xCASCADE)) ("src_safe"))
                            xm2m_1.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xTarget)) ("id"))
                            xm2m_2.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xTarget)) ("src_safe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xModel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.id' for 'invalid_models_tests.Model.foreign_1' clashes with field name 'invalid_models_tests.Target.id'.") ("Rename field 'invalid_models_tests.Target.id', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.foreign_1'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_1"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.foreign_1' clashes with field name 'invalid_models_tests.Target.id'.") ("Rename field 'invalid_models_tests.Target.id', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.foreign_1'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_1"))) ("fields.E303"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.id' for 'invalid_models_tests.Model.foreign_1' clashes with reverse accessor for 'invalid_models_tests.Model.m2m_1'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.foreign_1' or 'invalid_models_tests.Model.m2m_1'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_1"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.foreign_1' clashes with reverse query name for 'invalid_models_tests.Model.m2m_1'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.foreign_1' or 'invalid_models_tests.Model.m2m_1'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_1"))) ("fields.E305"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.src_safe' for 'invalid_models_tests.Model.foreign_2' clashes with reverse accessor for 'invalid_models_tests.Model.m2m_2'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.foreign_2' or 'invalid_models_tests.Model.m2m_2'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_2"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.foreign_2' clashes with reverse query name for 'invalid_models_tests.Model.m2m_2'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.foreign_2' or 'invalid_models_tests.Model.m2m_2'.") ((((((xModel).x_meta).xget_field)).apply ("foreign_2"))) ("fields.E305"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.id' for 'invalid_models_tests.Model.m2m_1' clashes with field name 'invalid_models_tests.Target.id'.") ("Rename field 'invalid_models_tests.Target.id', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.m2m_1'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_1"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.m2m_1' clashes with field name 'invalid_models_tests.Target.id'.") ("Rename field 'invalid_models_tests.Target.id', or add/change a related_name argument to the definition for field 'invalid_models_tests.Model.m2m_1'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_1"))) ("fields.E303"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.id' for 'invalid_models_tests.Model.m2m_1' clashes with reverse accessor for 'invalid_models_tests.Model.foreign_1'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.m2m_1' or 'invalid_models_tests.Model.foreign_1'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_1"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.m2m_1' clashes with reverse query name for 'invalid_models_tests.Model.foreign_1'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.m2m_1' or 'invalid_models_tests.Model.foreign_1'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_1"))) ("fields.E305"))) ((((unsupported)).apply ((xError)) ("Reverse accessor 'Target.src_safe' for 'invalid_models_tests.Model.m2m_2' clashes with reverse accessor for 'invalid_models_tests.Model.foreign_2'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.m2m_2' or 'invalid_models_tests.Model.foreign_2'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_2"))) ("fields.E304"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'invalid_models_tests.Model.m2m_2' clashes with reverse query name for 'invalid_models_tests.Model.foreign_2'.") ("Add or change a related_name argument to the definition for 'invalid_models_tests.Model.m2m_2' or 'invalid_models_tests.Model.foreign_2'.") ((((((xModel).x_meta).xget_field)).apply ("m2m_2"))) ("fields.E305"))))))
                xtest_clash_parent_link.write
                  [xself]
                    memory > xerrors
                    memory > xother_parent
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply ((xParent)))
                          xother_parent.write ((((xmodels).xOneToOneField)).apply ((xParent)) (((xmodels).xCASCADE)))
                        xerrors.write (((unsupported)).apply ((((unsupported)).apply ("fields.E304") ("accessor") (" 'Parent.child'") ("parent_ptr") ("other_parent"))) ((((unsupported)).apply ("fields.E305") ("query name") ("") ("parent_ptr") ("other_parent"))) ((((unsupported)).apply ("fields.E304") ("accessor") (" 'Parent.child'") ("other_parent") ("parent_ptr"))) ((((unsupported)).apply ("fields.E305") ("query name") ("") ("other_parent") ("parent_ptr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xChild).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) (("Reverse %s%s for 'invalid_models_tests.Child.%s' clashes with reverse %s for 'invalid_models_tests.Child.%s'.".mod (((unsupported)).apply ((xattr)) ((xrel_name)) ((xfield_name)) ((xattr)) ((xclash_name))))) (("Add or change a related_name argument to the definition for 'invalid_models_tests.Child.%s' or 'invalid_models_tests.Child.%s'.".mod (((unsupported)).apply ((xfield_name)) ((xclash_name))))) ((((((xChild).x_meta).xget_field)).apply ((xfield_name)))) ((xerror_id)))) ((((unsupported)).apply ((xerror_id)) ((xattr)) ((xrel_name)) ((xfield_name)) ((xclash_name)))) ((xerrors)))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_m2m_field_argument_validation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot specify through_fields without a through model"))))
                          (((unsupported)).apply (((xmodels).xManyToManyField)) ((xFan)) ((((unsupported)).apply ("f1") ("f2"))))
                xtest_invalid_order.write
                  [xself]
                    memory > xevent
                    memory > xfield
                    memory > xinvitees
                    memory > xinvitee
                    memory > xinviter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xinvitees.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xFan)) ("Invitation") ((((unsupported)).apply ("invitee") ("event"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xevent.write ((((xmodels).xForeignKey)).apply ((xEvent)) (((xmodels).xCASCADE)))
                            xinvitee.write ((((xmodels).xForeignKey)).apply ((xFan)) (((xmodels).xCASCADE)))
                            xinviter.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xFan)) (((xmodels).xCASCADE)) ("+"))
                        xfield.write (((((xEvent).x_meta).xget_field)).apply ("invitees"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xEvent)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'Invitation.invitee' is not a foreign key to 'Event'.") ("Did you mean one of the following foreign keys to 'Event': event?") ((xfield)) ("fields.E339"))) ((((unsupported)).apply ((xError)) ("'Invitation.event' is not a foreign key to 'Fan'.") ("Did you mean one of the following foreign keys to 'Fan': invitee, inviter?") ((xfield)) ("fields.E339"))))))
                xtest_invalid_field.write
                  [xself]
                    memory > xevent
                    memory > xfield
                    memory > xinvitees
                    memory > xinvitee
                    memory > xinviter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xinvitees.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xFan)) ("Invitation") ((((unsupported)).apply ("invalid_field_1") ("invalid_field_2"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xevent.write ((((xmodels).xForeignKey)).apply ((xEvent)) (((xmodels).xCASCADE)))
                            xinvitee.write ((((xmodels).xForeignKey)).apply ((xFan)) (((xmodels).xCASCADE)))
                            xinviter.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xFan)) (((xmodels).xCASCADE)) ("+"))
                        xfield.write (((((xEvent).x_meta).xget_field)).apply ("invitees"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xEvent)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The intermediary model 'invalid_models_tests.Invitation' has no field 'invalid_field_1'.") ("Did you mean one of the following foreign keys to 'Event': event?") ((xfield)) ("fields.E338"))) ((((unsupported)).apply ((xError)) ("The intermediary model 'invalid_models_tests.Invitation' has no field 'invalid_field_2'.") ("Did you mean one of the following foreign keys to 'Fan': invitee, inviter?") ((xfield)) ("fields.E338"))))))
                xtest_explicit_field_names.write
                  [xself]
                    memory > xevent
                    memory > xfield
                    memory > xinvitees
                    memory > xinvitee
                    memory > xinviter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xinvitees.write (((unsupported)).apply (((xmodels).xManyToManyField)) ((xFan)) ("Invitation") ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("invitee"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xevent.write ((((xmodels).xForeignKey)).apply ((xEvent)) (((xmodels).xCASCADE)))
                            xinvitee.write ((((xmodels).xForeignKey)).apply ((xFan)) (((xmodels).xCASCADE)))
                            xinviter.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xFan)) (((xmodels).xCASCADE)) ("+"))
                        xfield.write (((((xEvent).x_meta).xget_field)).apply ("invitees"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xEvent)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Field specifies 'through_fields' but does not provide the names of the two link fields that should be used for the relation through model 'invalid_models_tests.Invitation'.") ("Make sure you specify 'through_fields' as through_fields=('field1', 'field2')") ((xfield)) ("fields.E337"))))))
                xtest_superset_foreign_object.write
                  [xself]
                    memory > xfield
                    memory > xc
                    memory > xparent
                    memory > xunique_together
                    memory > xa
                    memory > xb
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xc.write ((((xmodels).xPositiveIntegerField)).apply)
                            (((unsupported)).apply)
                              xunique_together.write (((unsupported)).apply ((((unsupported)).apply ("a") ("b") ("c"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xvalue.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xparent.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xParent)) (((xmodels).xSET_NULL)) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("a") ("b"))) ("children"))
                        xfield.write (((((xChild).x_meta).xget_field)).apply ("parent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xChild)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("No subset of the fields 'a', 'b' on model 'Parent' is unique.") ("Mark a single field as unique=True or add a set of fields to a unique constraint (via unique_together or a UniqueConstraint (without condition) in the model Meta.constraints).") ((xfield)) ("fields.E310"))))))
                xtest_intersection_foreign_object.write
                  [xself]
                    memory > xd
                    memory > xfield
                    memory > xc
                    memory > xparent
                    memory > xunique_together
                    memory > xa
                    memory > xb
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xc.write ((((xmodels).xPositiveIntegerField)).apply)
                            xd.write ((((xmodels).xPositiveIntegerField)).apply)
                            (((unsupported)).apply)
                              xunique_together.write (((unsupported)).apply ((((unsupported)).apply ("a") ("b") ("c"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xa.write ((((xmodels).xPositiveIntegerField)).apply)
                            xb.write ((((xmodels).xPositiveIntegerField)).apply)
                            xd.write ((((xmodels).xPositiveIntegerField)).apply)
                            xvalue.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xparent.write (((unsupported)).apply (((xmodels).xForeignObject)) ((xParent)) (((xmodels).xSET_NULL)) ((((unsupported)).apply ("a") ("b") ("d"))) ((((unsupported)).apply ("a") ("b") ("d"))) ("children"))
                        xfield.write (((((xChild).x_meta).xget_field)).apply ("parent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((xChild)))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("No subset of the fields 'a', 'b', 'd' on model 'Parent' is unique.") ("Mark a single field as unique=True or add a set of fields to a unique constraint (via unique_together or a UniqueConstraint (without condition) in the model Meta.constraints).") ((xfield)) ("fields.E310"))))))