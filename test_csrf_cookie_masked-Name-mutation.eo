memory > xSettings
memory > xsettings
memory > xModuleType
memory > xCSRF_COOKIE_MASKED_DEPRECATED_MSG
memory > xSimpleTestCase
memory > xRemovedInDjango50Warning
memory > xsys
[] > test_csrf_cookie_masked
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmsg2
        memory > xtest_access
        memory > xtest_settings_init_warning
        memory > xtest_override_settings_warning
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xmsg2.write (xCSRF_COOKIE_MASKED_DEPRECATED_MSG)
                xtest_override_settings_warning.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRemovedInDjango50Warning)) (((xself).xmsg)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                xtest_settings_init_warning.write
                  [xself]
                    memory > xsettings_module
                    seq > @
                      seq
                        xsettings_module.write (((xModuleType)).apply ("fake_settings_module"))
                        (((unsupported)).apply (((xsettings_module).xUSE_TZ)) (FALSE))
                        (((unsupported)).apply (((xsettings_module).xCSRF_COOKIE_MASKED)) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("fake_settings_module"))) ((xsettings_module)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRemovedInDjango50Warning)) (((xself).xmsg)))))
                            bogusForceDataize.write (((xSettings)).apply ("fake_settings_module"))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("fake_settings_module"))))))))
                xtest_access.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsettings).xCSRF_COOKIE_MASKED)) (FALSE))