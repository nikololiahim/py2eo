memory > xerr
memory > xre
memory > xSyntaxError
memory > xunittest
memory > xSyntaxTestCase
memory > xisinstance
memory > xmo
memory > xstr
memory > xcompile
memory > xtest_syntax
memory > xsupport
memory > x__name__
memory > xIndentationError
[] > test_syntax
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_break_outside_loop
        memory > xtest_return_outside_function
        memory > xtest_kwargs_last2
        memory > xtest_kwargs_last
        memory > xtest_continue_outside_loop
        memory > x_check_error
        memory > xtest_yield_outside_function
        memory > xtest_nonlocal_param_err_first
        memory > xtest_global_param_err_first
        memory > xtest_unexpected_indent
        memory > xtest_no_indent
        memory > xtest_bad_outdent
        memory > xtest_assign_call
        memory > xtest_main
        memory > xtest_assign_del
        memory > xtest_kwargs_last3
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_check_error.write
                  [xself xcode xerrtext xfilename xmode xsubclass xlineno xoffset]
                    memory > xmo2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xSyntaxError)))
                          bogusForceDataize.write (((xcompile)).apply ((xcode)) ((xfilename)) ((xmode)))
                          seq
                            ((xsubclass).and ((((xisinstance)).apply ((xerr)) ((xsubclass))).not)).if
                              bogusForceDataize.write ((((xself).xfail)).apply (("SyntaxError is not a %s".mod ((xsubclass).x__name__))))
                            xmo2.write ((((xre).xsearch)).apply ((xerrtext)) ((((xstr)).apply ((xerr)))))
                            (((unsupported)).apply ((xmo)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xfail)).apply (("SyntaxError did not contain '%r'".mod (((unsupported)).apply ((xerrtext))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xfilename)) ((xfilename)))
                            (((unsupported)).apply ((xlineno)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xlineno)) ((xlineno)))
                            (((unsupported)).apply ((xoffset)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xoffset)) ((xoffset)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("compile() did not raise SyntaxError"))
                xtest_assign_call.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("f() = 1") ("assign"))
                xtest_assign_del.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("del f()") ("delete"))
                xtest_global_param_err_first.write
                  [xself]
                    memory > xsource
                    seq > @
                      seq
                        xsource.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_check_error)) ((xsource)) ("parameter and global") (3))
                xtest_nonlocal_param_err_first.write
                  [xself]
                    memory > xsource
                    seq > @
                      seq
                        xsource.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_check_error)) ((xsource)) ("parameter and nonlocal") (3))
                xtest_break_outside_loop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("break") ("outside loop"))
                xtest_yield_outside_function.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: yieldnelse:  x=1") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 1: passnelse: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("while 0: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("while 0: yieldnelse:  x=1") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 0: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 1: passn  else: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  while 0: yield") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  while 0: yieldn  else:  x = 1") ("outside function"))
                xtest_return_outside_function.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: return") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: returnnelse:  x=1") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 1: passnelse: return") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("while 0: return") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 0: return") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  while 0: return") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  while 0: returnn  else:  x=1") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 0: returnn  else: x= 1") ("outside function"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 1: passn  else: return") ("outside function"))
                xtest_break_outside_loop.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: break") ("outside loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: breaknelse:  x=1") ("outside loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 1: passnelse: break") ("outside loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 0: break") ("outside loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 1: passn  else: break") ("outside loop"))
                xtest_continue_outside_loop.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: continue") ("not properly in loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 0: continuenelse:  x=1") ("not properly in loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("if 1: passnelse: continue") ("not properly in loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 0: continue") ("not properly in loop"))
                        bogusForceDataize.write ((((xself).x_check_error)).apply ("class C:n  if 1: passn  else: continue") ("not properly in loop"))
                xtest_unexpected_indent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_error)) ("foo()n bar()n") ("unexpected indent") ((xIndentationError)))
                xtest_no_indent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_error)) ("if 1:nfoo()") ("expected an indented block") ((xIndentationError)))
                xtest_bad_outdent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_error)) ("if 1:n  foo()n bar()") ("unindent does not match .* level") ((xIndentationError)))
                xtest_kwargs_last.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("int(base=10, '2')") ("positional argument follows keyword argument"))
                xtest_kwargs_last2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("int(**{'base': 10}, '2')") ("positional argument follows keyword argument unpacking"))
                xtest_kwargs_last3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_error)).apply ("int(**{'base': 10}, *['2'])") ("iterable argument unpacking follows keyword argument unpacking"))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xSyntaxTestCase)))
                    (((unsupported)).apply)
                    (((unsupported)).apply (((xsupport).xrun_doctest)) ((xtest_syntax)) (TRUE))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)