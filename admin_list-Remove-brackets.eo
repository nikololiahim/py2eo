memory > xk
memory > xenumerate
memory > xlabel_for_field
memory > xformats
memory > xstr
memory > xPAGE_VAR
memory > xORDER_VAR
memory > xform
memory > xfield_index
memory > xot
memory > xALL_VAR
memory > xResultList
memory > xres
memory > xyear
memory > xdisplay_for_field
memory > xSEARCH_VAR
memory > xNoReverseMatch
memory > xstatic
memory > xtimezone
memory > xdatetime
memory > xlookup_field
memory > xlist
memory > xcontext
memory > xdisplay_for_value
memory > xh
memory > xInclusionAdminNode
memory > xcallable
memory > xtext
memory > xf
memory > xsettings
memory > xint
memory > xhasattr
memory > xitems
memory > xproperty
memory > xget_template
memory > xi
memory > xmonth
memory > xsuper
memory > xadd_preserved_filters
memory > xcapfirst
memory > xmark_safe
memory > xObjectDoesNotExist
memory > xgetattr
memory > xv
memory > xformat_html
memory > xzip
memory > xattr
memory > xget_fields_from_path
memory > xmodels
memory > xIS_POPUP_VAR
memory > xLibrary
memory > xfield_name
memory > xj
memory > xisinstance
[] > admin_list
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdate_hierarchy
        memory > xresult_headers
        memory > xsearch_form_tag
        memory > xadmin_list_filter
        memory > xitems_for_result
        memory > xregister
        memory > xpaginator_number
        memory > x__init__
        memory > xadmin_actions
        memory > xresult_list_tag
        memory > xresult_hidden_fields
        memory > xpagination
        memory > x_coerce_field_name
        memory > x_boolean_icon
        memory > xadmin_actions_tag
        memory > xsearch_form
        memory > x_
        memory > xresult_list
        memory > xdate_hierarchy_tag
        memory > xpagination_tag
        memory > xchange_list_object_tools_tag
        memory > xresults
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xregister.write (xLibrary)
            xpaginator_number.write
              [xcl xi]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xi).eq (((xcl).xpaginator).xELLIPSIS)).if
                      (((unsupported)).apply ((((xformat_html)).apply ("{} ") ((((xcl).xpaginator).xELLIPSIS)))))
                      ((xi).eq ((xcl).xpage_num)).if
                        (((unsupported)).apply ((((xformat_html)).apply ("<span class=\"this-page\">{}</span> ") ((xi)))))
                        (((unsupported)).apply ((((xformat_html)).apply ("<a href=\"{}\"{}>{}</a> ") (((((xcl).xget_query_string)).apply ((((unsupported)).apply ((xPAGE_VAR)) ((xi)))))) ((((xmark_safe)).apply ((((xi).eq (((xcl).xpaginator).xnum_pages)).if " class=\"end\"" "")))) ((xi)))))
            xpagination.write
              [xcl]
                memory > xpagination_required
                memory > xneed_show_all_link
                memory > xpage_range
                seq > @
                  seq
                    (((unsupported)).apply)
                    xpagination_required.write (((((xcl).xshow_all).not).or (((xcl).xcan_show_all).not)).and ((xcl).xmulti_page))
                    xpage_range.write ((xpagination_required).if (((((xcl).xpaginator).xget_elided_page_range)).apply (((xcl).xpage_num))) (((unsupported)).apply))
                    xneed_show_all_link.write ((((xcl).xcan_show_all).and (((xcl).xshow_all).not)).and ((xcl).xmulti_page))
                    (((unsupported)).apply ((((unsupported)).apply ("cl") ((xcl)) ("pagination_required") ((xpagination_required)) ("show_all_url") (((xneed_show_all_link).and ((((xcl).xget_query_string)).apply ((((unsupported)).apply ((xALL_VAR)) ("")))))) ("page_range") ((xpage_range)) ("ALL_VAR") ((xALL_VAR)) ("1") (1))))
            xpagination_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((xpagination)) ("pagination.html") (FALSE))))
            xresult_headers.write
              [xcl]
                memory > xis_field_sortable
                memory > xsort_priority
                memory > xo_list_remove
                memory > xo_list_toggle
                memory > xis_sorted
                memory > xfield_name
                memory > xadmin_order_field
                memory > xnew_order_type
                memory > xmake_qs_param
                memory > xordering_field_columns
                memory > xo_list_primary
                memory > xparam
                memory > xorder_type
                memory > xth_classes
                seq > @
                  seq
                    (((unsupported)).apply)
                    xordering_field_columns.write ((xcl).xget_ordering_field_columns)
                    (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfield_name)))) ((((xenumerate)).apply (((xcl).xlist_display)))))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((xattr)))) ((((unsupported)).apply ((xlabel_for_field)) ((xfield_name)) (((xcl).xmodel)) (((xcl).xmodel_admin)) (TRUE))))
                        xis_field_sortable.write ((((unsupported)).apply (((xcl).xsortable_by)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xfield_name)) (((xcl).xsortable_by))))
                        (xattr).if
                          seq
                            xfield_name.write (((x_coerce_field_name)).apply ((xfield_name)) ((xi)))
                            ((xfield_name).eq "action_checkbox").if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ("text") ((xtext)) ("class_attrib") ((((xmark_safe)).apply (" class=\"action-checkbox-column\""))) ("sortable") (FALSE))))
                                (((unsupported)).apply)
                            xadmin_order_field.write (((xgetattr)).apply ((xattr)) ("admin_order_field") ("None: is there a None literal in the EO language?"))
                            ((((xisinstance)).apply ((xattr)) ((xproperty))).and (((xhasattr)).apply ((xattr)) ("fget"))).if
                              xadmin_order_field.write (((xgetattr)).apply (((xattr).xfget)) ("admin_order_field") ("None: is there a None literal in the EO language?"))
                            ((xadmin_order_field).not).if
                              xis_field_sortable.write FALSE
                        ((xis_field_sortable).not).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ("text") ((xtext)) ("class_attrib") ((((xformat_html)).apply (" class=\"column-{}\"") ((xfield_name)))) ("sortable") (FALSE))))
                            (((unsupported)).apply)
                        xth_classes.write (((unsupported)).apply ("sortable") (((("column-{}".xformat)).apply ((xfield_name)))))
                        xorder_type.write ""
                        xnew_order_type.write "asc"
                        xsort_priority.write 0
                        xis_sorted.write (((unsupported)).apply ((xi)) ((xordering_field_columns)))
                        (xis_sorted).if
                          seq
                            xorder_type.write (((((xordering_field_columns).xget)).apply ((xi))).xlower)
                            xsort_priority.write (((((((xlist)).apply ((xordering_field_columns))).xindex)).apply ((xi))).add 1)
                            bogusForceDataize.write ((((xth_classes).xappend)).apply (("sorted %sending".mod (xorder_type))))
                            xnew_order_type.write (((unsupported)).apply ((((unsupported)).apply ("asc") ("desc") ("desc") ("asc"))) ((xorder_type)))
                        xo_list_primary.write (((unsupported)).apply)
                        xo_list_remove.write (((unsupported)).apply)
                        xo_list_toggle.write (((unsupported)).apply)
                        xmake_qs_param.write
                          [xt xn]
                            seq > @
                              (((unsupported)).apply (((((xt).eq "desc").if "-" "").add (((xstr)).apply ((xn))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xj)) ((xot)))) (((xordering_field_columns).xitems)))
                          ((xj).eq (xi)).if
                            seq
                              xparam.write (((xmake_qs_param)).apply ((xnew_order_type)) ((xj)))
                              bogusForceDataize.write ((((xo_list_primary).xinsert)).apply (0) ((xparam)))
                              bogusForceDataize.write ((((xo_list_toggle).xappend)).apply ((xparam)))
                            seq
                              xparam.write (((xmake_qs_param)).apply ((xot)) ((xj)))
                              bogusForceDataize.write ((((xo_list_primary).xappend)).apply ((xparam)))
                              bogusForceDataize.write ((((xo_list_toggle).xappend)).apply ((xparam)))
                              bogusForceDataize.write ((((xo_list_remove).xappend)).apply ((xparam)))
                        (((unsupported)).apply ((xi)) ((xordering_field_columns))).if
                          bogusForceDataize.write ((((xo_list_primary).xinsert)).apply (0) ((((xmake_qs_param)).apply ((xnew_order_type)) ((xi)))))
                        (((unsupported)).apply ((((unsupported)).apply ("text") ((xtext)) ("sortable") (TRUE) ("sorted") ((xis_sorted)) ("ascending") (((xorder_type).eq "asc")) ("sort_priority") ((xsort_priority)) ("url_primary") (((((xcl).xget_query_string)).apply ((((unsupported)).apply ((xORDER_VAR)) ((((".".xjoin)).apply ((xo_list_primary)))))))) ("url_remove") (((((xcl).xget_query_string)).apply ((((unsupported)).apply ((xORDER_VAR)) ((((".".xjoin)).apply ((xo_list_remove)))))))) ("url_toggle") (((((xcl).xget_query_string)).apply ((((unsupported)).apply ((xORDER_VAR)) ((((".".xjoin)).apply ((xo_list_toggle)))))))) ("class_attrib") (((xth_classes).if (((xformat_html)).apply (" class=\"{}\"") ((((" ".xjoin)).apply ((xth_classes))))) "")))))
            x_boolean_icon.write
              [xfield_val]
                memory > xicon_url
                seq > @
                  seq
                    xicon_url.write (((xstatic)).apply (("admin/img/icon-%s.svg".mod (((unsupported)).apply ((((unsupported)).apply (TRUE) ("yes") (FALSE) ("no") ("None: is there a None literal in the EO language?") ("unknown"))) ((xfield_val))))))
                    (((unsupported)).apply ((((xformat_html)).apply ("<img src=\"{}\" alt=\"{}\">") ((xicon_url)) ((xfield_val)))))
            x_coerce_field_name.write
              [xfield_name xfield_index]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xcallable)).apply ((xfield_name))).if
                      (((xfield_name).x__name__).eq "<lambda>").if
                        (((unsupported)).apply (("lambda".add (((xstr)).apply ((xfield_index))))))
                        (((unsupported)).apply (((xfield_name).x__name__)))
                    (((unsupported)).apply ((xfield_name)))
            xitems_for_result.write
              [xcl xresult xform]
                memory > xresult_repr
                memory > xfield_val
                memory > xlink_or_text
                memory > xbf
                memory > xtable_tag
                memory > xpk
                memory > xrow_class
                memory > xattr
                memory > xvalue
                memory > xboolean
                memory > xurl
                memory > xlink_in_col
                memory > xrow_classes
                memory > xfirst
                memory > xempty_value_display
                seq > @
                  seq
                    (((unsupported)).apply)
                    xlink_in_col.write
                      [xis_first xfield_name xcl]
                        seq > @
                          seq
                            (((unsupported)).apply (((xcl).xlist_display_links)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply (FALSE))
                            ((xis_first).and (((xcl).xlist_display_links).not)).if
                              (((unsupported)).apply (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) (((xcl).xlist_display_links)))))
                    xfirst.write TRUE
                    xpk.write ((((xcl).xlookup_opts).xpk).xattname)
                    (((unsupported)).apply ((((unsupported)).apply ((xfield_index)) ((xfield_name)))) ((((xenumerate)).apply (((xcl).xlist_display)))))
                      seq
                        xempty_value_display.write (((xcl).xmodel_admin).xget_empty_value_display)
                        xrow_classes.write (((unsupported)).apply (("field-%s".mod (((x_coerce_field_name)).apply ((xfield_name)) ((xfield_index))))))
                        (((unsupported)).apply ((xObjectDoesNotExist)))
                          (((unsupported)).apply ((((unsupported)).apply ((xf)) ((xattr)) ((xvalue)))) ((((xlookup_field)).apply ((xfield_name)) ((xresult)) (((xcl).xmodel_admin)))))
                          xresult_repr.write (xempty_value_display)
                          seq
                            xempty_value_display.write (((xgetattr)).apply ((xattr)) ("empty_value_display") ((xempty_value_display)))
                            ((((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?")).or ((xf).xauto_created)).if
                              seq
                                ((xfield_name).eq "action_checkbox").if
                                  xrow_classes.write (((unsupported)).apply ("action-checkbox"))
                                xboolean.write (((xgetattr)).apply ((xattr)) ("boolean") (FALSE))
                                xresult_repr.write (((xdisplay_for_value)).apply ((xvalue)) ((xempty_value_display)) ((xboolean)))
                                (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply (((xdatetime).xdate)) (((xdatetime).xtime))))).if
                                  bogusForceDataize.write ((((xrow_classes).xappend)).apply ("nowrap"))
                              seq
                                (((xisinstance)).apply (((xf).xremote_field)) (((xmodels).xManyToOneRel))).if
                                  seq
                                    xfield_val.write (((xgetattr)).apply ((xresult)) (((xf).xname)))
                                    (((unsupported)).apply ((xfield_val)) ("None: is there a None literal in the EO language?")).if
                                      xresult_repr.write (xempty_value_display)
                                      xresult_repr.write (xfield_val)
                                  xresult_repr.write (((xdisplay_for_field)).apply ((xvalue)) ((xf)) ((xempty_value_display)))
                                (((xisinstance)).apply ((xf)) ((((unsupported)).apply (((xmodels).xDateField)) (((xmodels).xTimeField)) (((xmodels).xForeignKey))))).if
                                  bogusForceDataize.write ((((xrow_classes).xappend)).apply ("nowrap"))
                        xrow_class.write (((xmark_safe)).apply ((" class=\"%s\"".mod (((" ".xjoin)).apply ((xrow_classes))))))
                        (((xlink_in_col)).apply ((xfirst)) ((xfield_name)) ((xcl))).if
                          seq
                            xtable_tag.write ((xfirst).if "th" "td")
                            xfirst.write FALSE
                            (((unsupported)).apply ((xNoReverseMatch)))
                              xurl.write ((((xcl).xurl_for_result)).apply ((xresult)))
                              xlink_or_text.write (xresult_repr)
                              seq
                                xurl.write (((xadd_preserved_filters)).apply ((((unsupported)).apply ("preserved_filters") (((xcl).xpreserved_filters)) ("opts") (((xcl).xopts)))) ((xurl)))
                                ((xcl).xto_field).if
                                  xattr.write (((xstr)).apply (((xcl).xto_field)))
                                  xattr.write (xpk)
                                xvalue.write ((((xresult).xserializable_value)).apply ((xattr)))
                                xlink_or_text.write (((xformat_html)).apply ("<a href=\"{}\"{}>{}</a>") ((xurl)) ((((xcl).xis_popup).if (((xformat_html)).apply (" data-popup-opener=\"{}\"") ((xvalue))) "")) ((xresult_repr)))
                            (((unsupported)).apply ((((xformat_html)).apply ("<{}{}>{}</{}>") ((xtable_tag)) ((xrow_class)) ((xlink_or_text)) ((xtable_tag)))))
                          seq
                            (((xform).and (((unsupported)).apply ((xfield_name)) (((xform).xfields)))).and ((((xfield_name).eq (((((xcl).xmodel).x_meta).xpk).xname)).and ((((unsupported)).apply ((xform)) ((((((xcl).xmodel).x_meta).xpk).xname))).xis_hidden)).not)).if
                              seq
                                xbf.write (((unsupported)).apply ((xform)) ((xfield_name)))
                                xresult_repr.write (((xmark_safe)).apply (((((xstr)).apply (((xbf).xerrors))).add (((xstr)).apply ((xbf))))))
                            (((unsupported)).apply ((((xformat_html)).apply ("<td{}>{}</td>") ((xrow_class)) ((xresult_repr)))))
                    ((xform).and (((((unsupported)).apply ((xform)) ((((((xcl).xmodel).x_meta).xpk).xname))).xis_hidden).not)).if
                      (((unsupported)).apply ((((xformat_html)).apply ("<td>{}</td>") ((((unsupported)).apply ((xform)) ((((((xcl).xmodel).x_meta).xpk).xname)))))))
            (((unsupported)).apply ((xlist)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xform]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xform)) ((xform)))
                        bogusForceDataize.write ((((xsuper).x__init__)).apply ((((unsupported)).apply ((xitems)))))
            xresults.write
              [xcl]
                seq > @
                  ((xcl).xformset).if
                    (((unsupported)).apply ((((unsupported)).apply ((xres)) ((xform)))) ((((xzip)).apply (((xcl).xresult_list)) ((((xcl).xformset).xforms)))))
                      (((unsupported)).apply ((((xResultList)).apply ((xform)) ((((xitems_for_result)).apply ((xcl)) ((xres)) ((xform)))))))
                    (((unsupported)).apply ((xres)) (((xcl).xresult_list)))
                      (((unsupported)).apply ((((xResultList)).apply ("None: is there a None literal in the EO language?") ((((xitems_for_result)).apply ((xcl)) ((xres)) ("None: is there a None literal in the EO language?"))))))
            xresult_hidden_fields.write
              [xcl]
                seq > @
                  ((xcl).xformset).if
                    (((unsupported)).apply ((((unsupported)).apply ((xres)) ((xform)))) ((((xzip)).apply (((xcl).xresult_list)) ((((xcl).xformset).xforms)))))
                      ((((unsupported)).apply ((xform)) ((((((xcl).xmodel).x_meta).xpk).xname))).xis_hidden).if
                        (((unsupported)).apply ((((xmark_safe)).apply ((((unsupported)).apply ((xform)) ((((((xcl).xmodel).x_meta).xpk).xname)))))))
            xresult_list.write
              [xcl]
                memory > xheaders
                memory > xnum_sorted_fields
                seq > @
                  seq
                    (((unsupported)).apply)
                    xheaders.write (((xlist)).apply ((((xresult_headers)).apply ((xcl)))))
                    xnum_sorted_fields.write 0
                    (((unsupported)).apply ((xh)) ((xheaders)))
                      ((((unsupported)).apply ((xh)) ("sortable")).and (((unsupported)).apply ((xh)) ("sorted"))).if
                        (((unsupported)).apply ((xnum_sorted_fields)) (1))
                    (((unsupported)).apply ((((unsupported)).apply ("cl") ((xcl)) ("result_hidden_fields") ((((xlist)).apply ((((xresult_hidden_fields)).apply ((xcl)))))) ("result_headers") ((xheaders)) ("num_sorted_fields") ((xnum_sorted_fields)) ("results") ((((xlist)).apply ((((xresults)).apply ((xcl)))))))))
            xresult_list_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((xresult_list)) ("change_list_results.html") (FALSE))))
            xdate_hierarchy.write
              [xcl]
                memory > xfield
                memory > xqs_kwargs
                memory > xdays
                memory > xmonths
                memory > xday_field
                memory > xday
                memory > xmonth_lookup
                memory > xfield_name
                memory > xmonth_field
                memory > xyear_lookup
                memory > xdate_range
                memory > xfield_generic
                memory > xday_lookup
                memory > xyear_field
                memory > xdates_or_datetimes
                memory > xyears
                memory > xlink
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xcl).xdate_hierarchy).if
                      seq
                        xfield_name.write ((xcl).xdate_hierarchy)
                        xfield.write (((unsupported)).apply ((((xget_fields_from_path)).apply (((xcl).xmodel)) ((xfield_name)))) ((1.neg)))
                        (((xisinstance)).apply ((xfield)) (((xmodels).xDateTimeField))).if
                          seq
                            xdates_or_datetimes.write "datetimes"
                            xqs_kwargs.write (((xsettings).xUSE_DEPRECATED_PYTZ).if (((unsupported)).apply ("is_dst") (TRUE)) (((unsupported)).apply))
                          seq
                            xdates_or_datetimes.write "dates"
                            xqs_kwargs.write (((unsupported)).apply)
                        xyear_field.write ("%s__year".mod (xfield_name))
                        xmonth_field.write ("%s__month".mod (xfield_name))
                        xday_field.write ("%s__day".mod (xfield_name))
                        xfield_generic.write ("%s__".mod (xfield_name))
                        xyear_lookup.write (((((xcl).xparams).xget)).apply ((xyear_field)))
                        xmonth_lookup.write (((((xcl).xparams).xget)).apply ((xmonth_field)))
                        xday_lookup.write (((((xcl).xparams).xget)).apply ((xday_field)))
                        xlink.write
                          [xfilters]
                            seq > @
                              (((unsupported)).apply (((((xcl).xget_query_string)).apply ((xfilters)) ((((unsupported)).apply ((xfield_generic)))))))
                        ((((xyear_lookup).or (xmonth_lookup)).or (xday_lookup)).not).if
                          seq
                            xdate_range.write (((unsupported)).apply ((((xcl).xqueryset).xaggregate)) (((((xmodels).xMin)).apply ((xfield_name)))) (((((xmodels).xMax)).apply ((xfield_name)))))
                            ((((unsupported)).apply ((xdate_range)) ("first")).and (((unsupported)).apply ((xdate_range)) ("last"))).if
                              seq
                                ((xdates_or_datetimes).eq "datetimes").if
                                  xdate_range.write (((unsupported)).apply ((xk)) ((((((xtimezone).xis_aware)).apply ((xv))).if ((((xtimezone).xlocaltime)).apply ((xv))) (xv))) ((((unsupported)).apply ((xk)) ((xv)))) (((xdate_range).xitems)))
                                (((((unsupported)).apply ((xdate_range)) ("first")).xyear).eq ((((unsupported)).apply ((xdate_range)) ("last")).xyear)).if
                                  seq
                                    xyear_lookup.write ((((unsupported)).apply ((xdate_range)) ("first")).xyear)
                                    (((((unsupported)).apply ((xdate_range)) ("first")).xmonth).eq ((((unsupported)).apply ((xdate_range)) ("last")).xmonth)).if
                                      xmonth_lookup.write ((((unsupported)).apply ((xdate_range)) ("first")).xmonth)
                        (((xyear_lookup).and (xmonth_lookup)).and (xday_lookup)).if
                          seq
                            xday.write ((((xdatetime).xdate)).apply ((((xint)).apply ((xyear_lookup)))) ((((xint)).apply ((xmonth_lookup)))) ((((xint)).apply ((xday_lookup)))))
                            (((unsupported)).apply ((((unsupported)).apply ("show") (TRUE) ("back") ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply ((xyear_field)) ((xyear_lookup)) ((xmonth_field)) ((xmonth_lookup)))))) ("title") ((((xcapfirst)).apply (((((xformats).xdate_format)).apply ((xday)) ("YEAR_MONTH_FORMAT"))))))) ("choices") ((((unsupported)).apply ((((unsupported)).apply ("title") ((((xcapfirst)).apply (((((xformats).xdate_format)).apply ((xday)) ("MONTH_DAY_FORMAT"))))))))))))
                          ((xyear_lookup).and (xmonth_lookup)).if
                            seq
                              xdays.write (((((xgetattr)).apply (((xcl).xqueryset)) ((xdates_or_datetimes)))).apply ((xfield_name)) ("day") ((((unsupported)).apply ((xqs_kwargs)))))
                              (((unsupported)).apply ((((unsupported)).apply ("show") (TRUE) ("back") ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply ((xyear_field)) ((xyear_lookup)))))) ("title") ((((xstr)).apply ((xyear_lookup)))))) ("choices") ((((unsupported)).apply ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply ((xyear_field)) ((xyear_lookup)) ((xmonth_field)) ((xmonth_lookup)) ((xday_field)) (((xday).xday)))))) ("title") ((((xcapfirst)).apply (((((xformats).xdate_format)).apply ((xday)) ("MONTH_DAY_FORMAT"))))))) ((xday)) ((xdays)))))))
                            (xyear_lookup).if
                              seq
                                xmonths.write (((((xgetattr)).apply (((xcl).xqueryset)) ((xdates_or_datetimes)))).apply ((xfield_name)) ("month") ((((unsupported)).apply ((xqs_kwargs)))))
                                (((unsupported)).apply ((((unsupported)).apply ("show") (TRUE) ("back") ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply)))) ("title") ((((x_)).apply ("All dates"))))) ("choices") ((((unsupported)).apply ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply ((xyear_field)) ((xyear_lookup)) ((xmonth_field)) (((xmonth).xmonth)))))) ("title") ((((xcapfirst)).apply (((((xformats).xdate_format)).apply ((xmonth)) ("YEAR_MONTH_FORMAT"))))))) ((xmonth)) ((xmonths)))))))
                              seq
                                xyears.write (((((xgetattr)).apply (((xcl).xqueryset)) ((xdates_or_datetimes)))).apply ((xfield_name)) ("year") ((((unsupported)).apply ((xqs_kwargs)))))
                                (((unsupported)).apply ((((unsupported)).apply ("show") (TRUE) ("back") ("None: is there a None literal in the EO language?") ("choices") ((((unsupported)).apply ((((unsupported)).apply ("link") ((((xlink)).apply ((((unsupported)).apply ((xyear_field)) ((((xstr)).apply (((xyear).xyear)))))))) ("title") ((((xstr)).apply (((xyear).xyear)))))) ((xyear)) ((xyears)))))))
            xdate_hierarchy_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((xdate_hierarchy)) ("date_hierarchy.html") (FALSE))))
            xsearch_form.write
              [xcl]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ("cl") ((xcl)) ("show_result_count") ((((xcl).xresult_count).neq ((xcl).xfull_result_count))) ("search_var") ((xSEARCH_VAR)) ("is_popup_var") ((xIS_POPUP_VAR)))))
            xsearch_form_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((xsearch_form)) ("search_form.html") (FALSE))))
            xadmin_list_filter.write
              [xcl xspec]
                memory > xtpl
                seq > @
                  (((unsupported)).apply)
                    xtpl.write (((xget_template)).apply (((xspec).xtemplate)))
                    (((unsupported)).apply (((((xtpl).xrender)).apply ((((unsupported)).apply ("title") (((xspec).xtitle)) ("choices") ((((xlist)).apply (((((xspec).xchoices)).apply ((xcl)))))) ("spec") ((xspec)))))))
            xadmin_actions.write
              [xcontext]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("action_index"))) ((((((xcontext).xget)).apply ("action_index") ((1.neg))).add 1)))
                    (((unsupported)).apply ((xcontext)))
            xadmin_actions_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((xadmin_actions)) ("actions.html"))))
            xchange_list_object_tools_tag.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xInclusionAdminNode)) ((xparser)) ((xtoken)) ((((unsupported)).apply ((xcontext)))) ("change_list_object_tools.html"))))