memory > xround
memory > xAutoNameEnum
memory > xexec
memory > xMyMethodEnum
memory > xDupes
memory > xMyStr
memory > xOrdinaryEnum
memory > xCount
memory > xinspect
memory > xSkillLevel
memory > xthreading
memory > xSomeTuple
memory > xMixinWithStrFormatOverrides
memory > xk
memory > xTest
memory > xCoolerColor
memory > xAttributeError
memory > xPlain
memory > xmember
memory > xTestFlag
memory > xlist
memory > xnumber
memory > xStrEnum
memory > xenumerate
memory > xGrades
memory > xValueError
memory > xUniqueEnum
memory > xDirectional
memory > xFluflnum
memory > xEnumMeta
memory > xMonochrome
memory > xstr
memory > xlabel
memory > xMyIntEnum
memory > xOtherEnum
memory > xAlwaysEqual
memory > xColor
memory > xBase
memory > xOrderedDict
memory > xPicklingError
memory > xrange
memory > xReformedColor
memory > xPart
memory > xMaxMixin
memory > xNestedEnum
memory > xAnotherEnum
memory > xvalue
memory > xZeroDivisionError
memory > xLogic
memory > xNamedInt
memory > xEnumWithStrFormatOverrides
memory > x_
memory > xRealLogic
memory > xReplaceGlobalInt
memory > xEnumWithStrOverrides
memory > xtimedelta
memory > xTest1Enum
memory > xproto
memory > xKeyError
memory > xIntLogic
memory > xdate
memory > xdumps
memory > xseason
memory > xHexInt
memory > xmonth_1
memory > xString
memory > xTestFloat
memory > xSomeEnum
memory > xMailManOptions
memory > xauto_enum
memory > xphy
memory > xWeekDay
memory > xNumber
memory > xLabelledIntEnum
memory > xFoo
memory > xreversed
memory > xAutoIntEnum
memory > xprint
memory > xClass2
memory > xFlag
memory > xPeriod
memory > xany
memory > xPlanet
memory > xtype
memory > xf
memory > xset
memory > xAutoNumberInAList
memory > xrepr
memory > xint
memory > xr
memory > xhasattr
memory > xunique
memory > xException
memory > xSuperEnum
memory > xx
memory > xAttribute
memory > xMyInt
memory > xSubEnum
memory > xday_1
memory > xi
memory > xOrderedEnum
memory > xcompile
memory > xmonth
memory > xsuper
memory > xs
memory > xAutoNumber
memory > xsupport
memory > xColors
memory > xbool
memory > xFee
memory > xtuple
memory > xNotImplemented
memory > xMixinEnumWithStrOverride
memory > xissubclass
memory > xglobals
memory > xweekday
memory > xColorInAList
memory > xweek_1
memory > xDeprecationWarning
memory > xAutoNumberedEnum
memory > xHoliday
memory > xfloat
memory > xClass1
memory > xargs
memory > xIntFlag
memory > xBizarre
memory > xenum
memory > xConfusedColor
memory > xdir
memory > xLabelledList
memory > xnumero
memory > xweakref
memory > xitem
memory > xgetattr
memory > xv
memory > xprotocol
memory > xvars
memory > xTestEnum
memory > xauto
memory > xHuh
memory > xformat
memory > xStringIO
memory > xattr
memory > xEnum
memory > xsetattr
memory > xCoolColor
memory > xname
memory > xzip
memory > xunittest
memory > xEmpty
memory > xHIGHEST_PROTOCOL
memory > xStrMixin
memory > xexc
memory > xShade
memory > xhash
memory > xmap
memory > xKonstants
memory > xobject
memory > xGrade
memory > xCoolestColor
memory > xn
memory > xEnumWithFormatOverride
memory > xMyStrEnum
memory > xMyEnum
memory > xGender
memory > xMoreColor
memory > xhex
memory > xkwargs
memory > xNEI
memory > xAllMixin
memory > xFloatEnum
memory > xfoo
memory > xlen
memory > xIntEnum
memory > xdict
memory > xj
memory > xisinstance
memory > xHexMixin
memory > xTest2Enum
memory > xSeason
memory > xEllipsis
memory > xwhatever
memory > xloads
memory > x__name__
memory > xa
memory > xTypeError
memory > xpydoc
[] > test_enum
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_pickle_float
        memory > xtest_bool_of_class
        memory > xtest_default_missing
        memory > xtest_string_enum
        memory > xexpected_help_output_with_docs
        memory > xtest_inspect_classify_class_attrs
        memory > xtest_intenum_from_scratch
        memory > xCONVERT_TEST_NAME_F
        memory > xtest_format_enum_int
        memory > xtest_subclass_duplicate_name_dynamic
        memory > xtest_convert
        memory > xtest_multiple_mixin
        memory > xtest_format_enum_str
        memory > xtest_intenum_duplicates
        memory > xtest_invalid_names
        memory > xtest_subclasses_with_reduce_ex
        memory > xtest__all__
        memory > xtest_too_many_data_types
        memory > xRED
        memory > xtest_format
        memory > xtest_inherited_new_from_enhanced_enum
        memory > xtest_and
        memory > xtest_ordered_mixin
        memory > xtest_reversed_iteration_order
        memory > xCE
        memory > xBLUE
        memory > xtest_ignore
        memory > xtest_str_override_mixin
        memory > xtest_member_contains
        memory > xtest_pickle
        memory > xtest_intenum
        memory > xtest_subclasses_without_direct_pickle_support
        memory > xtest_str_override_enum
        memory > xtest_subclassing
        memory > xtest_multiple_inherited_mixin
        memory > xCONVERT_TEST_NAME_C
        memory > xtest_floatenum_fromhex
        memory > xIntStooges
        memory > xtest_duplicate_values_give_unique_enum_items
        memory > xtest_subclasses_with_getnewargs
        memory > xtest_tuple_subclass
        memory > xtest_auto_order
        memory > xtest_pickle_enum_function_with_module
        memory > xFLUFL
        memory > xtest_programatic_function_from_empty_list
        memory > xtest_no_duplicates
        memory > xtest_conflicting_types_resolved_in_new
        memory > xtest_is_dunder
        memory > xPURPLE
        memory > xtest_dir_with_added_behavior
        memory > xtest_dir_on_sub_with_behavior_on_super
        memory > xtest_iteration_order
        memory > xtest_enum_has_extra_members_with_aliases
        memory > xtest_type
        memory > xtest_pickle_by_name
        memory > xtest_programatic_function_from_empty_tuple
        memory > xBLACK
        memory > xtest_new_repr
        memory > xtest_str_and_format_override_mixin
        memory > xtest_bool
        memory > xtest_subclasses_with_reduce
        memory > xtest_missing
        memory > xtest_extending
        memory > xtest_hash
        memory > xtest_intenum_from_bytes
        memory > xtest_enum_duplicates
        memory > xtest_auto_number
        memory > xCHERRY
        memory > xtest_format_enum_date
        memory > xtest_enum_with_value_name
        memory > xtest_floatenum_inherited
        memory > xAC
        memory > xtest_same_members_with_aliases
        memory > xtest_changing_member
        memory > xCURLY
        memory > xtest_repr
        memory > xtest_multiple_mixin_mro
        memory > xtest_pickle_dump_load
        memory > xtest_programmatic_function_from_dict
        memory > xtest_is_descriptor
        memory > xtest_getattr_getitem
        memory > xtest_cascading_failure
        memory > xtest_wrong_enum_in_mixed_call
        memory > xblue
        memory > xtest_auto_order_wierd
        memory > xtest_programmatic_function_iterable
        memory > xtest_init
        memory > xtest_intenum_value
        memory > xtest_exploding_pickle
        memory > xtest_wrong_inheritance_order
        memory > xtest_dir_on_sub_with_behavior_including_instance_dict_on_super
        memory > xtest_unique_with_name
        memory > xtest_programmatic_function_type_with_start
        memory > xtest_introspection
        memory > xtest_inherited_data_type
        memory > xAnswer
        memory > xtest_same_members
        memory > xWO
        memory > xtest_same_members_wrong_order
        memory > xRO
        memory > xtest_subclasses_with_getnewargs_ex
        memory > xtest_nonhash_value
        memory > xtest_order_has_extra_members
        memory > xsetUp
        memory > xtest_unique_composite
        memory > xRW
        memory > xtest_comparisons
        memory > xtest_invert
        memory > xtest_auto_garbage
        memory > xtest_auto_name
        memory > xtest_dir_on_item
        memory > xtest_subclasses_without_direct_pickle_support_using_name
        memory > xtest_str_and_format_override_enum
        memory > xtest_extending2
        memory > xtest_programmatic_function_type
        memory > xCONVERT_TEST_NAME_D
        memory > xQuestion
        memory > xtest_unique_clean
        memory > xtest_programatic_function_iterable
        memory > xW
        memory > xgreen
        memory > xtest_convert_warn
        memory > xtest_bizarre
        memory > xtest_pickle_enum
        memory > xMOE
        memory > xTheory
        memory > xtest_subclass_duplicate_name
        memory > xtest_programatic_function_from_dict
        memory > xtest_duplicate_auto
        memory > xtest_intenum_transitivity
        memory > xtest_flufl_enum
        memory > xtest_object_str_override
        memory > xX
        memory > xtest_empty_string
        memory > xtest_format_override_mixin
        memory > xtest_value_name
        memory > xtest_or
        memory > xR
        memory > xtest_enum_str_override
        memory > xCONVERT_TEST_NAME_B
        memory > xtest_programatic_function_string_list
        memory > xtest_programmatic_function_string_with_start
        memory > xtest_str
        memory > xtest_pydoc
        memory > xtest_dir_on_class
        memory > xTOMATO
        memory > xtest_programmatic_function_string_list_with_start
        memory > xexpected_help_output_without_docs
        memory > xtest_format_override_enum
        memory > xtest_strenum_from_scratch
        memory > xtest_missing_exceptions_reset
        memory > xName
        memory > xtest_inherited_repr
        memory > xLARRY
        memory > xtest_contains
        memory > xtest_enum_value
        memory > xtest_format_enum
        memory > xtest_inspect_getmembers
        memory > x__get__
        memory > xtest_enum_in_enum_out
        memory > xmaxDiff
        memory > xtest_auto_name_inherit
        memory > xtest_pickle_exception
        memory > xtest_floatenum_from_scratch
        memory > xtest_bool_of_member
        memory > xtest_enum_function_with_qualname
        memory > xtest_empty_globals
        memory > xtest_xor
        memory > xGREEN
        memory > xtest_enum_has_extra_members
        memory > xtest_convert_value_lookup_priority
        memory > x__init__
        memory > xtest_multiple_mixin_inherited
        memory > xCONVERT_TEST_NAME_E
        memory > xtest_pickle_enum_function
        memory > xtest_is_sunder
        memory > xtest_extending3
        memory > xFloatStooges
        memory > xBDFL
        memory > xtest_strenum_inherited
        memory > xtest_non_latin_character_string
        memory > xtest_class_nested_enum_and_pickle_protocol_four
        memory > xtest_duplicate_name
        memory > xtest_auto_garbage_corrected
        memory > xtest_auto_number_garbage
        memory > xtest_programatic_function_string_with_start
        memory > xassertFormatIsValue
        memory > xCONVERT_TEST_NAME_A
        memory > xtest_attribute_deletion
        memory > xtest_programmatic_function_type_from_subclass_with_start
        memory > xBANANA
        memory > xtest_format_enum_float
        memory > xtest_enum
        memory > xtest_wrong_enum_in_call
        memory > xtest_programmatic_function_string_list
        memory > xtest_exclude_methods
        memory > xtest_mixed_enum_in_call_1
        memory > xtest_unique_dirty
        memory > xtest_inherited_new_from_mixed_enum
        memory > xtest_programatic_function_string
        memory > xtest_order_has_extra_members_with_aliases
        memory > xtest_non_latin_number_string
        memory > xtest_programmatic_function_type_from_subclass
        memory > xStooges
        memory > xFlagStooges
        memory > xtest_intenum_inherited
        memory > xtest_pickle_int
        memory > xtest_programmatic_function_string
        memory > xtest_equality
        memory > xtest_mixed_enum_in_call_2
        memory > xtest_convert_raise
        memory > xtest_no_such_enum_member
        memory > xred
        memory > xtest_getattr_dunder
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
              (((unsupported)).apply ((xEnum)))
                seq
                  xLARRY.write 1
                  xCURLY.write 2
                  xMOE.write 3
              xStooges.write (xexc)
            (((unsupported)).apply ((xException)))
              (((unsupported)).apply ((xint)) ((xEnum)))
                seq
                  xLARRY.write 1
                  xCURLY.write 2
                  xMOE.write 3
              xIntStooges.write (xexc)
            (((unsupported)).apply ((xException)))
              (((unsupported)).apply ((xfloat)) ((xEnum)))
                seq
                  xLARRY.write 1.39
                  xCURLY.write 2.72
                  xMOE.write 3.142596
              xFloatStooges.write (xexc)
            (((unsupported)).apply ((xException)))
              (((unsupported)).apply ((xFlag)))
                seq
                  xLARRY.write 1
                  xCURLY.write 2
                  xMOE.write 3
              xFlagStooges.write (xexc)
            (((unsupported)).apply ((xException)))
              seq
                (((unsupported)).apply ((xstr)) ((xEnum)))
                  unsupported
                (((unsupported)).apply ((xStrEnum)))
                  seq
                    xBDFL.write "Guido van Rossum"
                    xFLUFL.write "Barry Warsaw"
              xName.write (xexc)
            (((unsupported)).apply ((xException)))
              xQuestion.write (((unsupported)).apply ((xEnum)) ("Question") ("who what when where why") ((x__name__)))
              xQuestion.write (xexc)
            (((unsupported)).apply ((xException)))
              xAnswer.write (((xEnum)).apply ("him this then there because") ("Answer"))
              xAnswer.write (xexc)
            (((unsupported)).apply ((xException)))
              xTheory.write (((unsupported)).apply ((xEnum)) ("Theory") ("rule law supposition") ("spanish_inquisition"))
              xTheory.write (xexc)
            (((unsupported)).apply ((xException)))
              (((unsupported)).apply ((xEnum)))
                seq
                  xTOMATO.write 1
                  xBANANA.write 2
                  xCHERRY.write 3
            xtest_pickle_dump_load.write
              [xassertion xsource xtarget]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xtarget)) ("None: is there a None literal in the EO language?")).if
                      xtarget.write (xsource)
                    (((unsupported)).apply ((xprotocol)) ((((xrange)).apply (((xHIGHEST_PROTOCOL).add 1)))))
                      bogusForceDataize.write (((xassertion)).apply ((((xloads)).apply ((((unsupported)).apply ((xdumps)) ((xsource)) ((xprotocol)))))) ((xtarget)))
            xtest_pickle_exception.write
              [xassertion xexception xobj]
                seq > @
                  (((unsupported)).apply ((xprotocol)) ((((xrange)).apply (((xHIGHEST_PROTOCOL).add 1)))))
                    (((unsupported)).apply ((((xassertion)).apply ((xexception)))))
                      (((unsupported)).apply ((xdumps)) ((xobj)) ((xprotocol)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_is_descriptor.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("__get__") ("__set__") ("__delete__"))))
                          seq
                            xobj.write (((xfoo)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xenum).x_is_descriptor)).apply ((xobj)))))
                            bogusForceDataize.write (((xsetattr)).apply ((xobj)) ((xattr)) (1))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xenum).x_is_descriptor)).apply ((xobj)))))
                xtest_is_sunder.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("_a_") ("_aa_"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xenum).x_is_sunder)).apply ((xs)))))
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("a") ("a_") ("_a") ("__a") ("a__") ("__a__") ("_a__") ("__a_") ("_") ("__") ("___") ("____") ("_____"))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xenum).x_is_sunder)).apply ((xs)))))
                xtest_is_dunder.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("__a__") ("__aa__"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xenum).x_is_dunder)).apply ((xs)))))
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("a") ("a_") ("_a") ("__a") ("a__") ("_a_") ("_a__") ("__a_") ("_") ("__") ("___") ("____") ("_____"))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xenum).x_is_dunder)).apply ((xs)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xfget xfset xfdel xdoc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfget)) ((xfget)))
                        (((unsupported)).apply (((xself).xfset)) ((xfset)))
                        (((unsupported)).apply (((xself).xfdel)) ((xfdel)))
                        ((((unsupported)).apply ((xdoc)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xfget)) ("None: is there a None literal in the EO language?"))).if
                          xdoc.write ((xfget).x__doc__)
                        (((unsupported)).apply (((xself).x__doc__)) ((xdoc)))
                x__get__.write
                  [xself xinstance xownerclass]
                    seq > @
                      (((unsupported)).apply (((((xself).xfget)).apply ((xownerclass)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xC
                    memory > xSUMMER
                    memory > xEAST
                    memory > xB
                    memory > xIDES_OF_MARCH
                    memory > xTAU
                    memory > xSOUTH
                    memory > xPI
                    memory > xF
                    memory > xSPRING
                    memory > xWINTER
                    memory > xE
                    memory > xA
                    memory > xNEW_YEAR
                    memory > xAUTUMN
                    memory > xD
                    memory > xWEST
                    memory > xNORTH
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xSPRING.write 1
                            xSUMMER.write 2
                            xAUTUMN.write 3
                            xWINTER.write 4
                        (((unsupported)).apply (((xself).xSeason)) ((xSeason)))
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                          seq
                            xE.write 2.7182818
                            xPI.write 3.1415926
                            xTAU.write (2.mul (xPI))
                        (((unsupported)).apply (((xself).xKonstants)) ((xKonstants)))
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xA.write 5
                            xB.write 4
                            xC.write 3
                            xD.write 2
                            xF.write 0
                        (((unsupported)).apply (((xself).xGrades)) ((xGrades)))
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                          seq
                            xEAST.write "east"
                            xWEST.write "west"
                            xNORTH.write "north"
                            xSOUTH.write "south"
                        (((unsupported)).apply (((xself).xDirectional)) ((xDirectional)))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xdate)) ((xEnum)))
                          seq
                            xNEW_YEAR.write (((unsupported)).apply (2013) (1) (1))
                            xIDES_OF_MARCH.write (((unsupported)).apply (2013) (3) (15))
                        (((unsupported)).apply (((xself).xHoliday)) ((xHoliday)))
                xtest_dir_on_class.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xdir)).apply ((xSeason)))))) ((((xset)).apply ((((unsupported)).apply ("__class__") ("__doc__") ("__members__") ("__module__") ("SPRING") ("SUMMER") ("AUTUMN") ("WINTER"))))))
                xtest_dir_on_item.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xdir)).apply (((xSeason).xWINTER)))))) ((((xset)).apply ((((unsupported)).apply ("__class__") ("__doc__") ("__module__") ("name") ("value"))))))
                xtest_dir_with_added_behavior.write
                  [xself]
                    memory > xwowser
                    memory > xthis
                    memory > xthese
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xthis.write "that"
                            xthese.write "those"
                            xwowser.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("Wowser! I'm %s!".mod ((xself).xname))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xdir)).apply ((xTest)))))) ((((xset)).apply ((((unsupported)).apply ("__class__") ("__doc__") ("__members__") ("__module__") ("this") ("these"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xdir)).apply (((xTest).xthis)))))) ((((xset)).apply ((((unsupported)).apply ("__class__") ("__doc__") ("__module__") ("name") ("value") ("wowser"))))))
                xtest_dir_on_sub_with_behavior_on_super.write
                  [xself]
                    memory > xsample
                    memory > xinvisible
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          xinvisible.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("did you see me?"))
                        (((unsupported)).apply ((xSuperEnum)))
                          xsample.write 5
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xdir)).apply (((xSubEnum).xsample)))))) ((((xset)).apply ((((unsupported)).apply ("__class__") ("__doc__") ("__module__") ("name") ("value") ("invisible"))))))
                xtest_dir_on_sub_with_behavior_including_instance_dict_on_super.write
                  [xself]
                    memory > x__new__
                    memory > xsample
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          x__new__.write
                            [xcls xvalue xdescription]
                              memory > xobj
                              seq > @
                                (((unsupported)).apply)
                                  xobj.write ((((xint).x__new__)).apply ((xcls)) ((xvalue)))
                                  (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                  (((unsupported)).apply (((xobj).xdescription)) ((xdescription)))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xSuperEnum)))
                          xsample.write 5
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ("description")).leq (((xset)).apply ((((xdir)).apply (((xSubEnum).xsample))))))))
                xtest_enum_in_enum_out.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xSeason)).apply (((xSeason).xWINTER)))) (((xSeason).xWINTER)))
                xtest_enum_value.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xSPRING).xvalue)) (1))
                xtest_intenum_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xIntStooges).xCURLY).xvalue)) (2))
                xtest_enum.write
                  [xself]
                    memory > xe
                    memory > xSeason
                    memory > xlst
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        xlst.write (((xlist)).apply ((xSeason)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSeason)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSeason)))) (4) ((xSeason)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSeason).xSPRING)) (((xSeason).xSUMMER)) (((xSeason).xAUTUMN)) (((xSeason).xWINTER)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xseason)))) ((((xenumerate)).apply (((("SPRING SUMMER AUTUMN WINTER".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSeason)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((((xgetattr)).apply ((xSeason)) ((xseason)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xseason)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSeason)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSeason)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xSeason)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) (("Season.".add (xseason))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe)))) (((("<Season.{0}: {1}>".xformat)).apply ((xseason)) ((xi)))))
                xtest_value_name.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xSPRING).xname)) ("SPRING"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xSPRING).xvalue)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((xSeason).xSPRING).xname)) ("invierno"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((xSeason).xSPRING).xvalue)) (2))
                xtest_changing_member.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xSeason).xWINTER)) ("really cold"))
                xtest_attribute_deletion.write
                  [xself]
                    memory > xAUTUMN
                    memory > xSUMMER
                    memory > xspam
                    memory > xSPRING
                    memory > xWINTER
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xSPRING.write 1
                            xSUMMER.write 2
                            xAUTUMN.write 3
                            xWINTER.write 4
                            xspam.write
                              [xcls]
                                seq > @
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xSeason)) ("spam"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xSeason).xspam)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xSeason)) ("spam"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xSeason).xSPRING)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xSeason).xDRY)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xSeason).xSPRING).xname)))))))
                xtest_bool_of_class.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply ((xEmpty)))))
                xtest_bool_of_member.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > xzero
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xzero.write 0
                            xone.write 1
                            xtwo.write 2
                        (((unsupported)).apply ((xmember)) ((xCount)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply ((xmember)))))
                xtest_invalid_names.write
                  [xself]
                    memory > x_get_mixins_
                    memory > x_create_
                    memory > xmro
                    memory > x_find_new_
                    memory > x_any_name_
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xEnum)))
                            xmro.write 9
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xEnum)))
                            x_create_.write 11
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xEnum)))
                            x_get_mixins_.write 9
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xEnum)))
                            x_find_new_.write 1
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xEnum)))
                            x_any_name_.write 9
                xtest_bool.write
                  [xself]
                    memory > x__bool__
                    memory > xtrue
                    memory > xfalse
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xtrue.write TRUE
                            xfalse.write FALSE
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xLogic).xtrue)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xLogic).xfalse)))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xtrue.write TRUE
                            xfalse.write FALSE
                            x__bool__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xbool)).apply (((xself).x_value_)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xRealLogic).xtrue)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xRealLogic).xfalse)))
                        (((unsupported)).apply ((xint)) ((xEnum)))
                          seq
                            xtrue.write 1
                            xfalse.write 0
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xIntLogic).xtrue)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xIntLogic).xfalse)))
                xtest_contains.write
                  [xself]
                    memory > xtwo
                    memory > xval
                    memory > xone
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xSeason).xAUTUMN)) ((xSeason)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (3) ((xSeason)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("AUTUMN") ((xSeason)))
                        xval.write (((xSeason)).apply (3))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xval)) ((xSeason)))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xone.write 1
                            xtwo.write 2
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xOtherEnum).xtwo)) ((xSeason)))
                xtest_comparisons.write
                  [xself]
                    memory > xCLIP
                    memory > xSPRING
                    memory > xBARREL
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xSeason).xSPRING)) (1))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xSPRING.write 1
                            xCLIP.write 2
                            xBARREL.write 3
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xSeason).xSPRING)) (((xPart).xSPRING)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                xtest_enum_duplicates.write
                  [xself]
                    memory > xAUTUMN
                    memory > xSUMMER
                    memory > xANOTHER_SPRING
                    memory > xSPRING
                    memory > xFALL
                    memory > xWINTER
                    memory > xlst
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xSPRING.write 1
                            xSUMMER.write 2
                            (((unsupported)).apply ((xAUTUMN)) ((xFALL)) (3))
                            xWINTER.write 4
                            xANOTHER_SPRING.write 1
                        xlst.write (((xlist)).apply ((xSeason)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xSeason).xSPRING)) (((xSeason).xSUMMER)) (((xSeason).xAUTUMN)) (((xSeason).xWINTER)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xSeason).xFALL)) (((xSeason).xAUTUMN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xFALL).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xAUTUMN).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xSeason)).apply (3))) (((xSeason).xAUTUMN)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xSeason)).apply (1))) (((xSeason).xSPRING)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSeason).xFALL).xname)) ("AUTUMN"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xSeason).x__members__).xitems)).apply)) ((((xv).xname).neq (xk))))) ((((unsupported)).apply ("FALL") ("ANOTHER_SPRING"))))
                xtest_duplicate_name.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xEnum)))
                            seq
                              xred.write 1
                              xgreen.write 2
                              xblue.write 3
                              xred.write 4
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xEnum)))
                            seq
                              xred.write 1
                              xgreen.write 2
                              xblue.write 3
                              xred.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply ("red"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xEnum)))
                            seq
                              xred.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply)
                                      (((unsupported)).apply ("redder"))
                              xred.write 1
                              xgreen.write 2
                              xblue.write 3
                xtest_enum_with_value_name.write
                  [xself]
                    memory > xname
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xname.write 1
                            xvalue.write 2
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xHuh)))) ((((unsupported)).apply (((xHuh).xname)) (((xHuh).xvalue)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xHuh).xname)))) ((xHuh)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xHuh).xname).xname)) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xHuh).xname).xvalue)) (1))
                xtest_format_enum.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xSeason).xSPRING)))) (((("{}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{:}".xformat)).apply (((xSeason).xSPRING)))) (((("{:}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{:20}".xformat)).apply (((xSeason).xSPRING)))) (((("{:20}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{:^20}".xformat)).apply (((xSeason).xSPRING)))) (((("{:^20}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{:>20}".xformat)).apply (((xSeason).xSPRING)))) (((("{:>20}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{:<20}".xformat)).apply (((xSeason).xSPRING)))) (((("{:<20}".xformat)).apply ((((xstr)).apply (((xSeason).xSPRING)))))))
                xtest_str_override_enum.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xone.write (((xauto)).apply)
                            xtwo.write (((xauto)).apply)
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("Str!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xEnumWithStrOverrides).xone)))) ("Str!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xEnumWithStrOverrides).xone)))) ("Str!"))
                xtest_format_override_enum.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__format__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xone.write 1.0
                            xtwo.write 2.0
                            x__format__.write
                              [xself xspec]
                                seq > @
                                  (((unsupported)).apply ("Format!!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xEnumWithFormatOverride).xone)))) ("EnumWithFormatOverride.one"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xEnumWithFormatOverride).xone)))) ("Format!!"))
                xtest_str_and_format_override_enum.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__format__
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xone.write (((xauto)).apply)
                            xtwo.write (((xauto)).apply)
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("Str!"))
                            x__format__.write
                              [xself xspec]
                                seq > @
                                  (((unsupported)).apply ("Format!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xEnumWithStrFormatOverrides).xone)))) ("Str!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xEnumWithStrFormatOverrides).xone)))) ("Format!"))
                xtest_str_override_mixin.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                          seq
                            xone.write 1.0
                            xtwo.write 2.0
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("Overridden!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xMixinEnumWithStrOverride).xone)))) ("Overridden!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xMixinEnumWithStrOverride).xone)))) ("Overridden!"))
                xtest_str_and_format_override_mixin.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__format__
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                          seq
                            xone.write 1.0
                            xtwo.write 2.0
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("Str!"))
                            x__format__.write
                              [xself xspec]
                                seq > @
                                  (((unsupported)).apply ("Format!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xMixinWithStrFormatOverrides).xone)))) ("Str!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xMixinWithStrFormatOverrides).xone)))) ("Format!"))
                xtest_format_override_mixin.write
                  [xself]
                    memory > xtwo
                    memory > xone
                    memory > x__format__
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                          seq
                            xone.write 1.0
                            xtwo.write 2.0
                            x__format__.write
                              [xself xspec]
                                seq > @
                                  (((unsupported)).apply ("TestFloat success!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xTestFloat).xone)))) ("TestFloat.one"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("{}".xformat)).apply (((xTestFloat).xone)))) ("TestFloat success!"))
                xassertFormatIsValue.write
                  [xself xspec xmember]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xspec).xformat)).apply ((xmember)))) (((((xspec).xformat)).apply (((xmember).xvalue)))))
                xtest_format_enum_date.write
                  [xself]
                    memory > xHoliday
                    seq > @
                      seq
                        xHoliday.write ((xself).xHoliday)
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:20}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:^20}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:>20}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:<20}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:%Y %m}") (((xHoliday).xIDES_OF_MARCH)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:%Y %m %M:00}") (((xHoliday).xIDES_OF_MARCH)))
                xtest_format_enum_float.write
                  [xself]
                    memory > xKonstants
                    seq > @
                      seq
                        xKonstants.write ((xself).xKonstants)
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:20}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:^20}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:>20}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:<20}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:n}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:5.2}") (((xKonstants).xTAU)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:f}") (((xKonstants).xTAU)))
                xtest_format_enum_int.write
                  [xself]
                    memory > xGrades
                    seq > @
                      seq
                        xGrades.write ((xself).xGrades)
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:20}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:^20}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:>20}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:<20}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:+}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:08X}") (((xGrades).xC)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:b}") (((xGrades).xC)))
                xtest_format_enum_str.write
                  [xself]
                    memory > xDirectional
                    seq > @
                      seq
                        xDirectional.write ((xself).xDirectional)
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{}") (((xDirectional).xWEST)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:}") (((xDirectional).xWEST)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:20}") (((xDirectional).xWEST)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:^20}") (((xDirectional).xWEST)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:>20}") (((xDirectional).xWEST)))
                        bogusForceDataize.write ((((xself).xassertFormatIsValue)).apply ("{:<20}") (((xDirectional).xWEST)))
                xtest_object_str_override.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xRED)) ((xGREEN)) ((xBLUE)))) ((((unsupported)).apply (1) (2) (3))))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("test.%s".mod (((unsupported)).apply (((xself).x_name_))))))
                            x__str__.write ((xobject).x__str__)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColors).xRED)))) ("test.RED"))
                xtest_enum_str_override.write
                  [xself]
                    memory > xTwo
                    memory > x__str__
                    memory > xOne
                    memory > xhello
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("MyStr"))
                        (((unsupported)).apply ((xEnum)))
                          xhello.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (("Hello!  My name is %s".mod ((xself).xname))))
                        (((unsupported)).apply ((xMyMethodEnum)) ((xint)) ((xMyStrEnum)))
                          seq
                            xOne.write 1
                            xTwo.write 2
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xTest1Enum).x_member_type_)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xTest1Enum).xOne)))) ("MyStr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((xTest1Enum).xOne)) (""))) ("MyStr"))
                        (((unsupported)).apply ((xMyStrEnum)) ((xMyMethodEnum)))
                          seq
                            xOne.write 1
                            xTwo.write 2
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xTest2Enum).xOne)))) ("MyStr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((xTest1Enum).xOne)) (""))) ("MyStr"))
                xtest_inherited_data_type.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          x__repr__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xhex)).apply ((xself)))))
                        (((unsupported)).apply ((xHexInt)) (((xenum).xEnum)))
                          seq
                            xA.write 1
                            xB.write 2
                            xC.write 3
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xMyEnum).xA)))) ("<MyEnum.A: 0x1>"))
                xtest_too_many_data_types.write
                  [xself]
                    memory > xrepr
                    memory > xOne
                    memory > xhello
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("too many data types"))))
                          (((unsupported)).apply ((xstr)) ((xint)) ((xEnum)))
                            xOne.write 1
                        (((unsupported)).apply ((xstr)))
                          xhello.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (("hello, %s".mod (xself))))
                        (((unsupported)).apply ((xint)))
                          xrepr.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xhex)).apply ((xself)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("too many data types"))))
                          (((unsupported)).apply ((xMyStr)) ((xMyInt)) ((xEnum)))
                            xOne.write 1
                xtest_hash.write
                  [xself]
                    memory > xdates
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        xdates.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdates)) (((xSeason).xWINTER)))) ("1225"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdates)) (((xSeason).xSPRING)))) ("0315"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdates)) (((xSeason).xSUMMER)))) ("0704"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdates)) (((xSeason).xAUTUMN)))) ("1031"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdates)) (((xSeason).xAUTUMN)))) ("1031"))
                xtest_intenum_from_scratch.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)) ((xEnum)))
                          seq
                            xpi.write 3
                            xtau.write (2.mul (xpi))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_intenum_inherited.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)) ((xEnum)))
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xpi.write 3
                            xtau.write (2.mul (xpi))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_floatenum_from_scratch.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                          seq
                            xpi.write 3.1415926
                            xtau.write (2.mul (xpi))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_floatenum_inherited.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)) ((xEnum)))
                        (((unsupported)).apply ((xFloatEnum)))
                          seq
                            xpi.write 3.1415926
                            xtau.write (2.mul (xpi))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_strenum_from_scratch.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                          seq
                            xpi.write "Pi"
                            xtau.write "Tau"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_strenum_inherited.write
                  [xself]
                    memory > xpi
                    memory > xtau
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                        (((unsupported)).apply ((xStrEnum)))
                          seq
                            xpi.write "Pi"
                            xtau.write "Tau"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xphy).xpi).less ((xphy).xtau))))
                xtest_intenum.write
                  [xself]
                    memory > xMONDAY
                    memory > xTUESDAY
                    memory > xSUNDAY
                    memory > xWEDNESDAY
                    memory > xSATURDAY
                    memory > xtarget
                    memory > xlst
                    memory > xe
                    memory > xFRIDAY
                    memory > xTHURSDAY
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xSUNDAY.write 1
                            xMONDAY.write 2
                            xTUESDAY.write 3
                            xWEDNESDAY.write 4
                            xTHURSDAY.write 5
                            xFRIDAY.write 6
                            xSATURDAY.write 7
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") ("b") ("c"))) (((xWeekDay).xMONDAY)))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply (((xWeekDay).xTUESDAY)))))) ((((unsupported)).apply (0) (1) (2))))
                        xlst.write (((xlist)).apply ((xWeekDay)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xWeekDay)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xWeekDay)))) (7))
                        xtarget.write "SUNDAY MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY"
                        xtarget.write ((((xtarget).xsplit)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xweekday)))) ((((xenumerate)).apply ((xtarget)) (1))))
                          seq
                            xe.write (((xWeekDay)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xe)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xweekday)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xWeekDay)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xlst).xindex)).apply ((xe))).add 1)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xe)) (8))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xWeekDay)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xint)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xEnum)))
                xtest_intenum_duplicates.write
                  [xself]
                    memory > xMONDAY
                    memory > xTEUSDAY
                    memory > xTUESDAY
                    memory > xSUNDAY
                    memory > xWEDNESDAY
                    memory > xSATURDAY
                    memory > xFRIDAY
                    memory > xTHURSDAY
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xSUNDAY.write 1
                            xMONDAY.write 2
                            (((unsupported)).apply ((xTUESDAY)) ((xTEUSDAY)) (3))
                            xWEDNESDAY.write 4
                            xTHURSDAY.write 5
                            xFRIDAY.write 6
                            xSATURDAY.write 7
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xWeekDay).xTEUSDAY)) (((xWeekDay).xTUESDAY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xWeekDay)).apply (3)).xname)) ("TUESDAY"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xWeekDay).x__members__).xitems)).apply)) ((((xv).xname).neq (xk))))) ((((unsupported)).apply ("TEUSDAY"))))
                xtest_intenum_from_bytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xIntStooges).xfrom_bytes)).apply ("x00x03") ("big"))) (((xIntStooges).xMOE)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xIntStooges).xfrom_bytes)).apply ("x00x05") ("big"))
                xtest_floatenum_fromhex.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write ((((xfloat).xhex)).apply ((((xFloatStooges).xMOE).xvalue)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xFloatStooges).xfromhex)).apply ((xh)))) (((xFloatStooges).xMOE)))
                        xh.write ((((xfloat).xhex)).apply (((((xFloatStooges).xMOE).xvalue).add 0.01)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xFloatStooges).xfromhex)).apply ((xh)))
                xtest_pickle_enum.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xStooges)) ((xException))).if
                          (((unsupported)).apply ((xStooges)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xStooges).xCURLY)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xStooges)))
                xtest_pickle_int.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xIntStooges)) ((xException))).if
                          (((unsupported)).apply ((xIntStooges)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xIntStooges).xCURLY)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xIntStooges)))
                xtest_pickle_float.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xFloatStooges)) ((xException))).if
                          (((unsupported)).apply ((xFloatStooges)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xFloatStooges).xCURLY)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xFloatStooges)))
                xtest_pickle_enum_function.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xAnswer)) ((xException))).if
                          (((unsupported)).apply ((xAnswer)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xAnswer).xhim)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xAnswer)))
                xtest_pickle_enum_function_with_module.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xQuestion)) ((xException))).if
                          (((unsupported)).apply ((xQuestion)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xQuestion).xwho)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xQuestion)))
                xtest_enum_function_with_qualname.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xTheory)) ((xException))).if
                          (((unsupported)).apply ((xTheory)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xTheory).x__qualname__)) ("spanish_inquisition"))
                xtest_class_nested_enum_and_pickle_protocol_four.write
                  [xself]
                    memory > xtwigs
                    memory > xshiny
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xtwigs.write "common"
                            xshiny.write "rare"
                        (((unsupported)).apply ((((xself).x__class__).xNestedEnum)) ((xNestedEnum)))
                        (((unsupported)).apply ((((xself).xNestedEnum).x__qualname__)) (("%s.NestedEnum".mod (((xself).x__class__).x__name__))))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((((xself).xNestedEnum).xtwigs)))
                xtest_pickle_by_name.write
                  [xself]
                    memory > xONE
                    memory > xTWO
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xONE.write 1
                            xTWO.write 2
                        (((unsupported)).apply (((xReplaceGlobalInt).x__reduce_ex__)) (((xenum).x_reduce_ex_by_name)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((xHIGHEST_PROTOCOL)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xReplaceGlobalInt).xTWO).x__reduce_ex__)).apply ((xproto)))) ("TWO"))
                xtest_exploding_pickle.write
                  [xself]
                    memory > xBadPickle
                    seq > @
                      seq
                        xBadPickle.write (((unsupported)).apply ((xEnum)) ("BadPickle") ("dill sweet bread-n-butter") ((x__name__)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("BadPickle"))) ((xBadPickle)))
                        bogusForceDataize.write ((((xenum).x_make_class_unpicklable)).apply ((xBadPickle)))
                        bogusForceDataize.write (((xtest_pickle_exception)).apply (((xself).xassertRaises)) ((xTypeError)) (((xBadPickle).xdill)))
                        bogusForceDataize.write (((xtest_pickle_exception)).apply (((xself).xassertRaises)) ((xPicklingError)) ((xBadPickle)))
                xtest_string_enum.write
                  [xself]
                    memory > xapprentice
                    memory > xjourneyman
                    memory > xmaster
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                          seq
                            xmaster.write "what is the sound of one hand clapping?"
                            xjourneyman.write "why did the chicken cross the road?"
                            xapprentice.write "knock, knock!"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xSkillLevel).xapprentice)) ("knock, knock!"))
                xtest_getattr_getitem.write
                  [xself]
                    memory > xmorning
                    memory > xevening
                    memory > xnoon
                    memory > xnight
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xmorning.write 1
                            xnoon.write 2
                            xevening.write 3
                            xnight.write 4
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xPeriod)).apply (2))) (((xPeriod).xnoon)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xgetattr)).apply ((xPeriod)) ("night"))) (((xPeriod).xnight)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xPeriod)) ("morning"))) (((xPeriod).xmorning)))
                xtest_getattr_dunder.write
                  [xself]
                    memory > xSeason
                    seq > @
                      seq
                        xSeason.write ((xself).xSeason)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xgetattr)).apply ((xSeason)) ("__eq__"))))
                xtest_iteration_order.write
                  [xself]
                    memory > xWINTER
                    memory > xSUMMER
                    memory > xSPRING
                    memory > xAUTUMN
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xSUMMER.write 2
                            xWINTER.write 4
                            xAUTUMN.write 3
                            xSPRING.write 1
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xSeason)))) ((((unsupported)).apply (((xSeason).xSUMMER)) (((xSeason).xWINTER)) (((xSeason).xAUTUMN)) (((xSeason).xSPRING)))))
                xtest_reversed_iteration_order.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((xself).xSeason)))))) ((((unsupported)).apply ((((xself).xSeason).xWINTER)) ((((xself).xSeason).xAUTUMN)) ((((xself).xSeason).xSUMMER)) ((((xself).xSeason).xSPRING)))))
                xtest_programmatic_function_string.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((xEnum)).apply ("SummerMonth") ("june july august"))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_string_with_start.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((unsupported)).apply ((xEnum)) ("SummerMonth") ("june july august") (10))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (10))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_string_list.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((xEnum)).apply ("SummerMonth") ((((unsupported)).apply ("june") ("july") ("august"))))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_string_list_with_start.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((unsupported)).apply ((xEnum)) ("SummerMonth") ((((unsupported)).apply ("june") ("july") ("august"))) (20))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (20))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_iterable.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((xEnum)).apply ("SummerMonth") ((((unsupported)).apply ((((unsupported)).apply ("june") (1))) ((((unsupported)).apply ("july") (2))) ((((unsupported)).apply ("august") (3))))))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_from_dict.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((xEnum)).apply ("SummerMonth") ((((xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("june") (1))) ((((unsupported)).apply ("july") (2))) ((((unsupported)).apply ("august") (3))))))))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xe).xvalue)))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_type.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((unsupported)).apply ((xEnum)) ("SummerMonth") ("june july august") ((xint)))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_type_with_start.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((unsupported)).apply ((xEnum)) ("SummerMonth") ("june july august") ((xint)) (30))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (30))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_type_from_subclass.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((xIntEnum)).apply ("SummerMonth") ("june july august"))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (1))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_programmatic_function_type_from_subclass_with_start.write
                  [xself]
                    memory > xe
                    memory > xlst
                    memory > xSummerMonth
                    seq > @
                      seq
                        xSummerMonth.write (((unsupported)).apply ((xIntEnum)) ("SummerMonth") ("june july august") (40))
                        xlst.write (((xlist)).apply ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xSummerMonth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xSummerMonth)))) (3) ((xSummerMonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xSummerMonth).xjune)) (((xSummerMonth).xjuly)) (((xSummerMonth).xaugust)))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmonth)))) ((((xenumerate)).apply (((("june july august".xsplit)).apply)) (40))))
                          seq
                            xe.write (((xSummerMonth)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xmonth)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xSummerMonth)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xSummerMonth)))
                xtest_subclassing.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xName)) ((xException))).if
                          (((unsupported)).apply ((xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xName).xBDFL)) ("Guido van Rossum"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xName).xBDFL)) ((((xName)).apply ("Guido van Rossum"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xName).xBDFL)) ((((xgetattr)).apply ((xName)) ("BDFL"))))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xName).xBDFL)))
                xtest_extending.write
                  [xself]
                    memory > xblue
                    memory > xyellow
                    memory > xgreen
                    memory > xcyan
                    memory > xmagenta
                    memory > xchartruese
                    memory > xred
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xColor)))
                            seq
                              xcyan.write 4
                              xmagenta.write 5
                              xyellow.write 6
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("EvenMoreColor: cannot extend enumeration 'Color'"))))
                          (((unsupported)).apply ((xColor)) ((xIntEnum)))
                            xchartruese.write 7
                xtest_exclude_methods.write
                  [xself]
                    memory > xthis
                    memory > xreally
                    memory > xthese
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xthis.write "that"
                            xthese.write "those"
                            xreally.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("no, not %s".mod ((xself).xvalue))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xtype)).apply (((xwhatever).xreally)))) ((xwhatever)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xwhatever).xthis).xreally)).apply)) ("no, not that"))
                xtest_wrong_inheritance_order.write
                  [xself]
                    memory > xNotHere
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((xEnum)) ((xstr)))
                          xNotHere.write "error before this point"
                xtest_intenum_transitivity.write
                  [xself]
                    memory > xthree
                    memory > xone
                    memory > xtres
                    memory > xuno
                    memory > xdos
                    memory > xtwo
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xone.write 1
                            xtwo.write 2
                            xthree.write 3
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xuno.write 1
                            xdos.write 2
                            xtres.write 3
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnumber).xone)) (((xnumero).xuno)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnumber).xtwo)) (((xnumero).xdos)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnumber).xthree)) (((xnumero).xtres)))
                xtest_wrong_enum_in_call.write
                  [xself]
                    memory > xwhite
                    memory > xblack
                    memory > xmale
                    memory > xfemale
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xblack.write 0
                            xwhite.write 1
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xmale.write 0
                            xfemale.write 1
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xMonochrome)) (((xGender).xmale)))
                xtest_wrong_enum_in_mixed_call.write
                  [xself]
                    memory > xwhite
                    memory > xblack
                    memory > xmale
                    memory > xfemale
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xblack.write 0
                            xwhite.write 1
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xmale.write 0
                            xfemale.write 1
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xMonochrome)) (((xGender).xmale)))
                xtest_mixed_enum_in_call_1.write
                  [xself]
                    memory > xwhite
                    memory > xblack
                    memory > xmale
                    memory > xfemale
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xblack.write 0
                            xwhite.write 1
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xmale.write 0
                            xfemale.write 1
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xMonochrome)).apply (((xGender).xfemale)))) (((xMonochrome).xwhite)))
                xtest_mixed_enum_in_call_2.write
                  [xself]
                    memory > xwhite
                    memory > xblack
                    memory > xmale
                    memory > xfemale
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xblack.write 0
                            xwhite.write 1
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xmale.write 0
                            xfemale.write 1
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xMonochrome)).apply (((xGender).xmale)))) (((xMonochrome).xblack)))
                xtest_flufl_enum.write
                  [xself]
                    memory > xoption1
                    memory > xoption3
                    memory > xoption2
                    memory > x__int__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x__int__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xint)).apply (((xself).xvalue)))))
                        (((unsupported)).apply ((xFluflnum)))
                          seq
                            xoption1.write 1
                            xoption2.write 2
                            xoption3.write 3
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xMailManOptions).xoption1)))) (1))
                xtest_introspection.write
                  [xself]
                    memory > xwire
                    memory > xvanilla
                    memory > xyarn
                    memory > xrope
                    memory > xtwo
                    memory > xone
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          seq
                            xone.write 100
                            xtwo.write 200
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xNumber).xone).x_member_type_)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNumber).x_member_type_)) ((xint)))
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                          seq
                            xyarn.write "soft"
                            xrope.write "rough"
                            xwire.write "hard"
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xString).xyarn).x_member_type_)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xString).x_member_type_)) ((xstr)))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xvanilla.write "white"
                            xone.write 1
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xPlain).xvanilla).x_member_type_)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xPlain).x_member_type_)) ((xobject)))
                xtest_no_such_enum_member.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xColor)).apply (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((xColor)) ("chartreuse"))
                xtest_new_repr.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("don't you just love shades of %s?".mod ((xself).xname))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xColor).xblue)))) ("don't you just love shades of blue?"))
                xtest_inherited_repr.write
                  [xself]
                    memory > xthis
                    memory > xtheother
                    memory > xthat
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x__repr__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (("My name is %s.".mod ((xself).xname))))
                        (((unsupported)).apply ((xint)) ((xMyEnum)))
                          seq
                            xthis.write 1
                            xthat.write 2
                            xtheother.write 3
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xMyIntEnum).xthat)))) ("My name is that."))
                xtest_multiple_mixin_mro.write
                  [xself]
                    memory > x__new__
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((((xtype)).apply ((xEnum)))))
                          x__new__.write
                            [xmetacls xcls xbases xclassdict]
                              memory > xi
                              memory > xnames
                              memory > xv
                              memory > xtemp
                              seq > @
                                seq
                                  xtemp.write (((((xtype)).apply ((xclassdict)))).apply)
                                  xnames.write (((xset)).apply (((xclassdict).x_member_names)))
                                  xi.write 0
                                  (((unsupported)).apply ((xk)) (((xclassdict).x_member_names)))
                                    seq
                                      xv.write (((unsupported)).apply ((xclassdict)) ((xk)))
                                      (((unsupported)).apply ((xv)) ((xEllipsis))).if
                                        xv.write (xi)
                                        xi.write (xv)
                                      (((unsupported)).apply ((xi)) (1))
                                      (((unsupported)).apply ((((unsupported)).apply ((xtemp)) ((xk)))) ((xv)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xclassdict).xitems)).apply)))
                                    (((unsupported)).apply ((xk)) ((xnames))).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xtemp)) ((xk)))) ((xv)))
                                  (((unsupported)).apply (((((((xsuper)).apply ((xauto_enum)) ((xmetacls))).x__new__)).apply ((xmetacls)) ((xcls)) ((xbases)) ((xtemp)))))
                        (((unsupported)).apply ((xEnum)) ((xauto_enum)))
                        (((unsupported)).apply ((xIntEnum)) ((xauto_enum)))
                        (((unsupported)).apply ((xAutoNumberedEnum)))
                          seq
                            xa.write (((unsupported)).apply)
                            xb.write 3
                            xc.write (((unsupported)).apply)
                        (((unsupported)).apply ((xAutoIntEnum)))
                          seq
                            xa.write (((unsupported)).apply)
                            xb.write 3
                            xc.write (((unsupported)).apply)
                xtest_subclasses_with_getnewargs.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > x__getnewargs__
                    memory > xx
                    memory > x__add__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__getnewargs__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).x_args)))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertEqual)) ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xNEI).xy)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xNEI)))
                xtest_subclasses_with_getnewargs_ex.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > x__getnewargs_ex__
                    memory > xx
                    memory > x__add__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__getnewargs_ex__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_args)) ((((unsupported)).apply)))))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertEqual)) ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xNEI).xy)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xNEI)))
                xtest_subclasses_with_reduce.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > x__reduce__
                    memory > xx
                    memory > x__add__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__reduce__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_args)))))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertEqual)) ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xNEI).xy)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xNEI)))
                xtest_subclasses_with_reduce_ex.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > xx
                    memory > x__add__
                    memory > x__reduce_ex__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__reduce_ex__.write
                              [xself xproto]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_args)))))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertEqual)) ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xNEI).xy)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xNEI)))
                xtest_subclasses_without_direct_pickle_support.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > xx
                    memory > x__add__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_exception)).apply (((xself).xassertRaises)) ((xTypeError)) (((xNEI).xx)))
                        bogusForceDataize.write (((xtest_pickle_exception)).apply (((xself).xassertRaises)) ((xPicklingError)) ((xNEI)))
                xtest_subclasses_without_direct_pickle_support_using_name.write
                  [xself]
                    memory > x__str__
                    memory > x__repr__
                    memory > x__qualname__
                    memory > xx
                    memory > x__add__
                    memory > x__reduce_ex__
                    memory > x__new__
                    memory > x__name__
                    memory > xNI5
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__qualname__.write "NamedInt"
                            x__new__.write
                              [xcls]
                                memory > x_args
                                memory > xself
                                seq > @
                                  (((unsupported)).apply)
                                    x_args.write (xargs)
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xargs)))))) ((xargs)))
                                    ((((xlen)).apply ((xargs))).eq 0).if
                                      (((unsupported)).apply ((((xTypeError)).apply ("name and value must be specified"))))
                                    xself.write ((((xint).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))))
                                    (((unsupported)).apply (((xself).x_intname)) ((xname)))
                                    (((unsupported)).apply (((xself).x_args)) ((x_args)))
                                    (((unsupported)).apply ((xself)))
                            x__name__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_intname)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((("{}({!r}, {})".xformat)).apply (((((xtype)).apply ((xself))).x__name__)) (((xself).x__name__)) (((((xint).x__repr__)).apply ((xself)))))))
                            x__str__.write
                              [xself]
                                memory > xbase
                                memory > xbase_str
                                seq > @
                                  seq
                                    xbase.write (xint)
                                    xbase_str.write ((xbase).x__str__)
                                    (((unsupported)).apply (((xbase_str).x__objclass__)) ((xobject))).if
                                      (((unsupported)).apply (((((xbase).x__repr__)).apply ((xself)))))
                                    (((unsupported)).apply ((((xbase_str)).apply ((xself)))))
                            x__add__.write
                              [xself xother]
                                memory > xtemp
                                seq > @
                                  seq
                                    xtemp.write ((((xint)).apply ((xself))).add (((xint)).apply ((xother))))
                                    ((((xisinstance)).apply ((xself)) ((xNamedInt))).and (((xisinstance)).apply ((xother)) ((xNamedInt)))).if
                                      (((unsupported)).apply ((((xNamedInt)).apply (((("({0} + {1})".xformat)).apply (((xself).x__name__)) (((xother).x__name__)))) ((xtemp)))))
                                      (((unsupported)).apply ((xtemp)))
                        (((unsupported)).apply ((xNamedInt)) ((xEnum)))
                          seq
                            x__qualname__.write "NEI"
                            xx.write (((unsupported)).apply ("the-x") (1))
                            xy.write (((unsupported)).apply ("the-y") (2))
                            x__reduce_ex__.write
                              [xself xproto]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xgetattr)) ((((unsupported)).apply (((xself).x__class__)) (((xself).x_name_)))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xNEI).x__new__)) (((xEnum).x__new__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xNEI).xx).add ((xNEI).xy))))) ("NamedInt('(the-x + the-y)', 3)"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NamedInt"))) ((xNamedInt)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("NEI"))) ((xNEI)))
                        xNI5.write (((xNamedInt)).apply ("test") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xNI5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNEI).xy).xvalue)) (2))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xNEI).xy)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xNEI)))
                xtest_tuple_subclass.write
                  [xself]
                    memory > xsecond
                    memory > x__qualname__
                    memory > xfirst
                    memory > xthird
                    seq > @
                      seq
                        (((unsupported)).apply ((xtuple)) ((xEnum)))
                          seq
                            x__qualname__.write "SomeTuple"
                            xfirst.write (((unsupported)).apply (1) ("for the money"))
                            xsecond.write (((unsupported)).apply (2) ("for the show"))
                            xthird.write (((unsupported)).apply (3) ("for the music"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xSomeTuple).xfirst)))) ((xSomeTuple)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xSomeTuple).xsecond)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xSomeTuple).xthird)) ((((unsupported)).apply (3) ("for the music"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("SomeTuple"))) ((xSomeTuple)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) (((xSomeTuple).xfirst)))
                xtest_duplicate_values_give_unique_enum_items.write
                  [xself]
                    memory > xthird
                    memory > xsecond
                    memory > xfirst
                    memory > x__int__
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xfirst.write (((unsupported)).apply)
                            xsecond.write (((unsupported)).apply)
                            xthird.write (((unsupported)).apply)
                            x__new__.write
                              [xcls]
                                memory > xvalue
                                memory > xobj
                                seq > @
                                  seq
                                    xvalue.write ((((xlen)).apply (((xcls).x__members__))).add 1)
                                    xobj.write ((((xobject).x__new__)).apply ((xcls)))
                                    (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                    (((unsupported)).apply ((xobj)))
                            x__int__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xint)).apply (((xself).x_value_)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xAutoNumber)))) ((((unsupported)).apply (((xAutoNumber).xfirst)) (((xAutoNumber).xsecond)) (((xAutoNumber).xthird)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xAutoNumber).xsecond)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xAutoNumber).xthird).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xAutoNumber)).apply (1))) (((xAutoNumber).xfirst)))
                xtest_inherited_new_from_enhanced_enum.write
                  [xself]
                    memory > xblue
                    memory > xgreen
                    memory > xred
                    memory > x__int__
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x__new__.write
                              [xcls]
                                memory > xvalue
                                memory > xobj
                                seq > @
                                  seq
                                    xvalue.write ((((xlen)).apply (((xcls).x__members__))).add 1)
                                    xobj.write ((((xobject).x__new__)).apply ((xcls)))
                                    (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                    (((unsupported)).apply ((xobj)))
                            x__int__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xint)).apply (((xself).x_value_)))))
                        (((unsupported)).apply ((xAutoNumber)))
                          seq
                            xred.write (((unsupported)).apply)
                            xgreen.write (((unsupported)).apply)
                            xblue.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xgreen)) (((xColor).xblue)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xint)) ((xColor)))))) ((((unsupported)).apply (1) (2) (3))))
                xtest_inherited_new_from_mixed_enum.write
                  [xself]
                    memory > xred
                    memory > x__new__
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xIntEnum)))
                          x__new__.write
                            [xcls]
                              memory > xvalue
                              memory > xobj
                              seq > @
                                seq
                                  xvalue.write ((((xlen)).apply (((xcls).x__members__))).add 1)
                                  xobj.write ((((xint).x__new__)).apply ((xcls)) ((xvalue)))
                                  (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xAutoNumber)))
                          seq
                            xred.write (((unsupported)).apply)
                            xgreen.write (((unsupported)).apply)
                            xblue.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xgreen)) (((xColor).xblue)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xint)) ((xColor)))))) ((((unsupported)).apply (1) (2) (3))))
                xtest_equality.write
                  [xself]
                    memory > x__eq__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xEnum)))
                          xa.write 1
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xAlwaysEqual)).apply)) (((xOrdinaryEnum).xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xOrdinaryEnum).xa)) ((((xAlwaysEqual)).apply)))
                xtest_ordered_mixin.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xA
                    memory > x__ge__
                    memory > x__le__
                    memory > x__lt__
                    memory > x__gt__
                    memory > xF
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x__ge__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).x__class__)) (((xother).x__class__))).if
                                      (((unsupported)).apply ((((xself).x_value_).geq ((xother).x_value_))))
                                    (((unsupported)).apply ((xNotImplemented)))
                            x__gt__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).x__class__)) (((xother).x__class__))).if
                                      (((unsupported)).apply ((((xself).x_value_).greater ((xother).x_value_))))
                                    (((unsupported)).apply ((xNotImplemented)))
                            x__le__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).x__class__)) (((xother).x__class__))).if
                                      (((unsupported)).apply ((((xself).x_value_).leq ((xother).x_value_))))
                                    (((unsupported)).apply ((xNotImplemented)))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).x__class__)) (((xother).x__class__))).if
                                      (((unsupported)).apply ((((xself).x_value_).less ((xother).x_value_))))
                                    (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply ((xOrderedEnum)))
                          seq
                            xA.write 5
                            xB.write 4
                            xC.write 3
                            xD.write 2
                            xF.write 1
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xGrade).xA)) (((xGrade).xB)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((xGrade).xF)) (((xGrade).xC)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply (((xGrade).xD)) (((xGrade).xA)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xGrade).xB)) (((xGrade).xB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xGrade).xB)) (((xGrade).xB)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xGrade).xC)) (((xGrade).xD)))
                xtest_extending2.write
                  [xself]
                    memory > xyellow
                    memory > xgreen
                    memory > xcyan
                    memory > xmagenta
                    memory > xred
                    memory > xshade
                    memory > xblue
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          xshade.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((xprint)).apply (((xself).xname)))
                        (((unsupported)).apply ((xShade)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xColor)))
                            seq
                              xcyan.write 4
                              xmagenta.write 5
                              xyellow.write 6
                xtest_extending3.write
                  [xself]
                    memory > xshade
                    memory > xyellow
                    memory > xcyan
                    memory > xmagenta
                    memory > xhex
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          xshade.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xname)))
                        (((unsupported)).apply ((xShade)))
                          xhex.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (("%s hexlified!".mod ((xself).xvalue))))
                        (((unsupported)).apply ((xColor)))
                          seq
                            xcyan.write 4
                            xmagenta.write 5
                            xyellow.write 6
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xMoreColor).xmagenta).xhex)).apply)) ("5 hexlified!"))
                xtest_subclass_duplicate_name.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          xtest.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xBase)))
                          xtest.write 1
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xTest).xtest)))) ((xTest)))
                xtest_subclass_duplicate_name_dynamic.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xEnum)))
                          xtest.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ("dynamic"))
                        (((unsupported)).apply ((xBase)))
                          xtest.write 1
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xTest).xtest).xtest)) ("dynamic"))
                xtest_no_duplicates.write
                  [xself]
                    memory > xblue
                    memory > xgreen
                    memory > x__init__
                    memory > xred
                    memory > xgrene
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x__init__.write
                            [xself]
                              memory > xe
                              memory > xcls
                              memory > xa
                              seq > @
                                (((unsupported)).apply)
                                  xcls.write ((xself).x__class__)
                                  (((xany)).apply ((((unsupported)).apply ((((xself).xvalue).eq ((xe).xvalue))) ((xe)) ((xcls))))).if
                                    seq
                                      xa.write ((xself).xname)
                                      xe.write ((((xcls)).apply (((xself).xvalue))).xname)
                                      (((unsupported)).apply ((((xValueError)).apply (("aliases not allowed in UniqueEnum:  %r --> %r".mod (((unsupported)).apply ((xa)) ((xe))))))))
                        (((unsupported)).apply ((xUniqueEnum)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xUniqueEnum)))
                            seq
                              xred.write 1
                              xgreen.write 2
                              xblue.write 3
                              xgrene.write 2
                xtest_init.write
                  [xself]
                    memory > xMARS
                    memory > xMERCURY
                    memory > xURANUS
                    memory > xJUPITER
                    memory > xEARTH
                    memory > xVENUS
                    memory > xSATURN
                    memory > x__init__
                    memory > xNEPTUNE
                    memory > xsurface_gravity
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xMERCURY.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xVENUS.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xEARTH.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xMARS.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xJUPITER.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xSATURN.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xURANUS.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xNEPTUNE.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            x__init__.write
                              [xself xmass xradius]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xmass)) ((xmass)))
                                    (((unsupported)).apply (((xself).xradius)) ((xradius)))
                            xsurface_gravity.write
                              [xself]
                                memory > xG
                                seq > @
                                  (((unsupported)).apply)
                                    xG.write (((unsupported)).apply)
                                    (((unsupported)).apply ((((xG).mul ((xself).xmass)).div (((xself).xradius).mul ((xself).xradius)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((xPlanet).xEARTH).xsurface_gravity)) (2))) (9.80))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPlanet).xEARTH).xvalue)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xtest_ignore.write
                  [xself]
                    memory > xPeriod
                    memory > xOneWeek
                    memory > xOneDay
                    memory > x_ignore_
                    memory > xOneMonth
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtimedelta)) ((xEnum)))
                          seq
                            (((unsupported)).apply)
                            x__new__.write
                              [xcls xvalue xperiod]
                                memory > xobj
                                seq > @
                                  seq
                                    xobj.write ((((xtimedelta).x__new__)).apply ((xcls)) ((xvalue)))
                                    (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                    (((unsupported)).apply (((xobj).xperiod)) ((xperiod)))
                                    (((unsupported)).apply ((xobj)))
                            x_ignore_.write "Period i"
                            xPeriod.write (((xvars)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (13))))
                              (((unsupported)).apply ((((unsupported)).apply ((xPeriod)) (("month_%d".mod (xi))))) ((((unsupported)).apply (((xi).mul 30)) ("month"))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (53))))
                              (((unsupported)).apply ((((unsupported)).apply ((xPeriod)) (("week_%d".mod (xi))))) ((((unsupported)).apply (((xi).mul 7)) ("week"))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (32))))
                              (((unsupported)).apply ((((unsupported)).apply ((xPeriod)) (("day_%d".mod (xi))))) ((((unsupported)).apply ((xi)) ("day"))))
                            xOneDay.write (xday_1)
                            xOneWeek.write (xweek_1)
                            xOneMonth.write (xmonth_1)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xPeriod)) ("_ignore_"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xPeriod)) ("Period"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xPeriod)) ("i"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xPeriod).xday_1)) ((xtimedelta)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xPeriod).xmonth_1)) (((xPeriod).xday_30)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xPeriod).xweek_4)) (((xPeriod).xday_28)))))
                xtest_nonhash_value.write
                  [xself]
                    memory > xred
                    memory > x__new__
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x__new__.write
                            [xcls]
                              memory > xvalue
                              memory > xobj
                              seq > @
                                seq
                                  xvalue.write (((unsupported)).apply (((((xlen)).apply (((xcls).x__members__))).add 1)))
                                  xobj.write ((((xobject).x__new__)).apply ((xcls)))
                                  (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xAutoNumberInAList)))
                          seq
                            xred.write (((unsupported)).apply)
                            xgreen.write (((unsupported)).apply)
                            xblue.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColorInAList)))) ((((unsupported)).apply (((xColorInAList).xred)) (((xColorInAList).xgreen)) (((xColorInAList).xblue)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xenum)) ((xvalue)))) ((((xzip)).apply ((xColorInAList)) ((((xrange)).apply (3))))))
                          seq
                            (((unsupported)).apply ((xvalue)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xenum).xvalue)) ((((unsupported)).apply ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xColorInAList)).apply ((((unsupported)).apply ((xvalue)))))) ((xenum)))
                xtest_conflicting_types_resolved_in_new.write
                  [xself]
                    memory > x__new__
                    memory > xpayment_complete
                    memory > xunprocessed
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)) ((xEnum)))
                          x__new__.write
                            [xcls]
                              memory > xobj
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xlabel)))) ((xargs)))
                                  xobj.write ((((xint).x__new__)).apply ((xcls)) ((xvalue)))
                                  (((unsupported)).apply (((xobj).xlabel)) ((xlabel)))
                                  (((unsupported)).apply (((xobj).x_value_)) ((xvalue)))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xLabelledIntEnum)))
                          seq
                            xunprocessed.write (((unsupported)).apply (1) ("Unprocessed"))
                            xpayment_complete.write (((unsupported)).apply (2) ("Payment Complete"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xLabelledList)))) ((((unsupported)).apply (((xLabelledList).xunprocessed)) (((xLabelledList).xpayment_complete)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelledList).xunprocessed)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xLabelledList)).apply (1))) (((xLabelledList).xunprocessed)))
                xtest_auto_number.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write (((xauto)).apply)
                            xblue.write (((xauto)).apply)
                            xgreen.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)) (((xColor).xgreen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xgreen).xvalue)) (3))
                xtest_auto_name.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > x_generate_next_value_
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_generate_next_value_.write
                              [xname xstart xcount xlast]
                                seq > @
                                  (((unsupported)).apply ((xname)))
                            xred.write (((xauto)).apply)
                            xblue.write (((xauto)).apply)
                            xgreen.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)) (((xColor).xgreen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) ("red"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xgreen).xvalue)) ("green"))
                xtest_auto_name_inherit.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > x_generate_next_value_
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          x_generate_next_value_.write
                            [xname xstart xcount xlast]
                              seq > @
                                (((unsupported)).apply ((xname)))
                        (((unsupported)).apply ((xAutoNameEnum)))
                          seq
                            xred.write (((xauto)).apply)
                            xblue.write (((xauto)).apply)
                            xgreen.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)) (((xColor).xgreen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) ("red"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xgreen).xvalue)) ("green"))
                xtest_auto_garbage.write
                  [xself]
                    memory > xred
                    memory > xblue
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write "red"
                            xblue.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) (1))
                xtest_auto_garbage_corrected.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write "red"
                            xblue.write 2
                            xgreen.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)) (((xColor).xgreen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) ("red"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xgreen).xvalue)) (3))
                xtest_auto_order.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > x_generate_next_value_
                    memory > xgreen
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write (((xauto)).apply)
                            xgreen.write (((xauto)).apply)
                            xblue.write (((xauto)).apply)
                            x_generate_next_value_.write
                              [xname xstart xcount xlast]
                                seq > @
                                  (((unsupported)).apply ((xname)))
                xtest_auto_order_wierd.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > x_generate_next_value_
                    memory > xweird_auto
                    seq > @
                      seq
                        xweird_auto.write (((xauto)).apply)
                        (((unsupported)).apply (((xweird_auto).xvalue)) ("pathological case"))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write (xweird_auto)
                            x_generate_next_value_.write
                              [xname xstart xcount xlast]
                                seq > @
                                  (((unsupported)).apply ((xname)))
                            xblue.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) ("pathological case"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) ("blue"))
                xtest_duplicate_auto.write
                  [xself]
                    memory > xprimero
                    memory > xsecond
                    memory > xfirst
                    memory > xthird
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            (((unsupported)).apply ((xfirst)) ((xprimero)) ((((xauto)).apply)))
                            xsecond.write (((xauto)).apply)
                            xthird.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xDupes).xfirst)) (((xDupes).xsecond)) (((xDupes).xthird)))) ((((xlist)).apply ((xDupes)))))
                xtest_default_missing.write
                  [xself]
                    memory > xRED
                    memory > xBLUE
                    memory > xGREEN
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xRED.write 1
                            xGREEN.write 2
                            xBLUE.write 3
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write (((xColor)).apply (7))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xexc).x__context__)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply ((((xException)).apply ("Exception not raised."))))
                xtest_missing.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    memory > x_missing_
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                            x_missing_.write
                              [xcls xitem]
                                seq > @
                                  (((unsupported)).apply)
                                    ((xitem).eq "three").if
                                      (((unsupported)).apply (((xcls).xblue)))
                                      ((xitem).eq "bad return").if
                                        (((unsupported)).apply (5))
                                        ((xitem).eq "error out").if
                                          (((unsupported)).apply ((xZeroDivisionError)))
                                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xColor)).apply ("three"))) (((xColor).xblue)))
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write (((xColor)).apply (7))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xexc).x__context__)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply ((((xException)).apply ("Exception not raised."))))
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((xColor)).apply ("bad return"))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xexc).x__context__)) ((xValueError)))))
                          (((unsupported)).apply ((((xException)).apply ("Exception not raised."))))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          bogusForceDataize.write (((xColor)).apply ("error out"))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xexc).x__context__)) ((xValueError)))))
                          (((unsupported)).apply ((((xException)).apply ("Exception not raised."))))
                xtest_missing_exceptions_reset.write
                  [xself]
                    memory > xVAL1
                    memory > xclass_2_ref
                    memory > xVAL2
                    memory > x__init__
                    memory > xclass_1_ref
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xenum).xEnum)))
                          seq
                            xVAL1.write "val1"
                            xVAL2.write "val2"
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                                  (((unsupported)).apply ((((xValueError)).apply)))
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                                  bogusForceDataize.write (((xTestEnum)).apply ("invalid_value"))
                        xclass_1_ref.write ((((xweakref).xref)).apply ((((xClass1)).apply)))
                        xclass_2_ref.write ((((xweakref).xref)).apply ((((xClass2)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xclass_1_ref)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xclass_2_ref)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_multiple_mixin.write
                  [xself]
                    memory > xBLUE
                    memory > xMAX
                    memory > xsocial
                    memory > xGREEN
                    memory > xbehavior
                    memory > x__str__
                    memory > xRED
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xMAX.write
                            [xcls]
                              memory > xmax
                              seq > @
                                (((unsupported)).apply)
                                  xmax.write (((xlen)).apply ((xcls)))
                                  (((unsupported)).apply (((xcls).xMAX)) ((xmax)))
                                  (((unsupported)).apply ((xmax)))
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((((xself).x_name_).xlower)).apply)))
                        (((unsupported)).apply ((xEnum)))
                          xbehavior.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("booyah"))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            xbehavior.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("nuhuh!"))
                            xsocial.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("what's up?"))
                        (((unsupported)).apply ((xMaxMixin)) ((xEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xColor).xMAX)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("Color.BLUE"))
                        (((unsupported)).apply ((xMaxMixin)) ((xStrMixin)) ((xEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xColor).xMAX)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                        (((unsupported)).apply ((xStrMixin)) ((xMaxMixin)) ((xEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xColor).xMAX)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                        (((unsupported)).apply ((xStrMixin)) ((xSomeEnum)) ((xEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xCoolColor).xBLUE)))) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCoolColor).xRED).xbehavior)).apply)) ("booyah"))
                        (((unsupported)).apply ((xStrMixin)) ((xAnotherEnum)) ((xEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolerColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolerColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolerColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xCoolerColor).xBLUE)))) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCoolerColor).xRED).xbehavior)).apply)) ("nuhuh!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCoolerColor).xRED).xsocial)).apply)) ("what's up?"))
                        (((unsupported)).apply ((xStrMixin)) ((xSomeEnum)) ((xAnotherEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolestColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolestColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCoolestColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xCoolestColor).xBLUE)))) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCoolestColor).xRED).xbehavior)).apply)) ("booyah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCoolestColor).xRED).xsocial)).apply)) ("what's up?"))
                        (((unsupported)).apply ((xStrMixin)) ((xAnotherEnum)) ((xSomeEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xConfusedColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xConfusedColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xConfusedColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xConfusedColor).xBLUE)))) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xConfusedColor).xRED).xbehavior)).apply)) ("nuhuh!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xConfusedColor).xRED).xsocial)).apply)) ("what's up?"))
                        (((unsupported)).apply ((xStrMixin)) ((xIntEnum)) ((xSomeEnum)) ((xAnotherEnum)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xReformedColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xReformedColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xReformedColor).xBLUE).xvalue)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xReformedColor).xBLUE)))) ("blue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xReformedColor).xRED).xbehavior)).apply)) ("booyah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xConfusedColor).xRED).xsocial)).apply)) ("what's up?"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xReformedColor)) ((xint)))))
                xtest_multiple_inherited_mixin.write
                  [xself]
                    memory > xRETRY
                    memory > x__new__
                    memory > xREVERT_ALL
                    memory > xREVERT
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)) ((xEnum)))
                          x__new__.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((xa)) ((xargs)))
                                    ((((xisinstance)).apply ((xa)) ((xstr))).not).if
                                      (((unsupported)).apply ((((xTypeError)).apply (("Enumeration '%s' (%s) is not a string".mod (((unsupported)).apply ((xa)) (((((xtype)).apply ((xa))).x__name__))))))))
                                  (((unsupported)).apply (((((xstr).x__new__)).apply ((xcls)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply ((xStrEnum)) ((xunique)))
                          seq
                            xREVERT.write "REVERT"
                            xREVERT_ALL.write "REVERT_ALL"
                            xRETRY.write "RETRY"
                        (((unsupported)).apply ((xStrEnum)))
                        (((unsupported)).apply ((xMyEnum)) ((xunique)))
                          seq
                            xREVERT.write "REVERT"
                            xREVERT_ALL.write "REVERT_ALL"
                            xRETRY.write "RETRY"
                xtest_multiple_mixin_inherited.write
                  [xself]
                    memory > xTEST
                    memory > x__new__
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          x__new__.write
                            [xcls xvalue]
                              seq > @
                                (((unsupported)).apply (((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xvalue)))))
                        (((unsupported)).apply)
                          x__repr__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xhex)).apply ((xself)))))
                        (((unsupported)).apply ((xHexMixin)) ((xMyInt)) (((xenum).xEnum)))
                        (((unsupported)).apply ((xMyIntEnum)))
                          xTEST.write 1
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xFoo).xTEST)) ((xMyInt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xFoo).xTEST)))) ("0x1"))
                        (((unsupported)).apply ((xMyIntEnum)))
                          seq
                            xTEST.write 1
                            x__new__.write
                              [xcls xvalue]
                                memory > xmember
                                seq > @
                                  seq
                                    (((unsupported)).apply ((xvalue)) (1))
                                    xmember.write ((((xint).x__new__)).apply ((xcls)) ((xvalue)))
                                    (((unsupported)).apply (((xmember).x_value_)) ((xvalue)))
                                    (((unsupported)).apply ((xmember)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xFee).xTEST)) (2))
                xtest_empty_globals.write
                  [xself]
                    memory > xcode
                    memory > xlocal_ls
                    memory > xglobal_ns
                    seq > @
                      seq
                        xcode.write "from enum import Enum; Enum('Animal', 'ANT BEE CAT DOG')"
                        xcode.write (((xcompile)).apply ((xcode)) ("<string>") ("exec"))
                        xglobal_ns.write (((unsupported)).apply)
                        xlocal_ls.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xglobal_ns)) ((xlocal_ls)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_same_members.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    memory > x_order_
                    seq > @
                      (((unsupported)).apply ((xEnum)))
                        seq
                          x_order_.write "red green blue"
                          xred.write 1
                          xgreen.write 2
                          xblue.write 3
                xtest_same_members_with_aliases.write
                  [xself]
                    memory > x_order_
                    memory > xverde
                    memory > xblue
                    memory > xgreen
                    memory > xred
                    seq > @
                      (((unsupported)).apply ((xEnum)))
                        seq
                          x_order_.write "red green blue"
                          xred.write 1
                          xgreen.write 2
                          xblue.write 3
                          xverde.write (xgreen)
                xtest_same_members_wrong_order.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    memory > x_order_
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("member order does not match _order_"))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_order_.write "red green blue"
                            xred.write 1
                            xblue.write 3
                            xgreen.write 2
                xtest_order_has_extra_members.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    memory > x_order_
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("member order does not match _order_"))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_order_.write "red green blue purple"
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                xtest_order_has_extra_members_with_aliases.write
                  [xself]
                    memory > x_order_
                    memory > xverde
                    memory > xblue
                    memory > xgreen
                    memory > xred
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("member order does not match _order_"))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_order_.write "red green blue purple"
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                            xverde.write (xgreen)
                xtest_enum_has_extra_members.write
                  [xself]
                    memory > x_order_
                    memory > xblue
                    memory > xgreen
                    memory > xpurple
                    memory > xred
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("member order does not match _order_"))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_order_.write "red green blue"
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                            xpurple.write 4
                xtest_enum_has_extra_members_with_aliases.write
                  [xself]
                    memory > x_order_
                    memory > xverde
                    memory > xblue
                    memory > xgreen
                    memory > xpurple
                    memory > xred
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("member order does not match _order_"))))
                        (((unsupported)).apply ((xEnum)))
                          seq
                            x_order_.write "red green blue"
                            xred.write 1
                            xgreen.write 2
                            xblue.write 3
                            xpurple.write 4
                            xverde.write (xgreen)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                (((unsupported)).apply ((xFlag)))
                  (((unsupported)).apply ((((unsupported)).apply ((xR)) ((xW)) ((xX)))) ((((unsupported)).apply (4) (2) (1))))
                (((unsupported)).apply ((xFlag)))
                  seq
                    xRO.write 0
                    xWO.write 1
                    xRW.write 2
                    xAC.write 3
                    xCE.write (((unsupported)).apply (1) (19))
                (((unsupported)).apply ((xFlag)))
                  seq
                    xBLACK.write 0
                    xRED.write 1
                    xGREEN.write 2
                    xBLUE.write 4
                    xPURPLE.write ((xRED).or (xBLUE))
                xtest_str.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xR)))) ("Perm.R"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xW)))) ("Perm.W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xX)))) ("Perm.X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xR).or ((xPerm).xW))))) ("Perm.R|W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))))) ("Perm.R|W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply (0))))) ("Perm.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xR).neg)))) ("Perm.W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xW).neg)))) ("Perm.R|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xX).neg)))) ("Perm.R|W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xPerm).xR).or ((xPerm).xW)).neg)))) ("Perm.X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX)).neg)))) ("Perm.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply ((0.neg)))))) ("Perm.R|W|X"))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xRO)))) ("Open.RO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xWO)))) ("Open.WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xAC)))) ("Open.AC"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xRO).or ((xOpen).xCE))))) ("Open.CE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xWO).or ((xOpen).xCE))))) ("Open.CE|WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xRO).neg)))) ("Open.CE|AC|RW|WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xWO).neg)))) ("Open.CE|RW"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xAC).neg)))) ("Open.CE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xOpen).xRO).or ((xOpen).xCE)).neg)))) ("Open.AC"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xOpen).xWO).or ((xOpen).xCE)).neg)))) ("Open.RW"))
                xtest_repr.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xR)))) ("<Perm.R: 4>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xW)))) ("<Perm.W: 2>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xX)))) ("<Perm.X: 1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xR).or ((xPerm).xW))))) ("<Perm.R|W: 6>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))))) ("<Perm.R|W|X: 7>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply (0))))) ("<Perm.0: 0>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xR).neg)))) ("<Perm.W|X: 3>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xW).neg)))) ("<Perm.R|X: 5>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xX).neg)))) ("<Perm.R|W: 6>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xPerm).xR).or ((xPerm).xW)).neg)))) ("<Perm.X: 1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX)).neg)))) ("<Perm.0: 0>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply ((0.neg)))))) ("<Perm.R|W|X: 7>"))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xRO)))) ("<Open.RO: 0>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xWO)))) ("<Open.WO: 1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xAC)))) ("<Open.AC: 3>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xRO).or ((xOpen).xCE))))) ("<Open.CE: 524288>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xWO).or ((xOpen).xCE))))) ("<Open.CE|WO: 524289>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xRO).neg)))) ("<Open.CE|AC|RW|WO: 524291>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xWO).neg)))) ("<Open.CE|RW: 524290>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xAC).neg)))) ("<Open.CE: 524288>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xOpen).xRO).or ((xOpen).xCE)).neg)))) ("<Open.AC: 3>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xOpen).xWO).or ((xOpen).xCE)).neg)))) ("<Open.RW: 2>"))
                xtest_format.write
                  [xself]
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((xPerm).xR)) (""))) ("Perm.R"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((((xPerm).xR).or ((xPerm).xX))) (""))) ("Perm.R|X"))
                xtest_or.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          (((unsupported)).apply ((xj)) ((xPerm)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).or (xj))) ((((xPerm)).apply ((((xi).xvalue).or ((xj).xvalue))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).or (xj)).xvalue)) ((((xi).xvalue).or ((xj).xvalue))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).or (xj))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).or (xi))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xRO).or ((xOpen).xCE))) (((xOpen).xCE)))
                xtest_and.write
                  [xself]
                    memory > xvalues
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    memory > xOpen
                    memory > xWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        xRW.write (((xPerm).xR).or ((xPerm).xW))
                        xRX.write (((xPerm).xR).or ((xPerm).xX))
                        xWX.write (((xPerm).xW).or ((xPerm).xX))
                        xRWX.write ((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))
                        xvalues.write ((((xlist)).apply ((xPerm))).add (((unsupported)).apply ((xRW)) ((xRX)) ((xWX)) ((xRWX)) ((((xPerm)).apply (0)))))
                        (((unsupported)).apply ((xi)) ((xvalues)))
                          (((unsupported)).apply ((xj)) ((xvalues)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).and (xj)).xvalue)) ((((xi).xvalue).and ((xj).xvalue))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).and (xj))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).and (xi))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).and (xRWX))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xRWX).and (xi))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xRO).and ((xOpen).xCE))) (((xOpen).xRO)))
                xtest_xor.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          (((unsupported)).apply ((xj)) ((xPerm)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xi)) ((xj))).xvalue)) ((((unsupported)).apply (((xi).xvalue)) (((xj).xvalue)))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xi)) ((xj)))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xi)) ((((xPerm)).apply (0))))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((xPerm)).apply (0))) ((xi)))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xOpen).xRO)) (((xOpen).xCE)))) (((xOpen).xCE)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xOpen).xCE)) (((xOpen).xCE)))) (((xOpen).xRO)))
                xtest_invert.write
                  [xself]
                    memory > xvalues
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    memory > xOpen
                    memory > xWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        xRW.write (((xPerm).xR).or ((xPerm).xW))
                        xRX.write (((xPerm).xR).or ((xPerm).xX))
                        xWX.write (((xPerm).xW).or ((xPerm).xX))
                        xRWX.write ((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))
                        xvalues.write ((((xlist)).apply ((xPerm))).add (((unsupported)).apply ((xRW)) ((xRX)) ((xWX)) ((xRWX)) ((((xPerm)).apply (0)))))
                        (((unsupported)).apply ((xi)) ((xvalues)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).neg)))) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).neg).neg)) ((xi)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xi).neg).neg)) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xWO).and (((xOpen).xWO).neg))) (((xOpen).xRO)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xOpen).xWO).or ((xOpen).xCE)).and (((xOpen).xWO).neg))) (((xOpen).xCE)))
                xtest_bool.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xf)) ((xPerm)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((xf)))
                        xOpen.write ((xself).xOpen)
                        (((unsupported)).apply ((xf)) ((xOpen)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbool)).apply (((xf).xvalue)))) ((((xbool)).apply ((xf)))))
                xtest_programatic_function_string.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xFlag)).apply ("Perm") ("R W X"))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_string_with_start.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((unsupported)).apply ((xFlag)) ("Perm") ("R W X") (8))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (8) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_string_list.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xFlag)).apply ("Perm") ((((unsupported)).apply ("R") ("W") ("X"))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_iterable.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xFlag)).apply ("Perm") ((((unsupported)).apply ((((unsupported)).apply ("R") (2))) ((((unsupported)).apply ("W") (8))) ((((unsupported)).apply ("X") (32))))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) (((2.mul (xi)).add 1)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_from_dict.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xFlag)).apply ("Perm") ((((xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("R") (2))) ((((unsupported)).apply ("W") (8))) ((((unsupported)).apply ("X") (32))))))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) (((2.mul (xi)).add 1)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_pickle.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xFlagStooges)) ((xException))).if
                          (((unsupported)).apply ((xFlagStooges)))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((((xFlagStooges).xCURLY).or ((xFlagStooges).xMOE))))
                        bogusForceDataize.write (((xtest_pickle_dump_load)).apply (((xself).xassertIs)) ((xFlagStooges)))
                xtest_contains.write
                  [xself]
                    memory > xColor
                    memory > xOpen
                    seq > @
                      seq
                        xOpen.write ((xself).xOpen)
                        xColor.write ((xself).xColor)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xColor).xBLACK)) ((xOpen)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xOpen).xRO)) ((xColor)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("BLACK") ((xColor)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("RO") ((xOpen)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (1) ((xColor)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (1) ((xOpen)))
                xtest_member_contains.write
                  [xself]
                    memory > xWX
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((((unsupported)).apply ((xR)) ((xW)) ((xX)))) ((xPerm)))
                        xRW.write ((xR).or (xW))
                        xRX.write ((xR).or (xX))
                        xWX.write ((xW).or (xX))
                        xRWX.write (((xR).or (xW)).or (xX))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRW)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xRW)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xR)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xW)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xX)) ((xRW)))))
                xtest_auto_number.write
                  [xself]
                    memory > xred
                    memory > xblue
                    memory > xgreen
                    seq > @
                      seq
                        (((unsupported)).apply ((xFlag)))
                          seq
                            xred.write (((xauto)).apply)
                            xblue.write (((xauto)).apply)
                            xgreen.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xColor)))) ((((unsupported)).apply (((xColor).xred)) (((xColor).xblue)) (((xColor).xgreen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xred).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xblue).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xgreen).xvalue)) (4))
                xtest_auto_number_garbage.write
                  [xself]
                    memory > xred
                    memory > xblue
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Invalid Flag value: .not an int."))))
                        (((unsupported)).apply ((xFlag)))
                          seq
                            xred.write "not an int"
                            xblue.write (((xauto)).apply)
                xtest_cascading_failure.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xFlag)))
                          seq
                            xc.write 3
                            xd.write 4
                            xf.write 6
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("5 is not a valid Bizarre") ((xBizarre)) (5))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("5 is not a valid Bizarre") ((xBizarre)) (5))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("2 is not a valid Bizarre") ((xBizarre)) (2))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("2 is not a valid Bizarre") ((xBizarre)) (2))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("1 is not a valid Bizarre") ((xBizarre)) (1))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("1 is not a valid Bizarre") ((xBizarre)) (1))
                xtest_duplicate_auto.write
                  [xself]
                    memory > xprimero
                    memory > xsecond
                    memory > xfirst
                    memory > xthird
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)))
                          seq
                            (((unsupported)).apply ((xfirst)) ((xprimero)) ((((xauto)).apply)))
                            xsecond.write (((xauto)).apply)
                            xthird.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xDupes).xfirst)) (((xDupes).xsecond)) (((xDupes).xthird)))) ((((xlist)).apply ((xDupes)))))
                xtest_bizarre.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply ((xFlag)))
                          seq
                            xb.write 3
                            xc.write 4
                            xd.write 6
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xBizarre)).apply (7))))) ("<Bizarre.d|c|b: 7>"))
                xtest_multiple_mixin.write
                  [xself]
                    memory > xBLUE
                    memory > xALL
                    memory > xGREEN
                    memory > x__str__
                    memory > xRED
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xALL.write
                            [xcls]
                              memory > xmembers
                              memory > xall_value
                              seq > @
                                (((unsupported)).apply)
                                  xmembers.write (((xlist)).apply ((xcls)))
                                  xall_value.write "None: is there a None literal in the EO language?"
                                  (xmembers).if
                                    seq
                                      xall_value.write (((unsupported)).apply ((xmembers)) (0))
                                      (((unsupported)).apply ((xmember)) ((((unsupported)).apply ((xmembers)) ((((unsupported)).apply (1))))))
                                        (((unsupported)).apply ((xall_value)) ((xmember)))
                                  (((unsupported)).apply (((xcls).xALL)) ((xall_value)))
                                  (((unsupported)).apply ((xall_value)))
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((((xself).x_name_).xlower)).apply)))
                        (((unsupported)).apply ((xAllMixin)) ((xFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("Color.BLUE"))
                        (((unsupported)).apply ((xAllMixin)) ((xStrMixin)) ((xFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                        (((unsupported)).apply ((xStrMixin)) ((xAllMixin)) ((xFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                xtest_unique_composite.write
                  [xself]
                    memory > x__eq__
                    memory > xseven
                    memory > xfour
                    memory > xthreads
                    memory > xeight
                    memory > xsix
                    memory > xcycle_enum
                    memory > xthree
                    memory > x__hash__
                    memory > xseen
                    memory > xtwo
                    memory > xone
                    memory > xfive
                    memory > xfailed
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xFlag)))
                          seq
                            xone.write (((xauto)).apply)
                            xtwo.write (((xauto)).apply)
                            xthree.write (((xauto)).apply)
                            xfour.write (((xauto)).apply)
                            xfive.write (((xauto)).apply)
                            xsix.write (((xauto)).apply)
                            xseven.write (((xauto)).apply)
                            xeight.write (((xauto)).apply)
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xself)) ((xother)))))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xhash)).apply (((xself).x_value_)))))
                        xseen.write (((xset)).apply)
                        xfailed.write FALSE
                        xcycle_enum.write
                          []
                            memory > xfailed
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((xi)) ((((xrange)).apply (256))))
                                    bogusForceDataize.write ((((xseen).xadd)).apply ((((xTestFlag)).apply ((xi)))))
                                  xfailed.write TRUE
                        xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xcycle_enum)))) ((x_)) ((((xrange)).apply (8))))
                        (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xfailed)) ("at least one thread failed while creating composite members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (256) ((((xlen)).apply ((xseen)))) ("too many composite members created"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                (((unsupported)).apply ((xIntFlag)))
                  seq
                    xX.write (((unsupported)).apply (1) (0))
                    xW.write (((unsupported)).apply (1) (1))
                    xR.write (((unsupported)).apply (1) (2))
                (((unsupported)).apply ((xIntFlag)))
                  seq
                    xRO.write 0
                    xWO.write 1
                    xRW.write 2
                    xAC.write 3
                    xCE.write (((unsupported)).apply (1) (19))
                (((unsupported)).apply ((xIntFlag)))
                  seq
                    xBLACK.write 0
                    xRED.write 1
                    xGREEN.write 2
                    xBLUE.write 4
                    xPURPLE.write ((xRED).or (xBLUE))
                xtest_type.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xPerm).x_member_type_)) ((xint)))))
                        xOpen.write ((xself).xOpen)
                        (((unsupported)).apply ((xf)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((xf)) ((xPerm)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) (((xf).xvalue)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((((xPerm).xW).or ((xPerm).xX))) ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPerm).xW).or ((xPerm).xX))) (3))
                        (((unsupported)).apply ((xf)) ((xOpen)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((xf)) ((xOpen)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) (((xf).xvalue)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((((xOpen).xWO).or ((xOpen).xRW))) ((xOpen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xOpen).xWO).or ((xOpen).xRW))) (3))
                xtest_str.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xR)))) ("Perm.R"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xW)))) ("Perm.W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xPerm).xX)))) ("Perm.X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xR).or ((xPerm).xW))))) ("Perm.R|W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))))) ("Perm.R|W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xR).or 8)))) ("Perm.8|R"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply (0))))) ("Perm.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply (8))))) ("Perm.8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xR).neg)))) ("Perm.W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xW).neg)))) ("Perm.R|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm).xX).neg)))) ("Perm.R|W"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xPerm).xR).or ((xPerm).xW)).neg)))) ("Perm.X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX)).neg)))) ("Perm.-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xPerm).xR).or 8).neg)))) ("Perm.W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply ((0.neg)))))) ("Perm.R|W|X"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xPerm)).apply ((8.neg)))))) ("Perm.R|W|X"))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xRO)))) ("Open.RO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xWO)))) ("Open.WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xOpen).xAC)))) ("Open.AC"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xRO).or ((xOpen).xCE))))) ("Open.CE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xWO).or ((xOpen).xCE))))) ("Open.CE|WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen)).apply (4))))) ("Open.4"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xRO).neg)))) ("Open.CE|AC|RW|WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xWO).neg)))) ("Open.CE|RW"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen).xAC).neg)))) ("Open.CE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xOpen).xRO).or ((xOpen).xCE)).neg)))) ("Open.AC|RW|WO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xOpen).xWO).or ((xOpen).xCE)).neg)))) ("Open.RW"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOpen)).apply ((4.neg)))))) ("Open.CE|AC|RW|WO"))
                xtest_repr.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xR)))) ("<Perm.R: 4>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xW)))) ("<Perm.W: 2>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xPerm).xX)))) ("<Perm.X: 1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xR).or ((xPerm).xW))))) ("<Perm.R|W: 6>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))))) ("<Perm.R|W|X: 7>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xR).or 8)))) ("<Perm.8|R: 12>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply (0))))) ("<Perm.0: 0>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply (8))))) ("<Perm.8: 8>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xR).neg)))) ("<Perm.W|X: -5>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xW).neg)))) ("<Perm.R|X: -3>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm).xX).neg)))) ("<Perm.R|W: -2>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xPerm).xR).or ((xPerm).xW)).neg)))) ("<Perm.X: -7>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX)).neg)))) ("<Perm.-8: -8>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xPerm).xR).or 8).neg)))) ("<Perm.W|X: -13>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply ((0.neg)))))) ("<Perm.R|W|X: -1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xPerm)).apply ((8.neg)))))) ("<Perm.R|W|X: -9>"))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xRO)))) ("<Open.RO: 0>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xWO)))) ("<Open.WO: 1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xOpen).xAC)))) ("<Open.AC: 3>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xRO).or ((xOpen).xCE))))) ("<Open.CE: 524288>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xWO).or ((xOpen).xCE))))) ("<Open.CE|WO: 524289>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen)).apply (4))))) ("<Open.4: 4>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xRO).neg)))) ("<Open.CE|AC|RW|WO: -1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xWO).neg)))) ("<Open.CE|RW: -2>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen).xAC).neg)))) ("<Open.CE: -4>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xOpen).xRO).or ((xOpen).xCE)).neg)))) ("<Open.AC|RW|WO: -524289>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xOpen).xWO).or ((xOpen).xCE)).neg)))) ("<Open.RW: -524290>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOpen)).apply ((4.neg)))))) ("<Open.CE|AC|RW|WO: -5>"))
                xtest_format.write
                  [xself]
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((xPerm).xR)) (""))) ("4"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((((xPerm).xR).or ((xPerm).xX))) (""))) ("5"))
                xtest_or.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            (((unsupported)).apply ((xj)) ((xPerm)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).or (xj))) ((((xi).xvalue).or ((xj).xvalue))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).or (xj)).xvalue)) ((((xi).xvalue).or ((xj).xvalue))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).or (xj))))) ((xPerm)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply (8))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).or (xj))) ((((xi).xvalue).or (xj))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).or (xj)).xvalue)) ((((xi).xvalue).or (xj))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).or (xj))))) ((xPerm)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xj).or (xi))) (((xj).or ((xi).xvalue))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xj).or (xi)).xvalue)) (((xj).or ((xi).xvalue))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xj).or (xi))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).or (xi))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).or 0)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((0.or (xi))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xRO).or ((xOpen).xCE))) (((xOpen).xCE)))
                xtest_and.write
                  [xself]
                    memory > xvalues
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    memory > xOpen
                    memory > xWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        xRW.write (((xPerm).xR).or ((xPerm).xW))
                        xRX.write (((xPerm).xR).or ((xPerm).xX))
                        xWX.write (((xPerm).xW).or ((xPerm).xX))
                        xRWX.write ((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))
                        xvalues.write ((((xlist)).apply ((xPerm))).add (((unsupported)).apply ((xRW)) ((xRX)) ((xWX)) ((xRWX)) ((((xPerm)).apply (0)))))
                        (((unsupported)).apply ((xi)) ((xvalues)))
                          seq
                            (((unsupported)).apply ((xj)) ((xvalues)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).and (xj))) ((((xi).xvalue).and ((xj).xvalue))) (("i is %r, j is %r".mod (((unsupported)).apply ((xi)) ((xj))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).and (xj)).xvalue)) ((((xi).xvalue).and ((xj).xvalue))) (("i is %r, j is %r".mod (((unsupported)).apply ((xi)) ((xj))))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).and (xj))))) ((xPerm)) (("i is %r, j is %r".mod (((unsupported)).apply ((xi)) ((xj))))))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply (8))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).and (xj))) ((((xi).xvalue).and (xj))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).and (xj)).xvalue)) ((((xi).xvalue).and (xj))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).and (xj))))) ((xPerm)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xj).and (xi))) (((xj).and ((xi).xvalue))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xj).and (xi)).xvalue)) (((xj).and ((xi).xvalue))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xj).and (xi))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).and (xi))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).and 7)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((7.and (xi))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xRO).and ((xOpen).xCE))) (((xOpen).xRO)))
                xtest_xor.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            (((unsupported)).apply ((xj)) ((xPerm)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((unsupported)).apply (((xi).xvalue)) (((xj).xvalue)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xi)) ((xj))).xvalue)) ((((unsupported)).apply (((xi).xvalue)) (((xj).xvalue)))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xi)) ((xj)))))) ((xPerm)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply (8))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((unsupported)).apply (((xi).xvalue)) ((xj)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xi)) ((xj))).xvalue)) ((((unsupported)).apply (((xi).xvalue)) ((xj)))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xi)) ((xj)))))) ((xPerm)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xj)) ((xi)))) ((((unsupported)).apply ((xj)) (((xi).xvalue)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xj)) ((xi))).xvalue)) ((((unsupported)).apply ((xj)) (((xi).xvalue)))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xj)) ((xi)))))) ((xPerm)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xi)) (0))) ((xi)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (0) ((xi)))) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xOpen).xRO)) (((xOpen).xCE)))) (((xOpen).xCE)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xOpen).xCE)) (((xOpen).xCE)))) (((xOpen).xRO)))
                xtest_invert.write
                  [xself]
                    memory > xvalues
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    memory > xOpen
                    memory > xWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        xRW.write (((xPerm).xR).or ((xPerm).xW))
                        xRX.write (((xPerm).xR).or ((xPerm).xX))
                        xWX.write (((xPerm).xW).or ((xPerm).xX))
                        xRWX.write ((((xPerm).xR).or ((xPerm).xW)).or ((xPerm).xX))
                        xvalues.write ((((xlist)).apply ((xPerm))).add (((unsupported)).apply ((xRW)) ((xRX)) ((xWX)) ((xRWX)) ((((xPerm)).apply (0)))))
                        (((unsupported)).apply ((xi)) ((xvalues)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).neg)) ((((xi).xvalue).neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).neg).xvalue)) ((((xi).xvalue).neg)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xi).neg)))) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi).neg).neg)) ((xi)))
                        (((unsupported)).apply ((xi)) ((xPerm)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xi).neg).neg)) ((xi)))
                        xOpen.write ((xself).xOpen)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xOpen).xWO).and (((xOpen).xWO).neg))) (((xOpen).xRO)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xOpen).xWO).or ((xOpen).xCE)).and (((xOpen).xWO).neg))) (((xOpen).xCE)))
                xtest_programatic_function_string.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xIntFlag)).apply ("Perm") ("R W X"))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_string_with_start.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((unsupported)).apply ((xIntFlag)) ("Perm") ("R W X") (8))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (8) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_string_list.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xIntFlag)).apply ("Perm") ((((unsupported)).apply ("R") ("W") ("X"))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) ((xi)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_iterable.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xIntFlag)).apply ("Perm") ((((unsupported)).apply ((((unsupported)).apply ("R") (2))) ((((unsupported)).apply ("W") (8))) ((((unsupported)).apply ("X") (32))))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) (((2.mul (xi)).add 1)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_from_dict.write
                  [xself]
                    memory > xe
                    memory > xPerm
                    memory > xv
                    memory > xlst
                    seq > @
                      seq
                        xPerm.write (((xIntFlag)).apply ("Perm") ((((xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("R") (2))) ((((unsupported)).apply ("W") (8))) ((((unsupported)).apply ("X") (32))))))))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (3) ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (((xPerm).xR)) (((xPerm).xW)) (((xPerm).xX)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xn)))) ((((xenumerate)).apply (((("R W X".xsplit)).apply)))))
                          seq
                            xv.write (((unsupported)).apply (1) (((2.mul (xi)).add 1)))
                            xe.write (((xPerm)).apply ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xvalue)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xe).xvalue)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xname)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xe)) ((xPerm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xe)))) ((xPerm)))
                xtest_programatic_function_from_empty_list.write
                  [xself]
                    memory > xPerm
                    memory > xlst
                    memory > xThing
                    seq > @
                      seq
                        xPerm.write ((((xenum).xIntFlag)).apply ("Perm") ((((unsupported)).apply)))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (0) ((xPerm)))
                        xThing.write ((((xenum).xEnum)).apply ("Thing") ((((unsupported)).apply)))
                        xlst.write (((xlist)).apply ((xThing)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xThing)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xThing)))) (0) ((xThing)))
                xtest_programatic_function_from_empty_tuple.write
                  [xself]
                    memory > xPerm
                    memory > xlst
                    memory > xThing
                    seq > @
                      seq
                        xPerm.write ((((xenum).xIntFlag)).apply ("Perm") ((((unsupported)).apply)))
                        xlst.write (((xlist)).apply ((xPerm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xPerm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xPerm)))) (0) ((xPerm)))
                        xThing.write ((((xenum).xEnum)).apply ("Thing") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlst)))) ((((xlen)).apply ((xThing)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xThing)))) (0) ((xThing)))
                xtest_contains.write
                  [xself]
                    memory > xColor
                    memory > xOpen
                    seq > @
                      seq
                        xOpen.write ((xself).xOpen)
                        xColor.write ((xself).xColor)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xColor).xGREEN)) ((xColor)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xOpen).xRW)) ((xOpen)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xColor).xGREEN)) ((xOpen)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xOpen).xRW)) ((xColor)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("GREEN") ((xColor)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("RW") ((xOpen)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (2) ((xColor)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (2) ((xOpen)))
                xtest_member_contains.write
                  [xself]
                    memory > xWX
                    memory > xRX
                    memory > xRW
                    memory > xPerm
                    memory > xRWX
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((((unsupported)).apply ((xR)) ((xW)) ((xX)))) ((xPerm)))
                        xRW.write ((xR).or (xW))
                        xRX.write ((xR).or (xX))
                        xWX.write ((xW).or (xX))
                        xRWX.write (((xR).or (xW)).or (xX))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRW)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xR)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xRW)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xW)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((xRWX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xR)) ((xWX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xW)) ((xRX)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xX)) ((xRW)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ("test") ((xRW)))))
                xtest_bool.write
                  [xself]
                    memory > xOpen
                    memory > xPerm
                    seq > @
                      seq
                        xPerm.write ((xself).xPerm)
                        (((unsupported)).apply ((xf)) ((xPerm)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((xf)))
                        xOpen.write ((xself).xOpen)
                        (((unsupported)).apply ((xf)) ((xOpen)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbool)).apply (((xf).xvalue)))) ((((xbool)).apply ((xf)))))
                xtest_multiple_mixin.write
                  [xself]
                    memory > xBLUE
                    memory > xALL
                    memory > xGREEN
                    memory > x__str__
                    memory > xRED
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xALL.write
                            [xcls]
                              memory > xmembers
                              memory > xall_value
                              seq > @
                                (((unsupported)).apply)
                                  xmembers.write (((xlist)).apply ((xcls)))
                                  xall_value.write "None: is there a None literal in the EO language?"
                                  (xmembers).if
                                    seq
                                      xall_value.write (((unsupported)).apply ((xmembers)) (0))
                                      (((unsupported)).apply ((xmember)) ((((unsupported)).apply ((xmembers)) ((((unsupported)).apply (1))))))
                                        (((unsupported)).apply ((xall_value)) ((xmember)))
                                  (((unsupported)).apply (((xcls).xALL)) ((xall_value)))
                                  (((unsupported)).apply ((xall_value)))
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((((xself).x_name_).xlower)).apply)))
                        (((unsupported)).apply ((xAllMixin)) ((xIntFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("Color.BLUE"))
                        (((unsupported)).apply ((xAllMixin)) ((xStrMixin)) ((xIntFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                        (((unsupported)).apply ((xStrMixin)) ((xAllMixin)) ((xIntFlag)))
                          seq
                            xRED.write (((xauto)).apply)
                            xGREEN.write (((xauto)).apply)
                            xBLUE.write (((xauto)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xRED).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xGREEN).xvalue)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xBLUE).xvalue)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xColor).xALL).xvalue)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xColor).xBLUE)))) ("blue"))
                xtest_unique_composite.write
                  [xself]
                    memory > x__eq__
                    memory > xseven
                    memory > xfour
                    memory > xthreads
                    memory > xeight
                    memory > xsix
                    memory > xcycle_enum
                    memory > xthree
                    memory > x__hash__
                    memory > xseen
                    memory > xtwo
                    memory > xone
                    memory > xfive
                    memory > xfailed
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xIntFlag)))
                          seq
                            xone.write (((xauto)).apply)
                            xtwo.write (((xauto)).apply)
                            xthree.write (((xauto)).apply)
                            xfour.write (((xauto)).apply)
                            xfive.write (((xauto)).apply)
                            xsix.write (((xauto)).apply)
                            xseven.write (((xauto)).apply)
                            xeight.write (((xauto)).apply)
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xself)) ((xother)))))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xhash)).apply (((xself).x_value_)))))
                        xseen.write (((xset)).apply)
                        xfailed.write FALSE
                        xcycle_enum.write
                          []
                            memory > xfailed
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((xi)) ((((xrange)).apply (256))))
                                    bogusForceDataize.write ((((xseen).xadd)).apply ((((xTestFlag)).apply ((xi)))))
                                  xfailed.write TRUE
                        xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xcycle_enum)))) ((x_)) ((((xrange)).apply (8))))
                        (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xfailed)) ("at least one thread failed while creating composite members"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (256) ((((xlen)).apply ((xseen)))) ("too many composite members created"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_empty_string.write
                  [xself]
                    memory > xempty_abc
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        xempty_abc.write (((xEnum)).apply ("empty_abc") ((((unsupported)).apply ("") ("B") ("C"))))
                xtest_non_latin_character_string.write
                  [xself]
                    memory > xgreek_abc
                    memory > xitem
                    seq > @
                      seq
                        xgreek_abc.write (((xEnum)).apply ("greek_abc") ((((unsupported)).apply ("u03B1") ("B") ("C"))))
                        xitem.write (((xgetattr)).apply ((xgreek_abc)) ("u03B1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xvalue)) (1))
                xtest_non_latin_number_string.write
                  [xself]
                    memory > xhebrew_123
                    memory > xitem
                    seq > @
                      seq
                        xhebrew_123.write (((xEnum)).apply ("hebrew_123") ((((unsupported)).apply ("u05D0") ("2") ("3"))))
                        xitem.write (((xgetattr)).apply ((xhebrew_123)) ("u05D0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xvalue)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_unique_clean.write
                  [xself]
                    memory > xtriple
                    memory > xsingle
                    memory > xtwo
                    memory > xone
                    memory > xtres
                    memory > xdouble
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)) ((xunique)))
                          seq
                            xone.write 1
                            xtwo.write "dos"
                            xtres.write 4.0
                        (((unsupported)).apply ((xIntEnum)) ((xunique)))
                          seq
                            xsingle.write 1
                            xdouble.write 2
                            xtriple.write 3
                xtest_unique_dirty.write
                  [xself]
                    memory > xturkey
                    memory > xtriple
                    memory > xsingle
                    memory > xtwo
                    memory > xone
                    memory > xtres
                    memory > xdouble
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("tres.*one"))))
                          (((unsupported)).apply ((xEnum)) ((xunique)))
                            seq
                              xone.write 1
                              xtwo.write "dos"
                              xtres.write 1
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("double.*single.*turkey.*triple"))))
                          (((unsupported)).apply ((xIntEnum)) ((xunique)))
                            seq
                              xsingle.write 1
                              xdouble.write 1
                              xtriple.write 3
                              xturkey.write 3
                xtest_unique_with_name.write
                  [xself]
                    memory > xtriple
                    memory > xsingle
                    memory > xvalue
                    memory > xname
                    memory > xtwo
                    memory > xone
                    seq > @
                      seq
                        (((unsupported)).apply ((xEnum)) ((xunique)))
                          seq
                            xone.write 1
                            xtwo.write "dos"
                            xname.write 3
                        (((unsupported)).apply ((xIntEnum)) ((xunique)))
                          seq
                            xsingle.write 1
                            xname.write 2
                            xtriple.write 3
                            xvalue.write 4
            xexpected_help_output_with_docs.write (((unsupported)).apply)
            xexpected_help_output_without_docs.write (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                (((unsupported)).apply ((xEnum)))
                  seq
                    xred.write 1
                    xgreen.write 2
                    xblue.write 3
                xtest_pydoc.write
                  [xself]
                    memory > xhelper
                    memory > xoutput
                    memory > xresult
                    memory > xexpected_text
                    seq > @
                      seq
                        (((unsupported)).apply (((xStrEnum).x__doc__)) ("None: is there a None literal in the EO language?")).if
                          xexpected_text.write ((xexpected_help_output_without_docs).mod (x__name__))
                          xexpected_text.write ((xexpected_help_output_with_docs).mod (x__name__))
                        xoutput.write (((xStringIO)).apply)
                        xhelper.write (((unsupported)).apply (((xpydoc).xHelper)) ((xoutput)))
                        bogusForceDataize.write (((xhelper)).apply (((xself).xColor)))
                        xresult.write (((((((xoutput).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected_text)))
                xtest_inspect_getmembers.write
                  [xself]
                    memory > xfailed
                    memory > xresult
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((xdict)).apply ((((unsupported)).apply ((((unsupported)).apply ("__class__") ((xEnumMeta)))) ((((unsupported)).apply ("__doc__") ("An enumeration."))) ((((unsupported)).apply ("__members__") ((((xself).xColor).x__members__)))) ((((unsupported)).apply ("__module__") ((x__name__)))) ((((unsupported)).apply ("blue") ((((xself).xColor).xblue)))) ((((unsupported)).apply ("green") ((((xself).xColor).xgreen)))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xEnum).x__dict__)) ("name"))))) ((((unsupported)).apply ("red") ((((xself).xColor).xred)))) ((((unsupported)).apply ("value") ((((unsupported)).apply (((xEnum).x__dict__)) ("value"))))))))
                        xresult.write (((xdict)).apply (((((xinspect).xgetmembers)).apply (((xself).xColor)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvalues).xkeys)).apply)) (((((xresult).xkeys)).apply)))
                        xfailed.write FALSE
                        (((unsupported)).apply ((xk)) (((((xvalues).xkeys)).apply)))
                          ((((unsupported)).apply ((xresult)) ((xk))).neq (((unsupported)).apply ((xvalues)) ((xk)))).if
                            seq
                              bogusForceDataize.write (((xprint)).apply)
                              (((unsupported)).apply ((xprint)) (("n%sn     key: %sn  result: %snexpected: %sn%sn".mod (((unsupported)).apply (("=".mul 75)) ((xk)) ((((unsupported)).apply ((xresult)) ((xk)))) ((((unsupported)).apply ((xvalues)) ((xk)))) (("=".mul 75))))) (""))
                              xfailed.write TRUE
                        (xfailed).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("result does not equal expected, see print above"))
                xtest_inspect_classify_class_attrs.write
                  [xself]
                    memory > xfailed
                    memory > xresult
                    memory > xvalues
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply ((((unsupported)).apply ((xAttribute)) ("__class__") ("data") ((xobject)) ((xEnumMeta)))) ((((unsupported)).apply ((xAttribute)) ("__doc__") ("data") (((xself).xColor)) ("An enumeration."))) ((((unsupported)).apply ((xAttribute)) ("__members__") ("property") ((xEnumMeta)) (((xEnumMeta).x__members__)))) ((((unsupported)).apply ((xAttribute)) ("__module__") ("data") (((xself).xColor)) ((x__name__)))) ((((unsupported)).apply ((xAttribute)) ("blue") ("data") (((xself).xColor)) ((((xself).xColor).xblue)))) ((((unsupported)).apply ((xAttribute)) ("green") ("data") (((xself).xColor)) ((((xself).xColor).xgreen)))) ((((unsupported)).apply ((xAttribute)) ("red") ("data") (((xself).xColor)) ((((xself).xColor).xred)))) ((((unsupported)).apply ((xAttribute)) ("name") ("data") ((xEnum)) ((((unsupported)).apply (((xEnum).x__dict__)) ("name"))))) ((((unsupported)).apply ((xAttribute)) ("value") ("data") ((xEnum)) ((((unsupported)).apply (((xEnum).x__dict__)) ("value"))))))
                        (((unsupported)).apply (((xvalues).xsort)) ((((unsupported)).apply (((xitem).xname)))))
                        xresult.write (((xlist)).apply (((((xinspect).xclassify_class_attrs)).apply (((xself).xColor)))))
                        (((unsupported)).apply (((xresult).xsort)) ((((unsupported)).apply (((xitem).xname)))))
                        xfailed.write FALSE
                        (((unsupported)).apply ((((unsupported)).apply ((xv)) ((xr)))) ((((xzip)).apply ((xvalues)) ((xresult)))))
                          ((xr).neq (xv)).if
                            seq
                              (((unsupported)).apply ((xprint)) (("n%sn%sn%sn%sn".mod (((unsupported)).apply (("=".mul 75)) ((xr)) ((xv)) (("=".mul 75))))) (""))
                              xfailed.write TRUE
                        (xfailed).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("result does not equal expected, see print above"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xsupport).xcheck__all__)).apply ((xself)) ((xenum)))
            xCONVERT_TEST_NAME_D.write 5
            xCONVERT_TEST_NAME_C.write 5
            xCONVERT_TEST_NAME_B.write 5
            xCONVERT_TEST_NAME_A.write 5
            xCONVERT_TEST_NAME_E.write 5
            xCONVERT_TEST_NAME_F.write 5
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_convert_value_lookup_priority.write
                  [xself]
                    memory > xtest_type
                    seq > @
                      seq
                        xtest_type.write (((unsupported)).apply ((((xenum).xIntEnum).x_convert_)) ("UnittestConvert") ((((unsupported)).apply ((((unsupported)).apply ("test.test_enum") ("__main__"))) (((x__name__).eq "__main__")))) ((((unsupported)).apply (((((xx).xstartswith)).apply ("CONVERT_TEST_"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtest_type)).apply (5)).xname)) ("CONVERT_TEST_NAME_A"))
                xtest_convert.write
                  [xself]
                    memory > xtest_type
                    seq > @
                      seq
                        xtest_type.write (((unsupported)).apply ((((xenum).xIntEnum).x_convert_)) ("UnittestConvert") ((((unsupported)).apply ((((unsupported)).apply ("test.test_enum") ("__main__"))) (((x__name__).eq "__main__")))) ((((unsupported)).apply (((((xx).xstartswith)).apply ("CONVERT_TEST_"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest_type).xCONVERT_TEST_NAME_F)) (((xtest_type).xCONVERT_TEST_NAME_A)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest_type).xCONVERT_TEST_NAME_B)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest_type).xCONVERT_TEST_NAME_C)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest_type).xCONVERT_TEST_NAME_D)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest_type).xCONVERT_TEST_NAME_E)) (5))
                        (((unsupported)).apply (((xself).xassertEqual)) ((((unsupported)).apply ((xname)) ((xname)) ((((xdir)).apply ((xtest_type)))) ((((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply (0) (2))))) ((((unsupported)).apply ("CO") ("__"))))))) ((((unsupported)).apply)) ("Names other than CONVERT_TEST_* found."))
                xtest_convert_warn.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          (((unsupported)).apply ((((xenum).xIntEnum).x_convert)) ("UnittestConvert") ((((unsupported)).apply ((((unsupported)).apply ("test.test_enum") ("__main__"))) (((x__name__).eq "__main__")))) ((((unsupported)).apply (((((xx).xstartswith)).apply ("CONVERT_TEST_"))))))
                xtest_convert_raise.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((xenum).xIntEnum).x_convert)) ("UnittestConvert") ((((unsupported)).apply ((((unsupported)).apply ("test.test_enum") ("__main__"))) (((x__name__).eq "__main__")))) ((((unsupported)).apply (((((xx).xstartswith)).apply ("CONVERT_TEST_"))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)