memory > xlib_name
memory > xGEOSContextHandle_t
memory > xGEOSPrepGeom_t
memory > xPOINTER
memory > xStructure
memory > xc_char_p
memory > xCDLL
memory > xGEOSGeom_t
memory > xSimpleLazyObject
memory > xfind_library
memory > xImportError
memory > xAttributeError
memory > xget_version_tuple
memory > xGEOSCoordSeq_t
memory > xGEOSFunc
memory > xsettings
memory > xargs
memory > xOSError
memory > xos
memory > xCFUNCTYPE
memory > xImproperlyConfigured
memory > xTypeError
memory > xlogging
[] > libgeos
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xnotice_h
        memory > xargtypes
        memory > xERRORFUNC
        memory > xfunc
        memory > xload_geos
        memory > xrestype
        memory > xgeos_version_tuple
        memory > xNOTICEFUNC
        memory > xPREPGEOM_PTR
        memory > x__init__
        memory > xGEOM_PTR
        memory > xerrcheck
        memory > xgeos_version
        memory > xlgeos
        memory > xerror_h
        memory > x__call__
        memory > xlogger
        memory > xCS_PTR
        memory > xCONTEXT_PTR
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.contrib.gis"))
            xload_geos.write
              []
                memory > xlib_path
                memory > x_lgeos
                memory > xlib_path2
                memory > xlib_names
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xImportError)) ((xImproperlyConfigured)) ((xOSError)))))
                      seq
                        (((unsupported)).apply)
                        xlib_path2.write ((xsettings).xGEOS_LIBRARY_PATH)
                      xlib_path.write "None: is there a None literal in the EO language?"
                    (xlib_path).if
                      xlib_names.write "None: is there a None literal in the EO language?"
                      (((xos).xname).eq "nt").if
                        xlib_names.write (((unsupported)).apply ("geos_c") ("libgeos_c-1"))
                        (((xos).xname).eq "posix").if
                          xlib_names.write (((unsupported)).apply ("geos_c") ("GEOS"))
                          (((unsupported)).apply ((((xImportError)).apply (("Unsupported OS \"%s\"".mod ((xos).xname))))))
                    (xlib_names).if
                      (((unsupported)).apply ((xlib_name)) ((xlib_names)))
                        seq
                          xlib_path.write (((xfind_library)).apply ((xlib_name)))
                          (((unsupported)).apply ((xlib_path)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply)
                    (((unsupported)).apply ((xlib_path)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((xImportError)).apply (("Could not find the GEOS library (tried \"%s\"). Try setting GEOS_LIBRARY_PATH in your settings.".mod ((("\", \"".xjoin)).apply ((xlib_names))))))))
                    x_lgeos.write (((xCDLL)).apply ((xlib_path)))
                    (((unsupported)).apply ((((x_lgeos).xinitGEOS_r).xrestype)) ((xCONTEXT_PTR)))
                    (((unsupported)).apply ((((x_lgeos).xfinishGEOS_r).xargtypes)) ((((unsupported)).apply ((xCONTEXT_PTR)))))
                    (((unsupported)).apply ((((x_lgeos).xGEOSversion).xrestype)) ((xc_char_p)))
                    (((unsupported)).apply ((x_lgeos)))
            xNOTICEFUNC.write (((xCFUNCTYPE)).apply ("None: is there a None literal in the EO language?") ((xc_char_p)) ((xc_char_p)))
            xnotice_h.write
              [xfmt xlst]
                memory > xwarn_msg
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xlst)))) ((((unsupported)).apply (((((xfmt).xdecode)).apply)) (((((xlst).xdecode)).apply)))))
                    (((unsupported)).apply ((xTypeError)))
                      xwarn_msg.write ((xfmt).mod (xlst))
                      xwarn_msg.write (xfmt)
                    bogusForceDataize.write ((((xlogger).xwarning)).apply ("GEOS_NOTICE: %sn") ((xwarn_msg)))
            xnotice_h.write (((xNOTICEFUNC)).apply ((xnotice_h)))
            xERRORFUNC.write (((xCFUNCTYPE)).apply ("None: is there a None literal in the EO language?") ((xc_char_p)) ((xc_char_p)))
            xerror_h.write
              [xfmt xlst]
                memory > xerr_msg
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xlst)))) ((((unsupported)).apply (((((xfmt).xdecode)).apply)) (((((xlst).xdecode)).apply)))))
                    (((unsupported)).apply ((xTypeError)))
                      xerr_msg.write ((xfmt).mod (xlst))
                      xerr_msg.write (xfmt)
                    bogusForceDataize.write ((((xlogger).xerror)).apply ("GEOS_ERROR: %sn") ((xerr_msg)))
            xerror_h.write (((xERRORFUNC)).apply ((xerror_h)))
            (((unsupported)).apply ((xStructure)))
            (((unsupported)).apply ((xStructure)))
            (((unsupported)).apply ((xStructure)))
            (((unsupported)).apply ((xStructure)))
            xGEOM_PTR.write (((xPOINTER)).apply ((xGEOSGeom_t)))
            xPREPGEOM_PTR.write (((xPOINTER)).apply ((xGEOSPrepGeom_t)))
            xCS_PTR.write (((xPOINTER)).apply ((xGEOSCoordSeq_t)))
            xCONTEXT_PTR.write (((xPOINTER)).apply ((xGEOSContextHandle_t)))
            xlgeos.write (((xSimpleLazyObject)).apply ((xload_geos)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xargtypes.write "None: is there a None literal in the EO language?"
                xrestype.write "None: is there a None literal in the EO language?"
                xerrcheck.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xfunc_name xrestype xerrcheck xargtypes]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfunc_name)) ((xfunc_name)))
                        (((unsupported)).apply ((xrestype)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xrestype)) ((xrestype)))
                        (((unsupported)).apply ((xerrcheck)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xerrcheck)) ((xerrcheck)))
                        (((unsupported)).apply ((xargtypes)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xargtypes)) ((xargtypes)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xfunc)).apply ((((unsupported)).apply ((xargs)))))))
                xfunc.write
                  [xself]
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfunc.write (((xGEOSFunc)).apply (((xself).xfunc_name)))
                        (((unsupported)).apply (((xfunc).xargtypes)) ((((xself).xargtypes).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xfunc).xrestype)) (((xself).xrestype)))
                        ((xself).xerrcheck).if
                          (((unsupported)).apply (((xfunc).xerrcheck)) (((xself).xerrcheck)))
                        (((unsupported)).apply ((xfunc)))
            xgeos_version.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply (((((xlgeos).xGEOSversion)).apply)))
            xgeos_version_tuple.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xget_version_tuple)).apply (((((((xgeos_version)).apply).xdecode)).apply)))))