memory > xfalse
memory > xlist
memory > xstr
memory > xURLPattern
memory > xcallable
memory > xView
memory > xRoutePattern
memory > xtuple
memory > xgetattr
memory > xpartial
memory > xImproperlyConfigured
memory > xTypeError
memory > xnamespace
memory > xRegexPattern
memory > xValueError
memory > ximport_module
memory > xURLResolver
memory > xurl_pattern
memory > xLocalePrefixPattern
memory > xurlconf_module
memory > xisinstance
memory > xdict
memory > xlen
memory > xapp_name
[] > conf
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xinclude
        memory > xre_path
        memory > xpath
        memory > x_path
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xinclude.write
              [xarg xnamespace]
                memory > xurlconf_module
                memory > xpatterns
                memory > xapp_name
                memory > xpattern
                seq > @
                  (((unsupported)).apply)
                    xapp_name.write "None: is there a None literal in the EO language?"
                    (((xisinstance)).apply ((xarg)) ((xtuple))).if
                      (((unsupported)).apply ((xValueError)))
                        (((unsupported)).apply ((((unsupported)).apply ((xurlconf_module)) ((xapp_name)))) ((xarg)))
                        seq
                          (xnamespace).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Cannot override the namespace for a dynamic module that provides a namespace."))))
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Passing a %d-tuple to include() is not supported. Pass a 2-tuple containing the list of patterns and app_name, and provide the namespace argument to include() instead.".mod (((xlen)).apply ((xarg))))))))
                      xurlconf_module.write (xarg)
                    (((xisinstance)).apply ((xurlconf_module)) ((xstr))).if
                      xurlconf_module.write (((ximport_module)).apply ((xurlconf_module)))
                    xpatterns.write (((xgetattr)).apply ((xurlconf_module)) ("urlpatterns") ((xurlconf_module)))
                    xapp_name.write (((xgetattr)).apply ((xurlconf_module)) ("app_name") ((xapp_name)))
                    ((xnamespace).and ((xapp_name).not)).if
                      (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Specifying a namespace in include() without providing an app_name is not supported. Set the app_name attribute in the included module, or pass a 2-tuple containing the list of patterns and app_name instead."))))
                    xnamespace.write ((xnamespace).or (xapp_name))
                    (((xisinstance)).apply ((xpatterns)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                      (((unsupported)).apply ((xurl_pattern)) ((xpatterns)))
                        seq
                          xpattern.write (((xgetattr)).apply ((xurl_pattern)) ("pattern") ("None: is there a None literal in the EO language?"))
                          (((xisinstance)).apply ((xpattern)) ((xLocalePrefixPattern))).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Using i18n_patterns in an included URLconf is not allowed."))))
                    (((unsupported)).apply ((((unsupported)).apply ((xurlconf_module)) ((xapp_name)) ((xnamespace)))))
            x_path.write
              [xroute xview xkwargs xname xPattern]
                memory > xview_cls_name
                memory > xpattern
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((((unsupported)).apply ((xkwargs)) ("None: is there a None literal in the EO language?")).and ((((xisinstance)).apply ((xkwargs)) ((xdict))).not)).if
                      (((unsupported)).apply ((((xTypeError)).apply ("kwargs argument must be a dict, but got {kwargs.__class__.__name__}."))))
                    (((xisinstance)).apply ((xview)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                      seq
                        xpattern.write (((unsupported)).apply ((xPattern)) ((xroute)) ((xfalse)))
                        (((unsupported)).apply ((((unsupported)).apply ((xurlconf_module)) ((xapp_name)) ((xnamespace)))) ((xview)))
                        (((unsupported)).apply ((((unsupported)).apply ((xURLResolver)) ((xpattern)) ((xurlconf_module)) ((xkwargs)) ((xapp_name)) ((xnamespace)))))
                      (((xcallable)).apply ((xview))).if
                        seq
                          xpattern.write (((unsupported)).apply ((xPattern)) ((xroute)) ((xname)) (TRUE))
                          (((unsupported)).apply ((((xURLPattern)).apply ((xpattern)) ((xview)) ((xkwargs)) ((xname)))))
                        (((xisinstance)).apply ((xview)) ((xView))).if
                          seq
                            xview_cls_name.write (((xview).x__class__).x__name__)
                            (((unsupported)).apply ((((xTypeError)).apply ("view must be a callable, pass {view_cls_name}.as_view(), not {view_cls_name}()."))))
                          (((unsupported)).apply ((((xTypeError)).apply ("view must be a callable or a list/tuple in the case of include()."))))
            xpath.write (((unsupported)).apply ((xpartial)) ((x_path)) ((xRoutePattern)))
            xre_path.write (((unsupported)).apply ((xpartial)) ((x_path)) ((xRegexPattern)))