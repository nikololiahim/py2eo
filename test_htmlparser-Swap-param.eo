memory > xevent
memory > xelement
memory > xunescape
memory > xdtd
memory > xrange
memory > xcontent
memory > xkw
memory > xrepr
memory > xentity
memory > xs
memory > xCollector
memory > xEventCollectorCharrefs
memory > xlen
memory > xEventCollector
memory > xexpected
memory > xcharref
memory > xx
memory > xDeprecationWarning
memory > xTestCaseBase
memory > xargs
memory > xEventCollectorExtra
memory > xhtml
memory > xunittest
memory > xpprint
memory > x__name__
[] > test_htmlparser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_comma_between_attributes
        memory > xhandle_comment
        memory > x_run_check
        memory > xtest_attr_values
        memory > xtest_broken_comments
        memory > xtest_entityrefs_in_attributes
        memory > xtest_buffer_artefacts
        memory > xtest_missing_attribute_value
        memory > xget_events
        memory > xtest_comments
        memory > xtest_attr_entity_replacement
        memory > xtest_broken_condcoms
        memory > xtest_adjacent_attributes
        memory > xhandle_entityref
        memory > xtest_attr_funky_names2
        memory > xhandle_endtag
        memory > xhandle_starttag
        memory > xtest_convert_charrefs_dropped_text
        memory > xtest_malformatted_charref
        memory > xtest_attr_funky_names
        memory > xhandle_pi
        memory > xtest_declaration_junk_chars
        memory > xtest_unescape_method
        memory > xtest_convert_charrefs
        memory > xtest_simple_html
        memory > xtest_slashes_in_starttag
        memory > xtest_weird_chars_in_unquoted_attribute_values
        memory > xtest_bare_ampersands
        memory > xtest_bare_pointy_brackets
        memory > xtest_attr_nonascii
        memory > xtest_with_unquoted_attributes
        memory > xtest_correct_detection_of_start_tags
        memory > xunknown_decl
        memory > xhandle_data
        memory > xtest_invalid_end_tags
        memory > xtest_attr_syntax
        memory > xtest_processing_instruction_only
        memory > xtest_bad_nesting
        memory > xtest_EOF_in_charref
        memory > xtest_unclosed_entityref
        memory > xtest_broken_invalid_end_tag
        memory > xtest_tolerant_parsing
        memory > xhandle_startendtag
        memory > xtest_cdata_with_closing_tags
        memory > xtest_end_tag_in_attribute_value
        memory > xtest_illegal_declarations
        memory > xhandle_charref
        memory > xtest_starttag_junk_chars
        memory > xtest_starttag_end_boundary
        memory > xhandle_decl
        memory > xtest_valid_doctypes
        memory > xtest_startendtag
        memory > xtest_get_starttag_text
        memory > x__init__
        memory > xtest_malformed_adjacent_attributes
        memory > xtest_entities_in_attribute_value
        memory > xtest_cdata_content
        memory > xtest_javascript_attribute_value
        memory > xtest_malformed_attributes
        memory > xget_collector
        memory > x_run_check_extra
        memory > xtest_condcoms
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((((xhtml).xparser).xHTMLParser)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xevents)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xappend)) ((((xself).xevents).xappend)))
                        bogusForceDataize.write ((((((xhtml).xparser).xHTMLParser).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                xget_events.write
                  [xself]
                    memory > xtype
                    memory > xprevtype
                    memory > xL
                    seq > @
                      seq
                        xL.write (((unsupported)).apply)
                        xprevtype.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xevent)) (((xself).xevents)))
                          seq
                            xtype.write (((unsupported)).apply ((xevent)) (0))
                            (((unsupported)).apply ((xtype)) ((xprevtype)) ("data")).if
                              (((unsupported)).apply ((((unsupported)).apply ((xL)) ((1.neg)))) ((((unsupported)).apply ("data") (((((unsupported)).apply ((((unsupported)).apply ((xL)) ((1.neg)))) (1)).add (((unsupported)).apply ((xevent)) (1)))))))
                              bogusForceDataize.write ((((xL).xappend)).apply ((xevent)))
                            xprevtype.write (xtype)
                        (((unsupported)).apply (((xself).xevents)) ((xL)))
                        (((unsupported)).apply ((xL)))
                xhandle_starttag.write
                  [xself xtag xattrs]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("starttag") ((xtag)) ((xattrs)))))
                xhandle_startendtag.write
                  [xself xtag xattrs]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("startendtag") ((xtag)) ((xattrs)))))
                xhandle_endtag.write
                  [xself xtag]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("endtag") ((xtag)))))
                xhandle_comment.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("comment") ((xdata)))))
                xhandle_charref.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("charref") ((xdata)))))
                xhandle_data.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("data") ((xdata)))))
                xhandle_decl.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("decl") ((xdata)))))
                xhandle_entityref.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("entityref") ((xdata)))))
                xhandle_pi.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("pi") ((xdata)))))
                xunknown_decl.write
                  [xself xdecl]
                    seq > @
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("unknown decl") ((xdecl)))))
            (((unsupported)).apply ((xEventCollector)))
              xhandle_starttag.write
                [xself xtag xattrs]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xEventCollector).xhandle_starttag)).apply ((xself)) ((xtag)) ((xattrs)))
                      bogusForceDataize.write ((((xself).xappend)).apply ((((unsupported)).apply ("starttag_text") (((((xself).xget_starttag_text)).apply)))))
            (((unsupported)).apply ((xEventCollector)))
              seq
                xhandle_charref.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xfail)).apply ("This should never be called with convert_charrefs=True"))
                xhandle_entityref.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write ((((xself).xfail)).apply ("This should never be called with convert_charrefs=True"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xget_collector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xEventCollector)) (FALSE))))
                x_run_check.write
                  [xself xsource xexpected_events xcollector]
                    memory > xevents
                    memory > xparser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcollector)) ("None: is there a None literal in the EO language?")).if
                          xcollector.write ((((xself).xget_collector)).apply)
                        xparser.write (xcollector)
                        (((unsupported)).apply ((xs)) ((xsource)))
                          bogusForceDataize.write ((((xparser).xfeed)).apply ((xs)))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        xevents.write ((((xparser).xget_events)).apply)
                        ((xevents).neq (xexpected_events)).if
                          bogusForceDataize.write ((((xself).xfail)).apply ((((((("received events did not match expected events".add "nSource:n").add (((xrepr)).apply ((xsource)))).add "nExpected:n").add ((((xpprint).xpformat)).apply ((xexpected_events)))).add "nReceived:n").add ((((xpprint).xpformat)).apply ((xevents))))))
                x_run_check_extra.write
                  [xself xsource xevents]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ((xsource)) ((xevents)) ((((unsupported)).apply ((xEventCollectorExtra)) (FALSE))))
            (((unsupported)).apply ((xTestCaseBase)))
              seq
                xtest_processing_instruction_only.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<?processing instruction>") ((((unsupported)).apply ((((unsupported)).apply ("pi") ("processing instruction"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<?processing instruction ?>") ((((unsupported)).apply ((((unsupported)).apply ("pi") ("processing instruction ?"))))))
                xtest_simple_html.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("decl") ("DOCTYPE html PUBLIC 'foo'"))) ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("starttag") ("html") ((((unsupported)).apply)))) ((((unsupported)).apply ("entityref") ("entity"))) ((((unsupported)).apply ("charref") ("32"))) ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("comment") ("comment1an-></foo><bar>&lt;<?pi?></foo<barncomment1b"))) ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("starttag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("src") ("Bar"))) ((((unsupported)).apply ("ismap") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("data") ("samplentextn"))) ((((unsupported)).apply ("charref") ("x201C"))) ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("comment") ("comment2a-- --comment2b"))) ((((unsupported)).apply ("data") ("n"))) ((((unsupported)).apply ("endtag") ("html"))) ((((unsupported)).apply ("data") ("n"))))))
                xtest_malformatted_charref.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<p>&#bad;</p>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("p") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("&#bad;"))) ((((unsupported)).apply ("endtag") ("p"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<div>&#bad;</div>"))) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("&#bad;"))) ((((unsupported)).apply ("endtag") ("div"))))))
                xtest_unclosed_entityref.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("&entityref foo") ((((unsupported)).apply ((((unsupported)).apply ("entityref") ("entityref"))) ((((unsupported)).apply ("data") (" foo"))))))
                xtest_bad_nesting.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a><b></a></b>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("endtag") ("b"))))))
                xtest_bare_ampersands.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("this text & contains & ampersands &") ((((unsupported)).apply ((((unsupported)).apply ("data") ("this text & contains & ampersands &"))))))
                xtest_bare_pointy_brackets.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("this < text > contains < bare>pointy< brackets") ((((unsupported)).apply ((((unsupported)).apply ("data") ("this < text > contains < bare>pointy< brackets"))))))
                xtest_starttag_end_boundary.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='<'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") ("<"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='>'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") (">"))))))))))
                xtest_buffer_artefacts.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") ("<"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='<'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a ") ("b='<'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b") ("='<'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b=") ("'<'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='<") ("'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='<'") (">"))) ((xoutput)))
                        xoutput.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") (">"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='>'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a ") ("b='>'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b") ("='>'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b=") ("'>'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='>") ("'>"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<a b='>'") (">"))) ((xoutput)))
                        xoutput.write (((unsupported)).apply ((((unsupported)).apply ("comment") ("abc"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("") ("<!--abc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<") ("!--abc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!") ("--abc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!-") ("-abc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--") ("abc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--a") ("bc-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--ab") ("c-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--abc") ("-->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--abc-") ("->"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--abc--") (">"))) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((((unsupported)).apply ("<!--abc-->") (""))) ((xoutput)))
                xtest_valid_doctypes.write
                  [xself]
                    memory > xdtds
                    seq > @
                      seq
                        xdtds.write (((unsupported)).apply ("HTML") ("HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"") ("HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"") ("html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"") ("html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"") ("math PUBLIC \"-//W3C//DTD MathML 2.0//EN\" \"http://www.w3.org/Math/DTD/mathml2/mathml2.dtd\"") ("html PUBLIC \"-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN\" \"http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd\"") ("svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"") ("html PUBLIC \"-//IETF//DTD HTML 2.0//EN\"") ("html PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\""))
                        (((unsupported)).apply ((xdtd)) ((xdtds)))
                          bogusForceDataize.write ((((xself).x_run_check)).apply (("<!DOCTYPE %s>".mod (xdtd))) ((((unsupported)).apply ((((unsupported)).apply ("decl") (("DOCTYPE ".add (xdtd))))))))
                xtest_startendtag.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<p/>") ((((unsupported)).apply ((((unsupported)).apply ("startendtag") ("p") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<p></p>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("p") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("p"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<p><img src='foo' /></p>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("p") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("src") ("foo"))))))) ((((unsupported)).apply ("endtag") ("p"))))))
                xtest_get_starttag_text.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write "<foo:bar   n   one=\"1\"ttwo=2   >"
                        bogusForceDataize.write ((((xself).x_run_check_extra)).apply ((xs)) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("foo:bar") ((((unsupported)).apply ((((unsupported)).apply ("one") ("1"))) ((((unsupported)).apply ("two") ("2"))))))) ((((unsupported)).apply ("starttag_text") ((xs)))))))
                xtest_cdata_content.write
                  [xself]
                    memory > xelements
                    memory > xs
                    memory > xelement_lower
                    memory > xcontents
                    seq > @
                      seq
                        xcontents.write (((unsupported)).apply ("<!-- not a comment --> &not-an-entity-ref;") ("<not a='start tag'>") ("<a href=\"\" /> <p> <span></span>") ("foo = \"</scr\" + \"ipt>\";") ("foo = \"</SCRIPT\" + \">\";") ("foo = <n/script> ") ("<!-- document.write(\"</scr\" + \"ipt>\"); -->") ((((unsupported)).apply)) ("n<!-- //nvar foo = 3.14;n// -->n") ("foo = \"</sty\" + \"le>\";") ("<!-- u2603 -->"))
                        xelements.write (((unsupported)).apply ("script") ("style") ("SCRIPT") ("STYLE") ("Script") ("Style"))
                        (((unsupported)).apply ((xcontent)) ((xcontents)))
                          (((unsupported)).apply ((xelement)) ((xelements)))
                            seq
                              xelement_lower.write ((((xelement).xlower)).apply)
                              xs.write (((unsupported)).apply (("<{element}>{content}</{element}>".xformat)) ((xelement)) ((xcontent)))
                              bogusForceDataize.write ((((xself).x_run_check)).apply ((xs)) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ((xelement_lower)) ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ((xcontent)))) ((((unsupported)).apply ("endtag") ((xelement_lower)))))))
                xtest_cdata_with_closing_tags.write
                  [xself]
                    memory > xget_events
                    memory > xs
                    memory > xelement_lower
                    memory > xcontent
                    seq > @
                      seq
                        (((unsupported)).apply ((xEventCollector)))
                          xget_events.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xevents)))
                        xcontent.write (((unsupported)).apply)
                        (((unsupported)).apply ((xelement)) ((((unsupported)).apply (" script") ("script ") (" script ") ("nscript") ("scriptn") ("nscriptn"))))
                          seq
                            xelement_lower.write (((((((xelement).xlower)).apply).xstrip)).apply)
                            xs.write (((unsupported)).apply (("<script>{content}</{element}>".xformat)) ((xelement)) ((xcontent)))
                            (((unsupported)).apply (((xself).x_run_check)) ((xs)) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ((xelement_lower)) ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ((xcontent)))) ((((unsupported)).apply ("endtag") ((xelement_lower)))))) ((((unsupported)).apply ((xCollector)) (FALSE))))
                xtest_comments.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<!-- I'm a valid comment --><!--me too!--><!------><!----><!----I have many hyphens----><!-- I have a > in the middle --><!-- and I have -- in the middle! -->"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("comment") (" I'm a valid comment "))) ((((unsupported)).apply ("comment") ("me too!"))) ((((unsupported)).apply ("comment") ("--"))) ((((unsupported)).apply ("comment") (""))) ((((unsupported)).apply ("comment") ("--I have many hyphens--"))) ((((unsupported)).apply ("comment") (" I have a > in the middle "))) ((((unsupported)).apply ("comment") (" and I have -- in the middle! "))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_condcoms.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<!--[if IE & !(lte IE 8)]>aren't<![endif]--><!--[if IE 8]>condcoms<![endif]--><!--[if lte IE 7]>pretty?<![endif]-->"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("comment") ("[if IE & !(lte IE 8)]>aren't<![endif]"))) ((((unsupported)).apply ("comment") ("[if IE 8]>condcoms<![endif]"))) ((((unsupported)).apply ("comment") ("[if lte IE 7]>pretty?<![endif]"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_convert_charrefs.write
                  [xself]
                    memory > xexpected
                    memory > xtext
                    memory > xcharrefs
                    memory > xhtml
                    memory > xcollector
                    seq > @
                      seq
                        xcollector.write (((unsupported)).apply ((((xEventCollectorCharrefs)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcollector)).apply).xconvert_charrefs)))
                        xcharrefs.write (((unsupported)).apply ("&quot;") ("&#34;") ("&#x22;") ("&quot") ("&#34") ("&#x22"))
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("foo\"zar"))))))) ((((unsupported)).apply ("data") ("a\"z"))) ((((unsupported)).apply ("endtag") ("a"))))
                        (((unsupported)).apply ((xcharref)) ((xcharrefs)))
                          (((unsupported)).apply (((xself).x_run_check)) (((("<a href=\"foo{0}zar\">a{0}z</a>".xformat)).apply ((xcharref)))) ((xexpected)) ((((xcollector)).apply)))
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("data") ("\""))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("x") ("\""))) ((((unsupported)).apply ("y") ("\"X"))) ((((unsupported)).apply ("z") ("X\""))))))) ((((unsupported)).apply ("data") ("\""))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("data") ("\""))))
                        (((unsupported)).apply ((xcharref)) ((xcharrefs)))
                          (((unsupported)).apply (((xself).x_run_check)) (((("{0}<a x=\"{0}\" y=\"{0}X\" z=\"X{0}\">{0}</a>{0}".xformat)).apply ((xcharref)))) ((xexpected)) ((((xcollector)).apply)))
                        (((unsupported)).apply ((xcharref)) ((xcharrefs)))
                          seq
                            xtext.write ((("X".xjoin)).apply (((((unsupported)).apply ((xcharref))).mul 3)))
                            xexpected.write (((unsupported)).apply ((((unsupported)).apply ("data") ("\""))) ((((unsupported)).apply ("starttag") ("script") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ((xtext)))) ((((unsupported)).apply ("endtag") ("script"))) ((((unsupported)).apply ("data") ("\""))) ((((unsupported)).apply ("starttag") ("style") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ((xtext)))) ((((unsupported)).apply ("endtag") ("style"))) ((((unsupported)).apply ("data") ("\""))))
                            (((unsupported)).apply (((xself).x_run_check)) (((("{1}<script>{0}</script>{1}<style>{0}</style>{1}".xformat)).apply ((xtext)) ((xcharref)))) ((xexpected)) ((((xcollector)).apply)))
                        xhtml.write "&quo &# &#x"
                        (((unsupported)).apply ((xx)) ((((xrange)).apply (1) ((((xlen)).apply ((xhtml)))))))
                          (((unsupported)).apply (((xself).x_run_check)) ((((unsupported)).apply ((xhtml)) ((((unsupported)).apply ((xx)))))) ((((unsupported)).apply ((((unsupported)).apply ("data") ((((unsupported)).apply ((xhtml)) ((((unsupported)).apply ((xx)))))))))) ((((xcollector)).apply)))
                        (((unsupported)).apply (((xself).x_run_check)) ("no charrefs here") ((((unsupported)).apply ((((unsupported)).apply ("data") ("no charrefs here"))))) ((((xcollector)).apply)))
                xtest_tolerant_parsing.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<html <html>te>>xt&a<<bc</a></html>n<img src=\"URL><//img></html</html>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("html") ((((unsupported)).apply ((((unsupported)).apply ("<html") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("data") ("te>>xt"))) ((((unsupported)).apply ("entityref") ("a"))) ((((unsupported)).apply ("data") ("<"))) ((((unsupported)).apply ("starttag") ("bc<") ((((unsupported)).apply ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("endtag") ("html"))) ((((unsupported)).apply ("data") ("n<img src=\"URL>"))) ((((unsupported)).apply ("comment") ("/img"))) ((((unsupported)).apply ("endtag") ("html<"))))))
                xtest_starttag_junk_chars.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("</>") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("</$>") ((((unsupported)).apply ((((unsupported)).apply ("comment") ("$"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("</") ((((unsupported)).apply ((((unsupported)).apply ("data") ("</"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("</a") ((((unsupported)).apply ((((unsupported)).apply ("data") ("</a"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a<a>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a<a") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("</a<a>") ((((unsupported)).apply ((((unsupported)).apply ("endtag") ("a<a"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<!") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<!"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<a"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a foo='bar'") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<a foo='bar'"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a foo='bar") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<a foo='bar"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a foo='>'") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<a foo='>'"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a foo='>") ((((unsupported)).apply ((((unsupported)).apply ("data") ("<a foo='>"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a$>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a$") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a$b>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a$b") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a$b/>") ((((unsupported)).apply ((((unsupported)).apply ("startendtag") ("a$b") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a$b  >") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a$b") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a$b  />") ((((unsupported)).apply ((((unsupported)).apply ("startendtag") ("a$b") ((((unsupported)).apply)))))))
                xtest_slashes_in_starttag.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a foo=\"var\"/>") ((((unsupported)).apply ((((unsupported)).apply ("startendtag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("var"))))))))))
                        xhtml.write "<img width=902 height=250px src=\"/sites/default/files/images/homepage/foo.jpg\" /*what am I doing here*/ />"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("startendtag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("width") ("902"))) ((((unsupported)).apply ("height") ("250px"))) ((((unsupported)).apply ("src") ("/sites/default/files/images/homepage/foo.jpg"))) ((((unsupported)).apply ("*what") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("am") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("i") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("doing") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("here*") ("None: is there a None literal in the EO language?"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                        xhtml.write "<a / /foo/ / /=/ / /bar/ / /><a / /foo/ / /=/ / /bar/ / >"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("startendtag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("=") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("=") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar") ("None: is there a None literal in the EO language?"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                        xhtml.write "<meta><meta / ><meta // ><meta / / ><meta/><meta /><meta //><meta//>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("meta") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("meta") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_declaration_junk_chars.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<!DOCTYPE foo $ >") ((((unsupported)).apply ((((unsupported)).apply ("decl") ("DOCTYPE foo $ "))))))
                xtest_illegal_declarations.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<!spacer type=\"block\" height=\"25\">") ((((unsupported)).apply ((((unsupported)).apply ("comment") ("spacer type=\"block\" height=\"25\""))))))
                xtest_invalid_end_tags.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<br></label</p><br></div end tmAd-leaderBoard><br></<h4><br></li class=\"unit\"><br></lirntttttt</ul><br></><br>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("label<"))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("div"))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("comment") ("<h4"))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("li"))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("endtag") ("li"))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("br") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_broken_invalid_end_tag.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<b>This</b attr=\">\"> confuses the parser"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("This"))) ((((unsupported)).apply ("endtag") ("b"))) ((((unsupported)).apply ("data") ("\"> confuses the parser"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_correct_detection_of_start_tags.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<div style=\"\"    ><b>The <a href=\"some_url\">rain</a> <br /> in <span>Spain</span></b></div>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("style") (""))))))) ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("The "))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("some_url"))))))) ((((unsupported)).apply ("data") ("rain"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("data") (" "))) ((((unsupported)).apply ("startendtag") ("br") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") (" in "))) ((((unsupported)).apply ("starttag") ("span") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("Spain"))) ((((unsupported)).apply ("endtag") ("span"))) ((((unsupported)).apply ("endtag") ("b"))) ((((unsupported)).apply ("endtag") ("div"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                        xhtml.write "<div style=\"\", foo = \"bar\" ><b>The <a href=\"some_url\">rain</a>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("style") (""))) ((((unsupported)).apply (",") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("foo") ("bar"))))))) ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("The "))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("some_url"))))))) ((((unsupported)).apply ("data") ("rain"))) ((((unsupported)).apply ("endtag") ("a"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_EOF_in_charref.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ((((unsupported)).apply ("a&") ((((unsupported)).apply ((((unsupported)).apply ("data") ("a&"))))))) ((((unsupported)).apply ("a&b") ((((unsupported)).apply ((((unsupported)).apply ("data") ("ab"))))))) ((((unsupported)).apply ("a&b ") ((((unsupported)).apply ((((unsupported)).apply ("data") ("a"))) ((((unsupported)).apply ("entityref") ("b"))) ((((unsupported)).apply ("data") (" "))))))) ((((unsupported)).apply ("a&b;") ((((unsupported)).apply ((((unsupported)).apply ("data") ("a"))) ((((unsupported)).apply ("entityref") ("b"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xhtml)) ((xexpected)))) ((xdata)))
                          bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_unescape_method.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write ((((xself).xget_collector)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          seq
                            xs.write "&quot;&#34;&#x22;&quot&#34&#x22&#bad;"
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xunescape)).apply ((xs)))) ((((xunescape)).apply ((xs)))))
                xtest_broken_comments.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<! not really a comment ><! not a comment either --><! -- close enough --><!><!<-- this was an empty comment><!!! another bogus comment !!!>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("comment") (" not really a comment "))) ((((unsupported)).apply ("comment") (" not a comment either --"))) ((((unsupported)).apply ("comment") (" -- close enough --"))) ((((unsupported)).apply ("comment") (""))) ((((unsupported)).apply ("comment") ("<-- this was an empty comment"))) ((((unsupported)).apply ("comment") ("!! another bogus comment !!!"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_broken_condcoms.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<![if !(IE)]>broken condcom<![endif]><![if ! IE]><link href=\"favicon.tiff\"/><![endif]><![if !IE 6]><img src=\"firefox.png\" /><![endif]><![if !ie 6]><b>foo</b><![endif]><![if (!IE)|(lt IE 9)]><img src=\"mammoth.bmp\" /><![endif]>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("unknown decl") ("if !(IE)"))) ((((unsupported)).apply ("data") ("broken condcom"))) ((((unsupported)).apply ("unknown decl") ("endif"))) ((((unsupported)).apply ("unknown decl") ("if ! IE"))) ((((unsupported)).apply ("startendtag") ("link") ((((unsupported)).apply ((((unsupported)).apply ("href") ("favicon.tiff"))))))) ((((unsupported)).apply ("unknown decl") ("endif"))) ((((unsupported)).apply ("unknown decl") ("if !IE 6"))) ((((unsupported)).apply ("startendtag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("src") ("firefox.png"))))))) ((((unsupported)).apply ("unknown decl") ("endif"))) ((((unsupported)).apply ("unknown decl") ("if !ie 6"))) ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("foo"))) ((((unsupported)).apply ("endtag") ("b"))) ((((unsupported)).apply ("unknown decl") ("endif"))) ((((unsupported)).apply ("unknown decl") ("if (!IE)|(lt IE 9)"))) ((((unsupported)).apply ("startendtag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("src") ("mammoth.bmp"))))))) ((((unsupported)).apply ("unknown decl") ("endif"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_convert_charrefs_dropped_text.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)).apply ((xEventCollector)) (TRUE))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("foo <a>link</a> bar &amp; baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xget_events)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("data") ("foo "))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("link"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("data") (" bar & baz"))))))
            (((unsupported)).apply ((xTestCaseBase)))
              seq
                xtest_attr_syntax.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") ("v"))) ((((unsupported)).apply ("c") ("v"))) ((((unsupported)).apply ("d") ("v"))) ((((unsupported)).apply ("e") ("None: is there a None literal in the EO language?"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='v' c=\"v\" d=v e>") ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a  b = 'v' c = \"v\" d = v e>") ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<anbn=n'v'ncn=n\"v\"ndn=nvne>") ((xoutput)))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<atbt=t'v'tct=t\"v\"tdt=tvte>") ((xoutput)))
                xtest_attr_values.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='xxxntxxx' c=\"yyytnyyy\" d='txyzn'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") ("xxxntxxx"))) ((((unsupported)).apply ("c") ("yyytnyyy"))) ((((unsupported)).apply ("d") ("txyzn"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='' c=\"\">") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") (""))) ((((unsupported)).apply ("c") (""))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<e a=rgb(1,2,3)>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("e") ((((unsupported)).apply ((((unsupported)).apply ("a") ("rgb(1,2,3)"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a href=mailto:xyz@example.com>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("mailto:xyz@example.com"))))))))))
                xtest_attr_nonascii.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<img src=/foo/bar.png alt=u4e2du6587>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("img") ((((unsupported)).apply ((((unsupported)).apply ("src") ("/foo/bar.png"))) ((((unsupported)).apply ("alt") ("u4e2du6587"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a title='u30c6u30b9u30c8' href='u30c6u30b9u30c8.html'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("title") ("u30c6u30b9u30c8"))) ((((unsupported)).apply ("href") ("u30c6u30b9u30c8.html"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a title=\"u30c6u30b9u30c8\" href=\"u30c6u30b9u30c8.html\">") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("title") ("u30c6u30b9u30c8"))) ((((unsupported)).apply ("href") ("u30c6u30b9u30c8.html"))))))))))
                xtest_attr_entity_replacement.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a b='&amp;&gt;&lt;&quot;&apos;'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") ("&><\"'"))))))))))
                xtest_attr_funky_names.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a a.b='v' c:d=v e-f=v>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("a.b") ("v"))) ((((unsupported)).apply ("c:d") ("v"))) ((((unsupported)).apply ("e-f") ("v"))))))))))
                xtest_entityrefs_in_attributes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<html foo='&euro;&amp;&#97;&#x61;&unsupported;'>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("html") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("u20AC&aa&unsupported;"))))))))))
                xtest_attr_funky_names2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a $><b $=%><c =/>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("$") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("starttag") ("b") ((((unsupported)).apply ((((unsupported)).apply ("$") ("%"))))))) ((((unsupported)).apply ("starttag") ("c") ((((unsupported)).apply ((((unsupported)).apply ("\\") ("/"))))))))))
                xtest_entities_in_attribute_value.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xentity)) ((((unsupported)).apply ("&") ("&amp;") ("&#38;") ("&#x26;"))))
                        seq
                          bogusForceDataize.write ((((xself).x_run_check)).apply (("<a href=\"%s\">".mod (xentity))) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("&"))))))))))
                          bogusForceDataize.write ((((xself).x_run_check)).apply (("<a href='%s'>".mod (xentity))) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("&"))))))))))
                          bogusForceDataize.write ((((xself).x_run_check)).apply (("<a href=%s>".mod (xentity))) ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("&"))))))))))
                xtest_malformed_attributes.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<a href=test'style='color:red;bad1'>test - bad1</a><a href=test'+style='color:red;ba2'>test - bad2</a><a href=test'&nbsp;style='color:red;bad3'>test - bad3</a><a href = test'&nbsp;style='color:red;bad4'  >test - bad4</a>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("test'style='color:red;bad1'"))))))) ((((unsupported)).apply ("data") ("test - bad1"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("test'+style='color:red;ba2'"))))))) ((((unsupported)).apply ("data") ("test - bad2"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("test'xa0style='color:red;bad3'"))))))) ((((unsupported)).apply ("data") ("test - bad3"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("test'xa0style='color:red;bad4'"))))))) ((((unsupported)).apply ("data") ("test - bad4"))) ((((unsupported)).apply ("endtag") ("a"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_malformed_adjacent_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<x><y z=\"\"o\"\" /></x>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("x") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("y") ((((unsupported)).apply ((((unsupported)).apply ("z") (""))) ((((unsupported)).apply ("o\"\"") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("endtag") ("x"))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<x><y z=\"\"\"\" /></x>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("x") ((((unsupported)).apply)))) ((((unsupported)).apply ("startendtag") ("y") ((((unsupported)).apply ((((unsupported)).apply ("z") (""))) ((((unsupported)).apply ("\"\"") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("endtag") ("x"))))))
                xtest_adjacent_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a width=\"100%\"cellspacing=0>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("width") ("100%"))) ((((unsupported)).apply ("cellspacing") ("0"))))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ("<a id=\"foo\"class=\"bar\">") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("id") ("foo"))) ((((unsupported)).apply ("class") ("bar"))))))))))
                xtest_missing_attribute_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a v=>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("v") (""))))))))))
                xtest_javascript_attribute_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a href=javascript:popup('/popup/help.html')>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("javascript:popup('/popup/help.html')"))))))))))
                xtest_end_tag_in_attribute_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<a href='http://www.example.org/\">;'>spam</a>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("http://www.example.org/\">;"))))))) ((((unsupported)).apply ("data") ("spam"))) ((((unsupported)).apply ("endtag") ("a"))))))
                xtest_with_unquoted_attributes.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<html><body bgcolor=d0ca90 text='181008'><table cellspacing=0 cellpadding=1 width=100% ><tr><td align=left><font size=-1>- <a href=/rabota/><span class=en> software-and-i</span></a>- <a href='/1/'><span class=en> library</span></a></table>"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("html") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("body") ((((unsupported)).apply ((((unsupported)).apply ("bgcolor") ("d0ca90"))) ((((unsupported)).apply ("text") ("181008"))))))) ((((unsupported)).apply ("starttag") ("table") ((((unsupported)).apply ((((unsupported)).apply ("cellspacing") ("0"))) ((((unsupported)).apply ("cellpadding") ("1"))) ((((unsupported)).apply ("width") ("100%"))))))) ((((unsupported)).apply ("starttag") ("tr") ((((unsupported)).apply)))) ((((unsupported)).apply ("starttag") ("td") ((((unsupported)).apply ((((unsupported)).apply ("align") ("left"))))))) ((((unsupported)).apply ("starttag") ("font") ((((unsupported)).apply ((((unsupported)).apply ("size") ("-1"))))))) ((((unsupported)).apply ("data") ("- "))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("/rabota/"))))))) ((((unsupported)).apply ("starttag") ("span") ((((unsupported)).apply ((((unsupported)).apply ("class") ("en"))))))) ((((unsupported)).apply ("data") (" software-and-i"))) ((((unsupported)).apply ("endtag") ("span"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("data") ("- "))) ((((unsupported)).apply ("starttag") ("a") ((((unsupported)).apply ((((unsupported)).apply ("href") ("/1/"))))))) ((((unsupported)).apply ("starttag") ("span") ((((unsupported)).apply ((((unsupported)).apply ("class") ("en"))))))) ((((unsupported)).apply ("data") (" library"))) ((((unsupported)).apply ("endtag") ("span"))) ((((unsupported)).apply ("endtag") ("a"))) ((((unsupported)).apply ("endtag") ("table"))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_comma_between_attributes.write
                  [xself]
                    memory > xexpected
                    memory > xhtml
                    seq > @
                      seq
                        xhtml.write "<div class=bar,baz=asd><div class=\"bar\",baz=\"asd\"><div class=bar, baz=asd,><div class=\"bar\", baz=\"asd\",><div class=\"bar\",><div class=,bar baz=,asd><div class=,\"bar\" baz=,\"asd\"><div ,class=bar ,baz=asd><div class,=\"bar\" baz,=\"asd\">"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") ("bar,baz=asd"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") ("bar"))) ((((unsupported)).apply (",baz") ("asd"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") ("bar,"))) ((((unsupported)).apply ("baz") ("asd,"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") ("bar"))) ((((unsupported)).apply (",") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("baz") ("asd"))) ((((unsupported)).apply (",") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") ("bar"))) ((((unsupported)).apply (",") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") (",bar"))) ((((unsupported)).apply ("baz") (",asd"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class") (",\"bar\""))) ((((unsupported)).apply ("baz") (",\"asd\""))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply (",class") ("bar"))) ((((unsupported)).apply (",baz") ("asd"))))))) ((((unsupported)).apply ("starttag") ("div") ((((unsupported)).apply ((((unsupported)).apply ("class,") ("bar"))) ((((unsupported)).apply ("baz,") ("asd"))))))))
                        bogusForceDataize.write ((((xself).x_run_check)).apply ((xhtml)) ((xexpected)))
                xtest_weird_chars_in_unquoted_attribute_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_run_check)).apply ("<form action=bogus|&#()value>") ((((unsupported)).apply ((((unsupported)).apply ("starttag") ("form") ((((unsupported)).apply ((((unsupported)).apply ("action") ("bogus|&#()value"))))))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)