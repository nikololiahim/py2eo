memory > xstr
memory > xtimedelta
memory > xnewsocket
memory > xNewIMAPTestsMixin
memory > xMyServer
memory > xsocketserver
memory > xDeprecationWarning
memory > xgetattr
memory > xNonUTF8Server
memory > x__name__
memory > xcm
memory > xret
memory > xUTF8AppendServer
memory > xthreading
memory > xImportError
memory > xtimezone
memory > xdatetime
memory > xUTF8Server
memory > xBracketFlagHandler
memory > xdata
memory > xfromaddr
memory > xRemoteIMAPTest
memory > xLsubCmd
memory > xcap
memory > xValueError
memory > ximaplib
memory > xt
memory > xsocket
memory > xSecureTCPServer
memory > ximap
memory > xcalendar
memory > xverbose
memory > x_
memory > xStopIteration
memory > xNoEnableServer
memory > xBadNewlineHandler
memory > xprint
memory > xTooLongHandler
memory > xEnableHandler
memory > xhasattr
memory > xcode
memory > xtime
memory > xsuper
memory > xs
memory > xsupport
memory > xOSError
memory > xmock
memory > xos
memory > x__file__
memory > xunittest
memory > xSimpleIMAPHandler
memory > xEOFHandler
memory > xnext
memory > xthread
memory > xtransient_internet
memory > xThreadedNetworkedTests
memory > xserver
memory > xAuthHandler
memory > xtyp
[] > test_imaplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xCAFILE
        memory > xtest_with_statement_logout
        memory > xtest_imap4_host_default_value
        memory > xsetUp
        memory > xssl
        memory > xtest_aborted_authentication
        memory > xcmd_AUTHENTICATE
        memory > xtest_login_cram_md5_bytes
        memory > xport
        memory > xtest_Internaldate2tuple_issue10941
        memory > xcapabilities
        memory > x_setup
        memory > ximap_class
        memory > xtest_bad_auth_name
        memory > xcheck_logincapa
        memory > xtest_login_cram_md5
        memory > xclient
        memory > xtest_enable_UTF8_raises_error_if_not_supported
        memory > xtest_enable_raises_error_if_no_capability
        memory > x_send_textline
        memory > xtest_enable_UTF8_True_append
        memory > xtest_with_statement
        memory > xcmd_ENABLE
        memory > xtest_issue5949
        memory > xtest_invalid_authentication
        memory > xtest_valid_authentication_bytes
        memory > xreap_server
        memory > xtest_Internaldate2tuple
        memory > xcmd_LOGIN
        memory > xtest_certfile_arg_warn
        memory > xtest_valid_authentication_plain_text
        memory > xtest_bracket_flags
        memory > xtest_search_disallows_charset_in_utf8_mode
        memory > xtest_login
        memory > xpassword
        memory > xtest_Time2Internaldate
        memory > xtest_linetoolong
        memory > xtest_line_termination
        memory > xtest_logincapa
        memory > xtest_logout
        memory > x_send_tagged
        memory > x_send_line
        memory > xcontinuation
        memory > xtest_valid_authentication
        memory > xhost
        memory > xtest_ssl_raises
        memory > xtest_ssl_verified
        memory > xhandle
        memory > xtest_simple_with_statement
        memory > xusername
        memory > xtimevalues
        memory > xtest_that_Time2Internaldate_returns_a_result
        memory > xreaped_server
        memory > x_send
        memory > xmake_server
        memory > xcreate_ssl_context
        memory > xtest_lsub
        memory > xserver_class
        memory > xtest_ssl_context_certfile_exclusive
        memory > xCERTFILE
        memory > xget_request
        memory > xtest_login_cram_md5_plain_text
        memory > xsetup
        memory > xtimeout
        memory > xcmd_LOGOUT
        memory > xtest_ssl_context_keyfile_exclusive
        memory > xtest_EOF_without_complete_welcome_message
        memory > xIMAP4_SSL
        memory > xtearDown
        memory > xtest_connect
        memory > xreaped_pair
        memory > xtest_enable_raises_error_if_not_AUTH
        memory > xcmd_CAPABILITY
        memory > x_cleanup
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xssl.write "None: is there a None literal in the EO language?"
            xCERTFILE.write (((((xos).xpath).xjoin)).apply (((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))) ("keycert3.pem"))
            xCAFILE.write (((((xos).xpath).xjoin)).apply ("pycacert.pem") (((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_Internaldate2tuple.write
                  [xself]
                    memory > xtt
                    memory > xt0
                    seq > @
                      seq
                        xt0.write ((((xcalendar).xtimegm)).apply ((((unsupported)).apply (2000) (1) (1) (0) (0) (0) ((1.neg)) ((1.neg)) ((1.neg)))))
                        xtt.write ((((ximaplib).xInternaldate2tuple)).apply ("25 (INTERNALDATE \"01-Jan-2000 00:00:00 +0000\")"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xmktime)).apply ((xtt)))) ((xt0)))
                        xtt.write ((((ximaplib).xInternaldate2tuple)).apply ("25 (INTERNALDATE \"01-Jan-2000 11:30:00 +1130\")"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xmktime)).apply ((xtt)))) ((xt0)))
                        xtt.write ((((ximaplib).xInternaldate2tuple)).apply ("25 (INTERNALDATE \"31-Dec-1999 12:30:00 -1130\")"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xmktime)).apply ((xtt)))) ((xt0)))
                xtest_Internaldate2tuple_issue10941.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((ximaplib).xInternaldate2tuple)).apply ("25 (INTERNALDATE \"02-Apr-2000 02:30:00 +0000\")"))) (((((ximaplib).xInternaldate2tuple)).apply ("25 (INTERNALDATE \"02-Apr-2000 03:30:00 +0000\")"))))
                xtimevalues.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (2000000000) (2000000000.0) (((((xtime).xlocaltime)).apply (2000000000))) ((((unsupported)).apply (2033) (5) (18) (5) (33) (20) ((1.neg)) ((1.neg)) ((1.neg)))) ((((unsupported)).apply (2033) (5) (18) (5) (33) (20) ((1.neg)) ((1.neg)) (1))) (((((xdatetime).xfromtimestamp)).apply (2000000000) ((((xtimezone)).apply ((((xtimedelta)).apply (0) (((2.mul 60).mul 60)))))))) ("\"18-May-2033 05:33:20 +0200\""))))
                xtest_Time2Internaldate.write
                  [xself]
                    memory > xexpected
                    memory > xinternal
                    seq > @
                      (((unsupported)).apply)
                        xexpected.write "\"18-May-2033 05:33:20 +0200\""
                        (((unsupported)).apply ((xt)) (((((xself).xtimevalues)).apply)))
                          seq
                            xinternal.write ((((ximaplib).xTime2Internaldate)).apply ((xt)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xinternal)) ((xexpected)))
                xtest_that_Time2Internaldate_returns_a_result.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xt)) (((((xself).xtimevalues)).apply)))
                        bogusForceDataize.write ((((ximaplib).xTime2Internaldate)).apply ((xt)))
                xtest_imap4_host_default_value.write
                  [xself]
                    memory > xexpected_errnos
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xs)))
                          (((unsupported)).apply (((xsocket).xerror)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ("") (((ximaplib).xIMAP4_PORT)))))
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("Cannot run the test with local IMAP server running."))
                        xexpected_errnos.write ((((xsupport).xget_socket_conn_refused_errs)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((ximaplib).xIMAP4)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xcm).xexception).xerrno)) ((xexpected_errnos)))
            (xssl).if
              seq
                (((unsupported)).apply (((xsocketserver).xTCPServer)))
                  xget_request.write
                    [xself]
                      memory > xcontext
                      memory > xconnstream
                      seq > @
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xnewsocket)) ((xfromaddr)))) ((((((xself).xsocket).xaccept)).apply)))
                          xcontext.write ((((xssl).xSSLContext)).apply)
                          bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xCERTFILE)))
                          xconnstream.write (((unsupported)).apply (((xcontext).xwrap_socket)) ((xnewsocket)) (TRUE))
                          (((unsupported)).apply ((((unsupported)).apply ((xconnstream)) ((xfromaddr)))))
                xIMAP4_SSL.write ((ximaplib).xIMAP4_SSL)
              seq
                (((unsupported)).apply)
                xIMAP4_SSL.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xsocketserver).xStreamRequestHandler)))
              seq
                xtimeout.write 1
                xcontinuation.write "None: is there a None literal in the EO language?"
                xcapabilities.write ""
                xsetup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetup)).apply)
                        (((unsupported)).apply ((((xself).xserver).xlogged)) ("None: is there a None literal in the EO language?"))
                x_send.write
                  [xself xmessage]
                    seq > @
                      seq
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply (("SENT: %r".mod ((((xmessage).xstrip)).apply))))
                        bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ((xmessage)))
                x_send_line.write
                  [xself xmessage]
                    seq > @
                      bogusForceDataize.write ((((xself).x_send)).apply (((xmessage).add "rn")))
                x_send_textline.write
                  [xself xmessage]
                    seq > @
                      bogusForceDataize.write ((((xself).x_send_line)).apply (((((xmessage).xencode)).apply ("ASCII"))))
                x_send_tagged.write
                  [xself xtag xcode xmessage]
                    seq > @
                      bogusForceDataize.write ((((xself).x_send_textline)).apply ((((" ".xjoin)).apply ((((unsupported)).apply ((xtag)) ((xcode)) ((xmessage)))))))
                xhandle.write
                  [xself]
                    memory > xpart
                    memory > xsplitline
                    memory > xtag
                    memory > xargs
                    memory > xline
                    memory > xcmd
                    memory > xcontinuation
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_send_textline)).apply ("* OK IMAP4rev1"))
                        while.
                          1
                          [unused]
                            seq > @
                              seq
                                xline.write ""
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xOSError)))
                                          seq
                                            xpart.write (((((xself).xrfile).xread)).apply (1))
                                            ((xpart).eq "").if
                                              (((unsupported)).apply)
                                            (((unsupported)).apply ((xline)) ((xpart)))
                                          (((unsupported)).apply)
                                        ((((xline).xendswith)).apply ("rn")).if
                                          (((unsupported)).apply)
                                (xverbose).if
                                  bogusForceDataize.write (((xprint)).apply (("GOT: %r".mod ((((xline).xstrip)).apply))))
                                ((xself).xcontinuation).if
                                  seq
                                    (((unsupported)).apply ((xStopIteration)))
                                      bogusForceDataize.write (((((xself).xcontinuation).xsend)).apply ((xline)))
                                      (((unsupported)).apply (((xself).xcontinuation)) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)).apply)
                                xsplitline.write (((((((xline).xdecode)).apply ("ASCII")).xsplit)).apply)
                                xtag.write (((unsupported)).apply ((xsplitline)) (0))
                                xcmd.write (((unsupported)).apply ((xsplitline)) (1))
                                xargs.write (((unsupported)).apply ((xsplitline)) ((((unsupported)).apply (2))))
                                (((xhasattr)).apply ((xself)) (("cmd_".add (xcmd)))).if
                                  seq
                                    xcontinuation.write (((((xgetattr)).apply ((xself)) (("cmd_".add (xcmd))))).apply ((xtag)) ((xargs)))
                                    (xcontinuation).if
                                      seq
                                        (((unsupported)).apply (((xself).xcontinuation)) ((xcontinuation)))
                                        bogusForceDataize.write (((xnext)).apply ((xcontinuation)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("BAD") (((xcmd).add " unknown")))
                xcmd_CAPABILITY.write
                  [xself xtag xargs]
                    memory > xcaps
                    seq > @
                      seq
                        xcaps.write (((xself).xcapabilities).if ("IMAP4rev1 ".add ((xself).xcapabilities)) "IMAP4rev1")
                        bogusForceDataize.write ((((xself).x_send_textline)).apply (("* CAPABILITY ".add (xcaps))))
                        bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CAPABILITY completed"))
                xcmd_LOGOUT.write
                  [xself xtag xargs]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xserver).xlogged)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).x_send_textline)).apply ("* BYE IMAP4ref1 Server logging out"))
                        bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("LOGOUT completed"))
                xcmd_LOGIN.write
                  [xself xtag xargs]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xserver).xlogged)) ((((unsupported)).apply ((xargs)) (0))))
                        bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("LOGIN completed"))
            (((unsupported)).apply)
              seq
                xclient.write "None: is there a None literal in the EO language?"
                x_setup.write
                  [xself ximap_handler xconnect]
                    memory > xhandle_error
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xserver_class)))
                          xhandle_error.write
                            [xself xrequest xclient_address]
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  bogusForceDataize.write ((((xself).xclose_request)).apply ((xrequest)))
                                  bogusForceDataize.write ((((xself).xserver_close)).apply)
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).x_cleanup)))
                        (((unsupported)).apply (((xself).xserver)) (((((xself).xserver_class)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((ximap_handler)))))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((((xself).x_testMethodName).add "-server")) ((((xself).xserver).xserve_forever)) ((((unsupported)).apply ("poll_interval") (0.01))))))
                        (((unsupported)).apply ((((xself).xthread).xdaemon)) (TRUE))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        (xconnect).if
                          (((unsupported)).apply (((xself).xclient)) (((((xself).ximap_class)).apply ((((unsupported)).apply ((((xself).xserver).xserver_address)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xclient)) (((xself).xserver)))))
                x_cleanup.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((unsupported)).apply (((xself).xclient)) ("None: is there a None literal in the EO language?")).and ((((xself).xclient).xstate).neq "LOGOUT")).if
                          bogusForceDataize.write (((((xself).xclient).xshutdown)).apply)
                        bogusForceDataize.write (((((xself).xserver).xshutdown)).apply)
                        bogusForceDataize.write (((((xself).xserver).xserver_close)).apply)
                        bogusForceDataize.write ((((xsupport).xjoin_thread)).apply (((xself).xthread)) (3.0))
                        (((unsupported)).apply (((xself).xthread)) ("None: is there a None literal in the EO language?"))
                xtest_EOF_without_complete_welcome_message.write
                  [xself]
                    memory > xhandle
                    seq > @
                      seq
                        (((unsupported)).apply (((xsocketserver).xStreamRequestHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("* OK"))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xEOFHandler)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xabort)) (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))))
                xtest_line_termination.write
                  [xself]
                    memory > xcmd_CAPABILITY
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_CAPABILITY.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send)).apply ("* CAPABILITY IMAP4rev1 AUTHn"))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CAPABILITY completed"))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xBadNewlineHandler)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xabort)) (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))))
                xtest_enable_raises_error_if_not_AUTH.write
                  [xself]
                    memory > xcapabilities
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcapabilities.write "AUTH ENABLE UTF8=ACCEPT"
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xEnableHandler)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xclient).xutf8_enabled)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("ENABLE.*NONAUTH"))))
                          bogusForceDataize.write ((((xclient).xenable)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xclient).xutf8_enabled)))
                xtest_enable_raises_error_if_no_capability.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("does not support ENABLE"))))
                          bogusForceDataize.write ((((xclient).xenable)).apply ("foo"))
                xtest_enable_UTF8_raises_error_if_not_supported.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlogin)).apply ("user") ("pass"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("does not support ENABLE"))))
                          bogusForceDataize.write ((((xclient).xenable)).apply ("UTF8=ACCEPT"))
                xtest_enable_UTF8_True_append.write
                  [xself]
                    memory > xcmd_APPEND
                    memory > xcmd_ENABLE
                    memory > xmsg_string
                    memory > xcmd_AUTHENTICATE
                    memory > xcapabilities
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xcapabilities.write "ENABLE UTF8=ACCEPT"
                            xcmd_ENABLE.write
                              [xself xtag xargs]
                                seq > @
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("ENABLE successful"))
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                    (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                            xcmd_APPEND.write
                              [xself xtag xargs]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                    (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("okay"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((xserver)))) (((((xself).x_setup)).apply ((xUTF8AppendServer)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).x_encoding)) ("ascii"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xenable)).apply ("UTF8=ACCEPT"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).x_encoding)) ("utf-8"))
                        xmsg_string.write "Subject: üñí©öðé"
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xappend)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (((((xmsg_string).xencode)).apply ("utf-8"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ((((("UTF8 (%s)rn".mod (xmsg_string)).xencode)).apply ("utf-8"))))
                xtest_search_disallows_charset_in_utf8_mode.write
                  [xself]
                    memory > xcmd_ENABLE
                    memory > xcmd_AUTHENTICATE
                    memory > xcapabilities
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xcapabilities.write "AUTH ENABLE UTF8=ACCEPT"
                            xcmd_ENABLE.write
                              [xself xtag xargs]
                                seq > @
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("ENABLE successful"))
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                    (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xUTF8Server)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((x_)))) (((((xclient).xenable)).apply ("UTF8=ACCEPT"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xclient).xutf8_enabled)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("charset.*UTF8"))))
                          bogusForceDataize.write ((((xclient).xsearch)).apply ("foo") ("bar"))
                xtest_bad_auth_name.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") (((("unrecognized authentication type {}".xformat)).apply ((((unsupported)).apply ((xargs)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xMyServer)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("unrecognized authentication type METHOD"))))
                          bogusForceDataize.write ((((xclient).xauthenticate)).apply ("METHOD") ((((unsupported)).apply (1))))
                xtest_invalid_authentication.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply (((xself).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("[AUTHENTICATIONFAILED] invalid"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xMyServer)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("[AUTHENTICATIONFAILED] invalid"))))
                          bogusForceDataize.write ((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))
                xtest_valid_authentication_bytes.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((xserver)))) (((((xself).x_setup)).apply ((xMyServer)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                xtest_valid_authentication_plain_text.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((xserver)))) (((((xself).x_setup)).apply ((xMyServer)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                xtest_login_cram_md5_bytes.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    memory > xcapabilities
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xcapabilities.write "LOGINDISABLED AUTH=CRAM-MD5"
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                memory > xr
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+ PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ="))
                                    xr.write (((unsupported)).apply)
                                    ((xr).eq "dGltIGYxY2E2YmU0NjRiOWVmYTFjY2E2ZmZkNmNmMmQ5ZjMyrn").if
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CRAM-MD5 successful"))
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("No access"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xAuthHandler)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("AUTH=CRAM-MD5") (((xclient).xcapabilities)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xret)) ((x_)))) (((((xclient).xlogin_cram_md5)).apply ("tim") ("tanstaaftanstaaf"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) ("OK"))
                xtest_login_cram_md5_plain_text.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    memory > xcapabilities
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xcapabilities.write "LOGINDISABLED AUTH=CRAM-MD5"
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                memory > xr
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+ PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ="))
                                    xr.write (((unsupported)).apply)
                                    ((xr).eq "dGltIGYxY2E2YmU0NjRiOWVmYTFjY2E2ZmZkNmNmMmQ5ZjMyrn").if
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CRAM-MD5 successful"))
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("No access"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xAuthHandler)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("AUTH=CRAM-MD5") (((xclient).xcapabilities)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xret)) ((x_)))) (((((xclient).xlogin_cram_md5)).apply ("tim") ("tanstaaftanstaaf"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) ("OK"))
                xtest_aborted_authentication.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply (((xself).xresponse)) ((((unsupported)).apply)))
                                  (((xself).xresponse).eq "*rn").if
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("[AUTHENTICATIONFAILED] aborted"))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("MYAUTH successful"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xMyServer)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("[AUTHENTICATIONFAILED] aborted"))))
                          bogusForceDataize.write ((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                xtest_linetoolong.write
                  [xself]
                    memory > xhandle
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ((("* OK ".add (11.mul "x")).add "rn")))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xTooLongHandler)) (FALSE))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((((ximaplib).xIMAP4).xerror)) ("got more than 10 bytes"))))
                          bogusForceDataize.write ((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))
                xtest_simple_with_statement.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xSimpleIMAPHandler)) (FALSE))))
                        (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))))
                xtest_with_statement.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xSimpleIMAPHandler)) (FALSE))))
                        (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))) ((ximap)))
                          seq
                            bogusForceDataize.write ((((ximap).xlogin)).apply ("user") ("pass"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xlogged)) ("user"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
                xtest_with_statement_logout.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) ((((unsupported)).apply (((xself).x_setup)) ((xSimpleIMAPHandler)) (FALSE))))
                        (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))) ((ximap)))
                          seq
                            bogusForceDataize.write ((((ximap).xlogin)).apply ("user") ("pass"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xlogged)) ("user"))
                            bogusForceDataize.write ((((ximap).xlogout)).apply)
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
                xtest_login.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlogin)).apply ("user") ("pass"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) (0))) ("LOGIN completed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).xstate)) ("AUTH"))
                xtest_logout.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlogin)).apply ("user") ("pass"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) (0))) ("LOGIN completed"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlogout)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("BYE") ((((unsupported)).apply ((xtyp)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) (0))) ("IMAP4ref1 Server logging out") ((((unsupported)).apply ((xtyp)) ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).xstate)) ("LOGOUT"))
                xtest_lsub.write
                  [xself]
                    memory > xcmd_LSUB
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_LSUB.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("* LSUB () \".\" directoryA"))
                                  (((unsupported)).apply (((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("LSUB completed"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient)) ((x_)))) (((((xself).x_setup)).apply ((xLsubCmd)))))
                        bogusForceDataize.write ((((xclient).xlogin)).apply ("user") ("pass"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlsub)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) (0))) ("() \".\" directoryA"))
            (((unsupported)).apply ((xNewIMAPTestsMixin)) (((xunittest).xTestCase)))
              seq
                ximap_class.write ((ximaplib).xIMAP4)
                xserver_class.write ((xsocketserver).xTCPServer)
            (((unsupported)).apply ((xNewIMAPTestsMixin)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xssl)) ("SSL not available"))))
              seq
                ximap_class.write (xIMAP4_SSL)
                xserver_class.write (xSecureTCPServer)
                xtest_ssl_raises.write
                  [xself]
                    memory > xssl_context
                    memory > xclient
                    seq > @
                      seq
                        xssl_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xssl_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xssl_context).xcheck_hostname)) (TRUE))
                        bogusForceDataize.write ((((xssl_context).xload_verify_locations)).apply ((xCAFILE)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("IP address mismatch, certificate is not valid for '127.0.0.1'"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                            xclient.write (((unsupported)).apply (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))) ((xssl_context)))
                            bogusForceDataize.write ((((xclient).xshutdown)).apply)
                xtest_ssl_verified.write
                  [xself]
                    memory > xssl_context
                    memory > xclient
                    seq > @
                      seq
                        xssl_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xssl_context).xload_verify_locations)).apply ((xCAFILE)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xserver)))) (((((xself).x_setup)).apply ((xSimpleIMAPHandler)))))
                        xclient.write (((unsupported)).apply (((xself).ximap_class)) ("localhost") ((((unsupported)).apply (((xserver).xserver_address)) (1))) ((xssl_context)))
                        bogusForceDataize.write ((((xclient).xshutdown)).apply)
                xtest_certfile_arg_warn.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).ximap_class)) ("open"))))
                            (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).ximap_class)) ("_connect"))))
                              (((unsupported)).apply (((xself).ximap_class)) ("localhost") (143) ((xCERTFILE)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xserver_class.write ((xsocketserver).xTCPServer)
                ximap_class.write ((ximaplib).xIMAP4)
                xmake_server.write
                  [xself xaddr xhdlr]
                    memory > xt
                    memory > xserver
                    memory > xhandle_error
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver_class)))
                          xhandle_error.write
                            [xself xrequest xclient_address]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).xclose_request)).apply ((xrequest)))
                                  bogusForceDataize.write ((((xself).xserver_close)).apply)
                                  (((unsupported)).apply)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("creating server"))
                        xserver.write (((xMyServer)).apply ((xaddr)) ((xhdlr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xserver_address)) ((((((xserver).xsocket).xgetsockname)).apply)))
                        (xverbose).if
                          seq
                            bogusForceDataize.write (((xprint)).apply ("server created"))
                            bogusForceDataize.write (((xprint)).apply ("ADDR =") ((xaddr)))
                            bogusForceDataize.write (((xprint)).apply ("CLASS =") (((xself).xserver_class)))
                            bogusForceDataize.write (((xprint)).apply ("HDLR =") (((xserver).xRequestHandlerClass)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) (("%s serving".mod ((xself).xserver_class))) (((xserver).xserve_forever)) ((((unsupported)).apply ("poll_interval") (0.01))))
                        (((unsupported)).apply (((xt).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("server running"))
                        (((unsupported)).apply ((((unsupported)).apply ((xserver)) ((xt)))))
                xreap_server.write
                  [xself xserver xthread]
                    seq > @
                      seq
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("waiting for server"))
                        bogusForceDataize.write ((((xserver).xshutdown)).apply)
                        bogusForceDataize.write ((((xserver).xserver_close)).apply)
                        bogusForceDataize.write ((((xthread).xjoin)).apply)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("done"))
                xreaped_server.write
                  [xself xhdlr]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xserver)) ((xthread)))) (((((xself).xmake_server)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((xhdlr)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xserver)))
                          bogusForceDataize.write ((((xself).xreap_server)).apply ((xserver)) ((xthread)))
                xreaped_pair.write
                  [xself xhdlr]
                    memory > xclient
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xhdlr)))) ((xserver)))
                          seq
                            xclient.write ((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))
                            (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xserver)) ((xclient)))))
                              bogusForceDataize.write ((((xclient).xlogout)).apply)
                xtest_connect.write
                  [xself]
                    memory > xclient
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                          seq
                            xclient.write ((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))
                            bogusForceDataize.write ((((xclient).xshutdown)).apply)
                xtest_bracket_flags.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    memory > xcmd_SELECT
                    memory > xhandle
                    memory > xcmd_STORE
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xhandle.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xflags)) ((((unsupported)).apply ("Answered") ("Flagged") ("Deleted") ("Seen") ("Draft"))))
                                    bogusForceDataize.write ((((((xsuper)).apply).xhandle)).apply)
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                    (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                            xcmd_SELECT.write
                              [xself xtag xargs]
                                memory > xmsg
                                memory > xflag_msg
                                seq > @
                                  seq
                                    xflag_msg.write (((" \\".xjoin)).apply (((xself).xflags)))
                                    bogusForceDataize.write ((((xself).x_send_line)).apply ((((("* FLAGS (%s)".mod (xflag_msg)).xencode)).apply ("ascii"))))
                                    bogusForceDataize.write ((((xself).x_send_line)).apply ("* 2 EXISTS"))
                                    bogusForceDataize.write ((((xself).x_send_line)).apply ("* 0 RECENT"))
                                    xmsg.write ((((unsupported)).apply).mod (xflag_msg))
                                    bogusForceDataize.write ((((xself).x_send_line)).apply (((((xmsg).xencode)).apply ("ascii"))))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("[READ-WRITE] SELECT completed."))
                            xcmd_STORE.write
                              [xself xtag xargs]
                                memory > xnew_flags
                                memory > xmsg
                                memory > xflags_msg
                                seq > @
                                  seq
                                    xnew_flags.write ((((((((((((unsupported)).apply ((xargs)) (2)).xstrip)).apply ("(")).xstrip)).apply (")")).xsplit)).apply)
                                    bogusForceDataize.write (((((xself).xflags).xextend)).apply ((xnew_flags)))
                                    xflags_msg.write ("(FLAGS (%s))".mod (((" \\".xjoin)).apply (((xself).xflags))))
                                    xmsg.write ("* %s FETCH %s".mod (((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) ((xflags_msg))))
                                    bogusForceDataize.write ((((xself).x_send_line)).apply (((((xmsg).xencode)).apply ("ascii"))))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("STORE completed."))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xBracketFlagHandler)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xdata)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                            bogusForceDataize.write ((((xclient).xselect)).apply ("test"))
                            (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((((unsupported)).apply ((xdata)))))) (((((xclient).xstore)).apply ("1") ("+FLAGS") ("[test]"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("[test]") ((xdata)))
                            bogusForceDataize.write ((((xclient).xselect)).apply ("test"))
                            (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((((unsupported)).apply ((xdata)))))) (((((xclient).xresponse)).apply ("PERMANENTFLAGS"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("[test]") ((xdata)))
                xtest_issue5949.write
                  [xself]
                    memory > xhandle
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xsocketserver).xStreamRequestHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("* OK"))
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xEOFHandler)))) ((xserver)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xabort)) (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))))
                xtest_line_termination.write
                  [xself]
                    memory > xcmd_CAPABILITY
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_CAPABILITY.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send)).apply ("* CAPABILITY IMAP4rev1 AUTHn"))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CAPABILITY completed"))
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xBadNewlineHandler)))) ((xserver)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xabort)) (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))))
                (((unsupported)).apply ((xSimpleIMAPHandler)))
                  seq
                    xcapabilities.write "AUTH ENABLE UTF8=ACCEPT"
                    xcmd_ENABLE.write
                      [xself xtag xargs]
                        seq > @
                          bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("ENABLE successful"))
                    xcmd_AUTHENTICATE.write
                      [xself xtag xargs]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                            (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                xtest_enable_raises_error_if_not_AUTH.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply (((xself).xUTF8Server)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xclient).xutf8_enabled)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)) (((xclient).xenable)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xclient).xutf8_enabled)))
                xtest_enable_raises_error_if_no_capability.write
                  [xself]
                    memory > xcapabilities
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xUTF8Server)))
                          xcapabilities.write "AUTH"
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xNoEnableServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)) (((xclient).xenable)) ("foo"))
                xtest_enable_UTF8_raises_error_if_not_supported.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)))))
                          (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xNonUTF8Server)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xlogin)).apply ("user") ("pass"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                              bogusForceDataize.write ((((xclient).xenable)).apply ("UTF8=ACCEPT"))
                xtest_enable_UTF8_True_append.write
                  [xself]
                    memory > xcmd_APPEND
                    memory > xmsg_string
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xUTF8Server)))
                          xcmd_APPEND.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("okay"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xUTF8AppendServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).x_encoding)) ("ascii"))
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((x_)))) (((((xclient).xenable)).apply ("UTF8=ACCEPT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient).x_encoding)) ("utf-8"))
                            xmsg_string.write "Subject: üñí©öðé"
                            (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xdata)))) (((((xclient).xappend)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (((((xmsg_string).xencode)).apply ("utf-8"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ((((("UTF8 (%s)rn".mod (xmsg_string)).xencode)).apply ("utf-8"))))
                xtest_search_disallows_charset_in_utf8_mode.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply (((xself).xUTF8Server)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((x_)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                            (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((x_)))) (((((xclient).xenable)).apply ("UTF8=ACCEPT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtyp)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xclient).xutf8_enabled)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)) (((xclient).xsearch)) ("foo") ("bar"))
                xtest_bad_auth_name.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") (((("unrecognized authentication type {}".xformat)).apply ((((unsupported)).apply ((xargs)) (0))))))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xMyServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)))))
                            bogusForceDataize.write ((((xclient).xauthenticate)).apply ("METHOD") ((((unsupported)).apply (1))))
                xtest_invalid_authentication.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply (((xself).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("[AUTHENTICATIONFAILED] invalid"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xMyServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xdata)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                xtest_valid_authentication.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply ((((xself).xserver).xresponse)) ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("FAKEAUTH successful"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xMyServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xdata)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xMyServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xdata)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("fake"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) ("OK"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xresponse)) ("ZmFrZQ==rn"))
                xtest_login_cram_md5.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    memory > xcapabilities
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          seq
                            xcapabilities.write "LOGINDISABLED AUTH=CRAM-MD5"
                            xcmd_AUTHENTICATE.write
                              [xself xtag xargs]
                                memory > xr
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_send_textline)).apply ("+ PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ="))
                                    xr.write (((unsupported)).apply)
                                    ((xr).eq "dGltIGYxY2E2YmU0NjRiOWVmYTFjY2E2ZmZkNmNmMmQ5ZjMyrn").if
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("CRAM-MD5 successful"))
                                      bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("No access"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xAuthHandler)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("AUTH=CRAM-MD5") (((xclient).xcapabilities)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xret)) ((xdata)))) (((((xclient).xlogin_cram_md5)).apply ("tim") ("tanstaaftanstaaf"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) ("OK"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xAuthHandler)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("AUTH=CRAM-MD5") (((xclient).xcapabilities)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xret)) ((xdata)))) (((((xclient).xlogin_cram_md5)).apply ("tim") ("tanstaaftanstaaf"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) ("OK"))
                xtest_aborted_authentication.write
                  [xself]
                    memory > xcmd_AUTHENTICATE
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xcmd_AUTHENTICATE.write
                            [xself xtag xargs]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xself).x_send_textline)).apply ("+"))
                                  (((unsupported)).apply (((xself).xresponse)) ((((unsupported)).apply)))
                                  (((xself).xresponse).eq "*rn").if
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("NO") ("[AUTHENTICATIONFAILED] aborted"))
                                    bogusForceDataize.write ((((xself).x_send_tagged)).apply ((xtag)) ("OK") ("MYAUTH successful"))
                        (((unsupported)).apply (((((xself).xreaped_pair)).apply ((xMyServer)))) ((((unsupported)).apply ((xserver)) ((xclient)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xdata)))) (((((xclient).xauthenticate)).apply ("MYAUTH") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                xtest_linetoolong.write
                  [xself]
                    memory > xhandle
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleIMAPHandler)))
                          xhandle.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ((("* OK ".add (((ximaplib).x_MAXLINE).mul "x")).add "rn")))
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xTooLongHandler)))) ((xserver)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((((ximaplib).xIMAP4).xerror)) (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))))
                xtest_simple_with_statement.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                          (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))))
                xtest_with_statement.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                          seq
                            (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))) ((ximap)))
                              seq
                                bogusForceDataize.write ((((ximap).xlogin)).apply ("user") ("pass"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xlogged)) ("user"))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
                xtest_with_statement_logout.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                          seq
                            (((unsupported)).apply (((((xself).ximap_class)).apply ((((unsupported)).apply (((xserver).xserver_address)))))) ((ximap)))
                              seq
                                bogusForceDataize.write ((((ximap).xlogin)).apply ("user") ("pass"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xserver).xlogged)) ("user"))
                                bogusForceDataize.write ((((ximap).xlogout)).apply)
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xserver).xlogged)))
            (((unsupported)).apply ((xThreadedNetworkedTests)) (((((xunittest).xskipUnless)).apply ((xssl)) ("SSL not available"))))
              seq
                xserver_class.write (xSecureTCPServer)
                ximap_class.write (xIMAP4_SSL)
                xtest_ssl_verified.write
                  [xself]
                    memory > xssl_context
                    memory > xclient
                    seq > @
                      (((unsupported)).apply)
                        xssl_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xssl_context).xload_verify_locations)).apply ((xCAFILE)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("IP address mismatch, certificate is not valid for '127.0.0.1'"))))
                          (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                            seq
                              xclient.write (((unsupported)).apply (((xself).ximap_class)) ((((unsupported)).apply (((xserver).xserver_address)))) ((xssl_context)))
                              bogusForceDataize.write ((((xclient).xshutdown)).apply)
                        (((unsupported)).apply (((((xself).xreaped_server)).apply ((xSimpleIMAPHandler)))) ((xserver)))
                          seq
                            xclient.write (((unsupported)).apply (((xself).ximap_class)) ("localhost") ((((unsupported)).apply (((xserver).xserver_address)) (1))) ((xssl_context)))
                            bogusForceDataize.write ((((xclient).xshutdown)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply (((((xsupport).xis_resource_enabled)).apply ("network"))) ("network resource disabled"))) (((((xunittest).xskip)).apply ("cyrus.andrew.cmu.edu blocks connections"))))
              seq
                xhost.write "cyrus.andrew.cmu.edu"
                xport.write 143
                xusername.write "anonymous"
                xpassword.write "pass"
                ximap_class.write ((ximaplib).xIMAP4)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        (((unsupported)).apply (((xself).xserver)) (((((xself).ximap_class)).apply (((xself).xhost)) (((xself).xport)))))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                          bogusForceDataize.write (((((xself).xserver).xlogout)).apply)
                xtest_logincapa.write
                  [xself]
                    memory > xrs
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        seq
                          (((unsupported)).apply ((xcap)) ((((xself).xserver).xcapabilities)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcap)) ((xstr)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("LOGINDISABLED") ((((xself).xserver).xcapabilities)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("AUTH=ANONYMOUS") ((((xself).xserver).xcapabilities)))
                          xrs.write (((((xself).xserver).xlogin)).apply (((xself).xusername)) (((xself).xpassword)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xrs)) (0))) ("OK"))
                xtest_logout.write
                  [xself]
                    memory > xrs
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        seq
                          xrs.write (((((xself).xserver).xlogout)).apply)
                          (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xrs)) (0))) ("BYE") ((xrs)))
            (((unsupported)).apply ((xRemoteIMAPTest)) (((((xunittest).xskipUnless)).apply ((xssl)) ("SSL not available"))) (((((xunittest).xskipUnless)).apply (((((xsupport).xis_resource_enabled)).apply ("network"))) ("network resource disabled"))) (((((xunittest).xskip)).apply ("cyrus.andrew.cmu.edu blocks connections"))))
              seq
                xsetUp.write
                  [xself]
                    memory > xrs
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                          seq
                            xrs.write (((((xself).xserver).xstarttls)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xrs)) (0))) ("OK"))
                xtest_logincapa.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xcap)) ((((xself).xserver).xcapabilities)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcap)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("LOGINDISABLED") ((((xself).xserver).xcapabilities)))
            (((unsupported)).apply ((xRemoteIMAPTest)) (((((xunittest).xskipUnless)).apply ((xssl)) ("SSL not available"))) (((((xunittest).xskip)).apply ("cyrus.andrew.cmu.edu blocks connections"))))
              seq
                xport.write 993
                ximap_class.write (xIMAP4_SSL)
                xsetUp.write
                  [xself]
                    seq > @
                xtearDown.write
                  [xself]
                    seq > @
                xcreate_ssl_context.write
                  [xself]
                    memory > xssl_context
                    seq > @
                      seq
                        xssl_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xssl_context).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xssl_context).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xssl_context).xload_cert_chain)).apply ((xCERTFILE)))
                        (((unsupported)).apply ((xssl_context)))
                xcheck_logincapa.write
                  [xself xserver]
                    memory > xrs
                    seq > @
                      (((unsupported)).apply)
                        seq
                          (((unsupported)).apply ((xcap)) (((xserver).xcapabilities)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcap)) ((xstr)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("LOGINDISABLED") (((xserver).xcapabilities)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("AUTH=PLAIN") (((xserver).xcapabilities)))
                          xrs.write ((((xserver).xlogin)).apply (((xself).xusername)) (((xself).xpassword)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xrs)) (0))) ("OK"))
                        bogusForceDataize.write ((((xserver).xlogout)).apply)
                xtest_logincapa.write
                  [xself]
                    memory > x_server
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        seq
                          x_server.write ((((xself).ximap_class)).apply (((xself).xhost)) (((xself).xport)))
                          bogusForceDataize.write ((((xself).xcheck_logincapa)).apply ((x_server)))
                xtest_logout.write
                  [xself]
                    memory > xrs
                    memory > x_server
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        seq
                          x_server.write ((((xself).ximap_class)).apply (((xself).xhost)) (((xself).xport)))
                          xrs.write ((((x_server).xlogout)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xrs)) (0))) ("BYE") ((xrs)))
                xtest_ssl_context_certfile_exclusive.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xself).ximap_class)) (((xself).xhost)) (((xself).xport)) ((xCERTFILE)) (((((xself).xcreate_ssl_context)).apply)))
                xtest_ssl_context_keyfile_exclusive.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtransient_internet)).apply (((xself).xhost)))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xself).ximap_class)) (((xself).xhost)) (((xself).xport)) ((xCERTFILE)) (((((xself).xcreate_ssl_context)).apply)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)