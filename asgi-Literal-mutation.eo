memory > xThreadSensitiveContext
memory > xQueryDict
memory > xRequestAborted
memory > xHttpRequest
memory > xpart
memory > xtempfile
memory > xHttpResponseBadRequest
memory > xtraceback
memory > xFileResponse
memory > xerror_response
memory > xchunk
memory > xsignals
memory > xlogging
memory > xUnicodeDecodeError
memory > xc
memory > xrequest
memory > xValueError
memory > xstr
memory > xsync_to_async
memory > xASGIRequest
memory > x_
memory > xbase
memory > xHttpResponseServerError
memory > xHttpResponse
memory > xsettings
memory > xlast
memory > xException
memory > xhasattr
memory > xproperty
memory > xsuper
memory > xRequestDataTooBig
memory > xsys
memory > xset_script_prefix
memory > xbytes
memory > xparse_cookie
memory > xisinstance
memory > xlen
[] > asgi
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcreate_request
        memory > xget_script_prefix
        memory > xGET
        memory > xFILES
        memory > xchunk_bytes
        memory > x__init__
        memory > x_get_files
        memory > x__call__
        memory > xlogger
        memory > xbody_receive_timeout
        memory > xrequest_class
        memory > xsend_response
        memory > x_set_post
        memory > xhandle_uncaught_exception
        memory > xhandle
        memory > xread_body
        memory > xchunk_size
        memory > x_get_post
        memory > xCOOKIES
        memory > x_get_scheme
        memory > xPOST
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.request"))
            (((unsupported)).apply ((xHttpRequest)))
              seq
                (((unsupported)).apply)
                xbody_receive_timeout.write 60
                x__init__.write
                  [xself xscope xbody_file]
                    memory > xname
                    memory > xvalue
                    memory > xcorrected_name
                    memory > xquery_string
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xscope)) ((xscope)))
                        (((unsupported)).apply (((xself).x_post_parse_error)) (FALSE))
                        (((unsupported)).apply (((xself).x_read_started)) (FALSE))
                        (((unsupported)).apply (((xself).xresolver_match)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xscript_name)) ((((((xself).xscope).xget)).apply ("root_path") (""))))
                        (((xself).xscript_name).and ((((((unsupported)).apply ((xscope)) ("path")).xstartswith)).apply (((xself).xscript_name)))).if
                          (((unsupported)).apply (((xself).xpath_info)) ((((unsupported)).apply ((((unsupported)).apply ((xscope)) ("path"))) ((((unsupported)).apply ((((xlen)).apply (((xself).xscript_name)))))))))
                          (((unsupported)).apply (((xself).xpath_info)) ((((unsupported)).apply ((xscope)) ("path"))))
                        ((xself).xscript_name).if
                          (((unsupported)).apply (((xself).xpath)) (("%s/%s".mod (((unsupported)).apply ((((((xself).xscript_name).xrstrip)).apply ("/"))) ((((((xself).xpath_info).xreplace)).apply ("/") ("") (1)))))))
                          (((unsupported)).apply (((xself).xpath)) ((((unsupported)).apply ((xscope)) ("path"))))
                        (((unsupported)).apply (((xself).xmethod)) (((((((unsupported)).apply (((xself).xscope)) ("method")).xupper)).apply)))
                        xquery_string.write (((((xself).xscope).xget)).apply ("query_string") (""))
                        (((xisinstance)).apply ((xquery_string)) ((xbytes))).if
                          xquery_string.write ((((xquery_string).xdecode)).apply)
                        (((unsupported)).apply (((xself).xMETA)) ((((unsupported)).apply ("REQUEST_METHOD") (((xself).xmethod)) ("QUERY_STRING") ((xquery_string)) ("SCRIPT_NAME") (((xself).xscript_name)) ("PATH_INFO") (((xself).xpath_info)) ("wsgi.multithread") (TRUE) ("wsgi.multiprocess") (TRUE))))
                        (((((xself).xscope).xget)).apply ("client")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("REMOTE_ADDR"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xscope)) ("client"))) (0))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("REMOTE_HOST"))) ((((unsupported)).apply (((xself).xMETA)) ("REMOTE_ADDR"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("REMOTE_PORT"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xscope)) ("client"))) (1))))
                        (((((xself).xscope).xget)).apply ("server")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("SERVER_NAME"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xscope)) ("server"))) (0))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("SERVER_PORT"))) ((((xstr)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xscope)) ("server"))) (1))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("SERVER_NAME"))) ("unknown"))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("SERVER_PORT"))) ("0"))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) ((((((xself).xscope).xget)).apply ("headers") ((((unsupported)).apply)))))
                          seq
                            xname.write ((((xname).xdecode)).apply ("latin1"))
                            ((xname).eq "content-length").if
                              xcorrected_name.write "CONTENT_LENGTH"
                              ((xname).eq "content-type").if
                                xcorrected_name.write "CONTENT_TYPE"
                                xcorrected_name.write ("HTTP_%s".mod (((((((xname).xupper)).apply).xreplace)).apply ("-") ("_")))
                            xvalue.write ((((xvalue).xdecode)).apply ("latin1"))
                            (((unsupported)).apply ((xcorrected_name)) (((xself).xMETA))).if
                              xvalue.write (((((unsupported)).apply (((xself).xMETA)) ((xcorrected_name))).add ",").add (xvalue))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ((xcorrected_name)))) ((xvalue)))
                        bogusForceDataize.write ((((xself).x_set_content_type_params)).apply (((xself).xMETA)))
                        (((unsupported)).apply (((xself).x_stream)) ((xbody_file)))
                        (((unsupported)).apply (((xself).xresolver_match)) ("None: is there a None literal in the EO language?"))
                xGET.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xQueryDict)).apply ((((unsupported)).apply (((xself).xMETA)) ("QUERY_STRING"))))))
                x_get_scheme.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((((xself).xscope).xget)).apply ("scheme")).or ((((((xsuper)).apply).x_get_scheme)).apply))))
                x_get_post.write
                  [xself]
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("_post")).not).if
                          bogusForceDataize.write ((((xself).x_load_post_and_files)).apply)
                        (((unsupported)).apply (((xself).x_post)))
                x_set_post.write
                  [xself xpost]
                    seq > @
                      (((unsupported)).apply (((xself).x_post)) ((xpost)))
                x_get_files.write
                  [xself]
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("_files")).not).if
                          bogusForceDataize.write ((((xself).x_load_post_and_files)).apply)
                        (((unsupported)).apply (((xself).x_files)))
                xPOST.write (((xproperty)).apply ((x_get_post)) ((x_set_post)))
                xFILES.write (((xproperty)).apply ((x_get_files)))
                xCOOKIES.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xparse_cookie)).apply ((((((xself).xMETA).xget)).apply ("HTTP_COOKIE") (""))))))
            (((unsupported)).apply (((xbase).xBaseHandler)))
              seq
                unsupported
                xrequest_class.write (xASGIRequest)
                xchunk_size.write (((unsupported)).apply (2) (16))
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).xload_middleware)) (TRUE))
                x__call__.write
                  [xself xscope xreceive xsend]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((xscope)) ("type")).neq "http").if
                          (((unsupported)).apply ((((xValueError)).apply (("Django can only handle ASGI/HTTP connections, not %s.".mod (((unsupported)).apply ((xscope)) ("type")))))))
                        (((unsupported)).apply ((((xThreadSensitiveContext)).apply)))
                          (((unsupported)).apply (((((xself).xhandle)).apply ((xscope)) ((xreceive)) ((xsend)))))
                xhandle.write
                  [xself xscope xreceive xsend]
                    memory > xbody_file
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xRequestAborted)))
                          xbody_file.write (((unsupported)).apply (((((xself).xread_body)).apply ((xreceive)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write (((xset_script_prefix)).apply (((((xself).xget_script_prefix)).apply ((xscope)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsync_to_async)) ((((xsignals).xrequest_started).xsend)) (TRUE))) (((xself).x__class__)) ((xscope)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrequest)) ((xerror_response)))) (((((xself).xcreate_request)).apply ((xscope)) ((xbody_file)))))
                        (((unsupported)).apply ((xrequest)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((((xself).xsend_response)).apply ((xerror_response)) ((xsend)))))
                            (((unsupported)).apply)
                        xresponse.write (((unsupported)).apply (((((xself).xget_response_async)).apply ((xrequest)))))
                        (((unsupported)).apply (((xresponse).x_handler_class)) (((xself).x__class__)))
                        (((xisinstance)).apply ((xresponse)) ((xFileResponse))).if
                          (((unsupported)).apply (((xresponse).xblock_size)) (((xself).xchunk_size)))
                        (((unsupported)).apply (((((xself).xsend_response)).apply ((xresponse)) ((xsend)))))
                xread_body.write
                  [xself xreceive]
                    memory > xbody_file
                    memory > xmessage
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xbody_file.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (((xsettings).xFILE_UPLOAD_MAX_MEMORY_SIZE)) ("w+b"))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xmessage.write (((unsupported)).apply ((((xreceive)).apply)))
                                ((((unsupported)).apply ((xmessage)) ("type")).eq "http.disconnect").if
                                  (((unsupported)).apply ((((xRequestAborted)).apply)))
                                (((unsupported)).apply ("body") ((xmessage))).if
                                  bogusForceDataize.write ((((xbody_file).xwrite)).apply ((((unsupported)).apply ((xmessage)) ("body"))))
                                (((((xmessage).xget)).apply ("more_body") (FALSE)).not).if
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xbody_file).xseek)).apply (0))
                        (((unsupported)).apply ((xbody_file)))
                xcreate_request.write
                  [xself xscope xbody_file]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xUnicodeDecodeError)) ((xRequestDataTooBig)))
                          (((unsupported)).apply ((((unsupported)).apply (((((xself).xrequest_class)).apply ((xscope)) ((xbody_file)))) ("None: is there a None literal in the EO language?"))))
                          seq
                            (((unsupported)).apply (((xlogger).xwarning)) ("Bad Request (UnicodeDecodeError)") (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("status_code") (400))))
                            (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((xHttpResponseBadRequest)).apply)))))
                          (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xHttpResponse)) ("413 Payload too large") (413))))))
                xhandle_uncaught_exception.write
                  [xself xrequest xresolver xexc_info]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply (((((((xsuper)).apply).xhandle_uncaught_exception)).apply ((xrequest)) ((xresolver)) ((xexc_info)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xHttpResponseServerError)) ((((xsettings).xDEBUG).if ((((xtraceback).xformat_exc)).apply) "Internal Server Error")) ("text/plain"))))
                xsend_response.write
                  [xself xresponse xsend]
                    memory > xresponse_headers
                    memory > xvalue
                    memory > xheader
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xresponse_headers.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xheader)) ((xvalue)))) (((((xresponse).xitems)).apply)))
                          seq
                            (((xisinstance)).apply ((xheader)) ((xstr))).if
                              xheader.write ((((xheader).xencode)).apply ("ascii"))
                            (((xisinstance)).apply ((xvalue)) ((xstr))).if
                              xvalue.write ((((xvalue).xencode)).apply ("latin1"))
                            bogusForceDataize.write ((((xresponse_headers).xappend)).apply ((((unsupported)).apply ((((xbytes)).apply ((xheader)))) ((((xbytes)).apply ((xvalue)))))))
                        (((unsupported)).apply ((xc)) ((((((xresponse).xcookies).xvalues)).apply)))
                          bogusForceDataize.write ((((xresponse_headers).xappend)).apply ((((unsupported)).apply ("Set-Cookie") ((((((((((unsupported)).apply (((xc).xoutput)) ("")).xencode)).apply ("ascii")).xstrip)).apply)))))
                        (((unsupported)).apply ((((xsend)).apply ((((unsupported)).apply ("type") ("http.response.start") ("status") (((xresponse).xstatus_code)) ("headers") ((xresponse_headers)))))))
                        ((xresponse).xstreaming).if
                          seq
                            (((unsupported)).apply ((xpart)) ((xresponse)))
                              (((unsupported)).apply ((((unsupported)).apply ((xchunk)) ((x_)))) (((((xself).xchunk_bytes)).apply ((xpart)))))
                                (((unsupported)).apply ((((xsend)).apply ((((unsupported)).apply ("type") ("http.response.body") ("body") ((xchunk)) ("more_body") (TRUE))))))
                            (((unsupported)).apply ((((xsend)).apply ((((unsupported)).apply ("type") ("http.response.body"))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xchunk)) ((xlast)))) (((((xself).xchunk_bytes)).apply (((xresponse).xcontent)))))
                            (((unsupported)).apply ((((xsend)).apply ((((unsupported)).apply ("type") ("http.response.body") ("body") ((xchunk)) ("more_body") (((xlast).not)))))))
                        (((unsupported)).apply ((((((unsupported)).apply ((xsync_to_async)) (((xresponse).xclose)) (TRUE))).apply)))
                xchunk_bytes.write
                  [xcls xdata]
                    memory > xposition
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xposition.write 1
                        ((xdata).not).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdata)) (TRUE))))
                            (((unsupported)).apply)
                        while.
                          ((xposition).less (((xlen)).apply ((xdata))))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xposition)) (((xposition).add ((xcls).xchunk_size))))))) ((((xposition).add ((xcls).xchunk_size)).geq (((xlen)).apply ((xdata))))))))
                                (((unsupported)).apply ((xposition)) (((xcls).xchunk_size)))
                xget_script_prefix.write
                  [xself xscope]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xsettings).xFORCE_SCRIPT_NAME).if
                          (((unsupported)).apply (((xsettings).xFORCE_SCRIPT_NAME)))
                        (((unsupported)).apply ((((((xscope).xget)).apply ("root_path") ("")).or "")))