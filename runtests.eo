memory > xentries
memory > xoption
memory > xvalue
memory > xconnection
memory > xActionSelenium
memory > xbool
memory > xatexit
memory > xImproperlyConfigured
memory > xcopy
memory > xapp
memory > xImportError
memory > xget_max_test_processes
memory > xall
memory > xdjango
memory > xlist
memory > xRuntimeError
memory > xenumerate
memory > xbrowser
memory > xget_runner
memory > xResourceWarning
memory > xValueError
memory > xlabel_module
memory > xlabels
memory > xconn
memory > xlabel
memory > xwarnings
memory > xapps
memory > xSeleniumTestCaseBase
memory > xTestCase
memory > xsocket
memory > xparallel_type
memory > xtempfile
memory > xDEFAULT_LOGGING
memory > xRuntimeWarning
memory > xPath
memory > xprint
memory > xany
memory > xf
memory > xtest_module
memory > xset
memory > xsettings
memory > xint
memory > xException
memory > xconnections
memory > xhasattr
memory > xproperty
memory > xTransactionTestCase
memory > xi
memory > xRemovedInDjango50Warning
memory > xsys
memory > xDeprecationWarning
memory > xNullTimeKeeper
memory > xargparse
memory > xMySQLdb
memory > xgc
memory > xsubprocess
memory > xtest_modules
memory > xos
memory > xdirname
memory > xgetattr
memory > xmultiprocessing
memory > xopt_name
memory > xTimeKeeper
memory > xpartial
memory > xe
memory > x__file__
memory > xapp_config
memory > xsetattr
memory > xshutil
memory > x_init_worker
memory > xlen
memory > x_finalizer_registry
memory > xstate
memory > x__name__
memory > xkey
[] > runtests
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcollect_test_modules
        memory > xparser
        memory > xsetup_run_tests
        memory > xbisect_tests
        memory > xTEMPLATE_DIR
        memory > xget_test_modules
        memory > xALWAYS_MIDDLEWARE
        memory > xget_apps_to_install
        memory > x__call__
        memory > xget_installed
        memory > xget_label_module
        memory > xALWAYS_INSTALLED_APPS
        memory > xsetup_collect_tests
        memory > xCONTRIB_TESTS_TO_APPS
        memory > xRUNTESTS_DIR
        memory > xdjango_tests
        memory > xSUBDIRS_TO_SKIP
        memory > xopt_val
        memory > xtime_keeper
        memory > xpaired_tests
        memory > xteardown_run_tests
        memory > xteardown_collect_tests
        memory > xusing_selenium_hub
        memory > xget_subprocess_args
        memory > xget_filtered_test_modules
        memory > xTMPDIR
        memory > xenabled_module_options
        memory > xoptions
        memory > xmutually_exclusive_options
        memory > xfailures
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply ((((xRuntimeError)).apply ("Django module not found, reference tests/README.rst for instructions."))) ((xe)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("ignore") ("(1003, *") (((xMySQLdb).xWarning)))
            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xRemovedInDjango50Warning)))
            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xResourceWarning)))
            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xRuntimeWarning)))
            (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("ignore") ("'U' mode is deprecated") ((xDeprecationWarning)) ("docutils.io"))
            bogusForceDataize.write ((((xgc).xset_threshold)).apply (100000))
            xRUNTESTS_DIR.write (((((xos).xpath).xabspath)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))))
            xTEMPLATE_DIR.write (((((xos).xpath).xjoin)).apply ((xRUNTESTS_DIR)) ("templates"))
            xTMPDIR.write (((unsupported)).apply (((xtempfile).xmkdtemp)) ("django_"))
            (((unsupported)).apply (((xtempfile).xtempdir)) ((((unsupported)).apply (((xos).xenviron)) ("TMPDIR"))) ((xTMPDIR)))
            bogusForceDataize.write ((((xatexit).xregister)).apply (((xshutil).xrmtree)) ((xTMPDIR)))
            xSUBDIRS_TO_SKIP.write (((unsupported)).apply ("") ((((unsupported)).apply ("import_error_package") ("test_runner_apps"))) ("gis_tests") ((((unsupported)).apply ("data"))))
            xALWAYS_INSTALLED_APPS.write (((unsupported)).apply ("django.contrib.contenttypes") ("django.contrib.auth") ("django.contrib.sites") ("django.contrib.sessions") ("django.contrib.messages") ("django.contrib.admin.apps.SimpleAdminConfig") ("django.contrib.staticfiles"))
            xALWAYS_MIDDLEWARE.write (((unsupported)).apply ("django.contrib.sessions.middleware.SessionMiddleware") ("django.middleware.common.CommonMiddleware") ("django.middleware.csrf.CsrfViewMiddleware") ("django.contrib.auth.middleware.AuthenticationMiddleware") ("django.contrib.messages.middleware.MessageMiddleware"))
            xCONTRIB_TESTS_TO_APPS.write (((unsupported)).apply ("deprecation") ((((unsupported)).apply ("django.contrib.flatpages") ("django.contrib.redirects"))) ("flatpages_tests") ((((unsupported)).apply ("django.contrib.flatpages"))) ("redirects_tests") ((((unsupported)).apply ("django.contrib.redirects"))))
            xget_test_modules.write
              [xgis_enabled]
                memory > xdirpath
                memory > xdiscovery_dirs
                memory > xsubdirs_to_skip
                memory > xtest_module
                seq > @
                  seq
                    (((unsupported)).apply)
                    xdiscovery_dirs.write (((unsupported)).apply (""))
                    (xgis_enabled).if
                      bogusForceDataize.write ((((xdiscovery_dirs).xappend)).apply ("gis_tests"))
                      bogusForceDataize.write ((((((unsupported)).apply ((xSUBDIRS_TO_SKIP)) ("")).xadd)).apply ("gis_tests"))
                    (((unsupported)).apply ((xdirname)) ((xdiscovery_dirs)))
                      seq
                        xdirpath.write (((((xos).xpath).xjoin)).apply ((xRUNTESTS_DIR)) ((xdirname)))
                        xsubdirs_to_skip.write (((unsupported)).apply ((xSUBDIRS_TO_SKIP)) ((xdirname)))
                        (((unsupported)).apply (((((xos).xscandir)).apply ((xdirpath)))) ((xentries)))
                          (((unsupported)).apply ((xf)) ((xentries)))
                            seq
                              ((((((unsupported)).apply (".") (((xf).xname))).or (((unsupported)).apply ((((((xos).xpath).xbasename)).apply (((xf).xname)))) ((xsubdirs_to_skip)))).or ((((xf).xis_file)).apply)).or ((((((xos).xpath).xexists)).apply ((((((xos).xpath).xjoin)).apply (((xf).xpath)) ("__init__.py")))).not)).if
                                (((unsupported)).apply)
                              xtest_module.write ((xf).xname)
                              (xdirname).if
                                xtest_module.write (((xdirname).add ".").add (xtest_module))
                              (((unsupported)).apply ((xtest_module)))
            xget_label_module.write
              [xlabel]
                memory > xpath
                memory > xrel_path
                seq > @
                  seq
                    unsupported
                    xpath.write (((xPath)).apply ((xlabel)))
                    ((((xlen)).apply (((xpath).xparts))).eq 1).if
                      (((unsupported)).apply ((((unsupported)).apply (((((xlabel).xsplit)).apply ("."))) (0))))
                    (((((xpath).xexists)).apply).not).if
                      (((unsupported)).apply ((((xRuntimeError)).apply ("Test label path {label} does not exist"))))
                    xpath.write ((((xpath).xresolve)).apply)
                    xrel_path.write ((((xpath).xrelative_to)).apply ((xRUNTESTS_DIR)))
                    (((unsupported)).apply ((((unsupported)).apply (((xrel_path).xparts)) (0))))
            xget_filtered_test_modules.write
              [xstart_at xstart_after xgis_enabled xtest_labels]
                memory > x_module_match_label
                memory > xstart_label
                memory > xlabel_modules
                memory > xtest_module
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xtest_labels)) ("None: is there a None literal in the EO language?")).if
                      xtest_labels.write (((unsupported)).apply)
                    xlabel_modules.write (((xset)).apply)
                    (((unsupported)).apply ((xlabel)) ((xtest_labels)))
                      seq
                        xtest_module.write (((xget_label_module)).apply ((xlabel)))
                        bogusForceDataize.write ((((xlabel_modules).xadd)).apply ((xtest_module)))
                    ((((unsupported)).apply ("gis_tests") ((xlabel_modules))).and ((xgis_enabled).not)).if
                      seq
                        bogusForceDataize.write (((xprint)).apply ("Aborting: A GIS database backend is required to run gis_tests."))
                        bogusForceDataize.write ((((xsys).xexit)).apply (1))
                    x_module_match_label.write
                      [xmodule_name xlabel]
                        seq > @
                          (((unsupported)).apply ((((xmodule_name).eq (xlabel)).or ((((xmodule_name).xstartswith)).apply (((xlabel).add "."))))))
                    xstart_label.write ((xstart_at).or (xstart_after))
                    (((unsupported)).apply ((xtest_module)) ((((xget_test_modules)).apply ((xgis_enabled)))))
                      seq
                        (xstart_label).if
                          seq
                            ((((x_module_match_label)).apply ((xtest_module)) ((xstart_label))).not).if
                              (((unsupported)).apply)
                            xstart_label.write ""
                            ((xstart_at).not).if
                              seq
                                (((unsupported)).apply ((xstart_after)))
                                (((unsupported)).apply)
                        (((xtest_labels).not).or (((xany)).apply ((((unsupported)).apply ((((x_module_match_label)).apply ((xtest_module)) ((xlabel_module)))) ((xlabel_module)) ((xlabel_modules)))))).if
                          (((unsupported)).apply ((xtest_module)))
            xsetup_collect_tests.write
              [xstart_at xstart_after xtest_labels]
                memory > xstate
                memory > xtest_modules
                memory > xgis_enabled
                memory > xlog_config
                seq > @
                  (((unsupported)).apply)
                    xstate.write (((unsupported)).apply ("INSTALLED_APPS") (((xsettings).xINSTALLED_APPS)) ("ROOT_URLCONF") ((((xgetattr)).apply ((xsettings)) ("ROOT_URLCONF") (""))) ("TEMPLATES") (((xsettings).xTEMPLATES)) ("LANGUAGE_CODE") (((xsettings).xLANGUAGE_CODE)) ("STATIC_URL") (((xsettings).xSTATIC_URL)) ("STATIC_ROOT") (((xsettings).xSTATIC_ROOT)) ("MIDDLEWARE") (((xsettings).xMIDDLEWARE)))
                    (((unsupported)).apply (((xsettings).xINSTALLED_APPS)) ((xALWAYS_INSTALLED_APPS)))
                    (((unsupported)).apply (((xsettings).xROOT_URLCONF)) ("urls"))
                    (((unsupported)).apply (((xsettings).xSTATIC_URL)) ("static/"))
                    (((unsupported)).apply (((xsettings).xSTATIC_ROOT)) ((((((xos).xpath).xjoin)).apply ((xTMPDIR)) ("static"))))
                    (((unsupported)).apply (((xsettings).xTEMPLATES)) ((((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("DIRS") ((((unsupported)).apply ((xTEMPLATE_DIR)))) ("APP_DIRS") (TRUE) ("OPTIONS") ((((unsupported)).apply ("context_processors") ((((unsupported)).apply ("django.template.context_processors.debug") ("django.template.context_processors.request") ("django.contrib.auth.context_processors.auth") ("django.contrib.messages.context_processors.messages"))))))))))
                    (((unsupported)).apply (((xsettings).xLANGUAGE_CODE)) ("en"))
                    (((unsupported)).apply (((xsettings).xSITE_ID)) (1))
                    (((unsupported)).apply (((xsettings).xMIDDLEWARE)) ((xALWAYS_MIDDLEWARE)))
                    (((unsupported)).apply (((xsettings).xMIGRATION_MODULES)) ((((unsupported)).apply ("auth") ("None: is there a None literal in the EO language?") ("contenttypes") ("None: is there a None literal in the EO language?") ("sessions") ("None: is there a None literal in the EO language?"))))
                    xlog_config.write ((((xcopy).xdeepcopy)).apply ((xDEFAULT_LOGGING)))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlog_config)) ("loggers"))) ("django"))) ("level"))) ("ERROR"))
                    (((unsupported)).apply (((xsettings).xLOGGING)) ((xlog_config)))
                    (((unsupported)).apply (((xsettings).xSILENCED_SYSTEM_CHECKS)) ((((unsupported)).apply ("fields.W342"))))
                    bogusForceDataize.write ((((xdjango).xsetup)).apply)
                    xgis_enabled.write (((xconnection).xfeatures).xgis_enabled)
                    xtest_modules.write (((xlist)).apply ((((unsupported)).apply ((xget_filtered_test_modules)) ((xstart_at)) ((xstart_after)) ((xgis_enabled)) ((xtest_labels)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xtest_modules)) ((xstate)))))
            xteardown_collect_tests.write
              [xstate]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xstate).xitems)).apply)))
                    bogusForceDataize.write (((xsetattr)).apply ((xsettings)) ((xkey)) ((xvalue)))
            xget_installed.write
              []
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply (((xapp_config).xname)) ((xapp_config)) (((((xapps).xget_app_configs)).apply)))))
            xget_apps_to_install.write
              [xtest_modules]
                seq > @
                  seq
                    (((unsupported)).apply ((xtest_module)) ((xtest_modules)))
                      seq
                        (((unsupported)).apply ((xtest_module)) ((xCONTRIB_TESTS_TO_APPS))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xCONTRIB_TESTS_TO_APPS)) ((xtest_module)))))
                        (((unsupported)).apply ((xtest_module)))
                    (((xconnection).xfeatures).xgis_enabled).if
                      (((unsupported)).apply ("django.contrib.gis"))
            xsetup_run_tests.write
              [xverbosity xstart_at xstart_after xtest_labels]
                memory > xno_available_apps
                memory > xinstalled_apps
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xtest_modules)) ((xstate)))) ((((unsupported)).apply ((xsetup_collect_tests)) ((xstart_at)) ((xstart_after)) ((xtest_labels)))))
                    xinstalled_apps.write (((xset)).apply ((((xget_installed)).apply)))
                    (((unsupported)).apply ((xapp)) ((((xget_apps_to_install)).apply ((xtest_modules)))))
                      seq
                        (((unsupported)).apply ((xapp)) ((xinstalled_apps))).if
                          (((unsupported)).apply)
                        ((xverbosity).geq 2).if
                          bogusForceDataize.write (((xprint)).apply ("Importing application {app}"))
                        bogusForceDataize.write (((((xsettings).xINSTALLED_APPS).xappend)).apply ((xapp)))
                        bogusForceDataize.write ((((xinstalled_apps).xadd)).apply ((xapp)))
                    bogusForceDataize.write ((((xapps).xset_installed_apps)).apply (((xsettings).xINSTALLED_APPS)))
                    xno_available_apps.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ((((xException)).apply ("Please define available_apps in TransactionTestCase and its subclasses."))))
                    (((unsupported)).apply (((xTransactionTestCase).xavailable_apps)) ((((xproperty)).apply ((xno_available_apps)))))
                    (((unsupported)).apply (((xTestCase).xavailable_apps)) ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("RUNNING_DJANGOS_TEST_SUITE"))) ("true"))
                    xtest_labels.write ((xtest_labels).or (xtest_modules))
                    (((unsupported)).apply ((((unsupported)).apply ((xtest_labels)) ((xstate)))))
            xteardown_run_tests.write
              [xstate]
                seq > @
                  seq
                    bogusForceDataize.write (((xteardown_collect_tests)).apply ((xstate)))
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((x_finalizer_registry).xpop)).apply ((((unsupported)).apply ((100.neg)) (0))) ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("RUNNING_DJANGOS_TEST_SUITE"))))))
            (((unsupported)).apply (((xargparse).xAction)))
              seq
                (((unsupported)).apply)
                x__call__.write
                  [xself xparser xnamespace xvalues xoption_string]
                    memory > xbrowsers
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Error loading selenium module: {e}"))))
                        xbrowsers.write ((((xvalues).xsplit)).apply (","))
                        (((unsupported)).apply ((xbrowser)) ((xbrowsers)))
                          (((unsupported)).apply ((xImportError)))
                            bogusForceDataize.write ((((xSeleniumTestCaseBase).ximport_webdriver)).apply ((xbrowser)))
                            (((unsupported)).apply (((((xargparse).xArgumentError)).apply ((xself)) (("Selenium browser specification '%s' is not valid.".mod (xbrowser))))))
                        bogusForceDataize.write (((xsetattr)).apply ((xnamespace)) (((xself).xdest)) ((xbrowsers)))
            xdjango_tests.write
              [xverbosity xinteractive xfailfast xkeepdb xreverse xtest_labels xdebug_sql xparallel xtags xexclude_tags xtest_name_patterns xstart_at xstart_after xpdb xbuffer xtiming xshuffle]
                memory > xtest_runner
                memory > xTestRunner
                memory > xmsg
                memory > xmax_parallel
                memory > xprocess_setup_args
                memory > xfailures
                seq > @
                  seq
                    (((unsupported)).apply ((xparallel)) ((((unsupported)).apply (0) ("auto")))).if
                      xmax_parallel.write (((xget_max_test_processes)).apply)
                      xmax_parallel.write (xparallel)
                    ((xverbosity).geq 1).if
                      seq
                        xmsg.write ("Testing against Django installed in '%s'".mod (((((xos).xpath).xdirname)).apply (((xdjango).x__file__))))
                        ((xmax_parallel).greater 1).if
                          (((unsupported)).apply ((xmsg)) ((" with up to %d processes".mod (xmax_parallel))))
                        bogusForceDataize.write (((xprint)).apply ((xmsg)))
                    xprocess_setup_args.write (((unsupported)).apply ((xverbosity)) ((xstart_at)) ((xstart_after)) ((xtest_labels)))
                    (((unsupported)).apply ((((unsupported)).apply ((xtest_labels)) ((xstate)))) ((((xsetup_run_tests)).apply ((((unsupported)).apply ((xprocess_setup_args)))))))
                    ((((xhasattr)).apply ((xsettings)) ("TEST_RUNNER")).not).if
                      (((unsupported)).apply (((xsettings).xTEST_RUNNER)) ("django.test.runner.DiscoverRunner"))
                    (((unsupported)).apply ((xparallel)) ((((unsupported)).apply (0) ("auto")))).if
                      (((xall)).apply ((((unsupported)).apply ((((xconn).xfeatures).xcan_clone_databases)) ((xconn)) (((((xconnections).xall)).apply))))).if
                        xparallel.write (xmax_parallel)
                        xparallel.write 1
                    xTestRunner.write (((xget_runner)).apply ((xsettings)))
                    (((unsupported)).apply ((((xTestRunner).xparallel_test_suite).xinit_worker)) ((((unsupported)).apply ((xpartial)) ((x_init_worker)) ((xsetup_run_tests)) ((xprocess_setup_args)))))
                    xtest_runner.write (((unsupported)).apply ((xTestRunner)) ((xverbosity)) ((xinteractive)) ((xfailfast)) ((xkeepdb)) ((xreverse)) ((xdebug_sql)) ((xparallel)) ((xtags)) ((xexclude_tags)) ((xtest_name_patterns)) ((xpdb)) ((xbuffer)) ((xtiming)) ((xshuffle)))
                    xfailures.write ((((xtest_runner).xrun_tests)).apply ((xtest_labels)))
                    bogusForceDataize.write (((xteardown_run_tests)).apply ((xstate)))
                    (((unsupported)).apply ((xfailures)))
            xcollect_test_modules.write
              [xstart_at xstart_after]
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xtest_modules)) ((xstate)))) ((((xsetup_collect_tests)).apply ((xstart_at)) ((xstart_after)))))
                    bogusForceDataize.write (((xteardown_collect_tests)).apply ((xstate)))
                    (((unsupported)).apply ((xtest_modules)))
            xget_subprocess_args.write
              [xoptions]
                memory > xsubprocess_args
                seq > @
                  seq
                    xsubprocess_args.write (((unsupported)).apply (((xsys).xexecutable)) ((x__file__)) (("--settings=%s".mod ((xoptions).xsettings))))
                    ((xoptions).xfailfast).if
                      bogusForceDataize.write ((((xsubprocess_args).xappend)).apply ("--failfast"))
                    ((xoptions).xverbosity).if
                      bogusForceDataize.write ((((xsubprocess_args).xappend)).apply (("--verbosity=%s".mod ((xoptions).xverbosity))))
                    (((xoptions).xinteractive).not).if
                      bogusForceDataize.write ((((xsubprocess_args).xappend)).apply ("--noinput"))
                    ((xoptions).xtags).if
                      bogusForceDataize.write ((((xsubprocess_args).xappend)).apply (("--tag=%s".mod ((xoptions).xtags))))
                    ((xoptions).xexclude_tags).if
                      bogusForceDataize.write ((((xsubprocess_args).xappend)).apply (("--exclude_tag=%s".mod ((xoptions).xexclude_tags))))
                    (((unsupported)).apply (((xoptions).xshuffle)) (FALSE)).if
                      (((unsupported)).apply (((xoptions).xshuffle)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((xsubprocess_args).xappend)).apply ("--shuffle"))
                        bogusForceDataize.write ((((xsubprocess_args).xappend)).apply (("--shuffle=%s".mod ((xoptions).xshuffle))))
                    (((unsupported)).apply ((xsubprocess_args)))
            xbisect_tests.write
              [xbisection_label xoptions xtest_labels xstart_at xstart_after]
                memory > xiteration
                memory > xtest_labels_a
                memory > xfailures_a
                memory > xmidpoint
                memory > xsubprocess_args
                memory > xtest_labels_b
                memory > xfailures_b
                seq > @
                  seq
                    ((xtest_labels).not).if
                      xtest_labels.write (((xcollect_test_modules)).apply ((xstart_at)) ((xstart_after)))
                    bogusForceDataize.write (((xprint)).apply (("***** Bisecting test suite: %s".mod (((" ".xjoin)).apply ((xtest_labels))))))
                    (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ((xbisection_label)) ("model_inheritance_same_model_name"))))
                      (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xtest_labels).xremove)).apply ((xlabel)))
                    xsubprocess_args.write (((xget_subprocess_args)).apply ((xoptions)))
                    xiteration.write 1
                    while.
                      ((((xlen)).apply ((xtest_labels))).greater 1)
                      [unused]
                        seq > @
                          seq
                            xmidpoint.write (((unsupported)).apply ((((xlen)).apply ((xtest_labels)))) (2))
                            xtest_labels_a.write ((((unsupported)).apply ((xtest_labels)) ((((unsupported)).apply ((xmidpoint))))).add (((unsupported)).apply ((xbisection_label))))
                            xtest_labels_b.write ((((unsupported)).apply ((xtest_labels)) ((((unsupported)).apply ((xmidpoint))))).add (((unsupported)).apply ((xbisection_label))))
                            bogusForceDataize.write (((xprint)).apply (("***** Pass %da: Running the first half of the test suite".mod (xiteration))))
                            bogusForceDataize.write (((xprint)).apply (("***** Test labels: %s".mod (((" ".xjoin)).apply ((xtest_labels_a))))))
                            xfailures_a.write ((((xsubprocess).xrun)).apply (((xsubprocess_args).add (xtest_labels_a))))
                            bogusForceDataize.write (((xprint)).apply (("***** Pass %db: Running the second half of the test suite".mod (xiteration))))
                            bogusForceDataize.write (((xprint)).apply (("***** Test labels: %s".mod (((" ".xjoin)).apply ((xtest_labels_b))))))
                            bogusForceDataize.write (((xprint)).apply (""))
                            xfailures_b.write ((((xsubprocess).xrun)).apply (((xsubprocess_args).add (xtest_labels_b))))
                            (((xfailures_a).xreturncode).and (((xfailures_b).xreturncode).not)).if
                              seq
                                bogusForceDataize.write (((xprint)).apply ("***** Problem found in first half. Bisecting again..."))
                                (((unsupported)).apply ((xiteration)) (1))
                                xtest_labels.write (((unsupported)).apply ((xtest_labels_a)) ((((unsupported)).apply ((1.neg)))))
                              (((xfailures_b).xreturncode).and (((xfailures_a).xreturncode).not)).if
                                seq
                                  bogusForceDataize.write (((xprint)).apply ("***** Problem found in second half. Bisecting again..."))
                                  (((unsupported)).apply ((xiteration)) (1))
                                  xtest_labels.write (((unsupported)).apply ((xtest_labels_b)) ((((unsupported)).apply ((1.neg)))))
                                (((xfailures_a).xreturncode).and ((xfailures_b).xreturncode)).if
                                  seq
                                    bogusForceDataize.write (((xprint)).apply ("***** Multiple sources of failure found"))
                                    (((unsupported)).apply)
                                  seq
                                    bogusForceDataize.write (((xprint)).apply ("***** No source of failure found... try pair execution (--pair)"))
                                    (((unsupported)).apply)
                    ((((xlen)).apply ((xtest_labels))).eq 1).if
                      bogusForceDataize.write (((xprint)).apply (("***** Source of error: %s".mod (((unsupported)).apply ((xtest_labels)) (0)))))
            xpaired_tests.write
              [xpaired_test xoptions xtest_labels xstart_at xstart_after]
                memory > xsubprocess_args
                memory > xfailures
                seq > @
                  seq
                    ((xtest_labels).not).if
                      xtest_labels.write (((xcollect_test_modules)).apply ((xstart_at)) ((xstart_after)))
                    bogusForceDataize.write (((xprint)).apply ("***** Trying paired execution"))
                    (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ((xpaired_test)) ("model_inheritance_same_model_name"))))
                      (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xtest_labels).xremove)).apply ((xlabel)))
                    xsubprocess_args.write (((xget_subprocess_args)).apply ((xoptions)))
                    (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xlabel)))) ((((xenumerate)).apply ((xtest_labels)))))
                      seq
                        bogusForceDataize.write (((xprint)).apply (("***** %d of %d: Check test pairing with %s".mod (((unsupported)).apply (((xi).add 1)) ((((xlen)).apply ((xtest_labels)))) ((xlabel))))))
                        xfailures.write ((((xsubprocess).xcall)).apply (((xsubprocess_args).add (((unsupported)).apply ((xlabel)) ((xpaired_test))))))
                        (xfailures).if
                          seq
                            bogusForceDataize.write (((xprint)).apply (("***** Found problem pair with %s".mod (xlabel))))
                            (((unsupported)).apply)
                    bogusForceDataize.write (((xprint)).apply ("***** No problem pair found"))
            ((x__name__).eq "__main__").if
              seq
                xparser.write (((unsupported)).apply (((xargparse).xArgumentParser)) ("Run the Django test suite."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("modules") ("*") ("module") ("Optional path(s) to test modules; e.g. \"i18n\" or \"i18n.tests.TranslationTests.test_lazy_objects\"."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("-v") ("--verbosity") (1) ((xint)) ((((unsupported)).apply (0) (1) (2) (3))) ("Verbosity level; 0=minimal output, 1=normal output, 2=all output"))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--noinput") ("store_false") ("interactive") ("Tells Django to NOT prompt the user for input of any kind."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--failfast") ("store_true") ("Tells Django to stop running the test suite after first failed test."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--keepdb") ("store_true") ("Tells Django to preserve the test database between runs."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--settings") ("Python path to settings module, e.g. \"myproject.settings\". If this isn't provided, either the DJANGO_SETTINGS_MODULE environment variable or \"test_sqlite\" will be used."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--bisect") ("Bisect the test suite to discover a test that causes a test failure when combined with the named test."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--pair") ("Run the test suite in pairs with the named test to find problem pairs."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--shuffle") ("?") (FALSE) ((xint)) ("SEED") ("Shuffle the order of test cases to help check that tests are properly isolated."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--reverse") ("store_true") ("Sort test suites and test cases in opposite order to debug test side effects not apparent with normal execution lineup."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--selenium") ((xActionSelenium)) ("BROWSERS") ("A comma-separated list of browsers to run the Selenium tests against."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--headless") ("store_true") ("Run selenium tests in headless mode, if the browser supports the option."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--selenium-hub") ("A URL for a selenium hub instance to use in combination with --selenium."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--external-host") (((((xsocket).xgethostname)).apply)) ("The external host that can be reached by the selenium hub instance when running Selenium tests via Selenium Hub."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--debug-sql") ("store_true") ("Turn on the SQL query logger within tests."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--parallel") ("?") ("auto") (0) ((xparallel_type)) ("N") ("Run tests using up to N parallel processes. Use the value \"auto\" to run one test process for each processor core."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--tag") ("tags") ("append") ("Run only tests with the specified tags. Can be used multiple times."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--exclude-tag") ("exclude_tags") ("append") ("Do not run tests with the specified tag. Can be used multiple times."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--start-after") ("start_after") ("Run tests starting after the specified top-level module."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--start-at") ("start_at") ("Run tests starting at the specified top-level module."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--pdb") ("store_true") ("Runs the PDB debugger on error or failure."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("-b") ("--buffer") ("store_true") ("Discard output of passing tests."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("--timing") ("store_true") ("Output timings, including database set up and total run time."))
                (((unsupported)).apply (((xparser).xadd_argument)) ("-k") ("test_name_patterns") ("append") ("Only run test methods and classes matching test name pattern. Same as unittest -k option. Can be used multiple times."))
                xoptions.write ((((xparser).xparse_args)).apply)
                xusing_selenium_hub.write (((xoptions).xselenium).and ((xoptions).xselenium_hub))
                (((xoptions).xselenium_hub).and (((xoptions).xselenium).not)).if
                  bogusForceDataize.write ((((xparser).xerror)).apply ("--selenium-hub and --external-host require --selenium to be used."))
                ((xusing_selenium_hub).and (((xoptions).xexternal_host).not)).if
                  bogusForceDataize.write ((((xparser).xerror)).apply ("--selenium-hub and --external-host must be used together."))
                (((unsupported)).apply (((xoptions).xmodules)) ((((unsupported)).apply ((((((xos).xpath).xnormpath)).apply ((xlabels)))) ((xlabels)) (((xoptions).xmodules)))))
                xmutually_exclusive_options.write (((unsupported)).apply (((xoptions).xstart_at)) (((xoptions).xstart_after)) (((xoptions).xmodules)))
                xenabled_module_options.write ((((((unsupported)).apply ((((xbool)).apply ((xoption)))) ((xoption)) ((xmutually_exclusive_options))).xcount)).apply (TRUE))
                ((xenabled_module_options).greater 1).if
                  seq
                    bogusForceDataize.write (((xprint)).apply ("Aborting: --start-at, --start-after, and test labels are mutually exclusive."))
                    bogusForceDataize.write ((((xsys).xexit)).apply (1))
                (((unsupported)).apply ((xopt_name)) ((((unsupported)).apply ("start_at") ("start_after"))))
                  seq
                    xopt_val.write (((xgetattr)).apply ((xoptions)) ((xopt_name)))
                    (xopt_val).if
                      seq
                        (((unsupported)).apply (".") ((xopt_val))).if
                          seq
                            bogusForceDataize.write (((xprint)).apply (("Aborting: --%s must be a top-level module.".mod ((((xopt_name).xreplace)).apply ("_") ("-")))))
                            bogusForceDataize.write ((((xsys).xexit)).apply (1))
                        bogusForceDataize.write (((xsetattr)).apply ((xoptions)) ((xopt_name)) ((((((xos).xpath).xnormpath)).apply ((xopt_val)))))
                ((xoptions).xsettings).if
                  (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("DJANGO_SETTINGS_MODULE"))) (((xoptions).xsettings)))
                  seq
                    bogusForceDataize.write (((((xos).xenviron).xsetdefault)).apply ("DJANGO_SETTINGS_MODULE") ("test_sqlite"))
                    (((unsupported)).apply (((xoptions).xsettings)) ((((unsupported)).apply (((xos).xenviron)) ("DJANGO_SETTINGS_MODULE"))))
                ((xoptions).xselenium).if
                  seq
                    ((((((xmultiprocessing).xget_start_method)).apply).eq "spawn").and (((xoptions).xparallel).neq 1)).if
                      bogusForceDataize.write ((((xparser).xerror)).apply ("You cannot use --selenium with parallel tests on this system. Pass --parallel=1 to use --selenium."))
                    (((xoptions).xtags).not).if
                      (((unsupported)).apply (((xoptions).xtags)) ((((unsupported)).apply ("selenium"))))
                      (((unsupported)).apply ("selenium") (((xoptions).xtags))).if
                        bogusForceDataize.write (((((xoptions).xtags).xappend)).apply ("selenium"))
                    ((xoptions).xselenium_hub).if
                      seq
                        (((unsupported)).apply (((xSeleniumTestCaseBase).xselenium_hub)) (((xoptions).xselenium_hub)))
                        (((unsupported)).apply (((xSeleniumTestCaseBase).xexternal_host)) (((xoptions).xexternal_host)))
                    (((unsupported)).apply (((xSeleniumTestCaseBase).xheadless)) (((xoptions).xheadless)))
                    (((unsupported)).apply (((xSeleniumTestCaseBase).xbrowsers)) (((xoptions).xselenium)))
                ((xoptions).xbisect).if
                  bogusForceDataize.write (((xbisect_tests)).apply (((xoptions).xbisect)) ((xoptions)) (((xoptions).xmodules)) (((xoptions).xstart_at)) (((xoptions).xstart_after)))
                  ((xoptions).xpair).if
                    bogusForceDataize.write (((xpaired_tests)).apply (((xoptions).xpair)) ((xoptions)) (((xoptions).xmodules)) (((xoptions).xstart_at)) (((xoptions).xstart_after)))
                    seq
                      xtime_keeper.write (((xoptions).xtiming).if (((xTimeKeeper)).apply) (((xNullTimeKeeper)).apply))
                      (((unsupported)).apply (((((xtime_keeper).xtimed)).apply ("Total run"))))
                        xfailures.write (((xdjango_tests)).apply (((xoptions).xverbosity)) (((xoptions).xinteractive)) (((xoptions).xfailfast)) (((xoptions).xkeepdb)) (((xoptions).xreverse)) (((xoptions).xmodules)) (((xoptions).xdebug_sql)) (((xoptions).xparallel)) (((xoptions).xtags)) (((xoptions).xexclude_tags)) ((((xgetattr)).apply ((xoptions)) ("test_name_patterns") ("None: is there a None literal in the EO language?"))) (((xoptions).xstart_at)) (((xoptions).xstart_after)) (((xoptions).xpdb)) (((xoptions).xbuffer)) (((xoptions).xtiming)) (((xoptions).xshuffle)))
                      bogusForceDataize.write ((((xtime_keeper).xprint_results)).apply)
                      (xfailures).if
                        bogusForceDataize.write ((((xsys).xexit)).apply (1))