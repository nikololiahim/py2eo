memory > xapps
memory > xManager
memory > xb
memory > xStopIteration
memory > xot
memory > xi
memory > xOrderedSet
memory > xsorted
memory > xgetattr
memory > xobject
memory > xinspect
memory > xcamel_case_to_spaces
memory > xcopy
memory > xfield
memory > xImportError
memory > xUniqueConstraint
memory > xswapped_label
memory > xAttributeError
memory > xFieldDoesNotExist
memory > xOrderWrt
memory > xall
memory > xlist
memory > xdelattr
memory > xparent
memory > xenumerate
memory > xPathInfo
memory > xImmutableList
memory > xancestor
memory > xValueError
memory > xfrozenset
memory > ximport_string
memory > xstr
memory > xmanager
memory > xfld
memory > xswapped_object
memory > xKeyError
memory > xint_model
memory > xconnection
memory > xbase
memory > xany
memory > xtype
memory > xf
memory > xset
memory > xoverride
memory > xsettings
memory > xbisect
memory > xhasattr
memory > xproperty
memory > xcache_key
memory > xconnections
memory > xbool
memory > xissubclass
memory > xm
memory > xtuple
memory > xobj
memory > xdir
memory > xdefaultdict
memory > xconstraint
memory > xiter
memory > xe
memory > xfeat
memory > xattr_name
memory > xsetattr
memory > xname
memory > xAutoField
memory > xnext
memory > xImproperlyConfigured
memory > xmodel
memory > xisinstance
memory > xtruncate_name
memory > xformat_lazy
memory > xdepth
memory > xTypeError
memory > xEMPTY_RELATION_TREE
[] > options
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlabel_lower
        memory > xlabel
        memory > xget_base_chain
        memory > xget_fields
        memory > xsetup_proxy
        memory > xPROXY_PARENTS
        memory > x__init__
        memory > xapp_config
        memory > xsetup_pk
        memory > xget_parent_list
        memory > xget_ancestor_link
        memory > x_property_names
        memory > x_expire_cache
        memory > xadd_field
        memory > xconcrete_fields
        memory > x__str__
        memory > xverbose_name_raw
        memory > xcontribute_to_class
        memory > xget_field
        memory > xget_path_to_parent
        memory > x__repr__
        memory > x_get_fields
        memory > xbase_manager
        memory > xdefault_apps
        memory > xmanagers_map
        memory > xcan_migrate
        memory > x_populate_directed_relation_graph
        memory > x_prepare
        memory > xfields
        memory > x_relation_tree
        memory > xIMMUTABLE_WARNING
        memory > xrelated_objects
        memory > xadd_manager
        memory > xlocal_concrete_fields
        memory > x_get_default_pk_class
        memory > xmany_to_many
        memory > xFORWARD_PROPERTIES
        memory > xdefault_manager
        memory > xnormalize_together
        memory > xDEFAULT_NAMES
        memory > x_forward_fields_map
        memory > xfields_map
        memory > x_format_names_with_class
        memory > xmake_immutable_fields_list
        memory > xmanagers
        memory > xREVERSE_PROPERTIES
        memory > xget_path_from_parent
        memory > xdb_returning_fields
        memory > xtotal_unique_constraints
        memory > xswapped
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xPROXY_PARENTS.write (xobject)
            seq
            seq
            xIMMUTABLE_WARNING.write "The return type of '%s' should never be mutated. If you want to manipulate this list for your own use, make a copy first."
            xDEFAULT_NAMES.write (((unsupported)).apply ("verbose_name") ("verbose_name_plural") ("db_table") ("ordering") ("unique_together") ("permissions") ("get_latest_by") ("order_with_respect_to") ("app_label") ("db_tablespace") ("abstract") ("managed") ("proxy") ("swappable") ("auto_created") ("index_together") ("apps") ("default_permissions") ("select_on_save") ("default_related_name") ("required_db_features") ("required_db_vendor") ("base_manager_name") ("default_manager_name") ("indexes") ("constraints"))
            xnormalize_together.write
              [xoption_together]
                memory > xfirst_element
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xTypeError)))
                      seq
                        ((xoption_together).not).if
                          (((unsupported)).apply)
                        ((((xisinstance)).apply ((xoption_together)) ((((unsupported)).apply ((xtuple)) ((xlist))))).not).if
                          (((unsupported)).apply ((xTypeError)))
                        xfirst_element.write (((unsupported)).apply ((xoption_together)) (0))
                        ((((xisinstance)).apply ((xfirst_element)) ((((unsupported)).apply ((xtuple)) ((xlist))))).not).if
                          xoption_together.write (((unsupported)).apply ((xoption_together)))
                        (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xtuple)).apply ((xot)))) ((xot)) ((xoption_together)))))))
                      (((unsupported)).apply ((xoption_together)))
            xmake_immutable_fields_list.write
              [xname xdata]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xImmutableList)) ((xdata)) (((xIMMUTABLE_WARNING).mod (xname))))))
            (((unsupported)).apply)
              seq
                xFORWARD_PROPERTIES.write (((unsupported)).apply ("fields") ("many_to_many") ("concrete_fields") ("local_concrete_fields") ("_forward_fields_map") ("managers") ("managers_map") ("base_manager") ("default_manager"))
                xREVERSE_PROPERTIES.write (((unsupported)).apply ("related_objects") ("fields_map") ("_relation_tree"))
                xdefault_apps.write (xapps)
                x__init__.write
                  [xself xmeta xapp_label]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_get_fields_cache)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xlocal_fields)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xlocal_many_to_many)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xprivate_fields)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xlocal_managers)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xbase_manager_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xdefault_manager_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xmodel_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xverbose_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xverbose_name_plural)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xdb_table)) (""))
                        (((unsupported)).apply (((xself).xordering)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_ordering_clash)) (FALSE))
                        (((unsupported)).apply (((xself).xindexes)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xconstraints)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xunique_together)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xindex_together)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xselect_on_save)) (FALSE))
                        (((unsupported)).apply (((xself).xdefault_permissions)) ((((unsupported)).apply ("add") ("change") ("delete") ("view"))))
                        (((unsupported)).apply (((xself).xpermissions)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xobject_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xapp_label)) ((xapp_label)))
                        (((unsupported)).apply (((xself).xget_latest_by)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xorder_with_respect_to)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xdb_tablespace)) (((xsettings).xDEFAULT_TABLESPACE)))
                        (((unsupported)).apply (((xself).xrequired_db_features)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xrequired_db_vendor)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xmeta)) ((xmeta)))
                        (((unsupported)).apply (((xself).xpk)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xauto_field)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xabstract)) (FALSE))
                        (((unsupported)).apply (((xself).xmanaged)) (TRUE))
                        (((unsupported)).apply (((xself).xproxy)) (FALSE))
                        (((unsupported)).apply (((xself).xproxy_for_model)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xconcrete_model)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xswappable)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xparents)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xauto_created)) (FALSE))
                        (((unsupported)).apply (((xself).xrelated_fkey_lookups)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xapps)) (((xself).xdefault_apps)))
                        (((unsupported)).apply (((xself).xdefault_related_name)) ("None: is there a None literal in the EO language?"))
                xlabel.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s.%s".mod (((unsupported)).apply (((xself).xapp_label)) (((xself).xobject_name))))))
                xlabel_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s.%s".mod (((unsupported)).apply (((xself).xapp_label)) (((xself).xmodel_name))))))
                xapp_config.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xself).xapps).xapp_configs).xget)).apply (((xself).xapp_label)))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    memory > xobjs
                    memory > xmeta_attrs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).x_meta)) ((xself)))
                        (((unsupported)).apply (((xself).xmodel)) ((xcls)))
                        (((unsupported)).apply (((xself).xobject_name)) (((xcls).x__name__)))
                        (((unsupported)).apply (((xself).xmodel_name)) ((((xself).xobject_name).xlower)))
                        (((unsupported)).apply (((xself).xverbose_name)) ((((xcamel_case_to_spaces)).apply (((xself).xobject_name)))))
                        (((unsupported)).apply (((xself).xoriginal_attrs)) ((((unsupported)).apply)))
                        ((xself).xmeta).if
                          seq
                            xmeta_attrs.write ((((xself).xmeta).x__dict__).xcopy)
                            (((unsupported)).apply ((xname)) ((((xself).xmeta).x__dict__)))
                              ((((xname).xstartswith)).apply ("_")).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xmeta_attrs)) ((xname)))))))
                            (((unsupported)).apply ((xattr_name)) ((xDEFAULT_NAMES)))
                              (((unsupported)).apply ((xattr_name)) ((xmeta_attrs))).if
                                seq
                                  bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xattr_name)) (((((xmeta_attrs).xpop)).apply ((xattr_name)))))
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xoriginal_attrs)) ((xattr_name)))) ((((xgetattr)).apply ((xself)) ((xattr_name)))))
                                (((xhasattr)).apply (((xself).xmeta)) ((xattr_name))).if
                                  seq
                                    bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xattr_name)) ((((xgetattr)).apply (((xself).xmeta)) ((xattr_name)))))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xoriginal_attrs)) ((xattr_name)))) ((((xgetattr)).apply ((xself)) ((xattr_name)))))
                            (((unsupported)).apply (((xself).xunique_together)) ((((xnormalize_together)).apply (((xself).xunique_together)))))
                            (((unsupported)).apply (((xself).xindex_together)) ((((xnormalize_together)).apply (((xself).xindex_together)))))
                            ((((xgetattr)).apply (((xcls).x_meta)) ("abstract") (FALSE)).not).if
                              (((unsupported)).apply ((xattr_name)) ((((unsupported)).apply ("constraints") ("indexes"))))
                                seq
                                  xobjs.write (((xgetattr)).apply ((xself)) ((xattr_name)) ((((unsupported)).apply)))
                                  bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xattr_name)) (((((xself).x_format_names_with_class)).apply ((xcls)) ((xobjs)))))
                            (((unsupported)).apply (((xself).xverbose_name_plural)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply (((xself).xverbose_name_plural)) ((((xformat_lazy)).apply ("{}s") (((xself).xverbose_name)))))
                            (((unsupported)).apply (((xself).x_ordering_clash)) ((((xbool)).apply ((((xself).xordering).and ((xself).xorder_with_respect_to))))))
                            ((xmeta_attrs).neq (((unsupported)).apply)).if
                              (((unsupported)).apply ((((xTypeError)).apply (("'class Meta' got invalid attribute(s): %s".mod (((",".xjoin)).apply ((xmeta_attrs))))))))
                          (((unsupported)).apply (((xself).xverbose_name_plural)) ((((xformat_lazy)).apply ("{}s") (((xself).xverbose_name)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmeta)))))
                        (((xself).xdb_table).not).if
                          seq
                            (((unsupported)).apply (((xself).xdb_table)) (("%s_%s".mod (((unsupported)).apply (((xself).xapp_label)) (((xself).xmodel_name))))))
                            (((unsupported)).apply (((xself).xdb_table)) ((((xtruncate_name)).apply (((xself).xdb_table)) ((((xconnection).xops).xmax_name_length)))))
                x_format_names_with_class.write
                  [xself xcls xobjs]
                    memory > xnew_objs
                    memory > xobj
                    seq > @
                      seq
                        unsupported
                        xnew_objs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xobj)) ((xobjs)))
                          seq
                            xobj.write ((xobj).xclone)
                            (((unsupported)).apply (((xobj).xname)) ((((xobj).xname).mod (((unsupported)).apply ("app_label") (((((xcls).x_meta).xapp_label).xlower)) ("class") ((((xcls).x__name__).xlower))))))
                            bogusForceDataize.write ((((xnew_objs).xappend)).apply ((xobj)))
                        (((unsupported)).apply ((xnew_objs)))
                x_get_default_pk_class.write
                  [xself]
                    memory > xapp_config_class
                    memory > xmsg
                    memory > xsource
                    memory > xpk_class
                    memory > xpk_class_path
                    seq > @
                      seq
                        xpk_class_path.write (((xgetattr)).apply (((xself).xapp_config)) ("default_auto_field") (((xsettings).xDEFAULT_AUTO_FIELD)))
                        (((xself).xapp_config).and (((xself).xapp_config).x_is_default_auto_field_overridden)).if
                          seq
                            xapp_config_class.write (((xtype)).apply (((xself).xapp_config)))
                            xsource.write "{app_config_class.__module__}.{app_config_class.__qualname__}.default_auto_field"
                          xsource.write "DEFAULT_AUTO_FIELD"
                        ((xpk_class_path).not).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply ("{source} must not be empty."))))
                        (((unsupported)).apply ((xImportError)))
                          xpk_class.write (((ximport_string)).apply ((xpk_class_path)))
                          seq
                            xmsg.write "{source} refers to the module '{pk_class_path}' that could not be imported."
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ((xmsg)))) ((xe)))
                        ((((xissubclass)).apply ((xpk_class)) ((xAutoField))).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Primary key '{pk_class_path}' referred by {source} must subclass AutoField."))))
                        (((unsupported)).apply ((xpk_class)))
                x_prepare.write
                  [xself xmodel]
                    memory > xfield
                    memory > xpk_class
                    memory > xalready_created
                    memory > xquery
                    memory > xauto
                    seq > @
                      seq
                        ((xself).xorder_with_respect_to).if
                          seq
                            xquery.write ((xself).xorder_with_respect_to)
                            (((unsupported)).apply ((xStopIteration)))
                              (((unsupported)).apply (((xself).xorder_with_respect_to)) ((((xnext)).apply ((((unsupported)).apply ((xf)) ((xf)) ((((unsupported)).apply (((xself).x_get_fields)) (FALSE))) (((((xf).xname).eq (xquery)).or (((xf).xattname).eq (xquery)))))))))
                              (((unsupported)).apply ((((xFieldDoesNotExist)).apply (("%s has no field named '%s'".mod (((unsupported)).apply (((xself).xobject_name)) ((xquery))))))))
                            (((unsupported)).apply (((xself).xordering)) ((((unsupported)).apply ("_order"))))
                            ((((xany)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xfield)) ((xOrderWrt)))) ((xfield)) ((((xmodel).x_meta).xlocal_fields))))).not).if
                              bogusForceDataize.write ((((xmodel).xadd_to_class)).apply ("_order") ((xOrderWrt)))
                          (((unsupported)).apply (((xself).xorder_with_respect_to)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xpk)) ("None: is there a None literal in the EO language?")).if
                          ((xself).xparents).if
                            seq
                              xfield.write (((xnext)).apply ((((xiter)).apply ((((xself).xparents).xvalues)))))
                              xalready_created.write (((unsupported)).apply ((xfld)) ((xfld)) (((xself).xlocal_fields)) ((((xfld).xname).eq ((xfield).xname))))
                              (xalready_created).if
                                xfield.write (((unsupported)).apply ((xalready_created)) (0))
                              (((unsupported)).apply (((xfield).xprimary_key)) (TRUE))
                              bogusForceDataize.write ((((xself).xsetup_pk)).apply ((xfield)))
                            seq
                              xpk_class.write ((xself).x_get_default_pk_class)
                              xauto.write (((unsupported)).apply ((xpk_class)) ("ID") (TRUE) (TRUE))
                              bogusForceDataize.write ((((xmodel).xadd_to_class)).apply ("id") ((xauto)))
                xadd_manager.write
                  [xself xmanager]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xlocal_managers).xappend)).apply ((xmanager)))
                        unsupported
                xadd_field.write
                  [xself xfield xprivate]
                    seq > @
                      (((unsupported)).apply)
                        (xprivate).if
                          bogusForceDataize.write (((((xself).xprivate_fields).xappend)).apply ((xfield)))
                          (((xfield).xis_relation).and ((xfield).xmany_to_many)).if
                            bogusForceDataize.write ((((xbisect).xinsort)).apply (((xself).xlocal_many_to_many)) ((xfield)))
                            seq
                              bogusForceDataize.write ((((xbisect).xinsort)).apply (((xself).xlocal_fields)) ((xfield)))
                              bogusForceDataize.write ((((xself).xsetup_pk)).apply ((xfield)))
                        ((((xfield).xis_relation).and (((xhasattr)).apply (((xfield).xremote_field)) ("model"))).and (((xfield).xremote_field).xmodel)).if
                          seq
                            (((unsupported)).apply ((xAttributeError)))
                              (((unsupported)).apply ((((((xfield).xremote_field).xmodel).x_meta).x_expire_cache)) (FALSE))
                            unsupported
                          (((unsupported)).apply (((xself).x_expire_cache)) (FALSE))
                xsetup_pk.write
                  [xself xfield]
                    seq > @
                      ((((xself).xpk).not).and ((xfield).xprimary_key)).if
                        seq
                          (((unsupported)).apply (((xself).xpk)) ((xfield)))
                          (((unsupported)).apply (((xfield).xserialize)) (FALSE))
                xsetup_proxy.write
                  [xself xtarget]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpk)) ((((xtarget).x_meta).xpk)))
                        (((unsupported)).apply (((xself).xproxy_for_model)) ((xtarget)))
                        (((unsupported)).apply (((xself).xdb_table)) ((((xtarget).x_meta).xdb_table)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<Options for %s>".mod ((xself).xobject_name))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xlabel_lower)))
                xcan_migrate.write
                  [xself xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xself).xproxy).or ((xself).xswapped)).or (((xself).xmanaged).not)).if
                          (((unsupported)).apply (FALSE))
                        (((xisinstance)).apply ((xconnection)) ((xstr))).if
                          xconnection.write (((unsupported)).apply ((xconnections)) ((xconnection)))
                        ((xself).xrequired_db_vendor).if
                          (((unsupported)).apply ((((xself).xrequired_db_vendor).eq ((xconnection).xvendor))))
                        ((xself).xrequired_db_features).if
                          (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply ((((xgetattr)).apply (((xconnection).xfeatures)) ((xfeat)) (FALSE))) ((xfeat)) (((xself).xrequired_db_features)))))))
                        (((unsupported)).apply (TRUE))
                xverbose_name_raw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xoverride)).apply ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply ((((xstr)).apply (((xself).xverbose_name)))))
                xswapped.write
                  [xself]
                    memory > xswapped_for
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xself).xswappable).if
                          seq
                            xswapped_for.write (((xgetattr)).apply ((xsettings)) (((xself).xswappable)) ("None: is there a None literal in the EO language?"))
                            (xswapped_for).if
                              seq
                                (((unsupported)).apply ((xValueError)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xswapped_label)) ((xswapped_object)))) (((((xswapped_for).xsplit)).apply ("."))))
                                  (((unsupported)).apply ((xswapped_for)))
                                (("%s.%s".mod (((unsupported)).apply ((xswapped_label)) (((xswapped_object).xlower)))).neq ((xself).xlabel_lower)).if
                                  (((unsupported)).apply ((xswapped_for)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xmanagers.write
                  [xself]
                    memory > xseen_managers
                    memory > xbases
                    memory > xmanagers
                    memory > xmanager
                    seq > @
                      (((unsupported)).apply)
                        xmanagers.write (((unsupported)).apply)
                        xseen_managers.write (xset)
                        xbases.write (((unsupported)).apply ((xb)) ((xb)) ((((xself).xmodel).xmro)) ((((xhasattr)).apply ((xb)) ("_meta"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdepth)) ((xbase)))) ((((xenumerate)).apply ((xbases)))))
                          (((unsupported)).apply ((xmanager)) ((((xbase).x_meta).xlocal_managers)))
                            seq
                              (((unsupported)).apply (((xmanager).xname)) ((xseen_managers))).if
                                (((unsupported)).apply)
                              xmanager.write ((((xcopy).xcopy)).apply ((xmanager)))
                              (((unsupported)).apply (((xmanager).xmodel)) (((xself).xmodel)))
                              bogusForceDataize.write ((((xseen_managers).xadd)).apply (((xmanager).xname)))
                              bogusForceDataize.write ((((xmanagers).xappend)).apply ((((unsupported)).apply ((xdepth)) (((xmanager).xcreation_counter)) ((xmanager)))))
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("managers") ((((unsupported)).apply ((((unsupported)).apply ((xm)) (2))) ((xm)) ((((xsorted)).apply ((xmanagers)))))))))
                xmanagers_map.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xmanager).xname)) ((xmanager)) ((xmanager)) (((xself).xmanagers)))))
                xbase_manager.write
                  [xself]
                    memory > xmanager
                    memory > xbase_manager_name
                    seq > @
                      (((unsupported)).apply)
                        xbase_manager_name.write ((xself).xbase_manager_name)
                        ((xbase_manager_name).not).if
                          (((unsupported)).apply ((xparent)) ((((unsupported)).apply ((((xself).xmodel).xmro)) ((((unsupported)).apply (1))))))
                            (((xhasattr)).apply ((xparent)) ("_meta")).if
                              seq
                                ((((xparent).x_base_manager).xname).neq "_base_manager").if
                                  xbase_manager_name.write (((xparent).x_base_manager).xname)
                                (((unsupported)).apply)
                        (xbase_manager_name).if
                          (((unsupported)).apply ((xKeyError)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xmanagers_map)) ((xbase_manager_name)))))
                            (((unsupported)).apply ((((xValueError)).apply (("%s has no manager named %r".mod (((unsupported)).apply (((xself).xobject_name)) ((xbase_manager_name))))))))
                        xmanager.write (xManager)
                        (((unsupported)).apply (((xmanager).xname)) ("_base_manager"))
                        (((unsupported)).apply (((xmanager).xmodel)) (((xself).xmodel)))
                        (((unsupported)).apply (((xmanager).xauto_created)) (TRUE))
                        (((unsupported)).apply ((xmanager)))
                xdefault_manager.write
                  [xself]
                    memory > xdefault_manager_name
                    seq > @
                      (((unsupported)).apply)
                        xdefault_manager_name.write ((xself).xdefault_manager_name)
                        (((xdefault_manager_name).not).and (((xself).xlocal_managers).not)).if
                          (((unsupported)).apply ((xparent)) ((((unsupported)).apply ((((xself).xmodel).xmro)) ((((unsupported)).apply (1))))))
                            (((xhasattr)).apply ((xparent)) ("_meta")).if
                              seq
                                xdefault_manager_name.write (((xparent).x_meta).xdefault_manager_name)
                                (((unsupported)).apply)
                        (xdefault_manager_name).if
                          (((unsupported)).apply ((xKeyError)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xmanagers_map)) ((xdefault_manager_name)))))
                            (((unsupported)).apply ((((xValueError)).apply (("%s has no manager named %r".mod (((unsupported)).apply (((xself).xobject_name)) ((xdefault_manager_name))))))))
                        ((xself).xmanagers).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xmanagers)) (0))))
                xfields.write
                  [xself]
                    memory > xis_not_an_m2m_field
                    memory > xis_not_a_generic_foreign_key
                    memory > xis_not_a_generic_relation
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xis_not_an_m2m_field.write
                          [xf]
                            seq > @
                              (((unsupported)).apply (((((xf).xis_relation).and ((xf).xmany_to_many)).not)))
                        xis_not_a_generic_relation.write
                          [xf]
                            seq > @
                              (((unsupported)).apply (((((xf).xis_relation).and ((xf).xone_to_many)).not)))
                        xis_not_a_generic_foreign_key.write
                          [xf]
                            seq > @
                              (((unsupported)).apply ((((((xf).xis_relation).and ((xf).xmany_to_one)).and (((((xhasattr)).apply (((xf).xremote_field)) ("model")).and (((xf).xremote_field).xmodel)).not)).not)))
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("fields") ((((unsupported)).apply ((xf)) ((xf)) ((((unsupported)).apply (((xself).x_get_fields)) (FALSE))) ((((((xis_not_an_m2m_field)).apply ((xf))).and (((xis_not_a_generic_relation)).apply ((xf)))).and (((xis_not_a_generic_foreign_key)).apply ((xf))))))))))
                xconcrete_fields.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("concrete_fields") ((((unsupported)).apply ((xf)) ((xf)) (((xself).xfields)) (((xf).xconcrete)))))))
                xlocal_concrete_fields.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("local_concrete_fields") ((((unsupported)).apply ((xf)) ((xf)) (((xself).xlocal_fields)) (((xf).xconcrete)))))))
                xmany_to_many.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("many_to_many") ((((unsupported)).apply ((xf)) ((xf)) ((((unsupported)).apply (((xself).x_get_fields)) (FALSE))) ((((xf).xis_relation).and ((xf).xmany_to_many))))))))
                xrelated_objects.write
                  [xself]
                    memory > xall_related_fields
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xall_related_fields.write (((unsupported)).apply (((xself).x_get_fields)) (FALSE) (TRUE) (TRUE))
                        (((unsupported)).apply ((((xmake_immutable_fields_list)).apply ("related_objects") ((((unsupported)).apply ((xobj)) ((xobj)) ((xall_related_fields)) (((((xobj).xhidden).not).or (((xobj).xfield).xmany_to_many))))))))
                x_forward_fields_map.write
                  [xself]
                    memory > xres
                    memory > xfields
                    seq > @
                      (((unsupported)).apply)
                        xres.write (((unsupported)).apply)
                        xfields.write (((unsupported)).apply (((xself).x_get_fields)) (FALSE))
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xres)) (((xfield).xname)))) ((xfield)))
                            (((unsupported)).apply ((xAttributeError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xres)) (((xfield).xattname)))) ((xfield)))
                        (((unsupported)).apply ((xres)))
                xfields_map.write
                  [xself]
                    memory > xres
                    memory > xfields
                    seq > @
                      (((unsupported)).apply)
                        xres.write (((unsupported)).apply)
                        xfields.write (((unsupported)).apply (((xself).x_get_fields)) (FALSE) (TRUE))
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xres)) (((xfield).xname)))) ((xfield)))
                            (((unsupported)).apply ((xAttributeError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xres)) (((xfield).xattname)))) ((xfield)))
                        (((unsupported)).apply ((xres)))
                xget_field.write
                  [xself xfield_name]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_forward_fields_map)) ((xfield_name)))))
                          ((((xself).xapps).xmodels_ready).not).if
                            (((unsupported)).apply ((((xFieldDoesNotExist)).apply (("%s has no field named '%s'. The app cache isn't ready yet, so if this is an auto-created related field, it won't be available yet.".mod (((unsupported)).apply (((xself).xobject_name)) ((xfield_name))))))))
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xfields_map)) ((xfield_name)))))
                          (((unsupported)).apply ((((xFieldDoesNotExist)).apply (("%s has no field named '%s'".mod (((unsupported)).apply (((xself).xobject_name)) ((xfield_name))))))))
                xget_base_chain.write
                  [xself xmodel]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xparents).not).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xmodel)) (((xself).xparents))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xmodel)))))
                        (((unsupported)).apply ((xparent)) (((xself).xparents)))
                          seq
                            xres.write (((((xparent).x_meta).xget_base_chain)).apply ((xmodel)))
                            (xres).if
                              seq
                                bogusForceDataize.write ((((xres).xinsert)).apply (0) ((xparent)))
                                (((unsupported)).apply ((xres)))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xget_parent_list.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((xOrderedSet)).apply (((xself).xparents)))
                        (((unsupported)).apply ((xparent)) (((xself).xparents)))
                          (((unsupported)).apply ((xancestor)) ((((xparent).x_meta).xget_parent_list)))
                            bogusForceDataize.write ((((xresult).xadd)).apply ((xancestor)))
                        (((unsupported)).apply ((((xlist)).apply ((xresult)))))
                xget_ancestor_link.write
                  [xself xancestor]
                    memory > xparent_link
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xancestor)) (((xself).xparents))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xparents)) ((xancestor)))))
                        (((unsupported)).apply ((xparent)) (((xself).xparents)))
                          seq
                            xparent_link.write (((((xparent).x_meta).xget_ancestor_link)).apply ((xancestor)))
                            (xparent_link).if
                              (((unsupported)).apply (((((unsupported)).apply (((xself).xparents)) ((xparent))).or (xparent_link))))
                xget_path_to_parent.write
                  [xself xparent]
                    memory > xfinal_field
                    memory > xtargets
                    memory > xopts
                    memory > xproxied_model
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmodel)) ((xparent))).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        xproxied_model.write ((xself).xconcrete_model)
                        xpath.write (((unsupported)).apply)
                        xopts.write (xself)
                        (((unsupported)).apply ((xint_model)) (((((xself).xget_base_chain)).apply ((xparent)))))
                          (((unsupported)).apply ((xint_model)) ((xproxied_model))).if
                            xopts.write ((xint_model).x_meta)
                            seq
                              xfinal_field.write (((unsupported)).apply (((xopts).xparents)) ((xint_model)))
                              xtargets.write (((unsupported)).apply ((((xfinal_field).xremote_field).xget_related_field)))
                              xopts.write ((xint_model).x_meta)
                              bogusForceDataize.write ((((xpath).xappend)).apply ((((unsupported)).apply ((xPathInfo)) ((((xfinal_field).xmodel).x_meta)) ((xopts)) ((xtargets)) ((xfinal_field)) (FALSE) (TRUE) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((xpath)))
                xget_path_from_parent.write
                  [xself xparent]
                    memory > xpath
                    memory > xchain
                    memory > xchild
                    memory > xmodel
                    memory > xlink
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmodel)) ((xparent))).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        xmodel.write ((xself).xconcrete_model)
                        xchain.write (((((xmodel).x_meta).xget_base_chain)).apply ((xparent)))
                        unsupported
                        bogusForceDataize.write ((((xchain).xappend)).apply ((xmodel)))
                        xpath.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xancestor)))) ((((xenumerate)).apply ((((unsupported)).apply ((xchain)) ((((unsupported)).apply ((1.neg)))))))))
                          seq
                            xchild.write (((unsupported)).apply ((xchain)) (((xi).add 1)))
                            xlink.write (((((xchild).x_meta).xget_ancestor_link)).apply ((xancestor)))
                            bogusForceDataize.write ((((xpath).xextend)).apply (((xlink).xreverse_path_infos)))
                        (((unsupported)).apply ((xpath)))
                x_populate_directed_relation_graph.write
                  [xself]
                    memory > xopts
                    memory > xrelated_objects
                    memory > xremote_label
                    memory > xfields_with_relations
                    memory > xrelated_objects_graph
                    memory > xall_models
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrelated_objects_graph.write (((xdefaultdict)).apply ((xlist)))
                        xall_models.write (((unsupported)).apply ((((xself).xapps).xget_models)) (TRUE))
                        (((unsupported)).apply ((xmodel)) ((xall_models)))
                          seq
                            xopts.write ((xmodel).x_meta)
                            ((xopts).xabstract).if
                              (((unsupported)).apply)
                            xfields_with_relations.write (((unsupported)).apply ((xf)) ((xf)) ((((unsupported)).apply (((xopts).x_get_fields)) (FALSE) (FALSE))) ((((xf).xis_relation).and (((unsupported)).apply (((xf).xrelated_model)) ("None: is there a None literal in the EO language?")))))
                            (((unsupported)).apply ((xf)) ((xfields_with_relations)))
                              ((((xisinstance)).apply ((((xf).xremote_field).xmodel)) ((xstr))).not).if
                                seq
                                  xremote_label.write (((((((xf).xremote_field).xmodel).x_meta).xconcrete_model).x_meta).xlabel)
                                  bogusForceDataize.write ((((((unsupported)).apply ((xrelated_objects_graph)) ((xremote_label))).xappend)).apply ((xf)))
                        (((unsupported)).apply ((xmodel)) ((xall_models)))
                          seq
                            xrelated_objects.write (((unsupported)).apply ((xrelated_objects_graph)) ((((((xmodel).x_meta).xconcrete_model).x_meta).xlabel)))
                            (((unsupported)).apply ((((unsupported)).apply ((((xmodel).x_meta).x__dict__)) ("_relation_tree"))) ((xrelated_objects)))
                        (((unsupported)).apply ((((((xself).x__dict__).xget)).apply ("_relation_tree") ((xEMPTY_RELATION_TREE)))))
                x_relation_tree.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_populate_directed_relation_graph)))
                x_expire_cache.write
                  [xself xforward xreverse]
                    seq > @
                      (((unsupported)).apply)
                        (xforward).if
                          (((unsupported)).apply ((xcache_key)) (((xself).xFORWARD_PROPERTIES)))
                            (((unsupported)).apply ((xcache_key)) (((xself).x__dict__))).if
                              bogusForceDataize.write (((xdelattr)).apply ((xself)) ((xcache_key)))
                        ((xreverse).and (((xself).xabstract).not)).if
                          (((unsupported)).apply ((xcache_key)) (((xself).xREVERSE_PROPERTIES)))
                            (((unsupported)).apply ((xcache_key)) (((xself).x__dict__))).if
                              bogusForceDataize.write (((xdelattr)).apply ((xself)) ((xcache_key)))
                        (((unsupported)).apply (((xself).x_get_fields_cache)) ((((unsupported)).apply)))
                xget_fields.write
                  [xself xinclude_parents xinclude_hidden]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinclude_parents)) (FALSE)).if
                          xinclude_parents.write (xPROXY_PARENTS)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_get_fields)) ((xinclude_parents)) ((xinclude_hidden)))))
                x_get_fields.write
                  [xself xforward xreverse xinclude_parents xinclude_hidden xseen_models]
                    memory > xall_fields
                    memory > xtopmost_call
                    memory > xcache_key
                    memory > xfields
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinclude_parents)) ((((unsupported)).apply (TRUE) (FALSE) ((xPROXY_PARENTS))))).if
                          (((unsupported)).apply ((((xTypeError)).apply (("Invalid argument for include_parents: %s".mod (((unsupported)).apply ((xinclude_parents))))))))
                        xtopmost_call.write (((unsupported)).apply ((xseen_models)) ("None: is there a None literal in the EO language?"))
                        (xtopmost_call).if
                          xseen_models.write (xset)
                        bogusForceDataize.write ((((xseen_models).xadd)).apply (((xself).xmodel)))
                        xcache_key.write (((unsupported)).apply ((xforward)) ((xreverse)) ((xinclude_parents)) ((xinclude_hidden)) ((xtopmost_call)))
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_get_fields_cache)) ((xcache_key)))))
                        xfields.write (((unsupported)).apply)
                        (((unsupported)).apply ((xinclude_parents)) (FALSE)).if
                          (((unsupported)).apply ((xparent)) (((xself).xparents)))
                            seq
                              (((unsupported)).apply ((xparent)) ((xseen_models))).if
                                (((unsupported)).apply)
                              (((((xparent).x_meta).xconcrete_model).neq ((xself).xconcrete_model)).and ((xinclude_parents).eq (xPROXY_PARENTS))).if
                                (((unsupported)).apply)
                              (((unsupported)).apply ((xobj)) ((((unsupported)).apply ((((xparent).x_meta).x_get_fields)) ((xforward)) ((xreverse)) ((xinclude_parents)) ((xinclude_hidden)) ((xseen_models)))))
                                (((((xgetattr)).apply ((xobj)) ("parent_link") (FALSE)).not).or (((xobj).xmodel).eq ((xself).xconcrete_model))).if
                                  bogusForceDataize.write ((((xfields).xappend)).apply ((xobj)))
                        ((xreverse).and (((xself).xproxy).not)).if
                          seq
                            xall_fields.write ((xself).x_relation_tree)
                            (((unsupported)).apply ((xfield)) ((xall_fields)))
                              ((xinclude_hidden).or ((((xfield).xremote_field).xhidden).not)).if
                                bogusForceDataize.write ((((xfields).xappend)).apply (((xfield).xremote_field)))
                        (xforward).if
                          seq
                            (((unsupported)).apply ((xfields)) (((xself).xlocal_fields)))
                            (((unsupported)).apply ((xfields)) (((xself).xlocal_many_to_many)))
                            (xtopmost_call).if
                              (((unsupported)).apply ((xfields)) (((xself).xprivate_fields)))
                        xfields.write (((xmake_immutable_fields_list)).apply ("get_fields") ((xfields)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_get_fields_cache)) ((xcache_key)))) ((xfields)))
                        (((unsupported)).apply ((xfields)))
                xtotal_unique_constraints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xconstraint)) ((xconstraint)) (((xself).xconstraints)) ((((((xisinstance)).apply ((xconstraint)) ((xUniqueConstraint))).and (((unsupported)).apply (((xconstraint).xcondition)) ("None: is there a None literal in the EO language?"))).and (((xconstraint).xcontains_expressions).not))))))
                x_property_names.write
                  [xself]
                    memory > xattr
                    memory > xnames
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xnames.write (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ((((xdir)).apply (((xself).xmodel)))))
                          seq
                            xattr.write ((((xinspect).xgetattr_static)).apply (((xself).xmodel)) ((xname)))
                            (((xisinstance)).apply ((xattr)) ((xproperty))).if
                              bogusForceDataize.write ((((xnames).xappend)).apply ((xname)))
                        (((unsupported)).apply ((((xfrozenset)).apply ((xnames)))))
                xdb_returning_fields.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xfield)) ((((unsupported)).apply (((xself).x_get_fields)) (TRUE) (FALSE) ((xPROXY_PARENTS)))) ((((xgetattr)).apply ((xfield)) ("db_returning") (FALSE))))))