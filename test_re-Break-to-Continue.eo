memory > xcopy
memory > xbenchmarks
memory > xValueError
memory > xMAXREPEAT
memory > xp
memory > xop
memory > xarray
memory > xcm
memory > xUnicodeError
memory > xImportError
memory > xflags
memory > xc
memory > xFutureWarning
memory > xexpected
memory > xpickle
memory > xsecond
memory > xlist
memory > xproxy
memory > xstr
memory > xout
memory > xwarnings
memory > xcaptured_stdout
memory > xBytesWarning
memory > xt
memory > xB
memory > x_sre
memory > xS
memory > xrange
memory > xouter_reps
memory > xflag
memory > xb
memory > xtypecode
memory > xeval
memory > xSYNTAX_ERROR
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xstart
memory > xproto
memory > xprint
memory > xinner_op
memory > xIndex
memory > xtype
memory > xstring
memory > xrepr
memory > xint
memory > xre
memory > xr
memory > xwarns
memory > xScanner
memory > xOverflowError
memory > xx
memory > xend
memory > xsre_compile
memory > xloc
memory > xi
memory > xouter_mod
memory > xpattern
memory > xsuper
memory > xs
memory > xMAXGROUPS
memory > xbytes
memory > xm
memory > xtuple
memory > xsorted
memory > xDeprecationWarning
memory > xlocale
memory > xfloat
memory > xgc_collect
memory > xchr
memory > xmy_unicode
memory > xinner_mod
memory > xFAIL
memory > xitem
memory > xmod
memory > xfirst
memory > xUnicodeEncodeError
memory > x__file__
memory > xord
memory > xzip
memory > xunittest
memory > xsep
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xn
memory > xmemoryview
memory > xisinstance
memory > xouter_op
memory > xlen
memory > xreps
memory > xtests
memory > xBufferError
memory > xTypeError
memory > x__name__
memory > xa
memory > xinner_reps
[] > test_re
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheck_en_US_utf8
        memory > xtest_named_unicode_escapes
        memory > xtest_bug_20998
        memory > xtest_re_groupref_overflow
        memory > xtest_expand
        memory > xtest_scoped_flags
        memory > xtest_lookbehind
        memory > xtest_re_escape_non_ascii_bytes
        memory > xtest_sre_byte_class_literals
        memory > xtest_group
        memory > xtest_bytes
        memory > xtest_special_escapes
        memory > xtest_weakref
        memory > xtest_overlap_table
        memory > xtest_flags_repr
        memory > xtest_pattern_compare
        memory > xtest_symbolic_refs
        memory > xtest_multiple_repeat
        memory > xtest_bug_926075
        memory > xtest_big_codesize
        memory > xtest_flags
        memory > xtest_symbolic_groups
        memory > xtest_pattern_compare_bytes
        memory > xtest_bug_114660
        memory > xcheckPatternError
        memory > xtest_sub_template_numeric_escape
        memory > xtest_sre_byte_literals
        memory > xtest_re_escape_non_ascii
        memory > xtest_groupdict
        memory > xtest_ascii_and_unicode_flag
        memory > xtest_basic_re_sub
        memory > xtest_bug_449000
        memory > xtest_bug_581080
        memory > xtest_single_flag
        memory > xLITERAL_CHARS
        memory > xcheck_en_US_iso88591
        memory > xtest_keep_buffer
        memory > xtest_bug_764548
        memory > xtest_ignore_case_set
        memory > xtest_case_helpers
        memory > xtest_bug_817234
        memory > xtest_long_pattern
        memory > xcheck
        memory > xtest_bug_16688
        memory > xtest_large_search
        memory > xtest_re_benchmarks
        memory > xtest_bug_6509
        memory > xtest_locale
        memory > xtest_nothing_to_repeat
        memory > xtest_search_dot_unicode
        memory > xtest_sre_character_literals
        memory > xtest_re_groupref_exists
        memory > xtest_possible_set_operations
        memory > xtest_character_set_errors
        memory > xtest_getattr
        memory > xtest_ignore_case_range
        memory > xtest_qualified_re_sub
        memory > xtest_search_coverage
        memory > xtest_repeat_minmax
        memory > xtest_finditer
        memory > x__getitem__
        memory > xtest_re_fullmatch
        memory > xtest_error
        memory > xtest_zerowidth
        memory > xtest_unicode_flag
        memory > xtest_re_findall
        memory > xtest_without_flags
        memory > xtest_re_subn
        memory > xtest_dollar_matches_twice
        memory > xtest_bug_117612
        memory > xtest_re_tests
        memory > xtest_pickling
        memory > xtest_dealloc
        memory > xtest_empty_array
        memory > xtest_search_star_plus
        memory > xtest_qualified_re_split
        memory > xtest_match_getitem
        memory > xtest_bug_527371
        memory > xtest_repeat_minmax_overflow
        memory > xtest_bug_34294
        memory > xtest_bug_448951
        memory > xassertTypedEqual
        memory > xtest_anyall
        memory > xcheck_flags
        memory > xtest_constants
        memory > xtest_compile
        memory > xtest_bug_418626
        memory > xtest_bug_6561
        memory > xtest_category
        memory > xtest_misc_errors
        memory > xtest_bug_725106
        memory > xtest_not_literal
        memory > xtest_quotes
        memory > xtest_locale_compiled
        memory > xtest_re_groupref
        memory > xtest_re_split
        memory > xtest_multiple_flags
        memory > xassertMatch
        memory > xcheckTemplateError
        memory > xtest_bug_29444
        memory > xtest_re_match
        memory > xtest_backref_group_name_in_exception
        memory > xtest_issue17998
        memory > xtest_bug_3629
        memory > xtest_string_boundaries
        memory > xtest_locale_caching
        memory > xtest_group_name_in_exception
        memory > xtest_keyword_parameters
        memory > xtest_bug_931848
        memory > xtest_scanner
        memory > xtest_locale_flag
        memory > xtest_bug_1661
        memory > xtest_re_escape_bytes
        memory > xtest_bug_449964
        memory > xtest_bigcharset
        memory > xtest_repeat_minmax_overflow_maxrepeat
        memory > xtest_match_repr
        memory > xtest_enum
        memory > xtest_bug_612074
        memory > xtest_bug_113254
        memory > xtest_lookahead
        memory > xtest_inline_flags
        memory > xtest_ignore_case
        memory > xtest_bug_725149
        memory > xtest_copying
        memory > xtest_debug_flag
        memory > xtest_sre_character_class_literals
        memory > xtest_bytes_str_mixing
        memory > xtest_stack_overflow
        memory > xtest_large_subn
        memory > xtest_other_escapes
        memory > xtest_unknown_flags
        memory > xtest_bug_2537
        memory > xtest_re_escape
        memory > xtest_unlimited_zero_width_repeat
        memory > xbump_num
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xstr)))
              x__getitem__.write
                [xself xindex]
                  seq > @
                    (((unsupported)).apply ((((xS)).apply (((((((xsuper)).apply).x__getitem__)).apply ((xindex)))))))
            (((unsupported)).apply ((xbytes)))
              x__getitem__.write
                [xself xindex]
                  seq > @
                    (((unsupported)).apply ((((xB)).apply (((((((xsuper)).apply).x__getitem__)).apply ((xindex)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertTypedEqual.write
                  [xself xactual xexpect xmsg]
                    memory > xrecurse
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpect)) ((xmsg)))
                        xrecurse.write
                          [xactual xexpect]
                            seq > @
                              (((xisinstance)).apply ((xexpect)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                                (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((xzip)).apply ((xactual)) ((xexpect)))))
                                  bogusForceDataize.write (((xrecurse)).apply ((xx)) ((xy)))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xactual)))) ((((xtype)).apply ((xexpect)))) ((xmsg)))
                        bogusForceDataize.write (((xrecurse)).apply ((xactual)) ((xexpect)))
                xcheckPatternError.write
                  [xself xpattern xerrmsg xpos]
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ((xpattern)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpattern)))))
                          seq
                            xerr.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xmsg)) ((xerrmsg)))
                            (((unsupported)).apply ((xpos)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpos)) ((xpos)))
                xcheckTemplateError.write
                  [xself xpattern xrepl xstring xerrmsg xpos]
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xsub)).apply ((xpattern)) ((xrepl)) ((xstring)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpattern)) ((xrepl)))))
                          seq
                            xerr.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xmsg)) ((xerrmsg)))
                            (((unsupported)).apply ((xpos)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpos)) ((xpos)))
                xtest_keep_buffer.write
                  [xself]
                    memory > xit
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("x"))
                        xit.write ((((xre).xfinditer)).apply ("a") ((xb)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xBufferError)))))
                          bogusForceDataize.write ((((xb).xextend)).apply (("x".mul 400)))
                        bogusForceDataize.write (((xlist)).apply ((xit)))
                        (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                        bogusForceDataize.write (((xgc_collect)).apply)
                        bogusForceDataize.write ((((xb).xextend)).apply (("x".mul 400)))
                xtest_weakref.write
                  [xself]
                    memory > xy
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        xs.write "QabbbcR"
                        xx.write ((((xre).xcompile)).apply ("ab+c"))
                        xy.write (((xproxy)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xfindall)).apply ("QabbbcR"))) (((((xy).xfindall)).apply ("QabbbcR"))))
                xtest_search_star_plus.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("x*") ("axx")).xspan)).apply (0))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("x*") ("axx")).xspan)).apply)) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("x+") ("axx")).xspan)).apply (0))) ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("x+") ("axx")).xspan)).apply)) ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xsearch)).apply ("x") ("aaa"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a*") ("xxx")).xspan)).apply (0))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a*") ("xxx")).xspan)).apply)) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("x*") ("xxxa")).xspan)).apply (0))) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("x*") ("xxxa")).xspan)).apply)) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("a+") ("xxx"))))
                xbump_num.write
                  [xself xmatchobj]
                    memory > xint_value
                    seq > @
                      seq
                        xint_value.write (((xint)).apply (((((xmatchobj).xgroup)).apply (0))))
                        (((unsupported)).apply ((((xstr)).apply (((xint_value).add 1)))))
                xtest_basic_re_sub.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ("a") ("xyz"))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ((((xS)).apply ("a"))) ((((xS)).apply ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ("a") ("xyz"))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ((((xB)).apply ("a"))) ((((xB)).apply ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ((((xbytearray)).apply ("a"))) ((((xbytearray)).apply ("xyz"))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsub)).apply ("y") ((((xmemoryview)).apply ("a"))) ((((xmemoryview)).apply ("xyz"))))) ("xaz"))
                        (((unsupported)).apply ((xy)) ((((unsupported)).apply ("xe0") ("u0430") ("U0001d49c"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ((xy)) ("a") (("x%sz".mod (xy))))) ("xaz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?i)b+") ("x") ("bbbb BBBB"))) ("x x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y"))) ("9.3 -3 24x100y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y") (3))) ("9.3 -3 23x99y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsub)) ("d+") (((xself).xbump_num)) ("08.2 -2 23x99y") (3))) ("9.3 -3 23x99y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply (".") ((((unsupported)).apply ("n"))) ("x"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply (".") ("n") ("x"))) ("n"))
                        xs.write "11"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(.)") ((xs)) ("x"))) ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(.)") (((((xs).xreplace)).apply ("\\") ("\\"))) ("x"))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(.)") ((((unsupported)).apply ((xs)))) ("x"))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<a>x)") ("g<a>g<a>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<a>x)") ("g<a>g<1>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<unk>x)") ("g<unk>g<unk>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<unk>x)") ("g<1>g<1>") ("xx"))) ("xxxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") ("tnvrfab") ("a"))) ("tnvrfab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") ("tnvrfab") ("a"))) ("tnvrfab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") ("tnvrfab") ("a"))) ((((((((((xchr)).apply (9)).add (((xchr)).apply (10))).add (((xchr)).apply (11))).add (((xchr)).apply (13))).add (((xchr)).apply (12))).add (((xchr)).apply (7))).add (((xchr)).apply (8)))))
                        (((unsupported)).apply ((xc)) ("cdehijklmopqsuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xc)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") (("\\".add (xc))) ("a"))) (("\\".add (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("^s*") ("X") ("test"))) ("Xtest"))
                xtest_bug_449964.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<unk>x)") ("g<1>g<1>b") ("xx"))) ("xxbxxb"))
                xtest_bug_449000.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("rn") ("n") ("abcrndefrn"))) ("abcndefn"))
                xtest_bug_1661.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ((((xre).xcompile)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xmatch)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xsearch)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xfindall)) ((xpattern)) ("A") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ((xpattern)) (((xre).xI)))
                xtest_bug_3629.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<quote>)(?(quote))"))
                xtest_sub_template_numeric_escape.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("0") ("x"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("000") ("x"))) ("000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("001") ("x"))) ("001"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("008") ("x"))) (("0".add "8")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("009") ("x"))) (("0".add "9")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("111") ("x"))) ("111"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("117") ("x"))) ("117"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("377") ("x"))) ("377"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("1111") ("x"))) ("1111"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("1111") ("x"))) (("111".add "1")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("00") ("x"))) ("x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("07") ("x"))) ("x07"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("08") ("x"))) (("0".add "8")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("09") ("x"))) (("0".add "9")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("x") ("0a") ("x"))) (("0".add "a")))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("400") ("x") ("octal escape value 400 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("777") ("x") ("octal escape value 777 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("1") ("x") ("invalid group reference 1") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("8") ("x") ("invalid group reference 8") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("9") ("x") ("invalid group reference 9") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("11") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("18") ("x") ("invalid group reference 18") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("1a") ("x") ("invalid group reference 1") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("90") ("x") ("invalid group reference 90") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("99") ("x") ("invalid group reference 99") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("118") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("11a") ("x") ("invalid group reference 11") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("181") ("x") ("invalid group reference 18") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("800") ("x") ("invalid group reference 80") (1))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("x") ("8") ("") ("invalid group reference 8") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(((((((((((x)))))))))))") ("11") ("x"))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("((((((((((y))))))))))(.)") ("118") ("xyz"))) ("xz8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("((((((((((y))))))))))(.)") ("11a") ("xyz"))) ("xza"))
                xtest_qualified_re_sub.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") ("b") ("aaaaa"))) ("bbbbb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("a") ("b") ("aaaaa") (1))) ("baaaa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsub)) ("a") ("b") ("aaaaa") (1))) ("baaaa"))
                xtest_bug_114660.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(S)s+(S)") ("1 2") ("hello  there"))) ("hello there"))
                xtest_symbolic_groups.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<a>x)(?P=a)(?(a)y)"))
                        bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<a1>x)(?P=a1)(?(a1)y)"))
                        bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<a1>x)1(?(1)y)"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a>)(?P<a>)") ("redefinition of group name 'a' as group 2; was group 1"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a>(?P=a))") ("cannot refer to an open group") (10))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?Pxy)") ("unknown extension ?Px"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a>)(?P=a") ("missing ), unterminated name") (11))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=)") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=1)") ("bad character in group name '1'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=a)") ("unknown group name 'a'"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=a1)") ("unknown group name 'a1'"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=a.)") ("bad character in group name 'a.'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<)") ("missing >, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a") ("missing >, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<>)") ("missing group name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<1>)") ("bad character in group name '1'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a.>)") ("bad character in group name 'a.'") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?(") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?())") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?(a))") ("unknown group name 'a'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?(-1))") ("bad character in group name '-1'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?(1a))") ("bad character in group name '1a'") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?(a.))") ("bad character in group name 'a.'") (3))
                        bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<µ>x)(?P=µ)(?(µ)y)"))
                        bogusForceDataize.write ((((xre).xcompile)).apply ("(?P<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>x)(?P=𝔘𝔫𝔦𝔠𝔬𝔡𝔢)(?(𝔘𝔫𝔦𝔠𝔬𝔡𝔢)y)"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<©>x)") ("bad character in group name '©'") (4))
                        xpat.write ((("|".xjoin)).apply ((((unsupported)).apply (("x(?P<a%d>%x)y".mod (((unsupported)).apply ((xi)) ((xi))))) ((xi)) ((((xrange)).apply (1) ((200.add 1)))))))
                        xpat.write ("(?:%s)(?(200)z|t)".mod (xpat))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ((xpat)) ("xc8yz")).xspan)).apply)) ((((unsupported)).apply (0) (5))))
                xtest_symbolic_refs.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<a") ("xx") ("missing >, unterminated name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<") ("xx") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g") ("xx") ("missing <") (2))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<a a>") ("xx") ("bad character in group name 'a a'") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<>") ("xx") ("missing group name") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<1a1>") ("xx") ("bad character in group name '1a1'") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<2>") ("xx") ("invalid group reference 2") (3))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("2") ("xx") ("invalid group reference 2") (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("unknown group name 'ab'"))))
                          bogusForceDataize.write ((((xre).xsub)).apply ("(?P<a>x)") ("g<ab>") ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<a>x)|(?P<b>y)") ("g<b>") ("xx"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<a>x)|(?P<b>y)") ("2") ("xx"))) (""))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<-1>") ("xx") ("bad character in group name '-1'") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<µ>x)") ("g<µ>") ("xx"))) ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(?P<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>x)") ("g<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>") ("xx"))) ("xx"))
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("(?P<a>x)") ("g<©>") ("xx") ("bad character in group name '©'") (3))
                        xpat.write ((("|".xjoin)).apply ((((unsupported)).apply (("x(?P<a%d>%x)y".mod (((unsupported)).apply ((xi)) ((xi))))) ((xi)) ((((xrange)).apply (1) ((200.add 1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ((xpat)) ("g<200>") ("xc8yzxc8y"))) ("c8zc8"))
                xtest_re_subn.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsubn)).apply ("(?i)b+") ("x") ("bbbb BBBB"))) ((((unsupported)).apply ("x x") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsubn)).apply ("b+") ("x") ("bbbb BBBB"))) ((((unsupported)).apply ("x BBBB") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsubn)).apply ("b+") ("x") ("xyz"))) ((((unsupported)).apply ("xyz") (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsubn)).apply ("b*") ("x") ("xyz"))) ((((unsupported)).apply ("xxxyxzx") (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsubn)).apply ("b*") ("x") ("xyz") (2))) ((((unsupported)).apply ("xxxyz") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsubn)) ("b*") ("x") ("xyz") (2))) ((((unsupported)).apply ("xxxyz") (2))))
                xtest_re_split.write
                  [xself]
                    memory > xstring
                    seq > @
                      seq
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply (":a:b::c") ((((xS)).apply (":a:b::c"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply (":") ((xstring)))) ((((unsupported)).apply ("") ("a") ("b") ("") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply (":+") ((xstring)))) ((((unsupported)).apply ("") ("a") ("b") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply ("(:+)") ((xstring)))) ((((unsupported)).apply ("") (":") ("a") (":") ("b") ("::") ("c"))))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply (":a:b::c") ((((xB)).apply (":a:b::c"))) ((((xbytearray)).apply (":a:b::c"))) ((((xmemoryview)).apply (":a:b::c"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply (":") ((xstring)))) ((((unsupported)).apply ("") ("a") ("b") ("") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply (":+") ((xstring)))) ((((unsupported)).apply ("") ("a") ("b") ("c"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply ("(:+)") ((xstring)))) ((((unsupported)).apply ("") (":") ("a") (":") ("b") ("::") ("c"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) ((((unsupported)).apply ("xe0xdfxe7") ("u0430u0431u0432") ("U0001d49cU0001d49eU0001d4b5"))))
                          seq
                            xstring.write (":%s:%s::%s".mod (((unsupported)).apply ((xa)) ((xb)) ((xc))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply (":") ((xstring)))) ((((unsupported)).apply ("") ((xa)) ((xb)) ("") ((xc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply (":+") ((xstring)))) ((((unsupported)).apply ("") ((xa)) ((xb)) ((xc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(:+)") ((xstring)))) ((((unsupported)).apply ("") (":") ((xa)) (":") ((xb)) ("::") ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(?::+)") (":a:b::c"))) ((((unsupported)).apply ("") ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(:)+") (":a:b::c"))) ((((unsupported)).apply ("") (":") ("a") (":") ("b") (":") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("([b:]+)") (":a:b::c"))) ((((unsupported)).apply ("") (":") ("a") (":b::") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(b)|(:+)") (":a:b::c"))) ((((unsupported)).apply ("") ("None: is there a None literal in the EO language?") (":") ("a") ("None: is there a None literal in the EO language?") (":") ("") ("b") ("None: is there a None literal in the EO language?") ("") ("None: is there a None literal in the EO language?") ("::") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(?:b)|(?::+)") (":a:b::c"))) ((((unsupported)).apply ("") ("a") ("") ("") ("c"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsep)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply (":*") ((((unsupported)).apply ("") ("") ("a") ("") ("b") ("") ("c") (""))))) ((((unsupported)).apply ("(?::*)") ((((unsupported)).apply ("") ("") ("a") ("") ("b") ("") ("c") (""))))) ((((unsupported)).apply ("(:*)") ((((unsupported)).apply ("") (":") ("") ("") ("a") (":") ("") ("") ("b") ("::") ("") ("") ("c") ("") (""))))) ((((unsupported)).apply ("(:)*") ((((unsupported)).apply ("") (":") ("") ("None: is there a None literal in the EO language?") ("a") (":") ("") ("None: is there a None literal in the EO language?") ("b") (":") ("") ("None: is there a None literal in the EO language?") ("c") ("None: is there a None literal in the EO language?") (""))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsep)))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply ((xsep)) (":a:b::c"))) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsep)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("") ((((unsupported)).apply ("") (":") ("a") (":") ("b") (":") (":") ("c") (""))))) ((((unsupported)).apply ("b") ((((unsupported)).apply (":") ("a") (":") ("b") ("::") ("c") (""))))) ((((unsupported)).apply ("(?=:)") ((((unsupported)).apply ("") (":a") (":b") (":") (":c"))))) ((((unsupported)).apply ("(?<=:)") ((((unsupported)).apply (":") ("a:") ("b:") (":") ("c"))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsep)))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xsplit)).apply ((xsep)) (":a:b::c"))) ((xexpected)))
                xtest_qualified_re_split.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply (":") (":a:b::c") (2))) ((((unsupported)).apply ("") ("a") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsplit)) (":") (":a:b::c") (2))) ((((unsupported)).apply ("") ("a") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsplit)) (":") ("a:b:c:d") (2))) ((((unsupported)).apply ("a") ("b") ("c:d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsplit)) ("(:)") (":a:b::c") (2))) ((((unsupported)).apply ("") (":") ("a") (":") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsplit)) ("(:+)") (":a:b::c") (2))) ((((unsupported)).apply ("") (":") ("a") (":") ("b::c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xre).xsplit)) ("(:*)") (":a:b::c") (2))) ((((unsupported)).apply ("") (":") ("") ("") ("a:b::c"))))
                xtest_re_findall.write
                  [xself]
                    memory > xxx
                    memory > xxxx
                    memory > xstring
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply (":+") ("abc"))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("a:b::c:::d") ((((xS)).apply ("a:b::c:::d"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply (":+") ((xstring)))) ((((unsupported)).apply (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply ("(:+)") ((xstring)))) ((((unsupported)).apply (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply ("(:)(:*)") ((xstring)))) ((((unsupported)).apply ((((unsupported)).apply (":") (""))) ((((unsupported)).apply (":") (":"))) ((((unsupported)).apply (":") ("::"))))))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("a:b::c:::d") ((((xB)).apply ("a:b::c:::d"))) ((((xbytearray)).apply ("a:b::c:::d"))) ((((xmemoryview)).apply ("a:b::c:::d"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply (":+") ((xstring)))) ((((unsupported)).apply (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply ("(:+)") ((xstring)))) ((((unsupported)).apply (":") ("::") (":::"))))
                            bogusForceDataize.write ((((xself).xassertTypedEqual)).apply (((((xre).xfindall)).apply ("(:)(:*)") ((xstring)))) ((((unsupported)).apply ((((unsupported)).apply (":") (""))) ((((unsupported)).apply (":") (":"))) ((((unsupported)).apply (":") ("::"))))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ("xe0") ("u0430") ("U0001d49c"))))
                          seq
                            xxx.write ((xx).mul 2)
                            xxxx.write ((xx).mul 3)
                            xstring.write ("a%sb%sc%sd".mod (((unsupported)).apply ((xx)) ((xxx)) ((xxxx))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply (("%s+".mod (xx))) ((xstring)))) ((((unsupported)).apply ((xx)) ((xxx)) ((xxxx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply (("(%s+)".mod (xx))) ((xstring)))) ((((unsupported)).apply ((xx)) ((xxx)) ((xxxx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply (("(%s)(%s*)".mod (((unsupported)).apply ((xx)) ((xx))))) ((xstring)))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) (""))) ((((unsupported)).apply ((xx)) ((xx)))) ((((unsupported)).apply ((xx)) ((xxx)))))))
                xtest_bug_117612.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("(a|(b))") ("aba"))) ((((unsupported)).apply ((((unsupported)).apply ("a") (""))) ((((unsupported)).apply ("b") ("b"))) ((((unsupported)).apply ("a") (""))))))
                xtest_re_match.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("a") ((((xS)).apply ("a"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a") ((xstring))).xgroups)).apply)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroups)).apply)) ((((unsupported)).apply ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (0))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (1))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (1) (1))) ((((unsupported)).apply ("a") ("a"))))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("a") ((((xB)).apply ("a"))) ((((xbytearray)).apply ("a"))) ((((xmemoryview)).apply ("a"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a") ((xstring))).xgroups)).apply)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroups)).apply)) ((((unsupported)).apply ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (0))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (1))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)") ((xstring))).xgroup)).apply (1) (1))) ((((unsupported)).apply ("a") ("a"))))
                        (((unsupported)).apply ((xa)) ((((unsupported)).apply ("xe0") ("u0430") ("U0001d49c"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ((xa)) ((xa))).xgroups)).apply)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("(%s)".mod (xa))) ((xa))).xgroups)).apply)) ((((unsupported)).apply ((xa)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("(%s)".mod (xa))) ((xa))).xgroup)).apply (0))) ((xa)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("(%s)".mod (xa))) ((xa))).xgroup)).apply (1))) ((xa)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("(%s)".mod (xa))) ((xa))).xgroup)).apply (1) (1))) ((((unsupported)).apply ((xa)) ((xa)))))
                        xpat.write ((((xre).xcompile)).apply ("((a)|(b))(c)?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("a")).xgroups)).apply)) ((((unsupported)).apply ("a") ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("b")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("ac")).xgroups)).apply)) ((((unsupported)).apply ("a") ("a") ("None: is there a None literal in the EO language?") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("bc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("bc")).xgroups)).apply (""))) ((((unsupported)).apply ("b") ("") ("b") ("c"))))
                        xpat.write ((((xre).xcompile)).apply ("(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("a")).xgroup)).apply (1) (2) (3))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("b")).xgroup)).apply ("a1") ("b2") ("c3"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xpat).xmatch)).apply ("ac")).xgroup)).apply (1) ("b2") (3))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("c"))))
                xtest_group.write
                  [xself]
                    memory > x__index__
                    memory > x__init__
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)))
                        xm.write ((((xre).xmatch)).apply ("(a)(b)") ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply)) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (0))) ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply ((((xIndex)).apply (1))))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).xgroup)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).xgroup)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).xgroup)) ((((unsupported)).apply (1) (1000))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).xgroup)) ((((xIndex)).apply ((((unsupported)).apply (1) (1000))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).xgroup)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (2) (1))) ((((unsupported)).apply ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply ((((xIndex)).apply (2))) ((((xIndex)).apply (1))))) ((((unsupported)).apply ("b") ("a"))))
                xtest_match_getitem.write
                  [xself]
                    memory > xpat
                    memory > xm
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)).apply ("(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?"))
                        xm.write ((((xpat).xmatch)).apply ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("a1"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("b2"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("c3"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("a1={a1} b2={b2} c3={c3}".xformat_map)).apply ((xm)))) ("a1=a b2=None c3=None"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (0))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (3))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) ("X"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) (4))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (1))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) ((((unsupported)).apply (0))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          (((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (1))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndexError)) ("no such group"))))
                          bogusForceDataize.write ((("a1={a2}".xformat_map)).apply ((xm)))
                        xm.write ((((xpat).xmatch)).apply ("ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("a1"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("b2"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("c3"))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("a1={a1} b2={b2} c3={c3}".xformat_map)).apply ((xm)))) ("a1=a b2=None c3=c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (0))) ("ac"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (3))) ("c"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlen)) ((xm)))
                xtest_re_fullmatch.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a") ("a")).xspan)).apply)) ((((unsupported)).apply (0) (1))))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("ab") ((((xS)).apply ("ab"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a|ab") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("ab") ((((xB)).apply ("ab"))) ((((xbytearray)).apply ("ab"))) ((((xmemoryview)).apply ("ab"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a|ab") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ("xe0xdf") ("u0430u0431") ("U0001d49cU0001d49e"))))
                          seq
                            xr.write ("%s|%s".mod (((unsupported)).apply ((xa)) (((xa).add (xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ((xr)) (((xa).add (xb)))).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply (".*?$") ("abc")).xspan)).apply)) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply (".*?") ("abc")).xspan)).apply)) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a.*?b") ("ab")).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a.*?b") ("abb")).xspan)).apply)) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("a.*?b") ("axxb")).xspan)).apply)) ((((unsupported)).apply (0) (4))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xfullmatch)).apply ("a+") ("ab"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xfullmatch)).apply ("abc$") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xfullmatch)).apply ("abcZ") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xfullmatch)).apply ("(?m)abc$") ("abcn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("ab(?=c)cd") ("abcd")).xspan)).apply)) ((((unsupported)).apply (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("ab(?<=b)cd") ("abcd")).xspan)).apply)) ((((unsupported)).apply (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("(?=a|ab)ab") ("ab")).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((((xre).xcompile)).apply ("bc")).xfullmatch)) ("abcd") (1) (3)).xspan)).apply)) ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((((xre).xcompile)).apply (".*?$")).xfullmatch)) ("abcd") (1) (3)).xspan)).apply)) ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((((xre).xcompile)).apply (".*?")).xfullmatch)) ("abcd") (1) (3)).xspan)).apply)) ((((unsupported)).apply (1) (3))))
                xtest_re_groupref_exists.write
                  [xself]
                    memory > xpat
                    memory > xp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(()?([^()]+)(?(1)))$") ("(a)")).xgroups)).apply)) ((((unsupported)).apply ("(") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(()?([^()]+)(?(1)))$") ("a")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(()?([^()]+)(?(1)))$") ("a)"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(()?([^()]+)(?(1)))$") ("(a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)((?(1)b|d))$") ("ab")).xgroups)).apply)) ((((unsupported)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)((?(1)b|d))$") ("cd")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)((?(1)|d))$") ("cd")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)((?(1)|d))$") ("a")).xgroups)).apply)) ((((unsupported)).apply ("a") (""))))
                        xp.write ((((xre).xcompile)).apply ("(?P<g1>a)(?P<g2>b)?((?(g2)c|d))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xp).xmatch)).apply ("abc")).xgroups)).apply)) ((((unsupported)).apply ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xp).xmatch)).apply ("ad")).xgroups)).apply)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("d"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp).xmatch)).apply ("abd"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp).xmatch)).apply ("ac"))))
                        xpat.write ((("|".xjoin)).apply ((((unsupported)).apply (("x(?P<a%d>%x)y".mod (((unsupported)).apply ((xi)) ((xi))))) ((xi)) ((((xrange)).apply (1) ((200.add 1)))))))
                        xpat.write ("(?:%s)(?(200)z)".mod (xpat))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ((xpat)) ("xc8yz")).xspan)).apply)) ((((unsupported)).apply (0) (5))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<a>)(?(0))") ("bad group number") (10))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("()(?(1)a|b") ("missing ), unterminated subpattern") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("()(?(1)a|b|c)") ("conditional backref with more than two branches") (10))
                xtest_re_groupref_overflow.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheckTemplateError)).apply ("()") (("g<%s>".mod (xMAXGROUPS))) ("xx") (("invalid group reference %d".mod (xMAXGROUPS))) (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply (("(?P<a>)(?(%d))".mod (xMAXGROUPS))) (("invalid group reference %d".mod (xMAXGROUPS))) (10))
                xtest_re_groupref.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(|)?([^()]+)1$") ("|a|")).xgroups)).apply)) ((((unsupported)).apply ("|") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(|)?([^()]+)1?$") ("a")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(|)?([^()]+)1$") ("a|"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(|)?([^()]+)1$") ("|a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)(1)$") ("aa")).xgroups)).apply)) ((((unsupported)).apply ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(?:(a)|c)(1)?$") ("c")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(abc1)") ("cannot refer to an open group") (4))
                xtest_groupdict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(?P<first>first) (?P<second>second)") ("first second")).xgroupdict)).apply)) ((((unsupported)).apply ("first") ("first") ("second") ("second"))))
                xtest_expand.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(?P<first>first) (?P<second>second)") ("first second")).xexpand)).apply ("2 1 g<second> g<first>"))) ("second first second first"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(?P<first>first)|(?P<second>second)") ("first")).xexpand)).apply ("2 g<second>"))) (" "))
                xtest_repeat_minmax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(w){1}$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(w){1}?$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(w){1,2}$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^(w){1,2}?$") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){3}$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){1,3}$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){1,4}$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){3,4}?$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){3}?$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){1,3}?$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){1,4}?$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(w){3,4}?$") ("abc")).xgroup)).apply (1))) ("c"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^x{1}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^x{1}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^x{1,2}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^x{1,2}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{1,3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{3,3}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{1,4}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{3,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{3}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{1,3}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{1,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{3,4}?$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^x{}$") ("xxx"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("^x{}$") ("x{}"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("x{2,1}") ("min repeat greater than max repeat") (2))
                xtest_getattr.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ("(?i)(a)(b)")).xpattern)) ("(?i)(a)(b)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ("(?i)(a)(b)")).xflags)) ((((xre).xI).or ((xre).xU))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ("(?i)(a)(b)")).xgroups)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ("(?i)(a)(b)")).xgroupindex)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ("(?i)(?P<first>a)(?P<other>b)")).xgroupindex)) ((((unsupported)).apply ("first") (1) ("other") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(a)") ("a")).xpos)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(a)") ("a")).xendpos)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(a)") ("a")).xstring)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(a)") ("a")).xregs)) ((((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (0) (1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xre).xmatch)).apply ("(a)") ("a")).xre)))
                        xp.write ((((xre).xcompile)).apply ("(?i)(?P<first>a)(?P<other>b)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((xp).xgroupindex)))) ((((unsupported)).apply ("first") ("other"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xgroupindex)) ("other"))) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xp).xgroupindex)) ("other"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xgroupindex)) ("other"))) (2))
                xtest_special_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("b(b.)b") ("abcd abc bcd bx")).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("B(b.)B") ("abc bcd bc abxd")).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("b(b.)b") ("abcd abc bcd bx") (((xre).xASCII))).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("B(b.)B") ("abc bcd bc abxd") (((xre).xASCII))).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("^abc$") ("nabcn") (((xre).xM))).xgroup)).apply (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("^AabcZ$") ("abc") (((xre).xM))).xgroup)).apply (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xsearch)).apply ("^AabcZ$") ("nabcn") (((xre).xM)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("b(b.)b") ("abcd abc bcd bx")).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("B(b.)B") ("abc bcd bc abxd")).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("b(b.)b") ("abcd abc bcd bx") (((xre).xLOCALE))).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("B(b.)B") ("abc bcd bc abxd") (((xre).xLOCALE))).xgroup)).apply (1))) ("bx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("^abc$") ("nabcn") (((xre).xM))).xgroup)).apply (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("^AabcZ$") ("abc") (((xre).xM))).xgroup)).apply (0))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xsearch)).apply ("^AabcZ$") ("nabcn") (((xre).xM)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("dDwWsS") ("1aa! a")).xgroup)).apply (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("dDwWsS") ("1aa! a")).xgroup)).apply (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("dDwWsS") ("1aa! a") (((xre).xASCII))).xgroup)).apply (0))) ("1aa! a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("dDwWsS") ("1aa! a") (((xre).xLOCALE))).xgroup)).apply (0))) ("1aa! a"))
                xtest_other_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("\\") ("bad escape (end of pattern)") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(") ("(")).xgroup)).apply)) ("("))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(") (")"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("\\") ("\\")).xgroup)).apply)) ("\\"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("[]]") ("]")).xgroup)).apply)) ("]"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[]]") ("["))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("[a-c]") ("-")).xgroup)).apply)) ("-"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[a-c]") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("[^a]+") ("a^")).xgroup)).apply)) ("a^"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[^a]+") ("b"))))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        (((unsupported)).apply ((xc)) ("ceghijklmopqyzCEFGHIJKLMNOPQRTVXY"))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xc)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) (((((unsupported)).apply).mod (xc))))
                        (((unsupported)).apply ((xc)) ("ceghijklmopqyzABCEFGHIJKLMNOPQRTVXYZ"))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xc)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) (((((unsupported)).apply).mod (xc))))
                xtest_named_unicode_escapes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("N{LESS-THAN SIGN}") ("<"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("N{less-than sign}") ("<"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("N{LESS-THAN SIGN}") (">"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("N{SNAKE}") ("U0001f40d"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("N{ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM}") ("ufbf9"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[N{LESS-THAN SIGN}-N{GREATER-THAN SIGN}]") ("="))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[N{LESS-THAN SIGN}-N{GREATER-THAN SIGN}]") (";"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N") ("missing {") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N]") ("missing {") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N{") ("missing character name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{") ("missing character name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N{}") ("missing character name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{}]") ("missing character name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("NSNAKE}") ("missing {") (2))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[NSNAKE}]") ("missing {") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N{SNAKE") ("missing }, unterminated name") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{SNAKE]") ("missing }, unterminated name") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{SNAKE]}") ("undefined character name 'SNAKE]'") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N{SPAM}") ("undefined character name 'SPAM'") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{SPAM}]") ("undefined character name 'SPAM'") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("N{LESS-THAN SIGN}") ("bad escape N") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[N{LESS-THAN SIGN}]") ("bad escape N") (1))
                xtest_string_boundaries.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("b(abc)b") ("abc")).xgroup)).apply (1))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("b") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("B") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xre).xmatch)).apply ("B") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xsearch)).apply ("B") (""))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xsearch)).apply ("b") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xre).xfindall)).apply ("b") ("a"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xre).xfindall)).apply ("B") ("a"))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xre).xfindall)).apply ("b") (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xre).xfindall)).apply ("b") ("   "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xre).xfindall)).apply ("B") (" "))))) (2))
                xtest_bigcharset.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("([u2222u2223])") ("u2222")).xgroup)).apply (1))) ("u2222"))
                        xr.write ("[%s]".mod ((("".xjoin)).apply ((((xmap)).apply ((xchr)) ((((xrange)).apply (256) ((((unsupported)).apply (2) (16))) (255)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ((xr)) ("uff01")).xgroup)).apply)) ("uff01"))
                xtest_big_codesize.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xre).xcompile)).apply (((("|".xjoin)).apply ((((unsupported)).apply (("%d".mod (xx))) ((xx)) ((((xrange)).apply (10000))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xmatch)).apply ("1000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xmatch)).apply ("9999"))))
                xtest_anyall.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a.b") ("anb") (((xre).xDOTALL))).xgroup)).apply (0))) ("anb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("a.*b") ("annb") (((xre).xDOTALL))).xgroup)).apply (0))) ("annb"))
                xtest_lookahead.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?=s[^a]))") ("a b")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?=s[^a]*))") ("a b")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?=s[abc]))") ("a b")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?=s[abc]*))") ("a bc")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?=s1)") ("a a")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?=s1*)") ("a aa")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?=s(abc|a))") ("a a")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?!s[^a]))") ("a a")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a(?!s[abc]))") ("a d")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?!s1)") ("a b")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?!s(abc|a))") ("a b")).xgroup)).apply (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)b(?=1)a") ("aba"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(a)b(?=1)c") ("abac"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?=(?(2)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?=(?(1)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?=(?(1)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)b(?=(?(2)x|c))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(a)b(?=(?(2)b|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)b(?=(?(1)c|x))(c)") ("abc"))))
                xtest_lookbehind.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("ab(?<=b)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("ab(?<=c)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("ab(?<!b)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("ab(?<!c)c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)a(?<=1)c") ("aac"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(a)b(?<=1)a") ("abaa"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(a)a(?<!1)c") ("aac"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)b(?<!1)a") ("abaa"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?<=(?(2)x|c))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?<=(?(2)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?<=(?(2)x|b))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?<=(?(1)c|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?:(a)|(x))b(?<=(?(1)b|x))c") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(?(2)b|x))(c)"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(a)b(?<=(?(1)c|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(a)b(?<=(?(1)b|x))(c)") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(.)2)(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(?P<a>.)(?P=a))(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(a)(?(2)b|x))(c)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(a)b(?<=(.)(?<=2))(c)"))
                xtest_ignore_case.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("abc") ("ABC") (((xre).xI))).xgroup)).apply (0))) ("ABC"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("abc") ("ABC") (((xre).xI))).xgroup)).apply (0))) ("ABC"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(as[^a])") ("a b") (((xre).xI))).xgroup)).apply (1))) ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(as[^a]*)") ("a bb") (((xre).xI))).xgroup)).apply (1))) ("a bb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(as[abc])") ("a b") (((xre).xI))).xgroup)).apply (1))) ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(as[abc]*)") ("a bb") (((xre).xI))).xgroup)).apply (1))) ("a bb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("((a)s2)") ("a a") (((xre).xI))).xgroup)).apply (1))) ("a a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("((a)s2*)") ("a aa") (((xre).xI))).xgroup)).apply (1))) ("a aa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("((a)s(abc|a))") ("a a") (((xre).xI))).xgroup)).apply (1))) ("a a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("((a)s(abc|a)*)") ("a aa") (((xre).xI))).xgroup)).apply (1))) ("a aa"))
                        (((unsupported)).apply ((((("u212a".xlower)).apply).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("K") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("k") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("u212a") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("u212a") ("k") (((xre).xI)))))
                        (((unsupported)).apply ((((("u017f".xupper)).apply).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("S") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("s") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("u017f") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("u017f") ("s") (((xre).xI)))))
                        (((unsupported)).apply ((((unsupported)).apply (((("ufb05".xupper)).apply)) (((("ufb06".xupper)).apply)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("ufb05") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("ufb06") ("ufb05") (((xre).xI)))))
                xtest_ignore_case_set.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19A]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19a]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19a]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19A]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19A]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19a]") ("a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19a]") ("A") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19A]") ("a") (((xre).xI)))))
                        (((unsupported)).apply ((((("u212a".xlower)).apply).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19K]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19k]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19u212a]") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19u212a]") ("k") (((xre).xI)))))
                        (((unsupported)).apply ((((("u017f".xupper)).apply).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19S]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19s]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19u017f]") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19u017f]") ("s") (((xre).xI)))))
                        (((unsupported)).apply ((((unsupported)).apply (((("ufb05".xupper)).apply)) (((("ufb06".xupper)).apply)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19ufb05]") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[19ufb06]") ("ufb05") (((xre).xI)))))
                xtest_ignore_case_range.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[9-a]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[9-A]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[9-a]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[9-A]") ("_") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[xc0-xde]") ("xd7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[xc0-xde]") ("xf7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[xe0-xfe]") ("xf7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("[xe0-xfe]") ("xd7") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u0430-u045f]") ("u0450") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u0430-u045f]") ("u0400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u0400-u042f]") ("u0450") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u0400-u042f]") ("u0400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[U00010428-U0001044f]") ("U00010428") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[U00010428-U0001044f]") ("U00010400") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[U00010400-U00010427]") ("U00010428") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[U00010400-U00010427]") ("U00010400") (((xre).xI)))))
                        (((unsupported)).apply ((((("u212a".xlower)).apply).eq "k")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[J-M]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[j-m]") ("u212a") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u2129-u212b]") ("K") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u2129-u212b]") ("k") (((xre).xI)))))
                        (((unsupported)).apply ((((("u017f".xupper)).apply).eq "S")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[R-T]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[r-t]") ("u017f") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u017e-u0180]") ("S") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[u017e-u0180]") ("s") (((xre).xI)))))
                        (((unsupported)).apply ((((unsupported)).apply (((("ufb05".xupper)).apply)) (((("ufb06".xupper)).apply)) ("ST"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[ufb04-ufb05]") ("ufb06") (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[ufb06-ufb07]") ("ufb05") (((xre).xI)))))
                xtest_category.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(s)") (" ")).xgroup)).apply (1))) (" "))
                xtest_case_helpers.write
                  [xself]
                    memory > xlo
                    memory > xc
                    memory > xiscased
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (128))))
                          seq
                            xc.write (((xchr)).apply ((xi)))
                            xlo.write (((xord)).apply (((((xc).xlower)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xascii_tolower)).apply ((xi)))) ((xlo)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xunicode_tolower)).apply ((xi)))) ((xlo)))
                            xiscased.write (((unsupported)).apply ((xc)) (((xstring).xascii_letters)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xascii_iscased)).apply ((xi)))) ((xiscased)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xunicode_iscased)).apply ((xi)))) ((xiscased)))
                        (((unsupported)).apply ((xi)) (((((xlist)).apply ((((xrange)).apply (128) (4096)))).add (((unsupported)).apply (66560) (66600)))))
                          seq
                            xc.write (((xchr)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xascii_tolower)).apply ((xi)))) ((xi)))
                            ((xi).neq 304).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xunicode_tolower)).apply ((xi)))) ((((xord)).apply (((((xc).xlower)).apply)))))
                            xiscased.write (((xc).neq ((((xc).xlower)).apply)).or ((xc).neq ((((xc).xupper)).apply)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((x_sre).xascii_iscased)).apply ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xunicode_iscased)).apply ((xi)))) ((((xc).neq ((((xc).xlower)).apply)).or ((xc).neq ((((xc).xupper)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xascii_tolower)).apply (304))) (304))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_sre).xunicode_tolower)).apply (304))) ((((xord)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((x_sre).xascii_iscased)).apply (304))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_sre).xunicode_iscased)).apply (304))))
                xtest_not_literal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("s([^a])") (" b")).xgroup)).apply (1))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("s([^a]*)") (" bb")).xgroup)).apply (1))) ("bb"))
                xtest_possible_set_operations.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write ((((((xbytes)).apply ((((xrange)).apply (128)))).xdecode)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[0-9--1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("-./0123456789"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("[--1]") ((xs)))) ((((xlist)).apply ("-./01"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[%--1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("%&'()*+,-1"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[%--]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("%&'()*+,-"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[0-9&&1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("&0123456789"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[d&&1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("&0123456789"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("[&&1]") ((xs)))) ((((xlist)).apply ("&1"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[0-9||a]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("0123456789a|"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[d||a]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("0123456789a|"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("[||1]") ((xs)))) ((((xlist)).apply ("1|"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[0-9~~1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("0123456789~"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[d~~1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("0123456789~"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("[~~1]") ((xs)))) ((((xlist)).apply ("1~"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[[0-9]|]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply ("0123456789[]"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xFutureWarning)))))
                          xp.write ((((xre).xcompile)).apply ("[[:digit:]|]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xfindall)).apply ((xs)))) ((((xlist)).apply (":[]dgit"))))
                xtest_search_coverage.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("s(b)") (" b")).xgroup)).apply (1))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("as") ("a ")).xgroup)).apply (0))) ("a "))
                xassertMatch.write
                  [xself xpattern xtext xmatch xspan xmatcher]
                    memory > xm
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xmatch)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xspan)) ("None: is there a None literal in the EO language?"))).if
                          seq
                            xmatch.write (xtext)
                            xspan.write (((unsupported)).apply (0) ((((xlen)).apply ((xtext)))))
                          ((((unsupported)).apply ((xmatch)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xspan)) ("None: is there a None literal in the EO language?"))).if
                            (((unsupported)).apply ((((xValueError)).apply ("If match is not None, span should be specified (and vice versa)."))))
                        xm.write (((xmatcher)).apply ((xpattern)) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply)) ((xmatch)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xspan)).apply)) ((xspan)))
                xLITERAL_CHARS.write ((((xstring).xascii_letters).add ((xstring).xdigits)).add "!\"%',/:;<=>@_`")
                xtest_re_escape.write
                  [xself]
                    memory > xp
                    memory > xliteral_chars
                    seq > @
                      seq
                        xp.write ((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xi)))) ((xi)) ((((xrange)).apply (256))))))
                        (((unsupported)).apply ((xc)) ((xp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertMatch)).apply (((((xre).xescape)).apply ((xc)))) ((xc)))
                            bogusForceDataize.write ((((xself).xassertMatch)).apply ((("[".add ((((xre).xescape)).apply ((xc)))).add "]")) ((xc)))
                            bogusForceDataize.write ((((xself).xassertMatch)).apply (("(?x)".add ((((xre).xescape)).apply ((xc))))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertMatch)).apply (((((xre).xescape)).apply ((xp)))) ((xp)))
                        (((unsupported)).apply ((xc)) ("-.]{}"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xre).xescape)).apply ((xc)))) ((((unsupported)).apply (1))))) ("\\"))
                        xliteral_chars.write ((xself).xLITERAL_CHARS)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xescape)).apply ((xliteral_chars)))) ((xliteral_chars)))
                xtest_re_escape_bytes.write
                  [xself]
                    memory > xp
                    memory > xliteral_chars
                    memory > xb
                    seq > @
                      seq
                        xp.write (((xbytes)).apply ((((xrange)).apply (256))))
                        (((unsupported)).apply ((xi)) ((xp)))
                          seq
                            xb.write (((xbytes)).apply ((((unsupported)).apply ((xi)))))
                            bogusForceDataize.write ((((xself).xassertMatch)).apply (((((xre).xescape)).apply ((xb)))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertMatch)).apply ((("[".add ((((xre).xescape)).apply ((xb)))).add "]")) ((xb)))
                            bogusForceDataize.write ((((xself).xassertMatch)).apply (("(?x)".add ((((xre).xescape)).apply ((xb))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertMatch)).apply (((((xre).xescape)).apply ((xp)))) ((xp)))
                        (((unsupported)).apply ((xi)) ("-.]{}"))
                          seq
                            xb.write (((xbytes)).apply ((((unsupported)).apply ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xre).xescape)).apply ((xb)))) ((((unsupported)).apply (1))))) ("\\"))
                        xliteral_chars.write (((((xself).xLITERAL_CHARS).xencode)).apply ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xescape)).apply ((xliteral_chars)))) ((xliteral_chars)))
                xtest_re_escape_non_ascii.write
                  [xself]
                    memory > xs
                    memory > xs_escaped
                    seq > @
                      seq
                        xs.write "xxxu2620u2620u2620xxx"
                        xs_escaped.write ((((xre).xescape)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs_escaped)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertMatch)).apply ((xs_escaped)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertMatch)).apply ((".%s+.".mod ((((xre).xescape)).apply ("u2620")))) ((xs)) ("xu2620u2620u2620x") ((((unsupported)).apply (2) (7))) (((xre).xsearch)))
                xtest_re_escape_non_ascii_bytes.write
                  [xself]
                    memory > xres
                    memory > xb
                    memory > xb_escaped
                    seq > @
                      seq
                        xb.write ((("yu2620yu2620y".xencode)).apply ("utf-8"))
                        xb_escaped.write ((((xre).xescape)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb_escaped)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertMatch)).apply ((xb_escaped)) ((xb)))
                        xres.write ((((xre).xfindall)).apply (((((xre).xescape)).apply (((("u2620".xencode)).apply ("utf-8"))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xres)))) (2))
                xtest_pickling.write
                  [xself]
                    memory > xoldpat
                    memory > xnewpat
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xoldpat.write ((((xre).xcompile)).apply ("a(?:b|(c|e){1,2}?|d)+?(.)") (((xre).xUNICODE)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xoldpat)) ((xproto)))
                            xnewpat.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnewpat)) ((xoldpat)))
                        (((unsupported)).apply)
                xtest_copying.write
                  [xself]
                    memory > xp
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write ((((xre).xcompile)).apply ("(?P<int>d+)(?:.(?P<frac>d*))?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xcopy).xcopy)).apply ((xp)))) ((xp)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xcopy).xdeepcopy)).apply ((xp)))) ((xp)))
                        xm.write ((((xp).xmatch)).apply ("12.34"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xcopy).xcopy)).apply ((xm)))) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xcopy).xdeepcopy)).apply ((xm)))) ((xm)))
                xtest_constants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xre).xI)) (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xre).xL)) (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xre).xM)) (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xre).xS)) (((xre).xDOTALL)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xre).xX)) (((xre).xVERBOSE)))
                xtest_flags.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xflag)) ((((unsupported)).apply (((xre).xI)) (((xre).xM)) (((xre).xX)) (((xre).xS)) (((xre).xA)) (((xre).xU)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xcompile)).apply ("^pattern$") ((xflag)))))
                        (((unsupported)).apply ((xflag)) ((((unsupported)).apply (((xre).xI)) (((xre).xM)) (((xre).xX)) (((xre).xS)) (((xre).xA)) (((xre).xL)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xcompile)).apply ("^pattern$") ((xflag)))))
                xtest_sre_character_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (8) (16) (32) (64) (127) (128) (255) (256) (65535) (65536) (1114111))))
                          seq
                            ((xi).less 256).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("%03o".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("%03o0".mod (xi))) (((((xchr)).apply ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("%03o8".mod (xi))) (((((xchr)).apply ((xi))).add "8")))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("x%02x".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("x%02x0".mod (xi))) (((((xchr)).apply ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("x%02xz".mod (xi))) (((((xchr)).apply ((xi))).add "z")))))
                            ((xi).less 65536).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("u%04x".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("u%04x0".mod (xi))) (((((xchr)).apply ((xi))).add "0")))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("u%04xz".mod (xi))) (((((xchr)).apply ((xi))).add "z")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("U%08x".mod (xi))) ((((xchr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("U%08x0".mod (xi))) (((((xchr)).apply ((xi))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("U%08xz".mod (xi))) (((((xchr)).apply ((xi))).add "z")))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("0") ("000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("08") ("0008"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("01") ("001"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("018") ("0018"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("567") ("octal escape value 567 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("911") ("invalid group reference 91") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("x1") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("x1z") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("u123") ("incomplete escape u123") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("u123z") ("incomplete escape u123") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("U0001234") ("incomplete escape U0001234") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("U0001234z") ("incomplete escape U0001234") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("U00110000") ("bad escape U00110000") (0))
                xtest_sre_character_class_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (8) (16) (32) (64) (127) (128) (255) (256) (65535) (65536) (1114111))))
                          seq
                            ((xi).less 256).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[%o]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[%o8]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[%03o]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[%03o0]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[%03o8]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[x%02x]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[x%02x0]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[x%02xz]".mod (xi))) ((((xchr)).apply ((xi)))))))
                            ((xi).less 65536).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[u%04x]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[u%04x0]".mod (xi))) ((((xchr)).apply ((xi)))))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[u%04xz]".mod (xi))) ((((xchr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[U%08x]".mod (xi))) ((((xchr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[U%08x0]".mod (xi))) (((((xchr)).apply ((xi))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("[U%08xz]".mod (xi))) (((((xchr)).apply ((xi))).add "z")))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[567]") ("octal escape value 567 outside of range 0-0o377") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[911]") ("bad escape 9") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[x1z]") ("incomplete escape x1") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[u123z]") ("incomplete escape u123") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[U0001234z]") ("incomplete escape U0001234") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[U00110000]") ("bad escape U00110000") (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("[U0001d49c-U0001d4b5]") ("U0001d49e"))))
                xtest_sre_byte_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (8) (16) (32) (64) (127) (128) (255))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("%03o".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("%03o0".mod (xi)).xencode)).apply)) (((((xbytes)).apply ((((unsupported)).apply ((xi))))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("%03o8".mod (xi)).xencode)).apply)) (((((xbytes)).apply ((((unsupported)).apply ((xi))))).add "8")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("x%02x".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("x%02x0".mod (xi)).xencode)).apply)) (((((xbytes)).apply ((((unsupported)).apply ((xi))))).add "0")))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("x%02xz".mod (xi)).xencode)).apply)) (((((xbytes)).apply ((((unsupported)).apply ((xi))))).add "z")))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("u1234"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("U00012345"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("0") ("000"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("08") ("0008"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("01") ("001"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("018") ("0018"))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("567") ("octal escape value 567 outside of range 0-0o377") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("911") ("invalid group reference 91") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("x1") ("incomplete escape x1") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("x1z") ("incomplete escape x1") (0))
                xtest_sre_byte_class_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (8) (16) (32) (64) (127) (128) (255))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[%o]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[%o8]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[%03o]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[%03o0]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[%03o8]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[x%02x]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[x%02x0]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((("[x%02xz]".mod (xi)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("[u1234]"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("[U00012345]"))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[567]") ("octal escape value 567 outside of range 0-0o377") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[911]") ("bad escape 9") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[x1z]") ("incomplete escape x1") (1))
                xtest_character_set_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[^") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[a") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[a-") ("unterminated character set") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[w-b]") ("bad character range w-b") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[a-w]") ("bad character range a-w") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("[b-a]") ("bad character range b-a") (1))
                xtest_bug_113254.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)|(b)") ("b")).xstart)).apply (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)|(b)") ("b")).xend)).apply (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)|(b)") ("b")).xspan)).apply (1))) ((((unsupported)).apply ((1.neg)) ((1.neg)))))
                xtest_bug_527371.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xre).xmatch)).apply ("(a)?a") ("a")).xlastindex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(a)(b)?b") ("ab")).xlastindex)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(?P<a>a)(?P<b>b)?b") ("ab")).xlastgroup)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("(?P<a>a(b))") ("ab")).xlastgroup)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xmatch)).apply ("((a))") ("a")).xlastindex)) (1))
                xtest_bug_418626.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".*?c") (((10000.mul "ab").add "cd"))).xend)).apply (0))) (20001))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".*?cd") (((((5000.mul "ab").add "c").add (5000.mul "ab")).add "cde"))).xend)).apply (0))) (20003))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".*?cd") (((20000.mul "abc").add "de"))).xend)).apply (0))) (60001))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ("(a|b)*?c") (((10000.mul "ab").add "cd"))).xend)).apply (0))) (20001))
                xtest_bug_612074.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write (("[".add ((((xre).xescape)).apply ("u2039"))).add "]")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xre).xcompile)).apply ((xpat))).and 1)) (1))
                xtest_stack_overflow.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(x)*") ((50000.mul "x"))).xgroup)).apply (1))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(x)*y") (((50000.mul "x").add "y"))).xgroup)).apply (1))) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(x)*?y") (((50000.mul "x").add "y"))).xgroup)).apply (1))) ("x"))
                xtest_nothing_to_repeat.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xreps)) ((((unsupported)).apply ("*") ("+") ("?") ("{1,2}"))))
                        (((unsupported)).apply ((xmod)) ((((unsupported)).apply ("") ("?"))))
                          seq
                            bogusForceDataize.write ((((xself).xcheckPatternError)).apply (("%s%s".mod (((unsupported)).apply ((xreps)) ((xmod))))) ("nothing to repeat") (0))
                            bogusForceDataize.write ((((xself).xcheckPatternError)).apply (("(?:%s%s)".mod (((unsupported)).apply ((xreps)) ((xmod))))) ("nothing to repeat") (3))
                xtest_multiple_repeat.write
                  [xself]
                    memory > xinner_op
                    memory > xouter_op
                    seq > @
                      (((unsupported)).apply ((xouter_reps)) ((((unsupported)).apply ("*") ("+") ("{1,2}"))))
                        (((unsupported)).apply ((xouter_mod)) ((((unsupported)).apply ("") ("?"))))
                          seq
                            xouter_op.write ((xouter_reps).add (xouter_mod))
                            (((unsupported)).apply ((xinner_reps)) ((((unsupported)).apply ("*") ("+") ("?") ("{1,2}"))))
                              (((unsupported)).apply ((xinner_mod)) ((((unsupported)).apply ("") ("?"))))
                                seq
                                  xinner_op.write ((xinner_reps).add (xinner_mod))
                                  bogusForceDataize.write ((((xself).xcheckPatternError)).apply (("x%s%s".mod (((unsupported)).apply ((xinner_op)) ((xouter_op))))) ("multiple repeat") ((1.add (((xlen)).apply ((xinner_op))))))
                xtest_unlimited_zero_width_repeat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?)*y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?)+y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?){2,}y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?)*?y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?)+?y") ("z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?:a?){2,}?y") ("z"))))
                xtest_scanner.write
                  [xself]
                    memory > xs_int
                    memory > xs_ident
                    memory > xs_float
                    memory > xs_operator
                    memory > xscanner
                    seq > @
                      seq
                        xs_ident.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)).apply ((xtoken)))
                        xs_operator.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)).apply (("op%s".mod (xtoken))))
                        xs_float.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)).apply ((((xfloat)).apply ((xtoken)))))
                        xs_int.write
                          [xscanner xtoken]
                            seq > @
                              (((unsupported)).apply ((((xint)).apply ((xtoken)))))
                        xscanner.write (((xScanner)).apply ((((unsupported)).apply ((((unsupported)).apply ("[a-zA-Z_]w*") ((xs_ident)))) ((((unsupported)).apply ("d+.d*") ((xs_float)))) ((((unsupported)).apply ("d+") ((xs_int)))) ((((unsupported)).apply ("=|+|-|*|/") ((xs_operator)))) ((((unsupported)).apply ("s+") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xscanner).xscanner).xscanner)).apply ("")).xpattern)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xscanner).xscan)).apply ("sum = 3*foo + 312.50 + bar"))) ((((unsupported)).apply ((((unsupported)).apply ("sum") ("op=") (3) ("op*") ("foo") ("op+") (312.5) ("op+") ("bar"))) (""))))
                xtest_bug_448951.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xop)) ((((unsupported)).apply ("") ("?") ("*"))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("((.%s):)?z".mod (xop))) ("z")).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (("((.%s):)?z".mod (xop))) ("a:z")).xgroups)).apply)) ((((unsupported)).apply ("a:") ("a"))))
                xtest_bug_725106.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((a)|b)*") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(([ab])|c)*") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((d)|[ab])*") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((a)c|[ab])*") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((a)|b)*?c") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^(([ab])|c)*?d") ("abcd")).xgroups)).apply)) ((((unsupported)).apply ("c") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((d)|[ab])*?c") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^((a)c|[ab])*?c") ("abc")).xgroups)).apply)) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))
                xtest_bug_725149.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)(?:(?=(b)*)c)*") ("abb")).xgroups)).apply)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(a)((?!(b)*))*") ("abb")).xgroups)).apply)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_bug_764548.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)))
                        xpat.write ((((xre).xcompile)).apply ((((xmy_unicode)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xyz"))))
                xtest_finditer.write
                  [xself]
                    memory > xiter
                    memory > xpat
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)).apply (":+") ("a:b::c:::d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xitem).xgroup)).apply (0))) ((xitem)) ((xiter)))) ((((unsupported)).apply (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)).apply (":+"))
                        xiter.write ((((xpat).xfinditer)).apply ("a:b::c:::d") (1) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xitem).xgroup)).apply (0))) ((xitem)) ((xiter)))) ((((unsupported)).apply (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)).apply (":+"))
                        xiter.write (((unsupported)).apply (((xpat).xfinditer)) ("a:b::c:::d") (1) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xitem).xgroup)).apply (0))) ((xitem)) ((xiter)))) ((((unsupported)).apply (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)).apply (":+"))
                        xiter.write (((unsupported)).apply (((xpat).xfinditer)) ("a:b::c:::d") (10) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xitem).xgroup)).apply (0))) ((xitem)) ((xiter)))) ((((unsupported)).apply (":") ("::") (":::"))))
                        xpat.write ((((xre).xcompile)).apply (":+"))
                        xiter.write (((unsupported)).apply (((xpat).xfinditer)) ("a:b::c:::d") (3) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xitem).xgroup)).apply (0))) ((xitem)) ((xiter)))) ((((unsupported)).apply ("::") ("::"))))
                xtest_bug_926075.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((xre).xcompile)).apply ("bug_926075"))) (((((xre).xcompile)).apply ("bug_926075"))))
                xtest_bug_931848.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write "[u002Eu3002uFF0EuFF61]"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xcompile)).apply ((xpattern))).xsplit)).apply ("a.b.c"))) ((((unsupported)).apply ("a") ("b") ("c"))))
                xtest_bug_581080.write
                  [xself]
                    memory > xiter
                    memory > xscanner
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)).apply ("s") ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xnext)).apply ((xiter))).xspan)).apply)) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xiter)))
                        xscanner.write (((((((xre).xcompile)).apply ("s")).xscanner)).apply ("a b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xscanner).xsearch)).apply).xspan)).apply)) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xscanner).xsearch)).apply)))
                xtest_bug_817234.write
                  [xself]
                    memory > xiter
                    seq > @
                      seq
                        xiter.write ((((xre).xfinditer)).apply (".*") ("asdf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xnext)).apply ((xiter))).xspan)).apply)) ((((unsupported)).apply (0) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xnext)).apply ((xiter))).xspan)).apply)) ((((unsupported)).apply (4) (4))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xiter)))
                xtest_bug_6561.write
                  [xself]
                    memory > xdecimal_digits
                    memory > xnot_decimal_digits
                    seq > @
                      seq
                        xdecimal_digits.write (((unsupported)).apply ("u0037") ("u0e58") ("uff10"))
                        (((unsupported)).apply ((xx)) ((xdecimal_digits)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("^d$") ((xx))).xgroup)).apply (0))) ((xx)))
                        xnot_decimal_digits.write (((unsupported)).apply ("u2165") ("u3039") ("u2082") ("u32b4"))
                        (((unsupported)).apply ((xx)) ((xnot_decimal_digits)))
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("^d$") ((xx)))))
                xtest_empty_array.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xtypecode)) ("bBuhHiIlLfd"))
                          seq
                            xa.write ((((xarray).xarray)).apply ((xtypecode)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((xre).xcompile)).apply ("bla")).xmatch)).apply ((xa)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((((xre).xcompile)).apply ("")).xmatch)).apply ((xa))).xgroups)).apply)) ((((unsupported)).apply)))
                xtest_inline_flags.write
                  [xself]
                    memory > xp
                    memory > xupper_char
                    memory > xlower_char
                    memory > xq
                    seq > @
                      seq
                        xupper_char.write "u1ea0"
                        xlower_char.write "u1ea1"
                        xp.write ((((xre).xcompile)).apply ((".".add (xupper_char))) ((((xre).xI).or ((xre).xS))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply ((".".add (xlower_char))) ((((xre).xI).or ((xre).xS))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?i).".add (xupper_char))) (((xre).xS)))
                        xq.write ((((xp).xmatch)).apply (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?i).".add (xlower_char))) (((xre).xS)))
                        xq.write ((((xp).xmatch)).apply (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?is).".add (xupper_char))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?is).".add (xlower_char))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?s)(?i).".add (xupper_char))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xlower_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        xp.write ((((xre).xcompile)).apply (("(?s)(?i).".add (xlower_char))))
                        xq.write ((((xp).xmatch)).apply (("n".add (xupper_char))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("(?ix) ".add (xupper_char))) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("(?ix) ".add (xlower_char))) ((xupper_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((" (?i) ".add (xupper_char))) ((xlower_char)) (((xre).xX)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("(?x) (?i) ".add (xupper_char))) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((" (?x) (?i) ".add (xupper_char))) ((xlower_char)) (((xre).xX)))))
                        xp.write ((xupper_char).add "(?i)")
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((xp)) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r".mod (xp))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        xp.write ((xupper_char).add ("(?i)%s".mod (".?".mul 100)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((xp)) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r (truncated)".mod (((unsupported)).apply ((xp)) ((((unsupported)).apply (20)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xBytesWarning)))
                            xp.write "A(?i)"
                            (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((xp)) ("a"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) (("Flags not at the start of the expression %r".mod (xp))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("(?s).(?i)".add (xupper_char))) (("n".add (xlower_char))))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((("(?i) ".add (xupper_char)).add " (?x)")) ((xlower_char)))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((" (?x) (?i) ".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("^(?i)".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply (("$|(?i)".add (xupper_char))) ((xlower_char)))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((("(?:(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xfullmatch)).apply ((("(^)?(?(1)(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) ((xwarns)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xfullmatch)).apply ((("($)?(?(1)|(?i)".add (xupper_char)).add ")")) ((xlower_char)))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xmessage)))) ("Flags not at the start"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xwarns).xwarnings)) (0)).xfilename)) ((x__file__)))
                xtest_dollar_matches_twice.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        unsupported
                        xpattern.write ((((xre).xcompile)).apply ("$"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("anbn"))) ("anb#n#"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("anbnc"))) ("anbnc#"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("n"))) ("#n#"))
                        xpattern.write ((((xre).xcompile)).apply ("$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("anbn"))) ("a#nb#n#"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("anbnc"))) ("a#nb#nc#"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpattern).xsub)).apply ("#") ("n"))) ("#n#"))
                xtest_bytes_str_mixing.write
                  [xself]
                    memory > xbpat
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)).apply ("."))
                        xbpat.write ((((xre).xcompile)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xpat).xmatch)) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbpat).xmatch)) ("b"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbpat).xsub)) ("b") ("c"))
                xtest_ascii_and_unicode_flag.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) (((xre).xUNICODE)))))
                          seq
                            xpat.write ((((xre).xcompile)).apply ("xc0") (((xflags).or ((xre).xIGNORECASE))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ("xe0"))))
                            xpat.write ((((xre).xcompile)).apply ("w") ((xflags)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        xpat.write ((((xre).xcompile)).apply ("xc0") ((((xre).xASCII).or ((xre).xIGNORECASE))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        xpat.write ((((xre).xcompile)).apply ("(?a)xc0") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        xpat.write ((((xre).xcompile)).apply ("w") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        xpat.write ((((xre).xcompile)).apply ("(?a)w"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) (((xre).xASCII)))))
                          seq
                            xpat.write ((((xre).xcompile)).apply ("xc0") (((xflags).or ((xre).xIGNORECASE))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                            xpat.write ((((xre).xcompile)).apply ("w") ((xflags)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ("xe0"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("w") (((xre).xUNICODE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(?u)w"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("w") ((((xre).xUNICODE).or ((xre).xASCII))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("(?u)w") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("(?a)w") (((xre).xUNICODE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(?au)w"))
                xtest_locale_flag.write
                  [xself]
                    memory > xc
                    memory > xbletter
                    memory > xsletter
                    memory > xbpat
                    memory > xpat
                    memory > xenc
                    seq > @
                      seq
                        xenc.write ((((xlocale).xgetpreferredencoding)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (128) (256))))
                          (((unsupported)).apply ((((unsupported)).apply ((xUnicodeError)) ((xTypeError)))))
                            seq
                              xc.write ((((((xbytes)).apply ((((unsupported)).apply ((xi))))).xdecode)).apply ((xenc)))
                              xsletter.write ((((xc).xlower)).apply)
                              ((xsletter).eq (xc)).if
                                (((unsupported)).apply)
                              xbletter.write ((((xsletter).xencode)).apply ((xenc)))
                              ((((xlen)).apply ((xbletter))).neq 1).if
                                (((unsupported)).apply)
                              (((((xbletter).xdecode)).apply ((xenc))).neq (xsletter)).if
                                (((unsupported)).apply)
                              xbpat.write ((((xre).xescape)).apply ((((xbytes)).apply ((((unsupported)).apply ((xi)))))))
                              (((unsupported)).apply)
                          seq
                            xbletter.write "None: is there a None literal in the EO language?"
                            xbpat.write "A"
                        xpat.write ((((xre).xcompile)).apply ((xbpat)) ((((xre).xLOCALE).or ((xre).xIGNORECASE))))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        xpat.write ((((xre).xcompile)).apply (("(?L)".add (xbpat))) (((xre).xIGNORECASE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        xpat.write ((((xre).xcompile)).apply ((xbpat)) (((xre).xIGNORECASE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        xpat.write ((((xre).xcompile)).apply ("w") (((xre).xLOCALE)))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        xpat.write ((((xre).xcompile)).apply ("(?L)w"))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        xpat.write ((((xre).xcompile)).apply ("w"))
                        (xbletter).if
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpat).xmatch)).apply ((xbletter)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("") (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(?L)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("") ((((xre).xLOCALE).or ((xre).xASCII))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("(?L)") (((xre).xASCII)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xre).xcompile)) ("(?a)") (((xre).xLOCALE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xre).xerror)) (((xre).xcompile)) ("(?aL)"))
                xtest_scoped_flags.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?i:a)b") ("Ab"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?i:a)b") ("aB"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?-i:a)b") ("Ab") (((xre).xIGNORECASE)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?-i:a)b") ("aB") (((xre).xIGNORECASE)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?i:(?-i:a)b)") ("Ab"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?i:(?-i:a)b)") ("aB"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?x: a) b") ("a b"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?x: a) b") (" a b"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?-x: a) b") (" ab") (((xre).xVERBOSE)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?-x: a) b") ("ab") (((xre).xVERBOSE)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("w(?a:W)w") ("xe0xe0xe0"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?a:W(?u:w)W)") ("xe0xe0xe0"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("W(?u:w)W") ("xe0xe0xe0") (((xre).xASCII)))))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?a)(?-a:w)") ("bad inline flags: cannot turn off flags 'a', 'u' and 'L'") (8))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?i-i:a)") ("bad inline flags: flag turned on and off") (5))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?au:a)") ("bad inline flags: flags 'a', 'u' and 'L' are incompatible") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?aL:a)") ("bad inline flags: flags 'a', 'u' and 'L' are incompatible") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-") ("missing flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-+") ("missing flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-z") ("unknown flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-i") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-i)") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-i+") ("missing :") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?-iz") ("unknown flag") (4))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?i:") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?i") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?i+") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?iz") ("unknown flag") (3))
                xtest_bug_6509.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)).apply ("a(w)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply)) ("ac"))) ("bc"))
                        xpat.write ((((xre).xcompile)).apply ("a(.)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply)) ("au1234"))) ("bu1234"))
                        xpat.write ((((xre).xcompile)).apply (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply ("str"))) ("a5"))) ("str"))
                        xpat.write ((((xre).xcompile)).apply ("a(w)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply)) ("ac"))) ("bc"))
                        xpat.write ((((xre).xcompile)).apply ("a(.)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply)) ("axCD"))) ("bxCD"))
                        xpat.write ((((xre).xcompile)).apply (".."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpat).xsub)).apply ((((unsupported)).apply ("bytes"))) ("a5"))) ("bytes"))
                xtest_dealloc.write
                  [xself]
                    memory > xlong_overflow
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlong_overflow.write (((unsupported)).apply (2) (128))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xre).xfinditer)) ("a") ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOverflowError)))))
                          bogusForceDataize.write ((((x_sre).xcompile)).apply ("abc") (0) ((((unsupported)).apply ((xlong_overflow)))) (0) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((x_sre).xcompile)).apply ((((unsupported)).apply)) (0) ((((unsupported)).apply)) (0) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_search_dot_unicode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("123.*-") ("123abc-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("123.*-") ("123xe9-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("123.*-") ("123u20ac-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("123.*-") ("123U0010ffff-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xsearch)).apply ("123.*-") ("123xe9u20acU0010ffff-"))))
                xtest_compile.write
                  [xself]
                    memory > xsame_pattern
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ((((xre).xcompile)).apply ("random pattern"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpattern)) (((xre).xPattern)))
                        xsame_pattern.write ((((xre).xcompile)).apply ((xpattern)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xsame_pattern)) (((xre).xPattern)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xsame_pattern)) ((xpattern)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xre).xcompile)) (0))
                xtest_large_search.write
                  [xself xsize]
                    memory > xs
                    memory > xm
                    seq > @
                      (((unsupported)).apply)
                        xs.write ("a".mul (xsize))
                        xm.write ((((xre).xsearch)).apply ("$") ((xs)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xstart)).apply)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xend)).apply)) ((xsize)))
                xtest_large_subn.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write ("a".mul (xsize))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xn)))) (((((xre).xsubn)).apply ("") ("") ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (((xsize).add 1)))
                xtest_bug_16688.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("(?i)(a)1") ("aa u0100"))) ((((unsupported)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ("(?s).{1,3}") ("u0100u0100")).xspan)).apply)) ((((unsupported)).apply (0) (2))))
                xtest_repeat_minmax_overflow.write
                  [xself]
                    memory > xstring
                    seq > @
                      seq
                        xstring.write ("x".mul 100000)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{65535}") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{,65535}") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{65535,}?") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65535))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{65536}") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{,65536}") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply (".{65536,}?") ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (65536))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{%d}".mod (((unsupported)).apply (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{,%d}".mod (((unsupported)).apply (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{%d,}?".mod (((unsupported)).apply (2) (128)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{%d,%d}".mod (((unsupported)).apply ((((unsupported)).apply (2) (129))) ((((unsupported)).apply (2) (128)))))))
                xtest_repeat_minmax_overflow_maxrepeat.write
                  [xself]
                    memory > xstring
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("requires _sre.MAXREPEAT constant"))
                        xstring.write ("x".mul 100000)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ((".{%d}".mod ((xMAXREPEAT).sub 1))) ((xstring)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xmatch)).apply ((".{,%d}".mod ((xMAXREPEAT).sub 1))) ((xstring))).xspan)).apply)) ((((unsupported)).apply (0) (100000))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ((".{%d,}?".mod ((xMAXREPEAT).sub 1))) ((xstring)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{%d}".mod (xMAXREPEAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{,%d}".mod (xMAXREPEAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xre).xcompile)) ((".{%d,}?".mod (xMAXREPEAT))))
                xtest_backref_group_name_in_exception.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P=<foo>)") ("bad character in group name '<foo>'") (4))
                xtest_group_name_in_exception.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P<?foo>)") ("bad character in group name '?foo'") (4))
                xtest_issue17998.write
                  [xself]
                    memory > xpattern
                    seq > @
                      (((unsupported)).apply ((xreps)) ((((unsupported)).apply ("*") ("+") ("?") ("{1}"))))
                        (((unsupported)).apply ((xmod)) ((((unsupported)).apply ("") ("?"))))
                          seq
                            xpattern.write (((".".add (xreps)).add (xmod)).add "yz")
                            (((unsupported)).apply (((xself).xassertEqual)) ((((((((xre).xcompile)).apply ((xpattern)) (((xre).xS))).xfindall)).apply ("xyz"))) ((((unsupported)).apply ("xyz"))) ((xpattern)))
                            xpattern.write ((((xpattern).xencode)).apply)
                            (((unsupported)).apply (((xself).xassertEqual)) ((((((((xre).xcompile)).apply ((xpattern)) (((xre).xS))).xfindall)).apply ("xyz"))) ((((unsupported)).apply ("xyz"))) ((xpattern)))
                xtest_match_repr.write
                  [xself]
                    memory > xm
                    memory > xpattern
                    seq > @
                      seq
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("[abracadabra]") ((((xS)).apply ("[abracadabra]"))))))
                          seq
                            xm.write ((((xre).xsearch)).apply ("(.+)(.*?)1") ((xstring)))
                            xpattern.write ("<(%s.)?%s object; span=(1, 12), match='abracadabra'>".mod (((unsupported)).apply (((((xtype)).apply ((xm))).x__module__)) (((((xtype)).apply ((xm))).x__qualname__))))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xm)))) ((xpattern)))
                        (((unsupported)).apply ((xstring)) ((((unsupported)).apply ("[abracadabra]") ((((xB)).apply ("[abracadabra]"))) ((((xbytearray)).apply ("[abracadabra]"))) ((((xmemoryview)).apply ("[abracadabra]"))))))
                          seq
                            xm.write ((((xre).xsearch)).apply ("(.+)(.*?)1") ((xstring)))
                            xpattern.write ("<(%s.)?%s object; span=(1, 12), match=b'abracadabra'>".mod (((unsupported)).apply (((((xtype)).apply ((xm))).x__module__)) (((((xtype)).apply ((xm))).x__qualname__))))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xm)))) ((xpattern)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfirst)) ((xsecond)))) ((((xlist)).apply (((((xre).xfinditer)).apply ("(aa)|(bb)") ("aa bb"))))))
                        xpattern.write ("<(%s.)?%s object; span=(0, 2), match='aa'>".mod (((unsupported)).apply (((((xtype)).apply ((xsecond))).x__module__)) (((((xtype)).apply ((xsecond))).x__qualname__))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xfirst)))) ((xpattern)))
                        xpattern.write ("<(%s.)?%s object; span=(3, 5), match='bb'>".mod (((unsupported)).apply (((((xtype)).apply ((xsecond))).x__module__)) (((((xtype)).apply ((xsecond))).x__qualname__))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xsecond)))) ((xpattern)))
                xtest_zerowidth.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("b") ("a::bc"))) ((((unsupported)).apply ("") ("a") ("::") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("b|:+") ("a::bc"))) ((((unsupported)).apply ("") ("a") ("") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(?<!w)(?=w)|:+") ("a::bc"))) ((((unsupported)).apply ("") ("a") ("") ("bc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsplit)).apply ("(?<=w)(?!w)|:+") ("a::bc"))) ((((unsupported)).apply ("a") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("b") ("-") ("a::bc"))) ("-a-::-bc-"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("b|:+") ("-") ("a::bc"))) ("-a---bc-"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xsub)).apply ("(b|:+)") ("[1]") ("a::bc"))) ("[]a[][::][]bc[]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("b|:+") ("a::bc"))) ((((unsupported)).apply ("") ("") ("::") ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("b|w+") ("a::bc"))) ((((unsupported)).apply ("") ("a") ("") ("") ("bc") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xspan)).apply)) ((xm)) (((((xre).xfinditer)).apply ("b|:+") ("a::bc"))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1) (3))) ((((unsupported)).apply (3) (3))) ((((unsupported)).apply (5) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xspan)).apply)) ((xm)) (((((xre).xfinditer)).apply ("b|w+") ("a::bc"))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (3) (3))) ((((unsupported)).apply (3) (5))) ((((unsupported)).apply (5) (5))))))
                xtest_bug_2537.write
                  [xself]
                    memory > xr
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xouter_op)) ((((unsupported)).apply ("{0,}") ("*") ("+") ("{1,187}"))))
                        (((unsupported)).apply ((xinner_op)) ((((unsupported)).apply ("{0,}") ("*") ("?"))))
                          seq
                            xr.write ((((xre).xcompile)).apply (("^((x|y)%s)%s".mod (((unsupported)).apply ((xinner_op)) ((xouter_op))))))
                            xm.write ((((xr).xmatch)).apply ("xyyzy"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (0))) ("xyy"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (1))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply (2))) ("y"))
                xtest_debug_flag.write
                  [xself]
                    memory > xpat
                    memory > xdump
                    seq > @
                      (((unsupported)).apply)
                        xpat.write "(.)(?:[ch]|py)(?(1)$|: )"
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ((xpat)) (((xre).xDEBUG)))
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        xdump.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ((xdump)))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ((xpat)) (((xre).xDEBUG)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ((xdump)))
                xtest_keyword_parameters.write
                  [xself]
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)).apply ("(ab)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xpat).xmatch)) ("abracadabra") (7) (10)).xspan)).apply)) ((((unsupported)).apply (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xpat).xfullmatch)) ("abracadabra") (7) (9)).xspan)).apply)) ((((unsupported)).apply (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xpat).xsearch)) ("abracadabra") (3) (10)).xspan)).apply)) ((((unsupported)).apply (7) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xpat).xfindall)) ("abracadabra") (3) (10))) ((((unsupported)).apply ("ab"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xpat).xsplit)) ("abracadabra") (1))) ((((unsupported)).apply ("") ("ab") ("racadabra"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((((unsupported)).apply (((xpat).xscanner)) ("abracadabra") (3) (10)).xsearch)).apply).xspan)).apply)) ((((unsupported)).apply (7) (9))))
                xtest_bug_20998.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xfullmatch)).apply ("[a-c]+") ("ABC") (((xre).xI))).xspan)).apply)) ((((unsupported)).apply (0) (3))))
                xtest_locale_caching.write
                  [xself]
                    memory > xoldlocale
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)).apply ((xloc)) ((((unsupported)).apply ("en_US.iso88591") ("en_US.utf8"))))
                          (((unsupported)).apply (((xlocale).xError)))
                            bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ((xloc)))
                            bogusForceDataize.write ((((xself).xskipTest)).apply (("test needs %s locale".mod (xloc))))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        bogusForceDataize.write ((((xself).xcheck_en_US_iso88591)).apply)
                        bogusForceDataize.write ((((xself).xcheck_en_US_utf8)).apply)
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        bogusForceDataize.write ((((xself).xcheck_en_US_utf8)).apply)
                        bogusForceDataize.write ((((xself).xcheck_en_US_iso88591)).apply)
                xcheck_en_US_iso88591.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ("en_US.iso88591"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("xc5xe5") ("xc5xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("xc5") ("xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("xe5") ("xc5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?Li)xc5xe5") ("xc5xe5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?Li)xc5") ("xe5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?Li)xe5") ("xc5"))))
                xcheck_en_US_utf8.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ("en_US.utf8"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("xc5xe5") ("xc5xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("xc5") ("xe5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("xe5") ("xc5") ((((xre).xL).or ((xre).xI))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ("(?Li)xc5xe5") ("xc5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?Li)xc5") ("xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xre).xmatch)).apply ("(?Li)xe5") ("xc5"))))
                xtest_locale_compiled.write
                  [xself]
                    memory > xp2
                    memory > xp4
                    memory > xoldlocale
                    memory > xp3
                    memory > xp1
                    seq > @
                      seq
                        xoldlocale.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xlocale).xsetlocale)) (((xlocale).xLC_CTYPE)) ((xoldlocale)))
                        (((unsupported)).apply ((xloc)) ((((unsupported)).apply ("en_US.iso88591") ("en_US.utf8"))))
                          (((unsupported)).apply (((xlocale).xError)))
                            bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ((xloc)))
                            bogusForceDataize.write ((((xself).xskipTest)).apply (("test needs %s locale".mod (xloc))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ("en_US.iso88591"))
                        xp1.write ((((xre).xcompile)).apply ("xc5xe5") ((((xre).xL).or ((xre).xI))))
                        xp2.write ((((xre).xcompile)).apply ("[axc5][axe5]") ((((xre).xL).or ((xre).xI))))
                        xp3.write ((((xre).xcompile)).apply ("[azxc5][azxe5]") ((((xre).xL).or ((xre).xI))))
                        xp4.write ((((xre).xcompile)).apply ("[^xc5][^xe5]") ((((xre).xL).or ((xre).xI))))
                        (((unsupported)).apply ((xp)) ((((unsupported)).apply ((xp1)) ((xp2)) ((xp3)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ("xc5xe5"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ("xe5xe5"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ("xc5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp4).xmatch)).apply ("xe5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp4).xmatch)).apply ("xe5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp4).xmatch)).apply ("xc5xc5"))))
                        bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ("en_US.utf8"))
                        (((unsupported)).apply ((xp)) ((((unsupported)).apply ((xp1)) ((xp2)) ((xp3)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ("xc5xe5"))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp).xmatch)).apply ("xe5xe5"))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp).xmatch)).apply ("xc5xc5"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp4).xmatch)).apply ("xe5xc5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp4).xmatch)).apply ("xe5xe5"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xp4).xmatch)).apply ("xc5xc5"))))
                xtest_error.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ("(u20ac))"))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xerr).xpattern)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpattern)) ("(u20ac))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpos)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xcolno)) (4))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xerr).xmsg)) ((((xstr)).apply ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" at position 3") ((((xstr)).apply ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (" at position 3") (((xerr).xmsg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ("(xa4))"))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xerr).xpattern)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpattern)) ("(xa4))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpos)) (3))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xre).xcompile)).apply ((((unsupported)).apply)) (((xre).xVERBOSE)))
                        xerr.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xpos)) (77))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xlineno)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xcolno)) (17))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xerr).xmsg)) ((((xstr)).apply ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" at position 77") ((((xstr)).apply ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("(line 5, column 17)") ((((xstr)).apply ((xerr)))))
                xtest_misc_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("((a|b)") ("missing ), unterminated subpattern") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(a|b))") ("unbalanced parenthesis") (5))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?P") ("unexpected end of pattern") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?z)") ("unknown extension ?z") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?iz)") ("unknown flag") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?i") ("missing -, : or )") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?#abc") ("missing ), unterminated comment") (0))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?<") ("unexpected end of pattern") (3))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?<>)") ("unknown extension ?<>") (1))
                        bogusForceDataize.write ((((xself).xcheckPatternError)).apply ("(?") ("unexpected end of pattern") (2))
                xtest_enum.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ASCII") ((((xstr)).apply (((xre).xA)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("DOTALL") ((((xstr)).apply (((xre).xS)))))
                xtest_pattern_compare.write
                  [xself]
                    memory > xpattern3
                    memory > xpattern4
                    memory > xpattern1
                    memory > xpattern2
                    seq > @
                      seq
                        xpattern1.write ((((xre).xcompile)).apply ("abc") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpattern1)) ((xpattern1)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xpattern1).neq (xpattern1))))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        xpattern2.write ((((xre).xcompile)).apply ("abc") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xpattern2)))) ((((xhash)).apply ((xpattern1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpattern2)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        xpattern3.write ((((xre).xcompile)).apply ("XYZ") (((xre).xIGNORECASE)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xpattern3)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        xpattern4.write ((((xre).xcompile)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xpattern4)) ((xpattern1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                xtest_pattern_compare_bytes.write
                  [xself]
                    memory > xpattern3
                    memory > xpattern1
                    memory > xpattern2
                    seq > @
                      seq
                        xpattern1.write ((((xre).xcompile)).apply ("abc"))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        xpattern2.write ((((xre).xcompile)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xpattern2)))) ((((xhash)).apply ((xpattern1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpattern2)) ((xpattern1)))
                        bogusForceDataize.write ((((xre).xpurge)).apply)
                        xpattern3.write ((((xre).xcompile)).apply ("abc"))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xBytesWarning)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xpattern3)) ((xpattern1)))
                xtest_bug_29444.write
                  [xself]
                    memory > xs
                    memory > xm
                    memory > xm2
                    seq > @
                      seq
                        xs.write (((xbytearray)).apply ("abcdefgh"))
                        xm.write ((((xre).xsearch)).apply ("[a-h]+") ((xs)))
                        xm2.write ((((xre).xsearch)).apply ("[e-h]+") ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply)) ("abcdefgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm2).xgroup)).apply)) ("efgh"))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply)))) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xgroup)).apply)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm2).xgroup)).apply)) (""))
                xtest_bug_34294.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write "atx"
                        xp.write "b(?=(t)|(x))x"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xre).xsearch)).apply ((xp)) ((xs))).xgroups)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("x"))))
                        xs.write "ab"
                        xp.write "(?=(.)(.)?)"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ((xp)) ((xs)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("b") (""))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xgroups)).apply)) ((xm)) (((((xre).xfinditer)).apply ((xp)) ((xs)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))))
                        xp.write "(?=<(?P<tag>w+)/?>(?:(?P<text>.+?)</(?P=tag)>)?)"
                        xs.write "<test><foo2/></test>"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ((xp)) ((xs)))) ((((unsupported)).apply ((((unsupported)).apply ("test") ("<foo2/>"))) ((((unsupported)).apply ("foo2") (""))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xgroupdict)).apply)) ((xm)) (((((xre).xfinditer)).apply ((xp)) ((xs)))))) ((((unsupported)).apply ((((unsupported)).apply ("tag") ("test") ("text") ("<foo2/>"))) ((((unsupported)).apply ("tag") ("foo2") ("text") ("None: is there a None literal in the EO language?"))))))
                        xs.write "<test>Hello</test><foo/>"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xgroupdict)).apply)) ((xm)) (((((xre).xfinditer)).apply ((xp)) ((xs)))))) ((((unsupported)).apply ((((unsupported)).apply ("tag") ("test") ("text") ("Hello"))) ((((unsupported)).apply ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))))))
                        xs.write "<test>Hello</test><foo/><foo/>"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xm).xgroupdict)).apply)) ((xm)) (((((xre).xfinditer)).apply ((xp)) ((xs)))))) ((((unsupported)).apply ((((unsupported)).apply ("tag") ("test") ("text") ("Hello"))) ((((unsupported)).apply ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("tag") ("foo") ("text") ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck.write
                  [xself xpattern xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xre).xcompile)).apply ((xpattern)))))) ((xexpected)))
                xcheck_flags.write
                  [xself xpattern xflags xexpected]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xre).xcompile)).apply ((xpattern)) ((xflags)))))) ((xexpected)))
                xtest_without_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("random pattern") ("re.compile('random pattern')"))
                xtest_single_flag.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") (((xre).xIGNORECASE)) ("re.compile('random pattern', re.IGNORECASE)"))
                xtest_multiple_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") (((((xre).xI).or ((xre).xS)).or ((xre).xX))) ("re.compile('random pattern', re.IGNORECASE|re.DOTALL|re.VERBOSE)"))
                xtest_unicode_flag.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") (((xre).xU)) ("re.compile('random pattern')"))
                        bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") (((((xre).xI).or ((xre).xS)).or ((xre).xU))) ("re.compile('random pattern', re.IGNORECASE|re.DOTALL)"))
                xtest_inline_flags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("(?i)pattern") ("re.compile('(?i)pattern', re.IGNORECASE)"))
                xtest_unknown_flags.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") (1191936) ("re.compile('random pattern', 0x123000)"))
                        bogusForceDataize.write ((((xself).xcheck_flags)).apply ("random pattern") ((1191936.or ((xre).xI))) ("re.compile('random pattern', re.IGNORECASE|0x123000)"))
                xtest_bytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)).apply ("bytes pattern") ("re.compile(b'bytes pattern')"))
                        bogusForceDataize.write ((((xself).xcheck_flags)).apply ("bytes pattern") (((xre).xA)) ("re.compile(b'bytes pattern', re.ASCII)"))
                xtest_locale.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_flags)).apply ("bytes pattern") (((xre).xL)) ("re.compile(b'bytes pattern', re.LOCALE)"))
                xtest_quotes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck)).apply ("random \"double quoted\" pattern") ("re.compile('random \"double quoted\" pattern')"))
                        bogusForceDataize.write ((((xself).xcheck)).apply ("random 'single quoted' pattern") ("re.compile(\"random 'single quoted' pattern\")"))
                        bogusForceDataize.write ((((xself).xcheck)).apply ("both 'single' and \"double\" quotes") ("re.compile('both \\'single\\' and \"double\" quotes')"))
                xtest_long_pattern.write
                  [xself]
                    memory > xr
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ("Very %spattern".mod ("long ".mul 1000))
                        xr.write (((xrepr)).apply (((((xre).xcompile)).apply ((xpattern)))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xlen)).apply ((xr)))) (300))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xr)) ((((unsupported)).apply (30))))) ("re.compile('Very long long lon"))
                        xr.write (((xrepr)).apply (((((xre).xcompile)).apply ((xpattern)) (((xre).xI)))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xlen)).apply ((xr)))) (300))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xr)) ((((unsupported)).apply (30))))) ("re.compile('Very long long lon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xr)) ((((unsupported)).apply ((16.neg)))))) (", re.IGNORECASE)"))
                xtest_flags_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xre).xI)))) ("re.IGNORECASE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xre).xI).or ((xre).xS)).or ((xre).xX))))) ("re.IGNORECASE|re.DOTALL|re.VERBOSE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((xre).xI).or ((xre).xS)).or ((xre).xX)).or (((unsupported)).apply (1) (20)))))) ("re.IGNORECASE|re.DOTALL|re.VERBOSE|0x100000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xre).xI).neg)))) ("~re.IGNORECASE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((xre).xI).or ((xre).xS)).or ((xre).xX)).neg)))) ("~(re.IGNORECASE|re.DOTALL|re.VERBOSE)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((((xre).xI).or ((xre).xS)).or ((xre).xX)).or (((unsupported)).apply (1) (20))).neg)))) ("~(re.IGNORECASE|re.DOTALL|re.VERBOSE|0x100000)"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_overlap_table.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((xsre_compile).x_generate_overlap_table)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (""))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("a"))) ((((unsupported)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("abcd"))) ((((unsupported)).apply (0) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("aaaa"))) ((((unsupported)).apply (0) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("ababba"))) ((((unsupported)).apply (0) (0) (1) (2) (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("abcabdac"))) ((((unsupported)).apply (0) (0) (0) (1) (2) (0) (1) (0))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_re_benchmarks.write
                  [xself]
                    memory > xp
                    memory > xs2
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xpattern)) ((xs)))) ((xbenchmarks)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpattern)) ((xs)))))
                            seq
                              xp.write ((((xre).xcompile)).apply ((xpattern)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xsearch)).apply ((xs)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ((xs)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xfullmatch)).apply ((xs)))))
                              xs2.write (((" ".mul 10000).add (xs)).add (" ".mul 10000))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xsearch)).apply ((xs2)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ((xs2)) (10000))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xmatch)).apply ((xs2)) (10000) ((10000.add (((xlen)).apply ((xs))))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xfullmatch)).apply ((xs2)) (10000) ((10000.add (((xlen)).apply ((xs))))))))
                xtest_re_tests.write
                  [xself]
                    memory > xexpected
                    memory > xgi
                    memory > xoutcome
                    memory > xbpat
                    memory > xrepl
                    memory > xobj
                    memory > xresult
                    memory > xvardict
                    memory > xbs
                    memory > xpattern
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xt)) ((xtests)))
                          seq
                            (((unsupported)).apply ((xpattern)) ((xs)) ((xoutcome)) ((xrepl)) ((xexpected)) ("None: is there a None literal in the EO language?"))
                            ((((xlen)).apply ((xt))).eq 5).if
                              (((unsupported)).apply ((((unsupported)).apply ((xpattern)) ((xs)) ((xoutcome)) ((xrepl)) ((xexpected)))) ((xt)))
                              ((((xlen)).apply ((xt))).eq 3).if
                                (((unsupported)).apply ((((unsupported)).apply ((xpattern)) ((xs)) ((xoutcome)))) ((xt)))
                                (((unsupported)).apply ((((xValueError)).apply ("Test tuples should have 3 or 5 fields") ((xt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpattern)) ((xs)))))
                              seq
                                ((xoutcome).eq (xSYNTAX_ERROR)).if
                                  seq
                                    (((unsupported)).apply (((((xself).xassertRaises)).apply (((xre).xerror)))))
                                      bogusForceDataize.write ((((xre).xcompile)).apply ((xpattern)))
                                    (((unsupported)).apply)
                                xobj.write ((((xre).xcompile)).apply ((xpattern)))
                                xresult.write ((((xobj).xsearch)).apply ((xs)))
                                ((xoutcome).eq (xFAIL)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xresult)) ("Succeeded incorrectly"))
                                    (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xsubTest)).apply)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((xresult)) ("Failed incorrectly"))
                                    (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)))) (((((xresult).xspan)).apply (0))))
                                    xvardict.write (((unsupported)).apply ("found") (((((xresult).xgroup)).apply (0))) ("groups") (((((xresult).xgroup)).apply)) ("flags") ((((xresult).xre).xflags)))
                                    (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (100))))
                                      seq
                                        (((unsupported)).apply ((xIndexError)))
                                          seq
                                            xgi.write ((((xresult).xgroup)).apply ((xi)))
                                            (((unsupported)).apply ((xgi)) ("None: is there a None literal in the EO language?")).if
                                              xgi.write "None"
                                          xgi.write "Error"
                                        (((unsupported)).apply ((((unsupported)).apply ((xvardict)) (("g%d".mod (xi))))) ((xgi)))
                                    (((unsupported)).apply ((xi)) (((((((xresult).xre).xgroupindex).xkeys)).apply)))
                                      seq
                                        (((unsupported)).apply ((xIndexError)))
                                          seq
                                            xgi.write ((((xresult).xgroup)).apply ((xi)))
                                            (((unsupported)).apply ((xgi)) ("None: is there a None literal in the EO language?")).if
                                              xgi.write "None"
                                          xgi.write "Error"
                                        (((unsupported)).apply ((((unsupported)).apply ((xvardict)) ((xi)))) ((xgi)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xrepl)) ((xvardict)))) ((xexpected)) ("grouping error"))
                                (((unsupported)).apply ((xUnicodeEncodeError)))
                                  seq
                                    xbpat.write (((xbytes)).apply ((xpattern)) ("ascii"))
                                    xbs.write (((xbytes)).apply ((xs)) ("ascii"))
                                  seq
                                    (((unsupported)).apply (((((xself).xsubTest)).apply ("bytes pattern match"))))
                                      seq
                                        xobj.write ((((xre).xcompile)).apply ((xbpat)))
                                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xobj).xsearch)).apply ((xbs)))))
                                    (((unsupported)).apply (((((xself).xsubTest)).apply ("locale-sensitive match"))))
                                      seq
                                        xobj.write ((((xre).xcompile)).apply ((xbpat)) (((xre).xLOCALE)))
                                        xresult.write ((((xobj).xsearch)).apply ((xbs)))
                                        (((unsupported)).apply ((xresult)) ("None: is there a None literal in the EO language?")).if
                                          bogusForceDataize.write (((xprint)).apply ("=== Fails on locale-sensitive match") ((xt)))
                                ((((((unsupported)).apply ((xpattern)) ((((unsupported)).apply (2)))).neq "B").and ((((unsupported)).apply ((xpattern)) ((((unsupported)).apply ((2.neg))))).neq "B")).and (((unsupported)).apply ((xresult)) ("None: is there a None literal in the EO language?"))).if
                                  (((unsupported)).apply (((((xself).xsubTest)).apply ("range-limited match"))))
                                    seq
                                      xobj.write ((((xre).xcompile)).apply ((xpattern)))
                                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xobj).xsearch)).apply ((xs)) ((xstart)) (((xend).add 1)))))
                                (((unsupported)).apply (((((xself).xsubTest)).apply ("case-insensitive match"))))
                                  seq
                                    xobj.write ((((xre).xcompile)).apply ((xpattern)) (((xre).xIGNORECASE)))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xobj).xsearch)).apply ((xs)))))
                                (((unsupported)).apply (((((xself).xsubTest)).apply ("unicode-sensitive match"))))
                                  seq
                                    xobj.write ((((xre).xcompile)).apply ((xpattern)) (((xre).xUNICODE)))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xobj).xsearch)).apply ((xs)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)