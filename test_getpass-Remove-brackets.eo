memory > xfallback
memory > xlist
memory > xBytesIO
memory > xIOError
memory > xopen
memory > xTextIOWrapper
memory > xsupport
memory > xstderr
memory > xEOFError
memory > xos_open
memory > xgetpass
memory > x__name__
memory > xAttributeError
memory > xImportError
memory > xfileio
memory > xtextio
memory > xgetpw
memory > xtcgetattr
memory > xx
memory > xmock
memory > xos
memory > xtcsetattr
memory > xstdin
memory > xStringIO
memory > xunittest
memory > xuid
[] > test_getpass
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_uses_stdin_as_default_input
        memory > xtest_username_falls_back_to_pwd
        memory > xtest_falls_back_to_stdin
        memory > xpwd
        memory > xtest_username_takes_username_from_env
        memory > xtest_username_priorities_of_env_values
        memory > xtest_trims_trailing_newline
        memory > xtest_resets_termios
        memory > xtest_uses_stderr_as_default
        memory > xtest_flushes_stream_after_input
        memory > xtest_flushes_stream_after_prompt
        memory > xtermios
        memory > xtest_falls_back_to_fallback_if_termios_raises
        memory > xtest_uses_tty_directly
        memory > xtest_raises_on_empty_input
        memory > xtest_uses_stdin_as_different_locale
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xtermios.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xpwd.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xmock).xpatch)).apply ("os.environ"))))
              seq
                xtest_username_takes_username_from_env.write
                  [xself xenviron]
                    memory > xexpected_name
                    seq > @
                      seq
                        xexpected_name.write "some_name"
                        (((unsupported)).apply ((((xenviron).xget).xreturn_value)) ((xexpected_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_name)) (((xgetpass).xgetuser)))
                xtest_username_priorities_of_env_values.write
                  [xself xenviron]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xenviron).xget).xreturn_value)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xImportError)))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xenviron).xget).xcall_args_list)) ((((unsupported)).apply (((((xmock).xcall)).apply ((xx)))) ((xx)) ((((unsupported)).apply ("LOGNAME") ("USER") ("LNAME") ("USERNAME"))))))
                xtest_username_falls_back_to_pwd.write
                  [xself xenviron]
                    memory > xexpected_name
                    seq > @
                      seq
                        xexpected_name.write "some_name"
                        (((unsupported)).apply ((((xenviron).xget).xreturn_value)) ("None: is there a None literal in the EO language?"))
                        (xpwd).if
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("os.getuid"))) ((xuid)) (((((xmock).xpatch)).apply ("pwd.getpwuid"))) ((xgetpw)))
                            seq
                              (((unsupported)).apply (((xuid).xreturn_value)) (42))
                              (((unsupported)).apply (((xgetpw).xreturn_value)) ((((unsupported)).apply ((xexpected_name)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_name)) (((xgetpass).xgetuser)))
                              bogusForceDataize.write ((((xgetpw).xassert_called_once_with)).apply (42))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xImportError)) (((xgetpass).xgetuser)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_flushes_stream_after_prompt.write
                  [xself]
                    memory > xinput
                    memory > xstream
                    seq > @
                      seq
                        xstream.write (((unsupported)).apply (((xmock).xMock)) ((xStringIO)))
                        xinput.write (((xStringIO)).apply ("input_string"))
                        (((unsupported)).apply (((xgetpass).x_raw_input)) ("some_prompt") ((xstream)) ((xinput)))
                        unsupported
                xtest_uses_stderr_as_default.write
                  [xself]
                    memory > xinput
                    memory > xprompt
                    seq > @
                      seq
                        xinput.write (((xStringIO)).apply ("input_string"))
                        xprompt.write "some_prompt"
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("sys.stderr"))) ((xstderr)))
                          seq
                            (((unsupported)).apply (((xgetpass).x_raw_input)) ((xprompt)) ((xinput)))
                            bogusForceDataize.write (((((xstderr).xwrite).xassert_called_once_with)).apply ((xprompt)))
                xtest_uses_stdin_as_default_input.write
                  [xself xmock_input]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xmock_input).xreadline).xreturn_value)) ("input_string"))
                        (((unsupported)).apply (((xgetpass).x_raw_input)) ((xStringIO)))
                        unsupported
                xtest_uses_stdin_as_different_locale.write
                  [xself xmock_input]
                    memory > xstream
                    seq > @
                      (((unsupported)).apply)
                        xstream.write (((unsupported)).apply ((xTextIOWrapper)) ((xBytesIO)) ("ascii"))
                        (((unsupported)).apply ((((xmock_input).xreadline).xreturn_value)) ("HasÅ‚o: "))
                        (((unsupported)).apply (((xgetpass).x_raw_input)) ("HasÅ‚o: ") ((xstream)))
                        unsupported
                xtest_raises_on_empty_input.write
                  [xself]
                    memory > xinput
                    seq > @
                      seq
                        xinput.write (((xStringIO)).apply (""))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xEOFError)) (((xgetpass).x_raw_input)) ((xinput)))
                xtest_trims_trailing_newline.write
                  [xself]
                    memory > xinput
                    seq > @
                      seq
                        xinput.write (((xStringIO)).apply ("testn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("test") ((((unsupported)).apply (((xgetpass).x_raw_input)) ((xinput)))))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xtermios)) ("tests require system with termios"))))
              seq
                xtest_uses_tty_directly.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("os.open"))) ((xopen)) (((((xmock).xpatch)).apply ("io.FileIO"))) ((xfileio)) (((((xmock).xpatch)).apply ("io.TextIOWrapper"))) ((xtextio)))
                        seq
                          (((unsupported)).apply (((xopen).xreturn_value)) ("None: is there a None literal in the EO language?"))
                          unsupported
                          bogusForceDataize.write ((((xopen).xassert_called_once_with)).apply ("/dev/tty") ((((xos).xO_RDWR).or ((xos).xO_NOCTTY))))
                          bogusForceDataize.write ((((xfileio).xassert_called_once_with)).apply (((xopen).xreturn_value)) ("w+"))
                          bogusForceDataize.write ((((xtextio).xassert_called_once_with)).apply (((xfileio).xreturn_value)))
                xtest_resets_termios.write
                  [xself]
                    memory > xfake_attrs
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("os.open"))) ((xopen)) (((((xmock).xpatch)).apply ("io.FileIO"))) (((((xmock).xpatch)).apply ("io.TextIOWrapper"))) (((((xmock).xpatch)).apply ("termios.tcgetattr"))) ((xtcgetattr)) (((((xmock).xpatch)).apply ("termios.tcsetattr"))) ((xtcsetattr)))
                        seq
                          (((unsupported)).apply (((xopen).xreturn_value)) (3))
                          xfake_attrs.write (((unsupported)).apply (255) (255) (255) (255) (255))
                          (((unsupported)).apply (((xtcgetattr).xreturn_value)) ((((xlist)).apply ((xfake_attrs)))))
                          unsupported
                          bogusForceDataize.write ((((xtcsetattr).xassert_called_with)).apply (3) (((xmock).xANY)) ((xfake_attrs)))
                xtest_falls_back_to_fallback_if_termios_raises.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("os.open"))) ((xopen)) (((((xmock).xpatch)).apply ("io.FileIO"))) ((xfileio)) (((((xmock).xpatch)).apply ("io.TextIOWrapper"))) ((xtextio)) (((((xmock).xpatch)).apply ("termios.tcgetattr"))) (((((xmock).xpatch)).apply ("termios.tcsetattr"))) ((xtcsetattr)) (((((xmock).xpatch)).apply ("getpass.fallback_getpass"))) ((xfallback)))
                        seq
                          (((unsupported)).apply (((xopen).xreturn_value)) (3))
                          (((unsupported)).apply (((xfileio).xreturn_value)) ((xBytesIO)))
                          (((unsupported)).apply (((xtcsetattr).xside_effect)) (((xtermios).xerror)))
                          unsupported
                          bogusForceDataize.write ((((xfallback).xassert_called_once_with)).apply ("Password: ") (((xtextio).xreturn_value)))
                xtest_flushes_stream_after_input.write
                  [xself]
                    memory > xmock_stream
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("os.open"))) ((xopen)) (((((xmock).xpatch)).apply ("io.FileIO"))) (((((xmock).xpatch)).apply ("io.TextIOWrapper"))) (((((xmock).xpatch)).apply ("termios.tcgetattr"))) (((((xmock).xpatch)).apply ("termios.tcsetattr"))))
                        seq
                          (((unsupported)).apply (((xopen).xreturn_value)) (3))
                          xmock_stream.write (((unsupported)).apply (((xmock).xMock)) ((xStringIO)))
                          (((unsupported)).apply (((xgetpass).xunix_getpass)) ((xmock_stream)))
                          unsupported
                xtest_falls_back_to_stdin.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("os.open"))) ((xos_open)) ((((unsupported)).apply (((xmock).xpatch)) ("sys.stdin") ((xStringIO)))) ((xstdin)))
                        seq
                          (((unsupported)).apply (((xos_open).xside_effect)) ((xIOError)))
                          (((unsupported)).apply ((((xstdin).xfileno).xside_effect)) ((xAttributeError)))
                          (((unsupported)).apply (((xsupport).xcaptured_stderr)) ((xstderr)))
                            (((unsupported)).apply (((((xself).xassertWarns)).apply (((xgetpass).xGetPassWarning)))))
                              unsupported
                          unsupported
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("Warning") (((xstderr).xgetvalue)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("Password:") (((xstderr).xgetvalue)))
            ((x__name__).eq "__main__").if
              unsupported