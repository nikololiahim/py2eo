memory > xk
memory > xlayer
memory > xenumerate
memory > xgeos_geom
memory > xValueError
memory > xstr
memory > xfld
memory > xrange
memory > xOFTInteger
memory > xIndexError
memory > xPath
memory > xi
memory > xOFTDateTime
memory > xGDALException
memory > xfloat
memory > xos
memory > xfeat
memory > xEnvelope
memory > xfld_name
memory > xTestDS
memory > xfid
memory > xdatetime
memory > xDataSource
memory > xlist
memory > xOFTReal
memory > xfld_value
memory > xOFTString
memory > xget_ds_file
memory > xf
memory > xre
memory > xgeom
memory > xhasattr
memory > xslice
memory > xv
memory > xTEST_DATA
memory > xzip
memory > xsource
memory > xGEOSGeometry
memory > xlen
memory > xSimpleTestCase
memory > xTypeError
memory > xOGRGeometry
[] > test_ds
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_ds_input_pathlib
        memory > xtest06_spatial_filter
        memory > xtest07_integer_overflow
        memory > xbad_ds
        memory > xtest03b_layer_slice
        memory > xtest02_invalid_shp
        memory > xtest03a_layers
        memory > xds_list
        memory > xwgs_84_wkt
        memory > xtest01_valid_shp
        memory > xtest03c_layer_references
        memory > xwgs_84_wkt_regex
        memory > xtest05_geometries
        memory > xdatetime_format
        memory > xtest04_features
        memory > xtest_nonexistent_field
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xwgs_84_wkt.write "GEOGCS[\"GCS_WGS_1984\",DATUM[\"WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]]"
            xwgs_84_wkt_regex.write "^GEOGCS[\"(GCS_)?WGS[ _](19)?84\".*$"
            xdatetime_format.write "%Y-%m-%dT%H:%M:%S"
            xds_list.write (((unsupported)).apply ((((unsupported)).apply ((xTestDS)) ("test_point") (5) (3) ("POINT") (1) ("ESRI Shapefile") ((((unsupported)).apply ("dbl") ((xOFTReal)) ("int") ((xOFTInteger)) ("str") ((xOFTString)))) ((((unsupported)).apply ((1.35011.neg)) (0.166623) ((0.524093.neg)) (0.824508))) ((xwgs_84_wkt)) ((((unsupported)).apply ("dbl") ((((unsupported)).apply ((((xfloat)).apply ((xi)))) ((xi)) ((((xrange)).apply (1) (6))))) ("int") ((((xlist)).apply ((((xrange)).apply (1) (6))))) ("str") ((((unsupported)).apply ((((xstr)).apply ((xi)))) ((xi)) ((((xrange)).apply (1) (6))))))) ((((xrange)).apply (5))))) ((((unsupported)).apply ((xTestDS)) ("test_vrt") ("vrt") (3) (3) ("POINT") ("Point25D") ("OGR_VRT") ((((unsupported)).apply ("POINT_X") ((xOFTString)) ("POINT_Y") ((xOFTString)) ("NUM") ((xOFTString)))) ((((unsupported)).apply (1.0) (2.0) (100.0) (523.5))) ((((unsupported)).apply ("POINT_X") ((((unsupported)).apply ("1.0") ("5.0") ("100.0"))) ("POINT_Y") ((((unsupported)).apply ("2.0") ("23.0") ("523.5"))) ("NUM") ((((unsupported)).apply ("5") ("17") ("23"))))) ((((xrange)).apply (1) (4))))) ((((unsupported)).apply ((xTestDS)) ("test_poly") (3) (3) ("POLYGON") (3) ("ESRI Shapefile") ((((unsupported)).apply ("float") ((xOFTReal)) ("int") ((xOFTInteger)) ("str") ((xOFTString)))) ((((unsupported)).apply ((1.01513.neg)) ((0.558245.neg)) (0.161876) (0.839637))) ((xwgs_84_wkt)))) ((((unsupported)).apply ((xTestDS)) ("has_nulls") (3) (6) ("POLYGON") (3) ("GeoJSON") ("geojson") ((((unsupported)).apply ("uuid") ((xOFTString)) ("name") ((xOFTString)) ("num") ((xOFTReal)) ("integer") ((xOFTInteger)) ("datetime") ((xOFTDateTime)) ("boolean") ((xOFTInteger)))) ((((unsupported)).apply ((75.274200.neg)) (39.846504) ((74.959717.neg)) (40.119040))) ((((unsupported)).apply ("uuid") ((((unsupported)).apply ("1378c26f-cbe6-44b0-929f-eb330d4991f5") ("fa2ba67c-a135-4338-b924-a9622b5d869f") ("4494c1f3-55ab-4256-b365-12115cb388d5"))) ("name") ((((unsupported)).apply ("Philadelphia") ("None: is there a None literal in the EO language?") ("north"))) ("num") ((((unsupported)).apply (1.001) ("None: is there a None literal in the EO language?") (0.0))) ("integer") ((((unsupported)).apply (5) ("None: is there a None literal in the EO language?") (8))) ("boolean") ((((unsupported)).apply (TRUE) ("None: is there a None literal in the EO language?") (FALSE))) ("datetime") ((((unsupported)).apply (((((xdatetime).xstrptime)).apply ("1994-08-14T11:32:14") ((xdatetime_format)))) ("None: is there a None literal in the EO language?") (((((xdatetime).xstrptime)).apply ("2018-11-29T03:02:52") ((xdatetime_format)))))))) ((((xrange)).apply (3))))))
            xbad_ds.write (((unsupported)).apply ((((xTestDS)).apply ("foo"))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest01_valid_shp.write
                  [xself]
                    memory > xmsg
                    memory > xds
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xsource)) ((xds_list)))
                          seq
                            xds.write (((xDataSource)).apply (((xsource).xds)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xlen)).apply ((xds)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xds)) (((xds).xname)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xdriver)) ((((xstr)).apply (((xds).xdriver)))))
                            xmsg.write "Index out of range when accessing layers in a datasource: %s."
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) (((xmsg).mod (((xlen)).apply ((xds))))))))
                              bogusForceDataize.write ((((xds).x__getitem__)).apply ((((xlen)).apply ((xds)))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) ("Invalid OGR layer name given: invalid."))))
                              bogusForceDataize.write ((((xds).x__getitem__)).apply ("invalid"))
                xtest_ds_input_pathlib.write
                  [xself]
                    memory > xds
                    memory > xtest_shp
                    seq > @
                      seq
                        xtest_shp.write (((xPath)).apply ((((xget_ds_file)).apply ("test_point") ("shp"))))
                        xds.write (((xDataSource)).apply ((xtest_shp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xds)))) (1))
                xtest02_invalid_shp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xsource)) ((xbad_ds)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xGDALException)))))
                            bogusForceDataize.write (((xDataSource)).apply (((xsource).xds)))
                xtest03a_layers.write
                  [xself]
                    memory > xfeat
                    memory > xmsg
                    memory > xds
                    memory > xflds
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xsource)) ((xds_list)))
                          seq
                            xds.write (((xDataSource)).apply (((xsource).xds)))
                            (((unsupported)).apply ((xlayer)) ((xds)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xlayer).xname)) (((xsource).xname)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xlayer)))) (((xsource).xname)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlayer)))) (((xsource).xnfeat)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xnfld)) (((xlayer).xnum_fields)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xnfld)) ((((xlen)).apply (((xlayer).xfields)))))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xlayer).xextent)) ((xEnvelope)))
                                bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xsource).xextent)) (0))) ((((xlayer).xextent).xmin_x)) (5))
                                bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xsource).xextent)) (1))) ((((xlayer).xextent).xmin_y)) (5))
                                bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xsource).xextent)) (2))) ((((xlayer).xextent).xmax_x)) (5))
                                bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xsource).xextent)) (3))) ((((xlayer).xextent).xmax_y)) (5))
                                xflds.write ((xlayer).xfields)
                                (((unsupported)).apply ((xf)) ((xflds)))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) (((xsource).xfields)))
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) ("Negative indices are not allowed on OGR Layers."))))
                                  bogusForceDataize.write ((((xlayer).x__getitem__)).apply ((1.neg)))
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) ("Invalid feature id: 50000."))))
                                  bogusForceDataize.write ((((xlayer).x__getitem__)).apply (50000))
                                (((xhasattr)).apply ((xsource)) ("field_values")).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xfld_name)) ((xfld_value)))) ((((((xsource).xfield_values).xitems)).apply)))
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfld_value)) (((((xlayer).xget_fields)).apply ((xfld_name)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfid)))) ((((xenumerate)).apply (((xsource).xfids)))))
                                      seq
                                        xfeat.write (((unsupported)).apply ((xlayer)) ((xfid)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfid)) (((xfeat).xfid)))
                                        (((unsupported)).apply ((((unsupported)).apply ((xfld_name)) ((xfld_value)))) ((((((xsource).xfield_values).xitems)).apply)))
                                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xfld_value)) ((xi)))) (((((xfeat).xget)).apply ((xfld_name)))))
                                        xmsg.write "Index out of range when accessing field in a feature: %s."
                                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) (((xmsg).mod (((xlen)).apply ((xfeat))))))))
                                          bogusForceDataize.write ((((xfeat).x__getitem__)).apply ((((xlen)).apply ((xfeat)))))
                                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xIndexError)) ("Invalid OFT field name given: invalid."))))
                                          bogusForceDataize.write ((((xfeat).x__getitem__)).apply ("invalid"))
                xtest03b_layer_slice.write
                  [xself]
                    memory > xfeats
                    memory > xcontrol_vals
                    memory > xds
                    memory > xtest_vals
                    memory > xsl
                    memory > xsource
                    seq > @
                      seq
                        unsupported
                        xsource.write (((unsupported)).apply ((xds_list)) (0))
                        xds.write (((xDataSource)).apply (((xsource).xds)))
                        xsl.write (((xslice)).apply (1) (3))
                        xfeats.write (((unsupported)).apply ((((unsupported)).apply ((xds)) (0))) ((xsl)))
                        (((unsupported)).apply ((xfld_name)) (((((unsupported)).apply ((xds)) (0)).xfields)))
                          seq
                            xtest_vals.write (((unsupported)).apply (((((xfeat).xget)).apply ((xfld_name)))) ((xfeat)) ((xfeats)))
                            xcontrol_vals.write (((unsupported)).apply ((((unsupported)).apply (((xsource).xfield_values)) ((xfld_name)))) ((xsl)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontrol_vals)) ((xtest_vals)))
                xtest03c_layer_references.write
                  [xself]
                    memory > xsource
                    memory > xget_layer
                    memory > xlyr
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsource.write (((unsupported)).apply ((xds_list)) (0))
                        xget_layer.write
                          []
                            memory > xds
                            seq > @
                              seq
                                xds.write (((xDataSource)).apply (((xsource).xds)))
                                (((unsupported)).apply ((((unsupported)).apply ((xds)) (0))))
                        xlyr.write (((xget_layer)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xnfeat)) ((((xlen)).apply ((xlyr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xgtype)) ((((xlyr).xgeom_type).xnum)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlyr)) (0))) ("str"))))) ("1"))
                xtest04_features.write
                  [xself]
                    memory > xds
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xsource)) ((xds_list)))
                          seq
                            xds.write (((xDataSource)).apply (((xsource).xds)))
                            (((unsupported)).apply ((xlayer)) ((xds)))
                              (((unsupported)).apply ((xfeat)) ((xlayer)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xnfld)) ((((xlen)).apply ((((xlist)).apply ((xfeat)))))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xgtype)) (((xfeat).xgeom_type)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xsource).xfields).xitems)).apply)))
                                    bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xfeat)) ((xk)))) ((xv)))
                                  bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xfeat).xfields)) (0))) ((xstr)))
                                  (((unsupported)).apply ((xfld)) ((xfeat)))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply (((xfld).xname)) (((xsource).xfields)))
                xtest05_geometries.write
                  [xself]
                    memory > xgeos_geoms
                    memory > xgeoms
                    memory > xds
                    memory > xg
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xsource)) ((xds_list)))
                          seq
                            xds.write (((xDataSource)).apply (((xsource).xds)))
                            (((unsupported)).apply ((xlayer)) ((xds)))
                              seq
                                xgeoms.write ((((xlayer).xget_geoms)).apply)
                                xgeos_geoms.write (((unsupported)).apply (((xlayer).xget_geoms)) (TRUE))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xgeoms)))) ((((xlen)).apply ((xgeos_geoms)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xgeoms)))) ((((xlen)).apply ((xlayer)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xfeat)) ((xgeom)) ((xgeos_geom)))) ((((xzip)).apply ((xlayer)) ((xgeoms)) ((xgeos_geoms)))))
                                  seq
                                    xg.write ((xfeat).xgeom)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgeom)) ((xg)))
                                    bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xgeos_geom)) ((xGEOSGeometry)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xg)) (((xgeos_geom).xogr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xgeom)) (((xg).xgeom_name)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsource).xgtype)) (((xg).xgeom_type)))
                                    (((xhasattr)).apply ((xsource)) ("srs_wkt")).if
                                      bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xre).xmatch)).apply ((xwgs_84_wkt_regex)) ((((xg).xsrs).xwkt)))))
                xtest06_spatial_filter.write
                  [xself]
                    memory > xfeats
                    memory > xds
                    memory > xfilter_extent
                    memory > xfilter_geom
                    memory > xlyr
                    seq > @
                      seq
                        unsupported
                        xds.write (((xDataSource)).apply ((((xget_ds_file)).apply ("cities") ("shp"))))
                        xlyr.write (((unsupported)).apply ((xds)) (0))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xlyr).xspatial_filter)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xlyr).x_set_spatial_filter)).apply ("foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xlyr).x_set_spatial_filter)).apply ((((xlist)).apply ((((xrange)).apply (5))))))
                        xfilter_extent.write (((unsupported)).apply ((105.609252.neg)) (37.255001) ((103.609252.neg)) (39.255001))
                        (((unsupported)).apply (((xlyr).xspatial_filter)) ((((unsupported)).apply ((105.609252.neg)) (37.255001) ((103.609252.neg)) (39.255001))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xOGRGeometry).xfrom_bbox)).apply ((xfilter_extent)))) (((xlyr).xspatial_filter)))
                        xfeats.write (((unsupported)).apply ((xfeat)) ((xfeat)) ((xlyr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xlen)).apply ((xfeats)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Pueblo") (((((((unsupported)).apply ((xfeats)) (0)).xget)).apply ("Name"))))
                        xfilter_geom.write (((xOGRGeometry)).apply ("POLYGON((-96.363151 28.763374,-94.363151 28.763374,-94.363151 30.763374,-96.363151 30.763374,-96.363151 28.763374))"))
                        (((unsupported)).apply (((xlyr).xspatial_filter)) ((xfilter_geom)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfilter_geom)) (((xlyr).xspatial_filter)))
                        xfeats.write (((unsupported)).apply ((xfeat)) ((xfeat)) ((xlyr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xlen)).apply ((xfeats)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Houston") (((((((unsupported)).apply ((xfeats)) (0)).xget)).apply ("Name"))))
                        (((unsupported)).apply (((xlyr).xspatial_filter)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) ((((xlen)).apply ((xlyr)))))
                xtest07_integer_overflow.write
                  [xself]
                    memory > xfeat
                    memory > xds
                    seq > @
                      seq
                        unsupported
                        xds.write (((xDataSource)).apply ((((((xos).xpath).xjoin)).apply ((xTEST_DATA)) ("texas.dbf"))))
                        xfeat.write (((unsupported)).apply ((((unsupported)).apply ((xds)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((((xfeat).xget)).apply ("ALAND10"))))
                xtest_nonexistent_field.write
                  [xself]
                    memory > xsource
                    memory > xmsg
                    memory > xds
                    seq > @
                      seq
                        xsource.write (((unsupported)).apply ((xds_list)) (0))
                        xds.write (((xDataSource)).apply (((xsource).xds)))
                        xmsg.write "invalid field name: nonexistent"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xGDALException)) ((xmsg)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xds)) (0)).xget_fields)).apply ("nonexistent"))