memory > xDivErrorList
memory > xerror
memory > xErrorList
memory > xEmailField
memory > xignore_warnings
memory > xHiddenInput
memory > xRemovedInDjango50Warning
memory > xForm
memory > xSomeForm
memory > xSimpleTestCase2
memory > xSimpleTestCase
memory > xEmailForm
memory > xPerson
memory > xCharField
memory > xCommentForm
[] > test_deprecation_forms
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xas_divs
        memory > xtest_deprecation_warning_html_output
        memory > xtest_field_name_with_hidden_input_and_non_matching_row_ender
        memory > xtest_errorlist_override_str
        memory > xtest_field_name
        memory > xtest_deprecation_warning_error_list
        memory > xtest_field_with_css_class
        memory > x__str__
        memory > xtest_field_without_css_classes
        memory > xtest_field_name_with_hidden_input
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xErrorList)))
              seq
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xas_divs)).apply)))
                xas_divs.write
                  [xself]
                    seq > @
                      seq
                        ((xself).not).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply (("<div class=\"errorlist\">%s</div>".mod ((("".xjoin)).apply ((((unsupported)).apply ("<div class=\"error\">{error}</div>") ((xerror)) ((xself))))))))
            (((unsupported)).apply ((xSimpleTestCase2)))
              seq
                xtest_deprecation_warning_html_output.write
                  [xself]
                    memory > xform
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "django.forms.BaseForm._html_output() is deprecated. Please use .render() and .get_context() instead."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          seq
                            xform.write (((xPerson)).apply)
                            (((unsupported)).apply (((xform).x_html_output)) ("<p id=\"p_%(field_name)s\"></p>") ("%s") ("</p>") (" %s") (TRUE))
                xtest_deprecation_warning_error_list.write
                  [xself]
                    memory > xdata
                    memory > xcomment
                    memory > xemail
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xemail.write (((xEmailField)).apply)
                            xcomment.write (((xCharField)).apply)
                        xdata.write (((unsupported)).apply ("email") ("invalid"))
                        xf.write (((unsupported)).apply ((xEmailForm)) ((xdata)) ((xDivErrorList)))
                        xmsg.write "Returning a plain string from DivErrorList is deprecated. Please customize via the template system instead."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xas_p)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
              seq
                xtest_errorlist_override_str.write
                  [xself]
                    memory > xdata
                    memory > xcomment
                    memory > xemail
                    memory > xf
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((unsupported)).apply ((xCharField)) (50) (FALSE))
                            xemail.write (((xEmailField)).apply)
                            xcomment.write (((xCharField)).apply)
                        xdata.write (((unsupported)).apply ("email") ("invalid"))
                        xf.write (((unsupported)).apply ((xCommentForm)) ((xdata)) (FALSE) ((xDivErrorList)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<p>Name: <input type=\"text\" name=\"name\" maxlength=\"50\"></p><div class=\"errorlist\"><div class=\"error\">Enter a valid email address.</div></div><p>Email: <input type=\"email\" name=\"email\" value=\"invalid\" required></p><div class=\"errorlist\"><div class=\"error\">This field is required.</div></div><p>Comment: <input type=\"text\" name=\"comment\" required></p>"))
                xtest_field_name.write
                  [xself]
                    memory > xform
                    memory > xas_p
                    memory > xsome_field
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xForm)))
                          seq
                            xsome_field.write (((xCharField)).apply)
                            xas_p.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_html_output)) ("<p id=\"p_%(field_name)s\"></p>") ("%s") ("</p>") (" %s") (TRUE))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p id=\"p_some_field\"></p>"))
                xtest_field_without_css_classes.write
                  [xself]
                    memory > xform
                    memory > xas_p
                    memory > xsome_field
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xsome_field.write (((xCharField)).apply)
                            xas_p.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_html_output)) ("<p class=\"%(css_classes)s\"></p>") ("%s") ("</p>") (" %s") (TRUE))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p class=\"\"></p>"))
                xtest_field_with_css_class.write
                  [xself]
                    memory > xrequired_css_class
                    memory > xform
                    memory > xas_p
                    memory > xsome_field
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xsome_field.write (((xCharField)).apply)
                            xrequired_css_class.write "foo"
                            xas_p.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_html_output)) ("<p class=\"%(css_classes)s\"></p>") ("%s") ("</p>") (" %s") (TRUE))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p class=\"foo\"></p>"))
                xtest_field_name_with_hidden_input.write
                  [xself]
                    memory > xas_p
                    memory > xform
                    memory > xcustom
                    memory > xhidden1
                    memory > xhidden2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xhidden1.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xcustom.write (((xCharField)).apply)
                            xhidden2.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xas_p.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_html_output)) ("<p%(html_class_attr)s>%(field)s %(field_name)s</p>") ("%s") ("</p>") (" %s") (TRUE))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p><input id=\"id_custom\" name=\"custom\" type=\"text\" required> custom<input id=\"id_hidden1\" name=\"hidden1\" type=\"hidden\"><input id=\"id_hidden2\" name=\"hidden2\" type=\"hidden\"></p>"))
                xtest_field_name_with_hidden_input_and_non_matching_row_ender.write
                  [xself]
                    memory > xas_p
                    memory > xform
                    memory > xcustom
                    memory > xhidden1
                    memory > xhidden2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xhidden1.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xcustom.write (((xCharField)).apply)
                            xhidden2.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xas_p.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_html_output)) ("<p%(html_class_attr)s>%(field)s %(field_name)s</p>") ("%s") ("<hr><hr>") (" %s") (TRUE))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p><input id=\"id_custom\" name=\"custom\" type=\"text\" required> custom</p>n<input id=\"id_hidden1\" name=\"hidden1\" type=\"hidden\"><input id=\"id_hidden2\" name=\"hidden2\" type=\"hidden\"><hr><hr>"))