memory > xMultiPoint
memory > xxmin
memory > xValueError
memory > xGeometryCollection
memory > xPreparedGeometry
memory > xfloat
memory > xMultiPolygon
memory > xGEOSCoordSeq
memory > xListMixin
memory > xgdal
memory > xwkt_r
memory > xwkt_regex
memory > xwkt_w
memory > xstr
memory > xwkb_w
memory > xforce_str
memory > xaddressof
memory > xMultiLineString
memory > xsrid_part
memory > xLinearRing
memory > xdeconstructible
memory > xgeos_version_tuple
memory > xymax
memory > xtype
memory > xbyref
memory > xGEOSGeometryBase
memory > xint
memory > xre
memory > xhex_regex
memory > xsuper
memory > xGEOSBase
memory > xwkb_r
memory > xbytes
memory > xPoint
memory > xLineString
memory > xjson_regex
memory > xGEOM_PTR
memory > xc_double
memory > xxmax
memory > xymin
memory > xewkb_w
memory > xforce_bytes
memory > xhash
memory > xmemoryview
memory > xGEOSException
memory > xisinstance
memory > xGEOSGeometry
memory > xlen
memory > xTypeError
memory > xPolygon
[] > geometry
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xptr_type
        memory > xlength
        memory > xfrom_ewkt
        memory > xunary_union
        memory > xcentroid
        memory > x__str__
        memory > x__deepcopy__
        memory > xpoint_on_surface
        memory > x__setstate__
        memory > x_topology
        memory > x__eq__
        memory > xinterpolate_normalized
        memory > xnum_points
        memory > x__repr__
        memory > xtouches
        memory > xgeom_type
        memory > xgeom_typeid
        memory > x_ogr_ptr
        memory > x__sub__
        memory > xoverlaps
        memory > xdims
        memory > xempty
        memory > xwithin
        memory > xcontains
        memory > x__xor__
        memory > xdistance
        memory > xclone
        memory > xdestructor
        memory > xbuffer_with_style
        memory > x_to_pickle_wkb
        memory > xbuffer
        memory > xsimple
        memory > xdisjoint
        memory > xcrs
        memory > xrelate
        memory > xintersects
        memory > xewkb
        memory > xconvex_hull
        memory > xogr
        memory > xcrosses
        memory > xwkb
        memory > x_post_init
        memory > xnormalize
        memory > xdifference
        memory > xgeojson
        memory > xewkt
        memory > xring
        memory > xsrid
        memory > xkml
        memory > xhasz
        memory > xextent
        memory > xinterpolate
        memory > x__or__
        memory > x_GEOS_CLASSES
        memory > x_from_wkb
        memory > xwkt
        memory > x__getstate__
        memory > xvalid_reason
        memory > xenvelope
        memory > xclosed
        memory > xboundary
        memory > xvalid
        memory > xnum_geom
        memory > x_from_pickle_wkb
        memory > xrelate_pattern
        memory > xsimplify
        memory > xunion
        memory > xtransform
        memory > xcoord_seq
        memory > xprepared
        memory > xhas_cs
        memory > xnum_coords
        memory > xcovers
        memory > xequals_exact
        memory > x_from_wkt
        memory > x__init__
        memory > xmake_valid
        memory > xarea
        memory > xfrom_gml
        memory > xequals
        memory > x__hash__
        memory > xjson
        memory > x__and__
        memory > xintersection
        memory > xproject
        memory > xcapi
        memory > xsym_difference
        memory > xhex
        memory > xproject_normalized
        memory > xhexewkb
        memory > xmerged
        memory > x__copy__
        memory > xsrs
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xGEOSBase)))
              seq
                x_GEOS_CLASSES.write "None: is there a None literal in the EO language?"
                xptr_type.write (xGEOM_PTR)
                xdestructor.write ((xcapi).xdestroy_geom)
                xhas_cs.write FALSE
                x__init__.write
                  [xself xptr xcls]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_ptr)) ((xptr)))
                        (((unsupported)).apply ((((xtype)).apply ((xself)))) ((((unsupported)).apply ((xGEOSGeometryBase)) ((xGEOSGeometry))))).if
                          seq
                            (((unsupported)).apply ((xcls)) ("None: is there a None literal in the EO language?")).if
                              seq
                                (((unsupported)).apply (((xGEOSGeometryBase).x_GEOS_CLASSES)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    seq
                                      (((unsupported)).apply)
                                      (((unsupported)).apply)
                                      (((unsupported)).apply)
                                      (((unsupported)).apply)
                                    seq
                                      (((unsupported)).apply)
                                      (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    (((unsupported)).apply (((xGEOSGeometryBase).x_GEOS_CLASSES)) ((((unsupported)).apply (0) ((xPoint)) (1) ((xLineString)) (2) ((xLinearRing)) (3) ((xPolygon)) (4) ((xMultiPoint)) (5) ((xMultiLineString)) (6) ((xMultiPolygon)) (7) ((xGeometryCollection)))))
                                xcls.write (((unsupported)).apply (((xGEOSGeometryBase).x_GEOS_CLASSES)) (((xself).xgeom_typeid)))
                            (((unsupported)).apply (((xself).x__class__)) ((xcls)))
                        unsupported
                x_post_init.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).x_cs)) ((((xself).xhas_cs).if (((xGEOSCoordSeq)).apply (((((xcapi).xget_cs)).apply (((xself).xptr)))) (((xself).xhasz))) "None: is there a None literal in the EO language?")))
                x__copy__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xclone)))
                x__deepcopy__.write
                  [xself xmemodict]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xclone)))
                x__str__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xewkt)))
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("<%s object at %s>".mod (((unsupported)).apply (((xself).xgeom_type)) ((((xhex)).apply ((((xaddressof)).apply (((xself).xptr))))))))))
                x_to_pickle_wkb.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xbytes)).apply (((xself).xwkb)))))
                x_from_pickle_wkb.write
                  [xself xwkb]
                    seq > @
                      (((unsupported)).apply (((((xwkb_r).xread)).apply ((((xmemoryview)).apply ((xwkb)))))))
                x__getstate__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_to_pickle_wkb)) (((xself).xsrid)))))
                x__setstate__.write
                  [xself xstate]
                    memory > xptr
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xwkb)) ((xsrid)))) ((xstate)))
                        xptr.write ((((xself).x_from_pickle_wkb)).apply ((xwkb)))
                        ((xptr).not).if
                          (((unsupported)).apply ((((xGEOSException)).apply ("Invalid Geometry loaded from pickled state."))))
                        (((unsupported)).apply (((xself).xptr)) ((xptr)))
                        unsupported
                        (((unsupported)).apply (((xself).xsrid)) ((xsrid)))
                x_from_wkb.write
                  [xcls xwkb]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xwkb_r).xread)).apply ((xwkb)))))
                xfrom_ewkt.write
                  [xewkt]
                    memory > xwkt
                    memory > xparts
                    memory > xsrid
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        xewkt.write (((xforce_bytes)).apply ((xewkt)))
                        xsrid.write "None: is there a None literal in the EO language?"
                        xparts.write ((((xewkt).xsplit)).apply (";") (1))
                        ((((xlen)).apply ((xparts))).eq 2).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xsrid_part)) ((xwkt)))) ((xparts)))
                            xmatch.write ((((xre).xmatch)).apply ("SRID=(?P<srid>-?d+)") ((xsrid_part)))
                            ((xmatch).not).if
                              (((unsupported)).apply ((((xValueError)).apply ("EWKT has invalid SRID part."))))
                            xsrid.write (((xint)).apply ((((unsupported)).apply ((xmatch)) ("srid"))))
                          xwkt.write (xewkt)
                        ((xwkt).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Expected WKT but got an empty string."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGEOSGeometry)) (((((xGEOSGeometry).x_from_wkt)).apply ((xwkt)))) ((xsrid)))))
                x_from_wkt.write
                  [xwkt]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xwkt_r).xread)).apply ((xwkt)))))
                xfrom_gml.write
                  [xcls xgml_string]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xgdal).xOGRGeometry).xfrom_gml)).apply ((xgml_string))).xgeos)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xother)) ((xstr))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xGEOSException)))))
                            xother.write ((((xGEOSGeometry).xfrom_ewkt)).apply ((xother)))
                            (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((((((xisinstance)).apply ((xother)) ((xGEOSGeometry))).and (((xself).xsrid).eq ((xother).xsrid))).and ((((xself).xequals_exact)).apply ((xother))))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply ((((unsupported)).apply (((xself).xsrid)) (((xself).xwkt)))))))
                x__or__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xunion)).apply ((xother)))))
                x__and__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xintersection)).apply ((xother)))))
                x__sub__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xdifference)).apply ((xother)))))
                x__xor__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xsym_difference)).apply ((xother)))))
                xcoord_seq.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xself).xhas_cs).if
                          (((unsupported)).apply ((((xself).x_cs).xclone)))
                xgeom_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((((xcapi).xgeos_type)).apply (((xself).xptr))).xdecode)))
                xgeom_typeid.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_typeid)).apply (((xself).xptr)))))
                xnum_geom.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xget_num_geoms)).apply (((xself).xptr)))))
                xnum_coords.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xget_num_coords)).apply (((xself).xptr)))))
                xnum_points.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xnum_coords)))
                xdims.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xget_dims)).apply (((xself).xptr)))))
                xnormalize.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xcapi).xgeos_normalize)).apply (((xself).xptr)))
                xmake_valid.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xgeos_version_tuple).less (((unsupported)).apply (3) (8))).if
                          (((unsupported)).apply ((((xGEOSException)).apply ("GEOSGeometry.make_valid requires GEOS >= 3.8.0."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGEOSGeometry)) (((((xcapi).xgeos_makevalid)).apply (((xself).xptr)))) (((xself).xsrid)))))
                xempty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_isempty)).apply (((xself).xptr)))))
                xhasz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_hasz)).apply (((xself).xptr)))))
                xring.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_isring)).apply (((xself).xptr)))))
                xsimple.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_issimple)).apply (((xself).xptr)))))
                xvalid.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_isvalid)).apply (((xself).xptr)))))
                xvalid_reason.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((xcapi).xgeos_isvalidreason)).apply (((xself).xptr))).xdecode)))
                xcontains.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_contains)).apply (((xself).xptr)) (((xother).xptr)))))
                xcovers.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_covers)).apply (((xself).xptr)) (((xother).xptr)))))
                xcrosses.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_crosses)).apply (((xself).xptr)) (((xother).xptr)))))
                xdisjoint.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_disjoint)).apply (((xself).xptr)) (((xother).xptr)))))
                xequals.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_equals)).apply (((xself).xptr)) (((xother).xptr)))))
                xequals_exact.write
                  [xself xother xtolerance]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_equalsexact)).apply (((xself).xptr)) (((xother).xptr)) ((((xfloat)).apply ((xtolerance)))))))
                xintersects.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_intersects)).apply (((xself).xptr)) (((xother).xptr)))))
                xoverlaps.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_overlaps)).apply (((xself).xptr)) (((xother).xptr)))))
                xrelate_pattern.write
                  [xself xother xpattern]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((((xisinstance)).apply ((xpattern)) ((xstr))).not).or ((((xlen)).apply ((xpattern))).greater 9)).if
                          (((unsupported)).apply ((((xGEOSException)).apply ("invalid intersection matrix pattern"))))
                        (((unsupported)).apply (((((xcapi).xgeos_relatepattern)).apply (((xself).xptr)) (((xother).xptr)) ((((xforce_bytes)).apply ((xpattern)))))))
                xtouches.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_touches)).apply (((xself).xptr)) (((xother).xptr)))))
                xwithin.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_within)).apply (((xself).xptr)) (((xother).xptr)))))
                xsrid.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xs.write ((((xcapi).xgeos_get_srid)).apply (((xself).xptr)))
                        ((xs).eq 0).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((xs)))
                xsrid.write
                  [xself xsrid]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xcapi).xgeos_set_srid)).apply (((xself).xptr)) (((((unsupported)).apply ((xsrid)) ("None: is there a None literal in the EO language?")).if 0 (xsrid))))
                xewkt.write
                  [xself]
                    memory > xsrid
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsrid.write ((xself).xsrid)
                        (((unsupported)).apply (((xsrid).if ("SRID=%s;%s".mod (((unsupported)).apply ((xsrid)) (((xself).xwkt)))) ((xself).xwkt))))
                xwkt.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((((((unsupported)).apply ((xwkt_w)) ((((xself).xhasz).if 3 2)) (TRUE)).xwrite)).apply ((xself))).xdecode)))
                xhex.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply ((xwkb_w)) ((((xself).xhasz).if 3 2))).xwrite_hex)).apply ((xself)))))
                xhexewkb.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply ((xewkb_w)) ((((xself).xhasz).if 3 2))).xwrite_hex)).apply ((xself)))))
                xjson.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xogr).xjson)))
                xgeojson.write (xjson)
                xwkb.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((((xwkb_w)).apply ((((xself).xhasz).if 3 2))).xwrite)).apply ((xself)))))
                xewkb.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((((xewkb_w)).apply ((((xself).xhasz).if 3 2))).xwrite)).apply ((xself)))))
                xkml.write
                  [xself]
                    memory > xgtype
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xgtype.write ((xself).xgeom_type)
                        (((unsupported)).apply (("<%s>%s</%s>".mod (((unsupported)).apply ((xgtype)) ((((xself).xcoord_seq).xkml)) ((xgtype))))))
                xprepared.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xPreparedGeometry)).apply ((xself)))))
                x_ogr_ptr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xgdal).xOGRGeometry).x_from_wkb)).apply (((xself).xwkb)))))
                xogr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xgdal).xOGRGeometry)).apply (((xself).x_ogr_ptr)) (((xself).xsrs)))))
                xsrs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xself).xsrid).if
                          (((unsupported)).apply ((((unsupported)).apply (((xgdal).xGDALException)) (((xgdal).xSRSException)))))
                            (((unsupported)).apply (((((xgdal).xSpatialReference)).apply (((xself).xsrid)))))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xcrs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xsrs)))
                xtransform.write
                  [xself xct xclone]
                    memory > xptr
                    memory > xg
                    memory > xsrid
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsrid.write ((xself).xsrid)
                        ((xct).eq (xsrid)).if
                          (xclone).if
                            (((unsupported)).apply (((xself).xclone)))
                            (((unsupported)).apply)
                        (((xisinstance)).apply ((xct)) (((xgdal).xCoordTransform))).if
                          xsrid.write "None: is there a None literal in the EO language?"
                          ((((unsupported)).apply ((xsrid)) ("None: is there a None literal in the EO language?")).or ((xsrid).less 0)).if
                            (((unsupported)).apply ((((xGEOSException)).apply ("Calling transform with no SRID set is not supported"))))
                        xg.write ((((xgdal).xOGRGeometry)).apply (((xself).x_ogr_ptr)) ((xsrid)))
                        bogusForceDataize.write ((((xg).xtransform)).apply ((xct)))
                        xptr.write ((xg).x_geos_ptr)
                        (xclone).if
                          (((unsupported)).apply ((((unsupported)).apply ((xGEOSGeometry)) ((xptr)) (((xg).xsrid)))))
                        (xptr).if
                          seq
                            bogusForceDataize.write ((((xcapi).xdestroy_geom)).apply (((xself).xptr)))
                            (((unsupported)).apply (((xself).xptr)) ((xptr)))
                            unsupported
                            (((unsupported)).apply (((xself).xsrid)) (((xg).xsrid)))
                          (((unsupported)).apply ((((xGEOSException)).apply ("Transformed WKB was invalid."))))
                x_topology.write
                  [xself xgptr]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xGEOSGeometry)) ((xgptr)) (((xself).xsrid)))))
                xboundary.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_boundary)).apply (((xself).xptr)))))))
                xbuffer.write
                  [xself xwidth xquadsegs]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_buffer)).apply (((xself).xptr)) ((xwidth)) ((xquadsegs)))))))
                xbuffer_with_style.write
                  [xself xwidth xquadsegs xend_cap_style xjoin_style xmitre_limit]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_bufferwithstyle)).apply (((xself).xptr)) ((xwidth)) ((xquadsegs)) ((xend_cap_style)) ((xjoin_style)) ((xmitre_limit)))))))
                xcentroid.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_centroid)).apply (((xself).xptr)))))))
                xconvex_hull.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_convexhull)).apply (((xself).xptr)))))))
                xdifference.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_difference)).apply (((xself).xptr)) (((xother).xptr)))))))
                xenvelope.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_envelope)).apply (((xself).xptr)))))))
                xintersection.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_intersection)).apply (((xself).xptr)) (((xother).xptr)))))))
                xpoint_on_surface.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_pointonsurface)).apply (((xself).xptr)))))))
                xrelate.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xcapi).xgeos_relate)).apply (((xself).xptr)) (((xother).xptr))).xdecode)))
                xsimplify.write
                  [xself xtolerance xpreserve_topology]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (xpreserve_topology).if
                          (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_preservesimplify)).apply (((xself).xptr)) ((xtolerance)))))))
                          (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_simplify)).apply (((xself).xptr)) ((xtolerance)))))))
                xsym_difference.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_symdifference)).apply (((xself).xptr)) (((xother).xptr)))))))
                xunary_union.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_unary_union)).apply (((xself).xptr)))))))
                xunion.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_union)).apply (((xself).xptr)) (((xother).xptr)))))))
                xarea.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xcapi).xgeos_area)).apply (((xself).xptr)) ((((xbyref)).apply ((xc_double)))))))
                xdistance.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xisinstance)).apply ((xother)) ((xGEOSGeometry))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply ("distance works only on other GEOS Geometries."))))
                        (((unsupported)).apply (((((xcapi).xgeos_distance)).apply (((xself).xptr)) (((xother).xptr)) ((((xbyref)).apply ((xc_double)))))))
                xextent.write
                  [xself]
                    memory > xenv
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xenv.write ((xself).xenvelope)
                        (((xisinstance)).apply ((xenv)) ((xPoint))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xxmin)) ((xymin)))) (((xenv).xtuple)))
                            (((unsupported)).apply ((((unsupported)).apply ((xxmax)) ((xymax)))) ((((unsupported)).apply ((xxmin)) ((xymin)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xxmin)) ((xymin)))) ((((unsupported)).apply ((((unsupported)).apply ((xenv)) (0))) (0))))
                            (((unsupported)).apply ((((unsupported)).apply ((xxmax)) ((xymax)))) ((((unsupported)).apply ((((unsupported)).apply ((xenv)) (0))) (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xxmin)) ((xymin)) ((xxmax)) ((xymax)))))
                xlength.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_length)).apply (((xself).xptr)) ((((xbyref)).apply ((xc_double)))))))
                xclone.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xGEOSGeometry)).apply (((((xcapi).xgeom_clone)).apply (((xself).xptr)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xinterpolate.write
                  [xself xdistance]
                    seq > @
                      (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_interpolate)).apply (((xself).xptr)) ((xdistance)))))))
                xinterpolate_normalized.write
                  [xself xdistance]
                    seq > @
                      (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_interpolate_normalized)).apply (((xself).xptr)) ((xdistance)))))))
                xproject.write
                  [xself xpoint]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xisinstance)).apply ((xpoint)) ((xPoint))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply ("locate_point argument must be a Point"))))
                        (((unsupported)).apply (((((xcapi).xgeos_project)).apply (((xself).xptr)) (((xpoint).xptr)))))
                xproject_normalized.write
                  [xself xpoint]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xisinstance)).apply ((xpoint)) ((xPoint))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply ("locate_point argument must be a Point"))))
                        (((unsupported)).apply (((((xcapi).xgeos_project_normalized)).apply (((xself).xptr)) (((xpoint).xptr)))))
                xmerged.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_topology)).apply (((((xcapi).xgeos_linemerge)).apply (((xself).xptr)))))))
                xclosed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xgeos_isclosed)).apply (((xself).xptr)))))
            (((unsupported)).apply ((xGEOSGeometryBase)) ((xListMixin)) ((xdeconstructible)))
              seq
                unsupported
                x__init__.write
                  [xself xgeo_input xsrid]
                    memory > xwkt_m
                    memory > xg
                    memory > xinput_srid
                    memory > xogr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xinput_srid.write "None: is there a None literal in the EO language?"
                        (((xisinstance)).apply ((xgeo_input)) ((xbytes))).if
                          xgeo_input.write (((xforce_str)).apply ((xgeo_input)))
                        (((xisinstance)).apply ((xgeo_input)) ((xstr))).if
                          seq
                            xwkt_m.write ((((xwkt_regex).xmatch)).apply ((xgeo_input)))
                            (xwkt_m).if
                              seq
                                (((unsupported)).apply ((xwkt_m)) ("srid")).if
                                  xinput_srid.write (((xint)).apply ((((unsupported)).apply ((xwkt_m)) ("srid"))))
                                xg.write ((((xself).x_from_wkt)).apply ((((xforce_bytes)).apply ((((unsupported)).apply ((xwkt_m)) ("wkt"))))))
                              ((((xhex_regex).xmatch)).apply ((xgeo_input))).if
                                xg.write ((((xwkb_r).xread)).apply ((((xforce_bytes)).apply ((xgeo_input)))))
                                ((((xjson_regex).xmatch)).apply ((xgeo_input))).if
                                  seq
                                    xogr.write (((((xgdal).xOGRGeometry).xfrom_json)).apply ((xgeo_input)))
                                    xg.write ((xogr).x_geos_ptr)
                                    xinput_srid.write ((xogr).xsrid)
                                  (((unsupported)).apply ((((xValueError)).apply ("String input unrecognized as WKT EWKT, and HEXEWKB."))))
                          (((xisinstance)).apply ((xgeo_input)) ((xGEOM_PTR))).if
                            xg.write (xgeo_input)
                            (((xisinstance)).apply ((xgeo_input)) ((xmemoryview))).if
                              xg.write ((((xwkb_r).xread)).apply ((xgeo_input)))
                              (((xisinstance)).apply ((xgeo_input)) ((xGEOSGeometry))).if
                                xg.write ((((xcapi).xgeom_clone)).apply (((xgeo_input).xptr)))
                                (((unsupported)).apply ((((xTypeError)).apply (("Improper geometry input type: %s".mod (((xtype)).apply ((xgeo_input))))))))
                        ((xg).not).if
                          (((unsupported)).apply ((((xGEOSException)).apply ("Could not initialize GEOS Geometry with given input."))))
                        xinput_srid.write (((xinput_srid).or ((((xcapi).xgeos_get_srid)).apply ((xg)))).or "None: is there a None literal in the EO language?")
                        (((xinput_srid).and (xsrid)).and ((xinput_srid).neq (xsrid))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Input geometry already has SRID: %d.".mod (xinput_srid))))))
                        bogusForceDataize.write ((((xsuper).x__init__)).apply ((xg)) ("None: is there a None literal in the EO language?"))
                        xsrid.write ((xinput_srid).or (xsrid))
                        ((xsrid).and (((xisinstance)).apply ((xsrid)) ((xint)))).if
                          (((unsupported)).apply (((xself).xsrid)) ((xsrid)))