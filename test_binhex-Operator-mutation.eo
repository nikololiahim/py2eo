memory > xbinhex
memory > xopen
memory > xf
memory > xsupport
memory > xBinHexTestCase
memory > xunittest
memory > xfp
memory > x__name__
[] > test_binhex
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_binhex
        memory > xtest_main
        memory > xtest_binhex_error_on_long_filename
        memory > xDATA
        memory > xtearDown
        memory > xsetUp
        memory > xtest_binhex_line_endings
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfname1)) ((((xsupport).xTESTFN).sub "1")))
                        (((unsupported)).apply (((xself).xfname2)) ((((xsupport).xTESTFN).sub "2")))
                        (((unsupported)).apply (((xself).xfname3)) ((((xsupport).xTESTFN).sub "very_long_filename__very_long_filename__very_long_filename__very_long_filename__")))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfname1)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfname2)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfname3)))
                xDATA.write "Jack is my hero"
                xtest_binhex.write
                  [xself]
                    memory > xfinish
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfname1)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((xself).xDATA)))
                        bogusForceDataize.write ((((xbinhex).xbinhex)).apply (((xself).xfname1)) (((xself).xfname2)))
                        bogusForceDataize.write ((((xbinhex).xhexbin)).apply (((xself).xfname2)) (((xself).xfname1)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfname1)) ("rb"))) ((xf)))
                          xfinish.write ((((xf).xreadline)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xDATA)) ((xfinish)))
                xtest_binhex_error_on_long_filename.write
                  [xself]
                    memory > xf3
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xf3.write (((xopen)).apply (((xself).xfname3)) ("wb"))
                        bogusForceDataize.write ((((xf3).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinhex).xError)) (((xbinhex).xbinhex)) (((xself).xfname3)) (((xself).xfname2)))
                xtest_binhex_line_endings.write
                  [xself]
                    memory > xcontents
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfname1)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((xself).xDATA)))
                        bogusForceDataize.write ((((xbinhex).xbinhex)).apply (((xself).xfname1)) (((xself).xfname2)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfname2)) ("rb"))) ((xfp)))
                          xcontents.write ((((xfp).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("n") ((xcontents)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xBinHexTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)