memory > xcomplex
memory > xsecond
memory > xenumerate
memory > xvalue
memory > x_
memory > xrandom
memory > xint
memory > xsys
memory > xv
memory > xfirst
memory > xhash
memory > xop
memory > xlen
memory > xrange
memory > xmath
memory > xoperator
memory > xi
memory > xfloat
memory > xzero
memory > xHalibutProxy
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_numeric_tower
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_hash_normalization
        memory > xtest_fractions
        memory > xF
        memory > xtest_complex
        memory > xcheck_equal_hash
        memory > xtest_binary_floats
        memory > xD
        memory > x_PyHASH_INF
        memory > xtest_decimals
        memory > x_PyHASH_MODULUS
        memory > xtest_mixed_comparisons
        memory > xtest_bools
        memory > xtest_integers
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_PyHASH_MODULUS.write (((xsys).xhash_info).xmodulus)
            x_PyHASH_INF.write (((xsys).xhash_info).xinf)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_equal_hash.write
                  [xself xx xy]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xx)))) ((((xhash)).apply ((xy)))) (((("got different hashes for {!r} and {!r}".xformat)).apply ((xx)) ((xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                xtest_bools.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (FALSE) (0))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (TRUE) (1))
                xtest_integers.write
                  [xself]
                    memory > xn
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((1000.neg)) (1000))))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xi)) ((((xfloat)).apply ((xi)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xi)) ((((xD)).apply ((xi)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xi)) ((((xF)).apply ((xi)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xn.write ((((unsupported)).apply (2) ((xi))).sub 1)
                            ((xn).eq (((xint)).apply ((((xfloat)).apply ((xn)))))).if
                              seq
                                bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xfloat)).apply ((xn)))))
                                bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) (((((xfloat)).apply ((xn))).neg)))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xD)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xF)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) ((((xD)).apply (((xn).neg)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) ((((xF)).apply (((xn).neg)))))
                            xn.write (((unsupported)).apply (2) ((xi)))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xfloat)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) (((((xfloat)).apply ((xn))).neg)))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xD)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xF)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) ((((xD)).apply (((xn).neg)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (((xn).neg)) ((((xF)).apply (((xn).neg)))))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (1000))))
                          seq
                            xe.write ((((xrandom).xrandrange)).apply (300))
                            xn.write ((((xrandom).xrandrange)).apply (((((unsupported)).apply (10) ((xe))).neg)) ((((unsupported)).apply (10) ((xe)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xD)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xF)).apply ((xn)))))
                            ((xn).eq (((xint)).apply ((((xfloat)).apply ((xn)))))).if
                              bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xn)) ((((xfloat)).apply ((xn)))))
                xtest_binary_floats.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (0.0) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (0.0) ((((xD)).apply (0))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((0.0.neg)) ((((xD)).apply (0))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((0.0.neg)) ((((xD)).apply ("-0.0"))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply (0.0) ((((xF)).apply (0))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xfloat)).apply ("inf"))) ((((xD)).apply ("inf"))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xfloat)).apply ("-inf"))) ((((xD)).apply ("-inf"))))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (1000))))
                          seq
                            xx.write (((((xrandom).xrandom)).apply).mul ((((xmath).xexp)).apply (((((((xrandom).xrandom)).apply).mul 200.0).sub 100.0))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xx)) (((((xD).xfrom_float)).apply ((xx)))))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xx)) (((((xF).xfrom_float)).apply ((xx)))))
                xtest_complex.write
                  [xself]
                    memory > xtest_values
                    seq > @
                      seq
                        xtest_values.write (((unsupported)).apply (0.0) ((0.0.neg)) (1.0) ((1.0.neg)) (0.40625) ((5136.5.neg)) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("-inf"))))
                        (((unsupported)).apply ((xzero)) ((((unsupported)).apply ((0.0.neg)) (0.0))))
                          (((unsupported)).apply ((xvalue)) ((xtest_values)))
                            bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((xvalue)) ((((xcomplex)).apply ((xvalue)) ((xzero)))))
                xtest_decimals.write
                  [xself]
                    memory > xzeros
                    seq > @
                      seq
                        xzeros.write (((unsupported)).apply ("0") ("-0") ("0.0") ("-0.0e10") ("000e-10"))
                        (((unsupported)).apply ((xzero)) ((xzeros)))
                          bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ((xzero)))) ((((xD)).apply (0))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("1.00"))) ((((xD)).apply (1))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("1.00000"))) ((((xD)).apply (1))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("-1.00"))) ((((xD)).apply ((1.neg)))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("-1.00000"))) ((((xD)).apply ((1.neg)))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("123e2"))) ((((xD)).apply (12300))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("1230e1"))) ((((xD)).apply (12300))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("12300"))) ((((xD)).apply (12300))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("12300.0"))) ((((xD)).apply (12300))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("12300.00"))) ((((xD)).apply (12300))))
                        bogusForceDataize.write ((((xself).xcheck_equal_hash)).apply ((((xD)).apply ("12300.000"))) ((((xD)).apply (12300))))
                xtest_fractions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xF)).apply (1) ((x_PyHASH_MODULUS)))))) ((x_PyHASH_INF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xF)).apply ((1.neg)) ((3.mul (x_PyHASH_MODULUS))))))) (((x_PyHASH_INF).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xF)).apply ((7.mul (x_PyHASH_MODULUS))) (1))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xF)).apply (((x_PyHASH_MODULUS).neg)) (1))))) (0))
                xtest_hash_normalization.write
                  [xself]
                    memory > x__hash__
                    memory > xx
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xhash)).apply ("halibut"))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((xother).eq "halibut")))
                        xx.write (((unsupported)).apply ("halibut") ((((xHalibutProxy)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xx)))) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_mixed_comparisons.write
                  [xself]
                    memory > xtest_values
                    seq > @
                      seq
                        xtest_values.write (((unsupported)).apply ((((xfloat)).apply ("-inf"))) ((((xD)).apply ("-1e425000000"))) (((((unsupported)).apply).neg)) ((((xF)).apply ((22.neg)) (7))) ((3.14.neg)) ((2.neg)) (0.0) ((((unsupported)).apply)) (TRUE) ((((xF)).apply ("1.2"))) ((((xD)).apply ("1.3"))) ((((xfloat)).apply ("1.4"))) ((((xF)).apply (275807) (195025))) ((((xD)).apply ("1.414213562373095048801688724"))) ((((xF)).apply (114243) (80782))) ((((xF)).apply (473596569) (84615))) ((((unsupported)).apply)) ((((xD)).apply ("infinity"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfirst)))) ((((xenumerate)).apply ((xtest_values)))))
                          (((unsupported)).apply ((xsecond)) ((((unsupported)).apply ((xtest_values)) ((((unsupported)).apply (((xi).sub 1)))))))
                            seq
                              bogusForceDataize.write ((((xself).xassertLess)).apply ((xfirst)) ((xsecond)))
                              bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xfirst)) ((xsecond)))
                              bogusForceDataize.write ((((xself).xassertGreater)).apply ((xsecond)) ((xfirst)))
                              bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xsecond)) ((xfirst)))
                xtest_complex.write
                  [xself]
                    memory > xw
                    memory > xz
                    seq > @
                      seq
                        xz.write (1.0.sub (((unsupported)).apply))
                        xw.write ((3.14.neg).sub (((unsupported)).apply))
                        (((unsupported)).apply ((xv)) ((((unsupported)).apply (1) (1.0) ((((xF)).apply (1))) ((((xD)).apply (1))) ((((xcomplex)).apply (1))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xz)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xz)))
                        (((unsupported)).apply ((xv)) ((((unsupported)).apply (2) (2.0) ((((xF)).apply (2))) ((((xD)).apply (2))) ((((xcomplex)).apply (2))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xz)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xz)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xv)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        (((unsupported)).apply ((xv)) ((((unsupported)).apply (1) (1.0) ((((xF)).apply (1))) ((((xD)).apply (1))) ((((xcomplex)).apply (1))) (2) (2.0) ((((xF)).apply (2))) ((((xD)).apply (2))) ((((xcomplex)).apply (2))) ((xw)))))
                          (((unsupported)).apply ((xop)) ((((unsupported)).apply (((xoperator).xle)) (((xoperator).xlt)) (((xoperator).xge)) (((xoperator).xgt)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xop)) ((xz)) ((xv)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xop)) ((xv)) ((xz)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)