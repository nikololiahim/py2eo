memory > xlist
memory > xstr
memory > xmaxx
memory > xGDALException
memory > xfloat
memory > xargs
memory > xc_double
memory > xmaxy
memory > xtype
memory > xhasattr
memory > xStructure
memory > xOGREnvelope
memory > xminy
memory > xEnvelope
memory > xminx
memory > xisinstance
memory > xlen
memory > xTypeError
memory > xa
[] > envelope
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__str__
        memory > x__eq__
        memory > xmin_y
        memory > xmin_x
        memory > xmax_y
        memory > xexpand_to_include
        memory > xwkt
        memory > x_fields_2
        memory > x__init__
        memory > xmax_x
        memory > x_from_sequence
        memory > xur
        memory > xll
        memory > xtuple
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xStructure)))
              seq
                unsupported
                x_fields_2.write (((unsupported)).apply ((((unsupported)).apply ("MinX") ((xc_double)))) ((((unsupported)).apply ("MaxX") ((xc_double)))) ((((unsupported)).apply ("MinY") ((xc_double)))) ((((unsupported)).apply ("MaxY") ((xc_double)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xlen)).apply ((xargs))).eq 1).if
                          (((xisinstance)).apply ((((unsupported)).apply ((xargs)) (0))) ((xOGREnvelope))).if
                            (((unsupported)).apply (((xself).x_envelope)) ((((unsupported)).apply ((xargs)) (0))))
                            (((xisinstance)).apply ((((unsupported)).apply ((xargs)) (0))) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                              ((((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))).neq 4).if
                                (((unsupported)).apply ((((xGDALException)).apply (("Incorrect number of tuple elements (%d).".mod (((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))))))))
                                bogusForceDataize.write ((((xself).x_from_sequence)).apply ((((unsupported)).apply ((xargs)) (0))))
                              (((unsupported)).apply ((((xTypeError)).apply (("Incorrect type of argument: %s".mod (((xtype)).apply ((((unsupported)).apply ((xargs)) (0)))))))))
                          ((((xlen)).apply ((xargs))).eq 4).if
                            bogusForceDataize.write ((((xself).x_from_sequence)).apply ((((unsupported)).apply ((((xfloat)).apply ((xa)))) ((xa)) ((xargs)))))
                            (((unsupported)).apply ((((xGDALException)).apply (("Incorrect number (%d) of arguments.".mod (((xlen)).apply ((xargs))))))))
                        (((xself).xmin_x).greater ((xself).xmax_x)).if
                          (((unsupported)).apply ((((xGDALException)).apply ("Envelope minimum X > maximum X."))))
                        (((xself).xmin_y).greater ((xself).xmax_y)).if
                          (((unsupported)).apply ((((xGDALException)).apply ("Envelope minimum Y > maximum Y."))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xother)) ((xEnvelope))).if
                          (((unsupported)).apply (((((((xself).xmin_x).eq ((xother).xmin_x)).and (((xself).xmin_y).eq ((xother).xmin_y))).and (((xself).xmax_x).eq ((xother).xmax_x))).and (((xself).xmax_y).eq ((xother).xmax_y)))))
                          ((((xisinstance)).apply ((xother)) ((xtuple))).and ((((xlen)).apply ((xother))).eq 4)).if
                            (((unsupported)).apply (((((((xself).xmin_x).eq (((unsupported)).apply ((xother)) (0))).and (((xself).xmin_y).eq (((unsupported)).apply ((xother)) (1)))).and (((xself).xmax_x).eq (((unsupported)).apply ((xother)) (2)))).and (((xself).xmax_y).eq (((unsupported)).apply ((xother)) (3))))))
                            (((unsupported)).apply ((((xGDALException)).apply ("Equivalence testing only works with other Envelopes."))))
                x__str__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xstr)).apply (((xself).xtuple)))))
                x_from_sequence.write
                  [xself xseq]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).x_envelope)) ((((xOGREnvelope)).apply)))
                        (((unsupported)).apply ((((xself).x_envelope).xMinX)) ((((unsupported)).apply ((xseq)) (0))))
                        (((unsupported)).apply ((((xself).x_envelope).xMinY)) ((((unsupported)).apply ((xseq)) (1))))
                        (((unsupported)).apply ((((xself).x_envelope).xMaxX)) ((((unsupported)).apply ((xseq)) (2))))
                        (((unsupported)).apply ((((xself).x_envelope).xMaxY)) ((((unsupported)).apply ((xseq)) (3))))
                xexpand_to_include.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xlen)).apply ((xargs))).eq 1).if
                          (((xisinstance)).apply ((((unsupported)).apply ((xargs)) (0))) ((xEnvelope))).if
                            (((unsupported)).apply (((((xself).xexpand_to_include)).apply (((((unsupported)).apply ((xargs)) (0)).xtuple)))))
                            ((((xhasattr)).apply ((((unsupported)).apply ((xargs)) (0))) ("x")).and (((xhasattr)).apply ((((unsupported)).apply ((xargs)) (0))) ("y"))).if
                              (((unsupported)).apply (((((xself).xexpand_to_include)).apply (((((unsupported)).apply ((xargs)) (0)).xx)) (((((unsupported)).apply ((xargs)) (0)).xy)) (((((unsupported)).apply ((xargs)) (0)).xx)) (((((unsupported)).apply ((xargs)) (0)).xy)))))
                              (((xisinstance)).apply ((((unsupported)).apply ((xargs)) (0))) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                                ((((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))).eq 2).if
                                  (((unsupported)).apply (((((xself).xexpand_to_include)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) (1))) ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) (1))))))))
                                  ((((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))).eq 4).if
                                    seq
                                      (((unsupported)).apply ((((unsupported)).apply ((xminx)) ((xminy)) ((xmaxx)) ((xmaxy)))) ((((unsupported)).apply ((xargs)) (0))))
                                      ((xminx).less (((xself).x_envelope).xMinX)).if
                                        (((unsupported)).apply ((((xself).x_envelope).xMinX)) ((xminx)))
                                      ((xminy).less (((xself).x_envelope).xMinY)).if
                                        (((unsupported)).apply ((((xself).x_envelope).xMinY)) ((xminy)))
                                      ((xmaxx).greater (((xself).x_envelope).xMaxX)).if
                                        (((unsupported)).apply ((((xself).x_envelope).xMaxX)) ((xmaxx)))
                                      ((xmaxy).greater (((xself).x_envelope).xMaxY)).if
                                        (((unsupported)).apply ((((xself).x_envelope).xMaxY)) ((xmaxy)))
                                    (((unsupported)).apply ((((xGDALException)).apply (("Incorrect number of tuple elements (%d).".mod (((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))))))))
                                (((unsupported)).apply ((((xTypeError)).apply (("Incorrect type of argument: %s".mod (((xtype)).apply ((((unsupported)).apply ((xargs)) (0)))))))))
                          ((((xlen)).apply ((xargs))).eq 2).if
                            (((unsupported)).apply (((((xself).xexpand_to_include)).apply ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (0))) ((((unsupported)).apply ((xargs)) (1))) ((((unsupported)).apply ((xargs)) (0))) ((((unsupported)).apply ((xargs)) (1))))))))
                            ((((xlen)).apply ((xargs))).eq 4).if
                              (((unsupported)).apply (((((xself).xexpand_to_include)).apply ((xargs)))))
                              (((unsupported)).apply ((((xGDALException)).apply (("Incorrect number (%d) of arguments.".mod (((xlen)).apply ((((unsupported)).apply ((xargs)) (0)))))))))
                xmin_x.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xself).x_envelope).xMinX)))
                xmin_y.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xself).x_envelope).xMinY)))
                xmax_x.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xself).x_envelope).xMaxX)))
                xmax_y.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xself).x_envelope).xMaxY)))
                xur.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmax_x)) (((xself).xmax_y)))))
                xll.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmin_x)) (((xself).xmin_y)))))
                xtuple.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmin_x)) (((xself).xmin_y)) (((xself).xmax_x)) (((xself).xmax_y)))))
                xwkt.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (("POLYGON((%s %s,%s %s,%s %s,%s %s,%s %s))".mod (((unsupported)).apply (((xself).xmin_x)) (((xself).xmin_y)) (((xself).xmin_x)) (((xself).xmax_y)) (((xself).xmax_x)) (((xself).xmax_y)) (((xself).xmax_x)) (((xself).xmin_y)) (((xself).xmin_x)) (((xself).xmin_y))))))