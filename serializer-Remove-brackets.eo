memory > xqs_path
memory > xk_string
memory > xargs_string
memory > xhasattr
memory > xDateTimeSerializer
memory > xSetSerializer
memory > xk
memory > xtypes
memory > xOperation
memory > xv_string
memory > xDatetimeDatetimeSerializer
memory > xflag_imports
memory > xPathSerializer
memory > xDeconstructableSerializer
memory > xLazyObject
memory > xSerializer
memory > xpattern_imports
memory > xChoicesSerializer
memory > xFunctoolsPartialSerializer
memory > xCOMPILED_REGEX_TYPE
memory > xlist
memory > xv_imports
memory > xdatetime
memory > xdecimal
memory > xuuid
memory > xDictionarySerializer
memory > xOperationSerializer
memory > xFunctionTypeSerializer
memory > xregex_flags
memory > xValueError
memory > xFrozensetSerializer
memory > xfrozenset
memory > xSequenceSerializer
memory > xstr
memory > xOperationWriter
memory > xModelManagerSerializer
memory > xserializer_cls
memory > xas_manager
memory > xUUIDSerializer
memory > xBaseSerializer
memory > xSettingsReferenceSerializer
memory > xrange
memory > xmath
memory > xBaseSimpleSerializer
memory > xEnumSerializer
memory > xIterableSerializer
memory > xFloatSerializer
memory > xPathLikeSerializer
memory > ximports
memory > xcollections
memory > xNotImplementedError
memory > xModelFieldSerializer
memory > xcase
memory > xRegexSerializer
memory > xitem_imports
memory > xarg_string
memory > xtype_
memory > xpath
memory > xkw
memory > xtype
memory > xpathlib
memory > xmanager_path
memory > xstring
memory > xset
memory > xTupleSerializer
memory > xint
memory > xre
memory > xkeywords_imports
memory > xBaseSequenceSerializer
memory > xrepr
memory > xDecimalSerializer
memory > xkeywords_string
memory > xitem_string
memory > xarg
memory > xbuiltins
memory > xsuper
memory > xmodule
memory > xbool
memory > xissubclass
memory > xtuple
memory > xregex_pattern
memory > xarg_imports
memory > xfunc_imports
memory > xbytes
memory > xsorted
memory > xfloat
memory > xargs
memory > xos
memory > xenum
memory > xSettingsReference
memory > xRegexObject
memory > xitem
memory > xgetattr
memory > xk_imports
memory > xv
memory > xTypeSerializer
memory > xattr_name
memory > xargs_imports
memory > xname
memory > xmodels
memory > xfunc_string
memory > xkwargs
memory > xget_docs_version
memory > xisinstance
memory > xPromise
memory > xfunctools
memory > xlen
memory > xdict
[] > serializer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xserializer_factory
        memory > xserialize
        memory > x_registry
        memory > x_format
        memory > xunregister
        memory > xregister
        memory > x_serialize_path
        memory > x__init__
        memory > xserialize_deconstructed
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                xserialize.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Subclasses of BaseSerializer must implement the serialize method."))))
            (((unsupported)).apply ((xBaseSerializer)))
              seq
                x_format.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Subclasses of BaseSequenceSerializer must implement the _format method."))))
                xserialize.write
                  [xself]
                    memory > xvalue
                    memory > xstrings
                    memory > ximports
                    seq > @
                      seq
                        ximports.write (xset)
                        xstrings.write (((unsupported)).apply)
                        (((unsupported)).apply ((xitem)) (((xself).xvalue)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xitem_string)) ((xitem_imports)))) (((((xserializer_factory)).apply ((xitem))).xserialize)))
                            bogusForceDataize.write ((((ximports).xupdate)).apply ((xitem_imports)))
                            bogusForceDataize.write ((((xstrings).xappend)).apply ((xitem_string)))
                        xvalue.write ((xself).x_format)
                        (((unsupported)).apply ((((unsupported)).apply (((xvalue).mod (((", ".xjoin)).apply ((xstrings))))) ((ximports)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply ((((xrepr)).apply (((xself).xvalue)))) ((xset)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply (((((xserializer_factory)).apply ((((xself).xvalue).xvalue))).xserialize)))
            (((unsupported)).apply ((xBaseSerializer)))
              seq
                unsupported
                xserialize.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xrepr)).apply (((xself).xvalue)))) ((((unsupported)).apply ("import datetime"))))))
            (((unsupported)).apply ((xBaseSerializer)))
              seq
                unsupported
                xserialize.write
                  [xself]
                    memory > ximports
                    seq > @
                      seq
                        ((((unsupported)).apply ((((xself).xvalue).xtzinfo)) ("None: is there a None literal in the EO language?")).and ((((xself).xvalue).xtzinfo).neq (((xdatetime).xtimezone).xutc))).if
                          (((unsupported)).apply (((xself).xvalue)) ((((((xself).xvalue).xastimezone)).apply ((((xdatetime).xtimezone).xutc)))))
                        ximports.write (((unsupported)).apply ("import datetime"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xrepr)).apply (((xself).xvalue)))) ((((xset)).apply ((ximports)))))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply ((((xrepr)).apply (((xself).xvalue)))) ((((unsupported)).apply ("from decimal import Decimal"))))))
            (((unsupported)).apply ((xBaseSerializer)))
              seq
                xserialize_deconstructed.write
                  [xpath xargs xkwargs]
                    memory > xstrings
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((ximports)))) (((((xDeconstructableSerializer).x_serialize_path)).apply ((xpath)))))
                        xstrings.write (((unsupported)).apply)
                        (((unsupported)).apply ((xarg)) ((xargs)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xarg_string)) ((xarg_imports)))) (((((xserializer_factory)).apply ((xarg))).xserialize)))
                            bogusForceDataize.write ((((xstrings).xappend)).apply ((xarg_string)))
                            bogusForceDataize.write ((((ximports).xupdate)).apply ((xarg_imports)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkw)) ((xarg)))) ((((xsorted)).apply (((xkwargs).xitems)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xarg_string)) ((xarg_imports)))) (((((xserializer_factory)).apply ((xarg))).xserialize)))
                            bogusForceDataize.write ((((ximports).xupdate)).apply ((xarg_imports)))
                            bogusForceDataize.write ((((xstrings).xappend)).apply (("%s=%s".mod (((unsupported)).apply ((xkw)) ((xarg_string))))))
                        (((unsupported)).apply ((((unsupported)).apply (("%s(%s)".mod (((unsupported)).apply ((xname)) ((((", ".xjoin)).apply ((xstrings))))))) ((ximports)))))
                x_serialize_path.write
                  [xpath]
                    memory > xname
                    memory > ximports
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodule)) ((xname)))) (((((xpath).xrsplit)).apply (".") (1))))
                        ((xmodule).eq "django.db.models").if
                          seq
                            ximports.write (((unsupported)).apply ("from django.db import models"))
                            xname.write ("models.%s".mod (xname))
                          seq
                            ximports.write (((unsupported)).apply (("import %s".mod (xmodule))))
                            xname.write (xpath)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((ximports)))))
                xserialize.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xserialize_deconstructed)).apply ((((unsupported)).apply ((((xself).xvalue).xdeconstruct)))))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xstrings
                  memory > ximports
                  seq > @
                    seq
                      ximports.write (xset)
                      xstrings.write (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((xsorted)).apply ((((xself).xvalue).xitems)))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xk_string)) ((xk_imports)))) (((((xserializer_factory)).apply ((xk))).xserialize)))
                          (((unsupported)).apply ((((unsupported)).apply ((xv_string)) ((xv_imports)))) (((((xserializer_factory)).apply ((xv))).xserialize)))
                          bogusForceDataize.write ((((ximports).xupdate)).apply ((xk_imports)))
                          bogusForceDataize.write ((((ximports).xupdate)).apply ((xv_imports)))
                          bogusForceDataize.write ((((xstrings).xappend)).apply ((((unsupported)).apply ((xk_string)) ((xv_string)))))
                      (((unsupported)).apply ((((unsupported)).apply (("{%s}".mod (((", ".xjoin)).apply ((((unsupported)).apply (("%s: %s".mod (((unsupported)).apply ((xk)) ((xv))))) ((((unsupported)).apply ((xk)) ((xv)))) ((xstrings))))))) ((ximports)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xenum_class
                  memory > xmodule
                  seq > @
                    seq
                      xenum_class.write (((xself).xvalue).x__class__)
                      xmodule.write ((xenum_class).x__module__)
                      (((unsupported)).apply ((((unsupported)).apply (("%s.%s[%r]".mod (((unsupported)).apply ((xmodule)) (((xenum_class).x__qualname__)) ((((xself).xvalue).xname))))) ((((unsupported)).apply (("import %s".mod (xmodule))))))))
            (((unsupported)).apply ((xBaseSimpleSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    seq
                      (((((xmath).xisnan)).apply (((xself).xvalue))).or ((((xmath).xisinf)).apply (((xself).xvalue)))).if
                        (((unsupported)).apply ((((unsupported)).apply (((("float(\"{}\")".xformat)).apply (((xself).xvalue)))) ((xset)))))
                      (((unsupported)).apply (((xsuper).xserialize)))
            (((unsupported)).apply ((xBaseSequenceSerializer)))
              x_format.write
                [xself]
                  seq > @
                    (((unsupported)).apply ("frozenset([%s])"))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xmodule_name
                  memory > xklass
                  memory > xmodule
                  seq > @
                    seq
                      ((((xgetattr)).apply (((xself).xvalue)) ("__self__") ("None: is there a None literal in the EO language?")).and (((xisinstance)).apply ((((xself).xvalue).x__self__)) ((xtype)))).if
                        seq
                          xklass.write (((xself).xvalue).x__self__)
                          xmodule.write ((xklass).x__module__)
                          (((unsupported)).apply ((((unsupported)).apply (("%s.%s.%s".mod (((unsupported)).apply ((xmodule)) (((xklass).x__name__)) ((((xself).xvalue).x__name__))))) ((((unsupported)).apply (("import %s".mod (xmodule))))))))
                      ((((xself).xvalue).x__name__).eq "<lambda>").if
                        (((unsupported)).apply ((((xValueError)).apply ("Cannot serialize function: lambda"))))
                      (((unsupported)).apply ((((xself).xvalue).x__module__)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply ((((xValueError)).apply (("Cannot serialize function %r: No module".mod ((xself).xvalue))))))
                      xmodule_name.write (((xself).xvalue).x__module__)
                      (((unsupported)).apply ("<") ((((xself).xvalue).x__qualname__))).if
                        (((unsupported)).apply ((((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((xmodule_name)) ((((xself).xvalue).x__qualname__))))) ((((unsupported)).apply (("import %s".mod (((xself).xvalue).x__module__))))))))
                      (((unsupported)).apply ((((xValueError)).apply (("Could not find function %s in %s.n".mod (((unsupported)).apply ((((xself).xvalue).x__name__)) ((xmodule_name))))))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > ximports
                  seq > @
                    seq
                      (((unsupported)).apply ((((unsupported)).apply ((xfunc_string)) ((xfunc_imports)))) (((((xserializer_factory)).apply ((((xself).xvalue).xfunc))).xserialize)))
                      (((unsupported)).apply ((((unsupported)).apply ((xargs_string)) ((xargs_imports)))) (((((xserializer_factory)).apply ((((xself).xvalue).xargs))).xserialize)))
                      (((unsupported)).apply ((((unsupported)).apply ((xkeywords_string)) ((xkeywords_imports)))) (((((xserializer_factory)).apply ((((xself).xvalue).xkeywords))).xserialize)))
                      ximports.write (((unsupported)).apply ("import functools") ((((unsupported)).apply ((xfunc_imports)))) ((((unsupported)).apply ((xargs_imports)))) ((((unsupported)).apply ((xkeywords_imports)))))
                      (((unsupported)).apply ((((unsupported)).apply (("functools.%s(%s, *%s, **%s)".mod (((unsupported)).apply (((((xself).xvalue).x__class__).x__name__)) ((xfunc_string)) ((xargs_string)) ((xkeywords_string))))) ((ximports)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xvalue
                  memory > xstrings
                  memory > ximports
                  seq > @
                    seq
                      ximports.write (xset)
                      xstrings.write (((unsupported)).apply)
                      (((unsupported)).apply ((xitem)) (((xself).xvalue)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xitem_string)) ((xitem_imports)))) (((((xserializer_factory)).apply ((xitem))).xserialize)))
                          bogusForceDataize.write ((((ximports).xupdate)).apply ((xitem_imports)))
                          bogusForceDataize.write ((((xstrings).xappend)).apply ((xitem_string)))
                      xvalue.write (((((xlen)).apply ((xstrings))).neq 1).if "(%s)" "(%s,)")
                      (((unsupported)).apply ((((unsupported)).apply (((xvalue).mod (((", ".xjoin)).apply ((xstrings))))) ((ximports)))))
            (((unsupported)).apply ((xDeconstructableSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply ((((unsupported)).apply ((xattr_name)) ((xpath)) ((xargs)) ((xkwargs)))) ((((xself).xvalue).xdeconstruct)))
                      (((unsupported)).apply (((((xself).xserialize_deconstructed)).apply ((xpath)) ((xargs)) ((xkwargs)))))
            (((unsupported)).apply ((xDeconstructableSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply ((((unsupported)).apply ((xas_manager)) ((xmanager_path)) ((xqs_path)) ((xargs)) ((xkwargs)))) ((((xself).xvalue).xdeconstruct)))
                      (xas_manager).if
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xname)) ((ximports)))) (((((xself).x_serialize_path)).apply ((xqs_path)))))
                          (((unsupported)).apply ((((unsupported)).apply (("%s.as_manager".mod (xname))) ((ximports)))))
                        (((unsupported)).apply (((((xself).xserialize_deconstructed)).apply ((xmanager_path)) ((xargs)) ((xkwargs)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((unsupported)).apply ((xOperationWriter)) (((xself).xvalue)) (0)).xserialize)))
                      (((unsupported)).apply ((((unsupported)).apply (((((xstring).xrstrip)).apply (","))) ((ximports)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply ((((xrepr)).apply (((((xos).xfspath)).apply (((xself).xvalue)))))) ((((unsupported)).apply)))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xprefix
                  seq > @
                    seq
                      xprefix.write ((((xisinstance)).apply (((xself).xvalue)) (((xpathlib).xPath))).if "Pure" "")
                      (((unsupported)).apply ((((unsupported)).apply (("pathlib.%s%r".mod (((unsupported)).apply ((xprefix)) (((xself).xvalue))))) ((((unsupported)).apply ("import pathlib"))))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xargs
                  memory > xflags
                  memory > ximports
                  seq > @
                    seq
                      (((unsupported)).apply ((((unsupported)).apply ((xregex_pattern)) ((xpattern_imports)))) (((((xserializer_factory)).apply ((((xself).xvalue).xpattern))).xserialize)))
                      xflags.write (((unsupported)).apply ((((xself).xvalue).xflags)) ((((((xre).xcompile)).apply ("")).xflags)))
                      (((unsupported)).apply ((((unsupported)).apply ((xregex_flags)) ((xflag_imports)))) (((((xserializer_factory)).apply ((xflags))).xserialize)))
                      ximports.write (((unsupported)).apply ("import re") ((((unsupported)).apply ((xpattern_imports)))) ((((unsupported)).apply ((xflag_imports)))))
                      xargs.write (((unsupported)).apply ((xregex_pattern)))
                      (xflags).if
                        bogusForceDataize.write ((((xargs).xappend)).apply ((xregex_flags)))
                      (((unsupported)).apply ((((unsupported)).apply (("re.compile(%s)".mod (((", ".xjoin)).apply ((xargs))))) ((ximports)))))
            (((unsupported)).apply ((xBaseSequenceSerializer)))
              x_format.write
                [xself]
                  seq > @
                    (((unsupported)).apply ("[%s]"))
            (((unsupported)).apply ((xBaseSequenceSerializer)))
              x_format.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((xself).xvalue).if "{%s}" "set(%s)")))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply (("settings.%s".mod (((xself).xvalue).xsetting_name))) ((((unsupported)).apply ("from django.conf import settings"))))))
            (((unsupported)).apply ((xBaseSequenceSerializer)))
              x_format.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((((xlen)).apply (((xself).xvalue))).neq 1).if "(%s)" "(%s,)")))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  memory > xspecial_cases
                  memory > xmodule
                  seq > @
                    seq
                      xspecial_cases.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xModel)) ("models.Model") ((((unsupported)).apply ("from django.db import models"))))) ((((unsupported)).apply ((((xtype)).apply ("None: is there a None literal in the EO language?"))) ("type(None)") ((((unsupported)).apply)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((xstring)) ((ximports)))) ((xspecial_cases)))
                        (((unsupported)).apply ((xcase)) (((xself).xvalue))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((((xset)).apply ((ximports)))))))
                      (((xhasattr)).apply (((xself).xvalue)) ("__module__")).if
                        seq
                          xmodule.write (((xself).xvalue).x__module__)
                          ((xmodule).eq ((xbuiltins).x__name__)).if
                            (((unsupported)).apply ((((unsupported)).apply ((((xself).xvalue).x__name__)) ((xset)))))
                            (((unsupported)).apply ((((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((xmodule)) ((((xself).xvalue).x__qualname__))))) ((((unsupported)).apply (("import %s".mod (xmodule))))))))
            (((unsupported)).apply ((xBaseSerializer)))
              xserialize.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply (("uuid.%s".mod (((xrepr)).apply (((xself).xvalue))))) ((((unsupported)).apply ("import uuid"))))))
            (((unsupported)).apply)
              seq
                x_registry.write (((unsupported)).apply ((xfrozenset)) ((xFrozensetSerializer)) ((xlist)) ((xSequenceSerializer)) ((xset)) ((xSetSerializer)) ((xtuple)) ((xTupleSerializer)) ((xdict)) ((xDictionarySerializer)) (((xmodels).xChoices)) ((xChoicesSerializer)) (((xenum).xEnum)) ((xEnumSerializer)) (((xdatetime).xdatetime)) ((xDatetimeDatetimeSerializer)) ((((unsupported)).apply (((xdatetime).xdate)) (((xdatetime).xtimedelta)) (((xdatetime).xtime)))) ((xDateTimeSerializer)) ((xSettingsReference)) ((xSettingsReferenceSerializer)) ((xfloat)) ((xFloatSerializer)) ((((unsupported)).apply ((xbool)) ((xint)) ((((xtype)).apply ("None: is there a None literal in the EO language?"))) ((xbytes)) ((xstr)) ((xrange)))) ((xBaseSimpleSerializer)) (((xdecimal).xDecimal)) ((xDecimalSerializer)) ((((unsupported)).apply (((xfunctools).xpartial)) (((xfunctools).xpartialmethod)))) ((xFunctoolsPartialSerializer)) ((((unsupported)).apply (((xtypes).xFunctionType)) (((xtypes).xBuiltinFunctionType)) (((xtypes).xMethodType)))) ((xFunctionTypeSerializer)) ((((xcollections).xabc).xIterable)) ((xIterableSerializer)) ((((unsupported)).apply ((xCOMPILED_REGEX_TYPE)) ((xRegexObject)))) ((xRegexSerializer)) (((xuuid).xUUID)) ((xUUIDSerializer)) (((xpathlib).xPurePath)) ((xPathSerializer)) (((xos).xPathLike)) ((xPathLikeSerializer)))
                xregister.write
                  [xcls xtype_ xserializer]
                    seq > @
                      (((unsupported)).apply)
                        ((((xissubclass)).apply ((xserializer)) ((xBaseSerializer))).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("'%s' must inherit from 'BaseSerializer'.".mod ((xserializer).x__name__))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xcls).x_registry)) ((xtype_)))) ((xserializer)))
                xunregister.write
                  [xcls xtype_]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xcls).x_registry).xpop)).apply ((xtype_)))
            xserializer_factory.write
              [xvalue]
                seq > @
                  seq
                    (((xisinstance)).apply ((xvalue)) ((xPromise))).if
                      xvalue.write (((xstr)).apply ((xvalue)))
                      (((xisinstance)).apply ((xvalue)) ((xLazyObject))).if
                        xvalue.write (((unsupported)).apply ((((unsupported)).apply (((xvalue).x__reduce__)) (1))) (0))
                    (((xisinstance)).apply ((xvalue)) (((xmodels).xField))).if
                      (((unsupported)).apply ((((xModelFieldSerializer)).apply ((xvalue)))))
                    (((xisinstance)).apply ((xvalue)) ((((xmodels).xmanager).xBaseManager))).if
                      (((unsupported)).apply ((((xModelManagerSerializer)).apply ((xvalue)))))
                    (((xisinstance)).apply ((xvalue)) ((xOperation))).if
                      (((unsupported)).apply ((((xOperationSerializer)).apply ((xvalue)))))
                    (((xisinstance)).apply ((xvalue)) ((xtype))).if
                      (((unsupported)).apply ((((xTypeSerializer)).apply ((xvalue)))))
                    (((xhasattr)).apply ((xvalue)) ("deconstruct")).if
                      (((unsupported)).apply ((((xDeconstructableSerializer)).apply ((xvalue)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xtype_)) ((xserializer_cls)))) ((((xSerializer).x_registry).xitems)))
                      (((xisinstance)).apply ((xvalue)) ((xtype_))).if
                        (((unsupported)).apply ((((xserializer_cls)).apply ((xvalue)))))
                    (((unsupported)).apply ((((xValueError)).apply (("Cannot serialize: %rnThere are some values Django cannot serialize into migration files.nFor more, see https://docs.djangoproject.com/en/%s/topics/migrations/#migration-serializing".mod (((unsupported)).apply ((xvalue)) ((xget_docs_version))))))))