memory > xcompile_command
memory > xio
memory > xwarnings
memory > xexec
memory > xeval
memory > xw
memory > xDeprecationWarning
memory > xunittest
memory > xPyCF_DONT_IMPLY_DEDENT
memory > xn
memory > xSyntaxWarning
memory > xlen
memory > x__name__
memory > xhasattr
memory > xOverflowError
memory > xcompile
memory > xsupport
memory > xsys
memory > xv
memory > xSyntaxError
[] > test_codeop
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_incomplete
        memory > xassertValid
        memory > xassertInvalid
        memory > xtest_filename
        memory > xunify_callables
        memory > xtest_invalid
        memory > xtest_warning
        memory > xassertIncomplete
        memory > xtest_valid
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            ((xsupport).xis_jython).if
              seq
                (((unsupported)).apply)
                xunify_callables.write
                  [xd]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xv)))) (((((xd).xitems)).apply)))
                          (((xhasattr)).apply ("__call__") ((xv))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xn)))) (TRUE))
                        (((unsupported)).apply ((xd)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertValid.write
                  [xself xstr xsymbol]
                    memory > xd
                    memory > xexpected
                    memory > xctx
                    memory > xsaved_stdout
                    memory > xr
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xsupport).xis_jython).if
                          seq
                            xcode.write (((xcompile_command)).apply ((xstr)) ("<input>") ((xsymbol)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcode)))
                            ((xsymbol).eq "single").if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xr)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                                xsaved_stdout.write ((xsys).xstdout)
                                (((unsupported)).apply (((xsys).xstdout)) (((((xio).xStringIO)).apply)))
                                (((unsupported)).apply)
                                  seq
                                    bogusForceDataize.write (((xexec)).apply ((xcode)) ((xd)))
                                    bogusForceDataize.write (((xexec)).apply ((((xcompile)).apply ((xstr)) ("<input>") ("single"))) ((xr)))
                                  (((unsupported)).apply (((xsys).xstdout)) ((xsaved_stdout)))
                              ((xsymbol).eq "eval").if
                                seq
                                  xctx.write (((unsupported)).apply ("a") (2))
                                  xd.write (((unsupported)).apply ("value") ((((xeval)).apply ((xcode)) ((xctx)))))
                                  xr.write (((unsupported)).apply ("value") ((((xeval)).apply ((xstr)) ((xctx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunify_callables)).apply ((xr)))) ((((xunify_callables)).apply ((xd)))))
                          seq
                            xexpected.write (((xcompile)).apply ((xstr)) ("<input>") ((xsymbol)) ((xPyCF_DONT_IMPLY_DEDENT)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcompile_command)).apply ((xstr)) ("<input>") ((xsymbol)))) ((xexpected)))
                xassertIncomplete.write
                  [xself xstr xsymbol]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcompile_command)) ((xstr)) ((xsymbol)))) ("None: is there a None literal in the EO language?"))
                xassertInvalid.write
                  [xself xstr xsymbol xis_syntax]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((xSyntaxError)) ((xOverflowError)))
                          seq
                            (((unsupported)).apply ((xcompile_command)) ((xstr)) ((xsymbol)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("No exception raised for invalid code"))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((xis_syntax)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xis_syntax).not)))
                xtest_valid.write
                  [xself]
                    memory > xav
                    seq > @
                      seq
                        xav.write ((xself).xassertValid)
                        (((xsupport).xis_jython).not).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcompile_command)).apply (""))) ((((xcompile)).apply ("pass") ("<input>") ("single") ((xPyCF_DONT_IMPLY_DEDENT)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcompile_command)).apply ("n"))) ((((xcompile)).apply ("pass") ("<input>") ("single") ((xPyCF_DONT_IMPLY_DEDENT)))))
                          seq
                            bogusForceDataize.write (((xav)).apply (""))
                            bogusForceDataize.write (((xav)).apply ("n"))
                        bogusForceDataize.write (((xav)).apply ("a = 1"))
                        bogusForceDataize.write (((xav)).apply ("na = 1"))
                        bogusForceDataize.write (((xav)).apply ("a = 1n"))
                        bogusForceDataize.write (((xav)).apply ("a = 1nn"))
                        bogusForceDataize.write (((xav)).apply ("nna = 1nn"))
                        bogusForceDataize.write (((xav)).apply ("def x():n  passn"))
                        bogusForceDataize.write (((xav)).apply ("if 1:n passn"))
                        bogusForceDataize.write (((xav)).apply ("nnif 1: passn"))
                        bogusForceDataize.write (((xav)).apply ("nnif 1: passnn"))
                        bogusForceDataize.write (((xav)).apply ("def x():nn passn"))
                        bogusForceDataize.write (((xav)).apply ("def x():n  passn  n"))
                        bogusForceDataize.write (((xav)).apply ("def x():n  passn n"))
                        bogusForceDataize.write (((xav)).apply ("passn"))
                        bogusForceDataize.write (((xav)).apply ("3**3n"))
                        bogusForceDataize.write (((xav)).apply ("if 9==3:n   passnelse:n   passn"))
                        bogusForceDataize.write (((xav)).apply ("if 1:n passn if 1:n  passn else:n  passn"))
                        bogusForceDataize.write (((xav)).apply ("#an#bna = 3n"))
                        bogusForceDataize.write (((xav)).apply ("#ann   na=3n"))
                        bogusForceDataize.write (((xav)).apply ("a=3nn"))
                        bogusForceDataize.write (((xav)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xav)).apply ("3**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("(lambda z: n z**3)") ("eval"))
                        bogusForceDataize.write (((xav)).apply ((((unsupported)).apply)) ("eval"))
                        bogusForceDataize.write (((xav)).apply ((((unsupported)).apply)) ("eval"))
                        bogusForceDataize.write (((xav)).apply ("nna**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("n na**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("#an#bna**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("nna = 1nn"))
                        bogusForceDataize.write (((xav)).apply ("nnif 1: a=1nn"))
                        bogusForceDataize.write (((xav)).apply ("if 1:n passn if 1:n  passn else:n  passn"))
                        bogusForceDataize.write (((xav)).apply ("#ann   na=3nn"))
                        bogusForceDataize.write (((xav)).apply ("nna**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("n na**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("#an#bna**3") ("eval"))
                        bogusForceDataize.write (((xav)).apply ("def f():n try: passn finally: [x for x in (1,2)]n"))
                        bogusForceDataize.write (((xav)).apply ("def f():n passn#foon"))
                        bogusForceDataize.write (((xav)).apply ("@a.b.cndef f():n passn"))
                xtest_incomplete.write
                  [xself]
                    memory > xai
                    seq > @
                      seq
                        xai.write ((xself).xassertIncomplete)
                        bogusForceDataize.write (((xai)).apply ("(a **"))
                        bogusForceDataize.write (((xai)).apply ("(a,b,"))
                        bogusForceDataize.write (((xai)).apply ("(a,b,("))
                        bogusForceDataize.write (((xai)).apply ("(a,b,("))
                        bogusForceDataize.write (((xai)).apply ("a = ("))
                        bogusForceDataize.write (((xai)).apply ("a = {"))
                        bogusForceDataize.write (((xai)).apply ("b + {"))
                        bogusForceDataize.write (((xai)).apply ("if 9==3:n   passnelse:"))
                        bogusForceDataize.write (((xai)).apply ("if 9==3:n   passnelse:n"))
                        bogusForceDataize.write (((xai)).apply ("if 9==3:n   passnelse:n   pass"))
                        bogusForceDataize.write (((xai)).apply ("if 1:"))
                        bogusForceDataize.write (((xai)).apply ("if 1:n"))
                        bogusForceDataize.write (((xai)).apply ("if 1:n passn if 1:n  passn else:"))
                        bogusForceDataize.write (((xai)).apply ("if 1:n passn if 1:n  passn else:n"))
                        bogusForceDataize.write (((xai)).apply ("if 1:n passn if 1:n  passn else:n  pass"))
                        bogusForceDataize.write (((xai)).apply ("def x():"))
                        bogusForceDataize.write (((xai)).apply ("def x():n"))
                        bogusForceDataize.write (((xai)).apply ("def x():nn"))
                        bogusForceDataize.write (((xai)).apply ("def x():n  pass"))
                        bogusForceDataize.write (((xai)).apply ("def x():n  passn "))
                        bogusForceDataize.write (((xai)).apply ("def x():n  passn  "))
                        bogusForceDataize.write (((xai)).apply ("nndef x():n  pass"))
                        bogusForceDataize.write (((xai)).apply ("a = 9+ \\"))
                        bogusForceDataize.write (((xai)).apply ("a = 'a\\"))
                        bogusForceDataize.write (((xai)).apply ("a = '''xy"))
                        bogusForceDataize.write (((xai)).apply ("") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("n") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("(") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("(nnn") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("(9+") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("9+ \\") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("lambda z: \\") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("if True:n if True:n  if True:   n"))
                        bogusForceDataize.write (((xai)).apply ("@a("))
                        bogusForceDataize.write (((xai)).apply ("@a(b"))
                        bogusForceDataize.write (((xai)).apply ("@a(b,"))
                        bogusForceDataize.write (((xai)).apply ("@a(b,c"))
                        bogusForceDataize.write (((xai)).apply ("@a(b,c,"))
                        bogusForceDataize.write (((xai)).apply ("from a import ("))
                        bogusForceDataize.write (((xai)).apply ("from a import (b"))
                        bogusForceDataize.write (((xai)).apply ("from a import (b,"))
                        bogusForceDataize.write (((xai)).apply ("from a import (b,c"))
                        bogusForceDataize.write (((xai)).apply ("from a import (b,c,"))
                        bogusForceDataize.write (((xai)).apply ("["))
                        bogusForceDataize.write (((xai)).apply ("[a"))
                        bogusForceDataize.write (((xai)).apply ("[a,"))
                        bogusForceDataize.write (((xai)).apply ("[a,b"))
                        bogusForceDataize.write (((xai)).apply ("[a,b,"))
                        bogusForceDataize.write (((xai)).apply ("{"))
                        bogusForceDataize.write (((xai)).apply ("{a"))
                        bogusForceDataize.write (((xai)).apply ("{a:"))
                        bogusForceDataize.write (((xai)).apply ("{a:b"))
                        bogusForceDataize.write (((xai)).apply ("{a:b,"))
                        bogusForceDataize.write (((xai)).apply ("{a:b,c"))
                        bogusForceDataize.write (((xai)).apply ("{a:b,c:"))
                        bogusForceDataize.write (((xai)).apply ("{a:b,c:d"))
                        bogusForceDataize.write (((xai)).apply ("{a:b,c:d,"))
                        bogusForceDataize.write (((xai)).apply ("a("))
                        bogusForceDataize.write (((xai)).apply ("a(b"))
                        bogusForceDataize.write (((xai)).apply ("a(b,"))
                        bogusForceDataize.write (((xai)).apply ("a(b,c"))
                        bogusForceDataize.write (((xai)).apply ("a(b,c,"))
                        bogusForceDataize.write (((xai)).apply ("a["))
                        bogusForceDataize.write (((xai)).apply ("a[b"))
                        bogusForceDataize.write (((xai)).apply ("a[b,"))
                        bogusForceDataize.write (((xai)).apply ("a[b:"))
                        bogusForceDataize.write (((xai)).apply ("a[b:c"))
                        bogusForceDataize.write (((xai)).apply ("a[b:c:"))
                        bogusForceDataize.write (((xai)).apply ("a[b:c:d"))
                        bogusForceDataize.write (((xai)).apply ("def a("))
                        bogusForceDataize.write (((xai)).apply ("def a(b"))
                        bogusForceDataize.write (((xai)).apply ("def a(b,"))
                        bogusForceDataize.write (((xai)).apply ("def a(b,c"))
                        bogusForceDataize.write (((xai)).apply ("def a(b,c,"))
                        bogusForceDataize.write (((xai)).apply ("("))
                        bogusForceDataize.write (((xai)).apply ("(a"))
                        bogusForceDataize.write (((xai)).apply ("(a,"))
                        bogusForceDataize.write (((xai)).apply ("(a,b"))
                        bogusForceDataize.write (((xai)).apply ("(a,b,"))
                        bogusForceDataize.write (((xai)).apply ("if a:n passnelif b:"))
                        bogusForceDataize.write (((xai)).apply ("if a:n passnelif b:n passnelse:"))
                        bogusForceDataize.write (((xai)).apply ("while a:"))
                        bogusForceDataize.write (((xai)).apply ("while a:n passnelse:"))
                        bogusForceDataize.write (((xai)).apply ("for a in b:"))
                        bogusForceDataize.write (((xai)).apply ("for a in b:n passnelse:"))
                        bogusForceDataize.write (((xai)).apply ("try:"))
                        bogusForceDataize.write (((xai)).apply ("try:n passnexcept:"))
                        bogusForceDataize.write (((xai)).apply ("try:n passnfinally:"))
                        bogusForceDataize.write (((xai)).apply ("try:n passnexcept:n passnfinally:"))
                        bogusForceDataize.write (((xai)).apply ("with a:"))
                        bogusForceDataize.write (((xai)).apply ("with a as b:"))
                        bogusForceDataize.write (((xai)).apply ("class a:"))
                        bogusForceDataize.write (((xai)).apply ("class a("))
                        bogusForceDataize.write (((xai)).apply ("class a(b"))
                        bogusForceDataize.write (((xai)).apply ("class a(b,"))
                        bogusForceDataize.write (((xai)).apply ("class a():"))
                        bogusForceDataize.write (((xai)).apply ("[x for"))
                        bogusForceDataize.write (((xai)).apply ("[x for x in"))
                        bogusForceDataize.write (((xai)).apply ("[x for x in ("))
                        bogusForceDataize.write (((xai)).apply ("(x for"))
                        bogusForceDataize.write (((xai)).apply ("(x for x in"))
                        bogusForceDataize.write (((xai)).apply ("(x for x in ("))
                xtest_invalid.write
                  [xself]
                    memory > xai
                    seq > @
                      seq
                        xai.write ((xself).xassertInvalid)
                        bogusForceDataize.write (((xai)).apply ("a b"))
                        bogusForceDataize.write (((xai)).apply ("a @"))
                        bogusForceDataize.write (((xai)).apply ("a b @"))
                        bogusForceDataize.write (((xai)).apply ("a ** @"))
                        bogusForceDataize.write (((xai)).apply ("a = "))
                        bogusForceDataize.write (((xai)).apply ("a = 9 +"))
                        bogusForceDataize.write (((xai)).apply ("def x():nnpassn"))
                        bogusForceDataize.write (((xai)).apply ("nn if 1: passnnpass"))
                        bogusForceDataize.write (((xai)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xai)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xai)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xai)).apply ("a = 1") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("a = (") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("]") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("())") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("[}") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("9+") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("lambda z:") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("a b") ("eval"))
                        bogusForceDataize.write (((xai)).apply ("return 2.3"))
                        bogusForceDataize.write (((xai)).apply ("if (a == 1 and b = 2): pass"))
                        bogusForceDataize.write (((xai)).apply ("del 1"))
                        bogusForceDataize.write (((xai)).apply ("del (1,)"))
                        bogusForceDataize.write (((xai)).apply ("del [1]"))
                        bogusForceDataize.write (((xai)).apply ("del '1'"))
                        bogusForceDataize.write (((xai)).apply ("[i for i in range(10)] = (1, 2, 3)"))
                xtest_filename.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcompile_command)).apply ("a = 1n") ("abc")).xco_filename)) (((((xcompile)).apply ("a = 1n") ("abc") ("single")).xco_filename)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xcompile_command)).apply ("a = 1n") ("abc")).xco_filename)) (((((xcompile)).apply ("a = 1n") ("def") ("single")).xco_filename)))
                xtest_warning.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply (".*literal") ((xSyntaxWarning)))) ((((unsupported)).apply (".*invalid") ((xDeprecationWarning)))))) ((xw)))
                          seq
                            bogusForceDataize.write (((xcompile_command)).apply ("'e' is 0"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (2))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)) (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xSyntaxWarning)))
                            (((unsupported)).apply ((xcompile_command)) ("1 is 1") ("exec"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)