memory > xBdbError
memory > xTracer
memory > xtracer
memory > xtest
memory > xf
memory > xException
memory > xsorted
memory > xgetattr
memory > xn
memory > xBdbSyntaxError
memory > xBreakpointTestCase
memory > xtemporaries
memory > xlist
memory > xBdbException
memory > xrepeat
memory > xlocals
memory > ximportlib
memory > xtest_module_for_bdb
memory > xstr
memory > xremain
memory > xbp
memory > xlinecache
memory > xIssuesTestCase
memory > xeval
memory > xIndexError
memory > xStopIteration
memory > xRunTestCase
memory > xopen
memory > xtextwrap
memory > xprint
memory > xislice
memory > xcompile
memory > xsuper
memory > xfname
memory > xsys
memory > xm
memory > xBaseException
memory > xissubclass
memory > xglobals
memory > xbps
memory > xos
memory > xiter
memory > xe
memory > x__file__
memory > xStateTestCase
memory > xunittest
memory > xnext
memory > xBdbNotExpectedError
memory > xBaseTestCase
memory > xset_type
memory > xisinstance
memory > xline
memory > xlen
memory > xTracerRun
memory > xBdb
memory > x__name__
[] > test_bdb
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_return
        memory > xdelete_temporaries
        memory > xreset_Breakpoint
        memory > xinit_test
        memory > xtest_bp_ignore_count
        memory > xget_state
        memory > xcreate_modules
        memory > xtest_next_command_in_generator_for_loop
        memory > xTEST_MODULE_FNAME
        memory > xtest_next_command_in_generator_with_subiterator
        memory > xnext_set_method
        memory > xtest_next_until_return_in_generator
        memory > xset_break
        memory > xbreak_in_func
        memory > xcheck_equal
        memory > xtest_disabled_temporary_bp
        memory > xuser_line
        memory > xtrace_dispatch
        memory > xtest_temporary_bp
        memory > xfail
        memory > xdo_clear
        memory > xpop_next
        memory > xtfunc_second
        memory > xset_enable
        memory > xset_ignore
        memory > xtest_bp_on_non_existent_module
        memory > xcheck_lno_name
        memory > xrun_test
        memory > xlno_rel2abs
        memory > xtest_bp_exception_on_condition_evaluation
        memory > xraise_not_expected
        memory > xtest_next_in_caller_frame
        memory > xtest_ignore_count_on_disabled_bp
        memory > xtest_main
        memory > xset_up
        memory > xtest_up
        memory > xtfunc_main
        memory > xtest_clear_at_no_bp
        memory > xtest_return_command_in_generator_with_subiterator
        memory > xtfunc_import
        memory > xtest_step_next_on_last_statement
        memory > xtest_runeval_step
        memory > xtest_run_step
        memory > xtest_skip_with_no_name_module
        memory > xtest_skip
        memory > xTEST_MODULE
        memory > xlno_abs2rel
        memory > xtest_down
        memory > xtest_until
        memory > xget_stack
        memory > xtest_until_in_caller_frame
        memory > xtest_step
        memory > xuser_exception
        memory > xtfunc_first
        memory > x__exit__
        memory > xtest_until_with_too_large_count
        memory > xtest_step_at_return_with_no_trace_in_caller
        memory > xset_down
        memory > xset_disable
        memory > xprint_state
        memory > x__enter__
        memory > xinfo_breakpoints
        memory > xtest_next_on_plain_statement
        memory > xset_clear
        memory > x__init__
        memory > xtest_next
        memory > xuser_return
        memory > xcheck_expect_max_size
        memory > x_bdb
        memory > xtest_next_over_import
        memory > xtest_bp_condition
        memory > xuser_call
        memory > xtest_return_in_caller_frame
        memory > xprocess_event
        memory > xtest_clear_two_bp_on_same_line
        memory > xdry_run
        memory > xtest_bp_after_last_statement
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xBdbException)))
              unsupported
            (((unsupported)).apply ((xBdbException)))
              unsupported
            (((unsupported)).apply ((xBdbException)))
              unsupported
            xdry_run.write 0
            xreset_Breakpoint.write
              []
                seq > @
                  seq
                    (((unsupported)).apply ((((x_bdb).xBreakpoint).xnext)) (1))
                    (((unsupported)).apply ((((x_bdb).xBreakpoint).xbplist)) ((((unsupported)).apply)))
                    (((unsupported)).apply ((((x_bdb).xBreakpoint).xbpbynumber)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
            xinfo_breakpoints.write
              []
                memory > xbp_list
                memory > xheader_added
                memory > xinfo
                memory > xdisp
                memory > xenab
                seq > @
                  seq
                    xbp_list.write (((unsupported)).apply ((xbp)) ((xbp)) ((((x_bdb).xBreakpoint).xbpbynumber)) ((xbp)))
                    ((xbp_list).not).if
                      (((unsupported)).apply (""))
                    xheader_added.write FALSE
                    (((unsupported)).apply ((xbp)) ((xbp_list)))
                      seq
                        ((xheader_added).not).if
                          seq
                            xinfo.write "BpNum Temp Enb Hits Ignore Wheren"
                            xheader_added.write TRUE
                        xdisp.write (((xbp).xtemporary).if "yes " "no  ")
                        xenab.write (((xbp).xenabled).if "yes" "no ")
                        (((unsupported)).apply ((xinfo)) (("%-5d %s %s %-4d %-6d at %s:%d".mod (((unsupported)).apply (((xbp).xnumber)) ((xdisp)) ((xenab)) (((xbp).xhits)) (((xbp).xignore)) ((((((xos).xpath).xbasename)).apply (((xbp).xfile)))) (((xbp).xline))))))
                        ((xbp).xcond).if
                          (((unsupported)).apply ((xinfo)) (("ntstop only if %s".mod (((unsupported)).apply (((xbp).xcond))))))
                        (((unsupported)).apply ((xinfo)) ("n"))
                    (((unsupported)).apply ((xinfo)))
            (((unsupported)).apply (((x_bdb).xBdb)))
              seq
                unsupported
                xtrace_dispatch.write
                  [xself xframe xevent xarg]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcurrentbp)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((((xsuper)).apply).xtrace_dispatch)).apply ((xframe)) ((xevent)) ((xarg)))))
                xset_break.write
                  [xself xfilename xlineno xtemporary xcond xfuncname]
                    memory > xfunc
                    memory > xcode
                    memory > xmodule
                    memory > xres
                    memory > xglobals_
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply ((xfuncname)) ((xstr))).if
                          seq
                            ((xfilename).eq (x__file__)).if
                              xglobals_.write (((xglobals)).apply)
                              seq
                                xmodule.write ((((ximportlib).ximport_module)).apply ((((unsupported)).apply ((xfilename)) ((((unsupported)).apply ((3.neg)))))))
                                xglobals_.write ((xmodule).x__dict__)
                            xfunc.write (((xeval)).apply ((xfuncname)) ((xglobals_)))
                            xcode.write ((xfunc).x__code__)
                            xfilename.write ((xcode).xco_filename)
                            xlineno.write ((xcode).xco_firstlineno)
                            xfuncname.write ((xcode).xco_name)
                        xres.write (((unsupported)).apply (((((xsuper)).apply).xset_break)) ((xfilename)) ((xlineno)) ((xtemporary)) ((xcond)) ((xfuncname)))
                        (((xisinstance)).apply ((xres)) ((xstr))).if
                          (((unsupported)).apply ((((xBdbError)).apply ((xres)))))
                        (((unsupported)).apply ((xres)))
                xget_stack.write
                  [xself xf xt]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xstack)) (((xself).xindex)))) (((((((xsuper)).apply).xget_stack)).apply ((xf)) ((xt)))))
                        (((unsupported)).apply (((xself).xframe)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xstack)) (((xself).xindex)))) (0))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xstack)) (((xself).xindex)))))
                xset_ignore.write
                  [xself xbpnum]
                    memory > xbp
                    seq > @
                      seq
                        unsupported
                        xbp.write ((((xself).xget_bpbynumber)).apply ((xbpnum)))
                        (((unsupported)).apply (((xbp).xignore)) (1))
                xset_enable.write
                  [xself xbpnum]
                    memory > xbp
                    seq > @
                      seq
                        xbp.write ((((xself).xget_bpbynumber)).apply ((xbpnum)))
                        (((unsupported)).apply (((xbp).xenabled)) (TRUE))
                xset_disable.write
                  [xself xbpnum]
                    memory > xbp
                    seq > @
                      seq
                        xbp.write ((((xself).xget_bpbynumber)).apply ((xbpnum)))
                        (((unsupported)).apply (((xbp).xenabled)) (FALSE))
                xset_clear.write
                  [xself xfname xlineno]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xself).xclear_break)).apply ((xfname)) ((xlineno)))
                        (xerr).if
                          (((unsupported)).apply ((((xBdbError)).apply ((xerr)))))
                xset_up.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).xindex).not).if
                          (((unsupported)).apply ((((xBdbError)).apply ("Oldest frame"))))
                        (((unsupported)).apply (((xself).xindex)) (1))
                        (((unsupported)).apply (((xself).xframe)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xstack)) (((xself).xindex)))) (0))))
                xset_down.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((((xself).xindex).sub 1).eq (((xlen)).apply (((xself).xstack)))).if
                          (((unsupported)).apply ((((xBdbError)).apply ("Newest frame"))))
                        (((unsupported)).apply (((xself).xindex)) (1))
                        (((unsupported)).apply (((xself).xframe)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xstack)) (((xself).xindex)))) (0))))
            (((unsupported)).apply ((xBdb)))
              seq
                unsupported
                x__init__.write
                  [xself xexpect_set xskip xdry_run xtest_case]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xskip)))
                        (((unsupported)).apply (((xself).xexpect_set)) ((xexpect_set)))
                        (((unsupported)).apply (((xself).xdry_run)) ((xdry_run)))
                        (((unsupported)).apply (((xself).xheader)) (((((unsupported)).apply ((xtest_case)) ("None: is there a None literal in the EO language?")).if ("Dry-run results for %s:".mod (xtest_case)) "None: is there a None literal in the EO language?")))
                        bogusForceDataize.write ((((xself).xinit_test)).apply)
                xinit_test.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcur_except)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xexpect_set_no)) (0))
                        (((unsupported)).apply (((xself).xbreakpoint_hits)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xexpected_list)) ((((xlist)).apply ((((xislice)).apply (((xself).xexpect_set)) (0) ("None: is there a None literal in the EO language?") (2))))))
                        (((unsupported)).apply (((xself).xset_list)) ((((xlist)).apply ((((xislice)).apply (((xself).xexpect_set)) (1) ("None: is there a None literal in the EO language?") (2))))))
                xtrace_dispatch.write
                  [xself xframe xevent xarg]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcur_except)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xcur_except)))
                        ((xevent).eq "exception").if
                          (((unsupported)).apply ((xBdbException)))
                            seq
                              xres.write ((((((xsuper)).apply).xtrace_dispatch)).apply ((xframe)) ((xevent)) ((xarg)))
                              (((unsupported)).apply ((xres)))
                            seq
                              (((unsupported)).apply (((xself).xcur_except)) ((xe)))
                              (((unsupported)).apply (((xself).xtrace_dispatch)))
                          (((unsupported)).apply (((((((xsuper)).apply).xtrace_dispatch)).apply ((xframe)) ((xevent)) ((xarg)))))
                xuser_call.write
                  [xself xframe xargument_list]
                    seq > @
                      seq
                        (((((xself).xstop_here)).apply ((xframe))).not).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xprocess_event)).apply ("call") ((xframe)) ((xargument_list)))
                        bogusForceDataize.write ((((xself).xnext_set_method)).apply)
                xuser_line.write
                  [xself xframe]
                    memory > xinfo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xprocess_event)).apply ("line") ((xframe)))
                        (((xself).xdry_run).and ((xself).xbreakpoint_hits)).if
                          seq
                            xinfo.write ((((((xinfo_breakpoints)).apply).xstrip)).apply ("n"))
                            (((unsupported)).apply ((xline)) (((((xinfo).xsplit)).apply ("n"))))
                              bogusForceDataize.write (((xprint)).apply (("  ".sub (xline))))
                        bogusForceDataize.write ((((xself).xdelete_temporaries)).apply)
                        (((unsupported)).apply (((xself).xbreakpoint_hits)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xnext_set_method)).apply)
                xuser_return.write
                  [xself xframe xreturn_value]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xprocess_event)).apply ("return") ((xframe)) ((xreturn_value)))
                        bogusForceDataize.write ((((xself).xnext_set_method)).apply)
                xuser_exception.write
                  [xself xframe xexc_info]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexc_info)) ((xexc_info)))
                        bogusForceDataize.write ((((xself).xprocess_event)).apply ("exception") ((xframe)))
                        bogusForceDataize.write ((((xself).xnext_set_method)).apply)
                xdo_clear.write
                  [xself xarg]
                    memory > xbp_list
                    seq > @
                      seq
                        xbp_list.write (((unsupported)).apply (((xself).xcurrentbp)))
                        (((unsupported)).apply (((xself).xbreakpoint_hits)) ((((unsupported)).apply ((xbp_list)) ((xbp_list)))))
                xdelete_temporaries.write
                  [xself]
                    seq > @
                      ((xself).xbreakpoint_hits).if
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply (((xself).xbreakpoint_hits)) (1))))
                          bogusForceDataize.write ((((xself).xclear_bpbynumber)).apply ((xn)))
                xpop_next.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set_no)) (1))
                        (((unsupported)).apply ((xIndexError)))
                          (((unsupported)).apply (((xself).xexpect)) ((((((xself).xexpected_list).xpop)).apply (0))))
                          (((unsupported)).apply ((((xBdbNotExpectedError)).apply (("expect_set list exhausted, cannot pop item %d".mod ((xself).xexpect_set_no))))))
                        (((unsupported)).apply (((xself).xset_tuple)) ((((((xself).xset_list).xpop)).apply (0))))
                xprocess_event.write
                  [xself xevent xframe]
                    memory > xtb
                    memory > xbpnums
                    memory > xbp_list
                    seq > @
                      (((unsupported)).apply)
                        xtb.write "None: is there a None literal in the EO language?"
                        ((xevent).eq "exception").if
                          xtb.write (((unsupported)).apply (((xself).xexc_info)) (2))
                        bogusForceDataize.write ((((xself).xget_stack)).apply ((xframe)) ((xtb)))
                        ((((unsupported)).apply (((xself).xcurrentbp)) ("None: is there a None literal in the EO language?")).and (((xself).xbreakpoint_hits).not)).if
                          seq
                            xbp_list.write (((unsupported)).apply (((xself).xcurrentbp)))
                            (((unsupported)).apply (((xself).xbreakpoint_hits)) ((((unsupported)).apply ((xbp_list)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).xevent)) ((xevent)))
                        bogusForceDataize.write ((((xself).xpop_next)).apply)
                        ((xself).xdry_run).if
                          seq
                            bogusForceDataize.write ((((xself).xprint_state)).apply (((xself).xheader)))
                            (((unsupported)).apply)
                        ((xself).xexpect).if
                          seq
                            bogusForceDataize.write ((((xself).xcheck_equal)).apply ((((unsupported)).apply (((xself).xexpect)) (0))) ((xevent)) ("Wrong event type"))
                            bogusForceDataize.write ((((xself).xcheck_lno_name)).apply)
                        (((unsupported)).apply ((xevent)) ((((unsupported)).apply ("call") ("return")))).if
                          bogusForceDataize.write ((((xself).xcheck_expect_max_size)).apply (3))
                          ((((xlen)).apply (((xself).xexpect))).greater 3).if
                            ((xevent).eq "line").if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xbps)) ((xtemporaries)))) ((((unsupported)).apply (((xself).xexpect)) (3))))
                                xbpnums.write (((xsorted)).apply (((((xbps).xkeys)).apply)))
                                (((xself).xbreakpoint_hits).not).if
                                  bogusForceDataize.write ((((xself).xraise_not_expected)).apply (("No breakpoints hit at expect_set item %d".mod ((xself).xexpect_set_no))))
                                bogusForceDataize.write ((((xself).xcheck_equal)).apply ((xbpnums)) ((((unsupported)).apply (((xself).xbreakpoint_hits)) (0))) ("Breakpoint numbers do not match"))
                                bogusForceDataize.write ((((xself).xcheck_equal)).apply ((((unsupported)).apply ((((unsupported)).apply ((xbps)) ((xn)))) ((xn)) ((xbpnums)))) ((((unsupported)).apply ((((((xself).xget_bpbynumber)).apply ((xn))).xhits)) ((xn)) ((((unsupported)).apply (((xself).xbreakpoint_hits)) (0))))) ("Wrong breakpoint hit count"))
                                bogusForceDataize.write ((((xself).xcheck_equal)).apply ((((xsorted)).apply ((xtemporaries)))) ((((unsupported)).apply (((xself).xbreakpoint_hits)) (1))) ("Wrong temporary breakpoints"))
                              ((xevent).eq "exception").if
                                ((((xisinstance)).apply ((((unsupported)).apply (((xself).xexc_info)) (1))) ((((unsupported)).apply (((xself).xexpect)) (3)))).not).if
                                  bogusForceDataize.write ((((xself).xraise_not_expected)).apply (("Wrong exception at expect_set item %d, got '%s'".mod (((unsupported)).apply (((xself).xexpect_set_no)) (((xself).xexc_info))))))
                xcheck_equal.write
                  [xself xexpected xresult xmsg]
                    seq > @
                      seq
                        ((xexpected).eq (xresult)).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xraise_not_expected)).apply (("%s at expect_set item %d, got '%s'".mod (((unsupported)).apply ((xmsg)) (((xself).xexpect_set_no)) ((xresult))))))
                xcheck_lno_name.write
                  [xself]
                    memory > xs
                    memory > xlineno
                    seq > @
                      seq
                        unsupported
                        xs.write (((xlen)).apply (((xself).xexpect)))
                        ((xs).greater 1).if
                          seq
                            xlineno.write ((((xself).xlno_abs2rel)).apply)
                            bogusForceDataize.write ((((xself).xcheck_equal)).apply ((((unsupported)).apply (((xself).xexpect)) (1))) ((xlineno)) ("Wrong line number"))
                        ((xs).greater 2).if
                          bogusForceDataize.write ((((xself).xcheck_equal)).apply ((((unsupported)).apply (((xself).xexpect)) (2))) (((((xself).xframe).xf_code).xco_name)) ("Wrong function name"))
                xcheck_expect_max_size.write
                  [xself xsize]
                    seq > @
                      ((((xlen)).apply (((xself).xexpect))).greater (xsize)).if
                        (((unsupported)).apply ((((xBdbSyntaxError)).apply (("Invalid size of the %s expect tuple: %s".mod (((unsupported)).apply (((xself).xevent)) (((xself).xexpect))))))))
                xlno_abs2rel.write
                  [xself]
                    memory > xlineno
                    memory > xfname
                    seq > @
                      seq
                        xfname.write ((((xself).xcanonic)).apply (((((xself).xframe).xf_code).xco_filename)))
                        xlineno.write (((xself).xframe).xf_lineno)
                        (((unsupported)).apply ((((xfname).eq ((((xself).xcanonic)).apply ((x__file__)))).if (((xlineno).sub ((((xself).xframe).xf_code).xco_firstlineno)).sub 1) (xlineno))))
                xlno_rel2abs.write
                  [xself xfname xlineno]
                    seq > @
                      (((unsupported)).apply ((((xlineno).and (((((xself).xcanonic)).apply ((xfname))).eq ((((xself).xcanonic)).apply ((x__file__))))).if ((((((xself).xframe).xf_code).xco_firstlineno).sub (xlineno)).sub 1) (xlineno))))
                xget_state.write
                  [xself]
                    memory > xco_name
                    memory > xstate
                    memory > xlineno
                    memory > xbps
                    seq > @
                      seq
                        xlineno.write ((((xself).xlno_abs2rel)).apply)
                        xco_name.write ((((xself).xframe).xf_code).xco_name)
                        xstate.write ("('%s', %d, '%s'".mod (((unsupported)).apply (((xself).xevent)) ((xlineno)) ((xco_name))))
                        ((xself).xbreakpoint_hits).if
                          seq
                            xbps.write "{"
                            (((unsupported)).apply ((xn)) ((((unsupported)).apply (((xself).xbreakpoint_hits)) (0))))
                              seq
                                ((xbps).neq "{").if
                                  (((unsupported)).apply ((xbps)) (", "))
                                (((unsupported)).apply ((xbps)) (("%s: %s".mod (((unsupported)).apply ((xn)) ((((((xself).xget_bpbynumber)).apply ((xn))).xhits))))))
                            (((unsupported)).apply ((xbps)) ("}"))
                            xbps.write (((("(".sub (xbps)).sub ", ").sub (((xstr)).apply ((((unsupported)).apply (((xself).xbreakpoint_hits)) (1))))).sub ")")
                            (((unsupported)).apply ((xstate)) ((", ".sub (xbps))))
                          (((xself).xevent).eq "exception").if
                            (((unsupported)).apply ((xstate)) ((", ".sub ((((unsupported)).apply (((xself).xexc_info)) (0)).x__name__))))
                        (((unsupported)).apply ((xstate)) ("), "))
                        (((unsupported)).apply (((((((xstate).xljust)).apply (32)).sub (((xstr)).apply (((xself).xset_tuple)))).sub ",")))
                xprint_state.write
                  [xself xheader]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xheader)) ("None: is there a None literal in the EO language?")).and (((xself).xexpect_set_no).eq 1)).if
                          seq
                            bogusForceDataize.write (((xprint)).apply)
                            bogusForceDataize.write (((xprint)).apply ((xheader)))
                        bogusForceDataize.write (((xprint)).apply (("%d: %s".mod (((unsupported)).apply (((xself).xexpect_set_no)) (((((xself).xget_state)).apply))))))
                xraise_not_expected.write
                  [xself xmsg]
                    seq > @
                      seq
                        (((unsupported)).apply ((xmsg)) ("n"))
                        (((unsupported)).apply ((xmsg)) (("  Expected: %sn".mod (((xstr)).apply (((xself).xexpect))))))
                        (((unsupported)).apply ((xmsg)) (("  Got:      ".sub ((((xself).xget_state)).apply))))
                        (((unsupported)).apply ((((xBdbNotExpectedError)).apply ((xmsg)))))
                xnext_set_method.write
                  [xself]
                    memory > xset_type
                    memory > xargs
                    memory > xlineno
                    memory > xset_method
                    seq > @
                      seq
                        xset_type.write (((unsupported)).apply (((xself).xset_tuple)) (0))
                        xargs.write (((((xlen)).apply (((xself).xset_tuple))).eq 2).if (((unsupported)).apply (((xself).xset_tuple)) (1)) "None: is there a None literal in the EO language?")
                        xset_method.write (((xgetattr)).apply ((xself)) (("set_".sub (xset_type))))
                        (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("step") ("continue") ("quit")))).if
                          seq
                            bogusForceDataize.write (((xset_method)).apply)
                            (((unsupported)).apply)
                          (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("next") ("return")))).if
                            seq
                              bogusForceDataize.write (((xset_method)).apply (((xself).xframe)))
                              (((unsupported)).apply)
                            ((xset_type).eq "until").if
                              seq
                                xlineno.write "None: is there a None literal in the EO language?"
                                (xargs).if
                                  xlineno.write ((((xself).xlno_rel2abs)).apply (((((xself).xframe).xf_code).xco_filename)) ((((unsupported)).apply ((xargs)) (0))))
                                bogusForceDataize.write (((xset_method)).apply (((xself).xframe)) ((xlineno)))
                                (((unsupported)).apply)
                        (((xargs).and (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("break") ("clear") ("ignore") ("enable") ("disable"))))).or (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("up") ("down"))))).if
                          seq
                            (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("break") ("clear")))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xfname)) ((xlineno)) ((((unsupported)).apply ((xremain)))))) ((xargs)))
                                xlineno.write ((((xself).xlno_rel2abs)).apply ((xfname)) ((xlineno)))
                                xargs.write (((unsupported)).apply ((xfname)) ((xlineno)))
                                bogusForceDataize.write ((((xargs).xextend)).apply ((xremain)))
                                bogusForceDataize.write (((xset_method)).apply ((((unsupported)).apply ((xargs)))))
                              (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("ignore") ("enable") ("disable")))).if
                                bogusForceDataize.write (((xset_method)).apply ((((unsupported)).apply ((xargs)))))
                                (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("up") ("down")))).if
                                  bogusForceDataize.write (((xset_method)).apply)
                            (((unsupported)).apply (((xself).xevent)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xpop_next)).apply)
                            ((xself).xdry_run).if
                              bogusForceDataize.write ((((xself).xprint_state)).apply)
                              seq
                                ((xself).xexpect).if
                                  bogusForceDataize.write ((((xself).xcheck_lno_name)).apply)
                                bogusForceDataize.write ((((xself).xcheck_expect_max_size)).apply (3))
                            bogusForceDataize.write ((((xself).xnext_set_method)).apply)
                          (((unsupported)).apply ((((xBdbSyntaxError)).apply (("\"%s\" is an invalid set_tuple".mod ((xself).xset_tuple))))))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xtest_case xskip]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xtest_case)) ((xtest_case)))
                        (((unsupported)).apply (((xself).xdry_run)) (((xtest_case).xdry_run)))
                        (((unsupported)).apply (((xself).xtracer)) ((((unsupported)).apply ((xTracer)) (((xtest_case).xexpect_set)) ((xskip)) (((xself).xdry_run)) (((((xtest_case).xid)).apply)))))
                        (((unsupported)).apply (((xself).x_original_tracer)) ("None: is there a None literal in the EO language?"))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xreset_Breakpoint)).apply)
                        (((unsupported)).apply (((xself).x_original_tracer)) (((((xsys).xgettrace)).apply)))
                        (((unsupported)).apply (((xself).xtracer)))
                x__exit__.write
                  [xself xtype_ xvalue xtraceback]
                    memory > xerr_msg
                    memory > xnot_empty
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xreset_Breakpoint)).apply)
                        bogusForceDataize.write ((((xsys).xsettrace)).apply (((xself).x_original_tracer)))
                        xnot_empty.write ""
                        (((xself).xtracer).xset_list).if
                          seq
                            (((unsupported)).apply ((xnot_empty)) ("All paired tuples have not been processed, "))
                            (((unsupported)).apply ((xnot_empty)) (("the last one was number %d".mod (((xself).xtracer).xexpect_set_no))))
                        ((((unsupported)).apply ((xtype_)) ("None: is there a None literal in the EO language?")).and (((xissubclass)).apply ((xBdbNotExpectedError)) ((xtype_)))).if
                          ((((xisinstance)).apply ((xvalue)) ((xBaseException))).and ((xvalue).xargs)).if
                            seq
                              xerr_msg.write (((unsupported)).apply (((xvalue).xargs)) (0))
                              (xnot_empty).if
                                (((unsupported)).apply ((xerr_msg)) (("n".sub (xnot_empty))))
                              ((xself).xdry_run).if
                                seq
                                  bogusForceDataize.write (((xprint)).apply ((xerr_msg)))
                                  (((unsupported)).apply (TRUE))
                                bogusForceDataize.write (((((xself).xtest_case).xfail)).apply ((xerr_msg)))
                            (((unsupported)).apply (FALSE) ("BdbNotExpectedError with empty args"))
                        (xnot_empty).if
                          ((xself).xdry_run).if
                            bogusForceDataize.write (((xprint)).apply ((xnot_empty)))
                            bogusForceDataize.write (((((xself).xtest_case).xfail)).apply ((xnot_empty)))
            xrun_test.write
              [xmodules xset_list xskip]
                memory > xtest
                memory > xsl
                memory > xgen
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xgen.write
                      [xa xb]
                        memory > xx
                        memory > xy
                        seq > @
                          (((unsupported)).apply ((xStopIteration)))
                            while.
                              1
                              [unused]
                                seq > @
                                  seq
                                    xx.write (((xnext)).apply ((xa)))
                                    xy.write (((xnext)).apply ((xb)))
                                    (((unsupported)).apply ((xx)))
                                    (((unsupported)).apply ((xy)))
                            (((unsupported)).apply)
                    xsl.write (((unsupported)).apply ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("step"))))
                    bogusForceDataize.write ((((xsl).xextend)).apply ((xset_list)))
                    xtest.write (((xBaseTestCase)).apply)
                    (((unsupported)).apply (((xtest).xdry_run)) (TRUE))
                    (((unsupported)).apply (((xtest).xid)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                    (((unsupported)).apply (((xtest).xexpect_set)) ((((xlist)).apply ((((xgen)).apply ((((xrepeat)).apply ((((unsupported)).apply)))) ((((xiter)).apply ((xsl)))))))))
                    (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xTracerRun)) ((xtest)) ((xskip)))) ((xtracer)))
                        bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
            xcreate_modules.write
              [xmodules]
                memory > xfname
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((((xtest).xsupport).xtemp_cwd)).apply)))
                      seq
                        bogusForceDataize.write (((((xsys).xpath).xappend)).apply (((((xos).xgetcwd)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xm)) ((xmodules)))
                              seq
                                xfname.write ((xm).sub ".py")
                                (((unsupported)).apply ((((xopen)).apply ((xfname)) ("w"))) ((xf)))
                                  bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply ((xmodules)) ((xm)))))))
                                bogusForceDataize.write ((((xlinecache).xcheckcache)).apply ((xfname)))
                            bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                            (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xm)) ((xmodules)))
                              bogusForceDataize.write (((((xtest).xsupport).xforget)).apply ((xm)))
                            bogusForceDataize.write (((((xsys).xpath).xpop)).apply)
            xbreak_in_func.write
              [xfuncname xfname xtemporary xcond]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ("break") ((((unsupported)).apply ((xfname)) ("None: is there a None literal in the EO language?") ((xtemporary)) ((xcond)) ((xfuncname)))))))
            xTEST_MODULE.write "test_module_for_bdb"
            xTEST_MODULE_FNAME.write ((xTEST_MODULE).sub ".py")
            xtfunc_import.write
              []
                seq > @
                  seq
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((xtest_module_for_bdb).xmain)).apply)
            xtfunc_main.write
              []
                memory > xlno
                seq > @
                  seq
                    xlno.write 2
                    bogusForceDataize.write (((xtfunc_first)).apply)
                    bogusForceDataize.write (((xtfunc_second)).apply)
                    xlno.write 5
                    xlno.write 6
                    xlno.write 7
            xtfunc_first.write
              []
                memory > xlno
                seq > @
                  seq
                    xlno.write 2
                    xlno.write 3
                    xlno.write 4
            xtfunc_second.write
              []
                memory > xlno
                seq > @
                  xlno.write 2
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xdry_run.write (xdry_run)
                xfail.write
                  [xself xmsg]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xfailureException)).apply ((xmsg)))) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_step.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (2) ("tfunc_first"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_step_next_on_last_statement.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("step") ("next"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xset_type)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ((x__file__)) (3))))) ((((unsupported)).apply ("None") (1) ("tfunc_first"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("tfunc_first") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ((xset_type)))) ((((unsupported)).apply ("line") (4) ("tfunc_first"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_next.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (4) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_second"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (2) ("tfunc_second"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_next_over_import.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (3) ("tfunc_import"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_next_on_plain_statement.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (2) ("tfunc_first"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_next_in_caller_frame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("up"))) ((((unsupported)).apply ("None") (3) ("tfunc_main"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (4) ("tfunc_main"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_return.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (2) ("tfunc_first"))) ((((unsupported)).apply ("return"))) ((((unsupported)).apply ("return") (4) ("tfunc_first"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (4) ("tfunc_main"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_return_in_caller_frame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("up"))) ((((unsupported)).apply ("None") (3) ("tfunc_main"))) ((((unsupported)).apply ("return"))) ((((unsupported)).apply ("return") (7) ("tfunc_main"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_until.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (2) ("tfunc_first"))) ((((unsupported)).apply ("until") ((((unsupported)).apply (4))))) ((((unsupported)).apply ("line") (4) ("tfunc_first"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_until_with_too_large_count.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((xbreak_in_func)).apply ("tfunc_first"))) ((((unsupported)).apply ("None") (2) ("tfunc_main"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (2) ("tfunc_first") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("until") ((((unsupported)).apply (9999))))) ((((unsupported)).apply ("return") (4) ("tfunc_first"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_until_in_caller_frame.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("up"))) ((((unsupported)).apply ("None") (3) ("tfunc_main"))) ((((unsupported)).apply ("until") ((((unsupported)).apply (6))))) ((((unsupported)).apply ("line") (6) ("tfunc_main"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
                xtest_skip.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    memory > xskip
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_import"))) ((((unsupported)).apply ("quit"))))))
                            xskip.write (((unsupported)).apply ("importlib*") ("zipimport") ("encodings.*") ((xTEST_MODULE)))
                            (((unsupported)).apply ((((unsupported)).apply ((xTracerRun)) ((xself)) ((xskip)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_skip_with_no_name_module.write
                  [xself]
                    memory > xbdb
                    seq > @
                      seq
                        xbdb.write (((unsupported)).apply ((xBdb)) ((((unsupported)).apply ("anything*"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xbdb).xis_skipped_module)).apply ("None: is there a None literal in the EO language?"))) (FALSE))
                xtest_down.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("down"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBdbError)) (((xtracer).xruncall)) ((xtfunc_main)))
                xtest_up.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("tfunc_main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (1) ("tfunc_first"))) ((((unsupported)).apply ("up"))) ((((unsupported)).apply ("None") (3) ("tfunc_main"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_main)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_bp_on_non_existent_module.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ("/non/existent/module.py") (1))))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBdbError)) (((xtracer).xruncall)) ((xtfunc_import)))
                xtest_bp_after_last_statement.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ((xTEST_MODULE_FNAME)) (4))))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBdbError)) (((xtracer).xruncall)) ((xtfunc_import)))
                xtest_temporary_bp.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)) (TRUE))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)) (TRUE))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1))))))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (2) (1))) ((((unsupported)).apply (2))))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_disabled_temporary_bp.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)) (TRUE))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("disable") ((((unsupported)).apply (2))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("enable") ((((unsupported)).apply (2))))) ((((unsupported)).apply ("None") (3) ("func"))) ((((unsupported)).apply ("disable") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (3) ("func"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (2) (1))) ((((unsupported)).apply (2))))))) ((((unsupported)).apply ("enable") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (3) ("func"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_bp_condition.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)) (FALSE) ("a == 2"))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_bp_exception_on_condition_evaluation.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)) (FALSE) ("1 / 0"))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_bp_ignore_count.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("ignore") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_ignore_count_on_disabled_bp.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("ignore") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("disable") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (2) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("enable") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("None") (3) ("func"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (2) (2))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_clear_two_bp_on_same_line.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ((xTEST_MODULE_FNAME)) (3))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ((xTEST_MODULE_FNAME)) (3))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("break") ((((unsupported)).apply ((xTEST_MODULE_FNAME)) (4))))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (4) ("func") ((((unsupported)).apply ((((unsupported)).apply (3) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("clear") ((((unsupported)).apply ((xTEST_MODULE_FNAME)) (3))))) ((((unsupported)).apply ("None") (4) ("func"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (4) ("func") ((((unsupported)).apply ((((unsupported)).apply (3) (2))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_clear_at_no_bp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((unsupported)).apply ("clear") ((((unsupported)).apply ((x__file__)) (1))))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBdbError)) (((xtracer).xruncall)) ((xtfunc_import)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_run_step.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("<module>"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("return") (2) ("<module>"))) ((((unsupported)).apply ("quit"))))))
                        (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                          bogusForceDataize.write ((((xtracer).xrun)).apply ((((xcompile)).apply (((((xtextwrap).xdedent)).apply ((xcode)))) ("<string>") ("exec"))))
                xtest_runeval_step.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (1) ("<module>"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("call") (2) ("main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (3) ("main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("return") (3) ("main"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("return") (1) ("<module>"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply)
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruneval)).apply ("test_module_for_bdb.main()") ((((xglobals)).apply)) ((((xlocals)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_step_at_return_with_no_trace_in_caller.write
                  [xself]
                    memory > xmodules
                    memory > xcode_2
                    memory > xcode_1
                    seq > @
                      seq
                        xcode_1.write (((unsupported)).apply)
                        xcode_2.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode_1)) ("test_module_for_bdb_2") ((xcode_2)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("func") ("test_module_for_bdb_2.py"))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("func") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("return") (3) ("func"))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (5) ("main"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_next_until_return_in_generator.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((xset_type)) ((((unsupported)).apply ("next") ("until") ("return"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xset_type)))))
                            (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                              seq
                                (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("test_gen") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("test_gen") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ((xset_type)))))))
                                ((xset_type).eq "return").if
                                  bogusForceDataize.write (((((xself).xexpect_set).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ("exception") (10) ("main") ((xStopIteration)))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("return") (10) ("main"))) ((((unsupported)).apply ("quit"))))))
                                  bogusForceDataize.write (((((xself).xexpect_set).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ("line") (4) ("test_gen"))) ((((unsupported)).apply ("quit"))))))
                                (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                                  bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_next_command_in_generator_for_loop.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("test_gen") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("test_gen") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (4) ("test_gen"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (5) ("test_gen"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (6) ("test_gen"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("exception") (9) ("main") ((xStopIteration)))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (11) ("main"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_next_command_in_generator_with_subiterator.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("test_gen") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (7) ("test_gen") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("line") (8) ("test_gen"))) ((((unsupported)).apply ("next"))) ((((unsupported)).apply ("exception") (11) ("main") ((xStopIteration)))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (13) ("main"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
                xtest_return_command_in_generator_with_subiterator.write
                  [xself]
                    memory > xcode
                    memory > xmodules
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        xmodules.write (((unsupported)).apply ((xTEST_MODULE)) ((xcode)))
                        (((unsupported)).apply ((((xcreate_modules)).apply ((xmodules)))))
                          seq
                            (((unsupported)).apply (((xself).xexpect_set)) ((((unsupported)).apply ((((unsupported)).apply ("line") (2) ("tfunc_import"))) ((((xbreak_in_func)).apply ("test_subgen") ((xTEST_MODULE_FNAME)))) ((((unsupported)).apply ("None") (2) ("tfunc_import"))) ((((unsupported)).apply ("continue"))) ((((unsupported)).apply ("line") (3) ("test_subgen") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("return"))) ((((unsupported)).apply ("exception") (7) ("test_gen") ((xStopIteration)))) ((((unsupported)).apply ("return"))) ((((unsupported)).apply ("exception") (11) ("main") ((xStopIteration)))) ((((unsupported)).apply ("step"))) ((((unsupported)).apply ("line") (13) ("main"))) ((((unsupported)).apply ("quit"))))))
                            (((unsupported)).apply ((((xTracerRun)).apply ((xself)))) ((xtracer)))
                              bogusForceDataize.write ((((xtracer).xruncall)).apply ((xtfunc_import)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write (((((xtest).xsupport).xrun_unittest)).apply ((xStateTestCase)) ((xRunTestCase)) ((xBreakpointTestCase)) ((xIssuesTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)