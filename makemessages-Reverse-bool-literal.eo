memory > xd
memory > xUnicodeDecodeError
memory > xget_text_list
memory > xtranslatable
memory > xerrors
memory > xbf
memory > x_
memory > xerr
memory > xtemplatize
memory > xx
memory > xsys
memory > xe
memory > xfind_command
memory > xmap
memory > xfp
memory > xDEFAULT_LOCALE_ENCODING
memory > xinput_files_list
memory > xfilename
memory > x_lazy_re_compile
memory > xhandle_extensions
memory > xdjango
memory > xlist
memory > xstr
memory > xlocale_dir
memory > xout
memory > xtotal_ordering
memory > xpotfile
memory > xglob
memory > xp
memory > xdropwhile
memory > xopen
memory > xPath
memory > xdirpath
memory > xBaseCommand
memory > xset
memory > xBuildFile
memory > xsettings
memory > xint
memory > xre
memory > xtuple
memory > xBaseException
memory > xsorted
memory > xfiles
memory > xprograms
memory > xfilenames
memory > xlang_code
memory > xos
memory > xTranslatableFile
memory > xdirname
memory > xdomain
memory > xobject
memory > xdirnames
memory > xstatus
memory > xpopen_wrapper
memory > xNamedTemporaryFile
memory > xImproperlyConfigured
memory > xfilter
memory > xoptions
memory > xmatch
memory > xprepare_js_for_gettext
memory > xis_ignored_path
memory > xprogram
memory > xCommandError
memory > xlen
[] > makemessages
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmsgmerge_options
        memory > xfind_files
        memory > xwork_path
        memory > xpostprocess_messages
        memory > x__lt__
        memory > xpath
        memory > xsettings_available
        memory > xwrite_pot_file
        memory > xgettext_version
        memory > xadd_arguments
        memory > xhelp
        memory > xbuild_file_class
        memory > xwrite_po_file
        memory > xxgettext_options
        memory > xremove_potfiles
        memory > xrequires_system_checks
        memory > x__repr__
        memory > xcopy_plural_forms
        memory > x__eq__
        memory > xis_templatized
        memory > xprocess_locale_dir
        memory > xbuild_potfiles
        memory > xplural_forms_re
        memory > xprocess_files
        memory > xhandle
        memory > xNO_LOCALE_DIR
        memory > xmsguniq_options
        memory > xtranslatable_file_class
        memory > xpreprocess
        memory > xSTATUS_OK
        memory > xcheck_programs
        memory > x__init__
        memory > xmsgattrib_options
        memory > xnormalize_eols
        memory > xcleanup
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xplural_forms_re.write (((x_lazy_re_compile)).apply ((((unsupported)).apply)) ((((xre).xMULTILINE).or ((xre).xDOTALL))))
            xSTATUS_OK.write 0
            xNO_LOCALE_DIR.write (((xobject)).apply)
            xcheck_programs.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xprogram)) ((xprograms)))
                      (((unsupported)).apply ((((xfind_command)).apply ((xprogram)))) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply ((((xCommandError)).apply (("Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.".mod (xprogram))))))
            (((unsupported)).apply ((xtotal_ordering)))
              seq
                x__init__.write
                  [xself xdirpath xfile_name xlocale_dir]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfile)) ((xfile_name)))
                        (((unsupported)).apply (((xself).xdirpath)) ((xdirpath)))
                        (((unsupported)).apply (((xself).xlocale_dir)) ((xlocale_dir)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((((((xos).xsep).xjoin)).apply ((((unsupported)).apply (((xself).xdirpath)) (((xself).xfile))))))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xpath).eq ((xother).xpath))))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xpath).less ((xother).xpath))))
                xpath.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xself).xdirpath)) (((xself).xfile)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xcommand xdomain xtranslatable]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcommand)) ((xcommand)))
                        (((unsupported)).apply (((xself).xdomain)) ((xdomain)))
                        (((unsupported)).apply (((xself).xtranslatable)) ((xtranslatable)))
                xis_templatized.write
                  [xself]
                    memory > xfile_ext
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xdomain).eq "djangojs").if
                          (((unsupported)).apply (((((xself).xcommand).xgettext_version).less (((unsupported)).apply (0) (18) (3)))))
                          (((xself).xdomain).eq "django").if
                            seq
                              xfile_ext.write (((unsupported)).apply ((((((xos).xpath).xsplitext)).apply ((((xself).xtranslatable).xfile)))) (1))
                              (((unsupported)).apply (((xfile_ext).neq ".py")))
                        (((unsupported)).apply (FALSE))
                xpath.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xtranslatable).xpath)))
                xwork_path.write
                  [xself]
                    memory > xextension
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xself).xis_templatized).not).if
                          (((unsupported)).apply (((xself).xpath)))
                        xextension.write ((((((unsupported)).apply ("djangojs") ("c") ("django") ("py")).xget)).apply (((xself).xdomain)))
                        xfilename.write ("%s.%s".mod (((unsupported)).apply ((((xself).xtranslatable).xfile)) ((xextension))))
                        (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((((xself).xtranslatable).xdirpath)) ((xfilename)))))
                xpreprocess.write
                  [xself]
                    memory > xcontent
                    memory > xsrc_data
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xis_templatized).not).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xpath)) ("utf-8"))) ((xfp)))
                          xsrc_data.write ((((xfp).xread)).apply)
                        (((xself).xdomain).eq "djangojs").if
                          xcontent.write (((xprepare_js_for_gettext)).apply ((xsrc_data)))
                          (((xself).xdomain).eq "django").if
                            xcontent.write (((unsupported)).apply ((xtemplatize)) ((xsrc_data)) ((((unsupported)).apply (((xself).xpath)) ((((unsupported)).apply (2))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xwork_path)) ("w") ("utf-8"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply ((xcontent)))
                xpostprocess_messages.write
                  [xself xmsgs]
                    memory > xnew_path
                    memory > xold_path
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xis_templatized).not).if
                          (((unsupported)).apply ((xmsgs)))
                        (((xos).xname).eq "nt").if
                          seq
                            xold_path.write ((xself).xwork_path)
                            xnew_path.write ((xself).xpath)
                          seq
                            xold_path.write (((unsupported)).apply (((xself).xwork_path)) ((((unsupported)).apply (2))))
                            xnew_path.write (((unsupported)).apply (((xself).xpath)) ((((unsupported)).apply (2))))
                        (((unsupported)).apply ((((unsupported)).apply (((xre).xsub)) ((("^(#: .*)(".add ((((xre).xescape)).apply ((xold_path)))).add ")")) ((((unsupported)).apply (((((((unsupported)).apply ((xmatch)) (0)).xreplace)).apply ((xold_path)) ((xnew_path)))))) ((xmsgs)) (((xre).xMULTILINE)))))
                xcleanup.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).xis_templatized).if
                          (((((xos).xpath).xexists)).apply (((xself).xwork_path))).if
                            bogusForceDataize.write ((((xos).xunlink)).apply (((xself).xwork_path)))
            xnormalize_eols.write
              [xraw_contents]
                memory > xlines_list
                seq > @
                  seq
                    (((unsupported)).apply)
                    xlines_list.write ((((xraw_contents).xsplitlines)).apply)
                    ((xlines_list).and (((unsupported)).apply ((xlines_list)) ((1.neg)))).if
                      bogusForceDataize.write ((((xlines_list).xappend)).apply (""))
                    (((unsupported)).apply (((("n".xjoin)).apply ((xlines_list)))))
            xwrite_pot_file.write
              [xpotfile xmsgs]
                memory > xlines
                memory > xheader_read
                memory > xfound
                memory > xpot_lines
                memory > xline
                seq > @
                  seq
                    (((unsupported)).apply)
                    xpot_lines.write ((((xmsgs).xsplitlines)).apply)
                    (((((xos).xpath).xexists)).apply ((xpotfile))).if
                      xlines.write (((xdropwhile)).apply ((xlen)) ((xpot_lines)))
                      seq
                        xlines.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfound)) ((xheader_read)))) ((((unsupported)).apply (FALSE) (FALSE))))
                        (((unsupported)).apply ((xline)) ((xpot_lines)))
                          seq
                            (((xfound).not).and ((xheader_read).not)).if
                              (((unsupported)).apply ("charset=CHARSET") ((xline))).if
                                seq
                                  xfound.write TRUE
                                  xline.write ((((xline).xreplace)).apply ("charset=CHARSET") ("charset=UTF-8"))
                            (((xline).not).and ((xfound).not)).if
                              xheader_read.write TRUE
                            bogusForceDataize.write ((((xlines).xappend)).apply ((xline)))
                    xmsgs.write ((("n".xjoin)).apply ((xlines)))
                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpotfile)) ("a") ("utf-8") ("n"))) ((xfp)))
                      bogusForceDataize.write ((((xfp).xwrite)).apply ((xmsgs)))
            (((unsupported)).apply ((xBaseCommand)))
              seq
                xhelp.write "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.nnYou must run this command with one of either the --locale, --exclude, or --all options."
                xtranslatable_file_class.write (xTranslatableFile)
                xbuild_file_class.write (xBuildFile)
                xrequires_system_checks.write (((unsupported)).apply)
                xmsgmerge_options.write (((unsupported)).apply ("-q") ("--backup=none") ("--previous") ("--update"))
                xmsguniq_options.write (((unsupported)).apply ("--to-code=utf-8"))
                xmsgattrib_options.write (((unsupported)).apply ("--no-obsolete"))
                xxgettext_options.write (((unsupported)).apply ("--from-code=UTF-8") ("--add-comments=Translators"))
                xadd_arguments.write
                  [xself xparser]
                    seq > @
                      seq
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--locale") ("-l") ((((unsupported)).apply)) ("append") ("Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--exclude") ("-x") ((((unsupported)).apply)) ("append") ("Locales to exclude. Default is none. Can be used multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--domain") ("-d") ("django") ("The domain of the message files (default: \"django\")."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--all") ("-a") ("store_false") ("Updates the message files for all existing locales."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--extension") ("-e") ("extensions") ("append") ("The file extension(s) to examine (default: \"html,txt,py\", or \"js\" if the domain is \"djangojs\"). Separate multiple extensions with commas, or use -e multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--symlinks") ("-s") ("store_false") ("Follows symlinks to directories when examining source code and templates for translation strings."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--ignore") ("-i") ("append") ("ignore_patterns") ((((unsupported)).apply)) ("PATTERN") ("Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-default-ignore") ("store_false") ("use_default_ignore_patterns") ("Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-wrap") ("store_false") ("Don't break long message lines into several lines."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-location") ("store_false") ("Don't write '#: filename:line' lines."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--add-location") ((((unsupported)).apply ("full") ("file") ("never"))) ("full") ("?") ("Controls '#: filename:line' lines. If the option is 'full' (the default if not given), the lines  include both file name and line number. If it's 'file', the line number is omitted. If it's 'never', the lines are suppressed (same as --no-location). --add-location requires gettext 0.19 or newer."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-obsolete") ("store_false") ("Remove obsolete message strings."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--keep-pot") ("store_false") ("Keep .pot file after making messages. Useful when debugging."))
                xhandle.write
                  [xself]
                    memory > xexts
                    memory > xexclude
                    memory > xpotfiles
                    memory > xarg_add_location
                    memory > xlooks_like_locale
                    memory > xlocale_dirs
                    memory > xprocess_all
                    memory > xlocales
                    memory > xlocale
                    memory > xignore_patterns
                    memory > xall_locales
                    memory > xextensions
                    seq > @
                      (((unsupported)).apply)
                        xlocale.write (((unsupported)).apply ((xoptions)) ("locale"))
                        xexclude.write (((unsupported)).apply ((xoptions)) ("exclude"))
                        (((unsupported)).apply (((xself).xdomain)) ((((unsupported)).apply ((xoptions)) ("domain"))))
                        (((unsupported)).apply (((xself).xverbosity)) ((((unsupported)).apply ((xoptions)) ("verbosity"))))
                        xprocess_all.write (((unsupported)).apply ((xoptions)) ("all"))
                        xextensions.write (((unsupported)).apply ((xoptions)) ("extensions"))
                        (((unsupported)).apply (((xself).xsymlinks)) ((((unsupported)).apply ((xoptions)) ("symlinks"))))
                        xignore_patterns.write (((unsupported)).apply ((xoptions)) ("ignore_patterns"))
                        (((unsupported)).apply ((xoptions)) ("use_default_ignore_patterns")).if
                          (((unsupported)).apply ((xignore_patterns)) ((((unsupported)).apply ("CVS") (".*") ("*~") ("*.pyc"))))
                        (((unsupported)).apply (((xself).xignore_patterns)) ((((xlist)).apply ((((xset)).apply ((xignore_patterns)))))))
                        (((unsupported)).apply ((xoptions)) ("no_wrap")).if
                          seq
                            (((unsupported)).apply (((xself).xmsgmerge_options)) (((((unsupported)).apply (((xself).xmsgmerge_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-wrap")))))
                            (((unsupported)).apply (((xself).xmsguniq_options)) (((((unsupported)).apply (((xself).xmsguniq_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-wrap")))))
                            (((unsupported)).apply (((xself).xmsgattrib_options)) (((((unsupported)).apply (((xself).xmsgattrib_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-wrap")))))
                            (((unsupported)).apply (((xself).xxgettext_options)) (((((unsupported)).apply (((xself).xxgettext_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-wrap")))))
                        (((unsupported)).apply ((xoptions)) ("no_location")).if
                          seq
                            (((unsupported)).apply (((xself).xmsgmerge_options)) (((((unsupported)).apply (((xself).xmsgmerge_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-location")))))
                            (((unsupported)).apply (((xself).xmsguniq_options)) (((((unsupported)).apply (((xself).xmsguniq_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-location")))))
                            (((unsupported)).apply (((xself).xmsgattrib_options)) (((((unsupported)).apply (((xself).xmsgattrib_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-location")))))
                            (((unsupported)).apply (((xself).xxgettext_options)) (((((unsupported)).apply (((xself).xxgettext_options)) ((((unsupported)).apply))).add (((unsupported)).apply ("--no-location")))))
                        (((unsupported)).apply ((xoptions)) ("add_location")).if
                          seq
                            (((xself).xgettext_version).less (((unsupported)).apply (0) (19))).if
                              (((unsupported)).apply ((((xCommandError)).apply (("The --add-location option requires gettext 0.19 or later. You have %s.".mod (((".".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xx)))) ((xx)) (((xself).xgettext_version))))))))))
                            xarg_add_location.write ("--add-location=%s".mod (((unsupported)).apply ((xoptions)) ("add_location")))
                            (((unsupported)).apply (((xself).xmsgmerge_options)) (((((unsupported)).apply (((xself).xmsgmerge_options)) ((((unsupported)).apply))).add (((unsupported)).apply ((xarg_add_location))))))
                            (((unsupported)).apply (((xself).xmsguniq_options)) (((((unsupported)).apply (((xself).xmsguniq_options)) ((((unsupported)).apply))).add (((unsupported)).apply ((xarg_add_location))))))
                            (((unsupported)).apply (((xself).xmsgattrib_options)) (((((unsupported)).apply (((xself).xmsgattrib_options)) ((((unsupported)).apply))).add (((unsupported)).apply ((xarg_add_location))))))
                            (((unsupported)).apply (((xself).xxgettext_options)) (((((unsupported)).apply (((xself).xxgettext_options)) ((((unsupported)).apply))).add (((unsupported)).apply ((xarg_add_location))))))
                        (((unsupported)).apply (((xself).xno_obsolete)) ((((unsupported)).apply ((xoptions)) ("no_obsolete"))))
                        (((unsupported)).apply (((xself).xkeep_pot)) ((((unsupported)).apply ((xoptions)) ("keep_pot"))))
                        (((unsupported)).apply (((xself).xdomain)) ((((unsupported)).apply ("django") ("djangojs")))).if
                          (((unsupported)).apply ((((xCommandError)).apply ("currently makemessages only supports domains 'django' and 'djangojs'"))))
                        (((xself).xdomain).eq "djangojs").if
                          xexts.write ((xextensions).or (((unsupported)).apply ("js")))
                          xexts.write ((xextensions).or (((unsupported)).apply ("html") ("txt") ("py")))
                        (((unsupported)).apply (((xself).xextensions)) ((((xhandle_extensions)).apply ((xexts)))))
                        (((((xlocale).not).and ((xexclude).not)).and ((xprocess_all).not)).or (((unsupported)).apply (((xself).xdomain)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply ((((xCommandError)).apply (("Type '%s help %s' for usage information.".mod (((unsupported)).apply ((((((xos).xpath).xbasename)).apply ((((unsupported)).apply (((xsys).xargv)) (0))))) ((((unsupported)).apply (((xsys).xargv)) (1)))))))))
                        (((xself).xverbosity).greater 1).if
                          bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("examining files with the extensions: %s".mod (((xget_text_list)).apply ((((xlist)).apply (((xself).xextensions)))) ("and")))))
                        (((unsupported)).apply (((xself).xinvoked_for_django)) (FALSE))
                        (((unsupported)).apply (((xself).xlocale_paths)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xdefault_locale_path)) ("None: is there a None literal in the EO language?"))
                        (((((xos).xpath).xisdir)).apply ((((((xos).xpath).xjoin)).apply ("conf") ("locale")))).if
                          seq
                            (((unsupported)).apply (((xself).xlocale_paths)) ((((unsupported)).apply ((((((xos).xpath).xabspath)).apply ((((((xos).xpath).xjoin)).apply ("conf") ("locale"))))))))
                            (((unsupported)).apply (((xself).xdefault_locale_path)) ((((unsupported)).apply (((xself).xlocale_paths)) (0))))
                            (((unsupported)).apply (((xself).xinvoked_for_django)) (TRUE))
                          seq
                            ((xself).xsettings_available).if
                              bogusForceDataize.write (((((xself).xlocale_paths).xextend)).apply (((xsettings).xLOCALE_PATHS)))
                            (((((xos).xpath).xisdir)).apply ("locale")).if
                              bogusForceDataize.write (((((xself).xlocale_paths).xappend)).apply ((((((xos).xpath).xabspath)).apply ("locale"))))
                            ((xself).xlocale_paths).if
                              seq
                                (((unsupported)).apply (((xself).xdefault_locale_path)) ((((unsupported)).apply (((xself).xlocale_paths)) (0))))
                                (((unsupported)).apply (((xos).xmakedirs)) (((xself).xdefault_locale_path)) (TRUE))
                        xlooks_like_locale.write ((((xre).xcompile)).apply ("[a-z]{2}"))
                        xlocale_dirs.write (((xfilter)).apply ((((xos).xpath).xisdir)) (((((xglob).xglob)).apply (("%s/*".mod ((xself).xdefault_locale_path))))))
                        xall_locales.write (((unsupported)).apply ((xlang_code)) ((xlang_code)) ((((xmap)).apply ((((xos).xpath).xbasename)) ((xlocale_dirs)))) (((((xlooks_like_locale).xmatch)).apply ((xlang_code)))))
                        (xprocess_all).if
                          xlocales.write (xall_locales)
                          seq
                            xlocales.write ((xlocale).or (xall_locales))
                            xlocales.write ((((((xset)).apply ((xlocales))).xdifference)).apply ((xexclude)))
                        (xlocales).if
                          bogusForceDataize.write (((xcheck_programs)).apply ("msguniq") ("msgmerge") ("msgattrib"))
                        bogusForceDataize.write (((xcheck_programs)).apply ("xgettext"))
                        (((unsupported)).apply)
                          seq
                            xpotfiles.write ((((xself).xbuild_potfiles)).apply)
                            (((unsupported)).apply ((xlocale)) ((xlocales)))
                              seq
                                (((unsupported)).apply ("-") ((xlocale))).if
                                  seq
                                    bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("invalid locale %s, did you mean %s?".mod (((unsupported)).apply ((xlocale)) (((((xlocale).xreplace)).apply ("-") ("_")))))))
                                    (((unsupported)).apply)
                                (((xself).xverbosity).greater 0).if
                                  bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("processing locale %s".mod (xlocale))))
                                (((unsupported)).apply ((xpotfile)) ((xpotfiles)))
                                  bogusForceDataize.write ((((xself).xwrite_po_file)).apply ((xpotfile)) ((xlocale)))
                          (((xself).xkeep_pot).not).if
                            bogusForceDataize.write ((((xself).xremove_potfiles)).apply)
                xgettext_version.write
                  [xself]
                    memory > xm
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)) ((xstatus)))) ((((unsupported)).apply ((xpopen_wrapper)) ((((unsupported)).apply ("xgettext") ("--version"))) ((xDEFAULT_LOCALE_ENCODING)))))
                        xm.write ((((xre).xsearch)).apply ("(d+).(d+).?(d+)?") ((xout)))
                        (xm).if
                          (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xint)).apply ((xd)))) ((xd)) (((((xm).xgroups)).apply)) ((((unsupported)).apply ((xd)) ("None: is there a None literal in the EO language?"))))))))
                          (((unsupported)).apply ((((xCommandError)).apply ("Unable to get gettext version. Is it installed?"))))
                xsettings_available.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          unsupported
                          seq
                            (((xself).xverbosity).greater 1).if
                              bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ("Running without configured settings."))
                            (((unsupported)).apply (FALSE))
                        (((unsupported)).apply (TRUE))
                xbuild_potfiles.write
                  [xself]
                    memory > xpotfiles
                    memory > xpotfile
                    memory > xfile_list
                    memory > xargs
                    memory > xmsgs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfile_list.write ((((xself).xfind_files)).apply ("."))
                        bogusForceDataize.write ((((xself).xremove_potfiles)).apply)
                        bogusForceDataize.write ((((xself).xprocess_files)).apply ((xfile_list)))
                        xpotfiles.write (((unsupported)).apply)
                        (((unsupported)).apply ((xpath)) (((xself).xlocale_paths)))
                          seq
                            xpotfile.write (((((xos).xpath).xjoin)).apply ((xpath)) (("%s.pot".mod ((xself).xdomain))))
                            ((((((xos).xpath).xexists)).apply ((xpotfile))).not).if
                              (((unsupported)).apply)
                            xargs.write (((((unsupported)).apply ("msguniq")).add ((xself).xmsguniq_options)).add (((unsupported)).apply ((xpotfile))))
                            (((unsupported)).apply ((((unsupported)).apply ((xmsgs)) ((xerrors)) ((xstatus)))) ((((xpopen_wrapper)).apply ((xargs)))))
                            (xerrors).if
                              ((xstatus).neq (xSTATUS_OK)).if
                                (((unsupported)).apply ((((xCommandError)).apply (("errors happened while running msguniqn%s".mod (xerrors))))))
                                (((xself).xverbosity).greater 0).if
                                  bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ((xerrors)))
                            xmsgs.write (((xnormalize_eols)).apply ((xmsgs)))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpotfile)) ("w") ("utf-8"))) ((xfp)))
                              bogusForceDataize.write ((((xfp).xwrite)).apply ((xmsgs)))
                            bogusForceDataize.write ((((xpotfiles).xappend)).apply ((xpotfile)))
                        (((unsupported)).apply ((xpotfiles)))
                xremove_potfiles.write
                  [xself]
                    memory > xpot_path
                    seq > @
                      (((unsupported)).apply ((xpath)) (((xself).xlocale_paths)))
                        seq
                          xpot_path.write (((((xos).xpath).xjoin)).apply ((xpath)) (("%s.pot".mod ((xself).xdomain))))
                          (((((xos).xpath).xexists)).apply ((xpot_path))).if
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xpot_path)))
                xfind_files.write
                  [xself xroot]
                    memory > xlocale_dir
                    memory > xignored_roots
                    memory > xall_files
                    memory > xfile_path
                    memory > xfile_ext
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xall_files.write (((unsupported)).apply)
                        xignored_roots.write (((unsupported)).apply)
                        ((xself).xsettings_available).if
                          xignored_roots.write (((unsupported)).apply ((((((xos).xpath).xnormpath)).apply ((xp)))) ((xp)) ((((unsupported)).apply (((xsettings).xMEDIA_ROOT)) (((xsettings).xSTATIC_ROOT)))) ((xp)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdirpath)) ((xdirnames)) ((xfilenames)))) ((((unsupported)).apply (((xos).xwalk)) ((xroot)) (TRUE) (((xself).xsymlinks)))))
                          seq
                            (((unsupported)).apply ((xdirname)) ((((unsupported)).apply ((xdirnames)) ((((unsupported)).apply)))))
                              ((((xis_ignored_path)).apply ((((((xos).xpath).xnormpath)).apply ((((((xos).xpath).xjoin)).apply ((xdirpath)) ((xdirname)))))) (((xself).xignore_patterns))).or (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xabspath)).apply ((xdirpath)))) ((xdirname)))) ((xignored_roots)))).if
                                seq
                                  bogusForceDataize.write ((((xdirnames).xremove)).apply ((xdirname)))
                                  (((xself).xverbosity).greater 1).if
                                    bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("ignoring directory %s".mod (xdirname))))
                                ((xdirname).eq "locale").if
                                  seq
                                    bogusForceDataize.write ((((xdirnames).xremove)).apply ((xdirname)))
                                    bogusForceDataize.write (((((xself).xlocale_paths).xinsert)).apply (0) ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xabspath)).apply ((xdirpath)))) ((xdirname)))))
                            (((unsupported)).apply ((xfilename)) ((xfilenames)))
                              seq
                                xfile_path.write (((((xos).xpath).xnormpath)).apply ((((((xos).xpath).xjoin)).apply ((xdirpath)) ((xfilename)))))
                                xfile_ext.write (((unsupported)).apply ((((((xos).xpath).xsplitext)).apply ((xfilename)))) (1))
                                ((((unsupported)).apply ((xfile_ext)) (((xself).xextensions))).or (((xis_ignored_path)).apply ((xfile_path)) (((xself).xignore_patterns)))).if
                                  (((xself).xverbosity).greater 1).if
                                    bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("ignoring file %s in %s".mod (((unsupported)).apply ((xfilename)) ((xdirpath))))))
                                  seq
                                    xlocale_dir.write "None: is there a None literal in the EO language?"
                                    (((unsupported)).apply ((xpath)) (((xself).xlocale_paths)))
                                      ((((((((xos).xpath).xabspath)).apply ((xdirpath))).xstartswith)).apply ((((((xos).xpath).xdirname)).apply ((xpath))))).if
                                        seq
                                          xlocale_dir.write (xpath)
                                          (((unsupported)).apply)
                                    xlocale_dir.write (((xlocale_dir).or ((xself).xdefault_locale_path)).or (xNO_LOCALE_DIR))
                                    bogusForceDataize.write ((((xall_files).xappend)).apply (((((xself).xtranslatable_file_class)).apply ((xdirpath)) ((xfilename)) ((xlocale_dir)))))
                        (((unsupported)).apply ((((xsorted)).apply ((xall_files)))))
                xprocess_files.write
                  [xself xfile_list]
                    memory > xfile_group
                    memory > xfile_groups
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfile_groups.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtranslatable)) ((xfile_list)))
                          seq
                            xfile_group.write ((((xfile_groups).xsetdefault)).apply (((xtranslatable).xlocale_dir)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xfile_group).xappend)).apply ((xtranslatable)))
                        (((unsupported)).apply ((((unsupported)).apply ((xlocale_dir)) ((xfiles)))) (((((xfile_groups).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xprocess_locale_dir)).apply ((xlocale_dir)) ((xfiles)))
                xprocess_locale_dir.write
                  [xself xlocale_dir xfiles]
                    memory > xfile_path
                    memory > xis_templatized
                    memory > xbuild_file
                    memory > xpotfile
                    memory > xinput_files
                    memory > xargs
                    memory > xmsgs
                    memory > xbuild_files
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbuild_files.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtranslatable)) ((xfiles)))
                          seq
                            (((xself).xverbosity).greater 1).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("processing file %s in %s".mod (((unsupported)).apply (((xtranslatable).xfile)) (((xtranslatable).xdirpath))))))
                            (((unsupported)).apply (((xself).xdomain)) ((((unsupported)).apply ("djangojs") ("django")))).if
                              (((unsupported)).apply)
                            xbuild_file.write ((((xself).xbuild_file_class)).apply ((xself)) (((xself).xdomain)) ((xtranslatable)))
                            (((unsupported)).apply ((xUnicodeDecodeError)) ((xBaseException)))
                              bogusForceDataize.write ((((xbuild_file).xpreprocess)).apply)
                              seq
                                bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("UnicodeDecodeError: skipped file %s in %s (reason: %s)".mod (((unsupported)).apply (((xtranslatable).xfile)) (((xtranslatable).xdirpath)) ((xe))))))
                                (((unsupported)).apply)
                              seq
                                (((unsupported)).apply ((xbuild_file)) ((xbuild_files)))
                                  bogusForceDataize.write ((((xbuild_file).xcleanup)).apply)
                                (((unsupported)).apply)
                            bogusForceDataize.write ((((xbuild_files).xappend)).apply ((xbuild_file)))
                        (((xself).xdomain).eq "djangojs").if
                          seq
                            xis_templatized.write ((xbuild_file).xis_templatized)
                            xargs.write (((unsupported)).apply ("xgettext") ("-d") (((xself).xdomain)) (("--language=%s".mod (((unsupported)).apply (((xis_templatized).if "C" "JavaScript"))))) ("--keyword=gettext_noop") ("--keyword=gettext_lazy") ("--keyword=ngettext_lazy:1,2") ("--keyword=pgettext:1c,2") ("--keyword=npgettext:1c,2,3") ("--output=-"))
                          (((xself).xdomain).eq "django").if
                            xargs.write (((unsupported)).apply ("xgettext") ("-d") (((xself).xdomain)) ("--language=Python") ("--keyword=gettext_noop") ("--keyword=gettext_lazy") ("--keyword=ngettext_lazy:1,2") ("--keyword=pgettext:1c,2") ("--keyword=npgettext:1c,2,3") ("--keyword=pgettext_lazy:1c,2") ("--keyword=npgettext_lazy:1c,2,3") ("--output=-"))
                            (((unsupported)).apply)
                        xinput_files.write (((unsupported)).apply (((xbf).xwork_path)) ((xbf)) ((xbuild_files)))
                        (((unsupported)).apply ((((unsupported)).apply ((xNamedTemporaryFile)) ("w+"))) ((xinput_files_list)))
                          seq
                            bogusForceDataize.write ((((xinput_files_list).xwrite)).apply (((("n".xjoin)).apply ((xinput_files)))))
                            bogusForceDataize.write ((((xinput_files_list).xflush)).apply)
                            bogusForceDataize.write ((((xargs).xextend)).apply ((((unsupported)).apply ("--files-from") (((xinput_files_list).xname)))))
                            bogusForceDataize.write ((((xargs).xextend)).apply (((xself).xxgettext_options)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmsgs)) ((xerrors)) ((xstatus)))) ((((xpopen_wrapper)).apply ((xargs)))))
                        (xerrors).if
                          ((xstatus).neq (xSTATUS_OK)).if
                            seq
                              (((unsupported)).apply ((xbuild_file)) ((xbuild_files)))
                                bogusForceDataize.write ((((xbuild_file).xcleanup)).apply)
                              (((unsupported)).apply ((((xCommandError)).apply (("errors happened while running xgettext on %sn%s".mod (((unsupported)).apply (((("n".xjoin)).apply ((xinput_files)))) ((xerrors))))))))
                            (((xself).xverbosity).greater 0).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ((xerrors)))
                        (xmsgs).if
                          seq
                            (((unsupported)).apply ((xlocale_dir)) ((xNO_LOCALE_DIR))).if
                              seq
                                (((unsupported)).apply ((xbuild_file)) ((xbuild_files)))
                                  bogusForceDataize.write ((((xbuild_file).xcleanup)).apply)
                                xfile_path.write (((((xos).xpath).xnormpath)).apply (((((unsupported)).apply ((xbuild_files)) (0)).xpath)))
                                (((unsupported)).apply ((((xCommandError)).apply (("Unable to find a locale path to store translations for file %s. Make sure the 'locale' directory exists in an app or LOCALE_PATHS setting is set.".mod (xfile_path))))))
                            (((unsupported)).apply ((xbuild_file)) ((xbuild_files)))
                              xmsgs.write ((((xbuild_file).xpostprocess_messages)).apply ((xmsgs)))
                            xpotfile.write (((((xos).xpath).xjoin)).apply ((xlocale_dir)) (("%s.pot".mod ((xself).xdomain))))
                            bogusForceDataize.write (((xwrite_pot_file)).apply ((xpotfile)) ((xmsgs)))
                        (((unsupported)).apply ((xbuild_file)) ((xbuild_files)))
                          bogusForceDataize.write ((((xbuild_file).xcleanup)).apply)
                xwrite_po_file.write
                  [xself xpotfile xlocale]
                    memory > xargs
                    memory > xpofile
                    memory > xbasedir
                    memory > xmsgs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbasedir.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((xpotfile)))) ((xlocale)) ("LC_MESSAGES"))
                        (((unsupported)).apply (((xos).xmakedirs)) ((xbasedir)) (TRUE))
                        xpofile.write (((((xos).xpath).xjoin)).apply ((xbasedir)) (("%s.po".mod ((xself).xdomain))))
                        (((((xos).xpath).xexists)).apply ((xpofile))).if
                          seq
                            xargs.write (((((unsupported)).apply ("msgmerge")).add ((xself).xmsgmerge_options)).add (((unsupported)).apply ((xpofile)) ((xpotfile))))
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xerrors)) ((xstatus)))) ((((xpopen_wrapper)).apply ((xargs)))))
                            (xerrors).if
                              ((xstatus).neq (xSTATUS_OK)).if
                                (((unsupported)).apply ((((xCommandError)).apply (("errors happened while running msgmergen%s".mod (xerrors))))))
                                (((xself).xverbosity).greater 0).if
                                  bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ((xerrors)))
                            xmsgs.write (((unsupported)).apply (((((xPath)).apply ((xpofile))).xread_text)) ("utf-8"))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpotfile)) ("utf-8"))) ((xfp)))
                              xmsgs.write ((((xfp).xread)).apply)
                            (((xself).xinvoked_for_django).not).if
                              xmsgs.write ((((xself).xcopy_plural_forms)).apply ((xmsgs)) ((xlocale)))
                        xmsgs.write (((xnormalize_eols)).apply ((xmsgs)))
                        xmsgs.write ((((xmsgs).xreplace)).apply (("#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#n".mod ((xself).xdomain))) (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpofile)) ("w") ("utf-8"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply ((xmsgs)))
                        ((xself).xno_obsolete).if
                          seq
                            xargs.write (((((unsupported)).apply ("msgattrib")).add ((xself).xmsgattrib_options)).add (((unsupported)).apply ("-o") ((xpofile)) ((xpofile))))
                            (((unsupported)).apply ((((unsupported)).apply ((xmsgs)) ((xerrors)) ((xstatus)))) ((((xpopen_wrapper)).apply ((xargs)))))
                            (xerrors).if
                              ((xstatus).neq (xSTATUS_OK)).if
                                (((unsupported)).apply ((((xCommandError)).apply (("errors happened while running msgattribn%s".mod (xerrors))))))
                                (((xself).xverbosity).greater 0).if
                                  bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ((xerrors)))
                xcopy_plural_forms.write
                  [xself xmsgs xlocale]
                    memory > xlines
                    memory > xm
                    memory > xline
                    memory > xplural_form_line
                    memory > xfound
                    memory > xdjango_po
                    memory > xdjango_dir
                    memory > xdomains
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdjango_dir.write (((((xos).xpath).xnormpath)).apply ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply (((xdjango).x__file__)))))))
                        (((xself).xdomain).eq "djangojs").if
                          xdomains.write (((unsupported)).apply ("djangojs") ("django"))
                          xdomains.write (((unsupported)).apply ("django"))
                        (((unsupported)).apply ((xdomain)) ((xdomains)))
                          seq
                            xdjango_po.write (((((xos).xpath).xjoin)).apply ((xdjango_dir)) ("conf") ("locale") ((xlocale)) ("LC_MESSAGES") (("%s.po".mod (xdomain))))
                            (((((xos).xpath).xexists)).apply ((xdjango_po))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xdjango_po)) ("utf-8"))) ((xfp)))
                                  xm.write ((((xplural_forms_re).xsearch)).apply (((((xfp).xread)).apply)))
                                (xm).if
                                  seq
                                    xplural_form_line.write (((unsupported)).apply ((xm)) ("value"))
                                    (((xself).xverbosity).greater 1).if
                                      bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("copying plural forms: %s".mod (xplural_form_line))))
                                    xlines.write (((unsupported)).apply)
                                    xfound.write FALSE
                                    (((unsupported)).apply ((xline)) (((((xmsgs).xsplitlines)).apply)))
                                      seq
                                        (((xfound).not).and (((xline).not).or ((((xplural_forms_re).xsearch)).apply ((xline))))).if
                                          seq
                                            xline.write (xplural_form_line)
                                            xfound.write TRUE
                                        bogusForceDataize.write ((((xlines).xappend)).apply ((xline)))
                                    xmsgs.write ((("n".xjoin)).apply ((xlines)))
                                    (((unsupported)).apply)
                        (((unsupported)).apply ((xmsgs)))