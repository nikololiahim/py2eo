memory > xeval
memory > xunittest
memory > xop
memory > xTypeError
memory > x__name__
[] > test_unary
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_invert
        memory > xtest_no_overflow
        memory > xtest_bad_types
        memory > xtest_negative
        memory > xtest_negation_of_exponentiation
        memory > xtest_positive
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_negative.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((2.neg).eq (0.sub 2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((2.neg).neg)) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((2.neg).eq (0.sub 2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((2.0.neg).eq (0.sub 2.0))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((unsupported)).apply).neg).eq (0.sub (((unsupported)).apply)))))
                xtest_positive.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((2.neg)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((2.neg).neg)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((2.neg)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((2.0.neg)) (2.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))
                xtest_invert.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((2.neg).eq (0.sub 2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((2.neg).neg)) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((2.neg).eq (0.sub 2))))
                xtest_no_overflow.write
                  [xself]
                    memory > xnines
                    seq > @
                      seq
                        xnines.write ("9".mul 32)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xeval)).apply (("-".sub (xnines)))).eq ((((unsupported)).apply (10) (32)).sub 1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xeval)).apply (("-".sub (xnines)))).eq (((((unsupported)).apply (10) (32)).sub 1).neg))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xeval)).apply (("~".sub (xnines)))).eq (((((unsupported)).apply (10) (32)).sub 1).neg))))
                xtest_negation_of_exponentiation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (2) (3)).neg)) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((2.neg)) (3))) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (2) (4)).neg)) ((16.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((2.neg)) (4))) (16))
                xtest_bad_types.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xop)) ((((unsupported)).apply ("-") ("-") ("~"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) (((xop).sub "b'a'")))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) (((xop).sub "'a'")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) ("~2j"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) ("~2.0"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)