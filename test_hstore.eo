memory > xcm
memory > xKeysValidator
memory > xRawSQL
memory > xOuterRef
memory > xchecks
memory > xMyModel
memory > xHStoreModel
memory > xHStoreFormTest
memory > xconnection
memory > xexceptions
memory > xpath
memory > xF
memory > xCaptureQueriesContext
memory > xForm
memory > xargs
memory > xPostgreSQLTestCase
memory > xqueries
memory > xkwargs
memory > xImportError
memory > xforms
memory > xSubquery
memory > xKeyTransform
memory > xlist
memory > xPostgreSQLSimpleTestCase
memory > xHStoreField
memory > xserializers
memory > xPostgreSQLModel
memory > xjson
memory > xdict
memory > xisolate_apps
[] > test_hstore
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_invalid_json
        memory > xtest_data
        memory > xtest_key_isnull
        memory > xtest_non_dict_json
        memory > xtest_array_field
        memory > xtest_simple_valid
        memory > xtest_order_by_field
        memory > xtest_extra_keys
        memory > xtest_save_load_success
        memory > xtest_custom_messages
        memory > xtest_dumping
        memory > xtest_values_overlap
        memory > xtest_keys
        memory > xtest_field_chaining_istartswith
        memory > xtest_not_a_string
        memory > xtest_none_value
        memory > xtest_valid_default
        memory > xtest_field_chaining_regex
        memory > xtest_contained_by
        memory > xtest_keys_contains
        memory > xtest_not_string_values
        memory > xtest_field_chaining_startswith
        memory > xtest_key_transform_annotation
        memory > xtest_field_has_changed
        memory > xsetUpTestData
        memory > xtest_invalid_default
        memory > xtest_field_chaining_icontains
        memory > xtest_obj_subquery_lookup
        memory > xtest_in_generator
        memory > xtest_exact
        memory > xtest_value_null
        memory > xtest_strict_valid
        memory > xtest_key_val_cast_to_string
        memory > xtest_field_chaining_iendswith
        memory > xtest_field_chaining_iregex
        memory > xtest_field_chaining_endswith
        memory > xtest_null
        memory > xtest_has_any_keys
        memory > xtest_key_transform_raw_expression
        memory > xtest_roundtrip_with_null
        memory > xtest_deconstruct
        memory > xtest_key_sql_injection
        memory > xtest_has_keys
        memory > xtest_loading
        memory > xtest_contains
        memory > xtest_field_chaining_iexact
        memory > xtest_key_transform
        memory > xtest_none_allowed_as_value
        memory > xtest_model_field_formfield
        memory > xtest_has_key
        memory > xtest_missing_keys
        memory > xtest_usage_in_subquery
        memory > xtest_values
        memory > xtest_field_chaining_contains
        memory > xtest_empty
        memory > xtest_valid
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xtest_save_load_success.write
                  [xself]
                    memory > xreloaded
                    memory > xvalue
                    memory > xinstance
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ("a") ("b"))
                        xinstance.write (((unsupported)).apply ((xHStoreModel)) ((xvalue)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xreloaded.write (((((xHStoreModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xreloaded).xfield)) ((xvalue)))
                xtest_null.write
                  [xself]
                    memory > xreloaded
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xHStoreModel)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xreloaded.write (((((xHStoreModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xreloaded).xfield)))
                xtest_value_null.write
                  [xself]
                    memory > xreloaded
                    memory > xvalue
                    memory > xinstance
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))
                        xinstance.write (((unsupported)).apply ((xHStoreModel)) ((xvalue)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xreloaded.write (((((xHStoreModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xreloaded).xfield)) ((xvalue)))
                xtest_key_val_cast_to_string.write
                  [xself]
                    memory > xvalue
                    memory > xinstance
                    memory > xexpected_value
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ("a") (1) ("b") ("B") (2) ("c") ("ï") ("ê"))
                        xexpected_value.write (((unsupported)).apply ("a") ("1") ("b") ("B") ("2") ("c") ("ï") ("ê"))
                        xinstance.write (((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((xvalue)))
                        xinstance.write (((((xHStoreModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) ((xexpected_value)))
                        xinstance.write (((unsupported)).apply ((((xHStoreModel).xobjects).xget)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) ((xexpected_value)))
                        xinstance.write (((unsupported)).apply ((((xHStoreModel).xobjects).xget)) ((((unsupported)).apply (2) ("a") ("ï"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) ((xexpected_value)))
                xtest_array_field.write
                  [xself]
                    memory > xvalue
                    memory > xinstance
                    memory > xexpected_value
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") ("B") (2) ("c") ("ï") ("ê"))) ((((unsupported)).apply ("a") (1) ("b") ("B") (2) ("c") ("ï") ("ê"))))
                        xexpected_value.write (((unsupported)).apply ((((unsupported)).apply ("a") ("1") ("b") ("B") ("2") ("c") ("ï") ("ê"))) ((((unsupported)).apply ("a") ("1") ("b") ("B") ("2") ("c") ("ï") ("ê"))))
                        xinstance.write (((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((xvalue)))
                        bogusForceDataize.write ((((xinstance).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xarray_field)) ((xexpected_value)))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xobjs)) ((((((xHStoreModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("a") ("b") ("c") ("d"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("c") ("d"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xHStoreModel)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("cat") ("TigrOu") ("breed") ("birman"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("cat") ("minou") ("breed") ("ragdoll"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("cat") ("kitty") ("breed") ("Persian"))))) ((((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("cat") ("Kit Kat") ("breed") ("persian"))))))))))
                xtest_exact.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_contained_by.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b") ("c") ("d"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (4))))))
                xtest_contains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_in_generator.write
                  [xself]
                    memory > xsearch
                    seq > @
                      seq
                        xsearch.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((xsearch)).apply)))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_has_key.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("c"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_has_keys.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("c"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (2))))))
                xtest_has_any_keys.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("c"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3))))))
                xtest_key_transform.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("b"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_key_transform_raw_expression.write
                  [xself]
                    memory > xexpr
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply ("%s::hstore") ((((unsupported)).apply ("x => b, y => c"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((xKeyTransform)).apply ("x") ((xexpr)))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_key_transform_annotation.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xHStoreModel).xobjects).xannotate)) ((((xF)).apply ("field__a"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xqs).xvalues_list)) ("a") (TRUE))) ((((unsupported)).apply ("b") ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_keys.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("b"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_field_chaining_contains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("b"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_field_chaining_icontains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("INo"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (6))))))
                xtest_field_chaining_startswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("kit"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))
                xtest_field_chaining_istartswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("kit"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (7))))))
                xtest_field_chaining_endswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("ou"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (6))))))
                xtest_field_chaining_iendswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("ou"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5) (7))))))
                xtest_field_chaining_iexact.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("persian"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (7))))))
                xtest_field_chaining_regex.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("ou$"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (6))))))
                xtest_field_chaining_iregex.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("oU$"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5) (7))))))
                xtest_order_by_field.write
                  [xself]
                    memory > xmore_objs
                    seq > @
                      seq
                        xmore_objs.write (((unsupported)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((((unsupported)).apply ("g") ("637"))))) ((((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((((unsupported)).apply ("g") ("002"))))) ((((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((((unsupported)).apply ("g") ("042"))))) ((((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((((unsupported)).apply ("g") ("981"))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("g")).xorder_by)).apply ("field__g"))) ((((unsupported)).apply ((((unsupported)).apply ((xmore_objs)) (1))) ((((unsupported)).apply ((xmore_objs)) (2))) ((((unsupported)).apply ((xmore_objs)) (0))) ((((unsupported)).apply ((xmore_objs)) (3))))))
                xtest_keys_contains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("a"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_values_overlap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ("b") ("d"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3))))))
                xtest_key_isnull.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xHStoreModel).xobjects).xcreate)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) (TRUE))) (((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (9)))).add (((unsupported)).apply ((xobj))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) (FALSE))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_usage_in_subquery.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ("b"))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_key_sql_injection.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xCaptureQueriesContext)).apply ((xconnection)))) ((xqueries)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xHStoreModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("field__test' = 'a') OR 1 = 1 OR ('d") ("x")))))).xexists)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (".\"field\" -> 'test'' = ''a'') OR 1 = 1 OR (''d') = 'x' ") ((((unsupported)).apply ((((unsupported)).apply ((xqueries)) (0))) ("sql"))))
                xtest_obj_subquery_lookup.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply (((((unsupported)).apply ((((xHStoreModel).xobjects).xannotate)) ((((xSubquery)).apply (((((((unsupported)).apply ((((xHStoreModel).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xvalues)).apply ("field")))))).xfilter)) ("b"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)) ((((xisolate_apps)).apply ("postgres_tests"))))
              seq
                xtest_invalid_default.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xHStoreField)) ((((unsupported)).apply)))
                        xmodel.write (((xMyModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmodel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xWarning)) ("HStoreField default should be a callable instead of an instance so that it's not shared between all field instances.") ("Use a callable instead, e.g., use `dict` instead of `{}`.") ((((((xMyModel).x_meta).xget_field)).apply ("field"))) ("fields.E010"))))))
                xtest_valid_default.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xHStoreField)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xMyModel)).apply).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_data.write ((((xjson).xdumps)).apply ((((unsupported)).apply ((((unsupported)).apply ("model") ("postgres_tests.hstoremodel") ("pk") ("None: is there a None literal in the EO language?") ("fields") ((((unsupported)).apply ("field") (((((xjson).xdumps)).apply ((((unsupported)).apply ("a") ("b"))))) ("array_field") (((((xjson).xdumps)).apply ((((unsupported)).apply (((((xjson).xdumps)).apply ((((unsupported)).apply ("a") ("b"))))) (((((xjson).xdumps)).apply ((((unsupported)).apply ("b") ("a"))))))))))))))))
                xtest_dumping.write
                  [xself]
                    memory > xinstance
                    memory > xdata
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("b") ("a"))))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xjson).xloads)).apply ((xdata)))) (((((xjson).xloads)).apply (((xself).xtest_data)))))
                xtest_loading.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") (((xself).xtest_data)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) ((((unsupported)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xarray_field)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("b") ("a"))))))
                xtest_roundtrip_with_null.write
                  [xself]
                    memory > xinstance
                    memory > xnew_instance
                    memory > xdata
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xHStoreModel)) ((((unsupported)).apply ("a") ("b") ("c") ("None: is there a None literal in the EO language?"))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        xnew_instance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") ((xdata)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xnew_instance).xfield)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_not_a_string.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xHStoreField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("a") (1))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("not_a_string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcm).xexception).xmessage).mod (((xcm).xexception).xparams))) ("The value of “a” is not a string or null."))
                xtest_none_allowed_as_value.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xHStoreField)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xclean)).apply ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_valid.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xforms).xHStoreField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ("{\"a\": \"b\"}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("a") ("b"))))
                xtest_invalid_json.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xforms).xHStoreField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("{\"a\": \"b\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Could not load JSON data."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid_json"))
                xtest_non_dict_json.write
                  [xself]
                    memory > xfield
                    memory > xmsg
                    seq > @
                      seq
                        xfield.write ((((xforms).xHStoreField)).apply)
                        xmsg.write "Input must be a JSON dictionary."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xexceptions).xValidationError)) ((xmsg)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("[\"a\", \"b\", 1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid_format"))
                xtest_not_string_values.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xforms).xHStoreField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ("{\"a\": 1}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("a") ("1"))))
                xtest_none_value.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xforms).xHStoreField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ("{\"a\": null}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                xtest_empty.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xforms).xHStoreField)) (FALSE))
                        xvalue.write ((((xfield).xclean)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply)))
                xtest_model_field_formfield.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((xHStoreField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xforms).xHStoreField)))
                xtest_field_has_changed.write
                  [xself]
                    memory > xform_w_hstore
                    memory > xf1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xf1.write ((((xforms).xHStoreField)).apply)
                        xform_w_hstore.write (((xHStoreFormTest)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform_w_hstore).xhas_changed)).apply)))
                        xform_w_hstore.write (((xHStoreFormTest)).apply ((((unsupported)).apply ("f1") ("{\"a\": 1}"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform_w_hstore).xhas_changed)).apply)))
                        xform_w_hstore.write (((unsupported)).apply ((xHStoreFormTest)) ((((unsupported)).apply ("f1") ("{\"a\": 1}"))) ((((unsupported)).apply ("f1") ("{\"a\": 1}"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform_w_hstore).xhas_changed)).apply)))
                        xform_w_hstore.write (((unsupported)).apply ((xHStoreFormTest)) ((((unsupported)).apply ("f1") ("{\"a\": 2}"))) ((((unsupported)).apply ("f1") ("{\"a\": 1}"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform_w_hstore).xhas_changed)).apply)))
                        xform_w_hstore.write (((unsupported)).apply ((xHStoreFormTest)) ((((unsupported)).apply ("f1") ("{\"a\": 1}"))) ((((unsupported)).apply ("f1") ((((unsupported)).apply ("a") (1))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform_w_hstore).xhas_changed)).apply)))
                        xform_w_hstore.write (((unsupported)).apply ((xHStoreFormTest)) ((((unsupported)).apply ("f1") ("{\"a\": 2}"))) ((((unsupported)).apply ("f1") ((((unsupported)).apply ("a") (1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform_w_hstore).xhas_changed)).apply)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_simple_valid.write
                  [xself]
                    memory > xvalidator
                    seq > @
                      seq
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))))
                        bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("b") ("bar") ("c") ("baz"))))
                xtest_missing_keys.write
                  [xself]
                    memory > xvalidator
                    seq > @
                      seq
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("c") ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Some keys were missing: b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("missing_keys"))
                xtest_strict_valid.write
                  [xself]
                    memory > xvalidator
                    seq > @
                      seq
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))) (TRUE))
                        bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("b") ("bar"))))
                xtest_extra_keys.write
                  [xself]
                    memory > xvalidator
                    seq > @
                      seq
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("b") ("bar") ("c") ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Some unknown keys were provided: c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("extra_keys"))
                xtest_custom_messages.write
                  [xself]
                    memory > xvalidator
                    memory > xmessages
                    seq > @
                      seq
                        xmessages.write (((unsupported)).apply ("missing_keys") ("Foobar"))
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))) (TRUE) ((xmessages)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("c") ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("missing_keys"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((unsupported)).apply ("a") ("foo") ("b") ("bar") ("c") ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Some unknown keys were provided: c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("extra_keys"))
                xtest_deconstruct.write
                  [xself]
                    memory > xvalidator
                    memory > xmessages
                    seq > @
                      seq
                        xmessages.write (((unsupported)).apply ("missing_keys") ("Foobar"))
                        xvalidator.write (((unsupported)).apply ((xKeysValidator)) ((((unsupported)).apply ("a") ("b"))) (TRUE) ((xmessages)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xvalidator).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.validators.KeysValidator"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("keys") ((((unsupported)).apply ("a") ("b"))) ("strict") (TRUE) ("messages") ((xmessages)))))