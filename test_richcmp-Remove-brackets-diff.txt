4d3
< memory > xSpam
36a36
> memory > xtests
117c117
<                       (((unsupported)).apply (((((xsupport).xTestFailed)).apply ("Number.__cmp__() should not be called"))))
---
>                       (((unsupported)).apply (((((xsupport).xTestFailed)).apply ("Number.__cmp__ should not be called"))))
148c148
<                       (((unsupported)).apply (((((xsupport).xTestFailed)).apply ("Vector.__cmp__() should not be called"))))
---
>                       (((unsupported)).apply (((((xsupport).xTestFailed)).apply ("Vector.__cmp__ should not be called"))))
227c227
<                             (((unsupported)).apply ((xops)) (((((xopmap).xvalues)).apply)))
---
>                             (((unsupported)).apply ((xops)) (((xopmap).xvalues)))
248c248
<                                 (((unsupported)).apply ((xops)) (((((xopmap).xvalues)).apply)))
---
>                                 (((unsupported)).apply ((xops)) (((xopmap).xvalues)))
332,333c332,333
<                         xa.write (((xMisb)).apply)
<                         xb.write (((xMisb)).apply)
---
>                         xa.write (xMisb)
>                         xb.write (xMisb)
355c355
<                           bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) ((xfunc)) ((((xBad)).apply)))
---
>                           bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) ((xfunc)) ((xBad)))
363,364c363,364
<                         xa.write (((xUserList)).apply)
<                         xb.write (((xUserList)).apply)
---
>                         xa.write (xUserList)
>                         xb.write (xUserList)
390d389
<                     memory > xtests
394c393,510
<                         xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((42.less "None: is there a None literal in the EO language?")))) ("'<' .* of 'int' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply (("None: is there a None literal in the EO language?".less 42)))) ("'<' .* of 'NoneType' and 'int'"))) ((((unsupported)).apply ((((unsupported)).apply ((42.greater "None: is there a None literal in the EO language?")))) ("'>' .* of 'int' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply (("foo".less "None: is there a None literal in the EO language?")))) ("'<' .* of 'str' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply (("foo".geq 666)))) ("'>=' .* of 'str' and 'int'"))) ((((unsupported)).apply ((((unsupported)).apply ((42.leq "None: is there a None literal in the EO language?")))) ("'<=' .* of 'int' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply ((42.geq "None: is there a None literal in the EO language?")))) ("'>=' .* of 'int' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply ((42.less (((unsupported)).apply))))) ("'<' .* of 'int' and 'list'"))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply).greater (((unsupported)).apply))))) ("'>' .* of 'tuple' and 'list'"))) ((((unsupported)).apply ((((unsupported)).apply (("None: is there a None literal in the EO language?".geq "None: is there a None literal in the EO language?")))) ("'>=' .* of 'NoneType' and 'NoneType'"))) ((((unsupported)).apply ((((unsupported)).apply (((((xSpam)).apply).less 42)))) ("'<' .* of 'Spam' and 'int'"))) ((((unsupported)).apply ((((unsupported)).apply ((42.less (((xSpam)).apply))))) ("'<' .* of 'int' and 'Spam'"))) ((((unsupported)).apply ((((unsupported)).apply (((((xSpam)).apply).leq (((xSpam)).apply))))) ("'<=' .* of 'Spam' and 'Spam'"))))
---
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
>                         seq
398c514
<                               bogusForceDataize.write (((((unsupported)).apply ((xtest)) (0))).apply)
---
>                               (((unsupported)).apply ((xtest)) (0))
412c528
<                       xitems.write (((xlist)).apply (((((ximag1a).xitems)).apply)))
---
>                       xitems.write (((xlist)).apply (((ximag1a).xitems)))
417c533
<                       ximag2.write ((((ximag1b).xcopy)).apply)
---
>                       ximag2.write ((ximag1b).xcopy)
461,462c577,578
<                         xx.write (((unsupported)).apply ((((xBad)).apply)))
<                         xy.write (((unsupported)).apply ((((xBad)).apply)))
---
>                         xx.write (((unsupported)).apply ((xBad)))
>                         xy.write (((unsupported)).apply ((xBad)))
477,478c593,594
<                         xx.write (((unsupported)).apply ((((xGood)).apply)))
<                         xy.write (((unsupported)).apply ((((xGood)).apply)))
---
>                         xx.write (((unsupported)).apply ((xGood)))
>                         xy.write (((unsupported)).apply ((xGood)))
482c598
<               bogusForceDataize.write ((((xunittest).xmain)).apply)
\ No newline at end of file
---
>               unsupported
\ No newline at end of file