memory > xInvalidTemplateLibrary
memory > xEngine
memory > xentry
memory > xcustom
memory > xsuper
memory > xos
memory > xContext
memory > xNode
memory > xextend_sys_path
memory > xTemplateSyntaxError
memory > xfalse
memory > xinclusion
memory > xTagTestCase
memory > xROOT
memory > xSimpleTestCase
[] > test_custom
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_load_error_egg
        memory > xtest_simple_tag_format_html_escaping
        memory > xtest_inclusion_tag_errors
        memory > xverify_tag
        memory > xtest_render_context_is_cleared
        memory > xtest_load_error
        memory > xtest_simple_tag_missing_context_no_params
        memory > xtest_simple_tags
        memory > xtest_include_tag_missing_context_no_params
        memory > xtest_simple_tag_explicit_escaping
        memory > xtest_decorated_filter
        memory > xtest_inclusion_tags_from_template
        memory > xtest_simple_tag_missing_context
        memory > xtest_15070_use_l10n
        memory > xtest_simple_tag_naive_escaping
        memory > xtest_load_working_egg
        memory > xtest_filter
        memory > xtest_simple_tag_escaping_autoescape_off
        memory > xtest_simple_tag_errors
        memory > xtest_inclusion_tag_registration
        memory > xsetUpClass
        memory > xtest_no_render_side_effect
        memory > xtest_simple_tag_registration
        memory > xtest_inclusion_tags
        memory > xtest_include_tag_missing_context
        memory > xLIBRARIES
        memory > xtest_load_annotated_function
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xLIBRARIES.write (((unsupported)).apply ("custom") ("template_tests.templatetags.custom") ("inclusion") ("template_tests.templatetags.inclusion"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_filter.write
                  [xself]
                    memory > xt
                    memory > xengine
                    seq > @
                      seq
                        xengine.write (((unsupported)).apply ((xEngine)) ((xLIBRARIES)))
                        xt.write ((((xengine).xfrom_string)).apply ("{% load custom %}{{ string|trim:5 }}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("string") ("abcdefghijklmnopqrstuvwxyz"))))))) ("abcde"))
                xtest_decorated_filter.write
                  [xself]
                    memory > xt
                    memory > xengine
                    seq > @
                      seq
                        xengine.write (((unsupported)).apply ((xEngine)) ((xLIBRARIES)))
                        xt.write ((((xengine).xfrom_string)).apply ("{% load custom %}{{ name|make_data_div }}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("name") ("foo"))))))) ("<div data-name=\"foo\"></div>"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xengine)) ((((unsupported)).apply ((xEngine)) (TRUE) ((xLIBRARIES)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                xverify_tag.write
                  [xself xtag xname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtag).x__name__)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtag).x__doc__)) (("Expected %s __doc__".mod (xname))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtag).x__dict__)) ("anything"))) (("Expected %s __dict__".mod (xname))))
            (((unsupported)).apply ((xTagTestCase)))
              seq
                xtest_simple_tags.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xtemplates
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("value") (42))))
                        xtemplates.write (((unsupported)).apply ((((unsupported)).apply ("{% load custom %}{% no_params %}") ("no_params - Expected result"))) ((((unsupported)).apply ("{% load custom %}{% one_param 37 %}") ("one_param - Expected result: 37"))) ((((unsupported)).apply ("{% load custom %}{% explicit_no_context 37 %}") ("explicit_no_context - Expected result: 37"))) ((((unsupported)).apply ("{% load custom %}{% no_params_with_context %}") ("no_params_with_context - Expected result (context value: 42)"))) ((((unsupported)).apply ("{% load custom %}{% params_and_context 37 %}") ("params_and_context - Expected result (context value: 42): 37"))) ((((unsupported)).apply ("{% load custom %}{% simple_two_params 37 42 %}") ("simple_two_params - Expected result: 37, 42"))) ((((unsupported)).apply ("{% load custom %}{% simple_keyword_only_param kwarg=37 %}") ("simple_keyword_only_param - Expected result: 37"))) ((((unsupported)).apply ("{% load custom %}{% simple_keyword_only_default %}") ("simple_keyword_only_default - Expected result: 42"))) ((((unsupported)).apply ("{% load custom %}{% simple_keyword_only_default kwarg=37 %}") ("simple_keyword_only_default - Expected result: 37"))) ((((unsupported)).apply ("{% load custom %}{% simple_one_default 37 %}") ("simple_one_default - Expected result: 37, hi"))) ((((unsupported)).apply ("{% load custom %}{% simple_one_default 37 two=\"hello\" %}") ("simple_one_default - Expected result: 37, hello"))) ((((unsupported)).apply ("{% load custom %}{% simple_one_default one=99 two=\"hello\" %}") ("simple_one_default - Expected result: 99, hello"))) ((((unsupported)).apply ("{% load custom %}{% simple_one_default 37 42 %}") ("simple_one_default - Expected result: 37, 42"))) ((((unsupported)).apply ("{% load custom %}{% simple_unlimited_args 37 %}") ("simple_unlimited_args - Expected result: 37, hi"))) ((((unsupported)).apply ("{% load custom %}{% simple_unlimited_args 37 42 56 89 %}") ("simple_unlimited_args - Expected result: 37, 42, 56, 89"))) ((((unsupported)).apply ("{% load custom %}{% simple_only_unlimited_args %}") ("simple_only_unlimited_args - Expected result: "))) ((((unsupported)).apply ("{% load custom %}{% simple_only_unlimited_args 37 42 56 89 %}") ("simple_only_unlimited_args - Expected result: 37, 42, 56, 89"))) ((((unsupported)).apply ("{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}") ("simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4"))))
                        (((unsupported)).apply ((xentry)) ((xtemplates)))
                          seq
                            xt.write (((((xself).xengine).xfrom_string)).apply ((((unsupported)).apply ((xentry)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ((((unsupported)).apply ((xentry)) (1))))
                        (((unsupported)).apply ((xentry)) ((xtemplates)))
                          seq
                            xt.write (((((xself).xengine).xfrom_string)).apply (("%s as var %%}Result: {{ var }}".mod (((unsupported)).apply ((((unsupported)).apply ((xentry)) (0))) ((((unsupported)).apply (0) ((2.neg))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) (("Result: %s".mod (((unsupported)).apply ((xentry)) (1)))))
                xtest_simple_tag_errors.write
                  [xself]
                    memory > xerrors
                    seq > @
                      seq
                        xerrors.write (((unsupported)).apply ((((unsupported)).apply ("'simple_one_default' received unexpected keyword argument 'three'") ("{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}"))) ((((unsupported)).apply ("'simple_two_params' received too many positional arguments") ("{% load custom %}{% simple_two_params 37 42 56 %}"))) ((((unsupported)).apply ("'simple_one_default' received too many positional arguments") ("{% load custom %}{% simple_one_default 37 42 56 %}"))) ((((unsupported)).apply ("'simple_keyword_only_param' did not receive value(s) for the argument(s): 'kwarg'") ("{% load custom %}{% simple_keyword_only_param %}"))) ((((unsupported)).apply ("'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'") ("{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}"))) ((((unsupported)).apply ("'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'") ("{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}"))) ((((unsupported)).apply ("'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)") ("{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}"))) ((((unsupported)).apply ("'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'") ("{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}"))))
                        (((unsupported)).apply ((xentry)) ((xerrors)))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((((unsupported)).apply ((xentry)) (0))))))
                            bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ((((unsupported)).apply ((xentry)) (1))))
                        (((unsupported)).apply ((xentry)) ((xerrors)))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((((unsupported)).apply ((xentry)) (0))))))
                            bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply (("%s as var %%}".mod (((unsupported)).apply ((((unsupported)).apply ((xentry)) (1))) ((((unsupported)).apply (0) ((2.neg))))))))
                xtest_simple_tag_escaping_autoescape_off.write
                  [xself]
                    memory > xt
                    memory > xc
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ((xContext)) ((((unsupported)).apply ("name") ("Jack & Jill"))) ((xfalse)))
                        xt.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% escape_naive %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ("Hello Jack & Jill!"))
                xtest_simple_tag_naive_escaping.write
                  [xself]
                    memory > xt
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("name") ("Jack & Jill"))))
                        xt.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% escape_naive %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ("Hello Jack &amp; Jill!"))
                xtest_simple_tag_explicit_escaping.write
                  [xself]
                    memory > xt
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("name") ("Jack & Jill"))))
                        xt.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% escape_explicit %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ("Hello Jack &amp; Jill!"))
                xtest_simple_tag_format_html_escaping.write
                  [xself]
                    memory > xt
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("name") ("Jack & Jill"))))
                        xt.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% escape_format_html %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ("Hello Jack &amp; Jill!"))
                xtest_simple_tag_registration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xno_params)) ("no_params"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xone_param)) ("one_param"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xexplicit_no_context)) ("explicit_no_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xno_params_with_context)) ("no_params_with_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xparams_and_context)) ("params_and_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xsimple_unlimited_args_kwargs)) ("simple_unlimited_args_kwargs"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xcustom).xsimple_tag_without_context_parameter)) ("simple_tag_without_context_parameter"))
                xtest_simple_tag_missing_context.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "'simple_tag_without_context_parameter' is decorated with takes_context=True so it must have a first argument of 'context'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% simple_tag_without_context_parameter 123 %}"))
                xtest_simple_tag_missing_context_no_params.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "'simple_tag_takes_context_without_params' is decorated with takes_context=True so it must have a first argument of 'context'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ("{% load custom %}{% simple_tag_takes_context_without_params %}"))
            (((unsupported)).apply ((xTagTestCase)))
              seq
                xtest_inclusion_tags.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xtemplates
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("value") (42))))
                        xtemplates.write (((unsupported)).apply ((((unsupported)).apply ("{% load inclusion %}{% inclusion_no_params %}") ("inclusion_no_params - Expected resultn"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_param 37 %}") ("inclusion_one_param - Expected result: 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_explicit_no_context 37 %}") ("inclusion_explicit_no_context - Expected result: 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_no_params_with_context %}") ("inclusion_no_params_with_context - Expected result (context value: 42)n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_params_and_context 37 %}") ("inclusion_params_and_context - Expected result (context value: 42): 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_two_params 37 42 %}") ("inclusion_two_params - Expected result: 37, 42n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default 37 %}") ("inclusion_one_default - Expected result: 37, hin"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default 37 two=\"hello\" %}") ("inclusion_one_default - Expected result: 37, hellon"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default one=99 two=\"hello\" %}") ("inclusion_one_default - Expected result: 99, hellon"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default 37 42 %}") ("inclusion_one_default - Expected result: 37, 42n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}") ("inclusion_keyword_only_default - Expected result: 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_unlimited_args 37 %}") ("inclusion_unlimited_args - Expected result: 37, hin"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_unlimited_args 37 42 56 89 %}") ("inclusion_unlimited_args - Expected result: 37, 42, 56, 89n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_only_unlimited_args %}") ("inclusion_only_unlimited_args - Expected result: n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_only_unlimited_args 37 42 56 89 %}") ("inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}") ("inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4n"))))
                        (((unsupported)).apply ((xentry)) ((xtemplates)))
                          seq
                            xt.write (((((xself).xengine).xfrom_string)).apply ((((unsupported)).apply ((xentry)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ((((unsupported)).apply ((xentry)) (1))))
                xtest_inclusion_tag_errors.write
                  [xself]
                    memory > xerrors
                    seq > @
                      seq
                        xerrors.write (((unsupported)).apply ((((unsupported)).apply ("'inclusion_one_default' received unexpected keyword argument 'three'") ("{% load inclusion %}{% inclusion_one_default 99 two=\"hello\" three=\"foo\" %}"))) ((((unsupported)).apply ("'inclusion_two_params' received too many positional arguments") ("{% load inclusion %}{% inclusion_two_params 37 42 56 %}"))) ((((unsupported)).apply ("'inclusion_one_default' received too many positional arguments") ("{% load inclusion %}{% inclusion_one_default 37 42 56 %}"))) ((((unsupported)).apply ("'inclusion_one_default' did not receive value(s) for the argument(s): 'one'") ("{% load inclusion %}{% inclusion_one_default %}"))) ((((unsupported)).apply ("'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'") ("{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}"))) ((((unsupported)).apply ("'inclusion_unlimited_args' did not receive value(s) for the argument(s): 'one'") ("{% load inclusion %}{% inclusion_unlimited_args %}"))) ((((unsupported)).apply ("'inclusion_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)") ("{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 eggs=\"boiled\" 56 four=1|add:3 %}"))) ((((unsupported)).apply ("'inclusion_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'") ("{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}"))))
                        (((unsupported)).apply ((xentry)) ((xerrors)))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((((unsupported)).apply ((xentry)) (0))))))
                            bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ((((unsupported)).apply ((xentry)) (1))))
                xtest_include_tag_missing_context.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "'inclusion_tag_without_context_parameter' is decorated with takes_context=True so it must have a first argument of 'context'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ("{% load inclusion %}{% inclusion_tag_without_context_parameter 123 %}"))
                xtest_include_tag_missing_context_no_params.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "'inclusion_tag_takes_context_without_params' is decorated with takes_context=True so it must have a first argument of 'context'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xfrom_string)).apply ("{% load inclusion %}{% inclusion_tag_takes_context_without_params %}"))
                xtest_inclusion_tags_from_template.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xtemplates
                    seq > @
                      seq
                        xc.write (((xContext)).apply ((((unsupported)).apply ("value") (42))))
                        xtemplates.write (((unsupported)).apply ((((unsupported)).apply ("{% load inclusion %}{% inclusion_no_params_from_template %}") ("inclusion_no_params_from_template - Expected resultn"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_param_from_template 37 %}") ("inclusion_one_param_from_template - Expected result: 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_explicit_no_context_from_template 37 %}") ("inclusion_explicit_no_context_from_template - Expected result: 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_no_params_with_context_from_template %}") ("inclusion_no_params_with_context_from_template - Expected result (context value: 42)n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_params_and_context_from_template 37 %}") ("inclusion_params_and_context_from_template - Expected result (context value: 42): 37n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_two_params_from_template 37 42 %}") ("inclusion_two_params_from_template - Expected result: 37, 42n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default_from_template 37 %}") ("inclusion_one_default_from_template - Expected result: 37, hin"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_one_default_from_template 37 42 %}") ("inclusion_one_default_from_template - Expected result: 37, 42n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_unlimited_args_from_template 37 %}") ("inclusion_unlimited_args_from_template - Expected result: 37, hin"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_unlimited_args_from_template 37 42 56 89 %}") ("inclusion_unlimited_args_from_template - Expected result: 37, 42, 56, 89n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_only_unlimited_args_from_template %}") ("inclusion_only_unlimited_args_from_template - Expected result: n"))) ((((unsupported)).apply ("{% load inclusion %}{% inclusion_only_unlimited_args_from_template 37 42 56 89 %}") ("inclusion_only_unlimited_args_from_template - Expected result: 37, 42, 56, 89n"))))
                        (((unsupported)).apply ((xentry)) ((xtemplates)))
                          seq
                            xt.write (((((xself).xengine).xfrom_string)).apply ((((unsupported)).apply ((xentry)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((xc)))) ((((unsupported)).apply ((xentry)) (1))))
                xtest_inclusion_tag_registration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_no_params)) ("inclusion_no_params"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_one_param)) ("inclusion_one_param"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_explicit_no_context)) ("inclusion_explicit_no_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_no_params_with_context)) ("inclusion_no_params_with_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_params_and_context)) ("inclusion_params_and_context"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_two_params)) ("inclusion_two_params"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_one_default)) ("inclusion_one_default"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_unlimited_args)) ("inclusion_unlimited_args"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_only_unlimited_args)) ("inclusion_only_unlimited_args"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_tag_without_context_parameter)) ("inclusion_tag_without_context_parameter"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_tag_use_l10n)) ("inclusion_tag_use_l10n"))
                        bogusForceDataize.write ((((xself).xverify_tag)).apply (((xinclusion).xinclusion_unlimited_args_kwargs)) ("inclusion_unlimited_args_kwargs"))
                xtest_15070_use_l10n.write
                  [xself]
                    memory > xt
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xc.write (((xContext)).apply ((((unsupported)).apply)))
                        xt.write (((((xself).xengine).xfrom_string)).apply ("{% load inclusion %}{% inclusion_tag_use_l10n %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xt).xrender)).apply ((xc))).xstrip)).apply)) ("None"))
                        (((unsupported)).apply (((xc).xuse_l10n)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xt).xrender)).apply ((xc))).xstrip)).apply)) ("True"))
                xtest_no_render_side_effect.write
                  [xself]
                    memory > xtemplate
                    memory > xcount
                    memory > xengine
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xengine.write (((unsupported)).apply ((xEngine)) (TRUE) ((xLIBRARIES)))
                        xtemplate.write ((((xengine).xfrom_string)).apply ("{% load inclusion %}{% inclusion_no_params %}"))
                        xcount.write (((((xtemplate).xnodelist).xget_nodes_by_type)).apply ((xNode)))
                        bogusForceDataize.write ((((xtemplate).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtemplate).xnodelist).xget_nodes_by_type)).apply ((xNode)))) ((xcount)))
                xtest_render_context_is_cleared.write
                  [xself]
                    memory > xtemplate
                    memory > xengine
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xengine.write (((unsupported)).apply ((xEngine)) (TRUE) ((xLIBRARIES)))
                        xtemplate.write ((((xengine).xfrom_string)).apply ("{% load inclusion %}{% inclusion_extends1 %}{% inclusion_extends2 %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xtemplate).xrender)).apply ((((xContext)).apply ((((unsupported)).apply))))).xstrip)).apply)) ("onentwo"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xegg_dir)) ((((((xos).xpath).xjoin)).apply ((xROOT)) ("eggs"))))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                xtest_load_error.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Invalid template library specified. ImportError raised when trying to load 'template_tests.broken_tag': cannot import name 'Xtemplate'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInvalidTemplateLibrary)) ((xmsg)))))
                          (((unsupported)).apply ((xEngine)) ((((unsupported)).apply ("broken_tag") ("template_tests.broken_tag"))))
                xtest_load_error_egg.write
                  [xself]
                    memory > xmsg
                    memory > xegg_name
                    seq > @
                      seq
                        xegg_name.write ("%s/tagsegg.egg".mod ((xself).xegg_dir))
                        xmsg.write "Invalid template library specified. ImportError raised when trying to load 'tagsegg.templatetags.broken_egg': cannot import name 'Xtemplate'"
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((xegg_name)))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInvalidTemplateLibrary)) ((xmsg)))))
                            (((unsupported)).apply ((xEngine)) ((((unsupported)).apply ("broken_egg") ("tagsegg.templatetags.broken_egg"))))
                xtest_load_working_egg.write
                  [xself]
                    memory > xegg_name
                    memory > xengine
                    memory > xttext
                    seq > @
                      seq
                        xttext.write "{% load working_egg %}"
                        xegg_name.write ("%s/tagsegg.egg".mod ((xself).xegg_dir))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((xegg_name)))))
                          seq
                            xengine.write (((unsupported)).apply ((xEngine)) ((((unsupported)).apply ("working_egg") ("tagsegg.templatetags.working_egg"))))
                            bogusForceDataize.write ((((xengine).xfrom_string)).apply ((xttext)))
                xtest_load_annotated_function.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xEngine)) ((((unsupported)).apply ("annotated_tag_function") ("template_tests.annotated_tag_function"))))