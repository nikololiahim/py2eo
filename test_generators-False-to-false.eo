memory > xValueError
memory > xg
memory > xip1
memory > xrange
memory > x_exc
memory > xweakref
memory > xtest_generators
memory > xcm
memory > xinspect
memory > xcopy
memory > xfalse
memory > xj1
memory > xImportError
memory > xframe
memory > xpickle
memory > xrow2col
memory > xRuntimeError
memory > xKeyboardInterrupt
memory > xdelattr
memory > xio
memory > xstr
memory > xjo
memory > xdivmod
memory > xStopIteration
memory > xi1
memory > xproto
memory > xprint
memory > xtype
memory > xException
memory > xhasattr
memory > xx
memory > xip2
memory > xi
memory > xsupport
memory > xsys
memory > xm
memory > xBaseException
memory > xgc
memory > xg2
memory > xsetattr
memory > xunittest
memory > xexc
memory > xnext
memory > xn
memory > xip3
memory > xj
memory > xlen
memory > xgen_fun
memory > xg1
memory > xTypeError
memory > x__name__
[] > test_generators
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_except_throw_exception_context
        memory > xsolve
        memory > xindex2coords
        memory > xtest_except_gen_except
        memory > x_testcapi
        memory > xconjoin_tests
        memory > xtest_return_tuple
        memory > xcoroutine_tests
        memory > x__init__
        memory > xtest_except_throw
        memory > x__test__
        memory > xcoords2index
        memory > xtest_pickle
        memory > xgenerator1
        memory > xtest_generator_gi_yieldfrom
        memory > xtest_stopiteration_error
        memory > xtest_except_next
        memory > xtutorial_tests
        memory > xtest_tutorial_stopiteration
        memory > xprintsolution
        memory > xtest_main
        memory > xsyntax_tests
        memory > xtest_refcycle
        memory > xsimple_conjoin
        memory > xtest_raise_and_yield_from
        memory > x_init_board
        memory > xtest_name
        memory > xpep_tests
        memory > xfun_tests
        memory > xtest_copy
        memory > xrefleaks_tests
        memory > xtest_lambda_generator
        memory > xgenerator2
        memory > xweakref_tests
        memory > xemail_tests
        memory > xflat_conjoin
        memory > xtest_return_stopiteration
        memory > xconjoin
        memory > xtest_frame_resurrect
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_testcapi.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply (((((unsupported)).apply ((x_testcapi)) ("None: is there a None literal in the EO language?")).and (((xhasattr)).apply ((x_testcapi)) ("raise_SIGINT_then_send_None")))) ("needs _testcapi.raise_SIGINT_then_send_None"))))
              seq
                xgenerator1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((((xself).xgenerator2)).apply)))))
                xgenerator2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xKeyboardInterrupt)))
                        (((unsupported)).apply)
                        (((unsupported)).apply ("PASSED"))
                        (((unsupported)).apply ("FAILED"))
                xtest_raise_and_yield_from.write
                  [xself]
                    memory > xgen
                    memory > xexc
                    seq > @
                      seq
                        xgen.write ((((xself).xgenerator1)).apply)
                        bogusForceDataize.write ((((xgen).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xBaseException)))
                          bogusForceDataize.write ((((x_testcapi).xraise_SIGINT_then_send_None)).apply ((xgen)))
                          xexc.write (x_exc)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xexc)))) ((xStopIteration)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xvalue)) ("PASSED"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_frame_resurrect.write
                  [xself]
                    memory > xgen
                    memory > xwr
                    memory > xg
                    seq > @
                      seq
                        xgen.write
                          []
                            memory > xframe
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  xframe.write ((((xsys).x_getframe)).apply)
                        xg.write (((xgen)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xg)))
                        bogusForceDataize.write (((xnext)).apply ((xg)))
                        (((unsupported)).apply ((((unsupported)).apply ((xg)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xframe)))
                        (((unsupported)).apply ((((unsupported)).apply ((xframe)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                xtest_refcycle.write
                  [xself]
                    memory > xold_garbage
                    memory > xfinalized
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xold_garbage.write (((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))
                        xfinalized.write (xfalse)
                        xgen.write
                          []
                            memory > xfinalized
                            memory > xg
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                                  seq
                                    xg.write (((unsupported)).apply)
                                    (((unsupported)).apply (1))
                                  xfinalized.write TRUE
                        xg.write (((xgen)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xg)))
                        bogusForceDataize.write ((((xg).xsend)).apply ((xg)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((xsys).xgetrefcount)).apply ((xg)))) (2))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((xfinalized)))
                        (((unsupported)).apply ((((unsupported)).apply ((xg)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xfinalized)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgc).xgarbage)) ((xold_garbage)))
                xtest_lambda_generator.write
                  [xself]
                    memory > xf3
                    memory > xg
                    memory > xg3
                    memory > xf2
                    memory > xf
                    memory > xg2
                    memory > xgen
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((((unsupported)).apply (1))))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (1))))
                        xf2.write (((unsupported)).apply ((((unsupported)).apply ((((xg)).apply)))))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((xg)).apply)))))
                        xf3.write (((unsupported)).apply ((((unsupported)).apply ((((xf)).apply)))))
                        xg3.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((xf)).apply)))))
                        (((unsupported)).apply ((xgen_fun)) ((((unsupported)).apply ((xf)) ((xg)) ((xf2)) ((xg2)) ((xf3)) ((xg3)))))
                          seq
                            xgen.write (((xgen_fun)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xgen)))) (1))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))) ((xcm)))
                              bogusForceDataize.write ((((xgen).xsend)).apply (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xvalue)) (2))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_name.write
                  [xself]
                    memory > xgen
                    memory > xfunc
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xgen.write (((xfunc)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__name__)) ("func"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__qualname__)) ("GeneratorTest.test_name.<locals>.func"))
                        (((unsupported)).apply (((xgen).x__name__)) ("name"))
                        (((unsupported)).apply (((xgen).x__qualname__)) ("qualname"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__name__)) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__qualname__)) ("qualname"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetattr)) ((xgen)) ("__name__") (123))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetattr)) ((xgen)) ("__qualname__") (123))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdelattr)) ((xgen)) ("__name__"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdelattr)) ((xgen)) ("__qualname__"))
                        (((unsupported)).apply (((xfunc).x__qualname__)) ("func_qualname"))
                        (((unsupported)).apply (((xfunc).x__name__)) ("func_name"))
                        xgen.write (((xfunc)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__name__)) ("func_name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__qualname__)) ("func_qualname"))
                        xgen.write (((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__name__)) ("<genexpr>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgen).x__qualname__)) ("GeneratorTest.test_name.<locals>.<genexpr>"))
                xtest_copy.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xg.write (((xf)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xcopy).xcopy)).apply ((xg)))
                xtest_pickle.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xg.write (((xf)).apply)
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xpickle).xPicklingError)))))))
                            bogusForceDataize.write ((((xpickle).xdumps)).apply ((xg)) ((xproto)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_except_throw.write
                  [xself]
                    memory > xmake
                    memory > xstore_raise_exc_generator
                    seq > @
                      seq
                        xstore_raise_exc_generator.write
                          []
                            seq > @
                              (((unsupported)).apply ((xException)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ("None: is there a None literal in the EO language?"))
                                  (((unsupported)).apply)
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                  bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xexc).x__context__)))
                                  (((unsupported)).apply)
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                  (((unsupported)).apply)
                                  (((unsupported)).apply)
                        xmake.write (((xstore_raise_exc_generator)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xmake)))
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((((xValueError)).apply)))
                          (((unsupported)).apply ((xException)))
                            bogusForceDataize.write ((((xmake).xthrow)).apply ((xexc)))
                        bogusForceDataize.write (((xnext)).apply ((xmake)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write (((xnext)).apply ((xmake)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xcm).xexception).x__context__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_except_next.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                (((unsupported)).apply ("done"))
                        xg.write (((xgen)).apply)
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ("done"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_except_gen_except.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xTypeError)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((((xTypeError)).apply)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xTypeError)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xexc).x__context__)))) ((xValueError)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                                (((unsupported)).apply ("done"))
                        xg.write (((xgen)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xg)))
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write (((xnext)).apply ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ("done"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_except_throw_exception_context.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((xValueError)))
                                    seq
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ("None: is there a None literal in the EO language?"))
                                      (((unsupported)).apply)
                                    seq
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                      (((unsupported)).apply ((((xTypeError)).apply)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xTypeError)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xexc).x__context__)))) ((xValueError)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xValueError)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                                (((unsupported)).apply ("done"))
                        xg.write (((xgen)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xg)))
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xg).xthrow)).apply ((xexc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ("done"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_stopiteration_error.write
                  [xself]
                    memory > xgen
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xStopIteration)))
                                (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("raised StopIteration"))))
                          bogusForceDataize.write (((xnext)).apply ((((xgen)).apply)))
                xtest_tutorial_stopiteration.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply (1))
                                (((unsupported)).apply ((xStopIteration)))
                                (((unsupported)).apply (2))
                        xg.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("raised StopIteration"))))
                          bogusForceDataize.write (((xnext)).apply ((xg)))
                xtest_return_tuple.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (1))))
                        xgen.write (((xg)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xgen)))) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))) ((xcm)))
                          bogusForceDataize.write ((((xgen).xsend)).apply ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xvalue)) ((((unsupported)).apply (2))))
                xtest_return_stopiteration.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (1))))
                        xgen.write (((xg)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xgen)))) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))) ((xcm)))
                          bogusForceDataize.write ((((xgen).xsend)).apply ((((xStopIteration)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xcm).xexception).xvalue)) ((xStopIteration)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcm).xexception).xvalue).xvalue)) (2))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_generator_gi_yieldfrom.write
                [xself]
                  memory > xb
                  memory > xa
                  memory > xgen_b
                  seq > @
                    seq
                      xa.write
                        []
                          seq > @
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_RUNNING)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                              (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_RUNNING)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                      xb.write
                        []
                          seq > @
                            seq
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                              (((unsupported)).apply ((((xa)).apply)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                              (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                      xgen_b.write (((xb)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_CREATED)))
                      bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                      bogusForceDataize.write ((((xgen_b).xsend)).apply ("None: is there a None literal in the EO language?"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_SUSPENDED)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgen_b).xgi_yieldfrom).xgi_code).xco_name)) ("a"))
                      bogusForceDataize.write ((((xgen_b).xsend)).apply ("None: is there a None literal in the EO language?"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_SUSPENDED)))
                      bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
                      (((unsupported)).apply ((((unsupported)).apply)) ((xgen_b)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetgeneratorstate)).apply ((xgen_b)))) (((xinspect).xGEN_CLOSED)))
                      bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xgen_b).xgi_yieldfrom)))
            xtutorial_tests.write (((unsupported)).apply)
            xpep_tests.write (((unsupported)).apply)
            xemail_tests.write (((unsupported)).apply)
            xfun_tests.write (((unsupported)).apply)
            xsyntax_tests.write (((unsupported)).apply)
            xsimple_conjoin.write
              [xgs]
                memory > xgen
                memory > xvalues
                seq > @
                  seq
                    xvalues.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (((xlen)).apply ((xgs))))
                    xgen.write
                      [xi]
                        seq > @
                          ((xi).geq (((xlen)).apply ((xgs)))).if
                            (((unsupported)).apply ((xvalues)))
                            (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((((unsupported)).apply ((xgs)) ((xi)))).apply)))
                              (((unsupported)).apply ((xx)) ((((xgen)).apply (((xi).add 1)))))
                                (((unsupported)).apply ((xx)))
                    (((unsupported)).apply ((xx)) ((((xgen)).apply (0))))
                      (((unsupported)).apply ((xx)))
            xconjoin.write
              [xgs]
                memory > xn
                memory > xgen
                memory > x_gen3
                memory > xvalues
                seq > @
                  seq
                    xn.write (((xlen)).apply ((xgs)))
                    xvalues.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xn))
                    xgen.write
                      [xi]
                        memory > xip1
                        seq > @
                          ((xi).geq (xn)).if
                            (((unsupported)).apply ((xvalues)))
                            (((xn).sub (xi)).mod 3).if
                              seq
                                xip1.write ((xi).add 1)
                                (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((((unsupported)).apply ((xgs)) ((xi)))).apply)))
                                  (((unsupported)).apply ((xx)) ((((xgen)).apply ((xip1)))))
                                    (((unsupported)).apply ((xx)))
                              (((unsupported)).apply ((xx)) ((((x_gen3)).apply ((xi)))))
                                (((unsupported)).apply ((xx)))
                    x_gen3.write
                      [xi]
                        seq > @
                          seq
                            (((unsupported)).apply ((((xi).less (xn)).and ((((xn).sub (xi)).mod 3).eq 0))))
                            (((unsupported)).apply ((((unsupported)).apply ((xip1)) ((xip2)) ((xip3)))) ((((unsupported)).apply (((xi).add 1)) (((xi).add 2)) (((xi).add 3)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xg)) ((xg1)) ((xg2)))) ((((unsupported)).apply ((xgs)) ((((unsupported)).apply ((xi)) ((xip3)))))))
                            ((xip3).geq (xn)).if
                              (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((xg)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xip1)))) ((((xg1)).apply)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xip2)))) ((((xg2)).apply)))
                                    (((unsupported)).apply ((xvalues)))
                              (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((xg)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xip1)))) ((((xg1)).apply)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xip2)))) ((((xg2)).apply)))
                                    (((unsupported)).apply ((xx)) ((((x_gen3)).apply ((xip3)))))
                                      (((unsupported)).apply ((xx)))
                    (((unsupported)).apply ((xx)) ((((xgen)).apply (0))))
                      (((unsupported)).apply ((xx)))
            xflat_conjoin.write
              [xgs]
                memory > xiters
                memory > xvalues
                memory > x_StopIteration
                memory > xit
                memory > xi
                memory > xn
                seq > @
                  seq
                    xn.write (((xlen)).apply ((xgs)))
                    xvalues.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xn))
                    xiters.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xn))
                    x_StopIteration.write (xStopIteration)
                    xi.write 0
                    while.
                      1
                      [unused]
                        seq > @
                          seq
                            (((unsupported)).apply ((x_StopIteration)))
                              while.
                                ((xi).less (xn))
                                [unused]
                                  seq > @
                                    seq
                                      (((unsupported)).apply ((xit)) ((((unsupported)).apply ((xiters)) ((xi)))) (((((((unsupported)).apply ((xgs)) ((xi)))).apply).x__next__)))
                                      (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((xit)).apply)))
                                      (((unsupported)).apply ((xi)) (1))
                              seq
                                (((unsupported)).apply (((xi).eq (xn))))
                                (((unsupported)).apply ((xvalues)))
                            (((unsupported)).apply ((xi)) (1))
                            (((unsupported)).apply (((xi).geq 0)))
                              (((unsupported)).apply ((x_StopIteration)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xi)))) ((((((unsupported)).apply ((xiters)) ((xi)))).apply)))
                                  (((unsupported)).apply ((xi)) (1))
                                  (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) (1))
                              seq
                                (((unsupported)).apply (((xi).less 0)))
                                (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xn]
                    memory > xrowuses
                    memory > xrowgen
                    memory > xrangen
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xn)) ((xn)))
                        xrangen.write (((xrange)).apply ((xn)))
                        (((unsupported)).apply (((xself).xrowgenerators)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((xrangen)))
                          seq
                            xrowuses.write (((unsupported)).apply ((((((unsupported)).apply (1) ((xj))).or (((unsupported)).apply (1) ((((((xn).add (xi)).sub (xj)).add (xn)).sub 1)))).or (((unsupported)).apply (1) ((((((xn).add (2.mul (xn))).sub 1).add (xi)).add (xj)))))) ((xj)) ((xrangen)))
                            xrowgen.write
                              [xrowuses]
                                memory > xuses
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xj)) ((xrangen)))
                                      seq
                                        xuses.write (((unsupported)).apply ((xrowuses)) ((xj)))
                                        (((xuses).and ((xself).xused)).eq 0).if
                                          seq
                                            (((unsupported)).apply (((xself).xused)) ((xuses)))
                                            (((unsupported)).apply ((xj)))
                                            (((unsupported)).apply (((xself).xused)) (((xuses).neg)))
                            bogusForceDataize.write (((((xself).xrowgenerators).xappend)).apply ((xrowgen)))
                xsolve.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xused)) (0))
                        (((unsupported)).apply ((xrow2col)) ((((xconjoin)).apply (((xself).xrowgenerators)))))
                          (((unsupported)).apply ((xrow2col)))
                xprintsolution.write
                  [xself xrow2col]
                    memory > xn
                    memory > xsep
                    memory > xsquares
                    seq > @
                      seq
                        xn.write ((xself).xn)
                        (((unsupported)).apply (((xn).eq (((xlen)).apply ((xrow2col))))))
                        xsep.write ("+".add ("-+".mul (xn)))
                        bogusForceDataize.write (((xprint)).apply ((xsep)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          seq
                            xsquares.write (((unsupported)).apply (" ") ((xj)) ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xsquares)) ((((unsupported)).apply ((xrow2col)) ((xi)))))) ("Q"))
                            bogusForceDataize.write (((xprint)).apply ((("|".add ((("|".xjoin)).apply ((xsquares)))).add "|")))
                            bogusForceDataize.write (((xprint)).apply ((xsep)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xm xn xhard]
                    memory > xsecond
                    memory > xadvance_hard
                    memory > xremove_from_successors
                    memory > xlast
                    memory > xsuccs
                    memory > xfirst
                    memory > xadd_to_successors
                    memory > xadvance
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xm)) (((xself).xn)))) ((((unsupported)).apply ((xm)) ((xn)))))
                        (((unsupported)).apply ((xsuccs)) (((xself).xsuccs)) ((((unsupported)).apply)))
                        xremove_from_successors.write
                          [xi0 xlen]
                            memory > xe
                            memory > xs
                            memory > xne0
                            memory > xne1
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xne0)) ((xne1)) (0))
                                (((unsupported)).apply ((xi)) ((((unsupported)).apply ((xsuccs)) ((xi0)))))
                                  seq
                                    xs.write (((unsupported)).apply ((xsuccs)) ((xi)))
                                    bogusForceDataize.write ((((xs).xremove)).apply ((xi0)))
                                    xe.write (((xlen)).apply ((xs)))
                                    ((xe).eq 0).if
                                      (((unsupported)).apply ((xne0)) (1))
                                      ((xe).eq 1).if
                                        (((unsupported)).apply ((xne1)) (1))
                                (((unsupported)).apply ((((xne0).eq 0).and ((xne1).less 2))))
                        xadd_to_successors.write
                          [xi0]
                            seq > @
                              (((unsupported)).apply ((xi)) ((((unsupported)).apply ((xsuccs)) ((xi0)))))
                                bogusForceDataize.write ((((((unsupported)).apply ((xsuccs)) ((xi))).xappend)).apply ((xi0)))
                        xfirst.write
                          []
                            memory > xcorner
                            seq > @
                              seq
                                (((xm).less 1).or ((xn).less 1)).if
                                  (((unsupported)).apply)
                                xcorner.write ((((xself).xcoords2index)).apply (0) (0))
                                bogusForceDataize.write (((xremove_from_successors)).apply ((xcorner)))
                                (((unsupported)).apply (((xself).xlastij)) ((xcorner)))
                                (((unsupported)).apply ((xcorner)))
                                bogusForceDataize.write (((xadd_to_successors)).apply ((xcorner)))
                        xsecond.write
                          []
                            memory > xthis
                            memory > xcorner
                            memory > xfinal
                            seq > @
                              seq
                                xcorner.write ((((xself).xcoords2index)).apply (0) (0))
                                (((unsupported)).apply ((((xself).xlastij).eq (xcorner))))
                                (((xm).less 3).or ((xn).less 3)).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply (((((xlen)).apply ((((unsupported)).apply ((xsuccs)) ((xcorner))))).eq 2)))
                                (((unsupported)).apply ((((unsupported)).apply (((((xself).xcoords2index)).apply (1) (2))) ((((unsupported)).apply ((xsuccs)) ((xcorner)))))))
                                (((unsupported)).apply ((((unsupported)).apply (((((xself).xcoords2index)).apply (2) (1))) ((((unsupported)).apply ((xsuccs)) ((xcorner)))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (1))))))
                                  seq
                                    xthis.write ((((xself).xcoords2index)).apply ((xi)) ((xj)))
                                    xfinal.write ((((xself).xcoords2index)).apply ((3.sub (xi))) ((3.sub (xj))))
                                    (((unsupported)).apply (((xself).xfinal)) ((xfinal)))
                                    bogusForceDataize.write (((xremove_from_successors)).apply ((xthis)))
                                    bogusForceDataize.write ((((((unsupported)).apply ((xsuccs)) ((xfinal))).xappend)).apply ((xcorner)))
                                    (((unsupported)).apply (((xself).xlastij)) ((xthis)))
                                    (((unsupported)).apply ((xthis)))
                                    bogusForceDataize.write ((((((unsupported)).apply ((xsuccs)) ((xfinal))).xremove)).apply ((xcorner)))
                                    bogusForceDataize.write (((xadd_to_successors)).apply ((xthis)))
                        xadvance.write
                          [xlen]
                            memory > xe
                            memory > xcandidates
                            seq > @
                              (((unsupported)).apply)
                                xcandidates.write (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((unsupported)).apply ((xsuccs)) (((xself).xlastij)))))
                                  seq
                                    xe.write (((xlen)).apply ((((unsupported)).apply ((xsuccs)) ((xi)))))
                                    (((unsupported)).apply (((xe).greater 0)) ("else remove_from_successors() pruning flawed"))
                                    ((xe).eq 1).if
                                      seq
                                        xcandidates.write (((unsupported)).apply ((((unsupported)).apply ((xe)) ((xi)))))
                                        (((unsupported)).apply)
                                    bogusForceDataize.write ((((xcandidates).xappend)).apply ((((unsupported)).apply ((xe)) ((xi)))))
                                  bogusForceDataize.write ((((xcandidates).xsort)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xe)) ((xi)))) ((xcandidates)))
                                  ((xi).neq ((xself).xfinal)).if
                                    seq
                                      (((xremove_from_successors)).apply ((xi))).if
                                        seq
                                          (((unsupported)).apply (((xself).xlastij)) ((xi)))
                                          (((unsupported)).apply ((xi)))
                                      bogusForceDataize.write (((xadd_to_successors)).apply ((xi)))
                        xadvance_hard.write
                          [xvmid xhmid xlen]
                            memory > xcandidates
                            memory > xd
                            memory > xe
                            seq > @
                              (((unsupported)).apply)
                                xcandidates.write (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((unsupported)).apply ((xsuccs)) (((xself).xlastij)))))
                                  seq
                                    xe.write (((xlen)).apply ((((unsupported)).apply ((xsuccs)) ((xi)))))
                                    (((unsupported)).apply (((xe).greater 0)) ("else remove_from_successors() pruning flawed"))
                                    ((xe).eq 1).if
                                      seq
                                        xcandidates.write (((unsupported)).apply ((((unsupported)).apply ((xe)) (0) ((xi)))))
                                        (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xi1)) ((xj1)))) (((((xself).xindex2coords)).apply ((xi)))))
                                    xd.write ((((unsupported)).apply (((xi1).sub (xvmid))) (2)).add (((unsupported)).apply (((xj1).sub (xhmid))) (2)))
                                    bogusForceDataize.write ((((xcandidates).xappend)).apply ((((unsupported)).apply ((xe)) (((xd).neg)) ((xi)))))
                                  bogusForceDataize.write ((((xcandidates).xsort)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xe)) ((xd)) ((xi)))) ((xcandidates)))
                                  ((xi).neq ((xself).xfinal)).if
                                    seq
                                      (((xremove_from_successors)).apply ((xi))).if
                                        seq
                                          (((unsupported)).apply (((xself).xlastij)) ((xi)))
                                          (((unsupported)).apply ((xi)))
                                      bogusForceDataize.write (((xadd_to_successors)).apply ((xi)))
                        xlast.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xfinal)) ((((unsupported)).apply ((xsuccs)) (((xself).xlastij)))))))
                                (((unsupported)).apply (((xself).xfinal)))
                        (((xm).mul (xn)).less 4).if
                          (((unsupported)).apply (((xself).xsquaregenerators)) ((((unsupported)).apply ((xfirst)))))
                          (((unsupported)).apply (((xself).xsquaregenerators)) ((((((unsupported)).apply ((xfirst)) ((xsecond))).add ((((unsupported)).apply ((((xhard).and (xadvance_hard)).or (xadvance)))).mul (((xm).mul (xn)).sub 3))).add (((unsupported)).apply ((xlast))))))
                xcoords2index.write
                  [xself xi xj]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (0) ((xi)) (((xself).xm)))))
                        (((unsupported)).apply ((((unsupported)).apply (0) ((xj)) (((xself).xn)))))
                        (((unsupported)).apply ((((xi).mul ((xself).xn)).add (xj))))
                xindex2coords.write
                  [xself xindex]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (0) ((xindex)) ((((xself).xm).mul ((xself).xn))))))
                        (((unsupported)).apply ((((xdivmod)).apply ((xindex)) (((xself).xn)))))
                x_init_board.write
                  [xself]
                    memory > xoffsets
                    memory > xrangen
                    memory > xc2i
                    memory > xs
                    memory > xsuccs
                    seq > @
                      seq
                        xsuccs.write ((xself).xsuccs)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsuccs)) ((((unsupported)).apply)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xn)))) ((((unsupported)).apply (((xself).xm)) (((xself).xn)))))
                        xc2i.write ((xself).xcoords2index)
                        xoffsets.write (((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (1))) ((((unsupported)).apply (2) ((1.neg)))) ((((unsupported)).apply (1) ((2.neg)))) ((((unsupported)).apply ((1.neg)) ((2.neg)))) ((((unsupported)).apply ((2.neg)) ((1.neg)))) ((((unsupported)).apply ((2.neg)) (1))) ((((unsupported)).apply ((1.neg)) (2))))
                        xrangen.write (((xrange)).apply ((xn)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xm)))))
                          (((unsupported)).apply ((xj)) ((xrangen)))
                            seq
                              xs.write (((unsupported)).apply ((((xc2i)).apply (((xi).add (xio))) (((xj).add (xjo))))) ((((unsupported)).apply ((xio)) ((xjo)))) ((xoffsets)) (((((unsupported)).apply (0) (((xi).add (xio))) ((xm))).and (((unsupported)).apply (0) (((xj).add (xjo))) ((xn))))))
                              bogusForceDataize.write ((((xsuccs).xappend)).apply ((xs)))
                xsolve.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_init_board)).apply)
                        (((unsupported)).apply ((xx)) ((((xconjoin)).apply (((xself).xsquaregenerators)))))
                          (((unsupported)).apply ((xx)))
                xprintsolution.write
                  [xself xx]
                    memory > xk
                    memory > xsquares
                    memory > xw
                    memory > xrow
                    memory > xformat
                    memory > xsep
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xn)))) ((((unsupported)).apply (((xself).xm)) (((xself).xn)))))
                        (((unsupported)).apply (((((xlen)).apply ((xx))).eq ((xm).mul (xn)))))
                        xw.write (((xlen)).apply ((((xstr)).apply (((xm).mul (xn))))))
                        xformat.write (("%".add (((xstr)).apply ((xw)))).add "d")
                        xsquares.write (((unsupported)).apply (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xn))) ((xi)) ((((xrange)).apply ((xm)))))
                        xk.write 1
                        (((unsupported)).apply ((xi)) ((xx)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xi1)) ((xj1)))) (((((xself).xindex2coords)).apply ((xi)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsquares)) ((xi1)))) ((xj1)))) (((xformat).mod (xk))))
                            (((unsupported)).apply ((xk)) (1))
                        xsep.write ("+".add ((("-".mul (xw)).add "+").mul (xn)))
                        bogusForceDataize.write (((xprint)).apply ((xsep)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xm)))))
                          seq
                            xrow.write (((unsupported)).apply ((xsquares)) ((xi)))
                            bogusForceDataize.write (((xprint)).apply ((("|".add ((("|".xjoin)).apply ((xrow)))).add "|")))
                            bogusForceDataize.write (((xprint)).apply ((xsep)))
            xconjoin_tests.write (((unsupported)).apply)
            xweakref_tests.write (((unsupported)).apply)
            xcoroutine_tests.write (((unsupported)).apply)
            xrefleaks_tests.write (((unsupported)).apply)
            x__test__.write (((unsupported)).apply ("tut") ((xtutorial_tests)) ("pep") ((xpep_tests)) ("email") ((xemail_tests)) ("fun") ((xfun_tests)) ("syntax") ((xsyntax_tests)) ("conjoin") ((xconjoin_tests)) ("weakref") ((xweakref_tests)) ("coroutine") ((xcoroutine_tests)) ("refleaks") ((xrefleaks_tests)))
            xtest_main.write
              [xverbose]
                seq > @
                  (((unsupported)).apply)
                    seq
                      (((unsupported)).apply)
                      (((unsupported)).apply)
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((x__name__)))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((xtest_generators)) ((xverbose)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply (1))