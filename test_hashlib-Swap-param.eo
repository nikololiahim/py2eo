memory > xValueError
memory > xrounds
memory > xdklen
memory > xi
memory > xgetattr
memory > xresults
memory > xkwargs
memory > ximport_fresh_module
memory > xthreading
memory > xarray
memory > xoverwrite_dklen
memory > x_algo
memory > xvector
memory > xImportError
memory > xexpected
memory > xHTTPException
memory > x_md5
memory > xmaxmem
memory > xlength
memory > xenumerate
memory > xlocals
memory > ximportlib
memory > xModuleNotFoundError
memory > xstr
memory > xerror
memory > xwarnings
memory > xsalt
memory > xHashLibTestCase
memory > xc_hashlib
memory > xrange
memory > xpassword
memory > xbytearray
memory > xcons
memory > xmsg
memory > xunhexlify
memory > xdigest_name
memory > xp
memory > xdigest
memory > xhash_object_constructor
memory > xmd
memory > xset
memory > xrepr
memory > xr
memory > xhasattr
memory > xOverflowError
memory > xthreadnum
memory > xalgorithm
memory > xsuper
memory > xsupport
memory > xsys
memory > xbytes
memory > xoutlen
memory > xconstructors
memory > xsorted
memory > xargs
memory > xOSError
memory > xitertools
memory > xos
memory > xhashlib
memory > xunittest
memory > xinlen
memory > xn
memory > xmemoryview
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_hashlib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_case_sha224_2
        memory > x_test_pbkdf2_hmac
        memory > xtest_extra_sha3
        memory > xtest_case_shake128_vector
        memory > xtest_hexdigest
        memory > xtest_blake2b_vectors
        memory > xtest_case_blake2s_1
        memory > xtest_case_sha3_256_vector
        memory > xtest_case_sha384_3
        memory > xtest_algorithms_guaranteed
        memory > xtest_case_sha512_0
        memory > xtest_no_unicode
        memory > xpbkdf2_results
        memory > xtest_blake2s
        memory > xtest_case_shake256_vector
        memory > xtest_case_blake2b_1
        memory > xtest_case_sha1_2
        memory > xtest_case_sha256_3
        memory > xread_vectors
        memory > xtest_case_md5_uintmax
        memory > xtest_gil
        memory > xpbkdf2_test_vectors
        memory > xtest_name_attribute
        memory > xtest_case_sha3_224_0
        memory > xhash_constructors
        memory > xcheck
        memory > xtest_hash_array
        memory > x_conditional_import_module
        memory > xtest_unknown_hash
        memory > xtest_blake2s_vectors
        memory > xtest_case_shake_128_0
        memory > xtest_case_sha384_2
        memory > xtest_pbkdf2_hmac_c
        memory > xpy_hashlib
        memory > xtest_case_sha256_1
        memory > xtest_case_blake2s_0
        memory > xtest_case_sha384_0
        memory > xtest_case_md5_0
        memory > xtest_case_sha224_1
        memory > xcheck_sha3
        memory > xtest_case_blake2b_0
        memory > xtest_case_sha1_0
        memory > xtest_case_sha3_384_vector
        memory > xtest_large_update
        memory > xtest_normalized_name
        memory > xtest_case_sha512_1
        memory > xcheck_blake2
        memory > xtest_case_sha256_2
        memory > x_sha3
        memory > xURL
        memory > xtest_case_md5_1
        memory > xshakes
        memory > x_blake2
        memory > xtest_case_sha384_1
        memory > xtest_scrypt
        memory > xtest_blocksize_name_blake2
        memory > xtest_new_upper_to_lower
        memory > x_warn_on_extension_import
        memory > xtest_digest_length_overflow
        memory > xtest_case_sha1_1
        memory > xtest_case_sha256_0
        memory > xtest_case_shake_256_0
        memory > xHASH
        memory > xtest_case_md5_huge
        memory > xtest_case_sha3_256_0
        memory > xblake2_rfc7693
        memory > xtest_case_blake2b_all_parameters
        memory > xtest_blocksize_name_sha3
        memory > xrequires_blake2
        memory > xtest_case_sha3_384_0
        memory > xtest_blake2b
        memory > xtest_case_sha512_2
        memory > xtest_case_blake2s_all_parameters
        memory > xsupported_hash_names
        memory > xtest_pbkdf2_hmac_py
        memory > xrequires_sha3
        memory > xtest_get_builtin_constructor
        memory > xhexstr
        memory > xtest_case_sha3_512_vector
        memory > xtest_case_sha224_0
        memory > x__init__
        memory > xtest_case_md5_2
        memory > xtest_case_sha3_224_vector
        memory > xtest_threaded_hashing
        memory > xtest_algorithms_available
        memory > xtest_no_unicode_blake2
        memory > xcheck_blocksize_name
        memory > xtest_no_unicode_sha3
        memory > xtest_refleaks_in_hash___init__
        memory > xtest_case_sha1_3
        memory > xtest_case_sha3_512_0
        memory > xtest_case_sha224_3
        memory > xcheck_no_unicode
        memory > xtest_blocksize_name
        memory > xCOMPILED_WITH_PYDEBUG
        memory > xtest_case_sha512_3
        memory > xscrypt_test_vectors
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xCOMPILED_WITH_PYDEBUG.write (((xhasattr)).apply ((xsys)) ("gettotalrefcount"))
            seq
            seq
            seq
            seq
            seq
            seq
            seq
            seq
            seq
            seq
            seq
            xpy_hashlib.write (((unsupported)).apply ((ximport_fresh_module)) ("hashlib") ((((unsupported)).apply ("_hashlib"))))
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xHASH.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_blake2.write "None: is there a None literal in the EO language?"
            xrequires_blake2.write ((((xunittest).xskipUnless)).apply ((x_blake2)) ("requires _blake2"))
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_sha3.write "None: is there a None literal in the EO language?"
            xrequires_sha3.write ((((xunittest).xskipUnless)).apply ((x_sha3)) ("requires _sha3"))
            xhexstr.write
              [xs]
                memory > xh
                memory > xr
                seq > @
                  seq
                    (((unsupported)).apply ((((xisinstance)).apply ((xs)) ((xbytes)))) ((((xrepr)).apply ((xs)))))
                    xh.write "0123456789abcdef"
                    xr.write ""
                    (((unsupported)).apply ((xi)) ((xs)))
                      (((unsupported)).apply ((xr)) (((((unsupported)).apply ((xh)) (((((unsupported)).apply ((xi)) (4)).and 15))).add (((unsupported)).apply ((xh)) (((xi).and 15))))))
                    (((unsupported)).apply ((xr)))
            xURL.write "http://www.pythontest.net/hashlib/{}.txt"
            xread_vectors.write
              [xhash_name]
                memory > xparts
                memory > xurl
                memory > xtestdata
                memory > xline
                seq > @
                  seq
                    xurl.write ((((xURL).xformat)).apply ((xhash_name)))
                    (((unsupported)).apply ((((unsupported)).apply ((xOSError)) ((xHTTPException)))))
                      xtestdata.write ((((xsupport).xopen_urlresource)).apply ((xurl)))
                      (((unsupported)).apply (((((xunittest).xSkipTest)).apply (((("Could not retrieve {}".xformat)).apply ((xurl)))))))
                    (((unsupported)).apply ((xtestdata)))
                      (((unsupported)).apply ((xline)) ((xtestdata)))
                        seq
                          xline.write ((((xline).xstrip)).apply)
                          (((((xline).xstartswith)).apply ("#")).or ((xline).not)).if
                            (((unsupported)).apply)
                          xparts.write ((((xline).xsplit)).apply (","))
                          (((unsupported)).apply ((((unsupported)).apply ((xparts)) (0))) (((((xbytes).xfromhex)).apply ((((unsupported)).apply ((xparts)) (0))))))
                          (((unsupported)).apply ((xparts)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsupported_hash_names.write (((unsupported)).apply ("md5") ("MD5") ("sha1") ("SHA1") ("sha224") ("SHA224") ("sha256") ("SHA256") ("sha384") ("SHA384") ("sha512") ("SHA512") ("blake2b") ("blake2s") ("sha3_224") ("sha3_256") ("sha3_384") ("sha3_512") ("shake_128") ("shake_256"))
                xshakes.write (((unsupported)).apply ("shake_128") ("shake_256"))
                x_warn_on_extension_import.write ((((xos).xname).eq "posix").or (xCOMPILED_WITH_PYDEBUG))
                x_conditional_import_module.write
                  [xself xmodule_name]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xModuleNotFoundError)))
                          (((unsupported)).apply (((((ximportlib).ximport_module)).apply ((xmodule_name)))))
                          ((xself).x_warn_on_extension_import).if
                            bogusForceDataize.write ((((xwarnings).xwarn)).apply (("Did a C extension fail to compile? %s".mod (xerror))))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                x__init__.write
                  [xself]
                    memory > x_md5
                    memory > xconstructor
                    memory > x_hashlib
                    memory > x_sha3
                    memory > x_blake2
                    memory > x_sha256
                    memory > xalgorithms
                    memory > x_test_algorithm_via_hashlib_new
                    memory > x_sha512
                    memory > x_sha1
                    memory > xadd_builtin_constructor
                    seq > @
                      (((unsupported)).apply)
                        xalgorithms.write (((xset)).apply)
                        (((unsupported)).apply ((xalgorithm)) (((xself).xsupported_hash_names)))
                          bogusForceDataize.write ((((xalgorithms).xadd)).apply (((((xalgorithm).xlower)).apply)))
                        x_blake2.write ((((xself).x_conditional_import_module)).apply ("_blake2"))
                        (x_blake2).if
                          bogusForceDataize.write ((((xalgorithms).xupdate)).apply ((((unsupported)).apply ("blake2b") ("blake2s"))))
                        (((unsupported)).apply (((xself).xconstructors_to_test)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xalgorithm)) ((xalgorithms)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xconstructors_to_test)) ((xalgorithm)))) ((((xset)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xconstructors)))) ((((((xself).xconstructors_to_test).xitems)).apply)))
                          seq
                            bogusForceDataize.write ((((xconstructors).xadd)).apply ((((xgetattr)).apply ((xhashlib)) ((xalgorithm)))))
                            x_test_algorithm_via_hashlib_new.write
                              [xdata x_alg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply (((((xhashlib).xnew)).apply ((x_alg)) ((((unsupported)).apply ((xkwargs)))))))
                                    (((unsupported)).apply (((((xhashlib).xnew)).apply ((x_alg)) ((xdata)) ((((unsupported)).apply ((xkwargs)))))))
                            bogusForceDataize.write ((((xconstructors).xadd)).apply ((x_test_algorithm_via_hashlib_new)))
                        x_hashlib.write ((((xself).x_conditional_import_module)).apply ("_hashlib"))
                        (((unsupported)).apply (((xself).x_hashlib)) ((x_hashlib)))
                        (x_hashlib).if
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((x_hashlib)) ("openssl_md5"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((x_hashlib)) ("openssl_sha1"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xconstructors)))) ((((((xself).xconstructors_to_test).xitems)).apply)))
                              seq
                                xconstructor.write (((xgetattr)).apply ((x_hashlib)) (("openssl_".add (xalgorithm))) ("None: is there a None literal in the EO language?"))
                                (xconstructor).if
                                  (((unsupported)).apply ((xValueError)))
                                    bogusForceDataize.write (((xconstructor)).apply)
                                    bogusForceDataize.write ((((xconstructors).xadd)).apply ((xconstructor)))
                        xadd_builtin_constructor.write
                          [xname]
                            memory > xconstructor
                            seq > @
                              seq
                                xconstructor.write (((((xgetattr)).apply ((xhashlib)) ("__get_builtin_constructor"))).apply ((xname)))
                                bogusForceDataize.write ((((((unsupported)).apply (((xself).xconstructors_to_test)) ((xname))).xadd)).apply ((xconstructor)))
                        x_md5.write ((((xself).x_conditional_import_module)).apply ("_md5"))
                        (x_md5).if
                          bogusForceDataize.write (((xadd_builtin_constructor)).apply ("md5"))
                        x_sha1.write ((((xself).x_conditional_import_module)).apply ("_sha1"))
                        (x_sha1).if
                          bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha1"))
                        x_sha256.write ((((xself).x_conditional_import_module)).apply ("_sha256"))
                        (x_sha256).if
                          seq
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha224"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha256"))
                        x_sha512.write ((((xself).x_conditional_import_module)).apply ("_sha512"))
                        (x_sha512).if
                          seq
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha384"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha512"))
                        (x_blake2).if
                          seq
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("blake2s"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("blake2b"))
                        x_sha3.write ((((xself).x_conditional_import_module)).apply ("_sha3"))
                        (x_sha3).if
                          seq
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha3_224"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha3_256"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha3_384"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("sha3_512"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("shake_128"))
                            bogusForceDataize.write (((xadd_builtin_constructor)).apply ("shake_256"))
                        bogusForceDataize.write ((((((xsuper)).apply ((xHashLibTestCase)) ((xself))).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xhash_constructors.write
                  [xself]
                    memory > xconstructors
                    seq > @
                      (((unsupported)).apply)
                        xconstructors.write (((((xself).xconstructors_to_test).xvalues)).apply)
                        (((unsupported)).apply ((((((xitertools).xchain).xfrom_iterable)).apply ((xconstructors)))))
                xtest_refleaks_in_hash___init__.write
                  [xself]
                    memory > xsha1_hash
                    memory > xgettotalrefcount
                    memory > xrefs_before
                    seq > @
                      (((unsupported)).apply)
                        xgettotalrefcount.write ((((xsupport).xget_attribute)).apply ((xsys)) ("gettotalrefcount"))
                        xsha1_hash.write ((((xc_hashlib).xnew)).apply ("sha1"))
                        xrefs_before.write (((xgettotalrefcount)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          bogusForceDataize.write ((((xsha1_hash).x__init__)).apply ("sha1"))
                        (((unsupported)).apply (((xself).xassertAlmostEqual)) (((((xgettotalrefcount)).apply).sub (xrefs_before))) (0) (10))
                xtest_hash_array.write
                  [xself]
                    memory > xc
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("b") ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                          seq
                            xc.write (((xcons)).apply ((xa)))
                            (((unsupported)).apply (((xc).xname)) (((xself).xshakes))).if
                              bogusForceDataize.write ((((xc).xhexdigest)).apply (16))
                              bogusForceDataize.write ((((xc).xhexdigest)).apply)
                xtest_algorithms_guaranteed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhashlib).xalgorithms_guaranteed)) ((((xset)).apply ((((unsupported)).apply ((x_algo)) ((x_algo)) (((xself).xsupported_hash_names)) (((((x_algo).xislower)).apply)))))))
                xtest_algorithms_available.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xset)).apply (((xhashlib).xalgorithms_guaranteed))).xissubset)).apply (((xhashlib).xalgorithms_available)))))
                xtest_unknown_hash.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xhashlib).xnew)) ("spam spam spam spam spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xhashlib).xnew)) (1))
                xtest_new_upper_to_lower.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xhashlib).xnew)).apply ("SHA256")).xname)) ("sha256"))
                xtest_get_builtin_constructor.write
                  [xself]
                    memory > xconstructor
                    memory > xget_builtin_constructor
                    memory > xbuiltin_constructor_cache
                    seq > @
                      seq
                        xget_builtin_constructor.write (((xgetattr)).apply ((xhashlib)) ("__get_builtin_constructor"))
                        xbuiltin_constructor_cache.write (((xgetattr)).apply ((xhashlib)) ("__builtin_constructor_cache"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_builtin_constructor)) ("test"))
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("_md5 module not available"))
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("_md5"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xbuiltin_constructor_cache).xclear)).apply)
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_builtin_constructor)) ("md5"))
                          (((unsupported)).apply ("_md5") ((((xlocals)).apply))).if
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("_md5"))) ((x_md5)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("_md5"))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_builtin_constructor)) (3))
                        xconstructor.write (((xget_builtin_constructor)).apply ("md5"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xconstructor)) (((x_md5).xmd5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xbuiltin_constructor_cache)))) ((((unsupported)).apply ("MD5") ("md5"))))
                xtest_hexdigest.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                        seq
                          xh.write (((xcons)).apply)
                          (((unsupported)).apply (((xh).xname)) (((xself).xshakes))).if
                            seq
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xh).xdigest)).apply (16))) ((xbytes)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhexstr)).apply (((((xh).xdigest)).apply (16))))) (((((xh).xhexdigest)).apply (16))))
                            seq
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xh).xdigest)).apply)) ((xbytes)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhexstr)).apply (((((xh).xdigest)).apply)))) (((((xh).xhexdigest)).apply)))
                xtest_digest_length_overflow.write
                  [xself]
                    memory > xh
                    memory > xlarge_sizes
                    seq > @
                      seq
                        xlarge_sizes.write (((unsupported)).apply ((((unsupported)).apply (2) (29))) (((((unsupported)).apply (2) (32)).sub 10)) (((((unsupported)).apply (2) (32)).add 10)) ((((unsupported)).apply (2) (61))) (((((unsupported)).apply (2) (64)).sub 10)) (((((unsupported)).apply (2) (64)).add 10)))
                        (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                          seq
                            xh.write (((xcons)).apply)
                            (((unsupported)).apply (((xh).xname)) (((xself).xshakes))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xdigest)) ((((unsupported)).apply (((xh).xdigest)) (((xh).xhexdigest)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xdigest)) ((10.neg)))
                                (((unsupported)).apply ((xlength)) ((xlarge_sizes)))
                                  (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                                    bogusForceDataize.write (((xdigest)).apply ((xlength)))
                xtest_name_attribute.write
                  [xself]
                    memory > xh
                    seq > @
                      (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                        seq
                          xh.write (((xcons)).apply)
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xh).xname)) ((xstr)))
                          (((unsupported)).apply (((xh).xname)) (((xself).xsupported_hash_names))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xh).xname)) (((xself).xsupported_hash_names)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xh).xname)) (((xself).xsupported_hash_names)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xh).xname)) ((((((xhashlib).xnew)).apply (((xh).xname))).xname)))
                xtest_large_update.write
                  [xself]
                    memory > xm4
                    memory > xaas
                    memory > xcees
                    memory > xdees
                    memory > xm4_digest
                    memory > xm1
                    memory > xargs
                    memory > xm4_copy
                    memory > xm3
                    memory > xbees
                    memory > xm2
                    seq > @
                      seq
                        xaas.write ("a".mul 128)
                        xbees.write ("b".mul 127)
                        xcees.write ("c".mul 126)
                        xdees.write ("d".mul 2048)
                        (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                          seq
                            xm1.write (((xcons)).apply)
                            bogusForceDataize.write ((((xm1).xupdate)).apply ((xaas)))
                            bogusForceDataize.write ((((xm1).xupdate)).apply ((xbees)))
                            bogusForceDataize.write ((((xm1).xupdate)).apply ((xcees)))
                            bogusForceDataize.write ((((xm1).xupdate)).apply ((xdees)))
                            (((unsupported)).apply (((xm1).xname)) (((xself).xshakes))).if
                              xargs.write (((unsupported)).apply (16))
                              xargs.write (((unsupported)).apply)
                            xm2.write (((xcons)).apply)
                            bogusForceDataize.write ((((xm2).xupdate)).apply (((((xaas).add (xbees)).add (xcees)).add (xdees))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm1).xdigest)).apply ((((unsupported)).apply ((xargs)))))) (((((xm2).xdigest)).apply ((((unsupported)).apply ((xargs)))))))
                            xm3.write (((xcons)).apply (((((xaas).add (xbees)).add (xcees)).add (xdees))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm1).xdigest)).apply ((((unsupported)).apply ((xargs)))))) (((((xm3).xdigest)).apply ((((unsupported)).apply ((xargs)))))))
                            xm4.write (((xcons)).apply ((((xaas).add (xbees)).add (xcees))))
                            xm4_digest.write ((((xm4).xdigest)).apply ((((unsupported)).apply ((xargs)))))
                            xm4_copy.write ((((xm4).xcopy)).apply)
                            bogusForceDataize.write ((((xm4_copy).xupdate)).apply ((xdees)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm1).xdigest)).apply ((((unsupported)).apply ((xargs)))))) (((((xm4_copy).xdigest)).apply ((((unsupported)).apply ((xargs)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm4).xdigest)).apply ((((unsupported)).apply ((xargs)))))) ((xm4_digest)))
                xcheck.write
                  [xself xname xdata xhexdigest xshake]
                    memory > xlength
                    memory > xdigest
                    memory > xm
                    memory > xconstructors
                    memory > xcomputed
                    seq > @
                      (((unsupported)).apply)
                        xlength.write (((unsupported)).apply ((((xlen)).apply ((xhexdigest)))) (2))
                        xhexdigest.write ((((xhexdigest).xlower)).apply)
                        xconstructors.write (((unsupported)).apply (((xself).xconstructors_to_test)) ((xname)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xlen)).apply ((xconstructors)))) (2))
                        (((unsupported)).apply ((xhash_object_constructor)) ((xconstructors)))
                          seq
                            xm.write (((xhash_object_constructor)).apply ((xdata)) ((((unsupported)).apply ((xkwargs)))))
                            xcomputed.write (((xshake).not).if ((((xm).xhexdigest)).apply) ((((xm).xhexdigest)).apply ((xlength))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomputed)) ((xhexdigest)) (("Hash algorithm %s constructed using %s returned hexdigest %r for %d byte input data that should have hashed to %r.".mod (((unsupported)).apply ((xname)) ((xhash_object_constructor)) ((xcomputed)) ((((xlen)).apply ((xdata)))) ((xhexdigest))))))
                            xcomputed.write (((xshake).not).if ((((xm).xdigest)).apply) ((((xm).xdigest)).apply ((xlength))))
                            xdigest.write ((((xbytes).xfromhex)).apply ((xhexdigest)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomputed)) ((xdigest)))
                            ((xshake).not).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdigest)))) (((xm).xdigest_size)))
                xcheck_no_unicode.write
                  [xself xalgorithm_name]
                    memory > xconstructors
                    seq > @
                      seq
                        xconstructors.write (((unsupported)).apply (((xself).xconstructors_to_test)) ((xalgorithm_name)))
                        (((unsupported)).apply ((xhash_object_constructor)) ((xconstructors)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash_object_constructor)) ("spam"))
                xtest_no_unicode.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("md5"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha1"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha224"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha256"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha384"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha512"))
                xtest_no_unicode_blake2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("blake2b"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("blake2s"))
                xtest_no_unicode_sha3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha3_224"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha3_256"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha3_384"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("sha3_512"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("shake_128"))
                        bogusForceDataize.write ((((xself).xcheck_no_unicode)).apply ("shake_256"))
                xcheck_blocksize_name.write
                  [xself xname xblock_size xdigest_size xdigest_length]
                    memory > xconstructors
                    memory > xm
                    seq > @
                      (((unsupported)).apply)
                        xconstructors.write (((unsupported)).apply (((xself).xconstructors_to_test)) ((xname)))
                        (((unsupported)).apply ((xhash_object_constructor)) ((xconstructors)))
                          seq
                            xm.write (((xhash_object_constructor)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xblock_size)) ((xblock_size)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xdigest_size)) ((xdigest_size)))
                            (xdigest_length).if
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xm).xdigest)).apply ((xdigest_length)))))) ((xdigest_length)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xm).xhexdigest)).apply ((xdigest_length)))))) ((2.mul (xdigest_length))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xm).xdigest)).apply)))) ((xdigest_size)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xm).xhexdigest)).apply)))) ((2.mul (xdigest_size))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xname)) ((xname)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((((xname).xsplit)).apply ("_"))) (0))) ((((xrepr)).apply ((xm)))))
                xtest_blocksize_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("md5") (64) (16))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha1") (64) (20))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha224") (64) (28))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha256") (64) (32))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha384") (128) (48))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha512") (128) (64))
                xtest_blocksize_name_sha3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha3_224") (144) (28))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha3_256") (136) (32))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha3_384") (104) (48))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("sha3_512") (72) (64))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("shake_128") (168) (0) (32))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("shake_256") (136) (0) (64))
                xcheck_sha3.write
                  [xself xname xcapacity xrate xsuffix]
                    memory > xconstructors
                    memory > xm
                    seq > @
                      seq
                        xconstructors.write (((unsupported)).apply (((xself).xconstructors_to_test)) ((xname)))
                        (((unsupported)).apply ((xhash_object_constructor)) ((xconstructors)))
                          seq
                            xm.write (((xhash_object_constructor)).apply)
                            ((((unsupported)).apply ((xHASH)) ("None: is there a None literal in the EO language?")).and (((xisinstance)).apply ((xm)) ((xHASH)))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcapacity).add (xrate))) (1600))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).x_capacity_bits)) ((xcapacity)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).x_rate_bits)) ((xrate)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).x_suffix)) ((xsuffix)))
                xtest_extra_sha3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("sha3_224") (448) (1152) ("x06"))
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("sha3_256") (512) (1088) ("x06"))
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("sha3_384") (768) (832) ("x06"))
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("sha3_512") (1024) (576) ("x06"))
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("shake_128") (256) (1344) ("x1f"))
                        bogusForceDataize.write ((((xself).xcheck_sha3)).apply ("shake_256") (512) (1088) ("x1f"))
                xtest_blocksize_name_blake2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("blake2b") (128) (64))
                        bogusForceDataize.write ((((xself).xcheck_blocksize_name)).apply ("blake2s") (64) (32))
                xtest_case_md5_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("md5") ("") ("d41d8cd98f00b204e9800998ecf8427e"))
                xtest_case_md5_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("md5") ("abc") ("900150983cd24fb0d6963f7d28e17f72"))
                xtest_case_md5_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("md5") ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") ("d174ab98d277d9f5a5611c2c9f419d9f"))
                xtest_case_md5_huge.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("md5") (("A".mul (xsize))) ("c9af2dff37468ce5dfee8f2cfc0a9c6d"))
                xtest_case_md5_uintmax.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("md5") (("A".mul (xsize))) ("28138d306ff1b8281f1a9067e1a1a2b3"))
                xtest_case_sha1_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha1") ("") ("da39a3ee5e6b4b0d3255bfef95601890afd80709"))
                xtest_case_sha1_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha1") ("abc") ("a9993e364706816aba3e25717850c26c9cd0d89d"))
                xtest_case_sha1_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha1") ("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") ("84983e441c3bd26ebaae4aa1f95129e5e54670f1"))
                xtest_case_sha1_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha1") (("a".mul 1000000)) ("34aa973cd4c4daa4f61eeb2bdbad27316534016f"))
                xtest_case_sha224_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha224") ("") ("d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"))
                xtest_case_sha224_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha224") ("abc") ("23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7"))
                xtest_case_sha224_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha224") ("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") ("75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525"))
                xtest_case_sha224_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha224") (("a".mul 1000000)) ("20794655980c91d8bbb4c1ea97618a4bf03f42581948b2ee4ee7ad67"))
                xtest_case_sha256_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha256") ("") ("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"))
                xtest_case_sha256_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha256") ("abc") ("ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"))
                xtest_case_sha256_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha256") ("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") ("248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1"))
                xtest_case_sha256_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha256") (("a".mul 1000000)) ("cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0"))
                xtest_case_sha384_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha384") ("") (("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da".add "274edebfe76f65fbd51ad2f14898b95b")))
                xtest_case_sha384_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha384") ("abc") (("cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed".add "8086072ba1e7cc2358baeca134c825a7")))
                xtest_case_sha384_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha384") (("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn".add "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu")) (("09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712".add "fcc7c71a557e2db966c3e9fa91746039")))
                xtest_case_sha384_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha384") (("a".mul 1000000)) (("9d0e1809716474cb086e834e310a4a1ced149e9c00f248527972cec5704c2a5b".add "07b8b3dc38ecc4ebae97ddd87f3d8985")))
                xtest_case_sha512_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha512") ("") (("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce".add "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e")))
                xtest_case_sha512_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha512") ("abc") (("ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a".add "2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f")))
                xtest_case_sha512_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha512") (("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn".add "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu")) (("8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018".add "501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909")))
                xtest_case_sha512_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck)).apply ("sha512") (("a".mul 1000000)) (("e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973eb".add "de0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b")))
                xcheck_blake2.write
                  [xself xconstructor xsalt_size xperson_size xkey_size xdigest_size xmax_offset]
                    memory > xsalt
                    memory > xperson
                    memory > xkey
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconstructor).xSALT_SIZE)) ((xsalt_size)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xsalt_size).add 1)))))
                          (((unsupported)).apply ((xconstructor)) (("a".mul (xi))))
                        xsalt.write ("a".mul ((xsalt_size).add 1))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((xsalt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconstructor).xPERSON_SIZE)) ((xperson_size)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xperson_size).add 1)))))
                          (((unsupported)).apply ((xconstructor)) (("a".mul (xi))))
                        xperson.write ("a".mul ((xperson_size).add 1))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((xperson)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconstructor).xMAX_DIGEST_SIZE)) ((xdigest_size)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (((xdigest_size).add 1)))))
                          (((unsupported)).apply ((xconstructor)) ((xi)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (0))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (((xdigest_size).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconstructor).xMAX_KEY_SIZE)) ((xkey_size)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xkey_size).add 1)))))
                          (((unsupported)).apply ((xconstructor)) (("a".mul (xi))))
                        xkey.write ("a".mul ((xkey_size).add 1))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((xkey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xconstructor)).apply).xhexdigest)).apply)) (((((((unsupported)).apply ((xconstructor)) ("")).xhexdigest)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) (256))))
                          (((unsupported)).apply ((xconstructor)) ((xi)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (256))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (256))))
                          (((unsupported)).apply ((xconstructor)) ((xi)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (0))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (256))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) (256))))
                          (((unsupported)).apply ((xconstructor)) ((xi)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (256))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) (((xdigest_size).add 1)))))
                          (((unsupported)).apply ((xconstructor)) ((xi)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) (((xdigest_size).add 1)))
                        (((unsupported)).apply ((xconstructor)) (0))
                        (((unsupported)).apply ((xconstructor)) (((((unsupported)).apply (1) (32)).sub 1)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((xconstructor)) ((((unsupported)).apply (1) (32))))
                        (((unsupported)).apply ((xconstructor)) (0))
                        (((unsupported)).apply ((xconstructor)) ((xmax_offset)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xconstructor)) ((1.neg)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((xconstructor)) (((xmax_offset).add 1)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xconstructor)) (""))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xconstructor)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xconstructor)) (""))
                        (((unsupported)).apply ((xconstructor)) ("") ("") ("") ("") (17) (1) (1) (256) (512) (1) (7) (TRUE))
                xblake2_rfc7693.write
                  [xself xconstructor xmd_len xin_len]
                    memory > xouter
                    memory > xunkeyed
                    memory > xselftest_seq
                    memory > xkeyed
                    memory > xindata
                    memory > xkey
                    seq > @
                      seq
                        xselftest_seq.write
                          [xlength xseed]
                            memory > xout
                            memory > xt
                            memory > xb
                            memory > xmask
                            memory > xa
                            seq > @
                              seq
                                xmask.write ((((unsupported)).apply (1) (32)).sub 1)
                                xa.write (((((unsupported)).apply).mul (xseed)).and (xmask))
                                xb.write 1
                                xout.write (((xbytearray)).apply ((xlength)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((xlength)))))
                                  seq
                                    xt.write (((xa).add (xb)).and (xmask))
                                    (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ((xb)) ((xt)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xi)))) (((((unsupported)).apply ((xt)) (24)).and 255)))
                                (((unsupported)).apply ((xout)))
                        xouter.write (((unsupported)).apply ((xconstructor)) (32))
                        (((unsupported)).apply ((xoutlen)) ((xmd_len)))
                          (((unsupported)).apply ((xinlen)) ((xin_len)))
                            seq
                              xindata.write (((xselftest_seq)).apply ((xinlen)) ((xinlen)))
                              xkey.write (((xselftest_seq)).apply ((xoutlen)) ((xoutlen)))
                              xunkeyed.write (((unsupported)).apply ((xconstructor)) ((xindata)) ((xoutlen)))
                              bogusForceDataize.write ((((xouter).xupdate)).apply (((((xunkeyed).xdigest)).apply)))
                              xkeyed.write (((unsupported)).apply ((xconstructor)) ((xindata)) ((xkey)) ((xoutlen)))
                              bogusForceDataize.write ((((xouter).xupdate)).apply (((((xkeyed).xdigest)).apply)))
                        (((unsupported)).apply (((((xouter).xhexdigest)).apply)))
                xtest_blake2b.write
                  [xself]
                    memory > xb2b_in_len
                    memory > xb2b_md_len
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_blake2)).apply (((xhashlib).xblake2b)) (16) (16) (64) (64) (((((unsupported)).apply (1) (64)).sub 1)))
                        xb2b_md_len.write (((unsupported)).apply (20) (32) (48) (64))
                        xb2b_in_len.write (((unsupported)).apply (0) (3) (128) (129) (255) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xblake2_rfc7693)).apply (((xhashlib).xblake2b)) ((xb2b_md_len)) ((xb2b_in_len)))) ("c23a7800d98123bd10f506c61e29da5603d763b8bbad2e737f5e765a7bccd475"))
                xtest_case_blake2b_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("blake2b") ("") (("786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419".add "d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce")))
                xtest_case_blake2b_1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("blake2b") ("abc") (("ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d1".add "7d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923")))
                xtest_case_blake2b_all_parameters.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck)) ("blake2b") ("foo") ("920568b0c5873b2f0ab67bedb6cf1b2b") (16) ("bar") ("baz") ("bing") (2) (3) (4) (5) (6) (7) (TRUE))
                xtest_blake2b_vectors.write
                  [xself]
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xkey)) ((xmd)))) ((((xread_vectors)).apply ("blake2b"))))
                          seq
                            xkey.write ((((xbytes).xfromhex)).apply ((xkey)))
                            (((unsupported)).apply (((xself).xcheck)) ("blake2b") ((xmsg)) ((xmd)) ((xkey)))
                xtest_blake2s.write
                  [xself]
                    memory > xb2s_md_len
                    memory > xb2s_in_len
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_blake2)).apply (((xhashlib).xblake2s)) (8) (8) (32) (32) (((((unsupported)).apply (1) (48)).sub 1)))
                        xb2s_md_len.write (((unsupported)).apply (16) (20) (28) (32))
                        xb2s_in_len.write (((unsupported)).apply (0) (3) (64) (65) (255) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xblake2_rfc7693)).apply (((xhashlib).xblake2s)) ((xb2s_md_len)) ((xb2s_in_len)))) ("6a411f08ce25adcdfb02aba641451cec53c598b24f4fc787fbdc88797f4c1dfe"))
                xtest_case_blake2s_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("blake2s") ("") ("69217a3079908094e11121d042354a7c1f55b6482ca1a51e1b250dfd1ed0eef9"))
                xtest_case_blake2s_1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("blake2s") ("abc") ("508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982"))
                xtest_case_blake2s_all_parameters.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck)) ("blake2s") ("foo") ("bf2a8f7fe3c555012a6f8046e646bc75") (16) ("bar") ("baz") ("bing") (2) (3) (4) (5) (6) (7) (TRUE))
                xtest_blake2s_vectors.write
                  [xself]
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xkey)) ((xmd)))) ((((xread_vectors)).apply ("blake2s"))))
                          seq
                            xkey.write ((((xbytes).xfromhex)).apply ((xkey)))
                            (((unsupported)).apply (((xself).xcheck)) ("blake2s") ((xmsg)) ((xmd)) ((xkey)))
                xtest_case_sha3_224_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_224") ("") ("6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7"))
                xtest_case_sha3_224_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("sha3_224"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_224") ((xmsg)) ((xmd)))
                xtest_case_sha3_256_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_256") ("") ("a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a"))
                xtest_case_sha3_256_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("sha3_256"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_256") ((xmsg)) ((xmd)))
                xtest_case_sha3_384_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_384") ("") (("0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2a".add "c3713831264adb47fb6bd1e058d5f004")))
                xtest_case_sha3_384_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("sha3_384"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_384") ((xmsg)) ((xmd)))
                xtest_case_sha3_512_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_512") ("") (("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6".add "15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26")))
                xtest_case_sha3_512_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("sha3_512"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("sha3_512") ((xmsg)) ((xmd)))
                xtest_case_shake_128_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("shake_128") ("") ("7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26") (TRUE))
                        bogusForceDataize.write ((((xself).xcheck)).apply ("shake_128") ("") ("7f9c") (TRUE))
                xtest_case_shake128_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("shake_128"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("shake_128") ((xmsg)) ((xmd)) (TRUE))
                xtest_case_shake_256_0.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck)).apply ("shake_256") ("") ("46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f") (TRUE))
                        bogusForceDataize.write ((((xself).xcheck)).apply ("shake_256") ("") ("46b9") (TRUE))
                xtest_case_shake256_vector.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xmd)))) ((((xread_vectors)).apply ("shake_256"))))
                          bogusForceDataize.write ((((xself).xcheck)).apply ("shake_256") ((xmsg)) ((xmd)) (TRUE))
                xtest_gil.write
                  [xself]
                    memory > xgil_minsize
                    memory > xm
                    seq > @
                      seq
                        xgil_minsize.write 2048
                        (((unsupported)).apply ((xcons)) (((xself).xhash_constructors)))
                          seq
                            xm.write (((xcons)).apply)
                            bogusForceDataize.write ((((xm).xupdate)).apply ("1"))
                            bogusForceDataize.write ((((xm).xupdate)).apply (("#".mul (xgil_minsize))))
                            bogusForceDataize.write ((((xm).xupdate)).apply ("1"))
                            xm.write (((xcons)).apply (("x".mul (xgil_minsize))))
                            bogusForceDataize.write ((((xm).xupdate)).apply ("1"))
                        xm.write ((((xhashlib).xmd5)).apply)
                        bogusForceDataize.write ((((xm).xupdate)).apply ("1"))
                        bogusForceDataize.write ((((xm).xupdate)).apply (("#".mul (xgil_minsize))))
                        bogusForceDataize.write ((((xm).xupdate)).apply ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xhexdigest)).apply)) ("cb1e1a2cbc80be75e19935d621fb9b21"))
                        xm.write ((((xhashlib).xmd5)).apply (("x".mul (xgil_minsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xhexdigest)).apply)) ("cfb767f225d58469c5de3632a8803958"))
                xtest_threaded_hashing.write
                  [xself]
                    memory > xdata
                    memory > xthreads
                    memory > xsmallest_data
                    memory > xhasher
                    memory > xchunk_size
                    memory > xnum_threads
                    memory > xhash_in_chunks
                    memory > xthread
                    memory > xexpected_hash
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write ((((xhashlib).xsha1)).apply)
                        xnum_threads.write 5
                        xsmallest_data.write "swineflu"
                        xdata.write ((xsmallest_data).mul 200000)
                        xexpected_hash.write (((((((xhashlib).xsha1)).apply (((xdata).mul (xnum_threads)))).xhexdigest)).apply)
                        xhash_in_chunks.write
                          [xchunk_size]
                            memory > xindex
                            seq > @
                              seq
                                xindex.write 0
                                while.
                                  ((xindex).less (((xlen)).apply ((xdata))))
                                  [unused]
                                    seq > @
                                      seq
                                        bogusForceDataize.write ((((xhasher).xupdate)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xindex)) (((xindex).add (xchunk_size))))))))
                                        (((unsupported)).apply ((xindex)) ((xchunk_size)))
                        xthreads.write (((unsupported)).apply)
                        (((unsupported)).apply ((xthreadnum)) ((((xrange)).apply ((xnum_threads)))))
                          seq
                            xchunk_size.write (((unsupported)).apply ((((xlen)).apply ((xdata)))) ((((unsupported)).apply (10) ((xthreadnum)))))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xchunk_size)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchunk_size).mod (((xlen)).apply ((xsmallest_data))))) (0))
                            xthread.write (((unsupported)).apply (((xthreading).xThread)) ((xhash_in_chunks)) ((((unsupported)).apply ((xchunk_size)))))
                            bogusForceDataize.write ((((xthreads).xappend)).apply ((xthread)))
                        (((unsupported)).apply ((xthread)) ((xthreads)))
                          bogusForceDataize.write ((((xthread).xstart)).apply)
                        (((unsupported)).apply ((xthread)) ((xthreads)))
                          bogusForceDataize.write ((((xthread).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_hash)) (((((xhasher).xhexdigest)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xpbkdf2_test_vectors.write (((unsupported)).apply ((((unsupported)).apply ("password") ("salt") (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("password") ("salt") (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("password") ("salt") (4096) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("passwordPASSWORDpassword") ("saltSALTsaltSALTsaltSALTsaltSALTsalt") (4096) ((1.neg)))) ((((unsupported)).apply ("pass0word") ("sa0lt") (4096) (16))))
                xscrypt_test_vectors.write (((unsupported)).apply ((((unsupported)).apply ("") ("") (16) (1) (1) ((((xunhexlify)).apply ("77d6576238657b203b19ca42c18a0497f16b4844e3074ae8dfdffa3fede21442fcd0069ded0948f8326a753a0fc81f17e8d3e0fb2e0d3628cf35e20c38d18906"))))) ((((unsupported)).apply ("password") ("NaCl") (1024) (8) (16) ((((xunhexlify)).apply ("fdbabe1c9d3472007856e7190d01e9fe7c6ad7cbc8237830e77376634b3731622eaf30d92e22a3886ff109279d9830dac727afb94a83ee6d8360cbdfa2cc0640"))))) ((((unsupported)).apply ("pleaseletmein") ("SodiumChloride") (16384) (8) (1) ((((xunhexlify)).apply ("7023bdcb3afd7348461c06cd81fd38ebfda8fbba904f8e3ea9b543f6545da1f2d5432955613f0fcf62d49705242a9af9e61e85dc0d651e40dfcf017b45575887"))))))
                xpbkdf2_results.write (((unsupported)).apply ("sha1") ((((unsupported)).apply ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("0c60c80f961f0e71f3a9b524af6012062fe037a6"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("4b007901b765489abead49d926f721d065a429c1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038"))) (25))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("56fa6aa75548099dcc37d7f03425e0c3"))) ("None: is there a None literal in the EO language?"))))) ("sha256") ((((unsupported)).apply ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("ae4d0c95af6b46d32d0adff928f06dd02a303f8ef3c251dfd6e2d85a95474c43"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("c5e478d59288c841aa530db6845c4c8d962893a001ce4e11a4963873aa98134a"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("348c89dbcbd32b2f32d814b8116e84cf2b17347ebc1800181c4e2a1fb8dd53e1c635518c7dac47e9"))) (40))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("89b69d0516f829893c696226650a8687"))) ("None: is there a None literal in the EO language?"))))) ("sha512") ((((unsupported)).apply ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("867f70cf1ade02cff3752599a3a53dc4af34c7a669815ae5d513554e1c8cf252c02d470a285a0501bad999bfe943c08f050235d7d68b1da55e63f73b60a57fce"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("e1d9c16aa681708a45f5c7c4e215ceb66e011a2e9f0040713f18aefdb866d53cf76cab2868a39b9f7840edce4fef5a82be67335c77a6068e04112754f27ccf4e"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("d197b1b33db0143e018b12f3d1d1479e6cdebdcc97c5c0f87f6902e072f457b5143f30602641b3d55cd335988cb36b84376060ecd532e039b742a239434af2d5"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("8c0511f4c6e597c6ac6315d8f0362e225f3c501495ba23b868c005174dc4ee71115b59f9e60cd9532fa33e0f75aefe30225c583a186cd82bd4daea9724a3d3b8"))) (64))) ((((unsupported)).apply (((((xbytes).xfromhex)).apply ("9d9e9c4cd21fe4be24d5b8244c759665"))) ("None: is there a None literal in the EO language?"))))))
                x_test_pbkdf2_hmac.write
                  [xself xpbkdf2]
                    memory > xout
                    memory > xdklen
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdigest_name)) ((xresults)))) ((((((xself).xpbkdf2_results).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xvector)))) ((((xenumerate)).apply (((xself).xpbkdf2_test_vectors)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xpassword)) ((xsalt)) ((xrounds)) ((xdklen)))) ((xvector)))
                              (((unsupported)).apply ((((unsupported)).apply ((xexpected)) ((xoverwrite_dklen)))) ((((unsupported)).apply ((xresults)) ((xi)))))
                              (xoverwrite_dklen).if
                                xdklen.write (xoverwrite_dklen)
                              xout.write (((xpbkdf2)).apply ((xdigest_name)) ((xpassword)) ((xsalt)) ((xrounds)) ((xdklen)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)) ((((unsupported)).apply ((xdigest_name)) ((xpassword)) ((xsalt)) ((xrounds)) ((xdklen)))))
                              xout.write (((xpbkdf2)).apply ((xdigest_name)) ((((xmemoryview)).apply ((xpassword)))) ((((xmemoryview)).apply ((xsalt)))) ((xrounds)) ((xdklen)))
                              xout.write (((xpbkdf2)).apply ((xdigest_name)) ((((xbytearray)).apply ((xpassword)))) ((((xbytearray)).apply ((xsalt)))) ((xrounds)) ((xdklen)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)))
                              (((unsupported)).apply ((xdklen)) ("None: is there a None literal in the EO language?")).if
                                seq
                                  xout.write (((xpbkdf2)).apply ((xdigest_name)) ((xpassword)) ((xsalt)) ((xrounds)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)) ((((unsupported)).apply ((xdigest_name)) ((xpassword)) ((xsalt)) ((xrounds)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") (1) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xpbkdf2)) ("sha1") ("pass") ("salt") (1) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("unsupported hash type"))))
                          bogusForceDataize.write (((xpbkdf2)).apply ("unknown") ("pass") ("salt") (1))
                        xout.write (((unsupported)).apply ((xpbkdf2)) ("sha1") ("password") ("salt") (1) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xpbkdf2_results)) ("sha1"))) (0))) (0))))
                xtest_pbkdf2_hmac_py.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_pbkdf2_hmac)).apply (((xpy_hashlib).xpbkdf2_hmac)))
                xtest_pbkdf2_hmac_c.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_pbkdf2_hmac)).apply (((xc_hashlib).xpbkdf2_hmac)))
                xtest_scrypt.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xpassword)) ((xsalt)) ((xn)) ((xr)) ((xp)) ((xexpected)))) (((xself).xscrypt_test_vectors)))
                          seq
                            xresult.write (((unsupported)).apply (((xhashlib).xscrypt)) ((xpassword)) ((xsalt)) ((xn)) ((xr)) ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)))
                        (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xhashlib).xscrypt)).apply ("password"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xhashlib).xscrypt)).apply ("password") ("salt"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xhashlib).xscrypt)) ("password") (2) (8) (1) ("salt"))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((1.neg)) (0) (1) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xTypeError)))))))
                            (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") ((xn)) (8) (1))
                        (((unsupported)).apply ((xr)) ((((unsupported)).apply ((1.neg)) (0) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xTypeError)))))))
                            (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) ((xr)) (1))
                        (((unsupported)).apply ((xp)) ((((unsupported)).apply ((1.neg)) (0) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xTypeError)))))))
                            (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) ((xp)))
                        (((unsupported)).apply ((xmaxmem)) ((((unsupported)).apply ((1.neg)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xTypeError)))))))
                            (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) (1) ((xmaxmem)))
                        (((unsupported)).apply ((xdklen)) ((((unsupported)).apply ((1.neg)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xTypeError)))))))
                            (((unsupported)).apply (((xhashlib).xscrypt)) ("password") ("salt") (2) (8) (1) ((xdklen)))
                xtest_normalized_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("blake2b512") (((xhashlib).xalgorithms_available)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sha3-512") (((xhashlib).xalgorithms_available)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)