memory > xcm
memory > xget_max_test_processes
memory > xRuntimeError
memory > xstr
memory > xcaptured_stdout
memory > xt
memory > xdefaultTestLoader
memory > xexpected_failures
memory > xTestSuite
memory > xtests_count
memory > xset
memory > xpattern
memory > xtuple
memory > xdatabases
memory > xverbosity
memory > xtestcase
memory > xstdout
memory > xlist
memory > xtest_labels
memory > xexpected
memory > xValueError
memory > ximport_module
memory > xtest
memory > xTestRunner
memory > x_
memory > xalias
memory > xlevel
memory > xoutput
memory > xTextTestRunner
memory > xconnections
memory > xDiscoverRunner
memory > xsorted
memory > xstderr
memory > xNullTimeKeeper
memory > xmock
memory > xos
memory > xmultiprocessing
memory > xSyntaxError
memory > xTimeKeeper
memory > xiter
memory > x__file__
memory > xunittest
memory > xSystemExit
memory > xresult
memory > xexc
memory > xnext
memory > xkwargs
memory > xMyRunner
memory > xcaptured_stderr
memory > xlen
memory > xdict
memory > xSimpleTestCase
memory > xArgumentParser
memory > xlogging
[] > test_discover_runner
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_faulthandler_already_enabled
        memory > xtest_dotted_test_class_django_testcase
        memory > xrunner
        memory > xtest_pdb_with_parallel
        memory > xtest_number_of_databases_parallel_test_suite
        memory > xtest_add_arguments_debug_mode
        memory > xtest_setup_shuffler_no_shuffle_argument
        memory > xtest_dotted_test_method_django_testcase
        memory > xtest_faulthandler_enabled
        memory > xtest_run_suite_logs_seed
        memory > xtest_duplicates_ignored
        memory > xtest_setup_shuffler_shuffle_int
        memory > xtest_timings_not_captured
        memory > xget_test_methods_names
        memory > xtest_build_suite_shuffling
        memory > xtest_get_max_test_processes_env_var
        memory > xrun_suite_with_runner
        memory > xtest_other_only
        memory > xtest_number_of_tests_found_displayed
        memory > xtest_included_tags_displayed
        memory > xtest_loader_patterns_not_mutated
        memory > xtest_faulthandler_enabled_fileno
        memory > xtest_build_suite_failed_tests_first
        memory > xtest_name_patterns
        memory > xtest_testcase_ordering
        memory > xtest_parallel_auto
        memory > xtest_overridable_test_suite
        memory > xtest_all
        memory > xtest_overridable_get_test_runner_kwargs
        memory > xtest_faulthandler_disabled
        memory > xtest_file_path
        memory > xtest_empty_label
        memory > xtest_parallel_invalid
        memory > xtest_buffer_mode_test_pass
        memory > xtest_parallel_count
        memory > xtest_timings_captured
        memory > xtest_no_databases_required
        memory > xtest_tag_inheritance
        memory > xtest_dotted_test_class_vanilla_unittest
        memory > xtest_parallel_flag
        memory > xtest_get_max_test_processes_forkserver
        memory > xassertSkippedDatabases
        memory > xtest_pattern
        memory > xtest_ignore_adjacent
        memory > xtest_number_of_databases_no_parallel_test_suite
        memory > xget_parser
        memory > xtest_excluded_tags_displayed
        memory > xchange_loader_patterns
        memory > xtest_load_tests_for_label_file_path
        memory > xtest_overridable_test_loader
        memory > xtest_default_only
        memory > xtest_init_debug_mode
        memory > xtest_tag_fail_to_load
        memory > xskip_msg
        memory > xtest_overridable_test_runner
        memory > xtest_discovery_on_package
        memory > xtest_buffer_mode_test_fail
        memory > xtest_get_max_test_processes
        memory > xtest_add_arguments_shuffle
        memory > xtest_tags
        memory > xtest_loader_patterns_not_mutated_when_test_label_is_file_path
        memory > xtest_get_max_test_processes_spawn
        memory > xtest_setup_shuffler_shuffle_none
        memory > xtest_suite_result_with_failure
        memory > xtest_dotted_test_module
        memory > xtest_parallel_default
        memory > xtest_exclude_tags
        memory > xtest_number_of_parallel_workers
        memory > xtest_log
        memory > xtest_default_and_other
        memory > xtest_run_suite_logs_seed_exception
        memory > xtest_mixed
        memory > xtest_reverse
        memory > xtest_log_logger
        memory > xget_databases
        memory > xtest_empty_test_case
        memory > xtest_serialize
        memory > xchange_cwd
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xchange_cwd.write
              [xdirectory]
                memory > xold_cwd
                memory > xnew_dir
                memory > xcurrent_dir
                seq > @
                  (((unsupported)).apply)
                    xcurrent_dir.write (((((xos).xpath).xabspath)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))))
                    xnew_dir.write (((((xos).xpath).xjoin)).apply ((xdirectory)) ((xcurrent_dir)))
                    xold_cwd.write ((((xos).xgetcwd)).apply)
                    bogusForceDataize.write ((((xos).xchdir)).apply ((xnew_dir)))
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      bogusForceDataize.write ((((xos).xchdir)).apply ((xold_cwd)))
            xchange_loader_patterns.write
              [xpatterns]
                memory > xoriginal_patterns
                seq > @
                  (((unsupported)).apply)
                    xoriginal_patterns.write (((xDiscoverRunner).xtest_loader).xtestNamePatterns)
                    (((unsupported)).apply ((((xDiscoverRunner).xtest_loader).xtestNamePatterns)) ((xpatterns)))
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      (((unsupported)).apply ((((xDiscoverRunner).xtest_loader).xtestNamePatterns)) ((xoriginal_patterns)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((((xmock).xpatch).xdict)) (((xos).xenviron)) ((((unsupported)).apply)) (TRUE))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xmultiprocessing)) ("cpu_count") (12))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xmultiprocessing)) ("get_start_method") ("fork"))))
              seq
                xget_parser.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xArgumentParser)).apply)
                        bogusForceDataize.write ((((xDiscoverRunner).xadd_arguments)).apply ((xparser)))
                        (((unsupported)).apply ((xparser)))
                xtest_parallel_default.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((((((xself).xget_parser)).apply).xparse_args)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xparallel)) (0))
                xtest_parallel_flag.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((((((xself).xget_parser)).apply).xparse_args)).apply ((((unsupported)).apply ("--parallel"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xparallel)) ("auto"))
                xtest_parallel_auto.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((((((xself).xget_parser)).apply).xparse_args)).apply ((((unsupported)).apply ("--parallel") ("auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xparallel)) ("auto"))
                xtest_parallel_count.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((((((xself).xget_parser)).apply).xparse_args)).apply ((((unsupported)).apply ("--parallel") ("17"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xparallel)) (17))
                xtest_parallel_invalid.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))) ((((xcaptured_stderr)).apply)) ((xstderr)))
                          bogusForceDataize.write (((((((xself).xget_parser)).apply).xparse_args)).apply ((((unsupported)).apply ("--parallel") ("unaccepted"))))
                        xmsg.write "argument --parallel: 'unaccepted' is not an integer or the string 'auto'"
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xmsg)) (((((xstderr).xgetvalue)).apply)))
                xtest_get_max_test_processes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (12))
                xtest_get_max_test_processes_env_var.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (7))
                xtest_get_max_test_processes_spawn.write
                  [xself xmocked_get_start_method xmocked_cpu_count]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmocked_get_start_method).xreturn_value)) ("spawn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (12))
                        (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xos).xenviron)) ((((unsupported)).apply ("DJANGO_TEST_PROCESSES") ("7"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (7))
                xtest_get_max_test_processes_forkserver.write
                  [xself xmocked_get_start_method xmocked_cpu_count]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmocked_get_start_method).xreturn_value)) ("forkserver"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (1))
                        (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xos).xenviron)) ((((unsupported)).apply ("DJANGO_TEST_PROCESSES") ("7"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_max_test_processes)).apply)) (1))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xget_test_methods_names.write
                  [xsuite]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((((xt).x__class__).x__name__).add ".").add ((xt).x_testMethodName))) ((xt)) (((xsuite).x_tests)))))
                xtest_init_debug_mode.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((xDiscoverRunner)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xrunner).xdebug_mode)))
                xtest_add_arguments_shuffle.write
                  [xself]
                    memory > xns
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xArgumentParser)).apply)
                        bogusForceDataize.write ((((xDiscoverRunner).xadd_arguments)).apply ((xparser)))
                        xns.write ((((xparser).xparse_args)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xns).xshuffle)) (FALSE))
                        xns.write ((((xparser).xparse_args)).apply ((((unsupported)).apply ("--shuffle"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xns).xshuffle)))
                        xns.write ((((xparser).xparse_args)).apply ((((unsupported)).apply ("--shuffle") ("5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xns).xshuffle)) (5))
                xtest_add_arguments_debug_mode.write
                  [xself]
                    memory > xns
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xArgumentParser)).apply)
                        bogusForceDataize.write ((((xDiscoverRunner).xadd_arguments)).apply ((xparser)))
                        xns.write ((((xparser).xparse_args)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xns).xdebug_mode)))
                        xns.write ((((xparser).xparse_args)).apply ((((unsupported)).apply ("--debug-mode"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xns).xdebug_mode)))
                xtest_setup_shuffler_no_shuffle_argument.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((xDiscoverRunner)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xrunner).xshuffle)) (FALSE))
                        bogusForceDataize.write ((((xrunner).xsetup_shuffler)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xrunner).xshuffle_seed)))
                xtest_setup_shuffler_shuffle_none.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xrunner).xshuffle)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("random.randint") (1))))
                          (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                            bogusForceDataize.write ((((xrunner).xsetup_shuffler)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xgetvalue)).apply)) ("Using shuffle seed: 1 (generated)n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrunner).xshuffle_seed)) (1))
                xtest_setup_shuffler_shuffle_int.write
                  [xself]
                    memory > xexpected_out
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrunner).xshuffle)) (2))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          bogusForceDataize.write ((((xrunner).xsetup_shuffler)).apply)
                        xexpected_out.write "Using shuffle seed: 2 (given)n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xgetvalue)).apply)) ((xexpected_out)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrunner).xshuffle_seed)) (2))
                xtest_load_tests_for_label_file_path.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((((xchange_cwd)).apply ("."))))
                        seq
                          xmsg.write "One of the test labels is a path to a file: 'test_discover_runner.py', which is not supported. Use a dotted module name or path to a directory instead."
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ((xmsg)))))
                            bogusForceDataize.write ((((((xDiscoverRunner)).apply).xload_tests_for_label)).apply ("test_discover_runner.py") ((((unsupported)).apply)))
                xtest_dotted_test_module.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (4))
                xtest_dotted_test_class_vanilla_unittest.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.TestVanillaUnittest")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_dotted_test_class_django_testcase.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.TestDjangoTestCase")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_dotted_test_method_django_testcase.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.TestDjangoTestCase.test_sample")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_pattern.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) ("*_tests.py") (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_name_patterns.write
                  [xself]
                    memory > xsuite
                    memory > xall_test_1
                    memory > xall_test_2
                    memory > xall_tests
                    seq > @
                      seq
                        xall_test_1.write (((unsupported)).apply ("DjangoCase1.test_1") ("DjangoCase2.test_1") ("SimpleCase1.test_1") ("SimpleCase2.test_1") ("UnittestCase1.test_1") ("UnittestCase2.test_1"))
                        xall_test_2.write (((unsupported)).apply ("DjangoCase1.test_2") ("DjangoCase2.test_2") ("SimpleCase1.test_2") ("SimpleCase2.test_2") ("UnittestCase1.test_2") ("UnittestCase2.test_2"))
                        xall_tests.write (((xsorted)).apply ((((unsupported)).apply ((((unsupported)).apply ((xall_test_1)))) ((((unsupported)).apply ((xall_test_2)))) ("UnittestCase2.test_3_test"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpattern)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("test_1"))) ((xall_test_1)))) ((((unsupported)).apply ((((unsupported)).apply ("UnittestCase1"))) ((((unsupported)).apply ("UnittestCase1.test_1") ("UnittestCase1.test_2"))))) ((((unsupported)).apply ((((unsupported)).apply ("*test"))) ((((unsupported)).apply ("UnittestCase2.test_3_test"))))) ((((unsupported)).apply ((((unsupported)).apply ("test*"))) ((xall_tests)))) ((((unsupported)).apply ((((unsupported)).apply ("test"))) ((xall_tests)))) ((((unsupported)).apply ((((unsupported)).apply ("test_1") ("test_2"))) ((((xsorted)).apply ((((unsupported)).apply ((((unsupported)).apply ((xall_test_1)))) ((((unsupported)).apply ((xall_test_2)))))))))) ((((unsupported)).apply ((((unsupported)).apply ("test*1"))) ((xall_test_1)))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xpattern)))))
                            seq
                              xsuite.write ((((((unsupported)).apply ((xDiscoverRunner)) ((xpattern)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.simple"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((((xself).xget_test_methods_names)).apply ((xsuite)))))
                xtest_loader_patterns_not_mutated.write
                  [xself]
                    memory > xrunner
                    memory > xcount
                    memory > xtests
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("test_sample"))) (0))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests") (1))) ((((unsupported)).apply ("test_runner_apps.sample.tests.Test.test_sample") (1))) ((((unsupported)).apply ("test_runner_apps.sample.empty") (0))) ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.EmptyTestCase") (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_labels)) ((xtests_count)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtest_labels)))))
                            (((unsupported)).apply ((((xchange_loader_patterns)).apply ((((unsupported)).apply ("UnittestCase1"))))))
                              seq
                                xcount.write (((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ((xtest_labels))))).xcountTestCases)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) ((xtests_count)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrunner).xtest_loader).xtestNamePatterns)) ((((unsupported)).apply ("UnittestCase1"))))
                xtest_loader_patterns_not_mutated_when_test_label_is_file_path.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("test_sample"))) (0))
                        (((unsupported)).apply ((((xchange_cwd)).apply ("."))) ((((xchange_loader_patterns)).apply ((((unsupported)).apply ("UnittestCase1"))))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                              bogusForceDataize.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_discover_runner.py"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrunner).xtest_loader).xtestNamePatterns)) ((((unsupported)).apply ("UnittestCase1"))))
                xtest_file_path.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        (((unsupported)).apply ((((xchange_cwd)).apply (".."))))
                          xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps/sample/")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (5))
                xtest_empty_label.write
                  [xself]
                    memory > xsuite
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xchange_cwd)).apply ("."))))
                          seq
                            xsuite.write ((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((((((unsupported)).apply (((xsuite).x_tests)) (0)).xid)).apply).xsplit)).apply ("."))) (0))) ((((((xos).xpath).xbasename)).apply (((((xos).xgetcwd)).apply)))))
                xtest_empty_test_case.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.EmptyTestCase")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                xtest_discovery_on_package.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_ignore_adjacent.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcount.write (((((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.empty")))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                xtest_testcase_ordering.write
                  [xself]
                    memory > xsuite
                    seq > @
                      (((unsupported)).apply ((((xchange_cwd)).apply (".."))))
                        seq
                          xsuite.write ((((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps/sample/"))))
                          (((unsupported)).apply (((xself).xassertEqual)) ((((((unsupported)).apply (((xsuite).x_tests)) (0)).x__class__).x__name__)) ("TestDjangoTestCase") ("TestDjangoTestCase should be the first test case"))
                          (((unsupported)).apply (((xself).xassertEqual)) ((((((unsupported)).apply (((xsuite).x_tests)) (1)).x__class__).x__name__)) ("TestZimpleTestCase") ("TestZimpleTestCase should be the second test case"))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("DocTestCase") ((((unsupported)).apply ((((xt).x__class__).x__name__)) ((xt)) ((((unsupported)).apply (((xsuite).x_tests)) ((((unsupported)).apply (2))))))))
                xtest_duplicates_ignored.write
                  [xself]
                    memory > xsub_app
                    memory > xdups
                    memory > xbase_app
                    memory > xsingle
                    memory > xrunner
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbase_app.write "forms_tests"
                        xsub_app.write "forms_tests.field_tests"
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (0))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("append") ((xsub_app)))))))
                          seq
                            xsingle.write (((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ((xbase_app))))).xcountTestCases)).apply)
                            xdups.write (((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ((xbase_app)) ((xsub_app))))).xcountTestCases)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsingle)) ((xdups)))
                xtest_reverse.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (0))
                        xsuite.write (((unsupported)).apply (((xrunner).xbuild_suite)) ((((unsupported)).apply ("test_runner_apps.sample") ("test_runner_apps.simple"))))
                        (((unsupported)).apply (((xself).xassertIn)) ("test_runner_apps.simple") (((((((xnext)).apply ((((xiter)).apply ((xsuite))))).xid)).apply)) ("Test labels should be reversed."))
                        xsuite.write (((unsupported)).apply (((xrunner).xbuild_suite)) ((((unsupported)).apply ("test_runner_apps.simple"))))
                        xsuite.write (((xtuple)).apply ((xsuite)))
                        (((unsupported)).apply (((xself).xassertIn)) ("DjangoCase") (((((((unsupported)).apply ((xsuite)) (0)).xid)).apply)) ("Test groups should not be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("SimpleCase") (((((((unsupported)).apply ((xsuite)) (4)).xid)).apply)) ("Test groups order should be preserved."))
                        (((unsupported)).apply (((xself).xassertIn)) ("DjangoCase2") (((((((unsupported)).apply ((xsuite)) (0)).xid)).apply)) ("Django test cases should be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("SimpleCase2") (((((((unsupported)).apply ((xsuite)) (4)).xid)).apply)) ("Simple test cases should be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("UnittestCase2") (((((((unsupported)).apply ((xsuite)) (8)).xid)).apply)) ("Unittest test cases should be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("test_2") (((((((unsupported)).apply ((xsuite)) (0)).xid)).apply)) ("Methods of Django cases should be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("test_2") (((((((unsupported)).apply ((xsuite)) (4)).xid)).apply)) ("Methods of simple cases should be reversed."))
                        (((unsupported)).apply (((xself).xassertIn)) ("test_2") (((((((unsupported)).apply ((xsuite)) (9)).xid)).apply)) ("Methods of unittest cases should be reversed."))
                xtest_build_suite_failed_tests_first.write
                  [xself]
                    memory > xsuite
                    memory > xtests
                    seq > @
                      seq
                        xsuite.write (((unsupported)).apply (((((unsupported)).apply ((xDiscoverRunner)) (0)).xbuild_suite)) ((((unsupported)).apply ("test_runner_apps.sample") ("doesnotexist"))))
                        xtests.write (((xlist)).apply ((xsuite)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xtests)) (0))) ((((xunittest).xloader).x_FailedTest)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((unsupported)).apply ((xtests)) ((1.neg)))) ((((xunittest).xloader).x_FailedTest)))
                xtest_build_suite_shuffling.write
                  [xself]
                    memory > xlabels
                    memory > xrunner
                    memory > xnames
                    memory > xcases
                    memory > xtests
                    seq > @
                      seq
                        xlabels.write (((unsupported)).apply ("label1") ("label2") ("label3") ("label4"))
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("label1") ("label2") ("label3") ("label4"))))) ((((unsupported)).apply ((((unsupported)).apply ("reverse") (TRUE))) ((((unsupported)).apply ("label4") ("label3") ("label2") ("label1"))))) ((((unsupported)).apply ((((unsupported)).apply ("shuffle") (8))) ((((unsupported)).apply ("label4") ("label1") ("label3") ("label2"))))) ((((unsupported)).apply ((((unsupported)).apply ("shuffle") (8) ("reverse") (TRUE))) ((((unsupported)).apply ("label2") ("label3") ("label1") ("label4"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xkwargs)))))
                            seq
                              xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ((xkwargs)))) (0))
                              xtests.write (((unsupported)).apply (((xrunner).xbuild_suite)) ((xlabels)))
                              xnames.write (((unsupported)).apply ((((unsupported)).apply ((((((((xtest).xid)).apply).xsplit)).apply ("."))) ((1.neg)))) ((xtest)) ((xtests)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnames)) ((xexpected)))
                xtest_overridable_get_test_runner_kwargs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((((xDiscoverRunner)).apply).xget_test_runner_kwargs)).apply)) ((xdict)))
                xtest_overridable_test_suite.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xDiscoverRunner)).apply).xtest_suite)) ((xTestSuite)))
                xtest_overridable_test_runner.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xDiscoverRunner)).apply).xtest_runner)) ((xTextTestRunner)))
                xtest_overridable_test_loader.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xDiscoverRunner)).apply).xtest_loader)) ((xdefaultTestLoader)))
                xtest_tags.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("core"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (1))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("fast"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (2))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("slow"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (2))
                xtest_exclude_tags.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("fast"))) ((((unsupported)).apply ("core"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (1))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("fast"))) ((((unsupported)).apply ("slow"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (0))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("slow"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests")))).xcountTestCases)).apply)) (0))
                xtest_tag_inheritance.write
                  [xself]
                    memory > xcount_tests
                    seq > @
                      seq
                        xcount_tests.write
                          []
                            memory > xsuite
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("verbosity") (0))
                                xsuite.write ((((((xDiscoverRunner)).apply ((((unsupported)).apply ((xkwargs))))).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests_inheritance"))))
                                (((unsupported)).apply (((((xsuite).xcountTestCases)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("foo"))))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("bar"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("baz"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("bar"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("bar") ("baz"))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcount_tests)) ((((unsupported)).apply ("foo"))))) (0))
                xtest_tag_fail_to_load.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                          bogusForceDataize.write (((ximport_module)).apply ("test_runner_apps.tagged.tests_syntax_error"))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("syntax_error"))) (0))
                        xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("doesnotexist") ("test_runner_apps.tagged"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xtest).xid)).apply)) ((xtest)) ((xsuite)))) ((((unsupported)).apply ("unittest.loader._FailedTest.doesnotexist") ("unittest.loader._FailedTest.test_runner_apps.tagged.tests_syntax_error"))))
                xtest_included_tags_displayed.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("foo") ("bar"))) (2))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Including test tag(s): bar, foo.n") (((((xstdout).xgetvalue)).apply)))
                xtest_excluded_tags_displayed.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((((unsupported)).apply ("foo") ("bar"))) (3))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged.tests"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Excluding test tag(s): bar, foo.n") (((((xstdout).xgetvalue)).apply)))
                xtest_number_of_tests_found_displayed.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((xDiscoverRunner)).apply)
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          seq
                            bogusForceDataize.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.sample.tests_sample.TestDjangoTestCase") ("test_runner_apps.simple"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Found 14 test(s).n") (((((xstdout).xgetvalue)).apply)))
                xtest_pdb_with_parallel.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "You cannot use --pdb with parallel tests; pass --parallel=1 to use it."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (2))
                xtest_number_of_parallel_workers.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        unsupported
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (5) (0))
                        xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsuite).xprocesses)) ((((xlen)).apply (((xsuite).xsubsuites)))))
                xtest_number_of_databases_parallel_test_suite.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (8) (0))
                        xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.tagged"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsuite).xprocesses)) ((((xlen)).apply (((xsuite).xsubsuites)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrunner).xparallel)) (((xsuite).xprocesses)))
                xtest_number_of_databases_no_parallel_test_suite.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (8) (0))
                        xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.simple.tests.DjangoCase1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrunner).xparallel)) (1))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xsuite)) ((xTestSuite)))
                xtest_buffer_mode_test_pass.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (0))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)) ((((xcaptured_stderr)).apply)) ((xstderr)))
                          seq
                            xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.buffer.tests_buffer.WriteToStdoutStderrTestCase.test_pass"))))
                            bogusForceDataize.write ((((xrunner).xrun_suite)).apply ((xsuite)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Write to stderr.") (((((xstderr).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Write to stdout.") (((((xstdout).xgetvalue)).apply)))
                xtest_buffer_mode_test_fail.write
                  [xself]
                    memory > xsuite
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (0))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)) ((((xcaptured_stderr)).apply)) ((xstderr)))
                          seq
                            xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.buffer.tests_buffer.WriteToStdoutStderrTestCase.test_fail"))))
                            bogusForceDataize.write ((((xrunner).xrun_suite)).apply ((xsuite)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Write to stderr.") (((((xstderr).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Write to stdout.") (((((xstdout).xgetvalue)).apply)))
                xrun_suite_with_runner.write
                  [xself xrunner_class]
                    memory > xresult
                    memory > xrunner
                    memory > xtest_runner
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xDiscoverRunner)))
                          xtest_runner.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((xrunner_class)).apply)))
                        xrunner.write (((xMyRunner)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)))
                          bogusForceDataize.write ((((xrunner).xsetup_shuffler)).apply)
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          (((unsupported)).apply ((xRuntimeError)))
                            xresult.write ((((xrunner).xrun_suite)).apply ("None: is there a None literal in the EO language?"))
                            xresult.write (((xstr)).apply ((xexc)))
                        xoutput.write ((((xstdout).xgetvalue)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xoutput)))))
                xtest_run_suite_logs_seed.write
                  [xself]
                    memory > xexpected_prefix
                    memory > xexpected_output
                    memory > xrun
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xrun.write
                            [xself xsuite]
                              seq > @
                                (((unsupported)).apply ("<fake-result>"))
                        xexpected_prefix.write "Used shuffle seed"
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xoutput)))) (((((xself).xrun_suite_with_runner)).apply ((xTestRunner)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("<fake-result>"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xexpected_prefix)) ((xoutput)))
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xoutput)))) ((((unsupported)).apply (((xself).xrun_suite_with_runner)) ((xTestRunner)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("<fake-result>"))
                        xexpected_output.write "{expected_prefix}: 2 (given)n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((xexpected_output)))
                xtest_run_suite_logs_seed_exception.write
                  [xself]
                    memory > xexpected_output
                    memory > xrun
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          xrun.write
                            [xself xsuite]
                              seq > @
                                (((unsupported)).apply ((((xRuntimeError)).apply ("my exception"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xoutput)))) ((((unsupported)).apply (((xself).xrun_suite_with_runner)) ((xTestRunner)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("my exception"))
                        xexpected_output.write "Used shuffle seed: 2 (given)n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((xexpected_output)))
                xtest_faulthandler_enabled.write
                  [xself xmocked_enable]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("faulthandler.is_enabled") (FALSE))))
                          seq
                            (((unsupported)).apply ((xDiscoverRunner)) (TRUE))
                            bogusForceDataize.write ((((xmocked_enable).xassert_called)).apply)
                xtest_faulthandler_already_enabled.write
                  [xself xmocked_enable]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("faulthandler.is_enabled") (TRUE))))
                          seq
                            (((unsupported)).apply ((xDiscoverRunner)) (TRUE))
                            bogusForceDataize.write ((((xmocked_enable).xassert_not_called)).apply)
                xtest_faulthandler_enabled_fileno.write
                  [xself xmocked_enable]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("faulthandler.is_enabled") (FALSE))) ((((xcaptured_stderr)).apply)))
                          seq
                            (((unsupported)).apply ((xDiscoverRunner)) (TRUE))
                            bogusForceDataize.write ((((xmocked_enable).xassert_called)).apply)
                xtest_faulthandler_disabled.write
                  [xself xmocked_enable]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("faulthandler.is_enabled") (FALSE))))
                          seq
                            (((unsupported)).apply ((xDiscoverRunner)) (FALSE))
                            bogusForceDataize.write ((((xmocked_enable).xassert_not_called)).apply)
                xtest_timings_not_captured.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (FALSE))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xstderr)))
                          seq
                            (((unsupported)).apply ((((((xrunner).xtime_keeper).xtimed)).apply ("test"))))
                            bogusForceDataize.write (((((xrunner).xtime_keeper).xprint_results)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xrunner).xtime_keeper)) ((xNullTimeKeeper)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("test") (((((xstderr).xgetvalue)).apply)))
                xtest_timings_captured.write
                  [xself]
                    memory > xrunner
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xstderr)))
                          seq
                            (((unsupported)).apply ((((((xrunner).xtime_keeper).xtimed)).apply ("test"))))
                            bogusForceDataize.write (((((xrunner).xtime_keeper).xprint_results)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xrunner).xtime_keeper)) ((xTimeKeeper)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("test") (((((xstderr).xgetvalue)).apply)))
                xtest_log.write
                  [xself]
                    memory > xcustom_high_level
                    memory > xmsg
                    memory > xrunner
                    memory > xcases
                    memory > xcustom_low_level
                    seq > @
                      seq
                        xcustom_low_level.write 5
                        xcustom_high_level.write 45
                        xmsg.write "logging message"
                        xcases.write (((unsupported)).apply ((((unsupported)).apply (0) ("None: is there a None literal in the EO language?") (FALSE))) ((((unsupported)).apply (0) ((xcustom_low_level)) (FALSE))) ((((unsupported)).apply (0) (((xlogging).xDEBUG)) (FALSE))) ((((unsupported)).apply (0) (((xlogging).xINFO)) (FALSE))) ((((unsupported)).apply (0) (((xlogging).xWARNING)) (FALSE))) ((((unsupported)).apply (0) ((xcustom_high_level)) (FALSE))) ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?") (TRUE))) ((((unsupported)).apply (1) ((xcustom_low_level)) (FALSE))) ((((unsupported)).apply (1) (((xlogging).xDEBUG)) (FALSE))) ((((unsupported)).apply (1) (((xlogging).xINFO)) (TRUE))) ((((unsupported)).apply (1) (((xlogging).xWARNING)) (TRUE))) ((((unsupported)).apply (1) ((xcustom_high_level)) (TRUE))) ((((unsupported)).apply (2) ("None: is there a None literal in the EO language?") (TRUE))) ((((unsupported)).apply (2) ((xcustom_low_level)) (TRUE))) ((((unsupported)).apply (2) (((xlogging).xDEBUG)) (TRUE))) ((((unsupported)).apply (2) (((xlogging).xINFO)) (TRUE))) ((((unsupported)).apply (2) (((xlogging).xWARNING)) (TRUE))) ((((unsupported)).apply (2) ((xcustom_high_level)) (TRUE))) ((((unsupported)).apply (3) ("None: is there a None literal in the EO language?") (TRUE))) ((((unsupported)).apply (3) ((xcustom_low_level)) (TRUE))) ((((unsupported)).apply (3) (((xlogging).xDEBUG)) (TRUE))) ((((unsupported)).apply (3) (((xlogging).xINFO)) (TRUE))) ((((unsupported)).apply (3) (((xlogging).xWARNING)) (TRUE))) ((((unsupported)).apply (3) ((xcustom_high_level)) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xverbosity)) ((xlevel)) ((xoutput)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xverbosity)) ((xlevel)))))
                            (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                              seq
                                xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((xverbosity)))
                                bogusForceDataize.write ((((xrunner).xlog)).apply ((xmsg)) ((xlevel)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xgetvalue)).apply)) (((xoutput).if "{msg}n" "")))
                xtest_log_logger.write
                  [xself]
                    memory > xcases
                    memory > xlogger
                    memory > xrunner
                    seq > @
                      seq
                        xlogger.write ((((xlogging).xgetLogger)).apply ("test.logging"))
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("INFO:test.logging:log message"))) ((((unsupported)).apply (5) ("Level 5:test.logging:log message"))) ((((unsupported)).apply (((xlogging).xDEBUG)) ("DEBUG:test.logging:log message"))) ((((unsupported)).apply (((xlogging).xINFO)) ("INFO:test.logging:log message"))) ((((unsupported)).apply (((xlogging).xWARNING)) ("WARNING:test.logging:log message"))) ((((unsupported)).apply (45) ("Level 45:test.logging:log message"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlevel)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlevel)))))
                            seq
                              xrunner.write (((unsupported)).apply ((xDiscoverRunner)) ((xlogger)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xassertLogs)) ("test.logging") (1))) ((xcm)))
                                bogusForceDataize.write ((((xrunner).xlog)).apply ("log message") ((xlevel)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcm).xoutput)) ((((unsupported)).apply ((xexpected)))))
                xtest_suite_result_with_failure.write
                  [xself]
                    memory > xrunner
                    memory > xsuite
                    memory > xresult
                    memory > xcases
                    memory > xfailures
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply (1) ("FailureTestCase"))) ((((unsupported)).apply (1) ("ErrorTestCase"))) ((((unsupported)).apply (0) ("ExpectedFailureTestCase"))) ((((unsupported)).apply (1) ("UnexpectedSuccessTestCase"))))
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xexpected_failures)) ((xtestcase)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtestcase)))))
                            seq
                              xsuite.write ((((xrunner).xbuild_suite)).apply ((((unsupported)).apply ("test_runner_apps.failures.tests_failures.{testcase}"))))
                              (((unsupported)).apply ((((xcaptured_stderr)).apply)))
                                xresult.write ((((xrunner).xrun_suite)).apply ((xsuite)))
                              xfailures.write ((((xrunner).xsuite_result)).apply ((xsuite)) ((xresult)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfailures)) ((xexpected_failures)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (2))
                xskip_msg.write "Skipping setup of unused database(s): "
                xget_databases.write
                  [xself xtest_labels]
                    memory > xsuite
                    memory > xdatabases
                    seq > @
                      seq
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                          seq
                            xsuite.write (((((xself).xrunner).xbuild_suite)).apply ((xtest_labels)))
                            xdatabases.write (((((xself).xrunner).xget_databases)).apply ((xsuite)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) (((((xstdout).xgetvalue)).apply)))))
                xassertSkippedDatabases.write
                  [xself xtest_labels xexpected_databases]
                    memory > xskipped_databases
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((xoutput)))) (((((xself).xget_databases)).apply ((xtest_labels)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdatabases)) ((xexpected_databases)))
                        xskipped_databases.write ((((xset)).apply ((xconnections))).sub (((xset)).apply ((xexpected_databases))))
                        (xskipped_databases).if
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((((xself).xskip_msg).add (((", ".xjoin)).apply ((((xsorted)).apply ((xskipped_databases))))))) ((xoutput)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xskip_msg)) ((xoutput)))
                xtest_mixed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((xoutput)))) (((((xself).xget_databases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdatabases)) ((((unsupported)).apply ("default") (TRUE) ("other") (FALSE))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xskip_msg)) ((xoutput)))
                xtest_all.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((xoutput)))) (((((xself).xget_databases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.AllDatabasesTests"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdatabases)) ((((unsupported)).apply ((xalias)) (FALSE) ((xalias)) ((xconnections)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xskip_msg)) ((xoutput)))
                xtest_default_and_other.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSkippedDatabases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.DefaultDatabaseTests") ("test_runner_apps.databases.tests.OtherDatabaseTests"))) ((((unsupported)).apply ("default") (FALSE) ("other") (FALSE))))
                xtest_default_only.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSkippedDatabases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.DefaultDatabaseTests"))) ((((unsupported)).apply ("default") (FALSE))))
                xtest_other_only.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSkippedDatabases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.OtherDatabaseTests"))) ((((unsupported)).apply ("other") (FALSE))))
                xtest_no_databases_required.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSkippedDatabases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.NoDatabaseTests"))) ((((unsupported)).apply)))
                xtest_serialize.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((x_)))) (((((xself).xget_databases)).apply ((((unsupported)).apply ("test_runner_apps.databases.tests.DefaultDatabaseSerializedTests"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdatabases)) ((((unsupported)).apply ("default") (TRUE))))