memory > xd
memory > xgc
memory > xletter
memory > xC
memory > xcopy
memory > xmin
memory > xTestVariousIteratorArgs
memory > xAttributeError
memory > xBadCompare
memory > xstep
memory > xall
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xenumerate
memory > xMutatingCompare
memory > xelement
memory > xtest_deque
memory > xSubclassWithKwargs
memory > xValueError
memory > xpop
memory > xstr
memory > xTestSubclass
memory > xg
memory > xdeque
memory > xrange
memory > xsize
memory > xZeroDivisionError
memory > xstop
memory > xeval
memory > xIndexError
memory > xStopIteration
memory > xstart
memory > xproto
memory > xBadCmp
memory > xMutateCmp
memory > xrandom
memory > xopen
memory > xreversed
memory > xprint
memory > xappend
memory > xtype
memory > xrepr
memory > xTestSubclassWithKwargs
memory > xit
memory > xX
memory > xhasattr
memory > xx
memory > xi
memory > xstruct
memory > xs
memory > xsupport
memory > xsys
memory > xtuple
memory > xNotImplemented
memory > xmaxlen
memory > xweakref
memory > xTestSequence
memory > xid
memory > xSyntaxError
memory > xiter
memory > xe
memory > xzip
memory > xunittest
memory > xDequeWithBadIter
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xA
memory > xTestBasic
memory > xDeque
memory > xReferenceError
memory > xmatch
memory > xj
memory > xseq_tests
memory > xlen
memory > xTypeError
memory > x__name__
memory > xArithmeticError
[] > test_deque
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_underflow
        memory > xtest_pickle
        memory > xtest_maxlen_zero
        memory > xtest_iter_with_altered_data
        memory > xtest_iadd
        memory > xtest_imul
        memory > xtest_roundtrip_iter_init
        memory > xtest_insert_bug_26194
        memory > xtest_insert
        memory > xtest_print
        memory > x__eq__
        memory > xtest_weakref
        memory > xtest_big_queue_popleft
        memory > xtest_getslice
        memory > xtest_runtime_error_on_empty_deque
        memory > xfail
        memory > xtest_subclass_with_kwargs
        memory > xtest_pickle_recursive
        memory > xtest_constructor
        memory > x__iter__
        memory > xtest_long_steadystate_queue_popright
        memory > xtest_hash
        memory > xtest_reversed_new
        memory > xtest_long_steadystate_queue_popleft
        memory > xtest_main
        memory > xtest_repr
        memory > xtest_add
        memory > xtest_init
        memory > xtest_gc_doesnt_blowup
        memory > xtest_maxlen
        memory > xtest_index
        memory > xtest_bug_31608
        memory > xlibreftest
        memory > xBIG
        memory > xtest_extend
        memory > xtest_remove
        memory > xtest_comparisons
        memory > xtest_deepcopy
        memory > xtest_big_stack_right
        memory > xtest_count
        memory > xtest_big_queue_popright
        memory > xtest_big_stack_left
        memory > xtest_copy_method
        memory > xtest_getitem
        memory > xtest_copy
        memory > xtest_subscript
        memory > xtest_iterator_pickle
        memory > xtest_container_iterator
        memory > xtest_contains
        memory > xtest_maxlen_attribute
        memory > xtest_mul
        memory > xtest_basics
        memory > xtest_index_bug_24913
        memory > x__init__
        memory > xtest_sizeof
        memory > xtest_clear
        memory > xtest_setitem
        memory > xtest_rotate
        memory > xtest_reversed
        memory > xtest_free_after_iterating
        memory > xtest_reverse
        memory > xtype2test
        memory > xcheck_sizeof
        memory > x__test__
        memory > xtest_len
        memory > xtest_strange_subclass
        memory > xtest_delitem
        memory > xtest_contains_count_stop_crashes
        memory > xtest_extendleft
        memory > xtest_copy_pickle
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xBIG.write 100000
            xfail.write
              []
                seq > @
                  seq
                    (((unsupported)).apply ((xSyntaxError)))
                    (((unsupported)).apply (1))
            (((unsupported)).apply)
              x__eq__.write
                [xself xother]
                  seq > @
                    (((unsupported)).apply ((xRuntimeError)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xdeque xresult]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdeque)) ((xdeque)))
                        (((unsupported)).apply (((xself).xresult)) ((xresult)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xdeque).xclear)).apply)
                        (((unsupported)).apply (((xself).xresult)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xd
                    memory > xleft
                    memory > xright
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ((((xrange)).apply ((5125.neg)) ((5000.neg)))))
                        bogusForceDataize.write ((((xd).x__init__)).apply ((((xrange)).apply (200))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (200) (400))))
                          bogusForceDataize.write ((((xd).xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((200.neg)) (0))))))
                          bogusForceDataize.write ((((xd).xappendleft)).apply ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply ((200.neg)) (400))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (600))
                        xleft.write (((unsupported)).apply (((((xd).xpopleft)).apply)) ((xi)) ((((xrange)).apply (250))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xleft)) ((((xlist)).apply ((((xrange)).apply ((200.neg)) (50))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply (50) (400))))))
                        xright.write (((unsupported)).apply (((((xd).xpop)).apply)) ((xi)) ((((xrange)).apply (250))))
                        bogusForceDataize.write ((((xright).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xright)) ((((xlist)).apply ((((xrange)).apply (150) (400))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply (50) (150))))))
                xtest_maxlen.write
                  [xself]
                    memory > xd
                    memory > xit
                    memory > xfo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xdeque)) ("abc") ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xdeque)) ("abc") ((2.neg)))
                        xit.write (((xiter)).apply ((((xrange)).apply (10))))
                        xd.write (((unsupported)).apply ((xdeque)) ((xit)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("deque([7, 8, 9], maxlen=3)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply (7) (8) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply ((((xrange)).apply (10))) (3))))
                        bogusForceDataize.write ((((xd).xappend)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply (8) (9) (10))))
                        bogusForceDataize.write ((((xd).xappendleft)).apply (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply (7) (8) (9))))
                        bogusForceDataize.write ((((xd).xextend)).apply ((((unsupported)).apply (10) (11))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply (9) (10) (11))))
                        bogusForceDataize.write ((((xd).xextendleft)).apply ((((unsupported)).apply (8) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply (7) (8) (9))))
                        xd.write (((unsupported)).apply ((xdeque)) ((((xrange)).apply (200))) (10))
                        bogusForceDataize.write ((((xd).xappend)).apply ((xd)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("w"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xfo).xwrite)).apply ((((xstr)).apply ((xd)))))
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("r"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfo).xread)).apply)) ((((xrepr)).apply ((xd)))))
                          seq
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xd.write (((unsupported)).apply ((xdeque)) ((((xrange)).apply (10))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"))
                        xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("w"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xfo).xwrite)).apply ((((xstr)).apply ((xd)))))
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("r"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfo).xread)).apply)) ((((xrepr)).apply ((xd)))))
                          seq
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_maxlen_zero.write
                  [xself]
                    memory > xd
                    memory > xit
                    seq > @
                      seq
                        xit.write (((xiter)).apply ((((xrange)).apply (100))))
                        (((unsupported)).apply ((xdeque)) ((xit)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                        xit.write (((xiter)).apply ((((xrange)).apply (100))))
                        xd.write (((unsupported)).apply ((xdeque)) (0))
                        bogusForceDataize.write ((((xd).xextend)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                        xit.write (((xiter)).apply ((((xrange)).apply (100))))
                        xd.write (((unsupported)).apply ((xdeque)) (0))
                        bogusForceDataize.write ((((xd).xextendleft)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                xtest_maxlen_attribute.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeque)).apply).xmaxlen)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeque)).apply ("abc")).xmaxlen)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xdeque)) ("abc") (4)).xmaxlen)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xdeque)) ("abc") (2)).xmaxlen)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xdeque)) ("abc") (0)).xmaxlen)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          seq
                            xd.write (((xdeque)).apply ("abc"))
                            (((unsupported)).apply (((xd).xmaxlen)) (10))
                xtest_count.write
                  [xself]
                    memory > xd
                    memory > xm
                    memory > xs
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("") ("abracadabra") ((("simsalabim".mul 500).add "abc")))))
                          seq
                            xs.write (((xlist)).apply ((xs)))
                            xd.write (((xdeque)).apply ((xs)))
                            (((unsupported)).apply ((xletter)) ("abcdefghijklmnopqrstuvwxyz"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((xletter)))) (((((xd).xcount)).apply ((xletter)))) ((((unsupported)).apply ((xs)) ((xd)) ((xletter)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xcount)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xcount)) (1) (2))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply ((xArithmeticError)))
                        xd.write (((xdeque)).apply ((((unsupported)).apply (1) (2) ((((xBadCompare)).apply)) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xArithmeticError)) (((xd).xcount)) (2))
                        xd.write (((xdeque)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xArithmeticError)) (((xd).xcount)) ((((xBadCompare)).apply)))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  bogusForceDataize.write (((((xself).xd).xpop)).apply)
                                  (((unsupported)).apply (TRUE))
                        xm.write (((xMutatingCompare)).apply)
                        xd.write (((xdeque)).apply ((((unsupported)).apply (1) (2) (3) ((xm)) (4) (5))))
                        (((unsupported)).apply (((xm).xd)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xd).xcount)) (3))
                        xd.write (((xdeque)).apply (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 16)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xd)))))))
                          bogusForceDataize.write ((((xd).xrotate)).apply ((1.neg)))
                        bogusForceDataize.write ((((xd).xrotate)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xcount)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xcount)).apply ("None: is there a None literal in the EO language?"))) (16))
                xtest_comparisons.write
                  [xself]
                    memory > xd
                    memory > xargs
                    seq > @
                      seq
                        seq
                          xd.write (((xdeque)).apply ("xabc"))
                          bogusForceDataize.write ((((xd).xpopleft)).apply)
                        (((unsupported)).apply ((xe)) ((((unsupported)).apply ((xd)) ((((xdeque)).apply ("abc"))) ((((xdeque)).apply ("ab"))) ((((xdeque)).apply)) ((((xlist)).apply ((xd)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).eq (xe))) ((((((xtype)).apply ((xd))).eq (((xtype)).apply ((xe)))).and ((((xlist)).apply ((xd))).eq (((xlist)).apply ((xe)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).neq (xe))) (((((((xtype)).apply ((xd))).eq (((xtype)).apply ((xe)))).and ((((xlist)).apply ((xd))).eq (((xlist)).apply ((xe))))).not)))
                        xargs.write (((xmap)).apply ((xdeque)) ((((unsupported)).apply ("") ("a") ("b") ("ab") ("ba") ("abc") ("xba") ("xabc") ("cba"))))
                        (((unsupported)).apply ((xx)) ((xargs)))
                          (((unsupported)).apply ((xy)) ((xargs)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).eq (xy))) (((((xlist)).apply ((xx))).eq (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).neq (xy))) (((((xlist)).apply ((xx))).neq (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).less (xy))) (((((xlist)).apply ((xx))).less (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).leq (xy))) (((((xlist)).apply ((xx))).leq (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).greater (xy))) (((((xlist)).apply ((xx))).greater (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).geq (xy))) (((((xlist)).apply ((xx))).geq (((xlist)).apply ((xy))))) ((((unsupported)).apply ((xx)) ((xy)))))
                xtest_contains.write
                  [xself]
                    memory > xn
                    memory > xd
                    seq > @
                      seq
                        xn.write 200
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xi)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xn).add 1)) ((xd)))))
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((xn)) (2))))) ((((xMutateCmp)).apply ((xd)) (FALSE))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xn)) ((xd)))
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((xn)) (2))))) ((((xBadCmp)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xn)) ((xd)))
                xtest_contains_count_stop_crashes.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > x_
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xd).xclear)).apply)
                                  (((unsupported)).apply ((xNotImplemented)))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ((((xA)).apply)) ((((xA)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          x_.write (((unsupported)).apply (3) ((xd)))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ((((xA)).apply)) ((((xA)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          x_.write ((((xd).xcount)).apply (3))
                xtest_extend.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xextend)) (1))
                        bogusForceDataize.write ((((xd).xextend)).apply ("bcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ("abcd"))))
                        bogusForceDataize.write ((((xd).xextend)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ("abcdabcd"))))
                xtest_add.write
                  [xself]
                    memory > xd
                    memory > xg
                    memory > xh
                    memory > xf
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        xe.write (((xdeque)).apply ("abc"))
                        xf.write (((xdeque)).apply ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).add (xd))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).add (xf))) ((((xdeque)).apply ("abcdef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).add (xe))) ((((xdeque)).apply ("abcabc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).add (xd))) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).add (xe))) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xd).add (xd))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xe).add (xd))) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xd).add (xe))) ((((xdeque)).apply ("abc"))))
                        xg.write (((unsupported)).apply ((xdeque)) ("abcdef") (4))
                        xh.write (((xdeque)).apply ("gh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xg).add (xh))) ((((xdeque)).apply ("efgh"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                xtest_iadd.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("a"))
                        (((unsupported)).apply ((xd)) ("bcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ("abcd"))))
                        (((unsupported)).apply ((xd)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ("abcdabcd"))))
                xtest_extendleft.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xextendleft)) (1))
                        bogusForceDataize.write ((((xd).xextendleft)).apply ("bcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xreversed)).apply ("abcd"))))))
                        bogusForceDataize.write ((((xd).xextendleft)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ("abcddcba"))))
                        xd.write (((xdeque)).apply)
                        bogusForceDataize.write ((((xd).xextendleft)).apply ((((xrange)).apply (1000))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xreversed)).apply ((((xrange)).apply (1000))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) (((xd).xextendleft)) ((((xfail)).apply)))
                xtest_getitem.write
                  [xself]
                    memory > xn
                    memory > xd
                    memory > xl
                    seq > @
                      seq
                        xn.write 200
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        xl.write (((xlist)).apply ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          seq
                            bogusForceDataize.write ((((xd).xpopleft)).apply)
                            bogusForceDataize.write ((((xl).xpop)).apply (0))
                            (((((xrandom).xrandom)).apply).less 0.5).if
                              seq
                                bogusForceDataize.write ((((xd).xappend)).apply ((xi)))
                                bogusForceDataize.write ((((xl).xappend)).apply ((xi)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply ((1.sub (((xlen)).apply ((xl))))) ((((xlen)).apply ((xl)))))))
                              (((unsupported)).apply (((((unsupported)).apply ((xd)) ((xj))).eq (((unsupported)).apply ((xl)) ((xj))))))
                        xd.write (((xdeque)).apply ("superman"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (0))) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((1.neg)))) ("n"))
                        xd.write (((xdeque)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).x__getitem__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).x__getitem__)) ((1.neg)))
                xtest_index.write
                  [xself]
                    memory > xd
                    memory > xelements
                    memory > xnonelement
                    memory > xi
                    memory > xs
                    memory > xtarget
                    seq > @
                      seq
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply (1) (2) (30) (40) (200))))
                          seq
                            xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xindex)).apply ((xi)))) ((xi)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xd).xindex)).apply (((xn).add 1)))
                            xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((xn)) (2))))) ((((xMutateCmp)).apply ((xd)) (FALSE))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                              bogusForceDataize.write ((((xd).xindex)).apply ((xn)))
                            xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((xn)) (2))))) ((((xBadCmp)).apply)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                              bogusForceDataize.write ((((xd).xindex)).apply ((xn)))
                        xelements.write "ABCDEFGHI"
                        xnonelement.write "Z"
                        xd.write (((xdeque)).apply (((xelements).mul 2)))
                        xs.write (((xlist)).apply (((xelements).mul 2)))
                        (((unsupported)).apply ((xstart)) ((((xrange)).apply (((5.neg).sub ((((xlen)).apply ((xs))).mul 2))) ((5.add ((((xlen)).apply ((xs))).mul 2))))))
                          (((unsupported)).apply ((xstop)) ((((xrange)).apply (((5.neg).sub ((((xlen)).apply ((xs))).mul 2))) ((5.add ((((xlen)).apply ((xs))).mul 2))))))
                            (((unsupported)).apply ((xelement)) (((xelements).add "Z")))
                              (((unsupported)).apply ((xValueError)))
                                xtarget.write ((((xs).xindex)).apply ((xelement)) ((xstart)) ((xstop)))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                                  bogusForceDataize.write ((((xd).xindex)).apply ((xelement)) ((xstart)) ((xstop)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xindex)).apply ((xelement)) ((xstart)) ((xstop)))) ((xtarget)))
                        xd.write (((xdeque)).apply ((((xrange)).apply (0) (10000) (10))))
                        (((unsupported)).apply ((xstep)) ((((xrange)).apply (100))))
                          seq
                            xi.write ((((xd).xindex)).apply (8500) (700))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xi)))) (8500))
                            bogusForceDataize.write ((((xd).xrotate)).apply)
                xtest_index_bug_24913.write
                  [xself]
                    memory > xd
                    memory > xi
                    seq > @
                      seq
                        xd.write (((xdeque)).apply (("A".mul 3)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          xi.write ((((xd).xindex)).apply ("Hello world") (0) (4))
                xtest_insert.write
                  [xself]
                    memory > xelements
                    memory > xd
                    memory > xs
                    seq > @
                      seq
                        xelements.write "ABCDEFGHI"
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((5.neg).sub ((((xlen)).apply ((xelements))).mul 2))) ((5.add ((((xlen)).apply ((xelements))).mul 2))))))
                          seq
                            xd.write (((xdeque)).apply ("ABCDEFGHI"))
                            xs.write (((xlist)).apply ("ABCDEFGHI"))
                            bogusForceDataize.write ((((xd).xinsert)).apply ((xi)) ("Z"))
                            bogusForceDataize.write ((((xs).xinsert)).apply ((xi)) ("Z"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((xs)))
                xtest_insert_bug_26194.write
                  [xself]
                    memory > xelements
                    memory > xd
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "ABC"
                        xd.write (((unsupported)).apply ((xdeque)) ((xdata)) ((((xlen)).apply ((xdata)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          bogusForceDataize.write ((((xd).xinsert)).apply (2) ("None: is there a None literal in the EO language?"))
                        xelements.write "ABCDEFGHI"
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((((xlen)).apply ((xelements))).neg)) ((((xlen)).apply ((xelements)))))))
                          seq
                            xd.write (((unsupported)).apply ((xdeque)) ((xelements)) (((((xlen)).apply ((xelements))).add 1)))
                            bogusForceDataize.write ((((xd).xinsert)).apply ((xi)) ("Z"))
                            ((xi).geq 0).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xi)))) ("Z"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (((xi).sub 1)))) ("Z"))
                xtest_imul.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((10.neg)) ((1.neg)) (0) (1) (2) (10) (1000))))
                          seq
                            xd.write (((xdeque)).apply)
                            (((unsupported)).apply ((xd)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xd).xmaxlen)))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((10.neg)) ((1.neg)) (0) (1) (2) (10) (1000))))
                          seq
                            xd.write (((xdeque)).apply ("a"))
                            (((unsupported)).apply ((xd)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply (("a".mul (xn))))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xd).xmaxlen)))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((10.neg)) ((1.neg)) (0) (1) (2) (10) (499) (500) (501) (1000))))
                          seq
                            xd.write (((xdeque)).apply ("a") (500))
                            (((unsupported)).apply ((xd)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply (("a".mul (((xmin)).apply ((xn)) (500)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xmaxlen)) (500))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((10.neg)) ((1.neg)) (0) (1) (2) (10) (1000))))
                          seq
                            xd.write (((xdeque)).apply ("abcdef"))
                            (((unsupported)).apply ((xd)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply (("abcdef".mul (xn))))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xd).xmaxlen)))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((10.neg)) ((1.neg)) (0) (1) (2) (10) (499) (500) (501) (1000))))
                          seq
                            xd.write (((xdeque)).apply ("abcdef") (500))
                            (((unsupported)).apply ((xd)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply ((((unsupported)).apply (("abcdef".mul (xn))) ((((unsupported)).apply ((500.neg)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xmaxlen)) (500))
                xtest_mul.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul (5.neg))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 0)) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 1)) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 2)) ((((xdeque)).apply ("abcabc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 3)) ((((xdeque)).apply ("abcabcabc"))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xd).mul 1)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeque)).apply).mul 0)) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeque)).apply).mul 1)) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeque)).apply).mul 5)) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((5.neg).mul (xd))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.mul (xd))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.mul (xd))) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((2.mul (xd))) ((((xdeque)).apply ("abcabc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((3.mul (xd))) ((((xdeque)).apply ("abcabcabc"))))
                        xd.write (((unsupported)).apply ((xdeque)) ("abc") (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul (5.neg))) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 0)) ((((xdeque)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 1)) ((((xdeque)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 2)) ((((xdeque)).apply ("bcabc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).mul 30)) ((((xdeque)).apply ("bcabc"))))
                xtest_setitem.write
                  [xself]
                    memory > xn
                    memory > xd
                    memory > xl
                    seq > @
                      seq
                        xn.write 200
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((10.mul (xi))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply ((10.mul (xi))) ((xi)) ((((xrange)).apply ((xn)))))))
                        xl.write (((xlist)).apply ((xd)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((1.sub (xn))) (0) ((1.neg)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((7.mul (xi))))
                            (((unsupported)).apply ((((unsupported)).apply ((xl)) ((xi)))) ((7.mul (xi))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((xl)))
                xtest_delitem.write
                  [xself]
                    memory > xn
                    memory > xj
                    memory > xval
                    memory > xd
                    seq > @
                      seq
                        xn.write 500
                        xd.write (((xdeque)).apply ((((xrange)).apply ((xn)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).x__delitem__)) ((((xn).neg).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).x__delitem__)) ((xn)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (((xn).sub (xi))))
                            xj.write ((((xrandom).xrandrange)).apply (((((xlen)).apply ((xd))).neg)) ((((xlen)).apply ((xd)))))
                            xval.write (((unsupported)).apply ((xd)) ((xj)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xval)) ((xd)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xj)))))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xval)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                xtest_reverse.write
                  [xself]
                    memory > xn
                    memory > xd
                    memory > xr
                    memory > xdata
                    seq > @
                      seq
                        xn.write 500
                        xdata.write (((unsupported)).apply (((((xrandom).xrandom)).apply)) ((xi)) ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          seq
                            xd.write (((xdeque)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xi)))))))
                            xr.write ((((xd).xreverse)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xreversed)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xi)))))))))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xr)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xd).xreverse)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xi)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xreverse)) (1))
                xtest_rotate.write
                  [xself]
                    memory > xd
                    memory > xs
                    memory > xdr
                    memory > xe
                    memory > xn
                    seq > @
                      seq
                        xs.write (((xtuple)).apply ("abcde"))
                        xn.write (((xlen)).apply ((xs)))
                        xd.write (((xdeque)).apply ((xs)))
                        bogusForceDataize.write ((((xd).xrotate)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xd)))) ("eabcd"))
                        xd.write (((xdeque)).apply ((xs)))
                        bogusForceDataize.write ((((xd).xrotate)).apply ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xd)))) ("bcdea"))
                        bogusForceDataize.write ((((xd).xrotate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((xs)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xn).mul 3)))))
                          seq
                            xd.write (((xdeque)).apply ((xs)))
                            xe.write (((xdeque)).apply ((xd)))
                            bogusForceDataize.write ((((xd).xrotate)).apply ((xi)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply ((xi)))))
                              bogusForceDataize.write ((((xe).xrotate)).apply (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((((xtuple)).apply ((xe)))))
                            bogusForceDataize.write ((((xd).xrotate)).apply (((xi).neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((xs)))
                            bogusForceDataize.write ((((xe).xrotate)).apply (((xn).sub (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xe)))) ((xs)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xn).mul 3)))))
                          seq
                            xd.write (((xdeque)).apply ((xs)))
                            xe.write (((xdeque)).apply ((xd)))
                            bogusForceDataize.write ((((xd).xrotate)).apply (((xi).neg)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply ((xi)))))
                              bogusForceDataize.write ((((xe).xrotate)).apply ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((((xtuple)).apply ((xe)))))
                            bogusForceDataize.write ((((xd).xrotate)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((xs)))
                            bogusForceDataize.write ((((xe).xrotate)).apply (((xi).sub (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xe)))) ((xs)))
                        xd.write (((xdeque)).apply ((xs)))
                        xe.write (((xdeque)).apply ((xs)))
                        bogusForceDataize.write ((((xe).xrotate)).apply (((xBIG).add 17)))
                        xdr.write ((xd).xrotate)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xBIG).add 17)))))
                          bogusForceDataize.write (((xdr)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((xd)))) ((((xtuple)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xrotate)) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xrotate)) (1) (10))
                        xd.write (((xdeque)).apply)
                        bogusForceDataize.write ((((xd).xrotate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply)))
                xtest_len.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (2))
                        bogusForceDataize.write ((((xd).xpopleft)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (1))
                        bogusForceDataize.write ((((xd).xpop)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).xpop)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        bogusForceDataize.write ((((xd).xappend)).apply ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (1))
                        bogusForceDataize.write ((((xd).xappendleft)).apply ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (2))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                xtest_underflow.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).xpop)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).xpopleft)))
                xtest_clear.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ((((xrange)).apply (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (100))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((unsupported)).apply)))
                xtest_remove.write
                  [xself]
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("abcdefghcij"))
                        bogusForceDataize.write ((((xd).xremove)).apply ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply ("abdefghcij"))))
                        bogusForceDataize.write ((((xd).xremove)).apply ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply ("abdefghij"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xd).xremove)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply ("abdefghij"))))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ("a") ("b") ((((xBadCmp)).apply)) ("c"))))
                        xe.write (((xdeque)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xd).xremove)) ("c"))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((xzip)).apply ((xd)) ((xe)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xx)) ((xy)))))
                        (((unsupported)).apply ((xmatch)) ((((unsupported)).apply (TRUE) (FALSE))))
                          seq
                            xd.write (((xdeque)).apply ((((unsupported)).apply ("ab"))))
                            bogusForceDataize.write ((((xd).xextend)).apply ((((unsupported)).apply ((((xMutateCmp)).apply ((xd)) ((xmatch)))) ("c"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xd).xremove)) ("c"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xdeque)).apply)))
                xtest_repr.write
                  [xself]
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ((((xrange)).apply (200))))
                        xe.write (((xeval)).apply ((((xrepr)).apply ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        bogusForceDataize.write ((((xd).xappend)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("...") ((((xrepr)).apply ((xd)))))
                xtest_print.write
                  [xself]
                    memory > xd
                    memory > xfo
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ((((xrange)).apply (200))))
                        bogusForceDataize.write ((((xd).xappend)).apply ((xd)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                            xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("w"))
                            (((unsupported)).apply ((xprint)) ((xd)) ((xfo)) (""))
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            xfo.write (((xopen)).apply (((xsupport).xTESTFN)) ("r"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfo).xread)).apply)) ((((xrepr)).apply ((xd)))))
                          seq
                            bogusForceDataize.write ((((xfo).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_init.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdeque)) ("abc") (2) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdeque)) (1))
                xtest_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((((xdeque)).apply ("abc"))))
                xtest_long_steadystate_queue_popleft.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      (((unsupported)).apply ((xsize)) ((((unsupported)).apply (0) (1) (2) (100) (1000))))
                        seq
                          xd.write (((xdeque)).apply ((((xrange)).apply ((xsize)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappend)) (((xd).xpopleft)))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xsize)) ((xBIG)))))
                            seq
                              bogusForceDataize.write (((xappend)).apply ((xi)))
                              xx.write (((xpop)).apply)
                              ((xx).neq ((xi).sub (xsize))).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (((xi).sub (xsize))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply (((xBIG).sub (xsize))) ((xBIG)))))))
                xtest_long_steadystate_queue_popright.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      (((unsupported)).apply ((xsize)) ((((unsupported)).apply (0) (1) (2) (100) (1000))))
                        seq
                          xd.write (((xdeque)).apply ((((xreversed)).apply ((((xrange)).apply ((xsize)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappendleft)) (((xd).xpop)))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xsize)) ((xBIG)))))
                            seq
                              bogusForceDataize.write (((xappend)).apply ((xi)))
                              xx.write (((xpop)).apply)
                              ((xx).neq ((xi).sub (xsize))).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (((xi).sub (xsize))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((((xlist)).apply ((xd)))))))) ((((xlist)).apply ((((xrange)).apply (((xBIG).sub (xsize))) ((xBIG)))))))
                xtest_big_queue_popleft.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappend)) (((xd).xpopleft)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          bogusForceDataize.write (((xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          seq
                            xx.write (((xpop)).apply)
                            ((xx).neq (xi)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xi)))
                xtest_big_queue_popright.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappendleft)) (((xd).xpop)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          bogusForceDataize.write (((xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          seq
                            xx.write (((xpop)).apply)
                            ((xx).neq (xi)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xi)))
                xtest_big_stack_right.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappend)) (((xd).xpop)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          bogusForceDataize.write (((xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xBIG)))))))
                          seq
                            xx.write (((xpop)).apply)
                            ((xx).neq (xi)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                xtest_big_stack_left.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xappend)) ((xpop)))) ((((unsupported)).apply (((xd).xappendleft)) (((xd).xpopleft)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xBIG)))))
                          bogusForceDataize.write (((xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xBIG)))))))
                          seq
                            xx.write (((xpop)).apply)
                            ((xx).neq (xi)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                xtest_roundtrip_iter_init.write
                  [xself]
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ((((xrange)).apply (200))))
                        xe.write (((xdeque)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                xtest_pickle.write
                  [xself]
                    memory > xe
                    memory > xs
                    seq > @
                      (((unsupported)).apply ((xd)) ((((unsupported)).apply ((((xdeque)).apply ((((xrange)).apply (200))))) ((((xdeque)).apply ((((xrange)).apply (200))) (100))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xs.write ((((xpickle).xdumps)).apply ((xd)) ((xi)))
                            xe.write ((((xpickle).xloads)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xe)))) ((((xid)).apply ((xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xe)))) ((((xlist)).apply ((xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xmaxlen)) (((xd).xmaxlen)))
                xtest_pickle_recursive.write
                  [xself]
                    memory > xe
                    seq > @
                      (((unsupported)).apply ((xd)) ((((unsupported)).apply ((((xdeque)).apply ("abc"))) ((((xdeque)).apply ("abc") (3))))))
                        seq
                          bogusForceDataize.write ((((xd).xappend)).apply ((xd)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            seq
                              xe.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xd)) ((xi)))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xe)))) ((((xid)).apply ((xd)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xid)).apply ((((unsupported)).apply ((xe)) ((1.neg)))))) ((((xid)).apply ((xe)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xmaxlen)) (((xd).xmaxlen)))
                xtest_iterator_pickle.write
                  [xself]
                    memory > xitorg
                    memory > xorig
                    memory > xdump
                    memory > xdata
                    seq > @
                      seq
                        xorig.write (((xdeque)).apply ((((xrange)).apply (200))))
                        xdata.write (((unsupported)).apply (((xi).mul 1.01)) ((xi)) ((xorig)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xitorg.write (((xiter)).apply ((xorig)))
                            xdump.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorg)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xd)))) (((((xpickle).xloads)).apply ((xdump)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xx)))) ((((xenumerate)).apply ((xdata)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((xdata)))
                            bogusForceDataize.write (((xnext)).apply ((xitorg)))
                            xdump.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorg)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xd)))) (((((xpickle).xloads)).apply ((xdump)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xx)))) ((((xenumerate)).apply ((xdata)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (1) ((((xlen)).apply ((xdata)))))))
                              bogusForceDataize.write (((xnext)).apply ((xitorg)))
                            xdump.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorg)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xd)))) (((((xpickle).xloads)).apply ((xdump)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xx)))) ((((xenumerate)).apply ((xdata)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xitorg)))
                            xdump.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorg)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xd)))) (((((xpickle).xloads)).apply ((xdump)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xx)))) ((((xenumerate)).apply ((xdata)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                xtest_deepcopy.write
                  [xself]
                    memory > xmut
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xmut.write (((unsupported)).apply (10))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ((xmut)))))
                        xe.write ((((xcopy).xdeepcopy)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmut)) (0))) (11))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                xtest_copy.write
                  [xself]
                    memory > xs
                    memory > xmut
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xmut.write (((unsupported)).apply (10))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ((xmut)))))
                        xe.write ((((xcopy).xcopy)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmut)) (0))) (11))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          (((unsupported)).apply ((xmaxlen)) ((((xrange)).apply ((1.neg)) (6))))
                            seq
                              xs.write (((unsupported)).apply (((((xrandom).xrandom)).apply)) ((xj)) ((((xrange)).apply ((xi)))))
                              xd.write (((xmaxlen).eq (1.neg)).if (((xdeque)).apply ((xs))) (((xdeque)).apply ((xs)) ((xmaxlen))))
                              xe.write ((((xd).xcopy)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((xe)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xmaxlen)) (((xe).xmaxlen)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) ((((xzip)).apply ((xd)) ((xe)))))))))
                xtest_copy_method.write
                  [xself]
                    memory > xmut
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xmut.write (((unsupported)).apply (10))
                        xd.write (((xdeque)).apply ((((unsupported)).apply ((xmut)))))
                        xe.write ((((xd).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmut)) (0))) (11))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                xtest_reversed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("abcd") ((((xrange)).apply (2000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((((xdeque)).apply ((xs)))))))) ((((xlist)).apply ((((xreversed)).apply ((xs)))))))
                xtest_reversed_new.write
                  [xself]
                    memory > xklass
                    seq > @
                      seq
                        xklass.write (((xtype)).apply ((((xreversed)).apply ((((xdeque)).apply)))))
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("abcd") ((((xrange)).apply (2000))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xklass)).apply ((((xdeque)).apply ((xs)))))))) ((((xlist)).apply ((((xreversed)).apply ((xs)))))))
                xtest_gc_doesnt_blowup.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xd.write (((xdeque)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            bogusForceDataize.write ((((xd).xappend)).apply (1))
                            bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_container_iterator.write
                  [xself]
                    memory > xref
                    memory > xcontainer
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (2))))
                          seq
                            xobj.write (((xC)).apply)
                            xref.write ((((xweakref).xref)).apply ((xobj)))
                            ((xi).eq 0).if
                              xcontainer.write (((xdeque)).apply ((((unsupported)).apply ((xobj)) (1))))
                              xcontainer.write (((xreversed)).apply ((((xdeque)).apply ((((unsupported)).apply ((xobj)) (1))))))
                            (((unsupported)).apply (((xobj).xx)) ((((xiter)).apply ((xcontainer)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcontainer)))))
                            bogusForceDataize.write ((((xgc).xcollect)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xref)).apply)) ("None: is there a None literal in the EO language?"))) ("Cycle was not collected"))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_sizeof.write
                  [xself]
                    memory > xblocksize
                    memory > xBLOCKLEN
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      (((unsupported)).apply)
                        xBLOCKLEN.write 64
                        xbasesize.write ((((xsupport).xcalcvobjsize)).apply ("2P4nP"))
                        xblocksize.write ((((xstruct).xcalcsize)).apply (("P%dPP".mod (xBLOCKLEN))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xobject).x__sizeof__)).apply ((((xdeque)).apply)))) ((xbasesize)))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)).apply ((((xdeque)).apply)) (((xbasesize).add (xblocksize))))
                        bogusForceDataize.write (((xcheck)).apply ((((xdeque)).apply ("a"))) (((xbasesize).add (xblocksize))))
                        bogusForceDataize.write (((xcheck)).apply ((((xdeque)).apply (("a".mul ((xBLOCKLEN).sub 1))))) (((xbasesize).add (xblocksize))))
                        bogusForceDataize.write (((xcheck)).apply ((((xdeque)).apply (("a".mul (xBLOCKLEN))))) (((xbasesize).add (2.mul (xblocksize)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xdeque)).apply (("a".mul (42.mul (xBLOCKLEN)))))) (((xbasesize).add (43.mul (xblocksize)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply (((xseq_tests).xSequence)) (((xseq_tests).xIterFunc)) (((xseq_tests).xIterGen)) (((xseq_tests).xIterFuncStop)) (((xseq_tests).xitermulti)) (((xseq_tests).xiterfunc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xdeque)).apply ((((xg)).apply ((xs)))))))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdeque)) (((((xseq_tests).xIterNextOnly)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdeque)) (((((xseq_tests).xIterNoNext)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xdeque)) (((((xseq_tests).xIterGenExc)).apply ((xs)))))
                xtest_iter_with_altered_data.write
                  [xself]
                    memory > xd
                    memory > xit
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("abcdefg"))
                        xit.write (((xiter)).apply ((xd)))
                        bogusForceDataize.write ((((xd).xpop)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xnext)) ((xit)))
                xtest_runtime_error_on_empty_deque.write
                  [xself]
                    memory > xd
                    memory > xit
                    seq > @
                      seq
                        xd.write (((xdeque)).apply)
                        xit.write (((xiter)).apply ((xd)))
                        bogusForceDataize.write ((((xd).xappend)).apply (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xnext)) ((xit)))
            (((unsupported)).apply ((xdeque)))
            (((unsupported)).apply ((xdeque)))
              x__iter__.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((xTypeError)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xd
                    memory > xleft
                    memory > xright
                    seq > @
                      seq
                        xd.write (((xDeque)).apply ((((xrange)).apply (25))))
                        bogusForceDataize.write ((((xd).x__init__)).apply ((((xrange)).apply (200))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (200) (400))))
                          bogusForceDataize.write ((((xd).xappend)).apply ((xi)))
                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((200.neg)) (0))))))
                          bogusForceDataize.write ((((xd).xappendleft)).apply ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply ((200.neg)) (400))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (600))
                        xleft.write (((unsupported)).apply (((((xd).xpopleft)).apply)) ((xi)) ((((xrange)).apply (250))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xleft)) ((((xlist)).apply ((((xrange)).apply ((200.neg)) (50))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply (50) (400))))))
                        xright.write (((unsupported)).apply (((((xd).xpop)).apply)) ((xi)) ((((xrange)).apply (250))))
                        bogusForceDataize.write ((((xright).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xright)) ((((xlist)).apply ((((xrange)).apply (150) (400))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((((xrange)).apply (50) (150))))))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                xtest_copy_pickle.write
                  [xself]
                    memory > xs
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xDeque)).apply ("abc"))
                        xe.write ((((xd).x__copy__)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        xe.write (((xDeque)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xs.write ((((xpickle).xdumps)).apply ((xd)) ((xproto)))
                            xe.write ((((xpickle).xloads)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        xd.write (((unsupported)).apply ((xDeque)) ("abcde") (4))
                        xe.write ((((xd).x__copy__)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        xe.write (((xDeque)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xs.write ((((xpickle).xdumps)).apply ((xd)) ((xproto)))
                            xe.write ((((xpickle).xloads)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xd)))) ((((xid)).apply ((xe)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xd)))) ((((xtype)).apply ((xe)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xe)))))
                xtest_pickle_recursive.write
                  [xself]
                    memory > xe
                    memory > xdd
                    memory > xee
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          (((unsupported)).apply ((xd)) ((((unsupported)).apply ((((xDeque)).apply ("abc"))) ((((xDeque)).apply ("abc") (3))))))
                            seq
                              bogusForceDataize.write ((((xd).xappend)).apply ((xd)))
                              xe.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xd)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xe)))) ((((xid)).apply ((xd)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xe)))) ((((xtype)).apply ((xd)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xmaxlen)) (((xd).xmaxlen)))
                              xdd.write ((((xd).xpop)).apply)
                              xee.write ((((xe).xpop)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xid)).apply ((xee)))) ((((xid)).apply ((xe)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xd)))
                              (((unsupported)).apply (((xd).xx)) ((xd)))
                              xe.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xd)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xid)).apply (((xe).xx)))) ((((xid)).apply ((xe)))))
                          (((unsupported)).apply ((xd)) ((((unsupported)).apply ((((xDequeWithBadIter)).apply ("abc"))) ((((xDequeWithBadIter)).apply ("abc") (2))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xpickle).xdumps)) ((xd)) ((xproto)))
                xtest_weakref.write
                  [xself]
                    memory > xd
                    memory > xp
                    seq > @
                      seq
                        xd.write (((xdeque)).apply ("gallahad"))
                        xp.write ((((xweakref).xproxy)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xp)))) ((((xstr)).apply ((xd)))))
                        xd.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xstr)) ((xp)))
                xtest_strange_subclass.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdeque)))
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply)))))
                        xd1.write (((xX)).apply ((((unsupported)).apply (1) (2) (3))))
                        xd2.write (((xX)).apply ((((unsupported)).apply (4) (5) (6))))
                        unsupported
                xtest_bug_31608.write
                  [xself]
                    memory > xbad___new__
                    memory > xd
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdeque)))
                        xd.write (((xX)).apply)
                        xbad___new__.write
                          [xcls]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (42))))
                        (((unsupported)).apply (((xX).x__new__)) ((xbad___new__)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
            (((unsupported)).apply ((xdeque)))
              x__init__.write
                [xself xnewarg]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xdeque).x__init__)).apply ((xself)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_subclass_with_kwargs.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((xSubclassWithKwargs)) (1))
            (((unsupported)).apply (((xseq_tests).xCommonTest)))
              seq
                xtype2test.write (xdeque)
                xtest_getitem.write
                  [xself]
                    seq > @
                xtest_getslice.write
                  [xself]
                    seq > @
                xtest_subscript.write
                  [xself]
                    seq > @
                xtest_free_after_iterating.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xskipTest)).apply ("Exhausted deque iterator doesn't free a deque"))
            xlibreftest.write (((unsupported)).apply)
            x__test__.write (((unsupported)).apply ("libreftest") ((xlibreftest)))
            xtest_main.write
              [xverbose]
                memory > xtest_classes
                memory > xcounts
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xtest_classes.write (((unsupported)).apply ((xTestBasic)) ((xTestVariousIteratorArgs)) ((xTestSubclass)) ((xTestSubclassWithKwargs)) ((xTestSequence)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtest_classes)))))
                    ((xverbose).and (((xhasattr)).apply ((xsys)) ("gettotalrefcount"))).if
                      seq
                        (((unsupported)).apply)
                        xcounts.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xcounts)))))))
                          seq
                            bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtest_classes)))))
                            bogusForceDataize.write ((((xgc).xcollect)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xcounts)) ((xi)))) (((((xsys).xgettotalrefcount)).apply)))
                        bogusForceDataize.write (((xprint)).apply ((xcounts)))
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((xtest_deque)) ((xverbose)))
            ((x__name__).eq "__main__").if
              (((unsupported)).apply ((xtest_main)) (TRUE))