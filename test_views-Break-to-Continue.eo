memory > xNoReverseMatch
memory > xhash_string
memory > xmail
memory > xPasswordResetConfirmClient
memory > xfirst
memory > xreverse
memory > xContentType
memory > xdatetime
memory > xLoginView
memory > xsecond
memory > xlist
memory > xBACKEND_SESSION_KEY
memory > xlogout_then_login
memory > xREDIRECT_FIELD_NAME
memory > xCsrfViewMiddleware
memory > xClient
memory > xValueError
memory > ximport_module
memory > x_request
memory > xSessionMiddleware
memory > xquote
memory > xstr
memory > xHttpRequest
memory > xsalt
memory > xapps
memory > xSESSION_KEY
memory > xTestCase
memory > x_kwargs
memory > xurl
memory > xCustomUser
memory > x_
memory > xAUTH_TEMPLATES
memory > xconnection
memory > xuuidb64
memory > xpath
memory > xSetPasswordForm
memory > xCustomUserPasswordResetTest
memory > xHttpResponse
memory > xsettings
memory > xurlsafe_base64_encode
memory > xre
memory > xredirect_to_login
memory > xUUIDUser
memory > xPermission
memory > xRemovedInDjango50Warning
memory > xAuthViewsTestCase
memory > xsuper
memory > xAuthenticationForm
memory > xoverride_settings
memory > xgood_url
memory > xargs
memory > xitertools
memory > xINTERNAL_RESET_SESSION_TOKEN
memory > xRedirectCycleError
memory > xname
memory > xLogEntry
memory > xImproperlyConfigured
memory > x_uuidb64_
memory > xkwargs
memory > xuser
memory > xurljoin
memory > xalgo
memory > xUser
memory > xlen
memory > xbad_url
memory > xget_token
memory > xPasswordChangeForm
memory > xRequestSite
[] > test_views
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_14377
        memory > xtest_confirm_overflow_user
        memory > xtest_email_found_custom_from
        memory > xtest_redirect_to_login_with_lazy_and_unicode
        memory > xget_perm
        memory > xtest_lazy_login_url
        memory > xtest_logout_with_get_raises_deprecation_warning
        memory > xtest_missing_kwargs
        memory > x_read_signup_email
        memory > xget_user_data
        memory > xtest_password_change_redirect_custom
        memory > xtest_remote_login_url
        memory > xtest_reset_redirect_default
        memory > xtest_user_change_password_passes_user_to_has_change_permission
        memory > xtest_session_key_flushed_on_login_after_password_change
        memory > xfail_login
        memory > x_test_confirm_start
        memory > xtest_confirm_login_post_reset_custom_backend
        memory > xtest_login_session_without_hash_session_key
        memory > xtest_login_redirect_url_overrides_get_default_redirect_url
        memory > xtest_logout_with_post
        memory > xtest_login_next_page
        memory > xtest_session_key_flushed_on_login
        memory > xtest_default_logout_then_login
        memory > xdont_redirect_url
        memory > xtest_user_change_different_user_password
        memory > xtest_default
        memory > xtest_permission_required_not_logged_in
        memory > xtest_confirm_different_passwords
        memory > xtest_redirect_loop
        memory > xtest_html_mail_template
        memory > xtest_permission_required_logged_in
        memory > xtest_logout_then_login_with_custom_login
        memory > xtest_redirect
        memory > xtest_invalid_link_if_going_directly_to_the_final_reset_password_url
        memory > xtest_https_login_url
        memory > xtest_default_logout_then_login_get
        memory > xtest_confirm_valid
        memory > xuser_email
        memory > xsetUpTestData
        memory > xconfirm_logged_out
        memory > xtest_password_change_fails_with_invalid_old_password
        memory > xtest_login_url_with_querystring
        memory > xtest_remote
        memory > xlogin
        memory > xtest_confirm_invalid_hash
        memory > xtest_login_get_default_redirect_url
        memory > xtest_success_url_allowed_hosts_same_host
        memory > xtest_redirect_param
        memory > xsetUp
        memory > xtest_logout_doesnt_cache
        memory > xtest_confirm_invalid_post
        memory > xtest_logout_default
        memory > xtest_email_found
        memory > xtest_password_change_done_succeeds
        memory > xdo_redirect_url
        memory > xtest_logout_preserve_language
        memory > xtest_standard_login_url
        memory > xtest_confirm_invalid_uuid
        memory > xtest_named_login_url
        memory > xtest_confirm_custom_reset_url_token
        memory > xtest_confirm_login_post_reset_already_logged_in
        memory > xtest_admin_password_change
        memory > xtest_password_change_redirect_default
        memory > xtest_security_check
        memory > xtest_user_change_password
        memory > xtest_redirect_to_login_with_lazy
        memory > xtest_view_user_password_is_readonly
        memory > xtest_security_check_https
        memory > xtest_password_change_done_fails
        memory > xlogout
        memory > xtest_confirm_redirect_default
        memory > xtest_confirm_redirect_custom_named
        memory > xtest_changelist_disallows_password_lookups
        memory > xtest_logout_with_next_page_specified
        memory > xtest_confirm_custom_reset_url_token_link_redirects_to_set_password_page
        memory > xtest_user_password_change_updates_session
        memory > xassertLoginRedirectURLEqual
        memory > xtest_password_change_redirect_custom_named
        memory > xassertLoginURLEquals
        memory > xtest_password_change_fails_with_mismatched_passwords
        memory > xtest_email_not_found
        memory > xtest_confirm_link_redirects_to_set_password_page
        memory > xtest_remote_login_url_with_next_querystring
        memory > xtest_logout_redirect_url_setting
        memory > xassertFormError
        memory > xtest_password_change_bad_url
        memory > xtest_login_form_contains_request
        memory > xtest_logout_with_custom_redirect_argument
        memory > xtest_user_not_change
        memory > xtest_confirm_redirect_custom
        memory > xtest_success_url_allowed_hosts_unsafe_host
        memory > xtest_logout_with_overridden_redirect_url
        memory > xtest_reset_custom_redirect_named
        memory > xtest_named
        memory > xtest_login_named_next_page_named
        memory > xtest_confirm_invalid_user
        memory > xtest_logout_with_named_redirect
        memory > xtest_reset_custom_redirect
        memory > xtest_redirect_url
        memory > xtest_login_csrf_rotate
        memory > xtest_guest
        memory > xtest_password_change_succeeds
        memory > xtest_login_redirect_url_overrides_next_page
        memory > xtest_logout_with_redirect_argument
        memory > xtest_poisoned_http_host
        memory > xtest_login_next_page_overrides_login_redirect_url_setting
        memory > xtest_confirm_complete
        memory > xtest_custom
        memory > xtest_user_change_email
        memory > xtest_success_url_allowed_hosts_safe_host
        memory > xtest_confirm_login_post_reset
        memory > xtest_confirm_display_user_from_form
        memory > xtest_extra_email_context
        memory > xtest_logout_redirect_url_named_setting
        memory > xtest_confirm_valid_custom_user
        memory > xtest_named_urls
        memory > xtest_confirm_invalid
        memory > xtest_current_site_in_context_after_login
        memory > xtest_poisoned_http_host_admin_site
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((((unsupported)).apply ("en") ("English"))))) ("en") ((xAUTH_TEMPLATES)) ("auth_tests.urls"))))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xu1)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("testclient") ("password") ("testclient@example.com"))))
                        (((unsupported)).apply (((xcls).xu3)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("staff") ("password") ("staffmember@example.com"))))
                xlogin.write
                  [xself xusername xpassword xurl]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ((xurl)) ((((unsupported)).apply ("username") ((xusername)) ("password") ((xpassword)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                        (((unsupported)).apply ((xresponse)))
                xlogout.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/admin/logout/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                xassertFormError.write
                  [xself xresponse xerror]
                    memory > xform_errors
                    seq > @
                      seq
                        unsupported
                        xform_errors.write (((xlist)).apply (((((xitertools).xchain)).apply ((((unsupported)).apply ((((((((unsupported)).apply (((xresponse).xcontext)) ("form")).xerrors).xvalues)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xstr)).apply ((xerror)))) ((xform_errors)))
            (((unsupported)).apply ((xAuthViewsTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("django.contrib.auth.urls"))))
              xtest_named_urls.write
                [xself]
                  memory > xexpected_named_urls
                  seq > @
                    seq
                      unsupported
                      xexpected_named_urls.write (((unsupported)).apply ((((unsupported)).apply ("login") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("logout") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("password_change") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("password_change_done") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("password_reset") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("password_reset_done") ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("password_reset_confirm") ((((unsupported)).apply)) ((((unsupported)).apply ("uidb64") ("aaaaaaa") ("token") ("1111-aaaaa"))))) ((((unsupported)).apply ("password_reset_complete") ((((unsupported)).apply)) ((((unsupported)).apply)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xargs)) ((xkwargs)))) ((xexpected_named_urls)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xname)))))
                          (((unsupported)).apply ((xNoReverseMatch)))
                            (((unsupported)).apply ((xreverse)) ((xname)) ((xargs)) ((xkwargs)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Reversal of url named '%s' failed with NoReverseMatch".mod (xname))))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xclient)) ((((xPasswordResetConfirmClient)).apply)))
                xtest_email_not_found.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/password_reset/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/") ((((unsupported)).apply ("email") ("not_a_real_email@email.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (0))
                xtest_email_found.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("http://") (((((unsupported)).apply (((xmail).xoutbox)) (0)).xbody)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsettings).xDEFAULT_FROM_EMAIL)) (((((unsupported)).apply (((xmail).xoutbox)) (0)).xfrom_email)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((((((unsupported)).apply (((xmail).xoutbox)) (0)).xmessage)).apply).xis_multipart)).apply)))
                xtest_extra_email_context.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset_extra_email_context/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Email email context: \"Hello!\"") (((((unsupported)).apply (((xmail).xoutbox)) (0)).xbody)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("http://custom.example.com/reset/") (((((unsupported)).apply (((xmail).xoutbox)) (0)).xbody)))
                xtest_html_mail_template.write
                  [xself]
                    memory > xmessage
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/html_email_template/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        xmessage.write ((((((unsupported)).apply (((xmail).xoutbox)) (0)).xmessage)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xmessage).xget_payload)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmessage).xis_multipart)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmessage).xget_payload)).apply (0)).xget_content_type)).apply)) ("text/plain"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmessage).xget_payload)).apply (1)).xget_content_type)).apply)) ("text/html"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<html>") ((((((((xmessage).xget_payload)).apply (0)).xget_payload)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<html>") ((((((((xmessage).xget_payload)).apply (1)).xget_payload)).apply)))
                xtest_email_found_custom_from.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset_from_email/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("staffmember@example.com") (((((unsupported)).apply (((xmail).xoutbox)) (0)).xfrom_email)))
                xtest_poisoned_http_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.security.DisallowedHost") ("ERROR"))))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/password_reset/") ((((unsupported)).apply ("email") ("staffmember@example.com"))) ("www.example:dr.frankenstein@evil.tld"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (400))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (0))
                xtest_poisoned_http_host_admin_site.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.security.DisallowedHost") ("ERROR"))))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/admin_password_reset/") ((((unsupported)).apply ("email") ("staffmember@example.com"))) ("www.example:dr.frankenstein@evil.tld"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (400))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (0))
                x_test_confirm_start.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/password_reset/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        (((unsupported)).apply (((((xself).x_read_signup_email)).apply ((((unsupported)).apply (((xmail).xoutbox)) (0))))))
                x_read_signup_email.write
                  [xself xemail]
                    memory > xurlmatch
                    seq > @
                      seq
                        xurlmatch.write ((((xre).xsearch)).apply ("https?://[^/]*(/.*reset/S*)") (((xemail).xbody)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xurlmatch)) ("No URL found in sent email"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xurlmatch)) (0))) ((((unsupported)).apply ((xurlmatch)) (1))))))
                xtest_confirm_valid.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xget)).apply ((xpath)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Please enter your new password"))
                xtest_confirm_invalid.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write (((((unsupported)).apply ((xpath)) ((((unsupported)).apply ((5.neg))))).add ("0".mul 4)).add (((unsupported)).apply ((xpath)) ((1.neg))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xpath)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
                xtest_confirm_invalid_user.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/reset/123456/1-1/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
                xtest_confirm_overflow_user.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/reset/zzzzzzzzzzzzz/1-1/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
                xtest_confirm_invalid_post.write
                  [xself]
                    memory > xpath
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write (((((unsupported)).apply ((xpath)) ((((unsupported)).apply ((5.neg))))).add ("0".mul 4)).add (((unsupported)).apply ((xpath)) ((1.neg))))
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") (" anewpassword"))))
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("staffmember@example.com"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xu).xcheck_password)).apply ("anewpassword")).not)))
                xtest_confirm_invalid_hash.write
                  [xself]
                    memory > xu
                    memory > xoriginal_password
                    memory > xpath_parts
                    memory > xpath
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("staffmember@example.com"))
                        xoriginal_password.write ((xu).xpassword)
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath_parts.write ((((xpath).xsplit)).apply ("-"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath_parts)) ((1.neg)))) ((("0".mul 20).add "/")))
                        xpath.write ((("-".xjoin)).apply ((xpath_parts)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("validlink"))) (FALSE))
                        bogusForceDataize.write ((((xu).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoriginal_password)) (((xu).xpassword)))
                xtest_confirm_complete.write
                  [xself]
                    memory > xresponse
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("staffmember@example.com"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xu).xcheck_password)).apply ("anewpassword"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xINTERNAL_RESET_SESSION_TOKEN)) ((((xself).xclient).xsession)))
                        xresponse.write (((((xself).xclient).xget)).apply ((xpath)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
                xtest_confirm_different_passwords.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("x"))))
                        bogusForceDataize.write ((((xself).xassertFormError)).apply ((xresponse)) ((((unsupported)).apply (((xSetPasswordForm).xerror_messages)) ("password_mismatch"))))
                xtest_reset_redirect_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/done/") (FALSE))
                xtest_reset_custom_redirect.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/custom_redirect/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_reset_custom_redirect_named.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/custom_redirect/named/") ((((unsupported)).apply ("email") ("staffmember@example.com"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/") (FALSE))
                xtest_confirm_redirect_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/reset/done/") (FALSE))
                xtest_confirm_redirect_custom.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/custom/"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_confirm_redirect_custom_named.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/custom/named/"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/") (FALSE))
                xtest_confirm_custom_reset_url_token.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/custom/token/"))
                        (((unsupported)).apply ((((xself).xclient).xreset_url_token)) ("set-passwordcustom"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/reset/done/") (FALSE))
                xtest_confirm_login_post_reset.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/post_reset_login/"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/reset/done/") (FALSE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                xtest_confirm_login_post_reset_custom_backend.write
                  [xself]
                    memory > xbackend
                    memory > xresponse
                    memory > xpath
                    seq > @
                      (((unsupported)).apply)
                        xbackend.write "django.contrib.auth.backends.AllowAllUsersModelBackend"
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/post_reset_login_custom_backend/"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/reset/done/") (FALSE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xclient).xsession)) ((xBACKEND_SESSION_KEY)))) ((xbackend)))
                xtest_confirm_login_post_reset_already_logged_in.write
                  [xself]
                    memory > xresponse
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/post_reset_login/"))
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/reset/done/") (FALSE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                xtest_confirm_display_user_from_form.write
                  [xself]
                    memory > xusername
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xget)).apply ((xpath)))
                        xusername.write ((((unsupported)).apply ((((xUser).xobjects).xget)) ("staffmember@example.com")).xusername)
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) (("Hello, %s.".mod (xusername))))
                        xresponse.write (((((xself).xclient).xget)).apply ("/reset/zzzzzzzzzzzzz/1-1/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Hello, ."))
                xtest_confirm_link_redirects_to_set_password_page.write
                  [xself]
                    memory > xtoken
                    memory > xresponse
                    memory > xuuidb64
                    memory > xclient
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xclient.write (((xClient)).apply)
                        xresponse.write ((((xclient).xget)).apply ((xpath)))
                        xtoken.write (((unsupported)).apply ((((xresponse).xresolver_match).xkwargs)) ("token"))
                        xuuidb64.write (((unsupported)).apply ((((xresponse).xresolver_match).xkwargs)) ("uidb64"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) (("/reset/%s/set-password/".mod (xuuidb64))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xclient).xsession)) ("_password_reset_token"))) ((xtoken)))
                xtest_confirm_custom_reset_url_token_link_redirects_to_set_password_page.write
                  [xself]
                    memory > xuuidb64
                    memory > xpath
                    memory > xresponse
                    memory > xclient
                    memory > xtoken
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xpath.write ((((xpath).xreplace)).apply ("/reset/") ("/reset/custom/token/"))
                        xclient.write (((xClient)).apply)
                        xresponse.write ((((xclient).xget)).apply ((xpath)))
                        xtoken.write (((unsupported)).apply ((((xresponse).xresolver_match).xkwargs)) ("token"))
                        xuuidb64.write (((unsupported)).apply ((((xresponse).xresolver_match).xkwargs)) ("uidb64"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) (("/reset/custom/token/%s/set-passwordcustom/".mod (xuuidb64))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xclient).xsession)) ("_password_reset_token"))) ((xtoken)))
                xtest_invalid_link_if_going_directly_to_the_final_reset_password_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xuuidb64)) ((x_)))) ((((((((xpath).xstrip)).apply ("/")).xsplit)).apply ("/"))))
                        xresponse.write ((((((xClient)).apply).xget)).apply (("/reset/%s/set-password/".mod (xuuidb64))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
                xtest_missing_kwargs.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The URL path must contain 'uidb64' and 'token' parameters."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xclient).xget)).apply ("/reset/missing_parameters/"))
            (((unsupported)).apply ((xAuthViewsTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.CustomUser"))))
              seq
                xuser_email.write "staffmember@example.com"
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xu1)) ((((unsupported)).apply ((((xCustomUser).xcustom_objects).xcreate)) ("staffmember@example.com") (((((xdatetime).xdate)).apply (1976) (11) (8))))))
                        bogusForceDataize.write (((((xcls).xu1).xset_password)).apply ("password"))
                        bogusForceDataize.write (((((xcls).xu1).xsave)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xclient)) ((((xPasswordResetConfirmClient)).apply)))
                x_test_confirm_start.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_reset/") ((((unsupported)).apply ("email") (((xself).xuser_email)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        (((unsupported)).apply (((((xself).x_read_signup_email)).apply ((((unsupported)).apply (((xmail).xoutbox)) (0))))))
                x_read_signup_email.write
                  [xself xemail]
                    memory > xurlmatch
                    seq > @
                      seq
                        xurlmatch.write ((((xre).xsearch)).apply ("https?://[^/]*(/.*reset/S*)") (((xemail).xbody)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xurlmatch)) ("No URL found in sent email"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xurlmatch)) (0))) ((((unsupported)).apply ((xurlmatch)) (1))))))
                xtest_confirm_valid_custom_user.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xresponse.write (((((xself).xclient).xget)).apply ((xpath)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Please enter your new password"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpath)) ((((unsupported)).apply ("new_password1") ("anewpassword") ("new_password2") ("anewpassword"))))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/reset/done/"))
            (((unsupported)).apply ((xCustomUserPasswordResetTest)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.UUIDUser"))))
              seq
                x_test_confirm_start.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xUUIDUser).xobjects).xcreate_user)) (((xself).xuser_email)) ("foo") ("foo"))
                        (((unsupported)).apply (((((((xsuper)).apply).x_test_confirm_start)).apply)))
                xtest_confirm_invalid_uuid.write
                  [xself]
                    memory > xresponse
                    memory > xinvalid_uidb64
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpath)))) (((((xself).x_test_confirm_start)).apply)))
                        xinvalid_uidb64.write (((xurlsafe_base64_encode)).apply ("INVALID_UUID"))
                        (((unsupported)).apply ((((unsupported)).apply ((xfirst)) ((x_uuidb64_)) ((xsecond)))) ((((((((xpath).xstrip)).apply ("/")).xsplit)).apply ("/"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((("/".add ((("/".xjoin)).apply ((((unsupported)).apply ((xfirst)) ((xinvalid_uidb64)) ((xsecond)))))).add "/")))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("The password reset link was invalid"))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xfail_login.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/login/") ((((unsupported)).apply ("username") ("testclient") ("password") ("password"))))
                        bogusForceDataize.write ((((xself).xassertFormError)).apply ((xresponse)) (((((unsupported)).apply (((xAuthenticationForm).xerror_messages)) ("invalid_login")).mod (((unsupported)).apply ("username") (((((((xUser).x_meta).xget_field)).apply ("username")).xverbose_name))))))
                xlogout.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/logout/"))
                xtest_password_change_fails_with_invalid_old_password.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("donuts") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        bogusForceDataize.write ((((xself).xassertFormError)).apply ((xresponse)) ((((unsupported)).apply (((xPasswordChangeForm).xerror_messages)) ("password_incorrect"))))
                xtest_password_change_fails_with_mismatched_passwords.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("donuts"))))
                        bogusForceDataize.write ((((xself).xassertFormError)).apply ((xresponse)) ((((unsupported)).apply (((xSetPasswordForm).xerror_messages)) ("password_mismatch"))))
                xtest_password_change_succeeds.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        bogusForceDataize.write ((((xself).xfail_login)).apply)
                        (((unsupported)).apply (((xself).xlogin)) ("password1"))
                xtest_password_change_done_succeeds.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_change/done/") (FALSE))
                xtest_password_change_done_fails.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/password_change/done/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/login/?next=/password_change/done/") (FALSE))
                xtest_password_change_redirect_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_change/done/") (FALSE))
                xtest_password_change_redirect_custom.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/custom/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_password_change_redirect_custom_named.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/custom/named/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/") (FALSE))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              xtest_user_password_change_updates_session.write
                [xself]
                  memory > xoriginal_session_key
                  memory > xresponse
                  seq > @
                    seq
                      (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xlogin)).apply)
                      xoriginal_session_key.write ((((xself).xclient).xsession).xsession_key)
                      xresponse.write (((((xself).xclient).xpost)).apply ("/password_change/") ((((unsupported)).apply ("old_password") ("password") ("new_password1") ("password1") ("new_password2") ("password1"))))
                      bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/password_change/done/"))
                      bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xoriginal_session_key)) (((((xself).xclient).xsession).xsession_key)))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xtest_current_site_in_context_after_login.write
                  [xself]
                    memory > xsite
                    memory > xresponse
                    memory > xSite
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("login"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                        ((((xapps).xis_installed)).apply ("django.contrib.sites")).if
                          seq
                            xSite.write ((((xapps).xget_model)).apply ("sites.Site"))
                            xsite.write (((((xSite).xobjects).xget_current)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("site"))) ((xsite)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("site_name"))) (((xsite).xname)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("site"))) ((xRequestSite)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("form"))) ((xAuthenticationForm)))
                xtest_security_check.write
                  [xself]
                    memory > xsafe_url
                    memory > xgood_urls
                    memory > xresponse
                    memory > xnasty_url
                    memory > xlogin_url
                    memory > xbad_urls
                    seq > @
                      seq
                        xlogin_url.write (((xreverse)).apply ("login"))
                        xbad_urls.write (((unsupported)).apply ("http://example.com") ("http:///example.com") ("https://example.com") ("ftp://example.com") ("///example.com") ("//example.com") ("javascript:alert(\"XSS\")"))
                        (((unsupported)).apply ((xbad_url)) ((xbad_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_url)))))
                            seq
                              xnasty_url.write ("%(url)s?%(next)s=%(bad_url)s".mod (((unsupported)).apply ("url") ((xlogin_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("bad_url") ((((xquote)).apply ((xbad_url))))))
                              xresponse.write (((((xself).xclient).xpost)).apply ((xnasty_url)) ((((unsupported)).apply ("username") ("testclient") ("password") ("password"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xbad_url)) (((xresponse).xurl)) (("%s should be blocked".mod (xbad_url))))
                        xgood_urls.write (((unsupported)).apply ("/view/?param=http://example.com") ("/view/?param=https://example.com") ("/view?param=ftp://example.com") ("view/?param=//example.com") ("https://testserver/") ("HTTPS://testserver/") ("//testserver/") ("/url%20with%20spaces/"))
                        (((unsupported)).apply ((xgood_url)) ((xgood_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xgood_url)))))
                            seq
                              xsafe_url.write ("%(url)s?%(next)s=%(good_url)s".mod (((unsupported)).apply ("url") ((xlogin_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("good_url") ((((xquote)).apply ((xgood_url))))))
                              xresponse.write (((((xself).xclient).xpost)).apply ((xsafe_url)) ((((unsupported)).apply ("username") ("testclient") ("password") ("password"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((xgood_url)) (((xresponse).xurl)) (("%s should be allowed".mod (xgood_url))))
                xtest_security_check_https.write
                  [xself]
                    memory > xpost_data
                    memory > xnon_https_next_url
                    memory > xresponse
                    memory > xlogin_url
                    memory > xnot_secured_url
                    seq > @
                      seq
                        xlogin_url.write (((xreverse)).apply ("login"))
                        xnon_https_next_url.write "http://testserver/path"
                        xnot_secured_url.write ("%(url)s?%(next)s=%(next_url)s".mod (((unsupported)).apply ("url") ((xlogin_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("next_url") ((((xquote)).apply ((xnon_https_next_url))))))
                        xpost_data.write (((unsupported)).apply ("username") ("testclient") ("password") ("password"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ((xnot_secured_url)) ((xpost_data)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xresponse).xurl)) ((xnon_https_next_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xurl)) (((xsettings).xLOGIN_REDIRECT_URL)))
                xtest_login_form_contains_request.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/custom_request_auth_login/") ((((unsupported)).apply ("username") ("testclient") ("password") ("password"))))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) (((xsettings).xLOGIN_REDIRECT_URL)) (FALSE))
                xtest_login_csrf_rotate.write
                  [xself]
                    memory > xreq
                    memory > xtoken2
                    memory > xtoken1
                    memory > xcsrf_cookie
                    memory > xget_response
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xget_response.write
                          [xrequest]
                            seq > @
                              (((unsupported)).apply ((((xHttpResponse)).apply)))
                        xreq.write (((xHttpRequest)).apply)
                        bogusForceDataize.write ((((((xCsrfViewMiddleware)).apply ((xget_response))).xprocess_view)).apply ((xreq)) (((((xLoginView).xas_view)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xget_token)).apply ((xreq)))
                        xresp.write (((((xCsrfViewMiddleware)).apply (((((xLoginView).xas_view)).apply)))).apply ((xreq)))
                        xcsrf_cookie.write (((((xresp).xcookies).xget)).apply (((xsettings).xCSRF_COOKIE_NAME)) ("None: is there a None literal in the EO language?"))
                        xtoken1.write ((xcsrf_cookie).xcoded_value)
                        xreq.write (((xHttpRequest)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xreq).xCOOKIES)) (((xsettings).xCSRF_COOKIE_NAME)))) ((xtoken1)))
                        (((unsupported)).apply (((xreq).xmethod)) ("POST"))
                        (((unsupported)).apply (((xreq).xPOST)) ((((unsupported)).apply ("username") ("testclient") ("password") ("password") ("csrfmiddlewaretoken") ((xtoken1)))))
                        bogusForceDataize.write ((((((xSessionMiddleware)).apply ((xget_response))).xprocess_request)).apply ((xreq)))
                        bogusForceDataize.write ((((((xCsrfViewMiddleware)).apply ((xget_response))).xprocess_view)).apply ((xreq)) (((((xLoginView).xas_view)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xreq).xMETA)) ("SERVER_NAME"))) ("testserver"))
                        (((unsupported)).apply ((((unsupported)).apply (((xreq).xMETA)) ("SERVER_PORT"))) (80))
                        xresp.write (((((xCsrfViewMiddleware)).apply (((((xLoginView).xas_view)).apply)))).apply ((xreq)))
                        xcsrf_cookie.write (((((xresp).xcookies).xget)).apply (((xsettings).xCSRF_COOKIE_NAME)) ("None: is there a None literal in the EO language?"))
                        xtoken2.write ((xcsrf_cookie).xcoded_value)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xtoken1)) ((xtoken2)))
                xtest_session_key_flushed_on_login.write
                  [xself]
                    memory > xoriginal_session_key
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xoriginal_session_key.write ((((xself).xclient).xsession).xsession_key)
                        (((unsupported)).apply (((xself).xlogin)) ("staff"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xoriginal_session_key)) (((((xself).xclient).xsession).xsession_key)))
                xtest_session_key_flushed_on_login_after_password_change.write
                  [xself]
                    memory > xoriginal_session_key
                    memory > xuser
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xoriginal_session_key.write ((((xself).xclient).xsession).xsession_key)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoriginal_session_key)) (((((xself).xclient).xsession).xsession_key)))
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("testclient"))
                        bogusForceDataize.write ((((xuser).xset_password)).apply ("foobar"))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        (((unsupported)).apply (((xself).xlogin)) ("foobar"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xoriginal_session_key)) (((((xself).xclient).xsession).xsession_key)))
                xtest_login_session_without_hash_session_key.write
                  [xself]
                    memory > xoriginal_session_key
                    memory > xuser
                    memory > xsession
                    memory > xengine
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("testclient"))
                        xengine.write (((ximport_module)).apply (((xsettings).xSESSION_ENGINE)))
                        xsession.write ((((xengine).xSessionStore)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsession)) ((xSESSION_KEY)))) (((xuser).xid)))
                        bogusForceDataize.write ((((xsession).xsave)).apply)
                        xoriginal_session_key.write ((xsession).xsession_key)
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xSESSION_COOKIE_NAME)))) ((xoriginal_session_key)))
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xoriginal_session_key)) (((((xself).xclient).xsession).xsession_key)))
                xtest_login_get_default_redirect_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/get_default_redirect_url/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_login_next_page.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/next_page/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/somewhere/") (FALSE))
                xtest_login_named_next_page_named.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/next_page/named/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/") (FALSE))
                xtest_login_next_page_overrides_login_redirect_url_setting.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/next_page/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/somewhere/") (FALSE))
                xtest_login_redirect_url_overrides_next_page.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/next_page/?next=/test/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/test/") (FALSE))
                xtest_login_redirect_url_overrides_get_default_redirect_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xlogin)) ("/login/get_default_redirect_url/?next=/test/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/test/") (FALSE))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                unsupported
                xassertLoginURLEquals.write
                  [xself xurl]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/login_required/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xurl)) (FALSE))
                xtest_standard_login_url.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ("/login/?next=/login_required/"))
                xtest_named_login_url.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ("/login/?next=/login_required/"))
                xtest_remote_login_url.write
                  [xself]
                    memory > xexpected
                    memory > xquoted_next
                    seq > @
                      (((unsupported)).apply)
                        xquoted_next.write (((xquote)).apply ("http://testserver/login_required/"))
                        xexpected.write ("http://remote.example.com/login?next=%s".mod (xquoted_next))
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ((xexpected)))
                xtest_https_login_url.write
                  [xself]
                    memory > xexpected
                    memory > xquoted_next
                    seq > @
                      (((unsupported)).apply)
                        xquoted_next.write (((xquote)).apply ("http://testserver/login_required/"))
                        xexpected.write ("https:///login/?next=%s".mod (xquoted_next))
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ((xexpected)))
                xtest_login_url_with_querystring.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ("/login/?pretty=1&next=/login_required/"))
                xtest_remote_login_url_with_next_querystring.write
                  [xself]
                    memory > xexpected
                    memory > xquoted_next
                    seq > @
                      (((unsupported)).apply)
                        xquoted_next.write (((xquote)).apply ("http://testserver/login_required/"))
                        xexpected.write ("http://remote.example.com/login/?next=%s".mod (xquoted_next))
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ((xexpected)))
                xtest_lazy_login_url.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginURLEquals)).apply ("/login/?next=/login_required/"))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                unsupported
                xassertLoginRedirectURLEqual.write
                  [xself xurl]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write ((((xself).xlogin)).apply)
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xurl)) (FALSE))
                xtest_default.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertLoginRedirectURLEqual)).apply ("/accounts/profile/"))
                xtest_custom.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginRedirectURLEqual)).apply ("/custom/"))
                xtest_named.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginRedirectURLEqual)).apply ("/password_reset/"))
                xtest_remote.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertLoginRedirectURLEqual)).apply ("http://remote.example.com/welcome/"))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                unsupported
                xtest_redirect_to_login_with_lazy.write
                  [xself]
                    memory > xexpected
                    memory > xlogin_redirect_response
                    seq > @
                      (((unsupported)).apply)
                        xlogin_redirect_response.write (((unsupported)).apply ((xredirect_to_login)) ("/else/where/"))
                        xexpected.write "/login/?next=/else/where/"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((xlogin_redirect_response).xurl)))
                xtest_redirect_to_login_with_lazy_and_unicode.write
                  [xself]
                    memory > xexpected
                    memory > xlogin_redirect_response
                    seq > @
                      (((unsupported)).apply)
                        xlogin_redirect_response.write (((unsupported)).apply ((xredirect_to_login)) ("/else/where/झ/"))
                        xexpected.write "/login/?next=/else/where/%E0%A4%9D/"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((xlogin_redirect_response).xurl)))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                unsupported
                xconfirm_logged_out.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                xtest_default_logout_then_login.write
                  [xself]
                    memory > xreq
                    memory > xcsrf_token
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xreq.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xreq).xmethod)) ("POST"))
                        xcsrf_token.write (((xget_token)).apply ((xreq)))
                        (((unsupported)).apply ((((unsupported)).apply (((xreq).xCOOKIES)) (((xsettings).xCSRF_COOKIE_NAME)))) ((xcsrf_token)))
                        (((unsupported)).apply (((xreq).xPOST)) ((((unsupported)).apply ("csrfmiddlewaretoken") ((xcsrf_token)))))
                        (((unsupported)).apply (((xreq).xsession)) ((((xself).xclient).xsession)))
                        xresponse.write (((xlogout_then_login)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/login/") (FALSE))
                xtest_logout_then_login_with_custom_login.write
                  [xself]
                    memory > xreq
                    memory > xcsrf_token
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xreq.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xreq).xmethod)) ("POST"))
                        xcsrf_token.write (((xget_token)).apply ((xreq)))
                        (((unsupported)).apply ((((unsupported)).apply (((xreq).xCOOKIES)) (((xsettings).xCSRF_COOKIE_NAME)))) ((xcsrf_token)))
                        (((unsupported)).apply (((xreq).xPOST)) ((((unsupported)).apply ("csrfmiddlewaretoken") ((xcsrf_token)))))
                        (((unsupported)).apply (((xreq).xsession)) ((((xself).xclient).xsession)))
                        xresponse.write (((unsupported)).apply ((xlogout_then_login)) ((xreq)) ("/custom/"))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_default_logout_then_login_get.write
                  [xself]
                    memory > xreq
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xreq.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xreq).xmethod)) ("GET"))
                        (((unsupported)).apply (((xreq).xsession)) ((((xself).xclient).xsession)))
                        xresponse.write (((xlogout_then_login)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/login/") (FALSE))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xdont_redirect_url.write "/login/redirect_authenticated_user_default/"
                xdo_redirect_url.write "/login/redirect_authenticated_user/"
                xtest_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply (((xself).xdont_redirect_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("next"))) (""))
                xtest_guest.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        xresponse.write (((((xself).xclient).xget)).apply (((xself).xdo_redirect_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                xtest_redirect.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply (((xself).xdo_redirect_url)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/accounts/profile/") (FALSE))
                xtest_redirect_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply (((xself).xdo_redirect_url)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_redirect_param.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xurl.write (((xself).xdo_redirect_url).add "?next=/custom_next/")
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom_next/") (FALSE))
                xtest_redirect_loop.write
                  [xself]
                    memory > xmsg
                    memory > xurl
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xmsg.write "Redirection loop for authenticated user detected. Check that your LOGIN_REDIRECT_URL doesn't point to a login page."
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (((xself).xdo_redirect_url)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write (((((xself).xclient).xget)).apply (((xself).xdo_redirect_url)))
                            xurl.write (((xself).xdo_redirect_url).add "?bla=2")
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write (((((xself).xclient).xget)).apply ((xurl)))
                xtest_permission_required_not_logged_in.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (((xself).xdo_redirect_url)))))
                        seq
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/permission_required_redirect/") (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/permission_required_exception/") (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (403))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/login_and_permission_required_exception/") (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                xtest_permission_required_logged_in.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (((xself).xdo_redirect_url)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRedirectCycleError)) ("Redirect loop detected."))))
                              (((unsupported)).apply ((((xself).xclient).xget)) ("/permission_required_redirect/") (TRUE))
                            xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/permission_required_exception/") (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (403))
                            xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/login_and_permission_required_exception/") (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (403))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xtest_success_url_allowed_hosts_same_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/login/allowed_hosts/") ((((unsupported)).apply ("username") ("testclient") ("password") ("password") ("next") ("https://testserver/home"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("https://testserver/home") (FALSE))
                xtest_success_url_allowed_hosts_safe_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/login/allowed_hosts/") ((((unsupported)).apply ("username") ("testclient") ("password") ("password") ("next") ("https://otherserver/home"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("https://otherserver/home") (FALSE))
                xtest_success_url_allowed_hosts_unsafe_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ("/login/allowed_hosts/") ((((unsupported)).apply ("username") ("testclient") ("password") ("password") ("next") ("https://evil/home"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/accounts/profile/") (FALSE))
            (((unsupported)).apply ((xAuthViewsTestCase)))
              seq
                xconfirm_logged_out.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xSESSION_KEY)) ((((xself).xclient).xsession)))
                xtest_logout_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Logged out"))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_post.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Logged out"))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_get_raises_deprecation_warning.write
                  [xself]
                    memory > xresponse
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xmsg.write "Log out via GET requests is deprecated and will be removed in Django 5.0. Use POST requests for logging out."
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Logged out"))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_14377.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("site") (((xresponse).xcontext)))
                xtest_logout_doesnt_cache.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("no-store") ((((unsupported)).apply (((xresponse).xheaders)) ("Cache-Control"))))
                xtest_logout_with_overridden_redirect_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/next_page/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/somewhere/") (FALSE))
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/next_page/?next=/login/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/login/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_next_page_specified.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/next_page/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/somewhere/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_redirect_argument.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/?next=/login/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/login/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_custom_redirect_argument.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/custom_query/?follow=/somewhere/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/somewhere/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_with_named_redirect.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/next_page/named/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/password_reset/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_success_url_allowed_hosts_same_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/allowed_hosts/?next=https://testserver/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("https://testserver/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_success_url_allowed_hosts_safe_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/allowed_hosts/?next=https://otherserver/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("https://otherserver/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_success_url_allowed_hosts_unsafe_host.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/allowed_hosts/?next=https://evil/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/logout/allowed_hosts/") (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_security_check.write
                  [xself]
                    memory > xsafe_url
                    memory > xlogout_url
                    memory > xgood_urls
                    memory > xresponse
                    memory > xbad_urls
                    memory > xnasty_url
                    seq > @
                      seq
                        xlogout_url.write (((xreverse)).apply ("logout"))
                        xbad_urls.write (((unsupported)).apply ("http://example.com") ("http:///example.com") ("https://example.com") ("ftp://example.com") ("///example.com") ("//example.com") ("javascript:alert(\"XSS\")"))
                        (((unsupported)).apply ((xbad_url)) ((xbad_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_url)))))
                            seq
                              xnasty_url.write ("%(url)s?%(next)s=%(bad_url)s".mod (((unsupported)).apply ("url") ((xlogout_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("bad_url") ((((xquote)).apply ((xbad_url))))))
                              bogusForceDataize.write ((((xself).xlogin)).apply)
                              xresponse.write (((((xself).xclient).xpost)).apply ((xnasty_url)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xbad_url)) (((xresponse).xurl)) (("%s should be blocked".mod (xbad_url))))
                              bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                        xgood_urls.write (((unsupported)).apply ("/view/?param=http://example.com") ("/view/?param=https://example.com") ("/view?param=ftp://example.com") ("view/?param=//example.com") ("https://testserver/") ("HTTPS://testserver/") ("//testserver/") ("/url%20with%20spaces/"))
                        (((unsupported)).apply ((xgood_url)) ((xgood_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xgood_url)))))
                            seq
                              xsafe_url.write ("%(url)s?%(next)s=%(good_url)s".mod (((unsupported)).apply ("url") ((xlogout_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("good_url") ((((xquote)).apply ((xgood_url))))))
                              bogusForceDataize.write ((((xself).xlogin)).apply)
                              xresponse.write (((((xself).xclient).xpost)).apply ((xsafe_url)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (302))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((xgood_url)) (((xresponse).xurl)) (("%s should be allowed".mod (xgood_url))))
                              bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_security_check_https.write
                  [xself]
                    memory > xresponse
                    memory > xnon_https_next_url
                    memory > xurl
                    memory > xlogout_url
                    seq > @
                      seq
                        xlogout_url.write (((xreverse)).apply ("logout"))
                        xnon_https_next_url.write "http://testserver/"
                        xurl.write ("%(url)s?%(next)s=%(next_url)s".mod (((unsupported)).apply ("url") ((xlogout_url)) ("next") ((xREDIRECT_FIELD_NAME)) ("next_url") ((((xquote)).apply ((xnon_https_next_url))))))
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ((xurl)) (TRUE))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xlogout_url)) (FALSE))
                        bogusForceDataize.write ((((xself).xconfirm_logged_out)).apply)
                xtest_logout_preserve_language.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/setlang/") ((((unsupported)).apply ("language") ("pl"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ("pl"))
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ("pl"))
                xtest_logout_redirect_url_setting.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/custom/") (FALSE))
                xtest_logout_redirect_url_named_setting.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        xresponse.write (((((xself).xclient).xpost)).apply ("/logout/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/logout/") (FALSE))
            xget_perm.write
              [xModel xperm]
                memory > xct
                seq > @
                  seq
                    xct.write (((((xContentType).xobjects).xget_for_model)).apply ((xModel)))
                    (((unsupported)).apply ((((unsupported)).apply ((((xPermission).xobjects).xget)) ((xct)) ((xperm)))))
            (((unsupported)).apply ((xAuthViewsTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.urls_admin"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpTestData)).apply)
                        (((unsupported)).apply (((((unsupported)).apply ((((xUser).xobjects).xfilter)) ("testclient")).xupdate)) (TRUE) (TRUE))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlogin)).apply)
                        (((unsupported)).apply (((xself).xadmin)) ((((unsupported)).apply ((((xUser).xobjects).xget)) ((((xself).xu1).xpk)))))
                xget_user_data.write
                  [xself xuser]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("username") (((xuser).xusername)) ("password") (((xuser).xpassword)) ("email") (((xuser).xemail)) ("is_active") (((xuser).xis_active)) ("is_staff") (((xuser).xis_staff)) ("is_superuser") (((xuser).xis_superuser)) ("last_login_0") ((((((xuser).xlast_login).xstrftime)).apply ("%Y-%m-%d"))) ("last_login_1") ((((((xuser).xlast_login).xstrftime)).apply ("%H:%M:%S"))) ("initial-last_login_0") ((((((xuser).xlast_login).xstrftime)).apply ("%Y-%m-%d"))) ("initial-last_login_1") ((((((xuser).xlast_login).xstrftime)).apply ("%H:%M:%S"))) ("date_joined_0") ((((((xuser).xdate_joined).xstrftime)).apply ("%Y-%m-%d"))) ("date_joined_1") ((((((xuser).xdate_joined).xstrftime)).apply ("%H:%M:%S"))) ("initial-date_joined_0") ((((((xuser).xdate_joined).xstrftime)).apply ("%Y-%m-%d"))) ("initial-date_joined_1") ((((((xuser).xdate_joined).xstrftime)).apply ("%H:%M:%S"))) ("first_name") (((xuser).xfirst_name)) ("last_name") (((xuser).xlast_name)))))
                xtest_changelist_disallows_password_lookups.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.security.DisallowedModelAdminLookup") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply (((((xreverse)).apply ("auth_test_admin:auth_user_changelist")).add "?password__startswith=sha1$")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (400))
                xtest_user_change_email.write
                  [xself]
                    memory > xresponse
                    memory > xdata
                    memory > xrow
                    seq > @
                      seq
                        xdata.write ((((xself).xget_user_data)).apply (((xself).xadmin)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("email"))) (("new_".add (((unsupported)).apply ((xdata)) ("email")))))
                        xresponse.write (((((xself).xclient).xpost)).apply ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply ((((xself).xadmin).xpk)))))) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ((((xreverse)).apply ("auth_test_admin:auth_user_changelist"))))
                        xrow.write (((((xLogEntry).xobjects).xlatest)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrow).xget_change_message)).apply)) ("Changed Email address."))
                xtest_user_not_change.write
                  [xself]
                    memory > xresponse
                    memory > xrow
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xpost)).apply ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply ((((xself).xadmin).xpk)))))) (((((xself).xget_user_data)).apply (((xself).xadmin)))))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ((((xreverse)).apply ("auth_test_admin:auth_user_changelist"))))
                        xrow.write (((((xLogEntry).xobjects).xlatest)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrow).xget_change_message)).apply)) ("No fields changed."))
                xtest_user_change_password.write
                  [xself]
                    memory > xrow
                    memory > xresponse
                    memory > xpassword_change_url
                    memory > xuser_change_url
                    memory > xrel_link
                    seq > @
                      seq
                        xuser_change_url.write (((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply ((((xself).xadmin).xpk)))))
                        xpassword_change_url.write (((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_password_change") ((((unsupported)).apply ((((xself).xadmin).xpk)))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xuser_change_url)))
                        xrel_link.write (((unsupported)).apply (((((xre).xsearch)).apply ("you can change the password using <a href=\"([^\"]*)\">this form</a>") ((((((xresponse).xcontent).xdecode)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xurljoin)).apply ((xuser_change_url)) ((xrel_link)))) ((xpassword_change_url)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpassword_change_url)) ((((unsupported)).apply ("password1") ("password1") ("password2") ("password1"))))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ((xuser_change_url)))
                        xrow.write (((((xLogEntry).xobjects).xlatest)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrow).xget_change_message)).apply)) ("Changed password."))
                        bogusForceDataize.write ((((xself).xlogout)).apply)
                        (((unsupported)).apply (((xself).xlogin)) ("password1"))
                xtest_user_change_different_user_password.write
                  [xself]
                    memory > xresponse
                    memory > xu
                    memory > xrow
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("staffmember@example.com"))
                        xresponse.write (((((xself).xclient).xpost)).apply ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_password_change") ((((unsupported)).apply (((xu).xpk)))))) ((((unsupported)).apply ("password1") ("password1") ("password2") ("password1"))))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply (((xu).xpk)))))))
                        xrow.write (((((xLogEntry).xobjects).xlatest)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrow).xuser_id)) ((((xself).xadmin).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrow).xobject_id)) ((((xstr)).apply (((xu).xpk)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrow).xget_change_message)).apply)) ("Changed password."))
                xtest_password_change_bad_url.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_password_change") ((((unsupported)).apply ("foobar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_user_change_password_passes_user_to_has_change_permission.write
                  [xself xhas_change_permission]
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        xurl.write (((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_password_change") ((((unsupported)).apply ((((xself).xadmin).xpk)))))
                        bogusForceDataize.write (((((xself).xclient).xpost)).apply ((xurl)) ((((unsupported)).apply ("password1") ("password1") ("password2") ("password1"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_request)) ((xuser)))) ((x_kwargs)))) (((xhas_change_permission).xcall_args)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xpk)) ((((xself).xadmin).xpk)))
                xtest_view_user_password_is_readonly.write
                  [xself]
                    memory > xu
                    memory > xdata
                    memory > xoriginal_password
                    memory > xchange_url
                    memory > xresponse
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("testclient"))
                        (((unsupported)).apply (((xu).xis_superuser)) (FALSE))
                        bogusForceDataize.write ((((xu).xsave)).apply)
                        xoriginal_password.write ((xu).xpassword)
                        bogusForceDataize.write (((((xu).xuser_permissions).xadd)).apply ((((xget_perm)).apply ((xUser)) ("view_user"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply (((xu).xpk)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xalgo)) ((xsalt)) ((xhash_string)))) ((((((xu).xpassword).xsplit)).apply ("$"))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<div class=\"readonly\">testclient</div>"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) (("<strong>algorithm</strong>: %snn<strong>salt</strong>: %s********************nn<strong>hash</strong>: %s**************************nn".mod (((unsupported)).apply ((xalgo)) ((((unsupported)).apply ((xsalt)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ((xhash_string)) ((((unsupported)).apply (6)))))))) (TRUE))
                        xdata.write ((((xself).xget_user_data)).apply ((xu)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("password"))) ("shouldnotchange"))
                        xchange_url.write (((unsupported)).apply ((xreverse)) ("auth_test_admin:auth_user_change") ((((unsupported)).apply (((xu).xpk)))))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xchange_url)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (403))
                        bogusForceDataize.write ((((xu).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xpassword)) ((xoriginal_password)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.UUIDUser") ("auth_tests.urls_custom_user_admin"))))
              xtest_admin_password_change.write
                [xself]
                  memory > xu
                  memory > xrow
                  memory > xresponse
                  memory > xpassword_change_url
                  memory > xuser_change_url
                  seq > @
                    seq
                      xu.write (((unsupported)).apply ((((xUUIDUser).xobjects).xcreate_superuser)) ("uuid") ("foo@bar.com") ("test"))
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xself).xclient).xlogin)) ("uuid") ("test"))))
                      xuser_change_url.write (((unsupported)).apply ((xreverse)) ("custom_user_admin:auth_tests_uuiduser_change") ((((unsupported)).apply (((xu).xpk)))))
                      xresponse.write (((((xself).xclient).xget)).apply ((xuser_change_url)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                      xpassword_change_url.write (((unsupported)).apply ((xreverse)) ("custom_user_admin:auth_user_password_change") ((((unsupported)).apply (((xu).xpk)))))
                      xresponse.write (((((xself).xclient).xget)).apply ((xpassword_change_url)))
                      bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<form method=\"post\" id=\"uuiduser_form\">"))
                      (((unsupported)).apply (((((xconnection).xconstraint_checks_disabled)).apply)))
                        xresponse.write (((((xself).xclient).xpost)).apply ((xpassword_change_url)) ((((unsupported)).apply ("password1") ("password1") ("password2") ("password1"))))
                      bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ((xuser_change_url)))
                      xrow.write (((((xLogEntry).xobjects).xlatest)).apply ("id"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrow).xuser_id)) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrow).xobject_id)) ((((xstr)).apply (((xu).xpk)))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrow).xget_change_message)).apply)) ("Changed password."))
                      bogusForceDataize.write ((((xrow).xdelete)).apply)