memory > xurlencode
memory > xSimpleTestCase
[] > test_urlencode
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_non_string_input
        memory > xtest_urlencode02
        memory > xtest_urlencode
        memory > xtest_urlencode01
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_urlencode01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("urlencode01") ((((unsupported)).apply ("url") ("/test&\"/me?/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("/test%26%22/me%3F/"))
                xtest_urlencode02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("urlencode02") ((((unsupported)).apply ("urlbit") ("escape/slash"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("/test/escape%2Fslash/"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_urlencode.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xurlencode)).apply ("franxe7ois & jill"))) ("fran%C3%A7ois%20%26%20jill"))
                xtest_non_string_input.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xurlencode)).apply (1))) ("1"))