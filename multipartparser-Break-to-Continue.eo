memory > xlang
memory > xMultiPartParserError
memory > xmeta_data
memory > xValueError
memory > xKeyError
memory > xany
memory > xRequestDataTooBig
memory > xbytes
memory > xunquote
memory > xTooManyFieldsSent
memory > xmin
memory > xAttributeError
memory > xQueryDict
memory > xenumerate
memory > xhandler
memory > xcurrent_number
memory > xstr
memory > xforce_str
memory > xopts
memory > xInterBoundaryIter
memory > xMultiValueDict
memory > xSuspiciousMultipartForm
memory > xvalue
memory > xctypes
memory > xchar
memory > xcollections
memory > xIndexError
memory > xStopIteration
memory > xmax
memory > xcontent_type_extra
memory > xbinascii
memory > xmain_value_pair
memory > xp
memory > xsettings
memory > xint
memory > xChunkIter
memory > xException
memory > xbase64
memory > xhasattr
memory > xfield_stream
memory > xx
memory > xend
memory > xi
memory > xparams
memory > xencoding
memory > xInputStreamExhausted
memory > xLazyStream
memory > xUnicodeEncodeError
memory > xStopUpload
memory > xiter
memory > xe
memory > xhtml
memory > xname
memory > xParser
memory > xStopFutureHandlers
memory > xexc
memory > xitem_type
memory > xSkipFile
memory > xnext
memory > xisinstance
memory > xline
memory > xcgi
memory > xlen
memory > xTypeError
memory > xsub_stream
memory > xBoundaryIter
[] > multipartparser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xFILE
        memory > xunget
        memory > xparse
        memory > x__iter__
        memory > xclose
        memory > xRAW
        memory > xsanitize_file_name
        memory > xparse_header
        memory > x__all__
        memory > x__init__
        memory > xFIELD
        memory > xhandle_file_complete
        memory > x_update_unget_history
        memory > x_find_boundary
        memory > x_parse_header_params
        memory > xparse_boundary_stream
        memory > x__next__
        memory > xtell
        memory > xIE_sanitize
        memory > xread
        memory > x_close_files
        memory > xexhaust
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("MultiPartParser") ("MultiPartParserError") ("InputStreamExhausted"))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xException)))
              seq
                (((unsupported)).apply)
            xRAW.write "raw"
            xFILE.write "file"
            xFIELD.write "field"
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xMETA xinput_data xupload_handlers xencoding]
                    memory > xpossible_sizes
                    memory > xcontent_length
                    memory > xboundary
                    memory > xcontent_type
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcontent_type.write ((((xMETA).xget)).apply ("CONTENT_TYPE") (""))
                        (((((xcontent_type).xstartswith)).apply ("multipart/")).not).if
                          (((unsupported)).apply ((((xMultiPartParserError)).apply (("Invalid Content-Type: %s".mod (xcontent_type))))))
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          (((unsupported)).apply ((((unsupported)).apply ((xctypes)) ((xopts)))) ((((xparse_header)).apply (((((xcontent_type).xencode)).apply ("ascii"))))))
                          (((unsupported)).apply ((((xMultiPartParserError)).apply (("Invalid non-ASCII Content-Type in multipart: %s".mod (((xforce_str)).apply ((xcontent_type))))))))
                        xboundary.write ((((xopts).xget)).apply ("boundary"))
                        (((xboundary).not).or (((((xcgi).xvalid_boundary)).apply ((xboundary))).not)).if
                          (((unsupported)).apply ((((xMultiPartParserError)).apply (("Invalid boundary in multipart: %s".mod (((xforce_str)).apply ((xboundary))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                          xcontent_length.write (((xint)).apply (((((xMETA).xget)).apply ("CONTENT_LENGTH") (0))))
                          xcontent_length.write 0
                        ((xcontent_length).less 0).if
                          (((unsupported)).apply ((((xMultiPartParserError)).apply (("Invalid content length: %r".mod (xcontent_length))))))
                        (((xisinstance)).apply ((xboundary)) ((xstr))).if
                          xboundary.write ((((xboundary).xencode)).apply ("ascii"))
                        (((unsupported)).apply (((xself).x_boundary)) ((xboundary)))
                        (((unsupported)).apply (((xself).x_input_data)) ((xinput_data)))
                        xpossible_sizes.write (((unsupported)).apply (((xx).xchunk_size)) ((xx)) ((xupload_handlers)) (((xx).xchunk_size)))
                        (((unsupported)).apply (((xself).x_chunk_size)) ((((xmin)).apply (((((unsupported)).apply (((((unsupported)).apply (2) (31)).sub 4))).add (xpossible_sizes))))))
                        (((unsupported)).apply (((xself).x_meta)) ((xMETA)))
                        (((unsupported)).apply (((xself).x_encoding)) (((xencoding).or ((xsettings).xDEFAULT_CHARSET))))
                        (((unsupported)).apply (((xself).x_content_length)) ((xcontent_length)))
                        (((unsupported)).apply (((xself).x_upload_handlers)) ((xupload_handlers)))
                xparse.write
                  [xself]
                    memory > xdata
                    memory > xold_field_name
                    memory > xstripped_chunk
                    memory > xcontent_type
                    memory > xread_size
                    memory > xtransfer_encoding
                    memory > xfile_name
                    memory > xdisposition
                    memory > xremaining
                    memory > xresult
                    memory > xchunk
                    memory > xchunk_length
                    memory > xnum_bytes_read
                    memory > xover_chunk
                    memory > xraw_data
                    memory > xhandlers
                    memory > xstream
                    memory > xcounters
                    memory > xnum_post_keys
                    memory > xcontent_length
                    memory > xencoding
                    memory > xcharset
                    memory > xfield_name
                    memory > xuploaded_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xencoding.write ((xself).x_encoding)
                        xhandlers.write ((xself).x_upload_handlers)
                        (((xself).x_content_length).eq 0).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xQueryDict)) (((xself).x_encoding)))) ((((xMultiValueDict)).apply)))))
                        (((unsupported)).apply ((xhandler)) ((xhandlers)))
                          seq
                            xresult.write ((((xhandler).xhandle_raw_input)).apply (((xself).x_input_data)) (((xself).x_meta)) (((xself).x_content_length)) (((xself).x_boundary)) ((xencoding)))
                            (((unsupported)).apply ((xresult)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xresult)) (0))) ((((unsupported)).apply ((xresult)) (1))))))
                        (((unsupported)).apply (((xself).x_post)) ((((unsupported)).apply ((xQueryDict)) (TRUE))))
                        (((unsupported)).apply (((xself).x_files)) ((((xMultiValueDict)).apply)))
                        xstream.write (((xLazyStream)).apply ((((xChunkIter)).apply (((xself).x_input_data)) (((xself).x_chunk_size)))))
                        xold_field_name.write "None: is there a None literal in the EO language?"
                        xcounters.write ((((unsupported)).apply (0)).mul (((xlen)).apply ((xhandlers))))
                        xnum_bytes_read.write 0
                        xnum_post_keys.write 0
                        xread_size.write "None: is there a None literal in the EO language?"
                        xuploaded_file.write TRUE
                        (((unsupported)).apply ((xStopUpload)))
                          (((unsupported)).apply ((((unsupported)).apply ((xitem_type)) ((xmeta_data)) ((xfield_stream)))) ((((xParser)).apply ((xstream)) (((xself).x_boundary)))))
                            seq
                              (xold_field_name).if
                                seq
                                  bogusForceDataize.write ((((xself).xhandle_file_complete)).apply ((xold_field_name)) ((xcounters)))
                                  xold_field_name.write "None: is there a None literal in the EO language?"
                                  xuploaded_file.write TRUE
                              (((unsupported)).apply ((((unsupported)).apply ((xKeyError)) ((xIndexError)) ((xAttributeError)))))
                                seq
                                  xdisposition.write (((unsupported)).apply ((((unsupported)).apply ((xmeta_data)) ("content-disposition"))) (1))
                                  xfield_name.write ((((((unsupported)).apply ((xdisposition)) ("name")).xstrip)).apply)
                                (((unsupported)).apply)
                              xtransfer_encoding.write ((((xmeta_data).xget)).apply ("content-transfer-encoding"))
                              (((unsupported)).apply ((xtransfer_encoding)) ("None: is there a None literal in the EO language?")).if
                                xtransfer_encoding.write ((((((unsupported)).apply ((xtransfer_encoding)) (0)).xstrip)).apply)
                              xfield_name.write (((unsupported)).apply ((xforce_str)) ((xfield_name)) ((xencoding)) ("replace"))
                              ((xitem_type).eq (xFIELD)).if
                                seq
                                  (((unsupported)).apply ((xnum_post_keys)) (1))
                                  ((((unsupported)).apply (((xsettings).xDATA_UPLOAD_MAX_NUMBER_FIELDS)) ("None: is there a None literal in the EO language?")).and (((xsettings).xDATA_UPLOAD_MAX_NUMBER_FIELDS).less (xnum_post_keys))).if
                                    (((unsupported)).apply ((((xTooManyFieldsSent)).apply ("The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS."))))
                                  (((unsupported)).apply (((xsettings).xDATA_UPLOAD_MAX_MEMORY_SIZE)) ("None: is there a None literal in the EO language?")).if
                                    xread_size.write (((xsettings).xDATA_UPLOAD_MAX_MEMORY_SIZE).sub (xnum_bytes_read))
                                  ((xtransfer_encoding).eq "base64").if
                                    seq
                                      xraw_data.write (((unsupported)).apply (((xfield_stream).xread)) ((xread_size)))
                                      (((unsupported)).apply ((xnum_bytes_read)) ((((xlen)).apply ((xraw_data)))))
                                      (((unsupported)).apply (((xbinascii).xError)))
                                        xdata.write ((((xbase64).xb64decode)).apply ((xraw_data)))
                                        xdata.write (xraw_data)
                                    seq
                                      xdata.write (((unsupported)).apply (((xfield_stream).xread)) ((xread_size)))
                                      (((unsupported)).apply ((xnum_bytes_read)) ((((xlen)).apply ((xdata)))))
                                  (((unsupported)).apply ((xnum_bytes_read)) (((((xlen)).apply ((xfield_name))).add 2)))
                                  ((((unsupported)).apply (((xsettings).xDATA_UPLOAD_MAX_MEMORY_SIZE)) ("None: is there a None literal in the EO language?")).and ((xnum_bytes_read).greater ((xsettings).xDATA_UPLOAD_MAX_MEMORY_SIZE))).if
                                    (((unsupported)).apply ((((xRequestDataTooBig)).apply ("Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE."))))
                                  bogusForceDataize.write (((((xself).x_post).xappendlist)).apply ((xfield_name)) ((((unsupported)).apply ((xforce_str)) ((xdata)) ((xencoding)) ("replace"))))
                                ((xitem_type).eq (xFILE)).if
                                  seq
                                    xfile_name.write ((((xdisposition).xget)).apply ("filename"))
                                    (xfile_name).if
                                      seq
                                        xfile_name.write (((unsupported)).apply ((xforce_str)) ((xfile_name)) ((xencoding)) ("replace"))
                                        xfile_name.write ((((xself).xsanitize_file_name)).apply ((xfile_name)))
                                    ((xfile_name).not).if
                                      (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xcontent_type)) ((xcontent_type_extra)))) (((((xmeta_data).xget)).apply ("content-type") ((((unsupported)).apply ("") ((((unsupported)).apply)))))))
                                    xcontent_type.write ((((xcontent_type).xstrip)).apply)
                                    xcharset.write ((((xcontent_type_extra).xget)).apply ("charset"))
                                    (((unsupported)).apply ((((unsupported)).apply ((xIndexError)) ((xTypeError)) ((xValueError)))))
                                      xcontent_length.write (((xint)).apply ((((unsupported)).apply (((((xmeta_data).xget)).apply ("content-length"))) (0))))
                                      xcontent_length.write "None: is there a None literal in the EO language?"
                                    xcounters.write ((((unsupported)).apply (0)).mul (((xlen)).apply ((xhandlers))))
                                    xuploaded_file.write FALSE
                                    (((unsupported)).apply ((xSkipFile)))
                                      seq
                                        (((unsupported)).apply ((xhandler)) ((xhandlers)))
                                          (((unsupported)).apply ((xStopFutureHandlers)))
                                            bogusForceDataize.write ((((xhandler).xnew_file)).apply ((xfield_name)) ((xfile_name)) ((xcontent_type)) ((xcontent_length)) ((xcharset)) ((xcontent_type_extra)))
                                            (((unsupported)).apply)
                                        (((unsupported)).apply ((xchunk)) ((xfield_stream)))
                                          seq
                                            ((xtransfer_encoding).eq "base64").if
                                              seq
                                                xstripped_chunk.write ((("".xjoin)).apply (((((xchunk).xsplit)).apply)))
                                                xremaining.write ((((xlen)).apply ((xstripped_chunk))).mod 4)
                                                while.
                                                  ((xremaining).neq 0)
                                                  [unused]
                                                    seq > @
                                                      seq
                                                        xover_chunk.write ((((xfield_stream).xread)).apply ((4.sub (xremaining))))
                                                        ((xover_chunk).not).if
                                                          (((unsupported)).apply)
                                                        (((unsupported)).apply ((xstripped_chunk)) (((("".xjoin)).apply (((((xover_chunk).xsplit)).apply)))))
                                                        xremaining.write ((((xlen)).apply ((xstripped_chunk))).mod 4)
                                                (((unsupported)).apply ((xException)))
                                                  xchunk.write ((((xbase64).xb64decode)).apply ((xstripped_chunk)))
                                                  (((unsupported)).apply ((((xMultiPartParserError)).apply ("Could not decode base64 data."))) ((xexc)))
                                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xhandler)))) ((((xenumerate)).apply ((xhandlers)))))
                                              seq
                                                xchunk_length.write (((xlen)).apply ((xchunk)))
                                                xchunk.write ((((xhandler).xreceive_data_chunk)).apply ((xchunk)) ((((unsupported)).apply ((xcounters)) ((xi)))))
                                                (((unsupported)).apply ((((unsupported)).apply ((xcounters)) ((xi)))) ((xchunk_length)))
                                                (((unsupported)).apply ((xchunk)) ("None: is there a None literal in the EO language?")).if
                                                  (((unsupported)).apply)
                                      seq
                                        bogusForceDataize.write ((((xself).x_close_files)).apply)
                                        bogusForceDataize.write (((xexhaust)).apply ((xfield_stream)))
                                      xold_field_name.write (xfield_name)
                                  bogusForceDataize.write (((xexhaust)).apply ((xstream)))
                          seq
                            bogusForceDataize.write ((((xself).x_close_files)).apply)
                            (((xe).xconnection_reset).not).if
                              bogusForceDataize.write (((xexhaust)).apply (((xself).x_input_data)))
                          seq
                            ((xuploaded_file).not).if
                              (((unsupported)).apply ((xhandler)) ((xhandlers)))
                                bogusForceDataize.write ((((xhandler).xupload_interrupted)).apply)
                            bogusForceDataize.write (((xexhaust)).apply (((xself).x_input_data)))
                        bogusForceDataize.write (((xany)).apply ((((unsupported)).apply (((((xhandler).xupload_complete)).apply)) ((xhandler)) ((xhandlers)))))
                        (((unsupported)).apply ((((xself).x_post).x_mutable)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_post)) (((xself).x_files)))))
                xhandle_file_complete.write
                  [xself xold_field_name xcounters]
                    memory > xfile_obj
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xhandler)))) ((((xenumerate)).apply (((xself).x_upload_handlers)))))
                          seq
                            xfile_obj.write ((((xhandler).xfile_complete)).apply ((((unsupported)).apply ((xcounters)) ((xi)))))
                            (xfile_obj).if
                              seq
                                bogusForceDataize.write (((((xself).x_files).xappendlist)).apply ((((unsupported)).apply ((xforce_str)) ((xold_field_name)) (((xself).x_encoding)) ("replace"))) ((xfile_obj)))
                                (((unsupported)).apply)
                xsanitize_file_name.write
                  [xself xfile_name]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfile_name.write ((((xhtml).xunescape)).apply ((xfile_name)))
                        xfile_name.write (((unsupported)).apply (((((xfile_name).xrsplit)).apply ("/"))) ((1.neg)))
                        xfile_name.write (((unsupported)).apply (((((xfile_name).xrsplit)).apply ("\\"))) ((1.neg)))
                        xfile_name.write ((("".xjoin)).apply ((((unsupported)).apply ((xchar)) ((xchar)) ((xfile_name)) (((((xchar).xisprintable)).apply)))))
                        (((unsupported)).apply ((xfile_name)) ((((unsupported)).apply ("") (".") ("..")))).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfile_name)))
                xIE_sanitize.write (xsanitize_file_name)
                x_close_files.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xhandler)) (((xself).x_upload_handlers)))
                        (((xhasattr)).apply ((xhandler)) ("file")).if
                          bogusForceDataize.write (((((xhandler).xfile).xclose)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xproducer xlength]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_producer)) ((xproducer)))
                        (((unsupported)).apply (((xself).x_empty)) (FALSE))
                        (((unsupported)).apply (((xself).x_leftover)) (""))
                        (((unsupported)).apply (((xself).xlength)) ((xlength)))
                        (((unsupported)).apply (((xself).xposition)) (0))
                        (((unsupported)).apply (((xself).x_remaining)) ((xlength)))
                        (((unsupported)).apply (((xself).x_unget_history)) ((((unsupported)).apply)))
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xposition)))
                xread.write
                  [xself xsize]
                    memory > xparts
                    seq > @
                      (((unsupported)).apply)
                        xparts.write
                          []
                            memory > xchunk
                            memory > xremaining
                            memory > xemitting
                            seq > @
                              seq
                                xremaining.write ((((unsupported)).apply ((xsize)) ("None: is there a None literal in the EO language?")).if ((xself).x_remaining) (xsize))
                                (((unsupported)).apply ((xremaining)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    (((unsupported)).apply (((("".xjoin)).apply ((xself)))))
                                    (((unsupported)).apply)
                                while.
                                  ((xremaining).neq 0)
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply (((xremaining).greater 0)) ("remaining bytes to read should never go negative"))
                                        (((unsupported)).apply ((xStopIteration)))
                                          xchunk.write (((xnext)).apply ((xself)))
                                          (((unsupported)).apply)
                                          seq
                                            xemitting.write (((unsupported)).apply ((xchunk)) ((((unsupported)).apply ((xremaining)))))
                                            bogusForceDataize.write ((((xself).xunget)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply ((xremaining)))))))
                                            (((unsupported)).apply ((xremaining)) ((((xlen)).apply ((xemitting)))))
                                            (((unsupported)).apply ((xemitting)))
                        (((unsupported)).apply (((("".xjoin)).apply ((((xparts)).apply)))))
                x__next__.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).x_leftover).if
                          seq
                            xoutput.write ((xself).x_leftover)
                            (((unsupported)).apply (((xself).x_leftover)) (""))
                          seq
                            xoutput.write (((xnext)).apply (((xself).x_producer)))
                            (((unsupported)).apply (((xself).x_unget_history)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xposition)) ((((xlen)).apply ((xoutput)))))
                        (((unsupported)).apply ((xoutput)))
                xclose.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_producer)) ((((unsupported)).apply)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                xunget.write
                  [xself xbytes]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xbytes).not).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_update_unget_history)).apply ((((xlen)).apply ((xbytes)))))
                        (((unsupported)).apply (((xself).xposition)) ((((xlen)).apply ((xbytes)))))
                        (((unsupported)).apply (((xself).x_leftover)) (((xbytes).add ((xself).x_leftover))))
                x_update_unget_history.write
                  [xself xnum_bytes]
                    memory > xnumber_equal
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_unget_history)) (((((unsupported)).apply ((xnum_bytes))).add (((unsupported)).apply (((xself).x_unget_history)) ((((unsupported)).apply (49)))))))
                        xnumber_equal.write (((xlen)).apply ((((unsupported)).apply ((xcurrent_number)) ((xcurrent_number)) (((xself).x_unget_history)) (((xcurrent_number).eq (xnum_bytes))))))
                        ((xnumber_equal).greater 40).if
                          (((unsupported)).apply ((((xSuspiciousMultipartForm)).apply ("The multipart parser got stuck, which shouldn't happen with normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers."))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xflo xchunk_size]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xflo)) ((xflo)))
                        (((unsupported)).apply (((xself).xchunk_size)) ((xchunk_size)))
                x__next__.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((xInputStreamExhausted)))
                          xdata.write (((((xself).xflo).xread)).apply (((xself).xchunk_size)))
                          (((unsupported)).apply ((((xStopIteration)).apply)))
                        (xdata).if
                          (((unsupported)).apply ((xdata)))
                          (((unsupported)).apply ((((xStopIteration)).apply)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xstream xboundary]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_stream)) ((xstream)))
                        (((unsupported)).apply (((xself).x_boundary)) ((xboundary)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xInputStreamExhausted)))
                        (((unsupported)).apply ((((xLazyStream)).apply ((((xBoundaryIter)).apply (((xself).x_stream)) (((xself).x_boundary)))))))
                        (((unsupported)).apply ((((xStopIteration)).apply)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xstream xboundary]
                    memory > xunused_char
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_stream)) ((xstream)))
                        (((unsupported)).apply (((xself).x_boundary)) ((xboundary)))
                        (((unsupported)).apply (((xself).x_done)) (FALSE))
                        (((unsupported)).apply (((xself).x_rollback)) (((((xlen)).apply ((xboundary))).add 6)))
                        xunused_char.write (((((xself).x_stream).xread)).apply (1))
                        ((xunused_char).not).if
                          (((unsupported)).apply ((((xInputStreamExhausted)).apply)))
                        bogusForceDataize.write (((((xself).x_stream).xunget)).apply ((xunused_char)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    memory > xstream
                    memory > xchunks
                    memory > xboundary
                    memory > xbytes_read
                    memory > xchunk
                    memory > xrollback
                    seq > @
                      seq
                        ((xself).x_done).if
                          (((unsupported)).apply ((((xStopIteration)).apply)))
                        xstream.write ((xself).x_stream)
                        xrollback.write ((xself).x_rollback)
                        xbytes_read.write 0
                        xchunks.write (((unsupported)).apply)
                        (((unsupported)).apply ((xbytes)) ((xstream)))
                          seq
                            (((unsupported)).apply ((xbytes_read)) ((((xlen)).apply ((xbytes)))))
                            bogusForceDataize.write ((((xchunks).xappend)).apply ((xbytes)))
                            ((xbytes_read).greater (xrollback)).if
                              (((unsupported)).apply)
                            ((xbytes).not).if
                              (((unsupported)).apply)
                          (((unsupported)).apply (((xself).x_done)) (TRUE))
                        ((xchunks).not).if
                          (((unsupported)).apply ((((xStopIteration)).apply)))
                        xchunk.write ((("".xjoin)).apply ((xchunks)))
                        xboundary.write ((((xself).x_find_boundary)).apply ((xchunk)))
                        (xboundary).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xend)) ((xnext)))) ((xboundary)))
                            bogusForceDataize.write ((((xstream).xunget)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply ((xnext)))))))
                            (((unsupported)).apply (((xself).x_done)) (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply ((xend)))))))
                          ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply (((xrollback).neg))))).not).if
                            seq
                              (((unsupported)).apply (((xself).x_done)) (TRUE))
                              (((unsupported)).apply ((xchunk)))
                            seq
                              bogusForceDataize.write ((((xstream).xunget)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply (((xrollback).neg)))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply (((xrollback).neg)))))))
                x_find_boundary.write
                  [xself xdata]
                    memory > xend
                    memory > xindex
                    memory > xnext
                    memory > xlast
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xindex.write ((((xdata).xfind)).apply (((xself).x_boundary)))
                        ((xindex).less 0).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                          seq
                            xend.write (xindex)
                            xnext.write ((xindex).add (((xlen)).apply (((xself).x_boundary))))
                            xlast.write (((xmax)).apply (0) (((xend).sub 1)))
                            ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xlast)) (((xlast).add 1))))).eq "n").if
                              (((unsupported)).apply ((xend)) (1))
                            xlast.write (((xmax)).apply (0) (((xend).sub 1)))
                            ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xlast)) (((xlast).add 1))))).eq "r").if
                              (((unsupported)).apply ((xend)) (1))
                            (((unsupported)).apply ((((unsupported)).apply ((xend)) ((xnext)))))
            xexhaust.write
              [xstream_or_iterable]
                memory > xiterator
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xTypeError)))
                      xiterator.write (((xiter)).apply ((xstream_or_iterable)))
                      xiterator.write (((xChunkIter)).apply ((xstream_or_iterable)) (16384))
                    (((unsupported)).apply (((xcollections).xdeque)) ((xiterator)) (0))
            xparse_boundary_stream.write
              [xstream xmax_header_size]
                memory > xheader
                memory > xTYPE
                memory > xheader_end
                memory > x_parse_header
                memory > xchunk
                memory > xoutdict
                seq > @
                  seq
                    (((unsupported)).apply)
                    xchunk.write ((((xstream).xread)).apply ((xmax_header_size)))
                    xheader_end.write ((((xchunk).xfind)).apply ("rnrn"))
                    x_parse_header.write
                      [xline]
                        seq > @
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xmain_value_pair)) ((xparams)))) ((((xparse_header)).apply ((xline)))))
                            (((unsupported)).apply ((xValueError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xmain_value_pair).xsplit)).apply (":") (1))))
                              (((unsupported)).apply ((((xValueError)).apply (("Invalid header: %r".mod (xline))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xvalue)) ((xparams)))))))
                    ((xheader_end).eq (1.neg)).if
                      seq
                        bogusForceDataize.write ((((xstream).xunget)).apply ((xchunk)))
                        (((unsupported)).apply ((((unsupported)).apply ((xRAW)) ((((unsupported)).apply)) ((xstream)))))
                    xheader.write (((unsupported)).apply ((xchunk)) ((((unsupported)).apply ((xheader_end)))))
                    bogusForceDataize.write ((((xstream).xunget)).apply ((((unsupported)).apply ((xchunk)) ((((unsupported)).apply (((xheader_end).add 4)))))))
                    xTYPE.write (xRAW)
                    xoutdict.write (((unsupported)).apply)
                    (((unsupported)).apply ((xline)) (((((xheader).xsplit)).apply ("rn"))))
                      seq
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xvalue)) ((xparams)))))) ((((x_parse_header)).apply ((xline)))))
                          (((unsupported)).apply)
                        ((xname).eq "content-disposition").if
                          seq
                            xTYPE.write (xFIELD)
                            ((((xparams).xget)).apply ("filename")).if
                              xTYPE.write (xFILE)
                        (((unsupported)).apply ((((unsupported)).apply ((xoutdict)) ((xname)))) ((((unsupported)).apply ((xvalue)) ((xparams)))))
                    ((xTYPE).eq (xRAW)).if
                      bogusForceDataize.write ((((xstream).xunget)).apply ((xchunk)))
                    (((unsupported)).apply ((((unsupported)).apply ((xTYPE)) ((xoutdict)) ((xstream)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xstream xboundary]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_stream)) ((xstream)))
                        (((unsupported)).apply (((xself).x_separator)) (("--".add (xboundary))))
                x__iter__.write
                  [xself]
                    memory > xboundarystream
                    seq > @
                      seq
                        xboundarystream.write (((xInterBoundaryIter)).apply (((xself).x_stream)) (((xself).x_separator)))
                        (((unsupported)).apply ((xsub_stream)) ((xboundarystream)))
                          (((unsupported)).apply ((((xparse_boundary_stream)).apply ((xsub_stream)) (1024))))
            xparse_header.write
              [xline]
                memory > xhas_encoding
                memory > xvalue
                memory > xi
                memory > xname
                memory > xkey
                memory > xpdict
                memory > xplist
                seq > @
                  seq
                    (((unsupported)).apply)
                    xplist.write (((x_parse_header_params)).apply ((";".add (xline))))
                    xkey.write ((((((((((xplist).xpop)).apply (0)).xlower)).apply).xdecode)).apply ("ascii"))
                    xpdict.write (((unsupported)).apply)
                    (((unsupported)).apply ((xp)) ((xplist)))
                      seq
                        xi.write ((((xp).xfind)).apply ("="))
                        ((xi).geq 0).if
                          seq
                            xhas_encoding.write FALSE
                            xname.write ((((((((((((unsupported)).apply ((xp)) ((((unsupported)).apply ((xi))))).xstrip)).apply).xlower)).apply).xdecode)).apply ("ascii"))
                            ((((xname).xendswith)).apply ("*")).if
                              seq
                                xname.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((1.neg)))))
                                (((((xp).xcount)).apply ("'")).eq 2).if
                                  xhas_encoding.write TRUE
                            xvalue.write ((((((unsupported)).apply ((xp)) ((((unsupported)).apply (((xi).add 1))))).xstrip)).apply)
                            (((((xlen)).apply ((xvalue))).geq 2).and (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((1.neg)))))) ("\""))).if
                              seq
                                xvalue.write (((unsupported)).apply ((xvalue)) ((((unsupported)).apply (1) ((1.neg)))))
                                xvalue.write (((((((xvalue).xreplace)).apply ("\\\\") ("\\")).xreplace)).apply ("\\\"") ("\""))
                            (xhas_encoding).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xlang)) ((xvalue)))) (((((xvalue).xsplit)).apply ("'"))))
                                xvalue.write (((unsupported)).apply ((xunquote)) (((((xvalue).xdecode)).apply)) (((((xencoding).xdecode)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((xpdict)) ((xname)))) ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xpdict)))))
            x_parse_header_params.write
              [xs]
                memory > xplist
                memory > xend
                memory > xf
                seq > @
                  seq
                    xplist.write (((unsupported)).apply)
                    while.
                      ((((unsupported)).apply ((xs)) ((((unsupported)).apply (1)))).eq ";")
                      [unused]
                        seq > @
                          seq
                            xs.write (((unsupported)).apply ((xs)) ((((unsupported)).apply (1))))
                            xend.write ((((xs).xfind)).apply (";"))
                            while.
                              (((xend).greater 0).and (((((xs).xcount)).apply ("\"") (0) ((xend))).mod 2))
                              [unused]
                                seq > @
                                  xend.write ((((xs).xfind)).apply (";") (((xend).add 1)))
                            ((xend).less 0).if
                              xend.write (((xlen)).apply ((xs)))
                            xf.write (((unsupported)).apply ((xs)) ((((unsupported)).apply ((xend)))))
                            bogusForceDataize.write ((((xplist).xappend)).apply (((((xf).xstrip)).apply)))
                            xs.write (((unsupported)).apply ((xs)) ((((unsupported)).apply ((xend)))))
                    (((unsupported)).apply ((xplist)))