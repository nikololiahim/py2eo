memory > xdata
memory > xhandler
memory > xValueError
memory > xstr
memory > xpos
memory > xrange
memory > xb
memory > xerr
memory > xbytes
memory > xencoding
memory > xUnicodeEncodeError
memory > xenc
memory > xn
memory > xUnicodeError
memory > xD
memory > xUnicodeDecodeError
memory > xc
memory > xIndexError
memory > xbytearray
memory > xKeyError
memory > xuni
memory > xtype
memory > xunicodedata
memory > xException
memory > xr
memory > xcodecs
memory > xx
memory > xi
memory > xwrongarg
memory > xs
memory > xsys
memory > xchr
memory > xcls
memory > xLookupError
memory > xPosReturn
memory > xBadObjectUnicodeDecodeError
memory > xres
memory > xhtml
memory > xord
memory > xunittest
memory > xlen
memory > xdict
memory > xj
memory > xisinstance
memory > xFakeUnicodeError
memory > xUnicodeTranslateError
memory > xTypeError
memory > x__name__
memory > xBadObjectUnicodeEncodeError
[] > test_codeccallbacks
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_crashing_decode_handler
        memory > xtest_uninamereplace
        memory > xtest_bug828737
        memory > xtest_fake_error_class
        memory > xtest_translatehelper
        memory > xtest_xmlcharnamereplace
        memory > xtest_badandgoodsurrogatepassexceptions
        memory > xtest_decodehelper
        memory > x__init__
        memory > xtest_nameescape
        memory > xtest_badandgoodbackslashreplaceexceptions
        memory > xtest_unicodeencodeerror
        memory > xtest_badandgoodstrictexceptions
        memory > xcheck_exceptionobjectargs
        memory > xtest_badhandlerresults
        memory > xtest_decoding_callbacks
        memory > xtest_xmlcharrefvalues
        memory > xtest_lookup
        memory > xtest_badandgoodsurrogateescapeexceptions
        memory > xtest_unicodedecodeerror
        memory > xtest_badregistercall
        memory > xtest_unknownhandler
        memory > xhandle
        memory > xtest_badandgoodxmlcharrefreplaceexceptions
        memory > xtest_unencodablereplacement
        memory > xtest_badandgoodreplaceexceptions
        memory > xtest_unicodetranslateerror
        memory > xtest_badlookupcall
        memory > xtest_backslashescape
        memory > xtest_badandgoodnamereplaceexceptions
        memory > xtest_badandgoodignoreexceptions
        memory > xtest_callbacks
        memory > xtest_mutatingdecodehandler
        memory > xtest_charmapencode
        memory > xtest_xmlcharrefreplace
        memory > xtest_encodehelper
        memory > xtest_longstrings
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xpos)) (0))
                xhandle.write
                  [xself xexc]
                    memory > xrealpos
                    memory > xoldpos
                    seq > @
                      seq
                        xoldpos.write ((xself).xpos)
                        xrealpos.write (xoldpos)
                        ((xrealpos).less 0).if
                          xrealpos.write ((((xlen)).apply (((xexc).xobject))).add (xrealpos))
                        ((xrealpos).leq ((xexc).xstart)).if
                          (((unsupported)).apply (((xself).xpos)) ((((xlen)).apply (((xexc).xobject)))))
                        (((unsupported)).apply ((((unsupported)).apply ("<?>") ((xoldpos)))))
            (((unsupported)).apply ((xUnicodeEncodeError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeEncodeError).x__init__)).apply ("bad") (1) (0) ("") ("ascii") ((xself)))
                      (((unsupported)).apply (((xself).xstart)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xUnicodeEncodeError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeEncodeError).x__init__)).apply ((xself)) ("ascii") ("") (0) (1) ("bad"))
                      (((unsupported)).apply (((xself).xobject)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xUnicodeDecodeError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeDecodeError).x__init__)).apply ((xself)) ("ascii") ((((xbytearray)).apply (""))) (0) (1) ("bad"))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xend)))))))
            (((unsupported)).apply ((xUnicodeDecodeError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeDecodeError).x__init__)).apply ((xself)) ("ascii") ((((xbytearray)).apply (""))) (0) (1) ("bad"))
                      (((unsupported)).apply (((xself).xobject)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xUnicodeTranslateError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeTranslateError).x__init__)).apply ((xself)) ("") (0) (1) ("bad"))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xstart)))))))
            (((unsupported)).apply ((xUnicodeTranslateError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeTranslateError).x__init__)).apply ((xself)) ("") (0) (1) ("bad"))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xend)))))))
            (((unsupported)).apply ((xUnicodeTranslateError)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xUnicodeTranslateError).x__init__)).apply ((xself)) ("") (0) (1) ("bad"))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xobject)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_xmlcharrefreplace.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write "u30b9u30d1u30e2 xe4nd eggs"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xencode)).apply ("ascii") ("xmlcharrefreplace"))) ("&#12473;&#12497;&#12514; &#228;nd eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xencode)).apply ("latin-1") ("xmlcharrefreplace"))) ("&#12473;&#12497;&#12514; xe4nd eggs"))
                xtest_xmlcharnamereplace.write
                  [xself]
                    memory > xxmlcharnamereplace
                    memory > xsin
                    memory > xsout
                    seq > @
                      seq
                        xxmlcharnamereplace.write
                          [xexc]
                            memory > xl
                            seq > @
                              seq
                                ((((xisinstance)).apply ((xexc)) ((xUnicodeEncodeError))).not).if
                                  (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                                xl.write (((unsupported)).apply)
                                (((unsupported)).apply ((xc)) ((((unsupported)).apply (((xexc).xobject)) ((((unsupported)).apply (((xexc).xstart)) (((xexc).xend)))))))
                                  (((unsupported)).apply ((xKeyError)))
                                    bogusForceDataize.write ((((xl).xappend)).apply (("&%s;".mod (((unsupported)).apply ((((xhtml).xentities).xcodepoint2name)) ((((xord)).apply ((xc))))))))
                                    bogusForceDataize.write ((((xl).xappend)).apply (("&#%d;".mod (((xord)).apply ((xc))))))
                                (((unsupported)).apply ((((unsupported)).apply (((("".xjoin)).apply ((xl)))) (((xexc).xend)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.xmlcharnamereplace") ((xxmlcharnamereplace)))
                        xsin.write "xabu211cxbb = u2329u1234u20acu232a"
                        xsout.write "&laquo;&real;&raquo; = &lang;&#4660;&euro;&rang;"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("ascii") ("test.xmlcharnamereplace"))) ((xsout)))
                        xsout.write "xab&real;xbb = &lang;&#4660;&euro;&rang;"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("latin-1") ("test.xmlcharnamereplace"))) ((xsout)))
                        xsout.write "xab&real;xbb = &lang;&#4660;xa4&rang;"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("iso-8859-15") ("test.xmlcharnamereplace"))) ((xsout)))
                xtest_uninamereplace.write
                  [xself]
                    memory > xuninamereplace
                    memory > xsin
                    memory > xsout
                    seq > @
                      seq
                        xuninamereplace.write
                          [xexc]
                            memory > xl
                            seq > @
                              seq
                                ((((xisinstance)).apply ((xexc)) ((xUnicodeEncodeError))).not).if
                                  (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                                xl.write (((unsupported)).apply)
                                (((unsupported)).apply ((xc)) ((((unsupported)).apply (((xexc).xobject)) ((((unsupported)).apply (((xexc).xstart)) (((xexc).xend)))))))
                                  bogusForceDataize.write ((((xl).xappend)).apply (((((xunicodedata).xname)).apply ((xc)) (("0x%x".mod (((xord)).apply ((xc))))))))
                                (((unsupported)).apply ((((unsupported)).apply (("033[1m%s033[0m".mod (((", ".xjoin)).apply ((xl))))) (((xexc).xend)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.uninamereplace") ((xuninamereplace)))
                        xsin.write "xacu1234u20acu8000"
                        xsout.write "033[1mNOT SIGN, ETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000033[0m"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("ascii") ("test.uninamereplace"))) ((xsout)))
                        xsout.write "xac033[1mETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000033[0m"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("latin-1") ("test.uninamereplace"))) ((xsout)))
                        xsout.write "xac033[1mETHIOPIC SYLLABLE SEE033[0mxa4033[1mCJK UNIFIED IDEOGRAPH-8000033[0m"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("iso-8859-15") ("test.uninamereplace"))) ((xsout)))
                xtest_backslashescape.write
                  [xself]
                    memory > xsin
                    memory > xsout
                    seq > @
                      seq
                        xsin.write "axacu1234u20acu8000U0010ffff"
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("ascii") ("backslashreplace"))) ((xsout)))
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("latin-1") ("backslashreplace"))) ((xsout)))
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("iso-8859-15") ("backslashreplace"))) ((xsout)))
                xtest_nameescape.write
                  [xself]
                    memory > xsin
                    memory > xsout
                    seq > @
                      seq
                        xsin.write "axacu1234u20acu8000U0010ffff"
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("ascii") ("namereplace"))) ((xsout)))
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("latin-1") ("namereplace"))) ((xsout)))
                        xsout.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xencode)).apply ("iso-8859-15") ("namereplace"))) ((xsout)))
                xtest_decoding_callbacks.write
                  [xself]
                    memory > xrelaxedutf8
                    memory > xsin
                    memory > xsout
                    seq > @
                      seq
                        xrelaxedutf8.write
                          [xexc]
                            seq > @
                              seq
                                ((((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).not).if
                                  (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                                ((((unsupported)).apply (((xexc).xobject)) ((((unsupported)).apply (((xexc).xstart)) ((((xexc).xstart).add 2))))).eq "xc0x80").if
                                  (((unsupported)).apply ((((unsupported)).apply ("x00") ((((xexc).xstart).add 2)))))
                                  (((unsupported)).apply ((xexc)))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.relaxedutf8") ((xrelaxedutf8)))
                        xsin.write "ax00bxc0x80cxc3xbcxc0x80xc0x80"
                        xsout.write "ax00bx00cxfcx00x00"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsin).xdecode)).apply ("utf-8") ("test.relaxedutf8"))) ((xsout)))
                        xsin.write "xc0x80xc0x81"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) (((xsin).xdecode)) ("utf-8") ("test.relaxedutf8"))
                xtest_charmapencode.write
                  [xself]
                    memory > xsin
                    memory > xcharmap
                    memory > xsout
                    seq > @
                      seq
                        xcharmap.write (((xdict)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xord)).apply ((xc)))) ((((xbytes)).apply ((2.mul ((((xc).xupper)).apply))) ("ascii"))))) ((xc)) ("abcdefgh"))))
                        xsin.write "abc"
                        xsout.write "AABBCC"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcodecs).xcharmap_encode)).apply ((xsin)) ("strict") ((xcharmap)))) (0))) ((xsout)))
                        xsin.write "abcA"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xcodecs).xcharmap_encode)) ((xsin)) ("strict") ((xcharmap)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcharmap)) ((((xord)).apply ("?"))))) ("XYZ"))
                        xsin.write "abcDEF"
                        xsout.write "AABBCCXYZXYZXYZ"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcodecs).xcharmap_encode)).apply ((xsin)) ("replace") ((xcharmap)))) (0))) ((xsout)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcharmap)) ((((xord)).apply ("?"))))) ("XYZ"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xcharmap_encode)) ((xsin)) ("replace") ((xcharmap)))
                xtest_callbacks.write
                  [xself]
                    memory > xs
                    memory > xhandler2
                    memory > xhandler1
                    seq > @
                      seq
                        xhandler1.write
                          [xexc]
                            memory > xr
                            memory > xl
                            seq > @
                              seq
                                xr.write (((xrange)).apply (((xexc).xstart)) (((xexc).xend)))
                                (((xisinstance)).apply ((xexc)) ((xUnicodeEncodeError))).if
                                  xl.write (((unsupported)).apply (("<%d>".mod (((xord)).apply ((((unsupported)).apply (((xexc).xobject)) ((xpos))))))) ((xpos)) ((xr)))
                                  (((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).if
                                    xl.write (((unsupported)).apply (("<%d>".mod (((unsupported)).apply (((xexc).xobject)) ((xpos))))) ((xpos)) ((xr)))
                                    (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                                (((unsupported)).apply ((((unsupported)).apply (("[%s]".mod ((("".xjoin)).apply ((xl))))) (((xexc).xend)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.handler1") ((xhandler1)))
                        xhandler2.write
                          [xexc]
                            memory > xl
                            seq > @
                              seq
                                ((((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).not).if
                                  (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                                xl.write (((unsupported)).apply (("<%d>".mod (((unsupported)).apply (((xexc).xobject)) ((xpos))))) ((xpos)) ((((xrange)).apply (((xexc).xstart)) (((xexc).xend)))))
                                (((unsupported)).apply ((((unsupported)).apply (("[%s]".mod ((("".xjoin)).apply ((xl))))) ((((xexc).xend).add 1)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.handler2") ((xhandler2)))
                        xs.write "x00x81x7fx80xff"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xdecode)).apply ("ascii") ("test.handler1"))) ("x00[<129>]x7f[<128>][<255>]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xdecode)).apply ("ascii") ("test.handler2"))) ("x00[<129>][<128>]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply).xdecode)).apply ("unicode-escape") ("test.handler1"))) ("u3042[<92><117><51>]xxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply).xdecode)).apply ("unicode-escape") ("test.handler1"))) ("u3042[<92><117><51>]xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcodecs).xcharmap_decode)).apply ("abc") ("test.handler1") ((((unsupported)).apply ((((xord)).apply ("a"))) ("z"))))) (0))) ("z[<98>][<99>]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("gxfcxdfrk".xencode)).apply ("ascii") ("test.handler1"))) ("g[<252><223>]rk"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("gxfcxdf".xencode)).apply ("ascii") ("test.handler1"))) ("g[<252><223>]"))
                xtest_longstrings.write
                  [xself]
                    memory > xerrors
                    memory > xl
                    seq > @
                      seq
                        xerrors.write (((unsupported)).apply ("strict") ("ignore") ("replace") ("xmlcharrefreplace") ("backslashreplace") ("namereplace"))
                        (((unsupported)).apply ((xerr)) ((xerrors)))
                          bogusForceDataize.write ((((xcodecs).xregister_error)).apply (("test.".add (xerr))) (((((xcodecs).xlookup_error)).apply ((xerr)))))
                        xl.write 1000
                        (((unsupported)).apply ((xerrors)) ((((unsupported)).apply (("test.".add (xerr))) ((xerr)) ((xerrors)))))
                        (((unsupported)).apply ((xuni)) ((((unsupported)).apply (((xs).mul (xl))) ((xs)) ((((unsupported)).apply ("x") ("u3042") ("axe4"))))))
                          (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("ascii") ("latin-1") ("iso-8859-1") ("iso-8859-15") ("utf-8") ("utf-7") ("utf-16") ("utf-32"))))
                            (((unsupported)).apply ((xerr)) ((xerrors)))
                              (((unsupported)).apply ((xUnicodeError)))
                                bogusForceDataize.write ((((xuni).xencode)).apply ((xenc)) ((xerr)))
                xcheck_exceptionobjectargs.write
                  [xself xexctype xargs xmsg]
                    memory > xwrongargs
                    memory > xcallargs
                    memory > xexc
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xexctype)) ((((unsupported)).apply ((((unsupported)).apply ((xargs)) ((((unsupported)).apply ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xexctype)) ((((unsupported)).apply (((xargs).add (((unsupported)).apply ("too much")))))))
                        xwrongargs.write (((unsupported)).apply ("spam") ("eggs") ("spam") (42) (1.0) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xargs)))))))
                          (((unsupported)).apply ((xwrongarg)) ((xwrongargs)))
                            seq
                              (((unsupported)).apply ((((xtype)).apply ((xwrongarg)))) ((((xtype)).apply ((((unsupported)).apply ((xargs)) ((xi))))))).if
                                (((unsupported)).apply)
                              xcallargs.write (((unsupported)).apply)
                              (((unsupported)).apply ((xj)) ((((xrange)).apply ((((xlen)).apply ((xargs)))))))
                                ((xi).eq (xj)).if
                                  bogusForceDataize.write ((((xcallargs).xappend)).apply ((xwrongarg)))
                                  bogusForceDataize.write ((((xcallargs).xappend)).apply ((((unsupported)).apply ((xargs)) ((xi)))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xexctype)) ((((unsupported)).apply ((xcallargs)))))
                        xexc.write (((xexctype)).apply ((((unsupported)).apply ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xexc)))) ((xmsg)))
                xtest_unicodeencodeerror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("gxfcrk") (1) (2) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("gxfcrk") (1) (4) ("ouch"))) ("'ascii' codec can't encode characters in position 1-3: ouch"))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("xfcx") (0) (1) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("u0100x") (0) (1) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("uffffx") (0) (1) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("U00010000x") (0) (1) ("ouch"))) ((((unsupported)).apply)))
                xtest_unicodedecodeerror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeDecodeError)) ((((unsupported)).apply ("ascii") ((((xbytearray)).apply ("gxfcrk"))) (1) (2) ("ouch"))) ("'ascii' codec can't decode byte 0xfc in position 1: ouch"))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeDecodeError)) ((((unsupported)).apply ("ascii") ((((xbytearray)).apply ("gxfcrk"))) (1) (3) ("ouch"))) ("'ascii' codec can't decode bytes in position 1-2: ouch"))
                xtest_unicodetranslateerror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("gxfcrk") (1) (2) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("gu0100rk") (1) (2) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("guffffrk") (1) (2) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("gU00010000rk") (1) (2) ("ouch"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_exceptionobjectargs)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("gxfcrk") (1) (3) ("ouch"))) ("can't translate characters in position 1-2: ouch"))
                xtest_badandgoodstrictexceptions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xstrict_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xException)) (((xcodecs).xstrict_errors)) ((((xException)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) (((xcodecs).xstrict_errors)) ((((xUnicodeEncodeError)).apply ("ascii") ("u3042") (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) (((xcodecs).xstrict_errors)) ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("xff"))) (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeTranslateError)) (((xcodecs).xstrict_errors)) ((((xUnicodeTranslateError)).apply ("u3042") (0) (1) ("ouch"))))
                xtest_badandgoodignoreexceptions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xignore_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xignore_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xignore_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ("au3042b") (1) (2) ("ouch"))))) ((((unsupported)).apply ("") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xignore_errors)).apply ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("axffb"))) (1) (2) ("ouch"))))) ((((unsupported)).apply ("") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xignore_errors)).apply ((((xUnicodeTranslateError)).apply ("au3042b") (1) (2) ("ouch"))))) ((((unsupported)).apply ("") (2))))
                xtest_badandgoodreplaceexceptions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xreplace_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xreplace_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xreplace_errors)) ((((xBadObjectUnicodeEncodeError)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xreplace_errors)) ((((xBadObjectUnicodeDecodeError)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xreplace_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ("au3042b") (1) (2) ("ouch"))))) ((((unsupported)).apply ("?") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xreplace_errors)).apply ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("axffb"))) (1) (2) ("ouch"))))) ((((unsupported)).apply ("ufffd") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xreplace_errors)).apply ((((xUnicodeTranslateError)).apply ("au3042b") (1) (2) ("ouch"))))) ((((unsupported)).apply ("ufffd") (2))))
                xtest_badandgoodxmlcharrefreplaceexceptions.write
                  [xself]
                    memory > xs
                    memory > xcs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xxmlcharrefreplace_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xxmlcharrefreplace_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xxmlcharrefreplace_errors)) ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("xff"))) (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xxmlcharrefreplace_errors)) ((((xUnicodeTranslateError)).apply ("u3042") (0) (1) ("ouch"))))
                        xcs.write (((unsupported)).apply (0) (1) (9) (10) (99) (100) (999) (1000) (9999) (10000) (99999) (100000) (999999) (1000000))
                        (((unsupported)).apply ((xcs)) ((((unsupported)).apply (55296) (57343))))
                        xs.write ((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xc)))) ((xc)) ((xcs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xxmlcharrefreplace_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ((("a".add (xs)).add "b")) (1) ((1.add (((xlen)).apply ((xs))))) ("ouch"))))) ((((unsupported)).apply (((("".xjoin)).apply ((((unsupported)).apply (("&#%d;".mod (xc))) ((xc)) ((xcs)))))) ((1.add (((xlen)).apply ((xs))))))))
                xtest_badandgoodbackslashreplaceexceptions.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xbackslashreplace_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xbackslashreplace_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("u3042") ((((unsupported)).apply)))) ((((unsupported)).apply ("n") ((((unsupported)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply)))) ((((unsupported)).apply ("x00") ((((unsupported)).apply)))) ((((unsupported)).apply ("xff") ((((unsupported)).apply)))) ((((unsupported)).apply ("u0100") ((((unsupported)).apply)))) ((((unsupported)).apply ("uffff") ((((unsupported)).apply)))) ((((unsupported)).apply ("U00010000") ((((unsupported)).apply)))) ((((unsupported)).apply ("U0010ffff") ((((unsupported)).apply)))) ((((unsupported)).apply ("ud800") ((((unsupported)).apply)))) ((((unsupported)).apply ("udfff") ((((unsupported)).apply)))) ((((unsupported)).apply ("ud800udfff") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xr)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xs)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xbackslashreplace_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ((("a".add (xs)).add "b")) (1) ((1.add (((xlen)).apply ((xs))))) ("ouch"))))) ((((unsupported)).apply ((xr)) ((1.add (((xlen)).apply ((xs))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xbackslashreplace_errors)).apply ((((xUnicodeTranslateError)).apply ((("a".add (xs)).add "b")) (1) ((1.add (((xlen)).apply ((xs))))) ("ouch"))))) ((((unsupported)).apply ((xr)) ((1.add (((xlen)).apply ((xs))))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply)))) ((((unsupported)).apply ("n") ((((unsupported)).apply)))) ((((unsupported)).apply ("x00") ((((unsupported)).apply)))) ((((unsupported)).apply ("xff") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((xr)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xbackslashreplace_errors)).apply ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ((("a".add (xb)).add "b")))) (1) (2) ("ouch"))))) ((((unsupported)).apply ((xr)) (2))))
                xtest_badandgoodnamereplaceexceptions.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xnamereplace_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xnamereplace_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xnamereplace_errors)) ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("xff"))) (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xnamereplace_errors)) ((((xUnicodeTranslateError)).apply ("u3042") (0) (1) ("ouch"))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("u3042") ((((unsupported)).apply)))) ((((unsupported)).apply ("x00") ((((unsupported)).apply)))) ((((unsupported)).apply ("ufbf9") ((((unsupported)).apply)))) ((((unsupported)).apply ("U000e007f") ((((unsupported)).apply)))) ((((unsupported)).apply ("U0010ffff") ((((unsupported)).apply)))) ((((unsupported)).apply ("ud800") ((((unsupported)).apply)))) ((((unsupported)).apply ("udfff") ((((unsupported)).apply)))) ((((unsupported)).apply ("ud800udfff") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xr)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcodecs).xnamereplace_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ((("a".add (xs)).add "b")) (1) ((1.add (((xlen)).apply ((xs))))) ("ouch"))))) ((((unsupported)).apply ((xr)) ((1.add (((xlen)).apply ((xs))))))))
                xtest_badandgoodsurrogateescapeexceptions.write
                  [xself]
                    memory > xsurrogateescape_errors
                    seq > @
                      seq
                        xsurrogateescape_errors.write ((((xcodecs).xlookup_error)).apply ("surrogateescape"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogateescape_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogateescape_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogateescape_errors)) ((((xUnicodeTranslateError)).apply ("udc80") (0) (1) ("ouch"))))
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("a") ("udc7f") ("udd00"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) ((xsurrogateescape_errors)) ((((xUnicodeEncodeError)).apply ("ascii") ((xs)) (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsurrogateescape_errors)).apply ((((xUnicodeEncodeError)).apply ("ascii") ("audc80b") (1) (2) ("ouch"))))) ((((unsupported)).apply ("x80") (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) ((xsurrogateescape_errors)) ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("a"))) (0) (1) ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsurrogateescape_errors)).apply ((((xUnicodeDecodeError)).apply ("ascii") ((((xbytearray)).apply ("ax80b"))) (1) (2) ("ouch"))))) ((((unsupported)).apply ("udc80") (2))))
                xtest_badandgoodsurrogatepassexceptions.write
                  [xself]
                    memory > xsurrogatepass_errors
                    memory > xtests
                    seq > @
                      seq
                        xsurrogatepass_errors.write ((((xcodecs).xlookup_error)).apply ("surrogatepass"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogatepass_errors)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogatepass_errors)) ((((xUnicodeError)).apply ("ouch"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsurrogatepass_errors)) ((((xUnicodeTranslateError)).apply ("ud800") (0) (1) ("ouch"))))
                        (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("utf-8") ("utf-16le") ("utf-16be") ("utf-32le") ("utf-32be"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xenc)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) ((xsurrogatepass_errors)) ((((xUnicodeEncodeError)).apply ((xenc)) ("a") (0) (1) ("ouch"))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) ((xsurrogatepass_errors)) ((((xUnicodeDecodeError)).apply ((xenc)) (((("a".xencode)).apply ((xenc)))) (0) (1) ("ouch"))))
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("ud800") ("udfff") ("ud800udfff"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xs)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) ((xsurrogatepass_errors)) ((((xUnicodeEncodeError)).apply ("ascii") ((xs)) (0) ((((xlen)).apply ((xs)))) ("ouch"))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("utf-8") ("ud800") ("xedxa0x80") (3))) ((((unsupported)).apply ("utf-16le") ("ud800") ("x00xd8") (2))) ((((unsupported)).apply ("utf-16be") ("ud800") ("xd8x00") (2))) ((((unsupported)).apply ("utf-32le") ("ud800") ("x00xd8x00x00") (4))) ((((unsupported)).apply ("utf-32be") ("ud800") ("x00x00xd8x00") (4))) ((((unsupported)).apply ("utf-8") ("udfff") ("xedxbfxbf") (3))) ((((unsupported)).apply ("utf-16le") ("udfff") ("xffxdf") (2))) ((((unsupported)).apply ("utf-16be") ("udfff") ("xdfxff") (2))) ((((unsupported)).apply ("utf-32le") ("udfff") ("xffxdfx00x00") (4))) ((((unsupported)).apply ("utf-32be") ("udfff") ("x00x00xdfxff") (4))) ((((unsupported)).apply ("utf-8") ("ud800udfff") ("xedxa0x80xedxbfxbf") (3))) ((((unsupported)).apply ("utf-16le") ("ud800udfff") ("x00xd8xffxdf") (2))) ((((unsupported)).apply ("utf-16be") ("ud800udfff") ("xd8x00xdfxff") (2))) ((((unsupported)).apply ("utf-32le") ("ud800udfff") ("x00xd8x00x00xffxdfx00x00") (4))) ((((unsupported)).apply ("utf-32be") ("ud800udfff") ("x00x00xd8x00x00x00xdfxff") (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xenc)) ((xs)) ((xb)) ((xn)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xenc)) ((xs)) ((xb)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsurrogatepass_errors)).apply ((((xUnicodeEncodeError)).apply ((xenc)) ((("a".add (xs)).add "b")) (1) ((1.add (((xlen)).apply ((xs))))) ("ouch"))))) ((((unsupported)).apply ((xb)) ((1.add (((xlen)).apply ((xs))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsurrogatepass_errors)).apply ((((xUnicodeDecodeError)).apply ((xenc)) ((((xbytearray)).apply ((("a".add (((unsupported)).apply ((xb)) ((((unsupported)).apply ((xn)))))).add "b")))) (1) ((1.add (xn))) ("ouch"))))) ((((unsupported)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (1))))) ((1.add (xn))))))
                xtest_badhandlerresults.write
                  [xself]
                    memory > xencs
                    memory > xresults
                    seq > @
                      seq
                        xresults.write (((unsupported)).apply (42) ("foo") ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply ("foo") (1) (3))) ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("foo") (1) (3))) ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("foo"))))
                        xencs.write (((unsupported)).apply ("ascii") ("latin-1") ("iso-8859-1") ("iso-8859-15"))
                        (((unsupported)).apply ((xres)) ((xresults)))
                          seq
                            bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.badhandler") ((((unsupported)).apply ((xres)))))
                            (((unsupported)).apply ((xenc)) ((xencs)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("u3042".xencode)) ((xenc)) ("test.badhandler"))
                            (((unsupported)).apply ((((unsupported)).apply ((xenc)) ((xbytes)))) ((((unsupported)).apply ((((unsupported)).apply ("ascii") ("xff"))) ((((unsupported)).apply ("utf-8") ("xff"))) ((((unsupported)).apply ("utf-7") ("+x-"))))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbytes).xdecode)) ((xenc)) ("test.badhandler"))
                xtest_lookup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xstrict_errors)) (((((xcodecs).xlookup_error)).apply ("strict"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xignore_errors)) (((((xcodecs).xlookup_error)).apply ("ignore"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xstrict_errors)) (((((xcodecs).xlookup_error)).apply ("strict"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xxmlcharrefreplace_errors)) (((((xcodecs).xlookup_error)).apply ("xmlcharrefreplace"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xbackslashreplace_errors)) (((((xcodecs).xlookup_error)).apply ("backslashreplace"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcodecs).xnamereplace_errors)) (((((xcodecs).xlookup_error)).apply ("namereplace"))))
                xtest_unencodablereplacement.write
                  [xself]
                    memory > xunencrepl
                    seq > @
                      seq
                        xunencrepl.write
                          [xexc]
                            seq > @
                              (((xisinstance)).apply ((xexc)) ((xUnicodeEncodeError))).if
                                (((unsupported)).apply ((((unsupported)).apply ("u4242") (((xexc).xend)))))
                                (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.unencreplhandler") ((xunencrepl)))
                        (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("ascii") ("iso-8859-1") ("iso-8859-15"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) (("u4242".xencode)) ((xenc)) ("test.unencreplhandler"))
                xtest_badregistercall.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xregister_error)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xregister_error)) ("test.dummy") (42))
                xtest_badlookupcall.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xlookup_error)))
                xtest_unknownhandler.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xLookupError)) (((xcodecs).xlookup_error)) ("test.unknown"))
                xtest_xmlcharrefvalues.write
                  [xself]
                    memory > xs
                    memory > xv
                    seq > @
                      seq
                        xv.write (((unsupported)).apply (1) (5) (10) (50) (100) (500) (1000) (5000) (10000) (50000) (100000) (500000) (1000000))
                        xs.write ((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((xv)))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.xmlcharrefreplace") (((xcodecs).xxmlcharrefreplace_errors)))
                        (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("ascii") ("iso-8859-15"))))
                          (((unsupported)).apply ((xerr)) ((((unsupported)).apply ("xmlcharrefreplace") ("test.xmlcharrefreplace"))))
                            bogusForceDataize.write ((((xs).xencode)).apply ((xenc)) ((xerr)))
                xtest_decodehelper.write
                  [xself]
                    memory > x__getitem__
                    memory > xhandler
                    memory > xbaddecodereturn1
                    memory > xbaddecodereturn2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xLookupError)) (("xff".xdecode)) ("ascii") ("test.unknown"))
                        xbaddecodereturn1.write
                          [xexc]
                            seq > @
                              (((unsupported)).apply (42))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.baddecodereturn1") ((xbaddecodereturn1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("xff".xdecode)) ("ascii") ("test.baddecodereturn1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("\\".xdecode)) ("unicode-escape") ("test.baddecodereturn1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xdecode)) ("unicode-escape") ("test.baddecodereturn1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xdecode)) ("unicode-escape") ("test.baddecodereturn1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xdecode)) ("unicode-escape") ("test.baddecodereturn1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xdecode)) ("raw-unicode-escape") ("test.baddecodereturn1"))
                        xbaddecodereturn2.write
                          [xexc]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.baddecodereturn2") ((xbaddecodereturn2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("xff".xdecode)) ("ascii") ("test.baddecodereturn2"))
                        xhandler.write (((xPosReturn)).apply)
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.posreturn") (((xhandler).xhandle)))
                        (((unsupported)).apply (((xhandler).xpos)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xdecode)).apply ("ascii") ("test.posreturn"))) ("<?>0"))
                        (((unsupported)).apply (((xhandler).xpos)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xdecode)).apply ("ascii") ("test.posreturn"))) ("<?><?>"))
                        (((unsupported)).apply (((xhandler).xpos)) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (("xff0".xdecode)) ("ascii") ("test.posreturn"))
                        (((unsupported)).apply (((xhandler).xpos)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xdecode)).apply ("ascii") ("test.posreturn"))) ("<?>0"))
                        (((unsupported)).apply (((xhandler).xpos)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xdecode)).apply ("ascii") ("test.posreturn"))) ("<?>"))
                        (((unsupported)).apply (((xhandler).xpos)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (("xff0".xdecode)) ("ascii") ("test.posreturn"))
                        (((unsupported)).apply (((xhandler).xpos)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply).xdecode)).apply ("raw-unicode-escape") ("test.posreturn"))) ("<?>0"))
                        (((unsupported)).apply ((xdict)))
                          x__getitem__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xcodecs).xcharmap_decode)) ("xff") ("strict") ((((unsupported)).apply (255) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcodecs).xcharmap_decode)) ("xff") ("strict") ((((xD)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xcharmap_decode)) ("xff") ("strict") ((((unsupported)).apply (255) ((((xsys).xmaxunicode).add 1)))))
                xtest_encodehelper.write
                  [xself]
                    memory > xbadencodereturn1
                    memory > x__getitem__
                    memory > xhandler
                    memory > xbadencodereturn2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xLookupError)) (("xff".xencode)) ("ascii") ("test.unknown"))
                        xbadencodereturn1.write
                          [xexc]
                            seq > @
                              (((unsupported)).apply (42))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.badencodereturn1") ((xbadencodereturn1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("xff".xencode)) ("ascii") ("test.badencodereturn1"))
                        xbadencodereturn2.write
                          [xexc]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.badencodereturn2") ((xbadencodereturn2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("xff".xencode)) ("ascii") ("test.badencodereturn2"))
                        xhandler.write (((xPosReturn)).apply)
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.posreturn") (((xhandler).xhandle)))
                        (((unsupported)).apply (((xhandler).xpos)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xencode)).apply ("ascii") ("test.posreturn"))) ("<?>0"))
                        (((unsupported)).apply (((xhandler).xpos)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xencode)).apply ("ascii") ("test.posreturn"))) ("<?><?>"))
                        (((unsupported)).apply (((xhandler).xpos)) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (("xff0".xencode)) ("ascii") ("test.posreturn"))
                        (((unsupported)).apply (((xhandler).xpos)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xencode)).apply ("ascii") ("test.posreturn"))) ("<?>0"))
                        (((unsupported)).apply (((xhandler).xpos)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xff0".xencode)).apply ("ascii") ("test.posreturn"))) ("<?>"))
                        (((unsupported)).apply (((xhandler).xpos)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (("xff0".xencode)) ("ascii") ("test.posreturn"))
                        (((unsupported)).apply (((xhandler).xpos)) (0))
                        (((unsupported)).apply ((xdict)))
                          x__getitem__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                        (((unsupported)).apply ((xerr)) ((((unsupported)).apply ("strict") ("replace") ("xmlcharrefreplace") ("backslashreplace") ("namereplace") ("test.posreturn"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xcodecs).xcharmap_encode)) ("xff") ((xerr)) ((((unsupported)).apply (255) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcodecs).xcharmap_encode)) ("xff") ((xerr)) ((((xD)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcodecs).xcharmap_encode)) ("xff") ((xerr)) ((((unsupported)).apply (255) (300))))
                xtest_translatehelper.write
                  [xself]
                    memory > x__getitem__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdict)))
                          x__getitem__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (("xff".xtranslate)) ((((unsupported)).apply (255) ((((xsys).xmaxunicode).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (("xff".xtranslate)) ((((unsupported)).apply (255) ((((unsupported)).apply)))))
                xtest_bug828737.write
                  [xself]
                    memory > xcharmap
                    memory > xtext
                    seq > @
                      seq
                        xcharmap.write (((unsupported)).apply ((((xord)).apply ("&"))) ("&amp;") ((((xord)).apply ("<"))) ("&lt;") ((((xord)).apply (">"))) ("&gt;") ((((xord)).apply ("\""))) ("&quot;"))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply (1) (10) (100) (1000))))
                          seq
                            xtext.write ("abc<def>ghi".mul (xn))
                            bogusForceDataize.write ((((xtext).xtranslate)).apply ((xcharmap)))
                xtest_mutatingdecodehandler.write
                  [xself]
                    memory > xbaddata
                    memory > xreplacing
                    memory > xmutating
                    seq > @
                      seq
                        xbaddata.write (((unsupported)).apply ((((unsupported)).apply ("ascii") ("xff"))) ((((unsupported)).apply ("utf-7") ("++"))) ((((unsupported)).apply ("utf-8") ("xff"))) ((((unsupported)).apply ("utf-16") ("xff"))) ((((unsupported)).apply ("utf-32") ("xff"))) ((((unsupported)).apply ("unicode-escape") ((((unsupported)).apply)))) ((((unsupported)).apply ("raw-unicode-escape") ((((unsupported)).apply)))))
                        xreplacing.write
                          [xexc]
                            seq > @
                              (((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).if
                                seq
                                  (((unsupported)).apply (((xexc).xobject)) (42))
                                  (((unsupported)).apply ((((unsupported)).apply ("u4242") (0))))
                                (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.replacing") ((xreplacing)))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xdata)))) ((xbaddata)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write ((((xdata).xdecode)).apply ((xencoding)) ("test.replacing"))
                        xmutating.write
                          [xexc]
                            seq > @
                              (((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).if
                                seq
                                  (((unsupported)).apply (((xexc).xobject)) (""))
                                  (((unsupported)).apply ((((unsupported)).apply ("u4242") (0))))
                                (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.mutating") ((xmutating)))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xdata)))) ((xbaddata)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdata).xdecode)).apply ((xencoding)) ("test.mutating"))) ("u4242"))
                xtest_crashing_decode_handler.write
                  [xself]
                    memory > xforward_shorter_than_end
                    memory > xreplace_with_long
                    seq > @
                      seq
                        xforward_shorter_than_end.write
                          [xexc]
                            seq > @
                              (((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).if
                                (((unsupported)).apply ((((unsupported)).apply ("ufffd") ((((xexc).xstart).add 1)))))
                                (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.forward_shorter_than_end") ((xforward_shorter_than_end)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xd8xd8xd8xd8xd8x00x00x00".xdecode)).apply ("utf-16-le") ("test.forward_shorter_than_end"))) ("ufffdufffdufffdufffdxd8x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("xd8xd8xd8xd8x00xd8x00x00".xdecode)).apply ("utf-16-be") ("test.forward_shorter_than_end"))) ("ufffdufffdufffdufffdxd8x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("x11x11x11x11x11x00x00x00x00x00x00".xdecode)).apply ("utf-32-le") ("test.forward_shorter_than_end"))) ("ufffdufffdufffdu1111x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("x11x11x11x00x00x11x11x00x00x00x00".xdecode)).apply ("utf-32-be") ("test.forward_shorter_than_end"))) ("ufffdufffdufffdu1111x00"))
                        xreplace_with_long.write
                          [xexc]
                            seq > @
                              (((xisinstance)).apply ((xexc)) ((xUnicodeDecodeError))).if
                                seq
                                  (((unsupported)).apply (((xexc).xobject)) (("x00".mul 8)))
                                  (((unsupported)).apply ((((unsupported)).apply ("ufffd") (((xexc).xstart)))))
                                (((unsupported)).apply ((((xTypeError)).apply (("don't know how to handle %r".mod (xexc))))))
                        bogusForceDataize.write ((((xcodecs).xregister_error)).apply ("test.replace_with_long") ((xreplace_with_long)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("x00".xdecode)).apply ("utf-16") ("test.replace_with_long"))) ("ufffdx00x00x00x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("x00".xdecode)).apply ("utf-32") ("test.replace_with_long"))) ("ufffdx00x00"))
                xtest_fake_error_class.write
                  [xself]
                    memory > x__class__
                    memory > xhandlers
                    seq > @
                      seq
                        xhandlers.write (((unsupported)).apply (((xcodecs).xstrict_errors)) (((xcodecs).xignore_errors)) (((xcodecs).xreplace_errors)) (((xcodecs).xbackslashreplace_errors)) (((xcodecs).xnamereplace_errors)) (((xcodecs).xxmlcharrefreplace_errors)) (((((xcodecs).xlookup_error)).apply ("surrogateescape"))) (((((xcodecs).xlookup_error)).apply ("surrogatepass"))))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xUnicodeEncodeError)) ((xUnicodeDecodeError)) ((xUnicodeTranslateError)))))
                          seq
                            (((unsupported)).apply ((xstr)))
                              x__class__.write (xcls)
                            (((unsupported)).apply ((xhandler)) ((xhandlers)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xhandler)) ((xcls)))))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhandler)) ((((xFakeUnicodeError)).apply)))
                            (((unsupported)).apply ((xException)))
                              x__class__.write (xcls)
                            (((unsupported)).apply ((xhandler)) ((xhandlers)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xhandler)) ((xcls)))))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xFakeUnicodeError)))))))
                                  bogusForceDataize.write (((xhandler)).apply ((((xFakeUnicodeError)).apply)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)