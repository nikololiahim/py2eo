memory > xround
memory > xValueError
memory > xl
memory > xbytes
memory > xMyIndex
memory > xd
memory > xcm
memory > xFloatSubclass
memory > xarray
memory > xFoo1
memory > xImportError
memory > xcomplex
memory > xexpected
memory > xldexp
memory > xdata
memory > xOtherFloatSubclass
memory > xpow_op
memory > xisnan
memory > xisinf
memory > xstr
memory > xfmt
memory > xt
memory > xlit
memory > xFooStr
memory > xFoo5
memory > xrange
memory > xb
memory > xlhs
memory > xZeroDivisionError
memory > xformat_spec
memory > xeval
memory > xbytearray
memory > xtrail
memory > xlead
memory > xrhs
memory > xrandom
memory > xFoo4
memory > xCustomBytes
memory > xopen
memory > xreversed
memory > xany
memory > xtype
memory > xfloats_file
memory > xf
memory > xrepr
memory > xint
memory > xFoo3
memory > xINVALID_UNDERSCORE_LITERALS
memory > xhasattr
memory > xtime
memory > xOverflowError
memory > xx
memory > xMyInt
memory > xoperator
memory > xF
memory > xinp
memory > xi
memory > xstruct
memory > xarg
memory > xratio
memory > xs
memory > xsupport
memory > xDeprecationWarning
memory > xlocale
memory > xfloat
memory > xchr
memory > xfractions
memory > xos
memory > xcopysign
memory > xFoo2
memory > xpow
memory > xgetattr
memory > xVALID_UNDERSCORE_LITERALS
memory > xch
memory > xformat
memory > x__file__
memory > xord
memory > xunittest
memory > xCustomStr
memory > xFLT_MAX
memory > xmap
memory > xn
memory > xobject
memory > xCustomByteArray
memory > xmemoryview
memory > xF2
memory > xtestfile
memory > xTypeError
memory > x__name__
[] > test_float
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_format
        memory > xtest_ends
        memory > xMAX
        memory > xidentical
        memory > xtest_floatasratio
        memory > xBE_FLOAT_NAN
        memory > xtest_previous_round_bugs
        memory > xtest_issue35560
        memory > xtest_double_specials_do_unpack
        memory > xtest_whitespace
        memory > xTINY
        memory > xtest_float
        memory > xtest_nan_as_str
        memory > xtest_nan_from_str
        memory > xtest_keyword_args
        memory > xMIN
        memory > xLE_DOUBLE_INF
        memory > xtest_setformat
        memory > xtest_matches_float_format
        memory > xBE_DOUBLE_NAN
        memory > xtest_format_specials
        memory > xtest_overflow
        memory > xtest_short_repr
        memory > xtest_roundtrip
        memory > xtest_float_pow
        memory > xtest_invalid_inputs
        memory > xtest_double_specials_dont_unpack
        memory > xtest_subclass
        memory > xtest_repr
        memory > xtoHex
        memory > xtest_dir
        memory > xtest_error_message
        memory > xtest_nan_signs
        memory > xtest_inf_nan
        memory > xEPS
        memory > xtest_inf_from_str
        memory > xrequires_setformat
        memory > xsetUp
        memory > xtest_float_with_comma
        memory > xLE_FLOAT_INF
        memory > xtest_small_n
        memory > xtest_floatconversion
        memory > xrequires_getformat
        memory > xBE_FLOAT_INF
        memory > xtest_is_integer
        memory > xLE_FLOAT_NAN
        memory > xtest_getformat
        memory > xtest_underscores
        memory > xtest_large_n
        memory > xtest_serialized_float_rounding
        memory > xtest_None_ndigits
        memory > xtest_from_hex
        memory > xtest_float_specials_do_unpack
        memory > xtest_float_specials_dont_unpack
        memory > xtest_float_mod
        memory > xtest_float_memoryview
        memory > xtest_non_numeric_input_types
        memory > xtest_float_containment
        memory > xBE_DOUBLE_INF
        memory > xINF
        memory > xtest_issue5864
        memory > xtearDown
        memory > xtest_inf_signs
        memory > xtest_format_testfile
        memory > xassertEqualAndEqualSign
        memory > xhave_getformat
        memory > xLE_DOUBLE_NAN
        memory > xfromHex
        memory > xNAN
        memory > xtest_inf_as_str
        memory > xformat_testfile
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xINF.write (((xfloat)).apply ("inf"))
            xNAN.write (((xfloat)).apply ("nan"))
            xhave_getformat.write (((xhasattr)).apply ((xfloat)) ("__getformat__"))
            xrequires_getformat.write ((((xunittest).xskipUnless)).apply ((xhave_getformat)) ("requires __getformat__"))
            xrequires_setformat.write ((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xfloat)) ("__setformat__"))) ("requires __setformat__"))
            xtest_dir.write ((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))
            xformat_testfile.write (((((xos).xpath).xjoin)).apply ((xtest_dir)) ("formatfloat_testcases.txt"))
            (((unsupported)).apply ((xfloat)))
            (((unsupported)).apply ((xfloat)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_float.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (3.14))) (3.14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (314))) (314.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("  3.14  "))) (3.14))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  0x3.1  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  -0x3.p-1  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  +0x3.p-1  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("++3.14"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+-3.14"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-+3.14"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("--3.14"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) (".nan"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+.inf"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("."))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-."))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfloat)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not 'dict'") ((xfloat)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("uD8F0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-1.7d29"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("3D-14"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("  u0663.u0661u0664  "))) (3.14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("N{EM SPACE}3.14N{EN SPACE}"))) (3.14))
                        bogusForceDataize.write (((xfloat)).apply ((".".add ("1".mul 1000))))
                        bogusForceDataize.write (((xfloat)).apply ((".".add ("1".mul 1000))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("u3053u3093u306bu3061u306f"))
                xtest_underscores.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xlit)) ((xVALID_UNDERSCORE_LITERALS)))
                          ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xch)) ((xlit)))) ((xch)) ("jJxXoObB")))).not).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xlit)))) ((((xeval)).apply ((xlit)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xlit)))) ((((xfloat)).apply (((((xlit).xreplace)).apply ("_") (""))))))
                        (((unsupported)).apply ((xlit)) ((xINVALID_UNDERSCORE_LITERALS)))
                          seq
                            (((unsupported)).apply ((xlit)) ((((unsupported)).apply ("0_7") ("09_99")))).if
                              (((unsupported)).apply)
                            ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xch)) ((xlit)))) ((xch)) ("jJxXoObB")))).not).if
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ((xlit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("_NaN"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("Na_N"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("IN_F"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-_INF"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-INF_"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("0_.xff9"))
                xtest_non_numeric_input_types.write
                  [xself]
                    memory > xx
                    memory > xfactories
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)))
                        (((unsupported)).apply ((xbytes)))
                        (((unsupported)).apply ((xbytearray)))
                        xfactories.write (((unsupported)).apply ((xbytes)) ((xbytearray)) ((((unsupported)).apply ((((xCustomStr)).apply (((xb).xdecode)))))) ((xCustomBytes)) ((xCustomByteArray)) ((xmemoryview)))
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xfactories).xappend)).apply ((((unsupported)).apply ((((xarray)).apply ("B") ((xb)))))))
                        (((unsupported)).apply ((xf)) ((xfactories)))
                          seq
                            xx.write (((xf)).apply (" 3.14  "))
                            (((unsupported)).apply (((((xself).xsubTest)).apply ((((xtype)).apply ((xx)))))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xx)))) (3.14))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("could not convert"))))
                                  bogusForceDataize.write (((xfloat)).apply ((((xf)).apply (("A".mul 16)))))
                xtest_float_memoryview.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("12.3"))) ((((unsupported)).apply (1) (4))))))) (2.3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("12.3x00"))) ((((unsupported)).apply (1) (4))))))) (2.3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("12.3 "))) ((((unsupported)).apply (1) (4))))))) (2.3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("12.3A"))) ((((unsupported)).apply (1) (4))))))) (2.3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("12.34"))) ((((unsupported)).apply (1) (4))))))) (2.3))
                xtest_error_message.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xs]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (("float(%r)".mod (((unsupported)).apply ((xs))))))) ((xcm)))
                                  bogusForceDataize.write (((xfloat)).apply ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) (("could not convert string to float: %r".mod (((unsupported)).apply ((xs))))))
                        bogusForceDataize.write (((xcheck)).apply ("xbd"))
                        bogusForceDataize.write (((xcheck)).apply ("123xbd"))
                        bogusForceDataize.write (((xcheck)).apply ("  123 456  "))
                        bogusForceDataize.write (((xcheck)).apply ("  123 456  "))
                        bogusForceDataize.write (((xcheck)).apply ("u0663u0661u0664!"))
                        bogusForceDataize.write (((xcheck)).apply ("123x00"))
                        bogusForceDataize.write (((xcheck)).apply ("123x00 245"))
                        bogusForceDataize.write (((xcheck)).apply ("123x00245"))
                        bogusForceDataize.write (((xcheck)).apply ("123x00"))
                        bogusForceDataize.write (((xcheck)).apply ("123xa0"))
                xtest_float_with_comma.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((((unsupported)).apply (((xlocale).xlocaleconv)) ("decimal_point")).eq ",").not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("decimal_point is not \",\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("  3.14  "))) (3.14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("+3.14  "))) (3.14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("-3.14  "))) ((3.14.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (".14  "))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("3.  "))) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("3.e3  "))) (3000.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("3.2e3  "))) (3200.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("2.5e-1  "))) (0.25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("5e-1"))) (0.5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  3,14  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  +3,14  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  -3,14  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  0x3.1  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  -0x3.p-1  "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("  +0x3.p-1  "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ("  25.e-1  "))) (2.5))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xfloat)).apply ("  .25e-1  "))) ((((unsupported)).apply)))
                xtest_floatconversion.write
                  [xself]
                    memory > x__index__
                    memory > x__init__
                    memory > x__float__
                    memory > x__int__
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xfloat)))
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xfloat)))
                          seq
                            x__new__.write
                              [xcls xvalue]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((((xfloat).x__new__)).apply ((xcls)) ((2.mul (xvalue))))))
                            x__float__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xfloat)))
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (42))
                        (((unsupported)).apply ((xstr)))
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((((xfloat)).apply ((((xstr)).apply ((xself))))).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xFoo1)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xFoo2)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xFoo3)).apply (21))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfloat)) ((((xFoo4)).apply (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xFooStr)).apply ("8"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xsleep)) ((xFoo5)))
                        (((unsupported)).apply)
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xOtherFloatSubclass)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xF)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xfloat)).apply ((xF)))))) ((xfloat)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xFloatSubclass)).apply ((xF)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xFloatSubclass)).apply ((xF)))))) ((xFloatSubclass)))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xMyIndex)).apply (42))))) (42.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) ((((xMyIndex)).apply ((((unsupported)).apply (2) (2000))))))
                        (((unsupported)).apply)
                          x__int__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfloat)) ((xMyInt)))
                xtest_keyword_args.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("keyword argument"))))
                        (((unsupported)).apply ((xfloat)) ("3.14"))
                xtest_is_integer.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((1.1.xis_integer)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).xis_integer)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfloat)).apply ("nan")).xis_integer)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfloat)).apply ("inf")).xis_integer)))
                xtest_floatasratio.write
                  [xself]
                    memory > xR
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xf)) ((xratio)))) ((((unsupported)).apply ((((unsupported)).apply (0.875) ((((unsupported)).apply (7) (8))))) ((((unsupported)).apply ((0.875.neg)) ((((unsupported)).apply ((7.neg)) (8))))) ((((unsupported)).apply (0.0) ((((unsupported)).apply (0) (1))))) ((((unsupported)).apply (11.5) ((((unsupported)).apply (23) (2))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xas_integer_ratio)) ((xratio)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10000))))
                          seq
                            xf.write ((xrandom).xrandom)
                            (((unsupported)).apply ((xf)) ((((unsupported)).apply (10) (((((xrandom).xrandint)).apply ((100.neg)) (100))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xd)))) (((xf).xas_integer_ratio)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xfloat)).apply ((xn))).x__truediv__)).apply ((xd)))) ((xf)))
                        xR.write ((xfractions).xFraction)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply (0) (1))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply (0.0)).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply (5) (2))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply (2.5)).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply (1) (2))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply (0.5)).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply (2.1)).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply ((2.1.neg))).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xR)).apply ((2100.neg)) (1))) ((((xR)).apply ((((unsupported)).apply (((((xfloat)).apply ((2100.0.neg))).xas_integer_ratio)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((((xfloat)).apply ("inf")).xas_integer_ratio)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((((xfloat)).apply ("-inf")).xas_integer_ratio)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((((xfloat)).apply ("nan")).xas_integer_ratio)))
                xtest_float_containment.write
                  [xself]
                    memory > xfloats
                    seq > @
                      seq
                        xfloats.write (((unsupported)).apply ((xINF)) (((xINF).neg)) (0.0) (1.0) ((xNAN)))
                        (((unsupported)).apply ((xf)) ((xfloats)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) ((((unsupported)).apply ((xf)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) ((((unsupported)).apply ((xf)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) ((((unsupported)).apply ((xf)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) ((((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xf))).xcount)).apply ((xf)))) (1) (("[].count('%r') != 1".mod (xf))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xf)) ((xfloats)))
                        (((unsupported)).apply ((xf)) ((xfloats)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xf))).eq (((unsupported)).apply ((xf))))) (("[%r] != [%r]".mod (((unsupported)).apply ((xf)) ((xf))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xf))).eq (((unsupported)).apply ((xf))))) (("(%r,) != (%r,)".mod (((unsupported)).apply ((xf)) ((xf))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xf))).eq (((unsupported)).apply ((xf))))) (("{%r} != {%r}".mod (((unsupported)).apply ((xf)) ((xf))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?")).eq (((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?")))) (("{%r : None} != {%r : None}".mod (((unsupported)).apply ((xf)) ((xf))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xl)) ((xt)) ((xs)) ((xd)))) ((((unsupported)).apply ((((unsupported)).apply ((xf)))) ((((unsupported)).apply ((xf)))) ((((unsupported)).apply ((xf)))) ((((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xl).eq (xl))) (("[%r] not equal to itself".mod (xf))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xt).eq (xt))) (("(%r,) not equal to itself".mod (xf))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xs).eq (xs))) (("{%r} not equal to itself".mod (xf))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xd).eq (xd))) (("{%r : None} not equal to itself".mod (xf))))
                xassertEqualAndEqualSign.write
                  [xself xa xb]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((xcopysign)).apply (1.0) ((xa)))))) ((((unsupported)).apply ((xb)) ((((xcopysign)).apply (1.0) ((xb)))))))
                xtest_float_mod.write
                  [xself]
                    memory > xmod
                    seq > @
                      (((unsupported)).apply)
                        xmod.write ((xoperator).xmod)
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((1.0.neg)) (1.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (((((unsupported)).apply).neg)) (1.0))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((0.0.neg)) (1.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (0.0) (1.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((((unsupported)).apply)) (1.0))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (1.0) (1.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((1.0.neg)) ((1.0.neg)))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (((((unsupported)).apply).neg)) ((1.0.neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((0.0.neg)) ((1.0.neg)))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (0.0) ((1.0.neg)))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply ((((unsupported)).apply)) ((1.0.neg)))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xmod)).apply (1.0) ((1.0.neg)))) ((0.0.neg)))
                xtest_float_pow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xpow_op)) ((((unsupported)).apply ((xpow)) (((xoperator).xpow)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply (((xINF).neg)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((2.0.neg)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((1.0.neg)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((0.5.neg)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((0.0.neg)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply (0.0) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply (0.5) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply (2.0) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xINF)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) ((xNAN)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) (((xINF).neg)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) ((2.0.neg)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) ((1.0.neg)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) ((0.5.neg)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) (0.5))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) (1.0))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) (2.0))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xpow_op)).apply ((xNAN)) ((xINF)))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) ((0.0.neg)) ((1.0.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) (0.0) ((1.0.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) ((0.0.neg)) ((2.0.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) ((0.0.neg)) ((0.5.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) (0.0) ((2.0.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xpow_op)) (0.0) ((0.5.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) (1.0))) ((0.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) (1.0))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) (0.5))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) (2.0))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) (0.5))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) (2.0))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (((xINF).neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((xINF)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (((xINF).neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((2.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((1.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((0.5.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (0.5))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (1.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (2.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((xINF)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((xNAN)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xNAN)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xNAN)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((2.0.neg)) ((0.5.neg)))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((2.0.neg)) (0.5))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((1.0.neg)) ((0.5.neg)))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((1.0.neg)) (0.5))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((0.5.neg)) ((0.5.neg)))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((0.5.neg)) (0.5))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) (((xINF).neg)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) (((xINF).neg)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) (((xINF).neg)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) (((xINF).neg)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) (((xINF).neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) (((xINF).neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) (((xINF).neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) (((xINF).neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) ((xINF)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.0.neg)) ((xINF)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.0) ((xINF)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) ((xINF)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) ((xINF)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((xINF)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((xINF)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) ((xINF)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) ((1.0.neg)))) ((0.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) ((0.5.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) ((2.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) (1.0))) (((xINF).neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) (0.5))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (((xINF).neg)) (2.0))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) (0.5))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) (1.0))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) (2.0))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) ((2.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) ((1.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((xINF)) ((0.5.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((2.0.neg)))) (0.25))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((1.0.neg)))) ((0.5.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) (1.0))) ((2.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) (2.0))) (4.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((2.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((1.0.neg)))) ((1.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (1.0))) ((1.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (2.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((2.0.neg)))) (0.25))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((1.0.neg)))) (0.5))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((0.0.neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) (0.0))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) (1.0))) (2.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) (2.0))) (4.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) (((((unsupported)).apply).neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (1.0) ((((unsupported)).apply)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) (((((unsupported)).apply).neg)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((1.0.neg)) ((((unsupported)).apply)))) (1.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((2000.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((2.0.neg)) ((2000.5.neg)))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((2.0.neg)) ((2001.0.neg)))) ((0.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((2000.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((2000.5.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (2.0) ((2001.0.neg)))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) (2000.0))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xpow_op)).apply ((0.5.neg)) (2000.5))))) ((xcomplex)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply ((0.5.neg)) (2001.0))) ((0.0.neg)))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) (2000.0))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) (2000.5))) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqualAndEqualSign)).apply ((((xpow_op)).apply (0.5) (2001.0))) (0.0))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xrequires_setformat)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsave_formats)) ((((unsupported)).apply ("double") (((((xfloat).x__getformat__)).apply ("double"))) ("float") (((((xfloat).x__getformat__)).apply ("float"))))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("double") ((((unsupported)).apply (((xself).xsave_formats)) ("double"))))
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("float") ((((unsupported)).apply (((xself).xsave_formats)) ("float"))))
                xtest_getformat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xfloat).x__getformat__)).apply ("double"))) ((((unsupported)).apply ("unknown") ("IEEE, big-endian") ("IEEE, little-endian"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xfloat).x__getformat__)).apply ("float"))) ((((unsupported)).apply ("unknown") ("IEEE, big-endian") ("IEEE, little-endian"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__getformat__)) ("chicken"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xfloat).x__getformat__)) (1))
                xtest_setformat.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply ("double") ("float"))))
                          seq
                            bogusForceDataize.write ((((xfloat).x__setformat__)).apply ((xt)) ("unknown"))
                            ((((unsupported)).apply (((xself).xsave_formats)) ((xt))).eq "IEEE, big-endian").if
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ((xt)) ("IEEE, little-endian"))
                              ((((unsupported)).apply (((xself).xsave_formats)) ((xt))).eq "IEEE, little-endian").if
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ((xt)) ("IEEE, big-endian"))
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ((xt)) ("IEEE, big-endian"))
                                  bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ((xt)) ("IEEE, little-endian"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ((xt)) ("chicken"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xfloat).x__setformat__)) ("chicken") ("unknown"))
            xBE_DOUBLE_INF.write "x7fxf0x00x00x00x00x00x00"
            xLE_DOUBLE_INF.write (((xbytes)).apply ((((xreversed)).apply ((xBE_DOUBLE_INF)))))
            xBE_DOUBLE_NAN.write "x7fxf8x00x00x00x00x00x00"
            xLE_DOUBLE_NAN.write (((xbytes)).apply ((((xreversed)).apply ((xBE_DOUBLE_NAN)))))
            xBE_FLOAT_INF.write "x7fx80x00x00"
            xLE_FLOAT_INF.write (((xbytes)).apply ((((xreversed)).apply ((xBE_FLOAT_INF)))))
            xBE_FLOAT_NAN.write "x7fxc0x00x00"
            xLE_FLOAT_NAN.write (((xbytes)).apply ((((xreversed)).apply ((xBE_FLOAT_NAN)))))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xrequires_setformat)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsave_formats)) ((((unsupported)).apply ("double") (((((xfloat).x__getformat__)).apply ("double"))) ("float") (((((xfloat).x__getformat__)).apply ("float"))))))
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("double") ("unknown"))
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("float") ("unknown"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("double") ((((unsupported)).apply (((xself).xsave_formats)) ("double"))))
                        bogusForceDataize.write ((((xfloat).x__setformat__)).apply ("float") ((((unsupported)).apply (((xself).xsave_formats)) ("float"))))
                xtest_double_specials_dont_unpack.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xdata)))) ((((unsupported)).apply ((((unsupported)).apply (">d") ((xBE_DOUBLE_INF)))) ((((unsupported)).apply (">d") ((xBE_DOUBLE_NAN)))) ((((unsupported)).apply ("<d") ((xLE_DOUBLE_INF)))) ((((unsupported)).apply ("<d") ((xLE_DOUBLE_NAN)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xstruct).xunpack)) ((xfmt)) ((xdata)))
                xtest_float_specials_dont_unpack.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xdata)))) ((((unsupported)).apply ((((unsupported)).apply (">f") ((xBE_FLOAT_INF)))) ((((unsupported)).apply (">f") ((xBE_FLOAT_NAN)))) ((((unsupported)).apply ("<f") ((xLE_FLOAT_INF)))) ((((unsupported)).apply ("<f") ((xLE_FLOAT_NAN)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xstruct).xunpack)) ((xfmt)) ((xdata)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_double_specials_do_unpack.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xdata)))) ((((unsupported)).apply ((((unsupported)).apply (">d") ((xBE_DOUBLE_INF)))) ((((unsupported)).apply (">d") ((xBE_DOUBLE_NAN)))) ((((unsupported)).apply ("<d") ((xLE_DOUBLE_INF)))) ((((unsupported)).apply ("<d") ((xLE_DOUBLE_NAN)))))))
                          bogusForceDataize.write ((((xstruct).xunpack)).apply ((xfmt)) ((xdata)))
                xtest_float_specials_do_unpack.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xdata)))) ((((unsupported)).apply ((((unsupported)).apply (">f") ((xBE_FLOAT_INF)))) ((((unsupported)).apply (">f") ((xBE_FLOAT_NAN)))) ((((unsupported)).apply ("<f") ((xLE_FLOAT_INF)))) ((((unsupported)).apply ("<f") ((xLE_FLOAT_NAN)))))))
                          bogusForceDataize.write ((((xstruct).xunpack)).apply ((xfmt)) ((xdata)))
                xtest_serialized_float_rounding.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xpack)).apply ("<f") ((((unsupported)).apply)))) (((((xstruct).xpack)).apply ("<f") ((xFLT_MAX)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xpack)).apply ("<f") (((((unsupported)).apply).neg)))) (((((xstruct).xpack)).apply ("<f") (((xFLT_MAX).neg)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_format.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (0.0) ("f"))) ("0.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (0.0) (""))) ("0.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (0.01) (""))) ("0.01"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (0.01) ("g"))) ("0.01"))
                        xx.write (100.div (((unsupported)).apply))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xx)) (""))) ((((xstr)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xx)) ("-"))) ((((xstr)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xx)) (">"))) ((((xstr)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xx)) ("2"))) ((((xstr)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1.0) ("f"))) ("1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.0.neg)) ("f"))) ("-1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1.0) (" f"))) (" 1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.0.neg)) (" f"))) ("-1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1.0) ("+f"))) ("+1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.0.neg)) ("+f"))) ("-1.000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.0.neg)) ("%"))) ("-100.000000%"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (3.0) ("s"))
                        (((unsupported)).apply ((xformat_spec)) (((((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((((xrange)).apply ((((xord)).apply ("a"))) (((((xord)).apply ("z")).add 1))))).add (((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((((xrange)).apply ((((xord)).apply ("A"))) (((((xord)).apply ("Z")).add 1))))))))
                          ((((unsupported)).apply ((xformat_spec)) ("eEfFgGn%")).not).if
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (0.0) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (1.0) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) ((1.0.neg)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) ((((unsupported)).apply)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (((((unsupported)).apply).neg)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) ((((unsupported)).apply)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (((((unsupported)).apply).neg)) ((xformat_spec)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xNAN)) ("f"))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xNAN)) ("F"))) ("NAN"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xINF)) ("f"))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xINF)) ("F"))) ("INF"))
                xtest_format_testfile.write
                  [xself]
                    memory > xline
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xformat_testfile)))) ((xtestfile)))
                          (((unsupported)).apply ((xline)) ((xtestfile)))
                            seq
                              ((((xline).xstartswith)).apply ("--")).if
                                (((unsupported)).apply)
                              xline.write ((xline).xstrip)
                              ((xline).not).if
                                (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xrhs)))) ((((xmap)).apply (((xstr).xstrip)) (((((xline).xsplit)).apply ("->"))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xarg)))) (((xlhs).xsplit)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfmt).mod (((xfloat)).apply ((xarg))))) ((xrhs)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfmt).mod ((((xfloat)).apply ((xarg))).neg))) (("-".add (xrhs))))
                xtest_issue5864.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.456) (".4"))) ("123.5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234.56) (".4"))) ("1.235e+03"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (12345.6) (".4"))) ("1.235e+04"))
                xtest_issue35560.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.0) ("00"))) ("123.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00f"))) ("123.340000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00e"))) ("1.233400e+02"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00g"))) ("123.34"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00.10f"))) ("123.3400000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00.10e"))) ("1.2334000000e+02"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("00.10g"))) ("123.34"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123.34) ("01f"))) ("123.340000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.0.neg)) ("00"))) ("-123.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00f"))) ("-123.340000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00e"))) ("-1.233400e+02"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00g"))) ("-123.34"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00.10f"))) ("-123.3400000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00.10f"))) ("-123.3400000000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00.10e"))) ("-1.2334000000e+02"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((123.34.neg)) ("00.10g"))) ("-123.34"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_repr.write
                  [xself]
                    memory > xv
                    memory > xline
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply ((x__file__)))) (0))) ("floating_points.txt"))))) ((xfloats_file)))
                        (((unsupported)).apply ((xline)) ((xfloats_file)))
                          seq
                            xline.write ((xline).xstrip)
                            (((xline).not).or ((((xline).xstartswith)).apply ("#"))).if
                              (((unsupported)).apply)
                            xv.write (((xeval)).apply ((xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((xeval)).apply ((((xrepr)).apply ((xv)))))))
                xtest_short_repr.write
                  [xself]
                    memory > xnegs
                    memory > xtest_strings
                    seq > @
                      (((unsupported)).apply)
                        xtest_strings.write (((unsupported)).apply ("0.0") ("1.0") ("0.01") ("0.02") ("0.03") ("0.04") ("0.05") ("1.23456789") ("10.0") ("100.0") ("1000000000000000.0") ("9999999999999990.0") ("1e+16") ("1e+17") ("0.001") ("0.001001") ("0.00010000000000001") ("0.0001") ("9.999999999999e-05") ("1e-05") ("8.72293771110361e+25") ("7.47005307342313e+26") ("2.86438000439698e+28") ("8.89142905246179e+28") ("3.08578087079232e+35"))
                        (((unsupported)).apply ((xs)) ((xtest_strings)))
                          seq
                            xnegs.write ("-".add (xs))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xrepr)).apply ((((xfloat)).apply ((xs)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnegs)) ((((xrepr)).apply ((((xfloat)).apply ((xnegs)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ((xs)))))) ((((xstr)).apply ((((xfloat)).apply ((xs)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ((xnegs)))))) ((((xstr)).apply ((((xfloat)).apply ((xnegs)))))))
            (((unsupported)).apply (((xunittest).xTestCase)) (((xsupport).xrequires_IEEE_754)))
              seq
                xtest_inf_nan.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xround)) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xround)) (((xINF).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xround)) ((xNAN)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xround)) ((xINF)) (0.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xround)) (((xINF).neg)) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xround)) ((xNAN)) ("ceci n'est pas un integer"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xround)) ((0.0.neg)) ((((unsupported)).apply)))
                xtest_large_n.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply (324) (325) (400) (((((unsupported)).apply (2) (31)).sub 1)) ((((unsupported)).apply (2) (31))) ((((unsupported)).apply (2) (32))) ((((unsupported)).apply (2) (100))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (123.456) ((xn)))) (123.456))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((123.456.neg)) ((xn)))) ((123.456.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((xn)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((xn)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) (300))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) (307))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((3.1415.neg)) (308))) ((3.1415.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) (309))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) (315))) ((((unsupported)).apply)))
                xtest_small_n.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply ((308.neg)) ((309.neg)) ((400.neg)) ((1.sub (((unsupported)).apply (2) (31)))) (((((unsupported)).apply (2) (31)).neg)) ((((((unsupported)).apply (2) (31)).neg).sub 1)) (((((unsupported)).apply (2) (100)).neg)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (123.456) ((xn)))) (0.0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((123.456.neg)) ((xn)))) ((0.0.neg)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((xn)))) (0.0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((xn)))) (0.0))
                xtest_overflow.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xround)) ((((unsupported)).apply)) ((308.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xround)) (((((unsupported)).apply).neg)) ((308.neg)))
                xtest_previous_round_bugs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (562949953421312.5) (1))) (562949953421312.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (56294995342131.5) (3))) (56294995342131.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (25.0) ((1.neg)))) (20.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (35.0) ((1.neg)))) (40.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (45.0) ((1.neg)))) (40.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (55.0) ((1.neg)))) (60.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (65.0) ((1.neg)))) (60.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (75.0) ((1.neg)))) (80.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (85.0) ((1.neg)))) (80.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (95.0) ((1.neg)))) (100.0))
                xtest_matches_float_format.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (500))))
                          seq
                            xx.write ((xi).div (((unsupported)).apply))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".0f"))))) ((((xround)).apply ((xx)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".1f"))))) ((((xround)).apply ((xx)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".2f"))))) ((((xround)).apply ((xx)) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".3f"))))) ((((xround)).apply ((xx)) (3))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5) (5000) (10))))
                          seq
                            xx.write ((xi).div (((unsupported)).apply))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".0f"))))) ((((xround)).apply ((xx)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".1f"))))) ((((xround)).apply ((xx)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".2f"))))) ((((xround)).apply ((xx)) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".3f"))))) ((((xround)).apply ((xx)) (3))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (500))))
                          seq
                            xx.write ((xrandom).xrandom)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".0f"))))) ((((xround)).apply ((xx)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".1f"))))) ((((xround)).apply ((xx)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".2f"))))) ((((xround)).apply ((xx)) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xformat)).apply ((xx)) (".3f"))))) ((((xround)).apply ((xx)) (3))))
                xtest_format_specials.write
                  [xself]
                    memory > xsfmt
                    memory > xtest
                    memory > xpfmt
                    seq > @
                      seq
                        xtest.write
                          [xfmt xvalue xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfmt).mod (xvalue))) ((xexpected)) ((xfmt)))
                                xfmt.write (((unsupported)).apply ((xfmt)) ((((unsupported)).apply (1))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xvalue)) ((xfmt)))) ((xexpected)) ((xfmt)))
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ("%e") ("%f") ("%g") ("%.0e") ("%.6f") ("%.20g") ("%#e") ("%#f") ("%#g") ("%#.20e") ("%#.15f") ("%#.3g"))))
                          seq
                            xpfmt.write ("%+".add (((unsupported)).apply ((xfmt)) ((((unsupported)).apply (1)))))
                            xsfmt.write ("% ".add (((unsupported)).apply ((xfmt)) ((((unsupported)).apply (1)))))
                            bogusForceDataize.write (((xtest)).apply ((xfmt)) ((xINF)) ("inf"))
                            bogusForceDataize.write (((xtest)).apply ((xfmt)) (((xINF).neg)) ("-inf"))
                            bogusForceDataize.write (((xtest)).apply ((xfmt)) ((xNAN)) ("nan"))
                            bogusForceDataize.write (((xtest)).apply ((xfmt)) (((xNAN).neg)) ("nan"))
                            bogusForceDataize.write (((xtest)).apply ((xpfmt)) ((xINF)) ("+inf"))
                            bogusForceDataize.write (((xtest)).apply ((xpfmt)) (((xINF).neg)) ("-inf"))
                            bogusForceDataize.write (((xtest)).apply ((xpfmt)) ((xNAN)) ("+nan"))
                            bogusForceDataize.write (((xtest)).apply ((xpfmt)) (((xNAN).neg)) ("+nan"))
                            bogusForceDataize.write (((xtest)).apply ((xsfmt)) ((xINF)) (" inf"))
                            bogusForceDataize.write (((xtest)).apply ((xsfmt)) (((xINF).neg)) ("-inf"))
                            bogusForceDataize.write (((xtest)).apply ((xsfmt)) ((xNAN)) (" nan"))
                            bogusForceDataize.write (((xtest)).apply ((xsfmt)) (((xNAN).neg)) (" nan"))
                xtest_None_ndigits.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((((xround)).apply (1.23))) ((((xround)).apply (1.23) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xround)) (1.23) ("None: is there a None literal in the EO language?"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (1))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((((xround)).apply (1.78))) ((((xround)).apply (1.78) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xround)) (1.78) ("None: is there a None literal in the EO language?"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (2))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xx)) ((xint)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_inf_from_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("+inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("-inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("infinity"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("+infinity"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinf)).apply ((((xfloat)).apply ("-infinity"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("inf"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+inf"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-inf"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("infinity"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+infinity"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-infinity"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("INF"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+Inf"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-iNF"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("Infinity"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+iNfInItY"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-INFINITY"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("inf"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("+inf"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("-inf"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("infinity"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("+infinity"))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("-infinity"))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("info"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+info"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-info"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("in"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+in"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-in"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("infinit"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+Infin"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-INFI"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("infinitys"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("++Inf"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-+inf"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+-infinity"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("--Infinity"))
                xtest_inf_as_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((unsupported)).apply).mul (((unsupported)).apply))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((unsupported)).apply).neg).mul (((unsupported)).apply))))) ("-inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((unsupported)).apply).mul (((unsupported)).apply))))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((((unsupported)).apply).neg).mul (((unsupported)).apply))))) ("-inf"))
                xtest_nan_from_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xfloat)).apply ("+nan"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisnan)).apply ((((xfloat)).apply ("-nan"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("NAN"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("+NAn"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xfloat)).apply ("-NaN"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("+nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xfloat)).apply ("-nan"))))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("nana"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+nana"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-nana"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("na"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+na"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-na"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("++nan"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("-+NAN"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("+-NaN"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfloat)) ("--nAn"))
                xtest_nan_as_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((((unsupported)).apply).mul (((unsupported)).apply)).mul 0)))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((((unsupported)).apply).neg).mul (((unsupported)).apply)).mul 0)))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((((unsupported)).apply).mul (((unsupported)).apply)).mul 0)))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((((unsupported)).apply).neg).mul (((unsupported)).apply)).mul 0)))) ("nan"))
                xtest_inf_signs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcopysign)).apply (1.0) ((((xfloat)).apply ("inf"))))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcopysign)).apply (1.0) ((((xfloat)).apply ("-inf"))))) ((1.0.neg)))
                xtest_nan_signs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcopysign)).apply (1.0) ((((xfloat)).apply ("nan"))))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcopysign)).apply (1.0) ((((xfloat)).apply ("-nan"))))) ((1.0.neg)))
            xfromHex.write ((xfloat).xfromhex)
            xtoHex.write ((xfloat).xhex)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xMAX.write (((xfromHex)).apply ("0x.fffffffffffff8p+1024"))
                xMIN.write (((xfromHex)).apply ("0x1p-1022"))
                xTINY.write (((xfromHex)).apply ("0x0.0000000000001p-1022"))
                xEPS.write (((xfromHex)).apply ("0x0.0000000000001p0"))
                xidentical.write
                  [xself xx xy]
                    seq > @
                      seq
                        ((((xisnan)).apply ((xx))).or (((xisnan)).apply ((xy)))).if
                          ((((xisnan)).apply ((xx))).eq (((xisnan)).apply ((xy)))).if
                            (((unsupported)).apply)
                          (((xx).eq (xy)).and (((xx).neq 0.0).or ((((xcopysign)).apply (1.0) ((xx))).eq (((xcopysign)).apply (1.0) ((xy)))))).if
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xfail)).apply (("%r not identical to %r".mod (((unsupported)).apply ((xx)) ((xy))))))
                xtest_ends.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xidentical)).apply (((xself).xMIN)) ((((xldexp)).apply (1.0) ((1022.neg)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply (((xself).xTINY)) ((((xldexp)).apply (1.0) ((1074.neg)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply (((xself).xEPS)) ((((xldexp)).apply (1.0) ((52.neg)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply (((xself).xMAX)) (((((unsupported)).apply).mul ((((xldexp)).apply (1.0) (1023)).sub (((xldexp)).apply (1.0) (970))))))
                xtest_invalid_inputs.write
                  [xself]
                    memory > xinvalid_inputs
                    memory > xresult
                    seq > @
                      seq
                        xinvalid_inputs.write (((unsupported)).apply ("infi") ("-Infinit") ("++inf") ("-+Inf") ("--nan") ("+-NaN") ("snan") ("NaNs") ("nna") ("an") ("nf") ("nfinity") ("inity") ("iinity") ("0xnan") ("") (" ") ("x1.0p0") ("0xX1.0p0") ("+ 0x1.0p0") ("- 0x1.0p0") ("0 x1.0p0") ("0x 1.0p0") ("0x1 2.0p0") ("+0x1 .0p0") ("0x1. 0p0") ("-0x1.0 1p0") ("-0x1.0 p0") ("+0x1.0p +0") ("0x1.0p -0") ("0x1.0p 0") ("+0x1.0p+ 0") ("-0x1.0p- 0") ("++0x1.0p-0") ("--0x1.0p0") ("+-0x1.0p+0") ("-+0x1.0p0") ("0x1.0p++0") ("+0x1.0p+-0") ("-0x1.0p-+0") ("0x1.0p--0") ("0x1.0.p0") ("0x.p0") ("0x1,p0") ("0x1pa") ("0x1puff10") ("uff10x1p0") ("0xuff11p0") ("0x1.uff10p0") ("0x1p0 n 0x2p0") ("0x1p00 0x1p0"))
                        (((unsupported)).apply ((xx)) ((xinvalid_inputs)))
                          (((unsupported)).apply ((xValueError)))
                            xresult.write (((xfromHex)).apply ((xx)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Expected float.fromhex(%r) to raise ValueError; got %r instead".mod (((unsupported)).apply ((xx)) ((xresult))))))
                xtest_whitespace.write
                  [xself]
                    memory > xwhitespace
                    memory > xvalue_pairs
                    memory > xgot
                    seq > @
                      seq
                        xvalue_pairs.write (((unsupported)).apply ((((unsupported)).apply ("inf") ((xINF)))) ((((unsupported)).apply ("-Infinity") (((xINF).neg)))) ((((unsupported)).apply ("nan") ((xNAN)))) ((((unsupported)).apply ("1.0") (1.0))) ((((unsupported)).apply ("-0x.2") ((0.125.neg)))) ((((unsupported)).apply ("-0.0") ((0.0.neg)))))
                        xwhitespace.write (((unsupported)).apply ("") (" ") ("t") ("n") ("n t") ("f") ("v") ("r"))
                        (((unsupported)).apply ((((unsupported)).apply ((xinp)) ((xexpected)))) ((xvalue_pairs)))
                          (((unsupported)).apply ((xlead)) ((xwhitespace)))
                            (((unsupported)).apply ((xtrail)) ((xwhitespace)))
                              seq
                                xgot.write (((xfromHex)).apply ((((xlead).add (xinp)).add (xtrail))))
                                bogusForceDataize.write ((((xself).xidentical)).apply ((xgot)) ((xexpected)))
                xtest_from_hex.write
                  [xself]
                    memory > xTINY
                    memory > xMIN
                    memory > xpi
                    memory > xMAX
                    memory > xEPS
                    seq > @
                      seq
                        xMIN.write ((xself).xMIN)
                        xMAX.write ((xself).xMAX)
                        xTINY.write ((xself).xTINY)
                        xEPS.write ((xself).xEPS)
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("inf"))) ((xINF)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+Inf"))) ((xINF)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-INF"))) (((xINF).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("iNf"))) ((xINF)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("Infinity"))) ((xINF)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+INFINITY"))) ((xINF)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-infinity"))) (((xINF).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-iNFiNitY"))) (((xINF).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("nan"))) ((xNAN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+NaN"))) ((xNAN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-NaN"))) ((xNAN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-nAN"))) ((xNAN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("1"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+1"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("1."))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("1.0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("1.0p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("01"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("01."))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1."))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+0x1.0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1P0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1P0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.1p4"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.1p04"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.1p004"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1p+0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1P-0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+0x1p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x01p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1p00"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply (" 0x1p0 "))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("n 0x1p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1p0 t"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xap0"))) (10.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xAp0"))) (10.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xaP0"))) (10.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xAP0"))) (10.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xbep0"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xBep0"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xbEp0"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0XBE0P-4"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xBEp0"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xB.Ep4"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.BEp8"))) (190.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.0BEp12"))) (190.0))
                        xpi.write (((xfromHex)).apply ("0x1.921fb54442d18p1"))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.006487ed5110b46p11"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.00c90fdaa22168cp10"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.01921fb54442d18p9"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.03243f6a8885a3p8"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.06487ed5110b46p7"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.0c90fdaa22168cp6"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.1921fb54442d18p5"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.3243f6a8885a3p4"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.6487ed5110b46p3"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x.c90fdaa22168cp2"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.921fb54442d18p1"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x3.243f6a8885a3p0"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x6.487ed5110b46p-1"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xc.90fdaa22168cp-2"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x19.21fb54442d18p-3"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x32.43f6a8885a3p-4"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x64.87ed5110b46p-5"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xc9.0fdaa22168cp-6"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x192.1fb54442d18p-7"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x324.3f6a8885a3p-8"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x648.7ed5110b46p-9"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xc90.fdaa22168cp-10"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1921.fb54442d18p-11"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1921fb54442d1.8p-47"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x3243f6a8885a3p-48"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x6487ed5110b46p-49"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xc90fdaa22168cp-50"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1921fb54442d18p-51"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x3243f6a8885a30p-52"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x6487ed5110b460p-53"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xc90fdaa22168c0p-54"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1921fb54442d180p-55"))) ((xpi)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0x1p1024"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0x1p+1025"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("+0X1p1030"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0x1p+1100"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0X1p123456789123456789"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("+0X.8p+1025"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("+0x0.8p1025"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0x0.4p1026"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0X2p+1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0x2.p1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0x2.0p+1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("+0X4p+1022"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0x1.ffffffffffffffp+1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0X1.fffffffffffff9p1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0X1.fffffffffffff8p1023"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("+0x3.fffffffffffffp1022"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0x3fffffffffffffp+970"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("0x10000000000000000p960"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfromHex)) ("-0Xffffffffffffffffp960"))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("+0x1.fffffffffffffp+1023"))) ((xMAX)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X1.fffffffffffff7p1023"))) (((xMAX).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.fffffffffffff7fffffffffffffp1023"))) ((xMAX)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0p0"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0p1000"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p1023"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0p1024"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p1025"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0p2000"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0p123456789123456789"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X0p-0"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X0p-1000"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0p-1023"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X0p-1024"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p-1025"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p-1072"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0p-1073"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p-1074"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0p-1075"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0p-1076"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X0p-2000"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x0p-123456789123456789"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1p-1075"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X1p-1075"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x1p-123456789123456789"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000000001p-1075"))) ((xTINY)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x1.1p-1075"))) (((xTINY).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.fffffffffffffffffp-1075"))) ((xTINY)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1p-1076"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X2p-1076"))) (0.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X3p-1076"))) ((xTINY)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x4p-1076"))) ((xTINY)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X5p-1076"))) ((xTINY)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X6p-1076"))) ((2.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x7p-1076"))) ((2.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X8p-1076"))) ((2.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X9p-1076"))) ((2.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xap-1076"))) ((2.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0Xbp-1076"))) ((3.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xcp-1076"))) ((3.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0Xdp-1076"))) ((3.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0Xep-1076"))) ((4.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0xfp-1076"))) ((4.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x10p-1076"))) ((4.mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x1p-1076"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X2p-1076"))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x3p-1076"))) (((xTINY).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X4p-1076"))) (((xTINY).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x5p-1076"))) (((xTINY).neg)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0x6p-1076"))) (((2.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X7p-1076"))) (((2.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X8p-1076"))) (((2.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X9p-1076"))) (((2.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0Xap-1076"))) (((2.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0xbp-1076"))) (((3.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0xcp-1076"))) (((3.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0Xdp-1076"))) (((3.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0xep-1076"))) (((4.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0Xfp-1076"))) (((4.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("-0X10p-1076"))) (((4.neg).mul (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffd6p-1022"))) (((xMIN).sub (3.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffd8p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffdap-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffdcp-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffdep-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffe0p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffe2p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffe4p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffe6p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffe8p-1022"))) (((xMIN).sub (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffeap-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffecp-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffeep-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff0p-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff2p-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff4p-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff6p-1022"))) (((xMIN).sub (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff8p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffffap-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffffcp-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffffep-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000000p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000002p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000004p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000006p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000008p-1022"))) ((xMIN)))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000ap-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000cp-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000ep-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000010p-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000012p-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000014p-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000016p-1022"))) (((xMIN).add (xTINY))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000018p-1022"))) (((xMIN).add (2.mul (xTINY)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff0p0"))) ((1.0.sub (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff1p0"))) ((1.0.sub (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffff2p0"))) ((1.0.sub (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff3p0"))) ((1.0.sub (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffff4p0"))) ((1.0.sub (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffff5p0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffff6p0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff7p0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffff8p0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffff9p0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffffap0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffffbp0"))) ((1.0.sub ((xEPS).div 2))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffffcp0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.fffffffffffffdp0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X0.fffffffffffffep0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x0.ffffffffffffffp0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000000p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000001p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000002p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000003p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000004p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000005p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000006p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000007p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000007ffffffffffffffffffffp0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000008p0"))) (1.0))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000008000000000000000001p0"))) ((1.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000009p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000ap0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000bp0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.0000000000000cp0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000dp0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000000ep0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.0000000000000fp0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000010p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000011p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000012p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000013p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000014p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000015p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000016p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000017p0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000017ffffffffffffffffffffp0"))) ((1.0.add (xEPS))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000018p0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.00000000000018000000000000000001p0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000019p0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.0000000000001ap0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.0000000000001bp0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000001cp0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000001dp0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.0000000000001ep0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0X1.0000000000001fp0"))) ((1.0.add (2.mul (xEPS)))))
                        bogusForceDataize.write ((((xself).xidentical)).apply ((((xfromHex)).apply ("0x1.00000000000020p0"))) ((1.0.add (2.mul (xEPS)))))
                xtest_roundtrip.write
                  [xself]
                    memory > xroundtrip
                    memory > xx
                    memory > xs
                    memory > xm
                    memory > xe
                    seq > @
                      seq
                        xroundtrip.write
                          [xx]
                            seq > @
                              (((unsupported)).apply ((((xfromHex)).apply ((((xtoHex)).apply ((xx)))))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xNAN)) ((xINF)) (((xself).xMAX)) (((xself).xMIN)) ((((xself).xMIN).sub ((xself).xTINY))) (((xself).xTINY)) (0.0))))
                          seq
                            bogusForceDataize.write ((((xself).xidentical)).apply ((xx)) ((((xroundtrip)).apply ((xx)))))
                            bogusForceDataize.write ((((xself).xidentical)).apply (((xx).neg)) ((((xroundtrip)).apply (((xx).neg)))))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10000))))
                          seq
                            xe.write ((((xrandom).xrandrange)).apply ((1200.neg)) (1200))
                            xm.write ((xrandom).xrandom)
                            xs.write ((((xrandom).xchoice)).apply ((((unsupported)).apply (1.0) ((1.0.neg)))))
                            (((unsupported)).apply ((xOverflowError)))
                              xx.write ((xs).mul (((xldexp)).apply ((xm)) ((xe))))
                              bogusForceDataize.write ((((xself).xidentical)).apply ((xx)) ((((xfromHex)).apply ((((xtoHex)).apply ((xx)))))))
                xtest_subclass.write
                  [xself]
                    memory > x__new__
                    memory > x__init__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)))
                          x__new__.write
                            [xcls xvalue]
                              seq > @
                                (((unsupported)).apply (((((xfloat).x__new__)).apply ((xcls)) (((xvalue).add 1)))))
                        xf.write ((((xF).xfromhex)).apply ((1.5.xhex)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xf)))) ((xF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) (2.5))
                        (((unsupported)).apply ((xfloat)))
                          x__init__.write
                            [xself xvalue]
                              seq > @
                                (((unsupported)).apply (((xself).xfoo)) ("bar"))
                        xf.write ((((xF2).xfromhex)).apply ((1.5.xhex)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xf)))) ((xF2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) (1.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xf)) ("foo") ("none"))) ("bar"))
            ((x__name__).eq "__main__").if
              unsupported