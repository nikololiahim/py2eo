memory > xUnicodeError
memory > xhttp_date
memory > xValueError
memory > xcontent_type
memory > xiri_to_uri
memory > xHttpResponseRedirectBase
memory > xsum
memory > xmap
memory > xAttributeError
memory > xheader
memory > xtimezone
memory > x_lazy_re_compile
memory > xStreamingHttpResponse
memory > xdatetime
memory > xResponseHeaders
memory > xstr
memory > xio
memory > xHeader
memory > xBadHeaderError
memory > xquote
memory > xself
memory > xurlparse
memory > xSimpleCookie
memory > xvalue
memory > xmatched
memory > xmax
memory > xHttpResponse
memory > xHttpResponseBase
memory > xsettings
memory > xint
memory > xre
memory > xException
memory > xhasattr
memory > xtime
memory > xproperty
memory > xsuper
memory > xsys
memory > xsigning
memory > xCaseInsensitiveMapping
memory > xbytes
memory > xargs
memory > xOSError
memory > xos
memory > xencoding
memory > xgetattr
memory > xcloser
memory > xUnicodeEncodeError
memory > xiter
memory > xe
memory > xjson
memory > xchunk
memory > xmemoryview
memory > xsignals
memory > xkwargs
memory > xresponses
memory > xisinstance
memory > xline
memory > xlen
memory > xdict
memory > xDisallowedRedirect
memory > xTypeError
memory > xmimetypes
memory > xkey
[] > response
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_set_streaming_content
        memory > xblock_size
        memory > xget
        memory > xdelete_cookie
        memory > x__delitem__
        memory > xallowed_schemes
        memory > xcontent
        memory > xstreaming
        memory > xwritable
        memory > xitems
        memory > xseekable
        memory > xstreaming_content
        memory > xtell
        memory > x__bytes__
        memory > xreason_phrase
        memory > xhas_header
        memory > xserialize
        memory > xset_headers
        memory > x_charset_from_content_type_re
        memory > x__repr__
        memory > xreadable
        memory > xgetvalue
        memory > xpop
        memory > xsetdefault
        memory > x__iter__
        memory > xwritelines
        memory > x__contains__
        memory > xclose
        memory > xurl
        memory > x__getitem__
        memory > xmake_bytes
        memory > xstatus_code
        memory > xflush
        memory > x__setitem__
        memory > x_convert_to_charset
        memory > xset_signed_cookie
        memory > x__init__
        memory > xcharset
        memory > xwrite
        memory > xserialize_headers
        memory > x_content_type_for_repr
        memory > xset_cookie
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_charset_from_content_type_re.write (((x_lazy_re_compile)).apply (";s*charset=(?P<charset>[^s;]-)") (((xre).xI)))
            (((unsupported)).apply ((xCaseInsensitiveMapping)))
              seq
                x__init__.write
                  [xself xdata]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_store)) ((((unsupported)).apply)))
                        (xdata).if
                          (((unsupported)).apply ((((unsupported)).apply ((xheader)) ((xvalue)))) (((((xself).x_unpack_items)).apply ((xdata)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xself)) ((xheader)))) ((xvalue)))
                x_convert_to_charset.write
                  [xself xvalue xcharset xmime_encode]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xUnicodeError)))
                          seq
                            (((xisinstance)).apply ((xvalue)) ((xstr))).if
                              bogusForceDataize.write ((((xvalue).xencode)).apply ((xcharset)))
                              (((xisinstance)).apply ((xvalue)) ((xbytes))).if
                                xvalue.write ((((xvalue).xdecode)).apply ((xcharset)))
                                seq
                                  xvalue.write (((xstr)).apply ((xvalue)))
                                  bogusForceDataize.write ((((xvalue).xencode)).apply ((xcharset)))
                            ((((unsupported)).apply ("n") ((xvalue))).or (((unsupported)).apply ("r") ((xvalue)))).if
                              (((unsupported)).apply ((((xBadHeaderError)).apply ("Header values can't contain newlines (got {value!r})"))))
                          seq
                            (((((xisinstance)).apply ((xvalue)) ((xbytes))).and ((((unsupported)).apply ("n") ((xvalue))).or (((unsupported)).apply ("r") ((xvalue))))).or ((((xisinstance)).apply ((xvalue)) ((xstr))).and ((((unsupported)).apply ("n") ((xvalue))).or (((unsupported)).apply ("r") ((xvalue)))))).if
                              (((unsupported)).apply ((((xBadHeaderError)).apply ("Header values can't contain newlines (got {value!r})"))) ((xe)))
                            (xmime_encode).if
                              xvalue.write ((((((unsupported)).apply ((xHeader)) ((xvalue)) ("utf-8") (((xsys).xmaxsize))).xencode)).apply)
                              seq
                                (((unsupported)).apply (((xe).xreason)) ((", HTTP response headers must be in %s format".mod (xcharset))))
                                (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)))
                x__delitem__.write
                  [xself xkey]
                    seq > @
                      bogusForceDataize.write ((((xself).xpop)).apply ((xkey)))
                x__setitem__.write
                  [xself xkey xvalue]
                    seq > @
                      seq
                        xkey.write ((((xself).x_convert_to_charset)).apply ((xkey)) ("ascii"))
                        xvalue.write (((unsupported)).apply (((xself).x_convert_to_charset)) ((xvalue)) ("latin-1") (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_store)) (((((xkey).xlower)).apply)))) ((((unsupported)).apply ((xkey)) ((xvalue)))))
                xpop.write
                  [xself xkey xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).x_store).xpop)).apply (((((xkey).xlower)).apply)) ((xdefault)))))
                xsetdefault.write
                  [xself xkey xvalue]
                    seq > @
                      (((unsupported)).apply ((xkey)) ((xself))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((xkey)))) ((xvalue)))
            (((unsupported)).apply ((xValueError)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xstatus_code.write 200
                x__init__.write
                  [xself xcontent_type xstatus xreason xcharset xheaders]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xheaders)) ((((xResponseHeaders)).apply ((xheaders)))))
                        (((unsupported)).apply (((xself).x_charset)) ((xcharset)))
                        (((unsupported)).apply ("Content-Type") (((xself).xheaders))).if
                          seq
                            (((unsupported)).apply ((xcontent_type)) ("None: is there a None literal in the EO language?")).if
                              xcontent_type.write "text/html; charset={self.charset}"
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Type"))) ((xcontent_type)))
                          (xcontent_type).if
                            (((unsupported)).apply ((((xValueError)).apply ("'headers' must not contain 'Content-Type' when the 'content_type' parameter is provided."))))
                        (((unsupported)).apply (((xself).x_resource_closers)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_handler_class)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcookies)) ((((xSimpleCookie)).apply)))
                        (((unsupported)).apply (((xself).xclosed)) (FALSE))
                        (((unsupported)).apply ((xstatus)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                              (((unsupported)).apply (((xself).xstatus_code)) ((((xint)).apply ((xstatus)))))
                              (((unsupported)).apply ((((xTypeError)).apply ("HTTP status code must be an integer."))))
                            ((((unsupported)).apply (100) (((xself).xstatus_code)) (599)).not).if
                              (((unsupported)).apply ((((xValueError)).apply ("HTTP status code must be an integer from 100 to 599."))))
                        (((unsupported)).apply (((xself).x_reason_phrase)) ((xreason)))
                xreason_phrase.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_reason_phrase)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).x_reason_phrase)))
                        (((unsupported)).apply (((((xresponses).xget)).apply (((xself).xstatus_code)) ("Unknown Status Code"))))
                xreason_phrase.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_reason_phrase)) ((xvalue)))
                xcharset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_charset)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).x_charset)))
                        (((unsupported)).apply ((((((xself).xheaders).xget)).apply ("Content-Type")))).if
                          (((unsupported)).apply (((((x_charset_from_content_type_re).xsearch)).apply ((xcontent_type))))).if
                            (((unsupported)).apply (((((((unsupported)).apply ((xmatched)) ("charset")).xreplace)).apply ("\"") (""))))
                        (((unsupported)).apply (((xsettings).xDEFAULT_CHARSET)))
                xcharset.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_charset)) ((xvalue)))
                xserialize_headers.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((("rn".xjoin)).apply ((((unsupported)).apply (((((((xkey).xencode)).apply ("ascii")).sub ": ").sub ((((xvalue).xencode)).apply ("latin-1")))) ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xself).xheaders).xitems)).apply)))))))
                x__bytes__.write (xserialize_headers)
                x_content_type_for_repr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((unsupported)).apply ("Content-Type") (((xself).xheaders))).if (", \"%s\"".mod (((unsupported)).apply (((xself).xheaders)) ("Content-Type"))) "")))
                x__setitem__.write
                  [xself xheader xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ((xheader)))) ((xvalue)))
                x__delitem__.write
                  [xself xheader]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ((xheader)))))))
                x__getitem__.write
                  [xself xheader]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ((xheader)))))
                xhas_header.write
                  [xself xheader]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xheader)) (((xself).xheaders)))))
                x__contains__.write (xhas_header)
                xitems.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xheaders).xitems)).apply)))
                xget.write
                  [xself xheader xalternate]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xheaders).xget)).apply ((xheader)) ((xalternate)))))
                xset_cookie.write
                  [xself xkey xvalue xmax_age xexpires xpath xdomain xsecure xhttponly xsamesite]
                    memory > xdelta
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ((xvalue)))
                        (((unsupported)).apply ((xexpires)) ("None: is there a None literal in the EO language?")).if
                          (((xisinstance)).apply ((xexpires)) (((xdatetime).xdatetime))).if
                            seq
                              ((((xtimezone).xis_naive)).apply ((xexpires))).if
                                xexpires.write ((((xtimezone).xmake_aware)).apply ((xexpires)) ((((xdatetime).xtimezone).xutc)))
                              xdelta.write ((xexpires).sub (((unsupported)).apply ((((xdatetime).xdatetime).xnow)) ((((xdatetime).xtimezone).xutc))))
                              xdelta.write ((xdelta).sub (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))
                              xexpires.write "None: is there a None literal in the EO language?"
                              (((unsupported)).apply ((xmax_age)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((xValueError)).apply ("'expires' and 'max_age' can't be used together."))))
                              xmax_age.write (((xmax)).apply (0) (((((xdelta).xdays).mul 86400).sub ((xdelta).xseconds))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("expires"))) ((xexpires)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("expires"))) (""))
                        (((unsupported)).apply ((xmax_age)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((xisinstance)).apply ((xmax_age)) (((xdatetime).xtimedelta))).if
                              xmax_age.write ((((xmax_age).xtotal_seconds)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("max-age"))) ((((xint)).apply ((xmax_age)))))
                            ((xexpires).not).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("expires"))) ((((xhttp_date)).apply ((((((xtime).xtime)).apply).sub (xmax_age))))))
                        (((unsupported)).apply ((xpath)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("path"))) ((xpath)))
                        (((unsupported)).apply ((xdomain)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("domain"))) ((xdomain)))
                        (xsecure).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("secure"))) (TRUE))
                        (xhttponly).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("httponly"))) (TRUE))
                        (xsamesite).if
                          seq
                            (((unsupported)).apply (((((xsamesite).xlower)).apply)) ((((unsupported)).apply ("lax") ("none") ("strict")))).if
                              (((unsupported)).apply ((((xValueError)).apply ("samesite must be \"lax\", \"none\", or \"strict\"."))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xkey)))) ("samesite"))) ((xsamesite)))
                xsetdefault.write
                  [xself xkey xvalue]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xself).xheaders).xsetdefault)).apply ((xkey)) ((xvalue)))
                xset_signed_cookie.write
                  [xself xkey xvalue xsalt]
                    seq > @
                      (((unsupported)).apply)
                        xvalue.write ((((((unsupported)).apply (((xsigning).xget_cookie_signer)) (((xkey).sub (xsalt)))).xsign)).apply ((xvalue)))
                        (((unsupported)).apply (((((xself).xset_cookie)).apply ((xkey)) ((xvalue)) ((((unsupported)).apply ((xkwargs)))))))
                xdelete_cookie.write
                  [xself xkey xpath xdomain xsamesite]
                    memory > xsecure
                    seq > @
                      (((unsupported)).apply)
                        xsecure.write (((((xkey).xstartswith)).apply ((((unsupported)).apply ("__Secure-") ("__Host-")))).or ((xsamesite).and (((((xsamesite).xlower)).apply).eq "none")))
                        (((unsupported)).apply (((xself).xset_cookie)) ((xkey)) (0) ((xpath)) ((xdomain)) ((xsecure)) ("Thu, 01 Jan 1970 00:00:00 GMT") ((xsamesite)))
                xmake_bytes.write
                  [xself xvalue]
                    seq > @
                      seq
                        unsupported
                        (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xbytes)) ((xmemoryview))))).if
                          (((unsupported)).apply ((((xbytes)).apply ((xvalue)))))
                        (((xisinstance)).apply ((xvalue)) ((xstr))).if
                          (((unsupported)).apply ((((xbytes)).apply (((((xvalue).xencode)).apply (((xself).xcharset)))))))
                        (((unsupported)).apply (((((((xstr)).apply ((xvalue))).xencode)).apply (((xself).xcharset)))))
                xclose.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xcloser)) (((xself).x_resource_closers)))
                          (((unsupported)).apply ((xException)))
                            bogusForceDataize.write (((xcloser)).apply)
                        bogusForceDataize.write (((((xself).x_resource_closers).xclear)).apply)
                        (((unsupported)).apply (((xself).xclosed)) (TRUE))
                        (((unsupported)).apply ((((xsignals).xrequest_finished).xsend)) (((xself).x_handler_class)))
                xwrite.write
                  [xself xcontent]
                    seq > @
                      (((unsupported)).apply ((((xOSError)).apply (("This %s instance is not writable".mod (((xself).x__class__).x__name__))))))
                xflush.write
                  [xself]
                    seq > @
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xOSError)).apply (("This %s instance cannot tell its position".mod (((xself).x__class__).x__name__))))))
                xreadable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (FALSE))
                xseekable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (FALSE))
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (FALSE))
                xwritelines.write
                  [xself xlines]
                    seq > @
                      (((unsupported)).apply ((((xOSError)).apply (("This %s instance is not writable".mod (((xself).x__class__).x__name__))))))
            (((unsupported)).apply ((xHttpResponseBase)))
              seq
                (((unsupported)).apply)
                xstreaming.write FALSE
                x__init__.write
                  [xself xcontent]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xcontent)) ((xcontent)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s status_code=%(status_code)d%(content_type)s>".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__name__)) ("status_code") (((xself).xstatus_code)) ("content_type") (((xself).x_content_type_for_repr))))))
                xserialize.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((((xself).xserialize_headers)).apply).sub "rnrn").sub ((xself).xcontent))))
                x__bytes__.write (xserialize)
                xcontent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((("".xjoin)).apply (((xself).x_container)))))
                xcontent.write
                  [xself xvalue]
                    memory > xcontent
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply ((xvalue)) ("__iter__")).and ((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xbytes)) ((xmemoryview)) ((xstr))))).not)).if
                          seq
                            xcontent.write ((("".xjoin)).apply ((((unsupported)).apply (((((xself).xmake_bytes)).apply ((xchunk)))) ((xchunk)) ((xvalue)))))
                            (((xhasattr)).apply ((xvalue)) ("close")).if
                              (((unsupported)).apply ((xException)))
                                bogusForceDataize.write ((((xvalue).xclose)).apply)
                          xcontent.write ((((xself).xmake_bytes)).apply ((xvalue)))
                        (((unsupported)).apply (((xself).x_container)) ((((unsupported)).apply ((xcontent)))))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((xself).x_container)))))
                xwrite.write
                  [xself xcontent]
                    seq > @
                      bogusForceDataize.write (((((xself).x_container).xappend)).apply (((((xself).xmake_bytes)).apply ((xcontent)))))
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xlen)).apply (((xself).xcontent)))))
                xgetvalue.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcontent)))
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (TRUE))
                xwritelines.write
                  [xself xlines]
                    seq > @
                      (((unsupported)).apply ((xline)) ((xlines)))
                        bogusForceDataize.write ((((xself).xwrite)).apply ((xline)))
            (((unsupported)).apply ((xHttpResponseBase)))
              seq
                (((unsupported)).apply)
                xstreaming.write TRUE
                x__init__.write
                  [xself xstreaming_content]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xstreaming_content)) ((xstreaming_content)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s status_code=%(status_code)d%(content_type)s>".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__qualname__)) ("status_code") (((xself).xstatus_code)) ("content_type") (((xself).x_content_type_for_repr))))))
                xcontent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xAttributeError)).apply (("This %s instance has no `content` attribute. Use `streaming_content` instead.".mod (((xself).x__class__).x__name__))))))
                xstreaming_content.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xmap)).apply (((xself).xmake_bytes)) (((xself).x_iterator)))))
                xstreaming_content.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_set_streaming_content)).apply ((xvalue)))
                x_set_streaming_content.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_iterator)) ((((xiter)).apply ((xvalue)))))
                        (((xhasattr)).apply ((xvalue)) ("close")).if
                          bogusForceDataize.write (((((xself).x_resource_closers).xappend)).apply (((xvalue).xclose)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xstreaming_content)))
                xgetvalue.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("".xjoin)).apply (((xself).xstreaming_content)))))
            (((unsupported)).apply ((xStreamingHttpResponse)))
              seq
                (((unsupported)).apply)
                xblock_size.write 4096
                x__init__.write
                  [xself xas_attachment xfilename]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xas_attachment)) ((xas_attachment)))
                        (((unsupported)).apply (((xself).xfilename)) ((xfilename)))
                        (((unsupported)).apply (((xself).x_no_explicit_content_type)) (((((unsupported)).apply ("content_type") ((xkwargs))).or (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("content_type"))) ("None: is there a None literal in the EO language?")))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x_set_streaming_content.write
                  [xself xvalue]
                    memory > xfilelike
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xvalue)) ("read")).not).if
                          seq
                            (((unsupported)).apply (((xself).xfile_to_stream)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((((((xsuper)).apply).x_set_streaming_content)).apply ((xvalue)))))
                        (((unsupported)).apply (((xself).xfile_to_stream)) ((xfilelike)) ((xvalue)))
                        (((xhasattr)).apply ((xfilelike)) ("close")).if
                          bogusForceDataize.write (((((xself).x_resource_closers).xappend)).apply (((xfilelike).xclose)))
                        xvalue.write (((xiter)).apply ((((unsupported)).apply (((((xfilelike).xread)).apply (((xself).xblock_size)))))) (""))
                        bogusForceDataize.write ((((xself).xset_headers)).apply ((xfilelike)))
                        bogusForceDataize.write ((((((xsuper)).apply).x_set_streaming_content)).apply ((xvalue)))
                xset_headers.write
                  [xself xfilelike]
                    memory > xfilename
                    memory > xcontent_type
                    memory > xinitial_position
                    memory > xfile_expr
                    memory > xseekable
                    memory > xdisposition
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilename.write (((xgetattr)).apply ((xfilelike)) ("name") (""))
                        xfilename.write ((((xisinstance)).apply ((xfilename)) ((xstr))).if (xfilename) "")
                        xseekable.write ((((xhasattr)).apply ((xfilelike)) ("seek")).and (((((xhasattr)).apply ((xfilelike)) ("seekable")).not).or ((((xfilelike).xseekable)).apply)))
                        (((xhasattr)).apply ((xfilelike)) ("tell")).if
                          (xseekable).if
                            seq
                              xinitial_position.write ((((xfilelike).xtell)).apply)
                              bogusForceDataize.write ((((xfilelike).xseek)).apply (0) (((xio).xSEEK_END)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Length"))) ((((((xfilelike).xtell)).apply).sub (xinitial_position))))
                              bogusForceDataize.write ((((xfilelike).xseek)).apply ((xinitial_position)))
                            (((xhasattr)).apply ((xfilelike)) ("getbuffer")).if
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Length"))) (((((((xfilelike).xgetbuffer)).apply).xnbytes).sub ((((xfilelike).xtell)).apply))))
                              (((((xos).xpath).xexists)).apply ((xfilename))).if
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Length"))) (((((((xos).xpath).xgetsize)).apply ((xfilename))).sub ((((xfilelike).xtell)).apply))))
                          (xseekable).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Length"))) ((((xsum)).apply ((((xiter)).apply ((((unsupported)).apply ((((xlen)).apply (((((xfilelike).xread)).apply (((xself).xblock_size)))))))) (0))))))
                              bogusForceDataize.write ((((xfilelike).xseek)).apply (((((xint)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Length")))).neg)) (((xio).xSEEK_END)))
                        xfilename.write (((((xos).xpath).xbasename)).apply ((((xself).xfilename).or (xfilename))))
                        ((xself).x_no_explicit_content_type).if
                          (xfilename).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xcontent_type)) ((xencoding)))) (((((xmimetypes).xguess_type)).apply ((xfilename)))))
                              xcontent_type.write ((((((unsupported)).apply ("bzip2") ("application/x-bzip") ("gzip") ("application/gzip") ("xz") ("application/x-xz")).xget)).apply ((xencoding)) ((xcontent_type)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Type"))) (((xcontent_type).or "application/octet-stream")))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Type"))) ("application/octet-stream"))
                        (xfilename).if
                          seq
                            xdisposition.write (((xself).xas_attachment).if "attachment" "inline")
                            (((unsupported)).apply ((xUnicodeEncodeError)))
                              seq
                                bogusForceDataize.write ((((xfilename).xencode)).apply ("ascii"))
                                xfile_expr.write ((("filename=\"{}\"".xformat)).apply ((xfilename)))
                              xfile_expr.write ((("filename*=utf-8''{}".xformat)).apply ((((xquote)).apply ((xfilename)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Disposition"))) (((("{}; {}".xformat)).apply ((xdisposition)) ((xfile_expr)))))
                          ((xself).xas_attachment).if
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Content-Disposition"))) ("attachment"))
            (((unsupported)).apply ((xHttpResponse)))
              seq
                xallowed_schemes.write (((unsupported)).apply ("http") ("https") ("ftp"))
                x__init__.write
                  [xself xredirect_to]
                    memory > xparsed
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ("Location"))) ((((xiri_to_uri)).apply ((xredirect_to)))))
                        xparsed.write (((xurlparse)).apply ((((xstr)).apply ((xredirect_to)))))
                        (((xparsed).xscheme).and (((unsupported)).apply (((xparsed).xscheme)) (((xself).xallowed_schemes)))).if
                          (((unsupported)).apply ((((xDisallowedRedirect)).apply (("Unsafe redirect to URL with protocol '%s'".mod ((xparsed).xscheme))))))
                xurl.write (((xproperty)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ("Location"))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s status_code=%(status_code)d%(content_type)s, url=\"%(url)s\">".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__name__)) ("status_code") (((xself).xstatus_code)) ("content_type") (((xself).x_content_type_for_repr)) ("url") (((xself).xurl))))))
            (((unsupported)).apply ((xHttpResponseRedirectBase)))
              xstatus_code.write 302
            (((unsupported)).apply ((xHttpResponseRedirectBase)))
              xstatus_code.write 301
            (((unsupported)).apply ((xHttpResponse)))
              seq
                xstatus_code.write 304
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ("content-type"))))))
                xcontent.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (xvalue).if
                          (((unsupported)).apply ((((xAttributeError)).apply ("You cannot set content to a 304 (Not Modified) response"))))
                        (((unsupported)).apply (((xself).x_container)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xHttpResponse)))
              xstatus_code.write 400
            (((unsupported)).apply ((xHttpResponse)))
              xstatus_code.write 404
            (((unsupported)).apply ((xHttpResponse)))
              xstatus_code.write 403
            (((unsupported)).apply ((xHttpResponse)))
              seq
                xstatus_code.write 405
                x__init__.write
                  [xself xpermitted_methods]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ("Allow"))) ((((", ".xjoin)).apply ((xpermitted_methods)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s [%(methods)s] status_code=%(status_code)d%(content_type)s>".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__name__)) ("status_code") (((xself).xstatus_code)) ("content_type") (((xself).x_content_type_for_repr)) ("methods") ((((unsupported)).apply ((xself)) ("Allow")))))))
            (((unsupported)).apply ((xHttpResponse)))
              xstatus_code.write 410
            (((unsupported)).apply ((xHttpResponse)))
              xstatus_code.write 500
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xHttpResponse)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xdata xencoder xsafe xjson_dumps_params]
                    seq > @
                      (((unsupported)).apply)
                        ((xsafe).and ((((xisinstance)).apply ((xdata)) ((xdict))).not)).if
                          (((unsupported)).apply ((((xTypeError)).apply ("In order to allow non-dict objects to be serialized set the safe parameter to False."))))
                        (((unsupported)).apply ((xjson_dumps_params)) ("None: is there a None literal in the EO language?")).if
                          xjson_dumps_params.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("content_type") ("application/json"))
                        xdata.write (((unsupported)).apply (((xjson).xdumps)) ((xdata)) ((xencoder)) ((((unsupported)).apply ((xjson_dumps_params)))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xdata)) ((((unsupported)).apply ((xkwargs)))))