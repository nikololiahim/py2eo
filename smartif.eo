memory > xTokenBase
memory > xValueError
memory > xcontext
memory > xOperator
memory > xKeyError
memory > xrepr
memory > xException
memory > xx
memory > xy
memory > xop
memory > xlen
memory > xstr
memory > xLiteral
memory > xTypeError
memory > xkey
[] > smartif
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsecond
        memory > xtranslate_token
        memory > xnud
        memory > xdisplay
        memory > xvalue
        memory > xinfix
        memory > xnext_token
        memory > xerror_class
        memory > xcreate_var
        memory > x__repr__
        memory > xparse
        memory > xled
        memory > xOPERATORS
        memory > xeval
        memory > xprefix
        memory > x__init__
        memory > xid
        memory > xfirst
        memory > xexpression
        memory > xlbp
        memory > xEndToken
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xid.write "None: is there a None literal in the EO language?"
                xvalue.write "None: is there a None literal in the EO language?"
                (((unsupported)).apply ((xfirst)) ((xsecond)) ("None: is there a None literal in the EO language?"))
                xnud.write
                  [xself xparser]
                    seq > @
                      (((unsupported)).apply (((((xparser).xerror_class)).apply (("Not expecting '%s' in this position in if tag.".mod ((xself).xid))))))
                xled.write
                  [xself xleft xparser]
                    seq > @
                      (((unsupported)).apply (((((xparser).xerror_class)).apply (("Not expecting '%s' as infix operator in if tag.".mod ((xself).xid))))))
                xdisplay.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xid)))
                x__repr__.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        xout.write (((unsupported)).apply ((((xstr)).apply ((xx)))) ((xx)) ((((unsupported)).apply (((xself).xid)) (((xself).xfirst)) (((xself).xsecond)))) ((((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((("(".add (((" ".xjoin)).apply ((xout)))).add ")")))
            xinfix.write
              [xbp xfunc]
                memory > xlbp
                memory > xled
                memory > xeval
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xTokenBase)))
                      seq
                        xlbp.write (xbp)
                        xled.write
                          [xself xleft xparser]
                            seq > @
                              seq
                                (((unsupported)).apply (((xself).xfirst)) ((xleft)))
                                (((unsupported)).apply (((xself).xsecond)) (((((xparser).xexpression)).apply ((xbp)))))
                                (((unsupported)).apply ((xself)))
                        xeval.write
                          [xself xcontext]
                            seq > @
                              (((unsupported)).apply ((xException)))
                                (((unsupported)).apply ((((xfunc)).apply ((xcontext)) (((xself).xfirst)) (((xself).xsecond)))))
                                (((unsupported)).apply (FALSE))
                    (((unsupported)).apply ((xOperator)))
            xprefix.write
              [xbp xfunc]
                memory > xlbp
                memory > xnud
                memory > xeval
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xTokenBase)))
                      seq
                        xlbp.write (xbp)
                        xnud.write
                          [xself xparser]
                            seq > @
                              seq
                                (((unsupported)).apply (((xself).xfirst)) (((((xparser).xexpression)).apply ((xbp)))))
                                (((unsupported)).apply (((xself).xsecond)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xself)))
                        xeval.write
                          [xself xcontext]
                            seq > @
                              (((unsupported)).apply ((xException)))
                                (((unsupported)).apply ((((xfunc)).apply ((xcontext)) (((xself).xfirst)))))
                                (((unsupported)).apply (FALSE))
                    (((unsupported)).apply ((xOperator)))
            xOPERATORS.write (((unsupported)).apply ("or") ((((xinfix)).apply (6) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).or ((((xy).xeval)).apply ((xcontext))))))))) ("and") ((((xinfix)).apply (7) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).and ((((xy).xeval)).apply ((xcontext))))))))) ("not") ((((xprefix)).apply (8) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).not)))))) ("in") ((((xinfix)).apply (9) ((((unsupported)).apply ((((unsupported)).apply (((((xx).xeval)).apply ((xcontext)))) (((((xy).xeval)).apply ((xcontext)))))))))) ("not in") ((((xinfix)).apply (9) ((((unsupported)).apply ((((unsupported)).apply (((((xx).xeval)).apply ((xcontext)))) (((((xy).xeval)).apply ((xcontext)))))))))) ("is") ((((xinfix)).apply (10) ((((unsupported)).apply ((((unsupported)).apply (((((xx).xeval)).apply ((xcontext)))) (((((xy).xeval)).apply ((xcontext)))))))))) ("is not") ((((xinfix)).apply (10) ((((unsupported)).apply ((((unsupported)).apply (((((xx).xeval)).apply ((xcontext)))) (((((xy).xeval)).apply ((xcontext)))))))))) ("==") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).eq ((((xy).xeval)).apply ((xcontext))))))))) ("!=") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).neq ((((xy).xeval)).apply ((xcontext))))))))) (">") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).greater ((((xy).xeval)).apply ((xcontext))))))))) (">=") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).geq ((((xy).xeval)).apply ((xcontext))))))))) ("<") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).less ((((xy).xeval)).apply ((xcontext))))))))) ("<=") ((((xinfix)).apply (10) ((((unsupported)).apply ((((((xx).xeval)).apply ((xcontext))).leq ((((xy).xeval)).apply ((xcontext))))))))))
            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xop)))) (((((xOPERATORS).xitems)).apply)))
              (((unsupported)).apply (((xop).xid)) ((xkey)))
            (((unsupported)).apply ((xTokenBase)))
              seq
                (((unsupported)).apply)
                xid.write "literal"
                xlbp.write 0
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                xdisplay.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xrepr)).apply (((xself).xvalue)))))
                xnud.write
                  [xself xparser]
                    seq > @
                      (((unsupported)).apply ((xself)))
                xeval.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("(%s %r)".mod (((unsupported)).apply (((xself).xid)) (((xself).xvalue))))))
            (((unsupported)).apply ((xTokenBase)))
              seq
                xlbp.write 0
                xnud.write
                  [xself xparser]
                    seq > @
                      (((unsupported)).apply (((((xparser).xerror_class)).apply ("Unexpected end of expression in if tag."))))
            xEndToken.write (((xEndToken)).apply)
            (((unsupported)).apply)
              seq
                xerror_class.write (xValueError)
                x__init__.write
                  [xself xtokens]
                    memory > xnum_tokens
                    memory > xtoken
                    memory > xmapped_tokens
                    memory > xi
                    seq > @
                      seq
                        xnum_tokens.write (((xlen)).apply ((xtokens)))
                        xmapped_tokens.write (((unsupported)).apply)
                        xi.write 0
                        while.
                          ((xi).less (xnum_tokens))
                          [unused]
                            seq > @
                              seq
                                xtoken.write (((unsupported)).apply ((xtokens)) ((xi)))
                                ((((xtoken).eq "is").and (((xi).add 1).less (xnum_tokens))).and ((((unsupported)).apply ((xtokens)) (((xi).add 1))).eq "not")).if
                                  seq
                                    xtoken.write "is not"
                                    (((unsupported)).apply ((xi)) (1))
                                  ((((xtoken).eq "not").and (((xi).add 1).less (xnum_tokens))).and ((((unsupported)).apply ((xtokens)) (((xi).add 1))).eq "in")).if
                                    seq
                                      xtoken.write "not in"
                                      (((unsupported)).apply ((xi)) (1))
                                bogusForceDataize.write ((((xmapped_tokens).xappend)).apply (((((xself).xtranslate_token)).apply ((xtoken)))))
                                (((unsupported)).apply ((xi)) (1))
                        (((unsupported)).apply (((xself).xtokens)) ((xmapped_tokens)))
                        (((unsupported)).apply (((xself).xpos)) (0))
                        (((unsupported)).apply (((xself).xcurrent_token)) (((((xself).xnext_token)).apply)))
                xtranslate_token.write
                  [xself xtoken]
                    memory > xop
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xKeyError)) ((xTypeError)))))
                        xop.write (((unsupported)).apply ((xOPERATORS)) ((xtoken)))
                        (((unsupported)).apply (((((xself).xcreate_var)).apply ((xtoken)))))
                        (((unsupported)).apply ((((xop)).apply)))
                xnext_token.write
                  [xself]
                    memory > xretval
                    seq > @
                      (((xself).xpos).geq (((xlen)).apply (((xself).xtokens)))).if
                        (((unsupported)).apply ((xEndToken)))
                        seq
                          xretval.write (((unsupported)).apply (((xself).xtokens)) (((xself).xpos)))
                          (((unsupported)).apply (((xself).xpos)) (1))
                          (((unsupported)).apply ((xretval)))
                xparse.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write ((((xself).xexpression)).apply)
                        (((unsupported)).apply (((xself).xcurrent_token)) ((xEndToken))).if
                          (((unsupported)).apply (((((xself).xerror_class)).apply (("Unused '%s' at end of if expression.".mod (((((xself).xcurrent_token).xdisplay)).apply))))))
                        (((unsupported)).apply ((xretval)))
                xexpression.write
                  [xself xrbp]
                    memory > xt
                    memory > xleft
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((xself).xcurrent_token)
                        (((unsupported)).apply (((xself).xcurrent_token)) (((((xself).xnext_token)).apply)))
                        xleft.write ((((xt).xnud)).apply ((xself)))
                        while.
                          ((xrbp).less (((xself).xcurrent_token).xlbp))
                          [unused]
                            seq > @
                              seq
                                xt.write ((xself).xcurrent_token)
                                (((unsupported)).apply (((xself).xcurrent_token)) (((((xself).xnext_token)).apply)))
                                xleft.write ((((xt).xled)).apply ((xleft)) ((xself)))
                        (((unsupported)).apply ((xleft)))
                xcreate_var.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply ((((xLiteral)).apply ((xvalue)))))