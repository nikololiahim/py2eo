memory > xfrozenset
memory > xvalue
memory > xmake_hashable
memory > xTypeError
memory > xexpected
memory > xUnhashable
memory > xtests
memory > xSimpleTestCase
[] > test_hashable
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_count_equal
        memory > xtest_unhashable
        memory > xtest_equal
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_equal.write
                  [xself]
                    memory > xtests2
                    seq > @
                      seq
                        xtests2.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("a") (1))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("a"))))) ((((unsupported)).apply ((((xfrozenset)).apply ((((unsupported)).apply ("a"))))) ((((unsupported)).apply ("a"))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") (2))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("b") (2) ("a") (1))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ("b") (1))))) ((((unsupported)).apply ("a") ((((unsupported)).apply ("b") (1))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ("b") (1))))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((((unsupported)).apply ("b") (1))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmake_hashable)).apply ((xvalue)))) ((xexpected)))
                xtest_count_equal.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") ((((unsupported)).apply ("a") (1))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") ((((unsupported)).apply ("a") (1))))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((xmake_hashable)).apply ((xvalue)))) ((xexpected)))
                xtest_unhashable.write
                  [xself]
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__hash__.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ("unhashable type: 'Unhashable'"))))
                          bogusForceDataize.write (((xmake_hashable)).apply ((((xUnhashable)).apply)))