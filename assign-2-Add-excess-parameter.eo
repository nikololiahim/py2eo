+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > assign-2
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > assertMe
      cage > xassignTest2
      seq > @
        stdout "assign-2\n"
        write.
          xassignTest2
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > e1
                cage > e0
                cage > e2
                cage > xa
                seq > @
                  stdout "xassignTest2\n"
                  (xa).write (1)
                  [] > tmp4
                    memory > dddata
                    dddata.write (((xa).sub 2)) > @
                  (e0).write (tmp4.dddata)
                  ((e0).<)
                  [] > tmp5
                    memory > dddata
                    dddata.write ((1.neg)) > @
                  (e1).write (tmp5.dddata)
                  ((e1).<)
                  [] > tmp6
                    memory > dddata
                    dddata.write (((e0).eq (e1))) > @
                  (e2).write (tmp6.dddata)
                  ((e2).<)
                  stackUp.forward (return (e2))
                  123
        tmp.write (goto ((((xassignTest2)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        stackUp.forward (return (assertMe))
  (goto (apply.@)).result > @