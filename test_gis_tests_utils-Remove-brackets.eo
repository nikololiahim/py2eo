memory > xAssertionError
memory > xsuper
memory > xgetattr
memory > xSimpleTestCase
memory > xTestFunc
memory > xconnection
memory > xmodels
memory > xFuncTestMixin
[] > test_gis_tests_utils
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_mutation
        memory > xtest_not_mutated
        memory > xtest_mutated_expression_deep
        memory > xtest_mutated_attribute
        memory > xtest_mutated_expressions
        memory > xtest_mutated_expression
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xtest_mutation.write
              [xraises]
                memory > xwrapper
                seq > @
                  (((unsupported)).apply)
                    xwrapper.write
                      [xmutation_func]
                        memory > xtest
                        seq > @
                          seq
                            xtest.write
                              [xtest_case_instance]
                                memory > xoutput_field
                                memory > xas_sql
                                memory > xmsg
                                memory > x__init__
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xmodels).xFunc)))
                                      seq
                                        xoutput_field.write ((xmodels).xIntegerField)
                                        x__init__.write
                                          [xself]
                                            seq > @
                                              seq
                                                (((unsupported)).apply (((xself).xattribute)) ("initial"))
                                                bogusForceDataize.write ((((xsuper).x__init__)).apply ("initial") ((((unsupported)).apply ("initial"))))
                                        xas_sql.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply)
                                                bogusForceDataize.write (((xmutation_func)).apply ((xself)))
                                                (((unsupported)).apply ((((unsupported)).apply (""))))
                                    (xraises).if
                                      seq
                                        xmsg.write "TestFunc Func was mutated during compilation."
                                        (((unsupported)).apply (((((xtest_case_instance).xassertRaisesMessage)).apply ((xAssertionError)) ((xmsg)))))
                                          bogusForceDataize.write (((((xgetattr)).apply ((xTestFunc)) (("as_".add ((xconnection).xvendor))))).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                                      bogusForceDataize.write (((((xgetattr)).apply ((xTestFunc)) (("as_".add ((xconnection).xvendor))))).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xtest)))
                    (((unsupported)).apply ((xwrapper)))
            (((unsupported)).apply ((xFuncTestMixin)) ((xSimpleTestCase)))
              seq
                xtest_mutated_attribute.write
                  [xfunc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xfunc).xattribute)) ("mutated"))
                xtest_mutated_expressions.write
                  [xfunc]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                xtest_mutated_expression.write
                  [xfunc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((unsupported)).apply (((xfunc).xsource_expressions)) (0)).xname)) ("mutated"))
                xtest_mutated_expression_deep.write
                  [xfunc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xfunc).xsource_expressions)) (1)).xvalue)) (0))) ("mutated"))
                xtest_not_mutated.write
                  [xfunc]
                    seq > @
                      (((unsupported)).apply)