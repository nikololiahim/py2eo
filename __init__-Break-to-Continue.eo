memory > xfilename
memory > xValueError
memory > xstr
memory > xPath
memory > xset
memory > xtuple
memory > xsorted
memory > xgetattr
memory > xisinstance
memory > xTypeError
memory > xLazyObject
memory > xAttributeError
memory > xdjango
memory > xlist
memory > xRuntimeError
memory > xsetting
memory > ximportlib
memory > xempty
memory > xSettings
memory > xwarnings
memory > xglobal_settings
memory > xUserSettingsHolder
memory > xget_script_prefix
memory > xvalue
memory > xLazySettings
memory > x_
memory > xhasattr
memory > xtime
memory > xsuper
memory > xRemovedInDjango50Warning
memory > xs
memory > xos
memory > xdir
memory > xtraceback
memory > xsetattr
memory > xname
memory > xImproperlyConfigured
memory > xoptions
[] > __init__
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_setup
        memory > x__repr__
        memory > xUSE_L10N_DEPRECATED_MSG
        memory > x__getattr__
        memory > xUSE_DEPRECATED_PYTZ_DEPRECATED_MSG
        memory > xconfigure
        memory > xUSE_L10N
        memory > x_USE_L10N_INTERNAL
        memory > x_add_script_prefix
        memory > xsettings
        memory > x__dir__
        memory > x__setattr__
        memory > x__new__
        memory > xENVIRONMENT_VARIABLE
        memory > x__delattr__
        memory > xis_overridden
        memory > x__init__
        memory > xconfigured
        memory > xCSRF_COOKIE_MASKED_DEPRECATED_MSG
        memory > xSETTINGS_MODULE
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xENVIRONMENT_VARIABLE.write "DJANGO_SETTINGS_MODULE"
            xUSE_DEPRECATED_PYTZ_DEPRECATED_MSG.write "The USE_DEPRECATED_PYTZ setting, and support for pytz timezones is deprecated in favor of the stdlib zoneinfo module. Please update your code to use zoneinfo and remove the USE_DEPRECATED_PYTZ setting."
            xUSE_L10N_DEPRECATED_MSG.write "The USE_L10N setting is deprecated. Starting with Django 5.0, localized formatting of data will always be enabled. For example Django will display numbers and dates using the format of the current locale."
            xCSRF_COOKIE_MASKED_DEPRECATED_MSG.write "The CSRF_COOKIE_MASKED transitional setting is deprecated. Support for it will be removed in Django 5.0."
            (((unsupported)).apply ((xstr)))
              seq
                (((unsupported)).apply)
                x__new__.write
                  [xself xvalue xsetting_name]
                    seq > @
                      (((unsupported)).apply (((((xstr).x__new__)).apply ((xself)) ((xvalue)))))
                x__init__.write
                  [xself xvalue xsetting_name]
                    seq > @
                      (((unsupported)).apply (((xself).xsetting_name)) ((xsetting_name)))
            (((unsupported)).apply ((xLazyObject)))
              seq
                (((unsupported)).apply)
                x_setup.write
                  [xself xname]
                    memory > xdesc
                    memory > xsettings_module
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsettings_module.write (((((xos).xenviron).xget)).apply ((xENVIRONMENT_VARIABLE)))
                        ((xsettings_module).not).if
                          seq
                            xdesc.write ((xname).if ("setting %s".mod (xname)) "settings")
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Requested %s, but settings are not configured. You must either define the environment variable %s or call settings.configure() before accessing settings.".mod (((unsupported)).apply ((xdesc)) ((xENVIRONMENT_VARIABLE))))))))
                        (((unsupported)).apply (((xself).x_wrapped)) ((((xSettings)).apply ((xsettings_module)))))
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          (((unsupported)).apply ("<LazySettings [Unevaluated]>"))
                        (((unsupported)).apply (("<LazySettings \"%(settings_module)s\">".mod (((unsupported)).apply ("settings_module") ((((xself).x_wrapped).xSETTINGS_MODULE))))))
                x__getattr__.write
                  [xself xname]
                    memory > xval
                    memory > x_wrapped
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_wrapped)))) ((xempty))).if
                          seq
                            bogusForceDataize.write ((((xself).x_setup)).apply ((xname)))
                            x_wrapped.write ((xself).x_wrapped)
                        xval.write (((xgetattr)).apply ((x_wrapped)) ((xname)))
                        ((((unsupported)).apply ((xname)) ((((unsupported)).apply ("MEDIA_URL") ("STATIC_URL")))).and (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?"))).if
                          xval.write ((((xself).x_add_script_prefix)).apply ((xval)))
                          (((xname).eq "SECRET_KEY").and ((xval).not)).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("The SECRET_KEY setting must not be empty."))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ((xname)))) ((xval)))
                        (((unsupported)).apply ((xval)))
                x__setattr__.write
                  [xself xname xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xname).eq "_wrapped").if
                          bogusForceDataize.write (((((xself).x__dict__).xclear)).apply)
                          bogusForceDataize.write (((((xself).x__dict__).xpop)).apply ((xname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)).apply).x__setattr__)).apply ((xname)) ((xvalue)))
                x__delattr__.write
                  [xself xname]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((((xsuper)).apply).x__delattr__)).apply ((xname)))
                        bogusForceDataize.write (((((xself).x__dict__).xpop)).apply ((xname)) ("None: is there a None literal in the EO language?"))
                xconfigure.write
                  [xself xdefault_settings]
                    memory > xholder
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("Settings already configured."))))
                        xholder.write (((xUserSettingsHolder)).apply ((xdefault_settings)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xoptions).xitems)).apply)))
                          seq
                            (((((xname).xisupper)).apply).not).if
                              (((unsupported)).apply ((((xTypeError)).apply (("Setting %r must be uppercase.".mod (xname))))))
                            bogusForceDataize.write (((xsetattr)).apply ((xholder)) ((xname)) ((xvalue)))
                        (((unsupported)).apply (((xself).x_wrapped)) ((xholder)))
                x_add_script_prefix.write
                  [xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xvalue).xstartswith)).apply ((((unsupported)).apply ("http://") ("https://") ("/")))).if
                          (((unsupported)).apply ((xvalue)))
                        (((unsupported)).apply)
                        (((unsupported)).apply (("%s%s".mod (((unsupported)).apply ((((xget_script_prefix)).apply)) ((xvalue))))))
                xconfigured.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_wrapped)) ((xempty)))))
                xUSE_L10N.write
                  [xself]
                    memory > xstack
                    seq > @
                      (((unsupported)).apply)
                        xstack.write ((((xtraceback).xextract_stack)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((x_)) ((x_)) ((x_)))) ((((unsupported)).apply ((xstack)) ((3.neg)))))
                        (((((xfilename).xstartswith)).apply ((((((xos).xpath).xdirname)).apply (((xdjango).x__file__))))).not).if
                          (((unsupported)).apply (((xwarnings).xwarn)) ((xUSE_L10N_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)) (2))
                        (((unsupported)).apply (((((xself).x__getattr__)).apply ("USE_L10N"))))
                x_USE_L10N_INTERNAL.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x__getattr__)).apply ("USE_L10N"))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xsettings_module]
                    memory > xsetting_value
                    memory > xzoneinfo_root
                    memory > xzone_info_file
                    memory > xtuple_settings
                    memory > xmod
                    seq > @
                      seq
                        (((unsupported)).apply ((xsetting)) ((((xdir)).apply ((xglobal_settings)))))
                          ((((xsetting).xisupper)).apply).if
                            bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xsetting)) ((((xgetattr)).apply ((xglobal_settings)) ((xsetting)))))
                        (((unsupported)).apply (((xself).xSETTINGS_MODULE)) ((xsettings_module)))
                        xmod.write ((((ximportlib).ximport_module)).apply (((xself).xSETTINGS_MODULE)))
                        xtuple_settings.write (((unsupported)).apply ("ALLOWED_HOSTS") ("INSTALLED_APPS") ("TEMPLATE_DIRS") ("LOCALE_PATHS") ("SECRET_KEY_FALLBACKS"))
                        (((unsupported)).apply (((xself).x_explicit_settings)) ((((xset)).apply)))
                        (((unsupported)).apply ((xsetting)) ((((xdir)).apply ((xmod)))))
                          ((((xsetting).xisupper)).apply).if
                            seq
                              xsetting_value.write (((xgetattr)).apply ((xmod)) ((xsetting)))
                              ((((unsupported)).apply ((xsetting)) ((xtuple_settings))).and ((((xisinstance)).apply ((xsetting_value)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not)).if
                                (((unsupported)).apply ((((xImproperlyConfigured)).apply (("The %s setting must be a list or a tuple.".mod (xsetting))))))
                              bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xsetting)) ((xsetting_value)))
                              bogusForceDataize.write (((((xself).x_explicit_settings).xadd)).apply ((xsetting)))
                        ((((unsupported)).apply (((xself).xUSE_TZ)) (FALSE)).and (((((xself).xis_overridden)).apply ("USE_TZ")).not)).if
                          (((unsupported)).apply (((xwarnings).xwarn)) ("The default value of USE_TZ will change from False to True in Django 5.0. Set USE_TZ to False in your project settings if you want to keep the current default behavior.") ((xRemovedInDjango50Warning)))
                        ((((xself).xis_overridden)).apply ("USE_DEPRECATED_PYTZ")).if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xUSE_DEPRECATED_PYTZ_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                        ((((xself).xis_overridden)).apply ("CSRF_COOKIE_MASKED")).if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xCSRF_COOKIE_MASKED_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                        ((((xhasattr)).apply ((xtime)) ("tzset")).and ((xself).xTIME_ZONE)).if
                          seq
                            xzoneinfo_root.write (((xPath)).apply ("/usr/share/zoneinfo"))
                            xzone_info_file.write ((((xzoneinfo_root).xjoinpath)).apply ((((unsupported)).apply ((((((xself).xTIME_ZONE).xsplit)).apply ("/"))))))
                            (((((xzoneinfo_root).xexists)).apply).and (((((xzone_info_file).xexists)).apply).not)).if
                              (((unsupported)).apply ((((xValueError)).apply (("Incorrect timezone setting: %s".mod ((xself).xTIME_ZONE))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("TZ"))) (((xself).xTIME_ZONE)))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                        ((((xself).xis_overridden)).apply ("USE_L10N")).if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xUSE_L10N_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                xis_overridden.write
                  [xself xsetting]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xsetting)) (((xself).x_explicit_settings)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s \"%(settings_module)s\">".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__name__)) ("settings_module") (((xself).xSETTINGS_MODULE))))))
            (((unsupported)).apply)
              seq
                unsupported
                xSETTINGS_MODULE.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xdefault_settings]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("_deleted"))) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xdefault_settings)) ((xdefault_settings)))
                x__getattr__.write
                  [xself xname]
                    seq > @
                      seq
                        ((((((xname).xisupper)).apply).not).or (((unsupported)).apply ((xname)) (((xself).x_deleted)))).if
                          (((unsupported)).apply ((xAttributeError)))
                        (((unsupported)).apply ((((xgetattr)).apply (((xself).xdefault_settings)) ((xname)))))
                x__setattr__.write
                  [xself xname xvalue]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_deleted).xdiscard)).apply ((xname)))
                        ((xname).eq "USE_L10N").if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xUSE_L10N_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                        ((xname).eq "CSRF_COOKIE_MASKED").if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xCSRF_COOKIE_MASKED_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__setattr__)).apply ((xname)) ((xvalue)))
                        ((xname).eq "USE_DEPRECATED_PYTZ").if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply ((xUSE_DEPRECATED_PYTZ_DEPRECATED_MSG)) ((xRemovedInDjango50Warning)))
                x__delattr__.write
                  [xself xname]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_deleted).xadd)).apply ((xname)))
                        (((xhasattr)).apply ((xself)) ((xname))).if
                          bogusForceDataize.write ((((((xsuper)).apply).x__delattr__)).apply ((xname)))
                x__dir__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xsorted)).apply ((((unsupported)).apply ((xs)) ((xs)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)))) ((((unsupported)).apply ((((xdir)).apply (((xself).xdefault_settings)))))))) ((((unsupported)).apply ((xs)) (((xself).x_deleted)))))))))
                xis_overridden.write
                  [xself xsetting]
                    memory > xdeleted
                    memory > xset_locally
                    memory > xset_on_default
                    seq > @
                      seq
                        xdeleted.write (((unsupported)).apply ((xsetting)) (((xself).x_deleted)))
                        xset_locally.write (((unsupported)).apply ((xsetting)) (((xself).x__dict__)))
                        xset_on_default.write (((((xgetattr)).apply (((xself).xdefault_settings)) ("is_overridden") ((((unsupported)).apply (FALSE))))).apply ((xsetting)))
                        (((unsupported)).apply ((((xdeleted).or (xset_locally)).or (xset_on_default))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%(cls)s>".mod (((unsupported)).apply ("cls") ((((xself).x__class__).x__name__))))))
            xsettings.write (((xLazySettings)).apply)