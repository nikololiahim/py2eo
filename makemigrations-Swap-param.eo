memory > xnode_name
memory > xall
memory > xMigration
memory > xalias
memory > xopen
memory > xconnections
memory > xsorted
memory > xitem
memory > xzip
memory > xconfig
memory > xapp
memory > xDEFAULT_DB_ALIAS
memory > xMigrationQuestioner
memory > xValueError
memory > xget_migration_name_timestamp
memory > xstr
memory > xerror
memory > xwarnings
memory > xmig
memory > xapps
memory > xMigrationWriter
memory > xfh
memory > xInteractiveMigrationQuestioner
memory > xapp_migrations
memory > xrouter
memory > xapp_label
memory > xconflict
memory > xProjectState
memory > xmax
memory > xnode_app
memory > xRuntimeWarning
memory > xerr
memory > xany
memory > xtype
memory > xBaseCommand
memory > xset
memory > xsettings
memory > xsum
memory > xx
memory > xmigration
memory > xOperationalError
memory > xsys
memory > xcommon_ancestor_generation
memory > xm
memory > xnames
memory > xLookupError
memory > xos
memory > xtakewhile
memory > xoperation
memory > xMigrationAutodetector
memory > xmigration_names
memory > xoptions
memory > xmodel
memory > xNonInteractiveMigrationQuestioner
memory > xMigrationLoader
memory > xrun_formatters
memory > xCommandError
memory > xlen
[] > makemigrations
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xhandle_merge
        memory > xlog_output
        memory > xhandle
        memory > xlog
        memory > xadd_arguments
        memory > xhelp
        memory > xwrite_migration_files
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xBaseCommand)))
              seq
                xhelp.write "Creates new migration(s) for apps."
                xadd_arguments.write
                  [xself xparser]
                    seq > @
                      seq
                        (((unsupported)).apply (((xparser).xadd_argument)) ("args") ("app_label") ("*") ("Specify the app label(s) to create migrations for."))
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        seq
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--merge") ("store_true") ("Enable fixing of migration conflicts."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--empty") ("store_true") ("Create an empty migration."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--noinput") ("--no-input") ("store_false") ("interactive") ("Tells Django to NOT prompt the user for input of any kind."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-n") ("--name") ("Use this name for migration file(s)."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-header") ("store_false") ("include_header") ("Do not add header comments to new migration file(s)."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--check") ("store_true") ("check_changes") ("Exit with a non-zero status if model changes are missing migrations."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--scriptable") ("store_true") ("scriptable") ("Divert log output and input prompts to stderr, writing only paths of generated migration files to stdout."))
                xlog_output.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xscriptable).if ((xself).xstderr) ((xself).xstdout))))
                xlog.write
                  [xself xmsg]
                    seq > @
                      bogusForceDataize.write (((((xself).xlog_output).xwrite)).apply ((xmsg)))
                xhandle.write
                  [xself]
                    memory > xautodetector
                    memory > xname_str
                    memory > xquestioner
                    memory > xconnection
                    memory > xcheck_changes
                    memory > xchanges
                    memory > xapp_labels
                    memory > xconflicts
                    memory > xaliases_to_check
                    memory > xhas_bad_labels
                    memory > xconsistency_check_labels
                    memory > xloader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xwritten_files)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xverbosity)) ((((unsupported)).apply ((xoptions)) ("verbosity"))))
                        (((unsupported)).apply (((xself).xinteractive)) ((((unsupported)).apply ((xoptions)) ("interactive"))))
                        (((unsupported)).apply (((xself).xdry_run)) ((((unsupported)).apply ((xoptions)) ("dry_run"))))
                        (((unsupported)).apply (((xself).xmerge)) ((((unsupported)).apply ((xoptions)) ("merge"))))
                        (((unsupported)).apply (((xself).xempty)) ((((unsupported)).apply ((xoptions)) ("empty"))))
                        (((unsupported)).apply (((xself).xmigration_name)) ((((unsupported)).apply ((xoptions)) ("name"))))
                        (((xself).xmigration_name).and ((((((xself).xmigration_name).xisidentifier)).apply).not)).if
                          (((unsupported)).apply ((((xCommandError)).apply ("The migration name must be a valid Python identifier."))))
                        (((unsupported)).apply (((xself).xinclude_header)) ((((unsupported)).apply ((xoptions)) ("include_header"))))
                        xcheck_changes.write (((unsupported)).apply ((xoptions)) ("check_changes"))
                        (((unsupported)).apply (((xself).xscriptable)) ((((unsupported)).apply ((xoptions)) ("scriptable"))))
                        ((xself).xscriptable).if
                          (((unsupported)).apply ((((xself).xstderr).xstyle_func)) ("None: is there a None literal in the EO language?"))
                        xapp_labels.write (((xset)).apply ((xapp_labels)))
                        xhas_bad_labels.write FALSE
                        (((unsupported)).apply ((xapp_label)) ((xapp_labels)))
                          (((unsupported)).apply ((xLookupError)))
                            bogusForceDataize.write ((((xapps).xget_app_config)).apply ((xapp_label)))
                            seq
                              bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ((((xstr)).apply ((xerr)))))
                              xhas_bad_labels.write TRUE
                        (xhas_bad_labels).if
                          bogusForceDataize.write ((((xsys).xexit)).apply (2))
                        xloader.write (((unsupported)).apply ((xMigrationLoader)) ("None: is there a None literal in the EO language?") (TRUE))
                        xconsistency_check_labels.write (((unsupported)).apply (((xconfig).xlabel)) ((xconfig)) (((((xapps).xget_app_configs)).apply)))
                        xaliases_to_check.write (((xsettings).xDATABASE_ROUTERS).if (xconnections) (((unsupported)).apply ((xDEFAULT_DB_ALIAS))))
                        (((unsupported)).apply ((xalias)) ((((xsorted)).apply ((xaliases_to_check)))))
                          seq
                            xconnection.write (((unsupported)).apply ((xconnections)) ((xalias)))
                            (((((unsupported)).apply (((xconnection).xsettings_dict)) ("ENGINE")).neq "django.db.backends.dummy").and (((xany)).apply ((((unsupported)).apply ((((unsupported)).apply (((xrouter).xallow_migrate)) (((xconnection).xalias)) ((xapp_label)) ((((xmodel).x_meta).xobject_name)))) ((xapp_label)) ((xconsistency_check_labels)) ((xmodel)) ((((((((xapps).xget_app_config)).apply ((xapp_label))).xget_models)).apply)))))).if
                              (((unsupported)).apply ((xOperationalError)))
                                bogusForceDataize.write ((((xloader).xcheck_consistent_history)).apply ((xconnection)))
                                bogusForceDataize.write ((((xwarnings).xwarn)).apply (("Got an error checking a consistent migration history performed for database connection '%s': %s".mod (((unsupported)).apply ((xalias)) ((xerror))))) ((xRuntimeWarning)))
                        xconflicts.write ((((xloader).xdetect_conflicts)).apply)
                        (xapp_labels).if
                          xconflicts.write (((unsupported)).apply ((xapp_label)) ((xconflict)) ((((unsupported)).apply ((xapp_label)) ((xconflict)))) (((((xconflicts).xitems)).apply)) ((((unsupported)).apply ((xapp_label)) ((xapp_labels)))))
                        ((xconflicts).and (((xself).xmerge).not)).if
                          seq
                            xname_str.write ((("; ".xjoin)).apply ((((unsupported)).apply (("%s in %s".mod (((unsupported)).apply ((((", ".xjoin)).apply ((xnames)))) ((xapp))))) ((((unsupported)).apply ((xapp)) ((xnames)))) (((((xconflicts).xitems)).apply)))))
                            (((unsupported)).apply ((((xCommandError)).apply (("Conflicting migrations detected; multiple leaf nodes in the migration graph: (%s).nTo fix them run 'python manage.py makemigrations --merge'".mod (xname_str))))))
                        (((xself).xmerge).and ((xconflicts).not)).if
                          seq
                            bogusForceDataize.write ((((xself).xlog)).apply ("No conflicts detected to merge."))
                            (((unsupported)).apply)
                        (((xself).xmerge).and (xconflicts)).if
                          (((unsupported)).apply (((((xself).xhandle_merge)).apply ((xloader)) ((xconflicts)))))
                        ((xself).xinteractive).if
                          xquestioner.write (((unsupported)).apply ((xInteractiveMigrationQuestioner)) ((xapp_labels)) (((xself).xdry_run)) (((xself).xlog_output)))
                          xquestioner.write (((unsupported)).apply ((xNonInteractiveMigrationQuestioner)) ((xapp_labels)) (((xself).xdry_run)) (((xself).xverbosity)) (((xself).xlog)))
                        xautodetector.write (((xMigrationAutodetector)).apply (((((xloader).xproject_state)).apply)) (((((xProjectState).xfrom_apps)).apply ((xapps)))) ((xquestioner)))
                        ((xself).xempty).if
                          seq
                            ((xapp_labels).not).if
                              (((unsupported)).apply ((((xCommandError)).apply ("You must supply at least one app label when using --empty."))))
                            xchanges.write (((unsupported)).apply ((xapp)) ((((unsupported)).apply ((((xMigration)).apply ("custom") ((xapp)))))) ((xapp)) ((xapp_labels)))
                            xchanges.write (((unsupported)).apply (((xautodetector).xarrange_for_graph)) ((xchanges)) (((xloader).xgraph)) (((xself).xmigration_name)))
                            bogusForceDataize.write ((((xself).xwrite_migration_files)).apply ((xchanges)))
                            (((unsupported)).apply)
                        xchanges.write (((unsupported)).apply (((xautodetector).xchanges)) (((xloader).xgraph)) (((xapp_labels).or "None: is there a None literal in the EO language?")) (((xapp_labels).or "None: is there a None literal in the EO language?")) (((xself).xmigration_name)))
                        ((xchanges).not).if
                          (((xself).xverbosity).geq 1).if
                            (xapp_labels).if
                              ((((xlen)).apply ((xapp_labels))).eq 1).if
                                bogusForceDataize.write ((((xself).xlog)).apply (("No changes detected in app '%s'".mod ((((xapp_labels).xpop)).apply))))
                                bogusForceDataize.write ((((xself).xlog)).apply (("No changes detected in apps '%s'".mod ((("', '".xjoin)).apply ((xapp_labels))))))
                              bogusForceDataize.write ((((xself).xlog)).apply ("No changes detected"))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_migration_files)).apply ((xchanges)))
                            (xcheck_changes).if
                              bogusForceDataize.write ((((xsys).xexit)).apply (1))
                xwrite_migration_files.write
                  [xself xchanges]
                    memory > xmigration_string
                    memory > xmigrations_directory
                    memory > xinit_path
                    memory > xdirectory_created
                    memory > xwriter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdirectory_created.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xapp_migrations)))) (((((xchanges).xitems)).apply)))
                          seq
                            (((xself).xverbosity).geq 1).if
                              bogusForceDataize.write ((((xself).xlog)).apply ((((((xself).xstyle).xMIGRATE_HEADING)).apply (("Migrations for '%s':".mod (xapp_label))))))
                            (((unsupported)).apply ((xmigration)) ((xapp_migrations)))
                              seq
                                xwriter.write (((xMigrationWriter)).apply ((xmigration)) (((xself).xinclude_header)))
                                (((xself).xverbosity).geq 1).if
                                  seq
                                    (((unsupported)).apply ((xValueError)))
                                      xmigration_string.write (((((xos).xpath).xrelpath)).apply (((xwriter).xpath)))
                                      xmigration_string.write ((xwriter).xpath)
                                    ((((xmigration_string).xstartswith)).apply ("..")).if
                                      xmigration_string.write ((xwriter).xpath)
                                    bogusForceDataize.write ((((xself).xlog)).apply (("  %sn".mod (((((xself).xstyle).xMIGRATE_LABEL)).apply ((xmigration_string))))))
                                    (((unsupported)).apply ((xoperation)) (((xmigration).xoperations)))
                                      bogusForceDataize.write ((((xself).xlog)).apply (("    - %s".mod ((((xoperation).xdescribe)).apply))))
                                    ((xself).xscriptable).if
                                      bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ((xmigration_string)))
                                (((xself).xdry_run).not).if
                                  seq
                                    xmigrations_directory.write (((((xos).xpath).xdirname)).apply (((xwriter).xpath)))
                                    (((((xdirectory_created).xget)).apply ((xapp_label))).not).if
                                      seq
                                        (((unsupported)).apply (((xos).xmakedirs)) ((xmigrations_directory)) (TRUE))
                                        xinit_path.write (((((xos).xpath).xjoin)).apply ((xmigrations_directory)) ("__init__.py"))
                                        ((((((xos).xpath).xisfile)).apply ((xinit_path))).not).if
                                          bogusForceDataize.write ((((((xopen)).apply ((xinit_path)) ("w")).xclose)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xdirectory_created)) ((xapp_label)))) (TRUE))
                                    xmigration_string.write ((((xwriter).xas_string)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xwriter).xpath)) ("w") ("utf-8"))) ((xfh)))
                                      seq
                                        bogusForceDataize.write ((((xfh).xwrite)).apply ((xmigration_string)))
                                        bogusForceDataize.write (((((xself).xwritten_files).xappend)).apply (((xwriter).xpath)))
                                  (((xself).xverbosity).eq 3).if
                                    seq
                                      bogusForceDataize.write ((((xself).xlog)).apply ((((((xself).xstyle).xMIGRATE_HEADING)).apply (("Full migrations file '%s':".mod ((xwriter).xfilename))))))
                                      bogusForceDataize.write ((((xself).xlog)).apply (((((xwriter).xas_string)).apply)))
                        bogusForceDataize.write (((xrun_formatters)).apply (((xself).xwritten_files)))
                xhandle_merge.write
                  [xself xloader xconflicts]
                    memory > xall_items_equal
                    memory > xnumbers
                    memory > xquestioner
                    memory > xbiggest_number
                    memory > xmigration
                    memory > xsubclass
                    memory > xmigration_name
                    memory > xleaf_names
                    memory > xwriter
                    memory > xparts
                    memory > xcommon_ancestor_count
                    memory > xnew_migration
                    memory > xmigrations_ops
                    memory > xmerge_migrations
                    memory > xmerge_migrations_generations
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).xinteractive).if
                          xquestioner.write (((unsupported)).apply ((xInteractiveMigrationQuestioner)) (((xself).xlog_output)))
                          xquestioner.write (((unsupported)).apply ((xMigrationQuestioner)) ((((unsupported)).apply ("ask_merge") (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigration_names)))) (((((xconflicts).xitems)).apply)))
                          seq
                            xmerge_migrations.write (((unsupported)).apply)
                            (((unsupported)).apply ((xmigration_name)) ((xmigration_names)))
                              seq
                                xmigration.write ((((xloader).xget_migration)).apply ((xapp_label)) ((xmigration_name)))
                                (((unsupported)).apply (((xmigration).xancestry)) ((((unsupported)).apply ((xmig)) ((xmig)) ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ((xapp_label)) ((xmigration_name)))))) (((((unsupported)).apply ((xmig)) (0)).eq ((xmigration).xapp_label))))))
                                bogusForceDataize.write ((((xmerge_migrations).xappend)).apply ((xmigration)))
                            xall_items_equal.write
                              [xseq]
                                seq > @
                                  (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply (((xitem).eq (((unsupported)).apply ((xseq)) (0)))) ((xitem)) ((((unsupported)).apply ((xseq)) ((((unsupported)).apply (1))))))))))
                            xmerge_migrations_generations.write (((xzip)).apply ((((unsupported)).apply ((((unsupported)).apply (((xm).xancestry)) ((xm)) ((xmerge_migrations)))))))
                            xcommon_ancestor_count.write (((xsum)).apply ((((unsupported)).apply (1) ((xcommon_ancestor_generation)) ((((xtakewhile)).apply ((xall_items_equal)) ((xmerge_migrations_generations)))))))
                            ((xcommon_ancestor_count).not).if
                              (((unsupported)).apply ((((xValueError)).apply (("Could not find common ancestor of %s".mod (xmigration_names))))))
                            (((unsupported)).apply ((xmigration)) ((xmerge_migrations)))
                              seq
                                (((unsupported)).apply (((xmigration).xbranch)) ((((unsupported)).apply (((xmigration).xancestry)) ((((unsupported)).apply ((xcommon_ancestor_count)))))))
                                xmigrations_ops.write (((unsupported)).apply ((((((xloader).xget_migration)).apply ((xnode_app)) ((xnode_name))).xoperations)) ((((unsupported)).apply ((xnode_app)) ((xnode_name)))) (((xmigration).xbranch)))
                                (((unsupported)).apply (((xmigration).xmerged_operations)) ((((xsum)).apply ((xmigrations_ops)) ((((unsupported)).apply)))))
                            (((xself).xverbosity).greater 0).if
                              seq
                                bogusForceDataize.write ((((xself).xlog)).apply ((((((xself).xstyle).xMIGRATE_HEADING)).apply (("Merging %s".mod (xapp_label))))))
                                (((unsupported)).apply ((xmigration)) ((xmerge_migrations)))
                                  seq
                                    bogusForceDataize.write ((((xself).xlog)).apply ((((((xself).xstyle).xMIGRATE_LABEL)).apply (("  Branch %s".mod ((xmigration).xname))))))
                                    (((unsupported)).apply ((xoperation)) (((xmigration).xmerged_operations)))
                                      bogusForceDataize.write ((((xself).xlog)).apply (("    - %s".mod ((((xoperation).xdescribe)).apply))))
                            ((((xquestioner).xask_merge)).apply ((xapp_label))).if
                              seq
                                xnumbers.write (((unsupported)).apply (((((xMigrationAutodetector).xparse_number)).apply (((xmigration).xname)))) ((xmigration)) ((xmerge_migrations)))
                                (((unsupported)).apply ((xValueError)))
                                  xbiggest_number.write (((xmax)).apply ((((unsupported)).apply ((xx)) ((xx)) ((xnumbers)) ((((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?"))))))
                                  xbiggest_number.write 1
                                xsubclass.write (((xtype)).apply ("Migration") ((((unsupported)).apply ((xMigration)))) ((((unsupported)).apply ("dependencies") ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) (((xmigration).xname)))) ((xmigration)) ((xmerge_migrations)))))))
                                xparts.write (((unsupported)).apply (("%04i".mod ((xbiggest_number).add 1))))
                                ((xself).xmigration_name).if
                                  bogusForceDataize.write ((((xparts).xappend)).apply (((xself).xmigration_name)))
                                  seq
                                    bogusForceDataize.write ((((xparts).xappend)).apply ("merge"))
                                    xleaf_names.write ((("_".xjoin)).apply ((((xsorted)).apply ((((unsupported)).apply (((xmigration).xname)) ((xmigration)) ((xmerge_migrations)))))))
                                    ((((xlen)).apply ((xleaf_names))).greater 47).if
                                      bogusForceDataize.write ((((xparts).xappend)).apply ((((xget_migration_name_timestamp)).apply)))
                                      bogusForceDataize.write ((((xparts).xappend)).apply ((xleaf_names)))
                                xmigration_name.write ((("_".xjoin)).apply ((xparts)))
                                xnew_migration.write (((xsubclass)).apply ((xmigration_name)) ((xapp_label)))
                                xwriter.write (((xMigrationWriter)).apply ((xnew_migration)) (((xself).xinclude_header)))
                                (((xself).xdry_run).not).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xwriter).xpath)) ("w") ("utf-8"))) ((xfh)))
                                      bogusForceDataize.write ((((xfh).xwrite)).apply (((((xwriter).xas_string)).apply)))
                                    bogusForceDataize.write (((xrun_formatters)).apply ((((unsupported)).apply (((xwriter).xpath)))))
                                    (((xself).xverbosity).greater 0).if
                                      seq
                                        bogusForceDataize.write ((((xself).xlog)).apply (("nCreated new merge migration %s".mod ((xwriter).xpath))))
                                        ((xself).xscriptable).if
                                          bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (((xwriter).xpath)))
                                  (((xself).xverbosity).eq 3).if
                                    seq
                                      bogusForceDataize.write ((((xself).xlog)).apply ((((((xself).xstyle).xMIGRATE_HEADING)).apply (("Full merge migrations file '%s':".mod ((xwriter).xfilename))))))
                                      bogusForceDataize.write ((((xself).xlog)).apply (((((xwriter).xas_string)).apply)))