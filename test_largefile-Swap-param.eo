memory > xsignal
memory > xstat
memory > xpos
memory > xLargeFileTest
memory > xf
memory > xsys
memory > xunlink
memory > xunittest
memory > xstaticmethod
memory > xlen
memory > x__name__
memory > xImportError
memory > xAttributeError
memory > xstr
memory > xio
memory > xrequires
memory > xhasattr
memory > xOverflowError
memory > xOSError
memory > xTESTFN
memory > xos
[] > test_largefile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xpyio
        memory > xtest_lseek
        memory > xsize
        memory > xtest_osstat
        memory > xopen
        memory > xtest_seek_read
        memory > xsetUpModule
        memory > xtearDownClass
        memory > xtearDownModule
        memory > xsetUp
        memory > xtest_seekable
        memory > xtest_large_read
        memory > xtest_truncate
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xsize.write (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    memory > xcurrent_size
                    memory > xmode
                    seq > @
                      seq
                        (((((xos).xpath).xexists)).apply ((xTESTFN))).if
                          xmode.write "r+b"
                          xmode.write "w+b"
                        (((unsupported)).apply (((((xself).xopen)).apply ((xmode)) ((xTESTFN)))) ((xf)))
                          seq
                            xcurrent_size.write (((unsupported)).apply (((((xos).xfstat)).apply (((((xf).xfileno)).apply)))) (((xstat).xST_SIZE)))
                            ((xcurrent_size).eq ((xsize).add 1)).if
                              (((unsupported)).apply)
                            ((xcurrent_size).eq 0).if
                              bogusForceDataize.write ((((xf).xwrite)).apply ("z"))
                            bogusForceDataize.write ((((xf).xseek)).apply (0))
                            bogusForceDataize.write ((((xf).xseek)).apply ((xsize)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("a"))
                            bogusForceDataize.write ((((xf).xflush)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xos).xfstat)).apply (((((xf).xfileno)).apply)))) (((xstat).xST_SIZE)))) (((xsize).add 1)))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xcls).xopen)).apply ((xTESTFN)) ("wb"))))
                        (((((unsupported)).apply (((((xos).xstat)).apply ((xTESTFN)))) (((xstat).xST_SIZE))).eq 0).not).if
                          (((unsupported)).apply (((((xcls).xfailureException)).apply ("File was not truncated by opening with mode \"wb\""))))
                xtest_large_read.write
                  [xself x_size]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xf).xread)).apply)))) (((xsize).add 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (((xsize).add 1)))
                xtest_osstat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xos).xstat)).apply ((xTESTFN)))) (((xstat).xST_SIZE)))) (((xsize).add 1)))
                xtest_seek_read.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply (1))) ("z"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (1))
                          bogusForceDataize.write ((((xf).xseek)).apply (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (0))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (0))
                          bogusForceDataize.write ((((xf).xseek)).apply (42))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (42))
                          bogusForceDataize.write ((((xf).xseek)).apply (42) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (42))
                          bogusForceDataize.write ((((xf).xseek)).apply (42) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (84))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (84))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((((xsize).add 1).add 0)))
                          bogusForceDataize.write ((((xf).xseek)).apply ((10.neg)) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((((xsize).add 1).sub 10)))
                          bogusForceDataize.write ((((xf).xseek)).apply ((((xsize).neg).sub 1)) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (0))
                          bogusForceDataize.write ((((xf).xseek)).apply ((xsize)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((xsize)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply (1))) ("a"))
                          bogusForceDataize.write ((((xf).xseek)).apply ((((xsize).neg).sub 1)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply (1))) ("z"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (1))
                xtest_lseek.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) (0) (0))) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) (42) (0))) (42))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) (42) (1))) (84))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) (0) (1))) (84))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) (0) (2))) ((((xsize).add 1).add 0)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) ((10.neg)) (2))) ((((xsize).add 1).sub 10)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) ((((xsize).neg).sub 1)) (2))) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlseek)).apply (((((xf).xfileno)).apply)) ((xsize)) (0))) ((xsize)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply (1))) ("a"))
                xtest_truncate.write
                  [xself]
                    memory > xnewsize
                    seq > @
                      (((unsupported)).apply (((((xself).xopen)).apply ((xTESTFN)) ("r+b"))) ((xf)))
                        seq
                          ((((xhasattr)).apply ((xf)) ("truncate")).not).if
                            (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("open().truncate() not available on this system"))))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (((xsize).add 1)))
                          xnewsize.write ((xsize).sub 10)
                          bogusForceDataize.write ((((xf).xseek)).apply ((xnewsize)))
                          bogusForceDataize.write ((((xf).xtruncate)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((xnewsize)))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((xnewsize)))
                          (((unsupported)).apply ((xnewsize)) (1))
                          bogusForceDataize.write ((((xf).xseek)).apply (42))
                          bogusForceDataize.write ((((xf).xtruncate)).apply ((xnewsize)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (42))
                          bogusForceDataize.write ((((xf).xseek)).apply (0) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) ((xnewsize)))
                          bogusForceDataize.write ((((xf).xseek)).apply (0))
                          bogusForceDataize.write ((((xf).xtruncate)).apply (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (0))
                          bogusForceDataize.write ((((xf).xseek)).apply (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xf).xread)).apply)))) (1))
                xtest_seekable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpos)) ((((unsupported)).apply (((((unsupported)).apply (2) (31)).sub 1)) ((((unsupported)).apply (2) (31))) (((((unsupported)).apply (2) (31)).add 1)))))
                        (((unsupported)).apply (((((xself).xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xseek)).apply ((xpos)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xseekable)).apply)))
            xsetUpModule.write
              []
                memory > xf
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xImportError)) ((xAttributeError)))))
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGXFSZ)) (((xsignal).xSIG_IGN)))
                    (((((unsupported)).apply (((xsys).xplatform)) ((((unsupported)).apply (3)))).eq "win").or (((xsys).xplatform).eq "darwin")).if
                      bogusForceDataize.write (((xrequires)).apply ("largefile") (("test requires %s bytes and a long time to run".mod (((xstr)).apply ((xsize))))))
                      seq
                        xf.write (((unsupported)).apply ((xopen)) ((xTESTFN)) ("wb") (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xOSError)) ((xOverflowError)))))
                          seq
                            bogusForceDataize.write ((((xf).xseek)).apply ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("x"))
                            bogusForceDataize.write ((((xf).xflush)).apply)
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("filesystem does not have largefile support"))))
                          seq
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write (((xunlink)).apply ((xTESTFN)))
            (((unsupported)).apply ((xLargeFileTest)) (((xunittest).xTestCase)))
              xopen.write (((xstaticmethod)).apply (((xio).xopen)))
            (((unsupported)).apply ((xLargeFileTest)) (((xunittest).xTestCase)))
              xopen.write (((xstaticmethod)).apply (((xpyio).xopen)))
            xtearDownModule.write
              []
                seq > @
                  bogusForceDataize.write (((xunlink)).apply ((xTESTFN)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)