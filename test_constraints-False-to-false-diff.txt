0a1
> memory > xfalse
358c359
<                           (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_condition") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) (FALSE))) (((xDeferrable).xDEFERRED)))
---
>                           (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_condition") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))) (((xDeferrable).xDEFERRED)))
390,391c391,392
<                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ((xQ)) (FALSE))) ("SPGiST"))
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='SPGiST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' condition=(AND: ('cancelled', False))>"))
---
>                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))) ("SPGiST"))
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='SPGiST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' condition=(AND: ('cancelled', false))>"))
411c412
<                         xconstraint_1.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xF)).apply ("room"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
---
>                         xconstraint_1.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xF)).apply ("room"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))))
413c414
<                         xconstraint_3.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
---
>                         xconstraint_3.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))))
460c461
<                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
---
>                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))))
464c465
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ("condition") ((((unsupported)).apply ((xQ)) (FALSE))))))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ("condition") ((((unsupported)).apply ((xQ)) ((xfalse)))))))
528c529
<                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom") ((((unsupported)).apply ((((unsupported)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))) ((((unsupported)).apply ("range_ops") ("gist_int4_ops"))))
---
>                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom") ((((unsupported)).apply ((((unsupported)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))) ((((unsupported)).apply ("range_ops") ("gist_int4_ops"))))
541c542
<                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom_opclass") ((((unsupported)).apply ((((unsupported)).apply ((((xOpClass)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) ("range_ops"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xOpClass)).apply ("room") ("gist_int4_ops"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
---
>                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom_opclass") ((((unsupported)).apply ((((unsupported)).apply ((((xOpClass)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) ("range_ops"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xOpClass)).apply ("room") ("gist_int4_ops"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))))
548c549
<                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
---
>                         xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) ((xfalse)))))
721c722
<                           (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_gist_indexes") (FALSE))))
---
>                           (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_gist_indexes") ((xfalse)))))
735c736
<                           (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_spgist_indexes") (FALSE))))
---
>                           (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_spgist_indexes") ((xfalse)))))