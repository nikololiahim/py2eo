memory > xapps
memory > xvalue
memory > xgroup
memory > xp
memory > xx
memory > xsorted
memory > xchunk
memory > xev
memory > xthreading
memory > xfalse
memory > xfilename
memory > xget_resolver
memory > xImportError
memory > xdjango
memory > xlist
memory > xRuntimeError
memory > xget_version_tuple
memory > xKeyboardInterrupt
memory > xValueError
memory > xo
memory > xsignal
memory > xfrozenset
memory > xstr
memory > xfile
memory > xFileNotFoundError
memory > xNotImplementedError
memory > xrel_path
memory > xprefix
memory > xStopIteration
memory > xSignal
memory > xchunks
memory > xWatchmanUnavailable
memory > xrequest_finished
memory > xfilepath
memory > xPath
memory > xany
memory > xpatterns
memory > xset
memory > xint
memory > xet
memory > xf
memory > x__main__
memory > xException
memory > xhasattr
memory > xtb
memory > xtime
memory > xpattern
memory > xsuper
memory > xmodule
memory > xsys
memory > xsub
memory > xm
memory > xBaseReloader
memory > xtuple
memory > xargs
memory > xOSError
memory > xos
memory > xModuleType
memory > xres
memory > xtraceback
memory > xitertools
memory > xsubprocess
memory > xStatReloader
memory > xweakref
memory > xchild
memory > xgetattr
memory > xWatchmanReloader
memory > xmtime
memory > xdefaultdict
memory > xe
memory > xex
memory > xresult
memory > xnext
memory > xmap
memory > xdirectory
memory > xkwargs
memory > xisinstance
memory > xzipimporter
memory > xlen
memory > xroot
memory > xkey
memory > xlogging
[] > autoreload
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xclient
        memory > xraise_last_exception
        memory > xrestart_with_reloader
        memory > xiter_modules_and_files
        memory > xtermios
        memory > xDJANGO_AUTORELOAD_ENV
        memory > x__init__
        memory > x_watch_glob
        memory > x_watch_root
        memory > xsnapshot_files
        memory > xnotify_file_changed
        memory > xSLEEP_TIME
        memory > xiter_all_python_module_files
        memory > xwatched_files
        memory > xrun_loop
        memory > xlogger
        memory > x_subscribe_dir
        memory > x_get_clock
        memory > xtick
        memory > xrun_with_reloader
        memory > xrequest_processed
        memory > xcheck_server_status
        memory > xcheck_errors
        memory > xwait_for_apps_ready
        memory > xis_django_module
        memory > xis_django_path
        memory > xstop
        memory > xensure_echo_on
        memory > xcheck_availability
        memory > x_update_watches
        memory > xshould_stop
        memory > xupdate_watches
        memory > xpywatchman
        memory > xwatch_dir
        memory > xrun
        memory > xget_reloader
        memory > xfile_changed
        memory > x_check_subscription
        memory > xstart_django
        memory > xcommon_roots
        memory > xsys_path_directories
        memory > x_error_files
        memory > x_subscribe
        memory > xtrigger_reload
        memory > x_exception
        memory > xautoreload_started
        memory > xget_child_arguments
        memory > xwatched_roots
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xautoreload_started.write (((xSignal)).apply)
            xfile_changed.write (((xSignal)).apply)
            xDJANGO_AUTORELOAD_ENV.write "RUN_MAIN"
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.utils.autoreload"))
            x_error_files.write (((unsupported)).apply)
            x_exception.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xtermios.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xpywatchman.write "None: is there a None literal in the EO language?"
            xis_django_module.write
              [xmodule]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((((xmodule).x__name__).xstartswith)).apply ("django."))))
            xis_django_path.write
              [xpath]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply (((((xPath)).apply (((xdjango).x__file__))).xparent)) (((((xPath)).apply ((xpath))).xparents)))))
            xcheck_errors.write
              [xfn]
                memory > xwrapper
                seq > @
                  seq
                    xwrapper.write
                      []
                        memory > x_exception
                        memory > xfilename
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply)
                            (((unsupported)).apply ((xException)))
                              bogusForceDataize.write (((xfn)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                              seq
                                x_exception.write ((((xsys).xexc_info)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xet)) ((xev)) ((xtb)))) ((x_exception)))
                                (((unsupported)).apply ((((xgetattr)).apply ((xev)) ("filename") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).if
                                  xfilename.write (((unsupported)).apply ((((unsupported)).apply (((((xtraceback).xextract_tb)).apply ((xtb)))) ((1.neg)))) (0))
                                  xfilename.write ((xev).xfilename)
                                (((unsupported)).apply ((xfilename)) ((x_error_files))).if
                                  bogusForceDataize.write ((((x_error_files).xappend)).apply ((xfilename)))
                                (((unsupported)).apply)
                    (((unsupported)).apply ((xwrapper)))
            xraise_last_exception.write
              []
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((x_exception)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((x_exception)) (1))))
            xensure_echo_on.write
              []
                memory > xattr_list
                memory > xold_handler
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xtermios).not).or ((((((xsys).xstdin).xisatty)).apply).not)).if
                      (((unsupported)).apply)
                    xattr_list.write ((((xtermios).xtcgetattr)).apply (((xsys).xstdin)))
                    (((((unsupported)).apply ((xattr_list)) (3)).and ((xtermios).xECHO)).not).if
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xattr_list)) (3))) (((xtermios).xECHO)))
                        (((xhasattr)).apply ((xsignal)) ("SIGTTOU")).if
                          xold_handler.write ((((xsignal).xsignal)).apply (((xsignal).xSIGTTOU)) (((xsignal).xSIG_IGN)))
                          xold_handler.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xtermios).xtcsetattr)).apply (((xsys).xstdin)) (((xtermios).xTCSANOW)) ((xattr_list)))
                        (((unsupported)).apply ((xold_handler)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGTTOU)) ((xold_handler)))
            xiter_all_python_module_files.write
              []
                memory > xkeys
                memory > xmodules
                seq > @
                  seq
                    xkeys.write (((xsorted)).apply (((xsys).xmodules)))
                    xmodules.write (((xtuple)).apply ((((unsupported)).apply ((xm)) ((xm)) ((((xmap)).apply ((((xsys).xmodules).x__getitem__)) ((xkeys)))) (((((xisinstance)).apply ((xm)) (((xweakref).xProxyTypes))).not)))))
                    (((unsupported)).apply ((((xiter_modules_and_files)).apply ((xmodules)) ((((xfrozenset)).apply ((x_error_files)))))))
            xiter_modules_and_files.write
              [xmodules xextra_files]
                memory > xpath
                memory > xresolved_path
                memory > xresults
                memory > xsys_file_paths
                memory > xorigin
                memory > xspec
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xsys_file_paths.write (((unsupported)).apply)
                    (((unsupported)).apply ((xmodule)) ((xmodules)))
                      seq
                        ((((xisinstance)).apply ((xmodule)) ((xModuleType))).not).if
                          (((unsupported)).apply)
                        (((unsupported)).apply (((xmodule).x__name__)) ((((unsupported)).apply ("__main__") ("__mp_main__")))).if
                          seq
                            (((xhasattr)).apply ((xmodule)) ("__file__")).if
                              bogusForceDataize.write ((((xsys_file_paths).xappend)).apply (((xmodule).x__file__)))
                            (((unsupported)).apply)
                        (((unsupported)).apply ((((xgetattr)).apply ((xmodule)) ("__spec__") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply)
                        xspec.write ((xmodule).x__spec__)
                        ((xspec).xhas_location).if
                          seq
                            xorigin.write ((((xisinstance)).apply (((xspec).xloader)) ((xzipimporter))).if (((xspec).xloader).xarchive) ((xspec).xorigin))
                            bogusForceDataize.write ((((xsys_file_paths).xappend)).apply ((xorigin)))
                    xresults.write (((xset)).apply)
                    (((unsupported)).apply ((xfilename)) (((((xitertools).xchain)).apply ((xsys_file_paths)) ((xextra_files)))))
                      seq
                        ((xfilename).not).if
                          (((unsupported)).apply)
                        xpath.write (((xPath)).apply ((xfilename)))
                        (((unsupported)).apply ((xValueError)))
                          (((((xpath).xexists)).apply).not).if
                            (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xlogger).xdebug)).apply ("\"%s\" raised when resolving path: \"%s\"") ((xe)) ((xpath)))
                            (((unsupported)).apply)
                        xresolved_path.write (((((((xpath).xresolve)).apply).xabsolute)).apply)
                        bogusForceDataize.write ((((xresults).xadd)).apply ((xresolved_path)))
                    (((unsupported)).apply ((((xfrozenset)).apply ((xresults)))))
            xcommon_roots.write
              [xpaths]
                memory > x_walk
                memory > xtree
                memory > xpath_parts
                memory > xnode
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xpath_parts.write (((unsupported)).apply ((xsorted)) ((((unsupported)).apply (((xx).xparts)) ((xx)) ((xpaths)))) ((xlen)) (TRUE))
                    xtree.write (((unsupported)).apply)
                    (((unsupported)).apply ((xchunks)) ((xpath_parts)))
                      seq
                        xnode.write (xtree)
                        (((unsupported)).apply ((xchunk)) ((xchunks)))
                          xnode.write ((((xnode).xsetdefault)).apply ((xchunk)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xnode).xclear)).apply)
                    x_walk.write
                      [xnode xpath]
                        seq > @
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xchild)))) (((((xnode).xitems)).apply)))
                              (((unsupported)).apply ((((x_walk)).apply ((xchild)) (((xpath).add (((unsupported)).apply ((xprefix))))))))
                            ((xnode).not).if
                              (((unsupported)).apply ((((xPath)).apply ((((unsupported)).apply ((xpath)))))))
                    (((unsupported)).apply ((((xtuple)).apply ((((x_walk)).apply ((xtree)) ((((unsupported)).apply)))))))
            xsys_path_directories.write
              []
                memory > xresolved_path
                memory > xpath
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xpath)) (((xsys).xpath)))
                      seq
                        xpath.write (((xPath)).apply ((xpath)))
                        (((((xpath).xexists)).apply).not).if
                          (((unsupported)).apply)
                        xresolved_path.write (((((((xpath).xresolve)).apply).xabsolute)).apply)
                        ((((xresolved_path).xis_file)).apply).if
                          (((unsupported)).apply (((xresolved_path).xparent)))
                          (((unsupported)).apply ((xresolved_path)))
            xget_child_arguments.write
              []
                memory > xexe_entrypoint
                memory > xscript_entrypoint
                memory > xpy_script
                memory > xspec
                memory > xargs
                memory > xname
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    xpy_script.write (((xPath)).apply ((((unsupported)).apply (((xsys).xargv)) (0))))
                    xargs.write ((((unsupported)).apply (((xsys).xexecutable))).add (((unsupported)).apply (("-W%s".mod (xo))) ((xo)) (((xsys).xwarnoptions))))
                    ((((xsys).ximplementation).xname).eq "cpython").if
                      bogusForceDataize.write ((((xargs).xextend)).apply ((((unsupported)).apply (((((unsupported)).apply ((xvalue)) (TRUE)).if "-X{key}" "-X{key}={value}")) ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xsys).x_xoptions).xitems)).apply)))))
                    (((unsupported)).apply ((((xgetattr)).apply ((x__main__)) ("__spec__") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).if
                      seq
                        xspec.write ((x__main__).x__spec__)
                        (((((xspec).xname).eq "__main__").or (((((xspec).xname).xendswith)).apply (".__main__"))).and ((xspec).xparent)).if
                          xname.write ((xspec).xparent)
                          xname.write ((xspec).xname)
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ("-m") ((xname)))))
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply (1))))))
                      (((((xpy_script).xexists)).apply).not).if
                        seq
                          xexe_entrypoint.write ((((xpy_script).xwith_suffix)).apply (".exe"))
                          ((((xexe_entrypoint).xexists)).apply).if
                            (((unsupported)).apply ((((unsupported)).apply ((xexe_entrypoint)) ((((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply (1))))))))))
                          xscript_entrypoint.write ((((xpy_script).xwith_name)).apply (("%s-script.py".mod ((xpy_script).xname))))
                          ((((xscript_entrypoint).xexists)).apply).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xargs)))) ((xscript_entrypoint)) ((((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply (1))))))))))
                          (((unsupported)).apply ((((xRuntimeError)).apply (("Script %s does not exist.".mod (xpy_script))))))
                        (((unsupported)).apply ((xargs)) (((xsys).xargv)))
                    (((unsupported)).apply ((xargs)))
            xtrigger_reload.write
              [xfilename]
                seq > @
                  seq
                    bogusForceDataize.write ((((xlogger).xinfo)).apply ("%s changed, reloading.") ((xfilename)))
                    bogusForceDataize.write ((((xsys).xexit)).apply (3))
            xrestart_with_reloader.write
              []
                memory > xnew_environ
                memory > xargs
                memory > xp
                seq > @
                  seq
                    xnew_environ.write (((unsupported)).apply (((xos).xenviron)) ((xDJANGO_AUTORELOAD_ENV)) ("true"))
                    xargs.write (((xget_child_arguments)).apply)
                    while.
                      TRUE
                      [unused]
                        seq > @
                          seq
                            xp.write (((unsupported)).apply (((xsubprocess).xrun)) ((xargs)) ((xnew_environ)) ((xfalse)))
                            (((xp).xreturncode).neq 3).if
                              (((unsupported)).apply (((xp).xreturncode)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xextra_files)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xdirectory_globs)) ((((xdefaultdict)).apply ((xset)))))
                        (((unsupported)).apply (((xself).x_stop_condition)) (((((xthreading).xEvent)).apply)))
                xwatch_dir.write
                  [xself xpath xglob]
                    seq > @
                      seq
                        xpath.write (((xPath)).apply ((xpath)))
                        (((unsupported)).apply ((xFileNotFoundError)))
                          xpath.write ((((xpath).xabsolute)).apply)
                          seq
                            (((unsupported)).apply (((xlogger).xdebug)) ("Unable to watch directory %s as it cannot be resolved.") ((xpath)) (TRUE))
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watching dir %s with glob %s.") ((xpath)) ((xglob)))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdirectory_globs)) ((xpath))).xadd)).apply ((xglob)))
                xwatched_files.write
                  [xself xinclude_globs]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xiter_all_python_module_files)).apply)))
                        (((unsupported)).apply (((xself).xextra_files)))
                        (xinclude_globs).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdirectory)) ((xpatterns)))) ((((((xself).xdirectory_globs).xitems)).apply)))
                            (((unsupported)).apply ((xpattern)) ((xpatterns)))
                              (((unsupported)).apply (((((xdirectory).xglob)).apply ((xpattern)))))
                xwait_for_apps_ready.write
                  [xself xapp_reg xdjango_main_thread]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xdjango_main_thread).xis_alive)).apply)))
                          (((unsupported)).apply ((((xapp_reg).xready_event).xwait)) (0.1)).if
                            (((unsupported)).apply (TRUE))
                          seq
                            bogusForceDataize.write ((((xlogger).xdebug)).apply ("Main Django thread has terminated before apps are ready."))
                            (((unsupported)).apply ((xfalse)))
                xrun.write
                  [xself xdjango_main_thread]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Waiting for apps ready_event."))
                        bogusForceDataize.write ((((xself).xwait_for_apps_ready)).apply ((xapps)) ((xdjango_main_thread)))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          unsupported
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Apps ready_event triggered. Sending autoreload_started signal."))
                        (((unsupported)).apply (((xautoreload_started).xsend)) ((xself)))
                        bogusForceDataize.write ((((xself).xrun_loop)).apply)
                xrun_loop.write
                  [xself]
                    memory > xticker
                    seq > @
                      seq
                        xticker.write ((((xself).xtick)).apply)
                        while.
                          (((xself).xshould_stop).not)
                          [unused]
                            seq > @
                              (((unsupported)).apply ((xStopIteration)))
                                bogusForceDataize.write (((xnext)).apply ((xticker)))
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xstop)).apply)
                xtick.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses must implement tick()."))))
                xcheck_availability.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses must implement check_availability()."))))
                xnotify_file_changed.write
                  [xself xpath]
                    memory > xresults
                    seq > @
                      seq
                        xresults.write (((unsupported)).apply (((xfile_changed).xsend)) ((xself)) ((xpath)))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("%s notified as changed. Signal results: %s.") ((xpath)) ((xresults)))
                        ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xres)) (1))) ((xres)) ((xresults))))).not).if
                          bogusForceDataize.write (((xtrigger_reload)).apply ((xpath)))
                xshould_stop.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).x_stop_condition).xis_set)).apply)))
                xstop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_stop_condition).xset)).apply)
            (((unsupported)).apply ((xBaseReloader)))
              seq
                xSLEEP_TIME.write 1
                xtick.write
                  [xself]
                    memory > xmtimes
                    memory > xold_time
                    seq > @
                      seq
                        xmtimes.write (((unsupported)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xfilepath)) ((xmtime)))) (((((xself).xsnapshot_files)).apply)))
                                  seq
                                    xold_time.write ((((xmtimes).xget)).apply ((xfilepath)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xmtimes)) ((xfilepath)))) ((xmtime)))
                                    (((unsupported)).apply ((xold_time)) ("None: is there a None literal in the EO language?")).if
                                      seq
                                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("File %s first seen with mtime %s") ((xfilepath)) ((xmtime)))
                                        (((unsupported)).apply)
                                      ((xmtime).greater (xold_time)).if
                                        seq
                                          bogusForceDataize.write ((((xlogger).xdebug)).apply ("File %s previous mtime: %s, current mtime: %s") ((xfilepath)) ((xold_time)) ((xmtime)))
                                          bogusForceDataize.write ((((xself).xnotify_file_changed)).apply ((xfilepath)))
                                bogusForceDataize.write ((((xtime).xsleep)).apply (((xself).xSLEEP_TIME)))
                                (((unsupported)).apply)
                xsnapshot_files.write
                  [xself]
                    memory > xseen_files
                    memory > xmtime
                    seq > @
                      seq
                        xseen_files.write (((xset)).apply)
                        (((unsupported)).apply ((xfile)) (((((xself).xwatched_files)).apply)))
                          seq
                            (((unsupported)).apply ((xfile)) ((xseen_files))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xOSError)))
                              xmtime.write (((((xfile).xstat)).apply).xst_mtime)
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xseen_files).xadd)).apply ((xfile)))
                            (((unsupported)).apply ((((unsupported)).apply ((xfile)) ((xmtime)))))
                xcheck_availability.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (TRUE))
            (((unsupported)).apply ((xRuntimeError)))
            (((unsupported)).apply ((xBaseReloader)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xroots)) ((((xdefaultdict)).apply ((xset)))))
                        (((unsupported)).apply (((xself).xprocessed_request)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xclient_timeout)) ((((xint)).apply ((((((xos).xenviron).xget)).apply ("DJANGO_WATCHMAN_TIMEOUT") (5))))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                xclient.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xpywatchman).xclient)) (((xself).xclient_timeout)))))
                x_watch_root.write
                  [xself xroot]
                    memory > xresult
                    seq > @
                      seq
                        (((((xroot).xexists)).apply).not).if
                          seq
                            ((((((xroot).xparent).xexists)).apply).not).if
                              seq
                                bogusForceDataize.write ((((xlogger).xwarning)).apply ("Unable to watch root dir %s as neither it or its parent exist.") ((xroot)))
                                (((unsupported)).apply)
                            xroot.write ((xroot).xparent)
                        xresult.write (((((xself).xclient).xquery)).apply ("watch-project") ((((xstr)).apply (((((xroot).xabsolute)).apply)))))
                        (((unsupported)).apply ("warning") ((xresult))).if
                          bogusForceDataize.write ((((xlogger).xwarning)).apply ("Watchman warning: %s") ((((unsupported)).apply ((xresult)) ("warning"))))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watchman watch-project result: %s") ((xresult)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xresult)) ("watch"))) (((((xresult).xget)).apply ("relative_path"))))))
                x_get_clock.write
                  [xself xroot]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((((xself).xclient).xquery)).apply ("clock") ((xroot)))) ("clock"))))
                x_subscribe.write
                  [xself xdirectory xname xexpression]
                    memory > xonly_files_expression
                    memory > xquery
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xroot)) ((xrel_path)))) (((((xself).x_watch_root)).apply ((xdirectory)))))
                        xonly_files_expression.write (((unsupported)).apply ("allof") ((((unsupported)).apply ("anyof") ((((unsupported)).apply ("type") ("f"))) ((((unsupported)).apply ("type") ("l"))))) ((xexpression)))
                        xquery.write (((unsupported)).apply ("expression") ((xonly_files_expression)) ("fields") ((((unsupported)).apply ("name"))) ("since") (((((xself).x_get_clock)).apply ((xroot)))) ("dedup_results") (TRUE))
                        (xrel_path).if
                          (((unsupported)).apply ((((unsupported)).apply ((xquery)) ("relative_root"))) ((xrel_path)))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Issuing watchman subscription %s, for root %s. Query: %s") ((xname)) ((xroot)) ((xquery)))
                        bogusForceDataize.write (((((xself).xclient).xquery)).apply ("subscribe") ((xroot)) ((xname)) ((xquery)))
                x_subscribe_dir.write
                  [xself xdirectory xfilenames]
                    memory > xprefix
                    memory > xexpression
                    seq > @
                      seq
                        (((((xdirectory).xexists)).apply).not).if
                          seq
                            ((((((xdirectory).xparent).xexists)).apply).not).if
                              seq
                                bogusForceDataize.write ((((xlogger).xwarning)).apply ("Unable to watch directory %s as neither it or its parent exist.") ((xdirectory)))
                                (((unsupported)).apply)
                            xprefix.write ("files-parent-%s".mod ((xdirectory).xname))
                            xfilenames.write (((unsupported)).apply (("%s/%s".mod (((unsupported)).apply (((xdirectory).xname)) ((xfilename))))) ((xfilename)) ((xfilenames)))
                            xdirectory.write ((xdirectory).xparent)
                            xexpression.write (((unsupported)).apply ("name") ((xfilenames)) ("wholename"))
                          seq
                            xprefix.write "files"
                            xexpression.write (((unsupported)).apply ("name") ((xfilenames)))
                        bogusForceDataize.write ((((xself).x_subscribe)).apply ((xdirectory)) (("%s:%s".mod (((unsupported)).apply ((xprefix)) ((xdirectory))))) ((xexpression)))
                x_watch_glob.write
                  [xself xdirectory xpatterns]
                    memory > xprefix
                    memory > xexpression
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xprefix.write "glob"
                        (((((xdirectory).xexists)).apply).not).if
                          seq
                            ((((((xdirectory).xparent).xexists)).apply).not).if
                              seq
                                bogusForceDataize.write ((((xlogger).xwarning)).apply ("Unable to watch directory %s as neither it or its parent exist.") ((xdirectory)))
                                (((unsupported)).apply)
                            xprefix.write ("glob-parent-%s".mod ((xdirectory).xname))
                            xpatterns.write (((unsupported)).apply (("%s/%s".mod (((unsupported)).apply (((xdirectory).xname)) ((xpattern))))) ((xpattern)) ((xpatterns)))
                            xdirectory.write ((xdirectory).xparent)
                        xexpression.write (((unsupported)).apply ("anyof"))
                        (((unsupported)).apply ((xpattern)) ((xpatterns)))
                          bogusForceDataize.write ((((xexpression).xappend)).apply ((((unsupported)).apply ("match") ((xpattern)) ("wholename"))))
                        bogusForceDataize.write ((((xself).x_subscribe)).apply ((xdirectory)) (("%s:%s".mod (((unsupported)).apply ((xprefix)) ((xdirectory))))) ((xexpression)))
                xwatched_roots.write
                  [xself xwatched_files]
                    memory > xextra_directories
                    memory > xsys_paths
                    memory > xwatched_file_dirs
                    seq > @
                      seq
                        xextra_directories.write (((((xself).xdirectory_globs).xkeys)).apply)
                        xwatched_file_dirs.write (((unsupported)).apply (((xf).xparent)) ((xf)) ((xwatched_files)))
                        xsys_paths.write (((xlist)).apply ((((xsys_path_directories)).apply)))
                        (((unsupported)).apply ((((xfrozenset)).apply ((((unsupported)).apply ((((unsupported)).apply ((xextra_directories)))) ((((unsupported)).apply ((xwatched_file_dirs)))) ((((unsupported)).apply ((xsys_paths)))))))))
                x_update_watches.write
                  [xself]
                    memory > xsorted_files
                    memory > xwatched_files
                    memory > xfound_roots
                    seq > @
                      seq
                        xwatched_files.write (((xlist)).apply ((((unsupported)).apply (((xself).xwatched_files)) ((xfalse)))))
                        xfound_roots.write (((xcommon_roots)).apply (((((xself).xwatched_roots)).apply ((xwatched_files)))))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watching %s files") ((((xlen)).apply ((xwatched_files)))))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Found common roots: %s") ((xfound_roots)))
                        (((unsupported)).apply ((xroot)) ((((xsorted)).apply ((xfound_roots)))))
                          bogusForceDataize.write ((((xself).x_watch_root)).apply ((xroot)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdirectory)) ((xpatterns)))) ((((((xself).xdirectory_globs).xitems)).apply)))
                          bogusForceDataize.write ((((xself).x_watch_glob)).apply ((xdirectory)) ((xpatterns)))
                        xsorted_files.write (((unsupported)).apply ((xsorted)) ((xwatched_files)) ((((unsupported)).apply (((xp).xparent)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdirectory)) ((xgroup)))) ((((unsupported)).apply (((xitertools).xgroupby)) ((xsorted_files)) ((((unsupported)).apply (((xp).xparent)))))))
                          bogusForceDataize.write ((((xself).x_subscribe_dir)).apply ((xdirectory)) ((((unsupported)).apply ((((xstr)).apply (((((xp).xrelative_to)).apply ((xdirectory)))))) ((xp)) ((xgroup)))))
                xupdate_watches.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xException)))
                        bogusForceDataize.write ((((xself).x_update_watches)).apply)
                        ((((xself).xcheck_server_status)).apply ((xex))).if
                          (((unsupported)).apply)
                x_check_subscription.write
                  [xself xsub]
                    memory > xroot_directory
                    memory > xsubscription
                    seq > @
                      seq
                        xsubscription.write (((((xself).xclient).xgetSubscription)).apply ((xsub)))
                        ((xsubscription).not).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watchman subscription %s has results.") ((xsub)))
                        (((unsupported)).apply ((xresult)) ((xsubscription)))
                          seq
                            xroot_directory.write (((xPath)).apply ((((unsupported)).apply (((((((unsupported)).apply ((xresult)) ("subscription")).xsplit)).apply (":") (1))) (1))))
                            bogusForceDataize.write ((((xlogger).xdebug)).apply ("Found root directory %s") ((xroot_directory)))
                            (((unsupported)).apply ((xfile)) (((((xresult).xget)).apply ("files") ((((unsupported)).apply)))))
                              bogusForceDataize.write ((((xself).xnotify_file_changed)).apply (((xroot_directory).div (xfile))))
                xrequest_processed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Request processed. Setting update_watches event."))
                        bogusForceDataize.write (((((xself).xprocessed_request).xset)).apply)
                xtick.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xrequest_finished).xconnect)).apply (((xself).xrequest_processed)))
                        bogusForceDataize.write ((((xself).xupdate_watches)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((((xself).xprocessed_request).xis_set)).apply).if
                                  seq
                                    bogusForceDataize.write ((((xself).xupdate_watches)).apply)
                                    bogusForceDataize.write (((((xself).xprocessed_request).xclear)).apply)
                                (((unsupported)).apply (((xpywatchman).xSocketTimeout)) (((xpywatchman).xWatchmanError)))
                                  bogusForceDataize.write (((((xself).xclient).xreceive)).apply)
                                  seq
                                    bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watchman error: %s, checking server status.") ((xex)))
                                    bogusForceDataize.write ((((xself).xcheck_server_status)).apply ((xex)))
                                  (((unsupported)).apply ((xsub)) ((((xlist)).apply (((((((xself).xclient).xsubs).xkeys)).apply)))))
                                    bogusForceDataize.write ((((xself).x_check_subscription)).apply ((xsub)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xclose)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xstop)).apply)
                xcheck_server_status.write
                  [xself xinner_ex]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write (((((xself).xclient).xquery)).apply ("version"))
                          (((unsupported)).apply ((((xWatchmanUnavailable)).apply ((((xstr)).apply ((xinner_ex)))))) ((xinner_ex)))
                        (((unsupported)).apply (TRUE))
                xcheck_availability.write
                  [xcls]
                    memory > xresult
                    memory > xclient
                    memory > xversion
                    seq > @
                      (((unsupported)).apply)
                        ((xpywatchman).not).if
                          (((unsupported)).apply ((((xWatchmanUnavailable)).apply ("pywatchman not installed."))))
                        xclient.write (((unsupported)).apply (((xpywatchman).xclient)) (0.1))
                        (((unsupported)).apply ((xException)))
                          xresult.write ((((xclient).xcapabilityCheck)).apply)
                          (((unsupported)).apply ((((xWatchmanUnavailable)).apply ("Cannot connect to the watchman service."))))
                        xversion.write (((xget_version_tuple)).apply ((((unsupported)).apply ((xresult)) ("version"))))
                        bogusForceDataize.write ((((xlogger).xdebug)).apply ("Watchman version %s") ((xversion)))
                        ((xversion).less (((unsupported)).apply (4) (9))).if
                          (((unsupported)).apply ((((xWatchmanUnavailable)).apply ("Watchman 4.9 or later is required."))))
            xget_reloader.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xWatchmanUnavailable)))
                      bogusForceDataize.write ((((xWatchmanReloader).xcheck_availability)).apply)
                      (((unsupported)).apply ((((xStatReloader)).apply)))
                    (((unsupported)).apply ((((xWatchmanReloader)).apply)))
            xstart_django.write
              [xreloader xmain_func]
                memory > xdjango_main_thread
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write (((xensure_echo_on)).apply)
                    xmain_func.write (((xcheck_errors)).apply ((xmain_func)))
                    xdjango_main_thread.write (((unsupported)).apply (((xthreading).xThread)) ((xmain_func)) ((xargs)) ((xkwargs)) ("django-main-thread"))
                    (((unsupported)).apply (((xdjango_main_thread).xdaemon)) (TRUE))
                    bogusForceDataize.write ((((xdjango_main_thread).xstart)).apply)
                    while.
                      (((xreloader).xshould_stop).not)
                      [unused]
                        seq > @
                          (((unsupported)).apply ((xWatchmanUnavailable)))
                            bogusForceDataize.write ((((xreloader).xrun)).apply ((xdjango_main_thread)))
                            seq
                              xreloader.write (((xStatReloader)).apply)
                              bogusForceDataize.write ((((xlogger).xerror)).apply ("Error connecting to Watchman: %s") ((xex)))
                              bogusForceDataize.write ((((xlogger).xinfo)).apply ("Watching for file changes with %s") ((((xreloader).x__class__).x__name__)))
            xrun_with_reloader.write
              [xmain_func]
                memory > xexit_code
                memory > xreloader
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGTERM)) ((((unsupported)).apply (((((xsys).xexit)).apply (0))))))
                    (((unsupported)).apply ((xKeyboardInterrupt)))
                      ((((((xos).xenviron).xget)).apply ((xDJANGO_AUTORELOAD_ENV))).eq "true").if
                        seq
                          xreloader.write (((xget_reloader)).apply)
                          bogusForceDataize.write ((((xlogger).xinfo)).apply ("Watching for file changes with %s") ((((xreloader).x__class__).x__name__)))
                          bogusForceDataize.write (((xstart_django)).apply ((xreloader)) ((xmain_func)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        seq
                          xexit_code.write (((xrestart_with_reloader)).apply)
                          bogusForceDataize.write ((((xsys).xexit)).apply ((xexit_code)))