memory > xwarnings
memory > xvalue
memory > xi1
memory > xfloat
memory > xcm
memory > xstatement
memory > xImportError
memory > xcomplex
memory > xassign
memory > xAttributeError
memory > xpickle
memory > xlist
memory > xVisitor
memory > xtm
memory > xz
memory > xValueError
memory > xo
memory > xfrozenset
memory > xstr
memory > xstatements
memory > xt
memory > xexec
memory > xwlog
memory > xS
memory > xrange
memory > xdis
memory > xt2
memory > xsubfloat
memory > xlevel
memory > xoutput
memory > xopen
memory > xdedent
memory > xkind
memory > xprint
memory > xtype
memory > xunicodedata
memory > xf
memory > xw
memory > xrepr
memory > xint
memory > xException
memory > xX
memory > xhasattr
memory > xcPickle
memory > xx
memory > xi
memory > xcompile
memory > xsuper
memory > xs
memory > xsupport
memory > xsys
memory > xi2
memory > xmodule
memory > xt3
memory > xN2
memory > xissubclass
memory > xtuple
memory > xargs
memory > xobj
memory > xos
memory > xsubcomplex
memory > xweakref
memory > xchild
memory > xitem
memory > xgetattr
memory > xv
memory > xprotocol
memory > xSyntaxError
memory > xsnippet
memory > xPendingDeprecationWarning
memory > xinput
memory > xe
memory > xsubint
memory > xSystemExit
memory > xname
memory > xzip
memory > xunittest
memory > xy
memory > xnext
memory > xmap
memory > xconstant
memory > xast
memory > xkwargs
memory > xinstr
memory > xN
memory > xisinstance
memory > xim
memory > xconst
memory > xlen
memory > xdict
memory > xfp
memory > xEllipsis
memory > xTypeError
memory > xt1
memory > x__name__
[] > test_ast
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_binop
        memory > xtest_importfrom
        memory > x_check_content
        memory > xtest_source_segment_padded
        memory > xtest_yield_await
        memory > xtest_issue39579_dotted_name_end_col_offset
        memory > xtest_for
        memory > xexec_results
        memory > x_simple_comp
        memory > xtest_stdlib_validates
        memory > xtest_subclasses
        memory > xtest_nodeclasses
        memory > xtest_get_docstring_none
        memory > xtest_fstring_multi_line
        memory > xtest_literal_eval_malformed_dict_nodes
        memory > xtest_attribute_spaces
        memory > xtest_from_import
        memory > xtest_nonlocal
        memory > xtest_class_kw
        memory > x_check_end_pos
        memory > xtest_literal_eval
        memory > xcompile_constant
        memory > xtest_tuple
        memory > x_parse_value
        memory > xtest_dump
        memory > xtest_issue40614_feature_version
        memory > xtest_elif_stmt_start_position
        memory > xtest_listcomp
        memory > xtest_expr
        memory > xtest_redundant_parenthesis
        memory > xtest_load_const
        memory > xtest_import
        memory > xtest_no_fields
        memory > xtest_assign_to_constant
        memory > xtest_comprehensions
        memory > xtest_invalid_identitifer
        memory > xtest_source_segment_tabs
        memory > xtest_global
        memory > xexpr
        memory > xtest_if
        memory > xtest_starred_expr_end_position_within_call
        memory > xtest_singletons
        memory > xtest_iter_child_nodes
        memory > xtest_parse
        memory > xtest_attribute
        memory > xtest_tuples
        memory > xtest_empty_yield_from
        memory > xsingle_results
        memory > xtest_field_attr_existence
        memory > xtest_isinstance
        memory > xtest_nameconstant
        memory > xeval_tests
        memory > xexec_tests
        memory > xtest_constant_as_name
        memory > xtest_copy_location
        memory > xtest_elif_stmt_start_position_with_else
        memory > xtest_call_noargs
        memory > x_check_arguments
        memory > xtest_invalid_sum
        memory > xtest_literal_eval_complex
        memory > xtest_pickling
        memory > xtest_parse_in_error
        memory > xmain
        memory > xtest_dictcomp
        memory > xtest_realtype
        memory > xtest_issue31592
        memory > xtest_assign
        memory > xtest_generatorexp
        memory > xtest_delete
        memory > xtest_issue18374_binop_col_offset
        memory > xtest_base_classes
        memory > xtest_iter_fields
        memory > xtest_module
        memory > xtest_dump_incomplete
        memory > xtest_bad_integer
        memory > xtest_lambda
        memory > xtest_num
        memory > xtest_fix_missing_locations
        memory > xtest_assert
        memory > xstmt
        memory > xtest_displays
        memory > xto_tuple
        memory > xtest_snippets
        memory > xtest_subscript
        memory > xtest_classdef
        memory > xtest_classattrs
        memory > xsingle_tests
        memory > xtest_level_as_none
        memory > xtest_old_constant_nodes
        memory > x_assertTrueorder
        memory > xtest_funcdef
        memory > xmaxDiff
        memory > xtest_string_kind
        memory > xtest_setcomp
        memory > xtest_yield
        memory > xtest_non_interned_future_from_ast
        memory > xtest_import_from_multi_line
        memory > xtest_unaryop
        memory > xtest_compare
        memory > xtest_func_def
        memory > xtest_augassign
        memory > xtest_dict
        memory > xtest_raise
        memory > xtest_increment_lineno
        memory > xtest_get_docstring
        memory > xtest_source_segment_endings
        memory > xmod
        memory > xtest_slices
        memory > xtest_with
        memory > xtest_multi_line_docstring_col_offset_and_lineno_issue16806
        memory > xtest_fstring
        memory > x_check_comprehension
        memory > xtest_class_def
        memory > xtest_starred
        memory > xtest_suites
        memory > xtest_continued_str
        memory > x_sequence
        memory > xtest_values
        memory > xtest_while
        memory > xtest_field_attr_writable
        memory > xtest_source_segment_multi
        memory > xtest_boolop
        memory > xtest_arguments
        memory > xtest_validation
        memory > xget_load_const
        memory > xeval_results
        memory > xtest_try
        memory > xtest_AST_objects
        memory > xtest_trailers_with_redundant_parenthesis
        memory > xtest_ifexp
        memory > xtest_call
        memory > xtest_AST_garbage_collection
        memory > xtest_multi_line_str
        memory > xtest_ast_validation
        memory > xtest_set
        memory > xtest_list
        memory > xtest_slice
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xto_tuple.write
              [xt]
                memory > xresult
                seq > @
                  seq
                    ((((unsupported)).apply ((xt)) ("None: is there a None literal in the EO language?")).or (((xisinstance)).apply ((xt)) ((((unsupported)).apply ((xstr)) ((xint)) ((xcomplex)))))).if
                      (((unsupported)).apply ((xt)))
                      (((xisinstance)).apply ((xt)) ((xlist))).if
                        (((unsupported)).apply ((((unsupported)).apply ((((xto_tuple)).apply ((xe)))) ((xe)) ((xt)))))
                    xresult.write (((unsupported)).apply ((((xt).x__class__).x__name__)))
                    ((((xhasattr)).apply ((xt)) ("lineno")).and (((xhasattr)).apply ((xt)) ("col_offset"))).if
                      bogusForceDataize.write ((((xresult).xappend)).apply ((((unsupported)).apply (((xt).xlineno)) (((xt).xcol_offset)))))
                    (((unsupported)).apply (((xt).x_fields)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((xtuple)).apply ((xresult)))))
                    (((unsupported)).apply ((xf)) (((xt).x_fields)))
                      bogusForceDataize.write ((((xresult).xappend)).apply ((((xto_tuple)).apply ((((xgetattr)).apply ((xt)) ((xf)))))))
                    (((unsupported)).apply ((((xtuple)).apply ((xresult)))))
            xexec_tests.write (((unsupported)).apply ("None") ("'module docstring'") ("def f(): pass") ("def f(): 'function docstring'") ("def f(a): pass") ("def f(a=0): pass") ("def f(*args): pass") ("def f(**kwargs): pass") ("def f(a, b=1, c=None, d=[], e={}, *args, f=42, **kwargs): 'doc for f()'") ("class C:pass") ("class C: 'docstring for class C'") ("class C(object): pass") ("def f():return 1") ("del v") ("v = 1") ("a,b = c") ("(a,b) = c") ("[a,b] = c") ("v += 1") ("for v in v:pass") ("while v:pass") ("if v:pass") ("if a:n  passnelif b:n  pass") ("if a:n  passnelif b:n  passnelse:n  pass") ("with x as y: pass") ("with x as y, z as q: pass") ("raise Exception('string')") ("try:n  passnexcept Exception:n  pass") ("try:n  passnfinally:n  pass") ("assert v") ("import sys") ("from sys import v") ("global v") ("1") ("pass") ("for v in v:break") ("for v in v:continue") ("for a,b in c: pass") ("for (a,b) in c: pass") ("for [a,b] in c: pass") ((((unsupported)).apply)) ("{a : b for w in x for m in p if g}") ("{a : b for v,w in x}") ("{r for l in x if g}") ("{r for l,m in x}") ("async def f():n 'async function'n await something()") ("async def f():n async for e in i: 1n else: 2") ("async def f():n async with a as b: 1") ("{**{1:2}, 2:3}") ("{*{1, 2}, 3}") ("async def f():n [i async for b in c]") ("@deco1n@deco2()n@deco3(1)ndef f(): pass") ("@deco1n@deco2()n@deco3(1)nasync def f(): pass") ("@deco1n@deco2()n@deco3(1)nclass C: pass") ("@deco(a for a in b)ndef f(): pass") ("@a.b.cndef f(): pass") ("(a := 1)") ("def f(a, /,): pass") ("def f(a, /, c, d, e): pass") ("def f(a, /, c, *, d, e): pass") ("def f(a, /, c, *, d, e, **kwargs): pass") ("def f(a=1, /,): pass") ("def f(a=1, /, b=2, c=4): pass") ("def f(a=1, /, b=2, *, c=4): pass") ("def f(a=1, /, b=2, *, c): pass") ("def f(a=1, /, b=2, *, c=4, **kwargs): pass") ("def f(a=1, /, b=2, *, c, **kwargs): pass"))
            xsingle_tests.write (((unsupported)).apply ("1+2"))
            xeval_tests.write (((unsupported)).apply ("None") ("a and b") ("a + b") ("not v") ("lambda:None") ("{ 1:2 }") ("{}") ("{None,}") ((((unsupported)).apply)) ("[a for b in c if d]") ("(a for b in c if d)") ("[(a,b) for a,b in c]") ("[(a,b) for (a,b) in c]") ("[(a,b) for [a,b] in c]") ("{(a,b) for a,b in c}") ("{(a,b) for (a,b) in c}") ("{(a,b) for [a,b] in c}") ("((a,b) for a,b in c)") ("((a,b) for (a,b) in c)") ("((a,b) for [a,b] in c)") ("1 < 2 < 3") ("f(1,2,c=3,*d,**e)") ("f(*[0, 1])") ("f(a for a in b)") ("10") ("'string'") ("a.b") ("a[b:c]") ("v") ("[1,2,3]") ("[]") ("1,2,3") ("(1,2,3)") ("()") ("a.b.c.d(a.b[1:2])"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_assertTrueorder.write
                  [xself xast_node xparent_pos]
                    memory > xvalue
                    memory > xfirst_pos
                    memory > xnode_pos
                    seq > @
                      seq
                        (((((xisinstance)).apply ((xast_node)) (((xast).xAST))).not).or (((unsupported)).apply (((xast_node).x_fields)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply)
                        (((xisinstance)).apply ((xast_node)) ((((unsupported)).apply (((xast).xexpr)) (((xast).xstmt)) (((xast).xexcepthandler))))).if
                          seq
                            xnode_pos.write (((unsupported)).apply (((xast_node).xlineno)) (((xast_node).xcol_offset)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xnode_pos)) ((xparent_pos)))
                            xparent_pos.write (((unsupported)).apply (((xast_node).xlineno)) (((xast_node).xcol_offset)))
                        (((unsupported)).apply ((xname)) (((xast_node).x_fields)))
                          seq
                            xvalue.write (((xgetattr)).apply ((xast_node)) ((xname)))
                            (((xisinstance)).apply ((xvalue)) ((xlist))).if
                              seq
                                xfirst_pos.write (xparent_pos)
                                ((xvalue).and ((xname).eq "decorator_list")).if
                                  xfirst_pos.write (((unsupported)).apply (((((unsupported)).apply ((xvalue)) (0)).xlineno)) (((((unsupported)).apply ((xvalue)) (0)).xcol_offset)))
                                (((unsupported)).apply ((xchild)) ((xvalue)))
                                  bogusForceDataize.write ((((xself).x_assertTrueorder)).apply ((xchild)) ((xfirst_pos)))
                              (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xself).x_assertTrueorder)).apply ((xvalue)) ((xparent_pos)))
                xtest_AST_objects.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xast).xAST)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xx).xfoobar)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfoobar)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xx).x__dict__)) ("foobar"))) (42))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xast).xAST)).apply (2))
                xtest_AST_garbage_collection.write
                  [xself]
                    memory > xref
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write ((((xast).xAST)).apply)
                        (((unsupported)).apply (((xa).xx)) ((((xX)).apply)))
                        (((unsupported)).apply ((((xa).xx).xa)) ((xa)))
                        xref.write ((((xweakref).xref)).apply (((xa).xx)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)))))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref)).apply)))
                xtest_snippets.write
                  [xself]
                    memory > xast_tree
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xinput)) ((xoutput)) ((xkind)))) ((((unsupported)).apply ((((unsupported)).apply ((xexec_tests)) ((xexec_results)) ("exec"))) ((((unsupported)).apply ((xsingle_tests)) ((xsingle_results)) ("single"))) ((((unsupported)).apply ((xeval_tests)) ((xeval_results)) ("eval"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xo)))) ((((xzip)).apply ((xinput)) ((xoutput)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ("parsing") ((xi)))))
                              seq
                                xast_tree.write (((xcompile)).apply ((xi)) ("?") ((xkind)) (((xast).xPyCF_ONLY_AST)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xto_tuple)).apply ((xast_tree)))) ((xo)))
                                bogusForceDataize.write ((((xself).x_assertTrueorder)).apply ((xast_tree)) ((((unsupported)).apply (0) (0))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ("compiling") ((xi)) ((xkind)))))
                              bogusForceDataize.write (((xcompile)).apply ((xast_tree)) ("?") ((xkind)))
                xtest_ast_validation.write
                  [xself]
                    memory > xsnippets_to_validate
                    memory > xtree
                    seq > @
                      seq
                        xsnippets_to_validate.write (((xexec_tests).add (xsingle_tests)).add (xeval_tests))
                        (((unsupported)).apply ((xsnippet)) ((xsnippets_to_validate)))
                          seq
                            xtree.write ((((xast).xparse)).apply ((xsnippet)))
                            bogusForceDataize.write (((xcompile)).apply ((xtree)) ("<string>") ("exec"))
                xtest_slice.write
                  [xself]
                    memory > xslc
                    seq > @
                      seq
                        xslc.write (((((unsupported)).apply ((((((xast).xparse)).apply ("x[::]")).xbody)) (0)).xvalue).xslice)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xslc).xupper)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xslc).xlower)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xslc).xstep)))
                xtest_from_import.write
                  [xself]
                    memory > xim
                    seq > @
                      seq
                        xim.write (((unsupported)).apply ((((((xast).xparse)).apply ("from . import y")).xbody)) (0))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xim).xmodule)))
                xtest_non_interned_future_from_ast.write
                  [xself]
                    memory > xmod
                    seq > @
                      seq
                        xmod.write ((((xast).xparse)).apply ("from __future__ import division"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xmod).xbody)) (0))) (((xast).xImportFrom)))
                        (((unsupported)).apply (((((unsupported)).apply (((xmod).xbody)) (0)).xmodule)) ((((" __future__ ".xstrip)).apply)))
                        bogusForceDataize.write (((xcompile)).apply ((xmod)) ("<test>") ("exec"))
                xtest_base_classes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xFor)) (((xast).xstmt)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xName)) (((xast).xexpr)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xstmt)) (((xast).xAST)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xexpr)) (((xast).xAST)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xcomprehension)) (((xast).xAST)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xast).xGt)) (((xast).xAST)))))
                xtest_field_attr_existence.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xitem)))) ((((((xast).x__dict__).xitems)).apply)))
                        (((((xisinstance)).apply ((xitem)) ((xtype))).and ((xname).neq "AST")).and ((((((unsupported)).apply ((xname)) (0)).xisupper)).apply)).if
                          seq
                            xx.write (((xitem)).apply)
                            (((xisinstance)).apply ((xx)) (((xast).xAST))).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xx).x_fields)))) ((xtuple)))
                xtest_arguments.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xast).xarguments)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply ("posonlyargs") ("args") ("vararg") ("kwonlyargs") ("kw_defaults") ("kwarg") ("defaults"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        xx.write ((((xast).xarguments)).apply ((((unsupported)).apply ((((xrange)).apply (1) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xvararg)) (3))
                xtest_field_attr_writable.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xast).xNum)).apply)
                        (((unsupported)).apply (((xx).x_fields)) (666))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) (666))
                xtest_classattrs.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xast).xNum)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply ("value") ("kind"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        xx.write ((((xast).xNum)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xvalue)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xn)) (42))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        xx.write (((unsupported)).apply (((xast).xNum)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xlineno)) (2))
                        xx.write (((unsupported)).apply (((xast).xNum)) (42) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xlineno)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply ("value") ("kind"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xvalue)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xn)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xast).xNum)) (1) ("None: is there a None literal in the EO language?") (2))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xast).xNum)) (1) ("None: is there a None literal in the EO language?") (2) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xast).xConstant)) (1) ("bar")).xfoo)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xast).xNum)) (1) ("bar")).xfoo)) ("bar"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Num got multiple values for argument 'n'"))))
                          (((unsupported)).apply (((xast).xNum)) (1) (2))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Constant got multiple values for argument 'value'"))))
                          (((unsupported)).apply (((xast).xConstant)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xNum)).apply (42)).xn)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xNum)).apply (4.25)).xn)) (4.25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xNum)).apply ((((unsupported)).apply))).xn)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xStr)).apply ("42")).xs)) ("42"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xBytes)).apply ("42")).xs)) ("42"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xNameConstant)).apply (TRUE)).xvalue)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xNameConstant)).apply (FALSE)).xvalue)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xNameConstant)).apply ("None: is there a None literal in the EO language?")).xvalue)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xConstant)).apply (42)).xvalue)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xConstant)).apply (4.25)).xvalue)) (4.25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xConstant)).apply ((((unsupported)).apply))).xvalue)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xConstant)).apply ("42")).xvalue)) ("42"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xConstant)).apply ("42")).xvalue)) ("42"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xConstant)).apply (TRUE)).xvalue)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xConstant)).apply (FALSE)).xvalue)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xConstant)).apply ("None: is there a None literal in the EO language?")).xvalue)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xast).xConstant)).apply ((((unsupported)).apply))).xvalue)) ((((unsupported)).apply)))
                xtest_realtype.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNum)).apply (42))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNum)).apply (4.25))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNum)).apply ((((unsupported)).apply)))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xStr)).apply ("42"))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xBytes)).apply ("42"))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNameConstant)).apply (TRUE))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNameConstant)).apply (FALSE))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xNameConstant)).apply ("None: is there a None literal in the EO language?"))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xast).xEllipsis)).apply)))) (((xast).xConstant)))
                xtest_isinstance.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (42))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (4.2))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNum)).apply ((((unsupported)).apply)))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xStr)).apply ("42"))) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xBytes)).apply ("42"))) (((xast).xBytes)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNameConstant)).apply (TRUE))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNameConstant)).apply (FALSE))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xNameConstant)).apply ("None: is there a None literal in the EO language?"))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xEllipsis)).apply)) (((xast).xEllipsis)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (42))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (4.2))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ((((unsupported)).apply)))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ("42"))) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ("42"))) (((xast).xBytes)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (TRUE))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (FALSE))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ("None: is there a None literal in the EO language?"))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ((((unsupported)).apply)))) (((xast).xEllipsis)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xStr)).apply ("42"))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (42))) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xStr)).apply ("42"))) (((xast).xBytes)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (42))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (42))) (((xast).xEllipsis)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNameConstant)).apply (TRUE))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNameConstant)).apply (FALSE))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ("42"))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (42))) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ("42"))) (((xast).xBytes)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (42))) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (42))) (((xast).xEllipsis)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (TRUE))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply (FALSE))) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply)) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply)) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply)) (((xast).xBytes)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply)) (((xast).xNameConstant)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply)) (((xast).xEllipsis)))))
                        (((unsupported)).apply ((xstr)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ((((xS)).apply ("42"))))) (((xast).xStr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xConstant)).apply ((((xS)).apply ("42"))))) (((xast).xNum)))))
                xtest_subclasses.write
                  [xself]
                    memory > xn
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xast).xNum)))
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                  (((unsupported)).apply (((xself).xz)) ("spam"))
                        (((unsupported)).apply (((xast).xNum)))
                        xn.write (((xN)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn).xn)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn).xz)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xn)))) ((xN)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((xn)) ((xN)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((xn)) (((xast).xNum)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply ((xn)) ((xN2)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xisinstance)).apply (((((xast).xNum)).apply (42))) ((xN)))))
                        xn.write (((unsupported)).apply ((xN)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn).xn)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xn)))) ((xN)))
                xtest_module.write
                  [xself]
                    memory > xx
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (((unsupported)).apply (((((xast).xNum)).apply (42))))
                        xx.write ((((xast).xModule)).apply ((xbody)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xbody)) ((xbody)))
                xtest_nodeclasses.write
                  [xself]
                    memory > xn1
                    memory > xx
                    memory > xaddop
                    memory > xn3
                    seq > @
                      seq
                        xx.write ((((xast).xBinOp)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply ("left") ("op") ("right"))))
                        (((unsupported)).apply (((xx).xfoobarbaz)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfoobarbaz)) (5))
                        xn1.write ((((xast).xNum)).apply (1))
                        xn3.write ((((xast).xNum)).apply (3))
                        xaddop.write ((((xast).xAdd)).apply)
                        xx.write ((((xast).xBinOp)).apply ((xn1)) ((xaddop)) ((xn3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xleft)) ((xn1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xop)) ((xaddop)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xright)) ((xn3)))
                        xx.write ((((xast).xBinOp)).apply (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xleft)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xop)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xright)) (3))
                        xx.write (((unsupported)).apply (((xast).xBinOp)) (1) (2) (3) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xleft)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xop)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xright)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xlineno)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xast).xBinOp)) (1) (2) (3) (4))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xast).xBinOp)) (1) (2) (3) (4) (0))
                        xx.write (((unsupported)).apply (((xast).xBinOp)) (1) (2) (3) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xleft)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xop)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xright)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xlineno)) (0))
                        xx.write (((unsupported)).apply (((xast).xBinOp)) (1) (2) (3) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfoobarbaz)) (42))
                xtest_no_fields.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write ((((xast).xSub)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x_fields)) ((((unsupported)).apply)))
                xtest_pickling.write
                  [xself]
                    memory > xast2
                    memory > xmods
                    memory > xprotocols
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmods.write (((unsupported)).apply ((xpickle)))
                        (((unsupported)).apply ((xImportError)))
                          seq
                            (((unsupported)).apply)
                            bogusForceDataize.write ((((xmods).xappend)).apply ((xcPickle)))
                        xprotocols.write (((unsupported)).apply (0) (1) (2))
                        (((unsupported)).apply ((xmod)) ((xmods)))
                          (((unsupported)).apply ((xprotocol)) ((xprotocols)))
                            (((unsupported)).apply ((xast)) ((((unsupported)).apply ((((xcompile)).apply ((xi)) ("?") ("exec") (1024))) ((xi)) ((xexec_tests)))))
                              seq
                                xast2.write ((((xmod).xloads)).apply (((((xmod).xdumps)).apply ((xast)) ((xprotocol)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xto_tuple)).apply ((xast2)))) ((((xto_tuple)).apply ((xast)))))
                xtest_invalid_sum.write
                  [xself]
                    memory > xpos
                    memory > xm
                    seq > @
                      seq
                        xpos.write (((unsupported)).apply ((xdict)) (2) (3))
                        xm.write ((((xast).xModule)).apply ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xexpr)).apply ((((unsupported)).apply ((xpos)))))) ((((unsupported)).apply ((xpos)))))))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)).apply ((xm)) ("<test>") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("but got <_ast.expr") ((((xstr)).apply (((xcm).xexception)))))
                xtest_invalid_identitifer.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xast).xModule)).apply ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply (42) (((((xast).xLoad)).apply)))))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xast).xfix_missing_locations)).apply ((xm)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)).apply ((xm)) ("<test>") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("identifier must be of type str") ((((xstr)).apply (((xcm).xexception)))))
                xtest_empty_yield_from.write
                  [xself]
                    memory > xempty_yield_from
                    seq > @
                      seq
                        xempty_yield_from.write ((((xast).xparse)).apply ("def f():n yield from g()"))
                        (((unsupported)).apply ((((((unsupported)).apply (((((unsupported)).apply (((xempty_yield_from).xbody)) (0)).xbody)) (0)).xvalue).xvalue)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)).apply ((xempty_yield_from)) ("<test>") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("field value is required") ((((xstr)).apply (((xcm).xexception)))))
                xtest_issue31592.write
                  [xself]
                    memory > xbad_normalize
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xbad_normalize.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xunicodedata)) ("normalize") ((xbad_normalize)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xast).xparse)) ("u03D5"))
                xtest_issue18374_binop_col_offset.write
                  [xself]
                    memory > xchild_binop
                    memory > xgrandchild_binop
                    memory > xtree
                    memory > xparent_binop
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("4+5+6+7"))
                        xparent_binop.write ((((unsupported)).apply (((xtree).xbody)) (0)).xvalue)
                        xchild_binop.write ((xparent_binop).xleft)
                        xgrandchild_binop.write ((xchild_binop).xleft)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xend_col_offset)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xend_col_offset)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xend_col_offset)) (3))
                        xtree.write ((((xast).xparse)).apply ((((unsupported)).apply)))
                        xparent_binop.write ((((unsupported)).apply (((xtree).xbody)) (0)).xvalue)
                        xchild_binop.write ((xparent_binop).xleft)
                        xgrandchild_binop.write ((xchild_binop).xleft)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xend_col_offset)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent_binop).xend_lineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xend_col_offset)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xchild_binop).xend_lineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xend_col_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgrandchild_binop).xend_lineno)) (1))
                xtest_issue39579_dotted_name_end_col_offset.write
                  [xself]
                    memory > xattr_b
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("@a.b.cndef f(): pass"))
                        xattr_b.write ((((unsupported)).apply (((((unsupported)).apply (((xtree).xbody)) (0)).xdecorator_list)) (0)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xattr_b).xend_col_offset)) (4))
                xtest_issue40614_feature_version.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xast).xparse)) ("f\"{x=}\"") ((((unsupported)).apply (3) (8))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                          (((unsupported)).apply (((xast).xparse)) ("f\"{x=}\"") ((((unsupported)).apply (3) (7))))
                xtest_constant_as_name.write
                  [xself]
                    memory > xexpr
                    seq > @
                      (((unsupported)).apply ((xconstant)) ((((unsupported)).apply ("True") ("False") ("None"))))
                        seq
                          xexpr.write ((((xast).xExpression)).apply (((((xast).xName)).apply ((xconstant)) (((((xast).xLoad)).apply)))))
                          bogusForceDataize.write ((((xast).xfix_missing_locations)).apply ((xexpr)))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Name node can't be used with '{constant}' constant"))))
                            bogusForceDataize.write (((xcompile)).apply ((xexpr)) ("<test>") ("eval"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_parse.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xast).xparse)).apply ("foo(1 + 1)"))
                        xb.write (((xcompile)).apply ("foo(1 + 1)") ("<unknown>") ("exec") (((xast).xPyCF_ONLY_AST)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((xa)))) (((((xast).xdump)).apply ((xb)))))
                xtest_parse_in_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xException)))
                        unsupported
                        seq
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))) ((xe)))
                            bogusForceDataize.write ((((xast).xliteral_eval)).apply ("'U'"))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xe).xexception).x__context__)))
                xtest_dump.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("spam(eggs, \"and cheese\")"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((xnode)))) ("Module(body=[Expr(value=Call(func=Name(id='spam', ctx=Load()), args=[Name(id='eggs', ctx=Load()), Constant(value='and cheese', kind=None)], keywords=[]))], type_ignores=[])"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (FALSE))) ("Module([Expr(Call(Name('spam', Load()), [Name('eggs', Load()), Constant('and cheese', None)], []))], [])"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (TRUE))) ("Module(body=[Expr(value=Call(func=Name(id='spam', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=4), args=[Name(id='eggs', ctx=Load(), lineno=1, col_offset=5, end_lineno=1, end_col_offset=9), Constant(value='and cheese', kind=None, lineno=1, col_offset=11, end_lineno=1, end_col_offset=23)], keywords=[], lineno=1, col_offset=0, end_lineno=1, end_col_offset=24), lineno=1, col_offset=0, end_lineno=1, end_col_offset=24)], type_ignores=[])"))
                xtest_dump_incomplete.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((unsupported)).apply (((xast).xRaise)) (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((xnode)))) ("Raise()"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (TRUE))) ("Raise(lineno=3, col_offset=4)"))
                        xnode.write (((unsupported)).apply (((xast).xRaise)) ((((unsupported)).apply (((xast).xName)) ("e") (((((xast).xLoad)).apply)))) (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((xnode)))) ("Raise(exc=Name(id='e', ctx=Load()))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (FALSE))) ("Raise(Name('e', Load()))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (TRUE))) ("Raise(exc=Name(id='e', ctx=Load()), lineno=3, col_offset=4)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (FALSE) (TRUE))) ("Raise(Name('e', Load()), lineno=3, col_offset=4)"))
                        xnode.write (((unsupported)).apply (((xast).xRaise)) ((((unsupported)).apply (((xast).xName)) ("e") (((((xast).xLoad)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((xnode)))) ("Raise(cause=Name(id='e', ctx=Load()))"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xnode)) (FALSE))) ("Raise(cause=Name('e', Load()))"))
                xtest_copy_location.write
                  [xself]
                    memory > xsrc
                    memory > xnew
                    seq > @
                      seq
                        xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
                        (((unsupported)).apply ((((xsrc).xbody).xright)) (((((xast).xcopy_location)).apply (((((xast).xNum)).apply (2))) ((((xsrc).xbody).xright)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xsrc)) (TRUE))) ("Expression(body=BinOp(left=Constant(value=1, kind=None, lineno=1, col_offset=0, end_lineno=1, end_col_offset=1), op=Add(), right=Constant(value=2, lineno=1, col_offset=4, end_lineno=1, end_col_offset=5), lineno=1, col_offset=0, end_lineno=1, end_col_offset=5))"))
                        xsrc.write (((unsupported)).apply (((xast).xCall)) (1) (1) (1) (1))
                        xnew.write ((((xast).xcopy_location)).apply ((xsrc)) ((((unsupported)).apply (((xast).xCall)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xnew).xend_lineno)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xnew).xend_col_offset)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew).xcol_offset)) (1))
                xtest_fix_missing_locations.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write ((((xast).xparse)).apply ("write(\"spam\")"))
                        bogusForceDataize.write (((((xsrc).xbody).xappend)).apply (((((xast).xExpr)).apply (((((xast).xCall)).apply (((((xast).xName)).apply ("spam") (((((xast).xLoad)).apply)))) ((((unsupported)).apply (((((xast).xStr)).apply ("eggs"))))) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsrc)) (((((xast).xfix_missing_locations)).apply ((xsrc)))))
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xsrc)) (TRUE))) ("Module(body=[Expr(value=Call(func=Name(id='write', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=5), args=[Constant(value='spam', kind=None, lineno=1, col_offset=6, end_lineno=1, end_col_offset=12)], keywords=[], lineno=1, col_offset=0, end_lineno=1, end_col_offset=13), lineno=1, col_offset=0, end_lineno=1, end_col_offset=13), Expr(value=Call(func=Name(id='spam', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=0), args=[Constant(value='eggs', lineno=1, col_offset=0, end_lineno=1, end_col_offset=0)], keywords=[], lineno=1, col_offset=0, end_lineno=1, end_col_offset=0), lineno=1, col_offset=0, end_lineno=1, end_col_offset=0)], type_ignores=[])"))
                xtest_increment_lineno.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xincrement_lineno)) ((xsrc)) (3))) ((xsrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xsrc)) (TRUE))) ("Expression(body=BinOp(left=Constant(value=1, kind=None, lineno=4, col_offset=0, end_lineno=4, end_col_offset=1), op=Add(), right=Constant(value=1, kind=None, lineno=4, col_offset=4, end_lineno=4, end_col_offset=5), lineno=4, col_offset=0, end_lineno=4, end_col_offset=5))"))
                        xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xincrement_lineno)) (((xsrc).xbody)) (3))) (((xsrc).xbody)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xdump)) ((xsrc)) (TRUE))) ("Expression(body=BinOp(left=Constant(value=1, kind=None, lineno=4, col_offset=0, end_lineno=4, end_col_offset=1), op=Add(), right=Constant(value=1, kind=None, lineno=4, col_offset=4, end_lineno=4, end_col_offset=5), lineno=4, col_offset=0, end_lineno=4, end_col_offset=5))"))
                        xsrc.write (((unsupported)).apply (((xast).xCall)) (((((xast).xName)).apply ("test") (((((xast).xLoad)).apply)))) ((((unsupported)).apply)) ((((unsupported)).apply)) (1) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xast).xincrement_lineno)).apply ((xsrc))).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xast).xincrement_lineno)).apply ((xsrc))).xend_lineno)))
                xtest_iter_fields.write
                  [xself]
                    memory > xd
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((unsupported)).apply (((xast).xparse)) ("foo()") ("eval"))
                        xd.write (((xdict)).apply (((((xast).xiter_fields)).apply (((xnode).xbody)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xd).xpop)).apply ("func")).xid)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("keywords") ((((unsupported)).apply)) ("args") ((((unsupported)).apply)))))
                xtest_iter_child_nodes.write
                  [xself]
                    memory > xiterator
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((unsupported)).apply (((xast).xparse)) ("spam(23, 42, eggs='leek')") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply (((((xast).xiter_child_nodes)).apply (((xnode).xbody)))))))) (4))
                        xiterator.write ((((xast).xiter_child_nodes)).apply (((xnode).xbody)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnext)).apply ((xiterator))).xid)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnext)).apply ((xiterator))).xvalue)) (23))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnext)).apply ((xiterator))).xvalue)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xdump)).apply ((((xnext)).apply ((xiterator)))))) ("keyword(arg='eggs', value=Constant(value='leek', kind=None))"))
                xtest_get_docstring.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("\"\"\"line onen  line two\"\"\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_docstring)).apply ((xnode)))) ("line onenline two"))
                        xnode.write ((((xast).xparse)).apply ("class foo:n  \"\"\"line onen  line two\"\"\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))) ("line onenline two"))
                        xnode.write ((((xast).xparse)).apply ("def foo():n  \"\"\"line onen  line two\"\"\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))) ("line onenline two"))
                        xnode.write ((((xast).xparse)).apply ("async def foo():n  \"\"\"spamn  ham\"\"\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))) ("spamnham"))
                xtest_get_docstring_none.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply (((((xast).xparse)).apply (""))))))
                        xnode.write ((((xast).xparse)).apply ("x = \"not docstring\""))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((xnode)))))
                        xnode.write ((((xast).xparse)).apply ("def foo():n  pass"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((xnode)))))
                        xnode.write ((((xast).xparse)).apply ("class foo:n  pass"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("class foo:n  x = \"not docstring\""))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("class foo:n  def bar(self): pass"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("def foo():n  pass"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("def foo():n  x = \"not docstring\""))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("async def foo():n  pass"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                        xnode.write ((((xast).xparse)).apply ("async def foo():n  x = \"not docstring\""))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xast).xget_docstring)).apply ((((unsupported)).apply (((xnode).xbody)) (0))))))
                xtest_multi_line_docstring_col_offset_and_lineno_issue16806.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("\"\"\"line onenline two\"\"\"nndef foo():n  \"\"\"line onen  line two\"\"\"nn  def bar():n    \"\"\"line onen    line two\"\"\"n  \"\"\"line onen  line two\"\"\"n\"\"\"line onenline two\"\"\"nn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xnode).xbody)) (0)).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xnode).xbody)) (0)).xlineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (0)).xcol_offset)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (0)).xlineno)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (1)).xbody)) (0)).xcol_offset)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (1)).xbody)) (0)).xlineno)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (2)).xcol_offset)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (1)).xbody)) (2)).xlineno)) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xnode).xbody)) (2)).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xnode).xbody)) (2)).xlineno)) (13))
                xtest_elif_stmt_start_position.write
                  [xself]
                    memory > xelif_stmt
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("if a:n    passnelif b:n    passn"))
                        xelif_stmt.write (((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (0)).xorelse)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelif_stmt).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelif_stmt).xcol_offset)) (0))
                xtest_elif_stmt_start_position_with_else.write
                  [xself]
                    memory > xelif_stmt
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("if a:n    passnelif b:n    passnelse:n    passn"))
                        xelif_stmt.write (((unsupported)).apply (((((unsupported)).apply (((xnode).xbody)) (0)).xorelse)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelif_stmt).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelif_stmt).xcol_offset)) (0))
                xtest_starred_expr_end_position_within_call.write
                  [xself]
                    memory > xstarred_expr
                    memory > xnode
                    seq > @
                      seq
                        xnode.write ((((xast).xparse)).apply ("f(*[0, 1])"))
                        xstarred_expr.write (((unsupported)).apply ((((((unsupported)).apply (((xnode).xbody)) (0)).xvalue).xargs)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstarred_expr).xend_lineno)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstarred_expr).xend_col_offset)) (9))
                xtest_literal_eval.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("[1, 2, 3]"))) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("{\"foo\": 42}"))) ((((unsupported)).apply ("foo") (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("(True, False, None)"))) ((((unsupported)).apply (TRUE) (FALSE) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("{1, 2, 3}"))) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("b\"hi\""))) ("hi"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("foo()"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("6"))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("+6"))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-6"))) ((6.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3.25"))) (3.25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("+3.25"))) (3.25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25"))) ((3.25.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xast).xliteral_eval)).apply ("-0.0"))))) ("-0.0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("++6"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("+True"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("2+3"))
                xtest_literal_eval_complex.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("6j"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-6j"))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("6.75j"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-6.75j"))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3+6j"))) ((3.add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3+6j"))) (((3.neg).add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3-6j"))) ((3.sub (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3-6j"))) (((3.neg).sub (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3.25+6.75j"))) ((3.25.add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25+6.75j"))) (((3.25.neg).add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3.25-6.75j"))) ((3.25.sub (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25-6.75j"))) (((3.25.neg).sub (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("(3+6j)"))) ((3.add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j+3"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j+3j"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3+-6j"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3+(0+6j)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-(3+6j)"))
                xtest_literal_eval_malformed_dict_nodes.write
                  [xself]
                    memory > xmalformed
                    seq > @
                      seq
                        xmalformed.write (((unsupported)).apply (((xast).xDict)) ((((unsupported)).apply (((((xast).xConstant)).apply (1))) (((((xast).xConstant)).apply (2))))) ((((unsupported)).apply (((((xast).xConstant)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ((xmalformed)))
                        xmalformed.write (((unsupported)).apply (((xast).xDict)) ((((unsupported)).apply (((((xast).xConstant)).apply (1))))) ((((unsupported)).apply (((((xast).xConstant)).apply (2))) (((((xast).xConstant)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ((xmalformed)))
                xtest_bad_integer.write
                  [xself]
                    memory > xmod
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (((unsupported)).apply ((((unsupported)).apply (((xast).xImportFrom)) ("time") ((((unsupported)).apply ((((unsupported)).apply (((xast).xalias)) ("sleep"))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        xmod.write ((((xast).xModule)).apply ((xbody)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)).apply ((xmod)) ("test") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("invalid integer value: None") ((((xstr)).apply (((xcm).xexception)))))
                xtest_level_as_none.write
                  [xself]
                    memory > xns
                    memory > xcode
                    memory > xmod
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (((unsupported)).apply ((((unsupported)).apply (((xast).xImportFrom)) ("time") ((((unsupported)).apply ((((unsupported)).apply (((xast).xalias)) ("sleep"))))) ("None: is there a None literal in the EO language?") (0) (0))))
                        xmod.write ((((xast).xModule)).apply ((xbody)) ((((unsupported)).apply)))
                        xcode.write (((xcompile)).apply ((xmod)) ("test") ("exec"))
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("sleep") ((xns)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmod.write
                  [xself xmod xmsg xmode xexc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmod).xlineno)) (((xmod).xcol_offset)) (0))
                        bogusForceDataize.write ((((xast).xfix_missing_locations)).apply ((xmod)))
                        (((unsupported)).apply ((xmsg)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((xcompile)).apply ((xmod)) ("<test>") ((xmode)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xexc)))) ((xcm)))
                              bogusForceDataize.write (((xcompile)).apply ((xmod)) ("<test>") ((xmode)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xmsg)) ((((xstr)).apply (((xcm).xexception)))))
                xexpr.write
                  [xself xnode xmsg xexc]
                    memory > xmod
                    seq > @
                      (((unsupported)).apply)
                        xmod.write ((((xast).xModule)).apply ((((unsupported)).apply (((((xast).xExpr)).apply ((xnode)))))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xmod)) ((xmod)) ((xmsg)) ((xexc)))
                xstmt.write
                  [xself xstmt xmsg]
                    memory > xmod
                    seq > @
                      (((unsupported)).apply)
                        xmod.write ((((xast).xModule)).apply ((((unsupported)).apply ((xstmt)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xmod)).apply ((xmod)) ((xmsg)))
                xtest_module.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xast).xInteractive)).apply ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))))
                        bogusForceDataize.write ((((xself).xmod)).apply ((xm)) ("must have Load context") ("single"))
                        xm.write ((((xast).xExpression)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xmod)).apply ((xm)) ("must have Load context") ("eval"))
                x_check_arguments.write
                  [xself xfac xcheck]
                    memory > xarguments
                    memory > xargs
                    seq > @
                      seq
                        xarguments.write
                          [xargs xposonlyargs xvararg xkwonlyargs xkwarg xdefaults xkw_defaults]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xargs)) ("None: is there a None literal in the EO language?")).if
                                  xargs.write (((unsupported)).apply)
                                (((unsupported)).apply ((xposonlyargs)) ("None: is there a None literal in the EO language?")).if
                                  xposonlyargs.write (((unsupported)).apply)
                                (((unsupported)).apply ((xkwonlyargs)) ("None: is there a None literal in the EO language?")).if
                                  xkwonlyargs.write (((unsupported)).apply)
                                (((unsupported)).apply ((xdefaults)) ("None: is there a None literal in the EO language?")).if
                                  xdefaults.write (((unsupported)).apply)
                                (((unsupported)).apply ((xkw_defaults)) ("None: is there a None literal in the EO language?")).if
                                  xkw_defaults.write (((unsupported)).apply)
                                xargs.write ((((xast).xarguments)).apply ((xargs)) ((xposonlyargs)) ((xvararg)) ((xkwonlyargs)) ((xkw_defaults)) ((xkwarg)) ((xdefaults)))
                                (((unsupported)).apply ((((xfac)).apply ((xargs)))))
                        xargs.write (((unsupported)).apply (((((xast).xarg)).apply ("x") (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((xargs)))) ("must have Load context"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((xargs)))) ("must have Load context"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((xargs)))) ("must have Load context"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((((unsupported)).apply (((((xast).xNum)).apply (3))))))) ("more positional defaults than args"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((((unsupported)).apply (((((xast).xNum)).apply (4))))))) ("length of kwonlyargs is not the same as kw_defaults"))
                        xargs.write (((unsupported)).apply (((((xast).xarg)).apply ("x") (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((xargs)) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ("must have Load context"))
                        xargs.write (((unsupported)).apply (((((xast).xarg)).apply ("a") (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))) (((((xast).xarg)).apply ("b") (((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((xarguments)) ((xargs)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ("must have Load context"))
                xtest_funcdef.write
                  [xself]
                    memory > xfac
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xast).xarguments)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        xf.write ((((xast).xFunctionDef)).apply ("x") ((xa)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xf)) ("empty body on FunctionDef"))
                        xf.write ((((xast).xFunctionDef)).apply ("x") ((xa)) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xf)) ("must have Load context"))
                        xf.write ((((xast).xFunctionDef)).apply ("x") ((xa)) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply)) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xf)) ("must have Load context"))
                        xfac.write
                          [xargs]
                            seq > @
                              (((unsupported)).apply (((((xast).xFunctionDef)).apply ("x") ((xargs)) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).x_check_arguments)).apply ((xfac)) (((xself).xstmt)))
                xtest_classdef.write
                  [xself]
                    memory > xcls
                    seq > @
                      seq
                        xcls.write
                          [xbases xkeywords xbody xdecorator_list]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xbases)) ("None: is there a None literal in the EO language?")).if
                                  xbases.write (((unsupported)).apply)
                                (((unsupported)).apply ((xkeywords)) ("None: is there a None literal in the EO language?")).if
                                  xkeywords.write (((unsupported)).apply)
                                (((unsupported)).apply ((xbody)) ("None: is there a None literal in the EO language?")).if
                                  xbody.write (((unsupported)).apply (((((xast).xPass)).apply)))
                                (((unsupported)).apply ((xdecorator_list)) ("None: is there a None literal in the EO language?")).if
                                  xdecorator_list.write (((unsupported)).apply)
                                (((unsupported)).apply (((((xast).xClassDef)).apply ("myclass") ((xbases)) ((xkeywords)) ((xbody)) ((xdecorator_list)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((((unsupported)).apply ((xcls)) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ("must have Load context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((((unsupported)).apply ((xcls)) ((((unsupported)).apply (((((xast).xkeyword)).apply ("x") (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))))) ("must have Load context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((((unsupported)).apply ((xcls)) ((((unsupported)).apply)))) ("empty body on ClassDef"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((((unsupported)).apply ((xcls)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))) ("None disallowed"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((((unsupported)).apply ((xcls)) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ("must have Load context"))
                xtest_delete.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xDelete)).apply ((((unsupported)).apply)))) ("empty targets on Delete"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xDelete)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))) ("None disallowed"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xDelete)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))))) ("must have Del context"))
                xtest_assign.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xAssign)).apply ((((unsupported)).apply)) (((((xast).xNum)).apply (3))))) ("empty targets on Assign"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xAssign)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) (((((xast).xNum)).apply (3))))) ("None disallowed"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xAssign)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))) (((((xast).xNum)).apply (3))))) ("must have Store context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xAssign)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))))) ("must have Load context"))
                xtest_augassign.write
                  [xself]
                    memory > xaug
                    seq > @
                      seq
                        xaug.write ((((xast).xAugAssign)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) (((((xast).xAdd)).apply)) (((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xaug)) ("must have Store context"))
                        xaug.write ((((xast).xAugAssign)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) (((((xast).xAdd)).apply)) (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xaug)) ("must have Load context"))
                xtest_for.write
                  [xself]
                    memory > xe
                    memory > xx
                    memory > xy
                    memory > xp
                    seq > @
                      seq
                        xx.write ((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))
                        xy.write ((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))
                        xp.write ((((xast).xPass)).apply)
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xFor)).apply ((xx)) ((xy)) ((((unsupported)).apply)) ((((unsupported)).apply)))) ("empty body on For"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xFor)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) ((xy)) ((((unsupported)).apply ((xp)))) ((((unsupported)).apply)))) ("must have Store context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xFor)).apply ((xx)) (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))) ((((unsupported)).apply ((xp)))) ((((unsupported)).apply)))) ("must have Load context"))
                        xe.write ((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xFor)).apply ((xx)) ((xy)) ((((unsupported)).apply ((xe)))) ((((unsupported)).apply)))) ("must have Load context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xFor)).apply ((xx)) ((xy)) ((((unsupported)).apply ((xp)))) ((((unsupported)).apply ((xe)))))) ("must have Load context"))
                xtest_while.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWhile)).apply (((((xast).xNum)).apply (3))) ((((unsupported)).apply)) ((((unsupported)).apply)))) ("empty body on While"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWhile)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply)))) ("must have Load context"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWhile)).apply (((((xast).xNum)).apply (3))) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))))) ("must have Load context"))
                xtest_if.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xIf)).apply (((((xast).xNum)).apply (3))) ((((unsupported)).apply)) ((((unsupported)).apply)))) ("empty body on If"))
                        xi.write ((((xast).xIf)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xi)) ("must have Load context"))
                        xi.write ((((xast).xIf)).apply (((((xast).xNum)).apply (3))) ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xi)) ("must have Load context"))
                        xi.write ((((xast).xIf)).apply (((((xast).xNum)).apply (3))) ((((unsupported)).apply (((((xast).xPass)).apply)))) ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xi)) ("must have Load context"))
                xtest_with.write
                  [xself]
                    memory > xp
                    memory > xi
                    seq > @
                      seq
                        xp.write ((((xast).xPass)).apply)
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWith)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xp)))))) ("empty items on With"))
                        xi.write ((((xast).xwithitem)).apply (((((xast).xNum)).apply (3))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWith)).apply ((((unsupported)).apply ((xi)))) ((((unsupported)).apply)))) ("empty body on With"))
                        xi.write ((((xast).xwithitem)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWith)).apply ((((unsupported)).apply ((xi)))) ((((unsupported)).apply ((xp)))))) ("must have Load context"))
                        xi.write ((((xast).xwithitem)).apply (((((xast).xNum)).apply (3))) (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xWith)).apply ((((unsupported)).apply ((xi)))) ((((unsupported)).apply ((xp)))))) ("must have Store context"))
                xtest_raise.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xast).xRaise)).apply ("None: is there a None literal in the EO language?") (((((xast).xNum)).apply (3))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xr)) ("Raise with cause but no exception"))
                        xr.write ((((xast).xRaise)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xr)) ("must have Load context"))
                        xr.write ((((xast).xRaise)).apply (((((xast).xNum)).apply (4))) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xr)) ("must have Load context"))
                xtest_try.write
                  [xself]
                    memory > xt
                    memory > xe
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xast).xPass)).apply)
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("empty body on Try"))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("must have Load context"))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("Try has neither except handlers nor finalbody"))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((((unsupported)).apply)) ((((unsupported)).apply ((xp)))) ((((unsupported)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("Try has orelse but no except handlers"))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((((unsupported)).apply (((((xast).xExceptHandler)).apply ("None: is there a None literal in the EO language?") ("x") ((((unsupported)).apply)))))) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("empty body on ExceptHandler"))
                        xe.write (((unsupported)).apply (((((xast).xExceptHandler)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ("y") ((((unsupported)).apply ((xp)))))))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((xe)) ((((unsupported)).apply)) ((((unsupported)).apply)))) ("must have Load context"))
                        xe.write (((unsupported)).apply (((((xast).xExceptHandler)).apply ("None: is there a None literal in the EO language?") ("x") ((((unsupported)).apply ((xp)))))))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((xe)) ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))) ((((unsupported)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("must have Load context"))
                        xt.write ((((xast).xTry)).apply ((((unsupported)).apply ((xp)))) ((xe)) ((((unsupported)).apply ((xp)))) ((((unsupported)).apply (((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xt)) ("must have Load context"))
                xtest_assert.write
                  [xself]
                    memory > xassrt
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xAssert)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ("None: is there a None literal in the EO language?"))) ("must have Load context"))
                        xassrt.write ((((xast).xAssert)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xassrt)) ("must have Load context"))
                xtest_import.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xImport)).apply ((((unsupported)).apply)))) ("empty names on Import"))
                xtest_importfrom.write
                  [xself]
                    memory > ximp
                    seq > @
                      seq
                        ximp.write ((((xast).xImportFrom)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (((((xast).xalias)).apply ("x") ("None: is there a None literal in the EO language?"))))) ((42.neg)))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((ximp)) ("Negative ImportFrom level"))
                        bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xImportFrom)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) (0))) ("empty names on ImportFrom"))
                xtest_global.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xGlobal)).apply ((((unsupported)).apply)))) ("empty names on Global"))
                xtest_nonlocal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xstmt)).apply (((((xast).xNonlocal)).apply ((((unsupported)).apply)))) ("empty names on Nonlocal"))
                xtest_expr.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xast).xExpr)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xe)) ("must have Load context"))
                xtest_boolop.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xast).xBoolOp)).apply (((((xast).xAnd)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xb)) ("less than 2 values"))
                        xb.write ((((xast).xBoolOp)).apply (((((xast).xAnd)).apply)) ((((unsupported)).apply (((((xast).xNum)).apply (3))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xb)) ("less than 2 values"))
                        xb.write ((((xast).xBoolOp)).apply (((((xast).xAnd)).apply)) ((((unsupported)).apply (((((xast).xNum)).apply (4))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xb)) ("None disallowed"))
                        xb.write ((((xast).xBoolOp)).apply (((((xast).xAnd)).apply)) ((((unsupported)).apply (((((xast).xNum)).apply (4))) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xb)) ("must have Load context"))
                xtest_unaryop.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write ((((xast).xUnaryOp)).apply (((((xast).xNot)).apply)) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xu)) ("must have Load context"))
                xtest_lambda.write
                  [xself]
                    memory > xfac
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xast).xarguments)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xLambda)).apply ((xa)) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) ("must have Load context"))
                        xfac.write
                          [xargs]
                            seq > @
                              (((unsupported)).apply (((((xast).xLambda)).apply ((xargs)) (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))))
                        bogusForceDataize.write ((((xself).x_check_arguments)).apply ((xfac)) (((xself).xexpr)))
                xtest_ifexp.write
                  [xself]
                    memory > xs
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))
                        xs.write ((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ((xs)) ((xl)) ((xl)))) ((((unsupported)).apply ((xl)) ((xs)) ((xl)))) ((((unsupported)).apply ((xl)) ((xl)) ((xs)))))))
                          bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xIfExp)).apply ((((unsupported)).apply ((xargs)))))) ("must have Load context"))
                xtest_dict.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xast).xDict)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xd)) ("same number of keys as values"))
                        xd.write ((((xast).xDict)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xd)) ("None disallowed"))
                xtest_set.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xSet)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))) ("None disallowed"))
                        xs.write ((((xast).xSet)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xs)) ("must have Load context"))
                x_check_comprehension.write
                  [xself xfac]
                    memory > xx
                    memory > xy
                    memory > xg
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply)))) ("comprehension with no generators"))
                        xg.write ((((xast).xcomprehension)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) ((((unsupported)).apply)) (0))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply ((xg)))))) ("must have Store context"))
                        xg.write ((((xast).xcomprehension)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((((unsupported)).apply)) (0))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply ((xg)))))) ("must have Load context"))
                        xx.write ((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))
                        xy.write ((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))
                        xg.write ((((xast).xcomprehension)).apply ((xx)) ((xy)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) (0))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply ((xg)))))) ("None disallowed"))
                        xg.write ((((xast).xcomprehension)).apply ((xx)) ((xy)) ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) (0))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply ((xg)))))) ("must have Load context"))
                x_simple_comp.write
                  [xself xfac]
                    memory > xwrap
                    memory > xg
                    seq > @
                      seq
                        xg.write ((((xast).xcomprehension)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) ((((unsupported)).apply)) (0))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((((unsupported)).apply ((xg)))))) ("must have Load context"))
                        xwrap.write
                          [xgens]
                            seq > @
                              (((unsupported)).apply ((((xfac)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((xgens)))))
                        bogusForceDataize.write ((((xself).x_check_comprehension)).apply ((xwrap)))
                xtest_listcomp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_simple_comp)).apply (((xast).xListComp)))
                xtest_setcomp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_simple_comp)).apply (((xast).xSetComp)))
                xtest_generatorexp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_simple_comp)).apply (((xast).xGeneratorExp)))
                xtest_dictcomp.write
                  [xself]
                    memory > xc
                    memory > xfactory
                    memory > xg
                    seq > @
                      seq
                        xg.write ((((xast).xcomprehension)).apply (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))) (((((xast).xName)).apply ("p") (((((xast).xLoad)).apply)))) ((((unsupported)).apply)) (0))
                        xc.write ((((xast).xDictComp)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) (((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))) ((((unsupported)).apply ((xg)))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xc)) ("must have Load context"))
                        xc.write ((((xast).xDictComp)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))) ((((unsupported)).apply ((xg)))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xc)) ("must have Load context"))
                        xfactory.write
                          [xcomps]
                            memory > xk
                            memory > xv
                            seq > @
                              seq
                                xk.write ((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))
                                xv.write ((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))
                                (((unsupported)).apply (((((xast).xDictComp)).apply ((xk)) ((xv)) ((xcomps)))))
                        bogusForceDataize.write ((((xself).x_check_comprehension)).apply ((xfactory)))
                xtest_yield.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xYield)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) ("must have Load"))
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xYieldFrom)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) ("must have Load"))
                xtest_compare.write
                  [xself]
                    memory > xleft
                    memory > xcomp
                    seq > @
                      seq
                        xleft.write ((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))
                        xcomp.write ((((xast).xCompare)).apply ((xleft)) ((((unsupported)).apply (((((xast).xIn)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcomp)) ("no comparators"))
                        xcomp.write ((((xast).xCompare)).apply ((xleft)) ((((unsupported)).apply (((((xast).xIn)).apply)))) ((((unsupported)).apply (((((xast).xNum)).apply (4))) (((((xast).xNum)).apply (5))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcomp)) ("different number of comparators and operands"))
                        xcomp.write ((((xast).xCompare)).apply (((((xast).xNum)).apply ("blah"))) ((((unsupported)).apply (((((xast).xIn)).apply)))) ((((unsupported)).apply ((xleft)))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcomp)))
                        xcomp.write ((((xast).xCompare)).apply ((xleft)) ((((unsupported)).apply (((((xast).xIn)).apply)))) ((((unsupported)).apply (((((xast).xNum)).apply ("blah"))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcomp)))
                xtest_call.write
                  [xself]
                    memory > xcall
                    memory > xfunc
                    memory > xkeywords
                    memory > xargs
                    memory > xbad_keywords
                    seq > @
                      seq
                        xfunc.write ((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))
                        xargs.write (((unsupported)).apply (((((xast).xName)).apply ("y") (((((xast).xLoad)).apply)))))
                        xkeywords.write (((unsupported)).apply (((((xast).xkeyword)).apply ("w") (((((xast).xName)).apply ("z") (((((xast).xLoad)).apply)))))))
                        xcall.write ((((xast).xCall)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ((xargs)) ((xkeywords)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcall)) ("must have Load context"))
                        xcall.write ((((xast).xCall)).apply ((xfunc)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ((xkeywords)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcall)) ("None disallowed"))
                        xbad_keywords.write (((unsupported)).apply (((((xast).xkeyword)).apply ("w") (((((xast).xName)).apply ("z") (((((xast).xStore)).apply)))))))
                        xcall.write ((((xast).xCall)).apply ((xfunc)) ((xargs)) ((xbad_keywords)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xcall)) ("must have Load context"))
                xtest_num.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                        (((unsupported)).apply ((xfloat)))
                        (((unsupported)).apply ((xcomplex)))
                        (((unsupported)).apply ((xobj)) ((((unsupported)).apply ("0") ("hello"))))
                          bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xNum)).apply ((xobj)))))
                        (((unsupported)).apply ((xobj)) ((((unsupported)).apply ((((xsubint)).apply)) ((((xsubfloat)).apply)) ((((xsubcomplex)).apply)))))
                          (((unsupported)).apply (((xself).xexpr)) (((((xast).xNum)).apply ((xobj)))) ("invalid type") ((xTypeError)))
                xtest_attribute.write
                  [xself]
                    memory > xattr
                    seq > @
                      seq
                        xattr.write ((((xast).xAttribute)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) ("y") (((((xast).xLoad)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xattr)) ("must have Load context"))
                xtest_subscript.write
                  [xself]
                    memory > xsub
                    memory > xsl
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        xsub.write ((((xast).xSubscript)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))) (((((xast).xIndex)).apply (((((xast).xNum)).apply (3))))) (((((xast).xLoad)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xsub)) ("must have Load context"))
                        xx.write ((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))
                        xsub.write ((((xast).xSubscript)).apply ((xx)) (((((xast).xIndex)).apply (((((xast).xName)).apply ("y") (((((xast).xStore)).apply)))))) (((((xast).xLoad)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((xsub)) ("must have Load context"))
                        xs.write ((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ((xs)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xs)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xs)))))))
                          seq
                            xsl.write ((((xast).xSlice)).apply ((((unsupported)).apply ((xargs)))))
                            bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xSubscript)).apply ((xx)) ((xsl)) (((((xast).xLoad)).apply)))) ("must have Load context"))
                        xsl.write ((((xast).xExtSlice)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xSubscript)).apply ((xx)) ((xsl)) (((((xast).xLoad)).apply)))) ("empty dims on ExtSlice"))
                        xsl.write ((((xast).xExtSlice)).apply ((((unsupported)).apply (((((xast).xIndex)).apply ((xs)))))))
                        bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xSubscript)).apply ((xx)) ((xsl)) (((((xast).xLoad)).apply)))) ("must have Load context"))
                xtest_starred.write
                  [xself]
                    memory > xleft
                    memory > xassign
                    seq > @
                      seq
                        xleft.write ((((xast).xList)).apply ((((unsupported)).apply (((((xast).xStarred)).apply (((((xast).xName)).apply ("x") (((((xast).xLoad)).apply)))) (((((xast).xStore)).apply)))))) (((((xast).xStore)).apply)))
                        xassign.write ((((xast).xAssign)).apply ((((unsupported)).apply ((xleft)))) (((((xast).xNum)).apply (4))))
                        bogusForceDataize.write ((((xself).xstmt)).apply ((xassign)) ("must have Store context"))
                x_sequence.write
                  [xself xfac]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) (((((xast).xLoad)).apply)))) ("None disallowed"))
                        bogusForceDataize.write ((((xself).xexpr)).apply ((((xfac)).apply ((((unsupported)).apply (((((xast).xName)).apply ("x") (((((xast).xStore)).apply)))))) (((((xast).xLoad)).apply)))) ("must have Load context"))
                xtest_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_sequence)).apply (((xast).xList)))
                xtest_tuple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_sequence)).apply (((xast).xTuple)))
                xtest_nameconstant.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xexpr)).apply (((((xast).xNameConstant)).apply (4))))
                xtest_stdlib_validates.write
                  [xself]
                    memory > xfn
                    memory > xstdlib
                    memory > xmod
                    memory > xsource
                    memory > xtests
                    seq > @
                      seq
                        xstdlib.write (((((xos).xpath).xdirname)).apply (((xast).x__file__)))
                        xtests.write (((unsupported)).apply ((xfn)) ((xfn)) (((((xos).xlistdir)).apply ((xstdlib)))) (((((xfn).xendswith)).apply (".py"))))
                        bogusForceDataize.write ((((xtests).xextend)).apply ((((unsupported)).apply ("test/test_grammar.py") ("test/test_unpack_ex.py"))))
                        (((unsupported)).apply ((xmodule)) ((xtests)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xmodule)))))
                            seq
                              xfn.write (((((xos).xpath).xjoin)).apply ((xstdlib)) ((xmodule)))
                              (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xfn)) ("r") ("utf-8"))) ((xfp)))
                                xsource.write ((((xfp).xread)).apply)
                              xmod.write ((((xast).xparse)).apply ((xsource)) ((xfn)))
                              bogusForceDataize.write (((xcompile)).apply ((xmod)) ((xfn)) ("exec"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xcompile_constant.write
                  [xself xvalue]
                    memory > xnew_node
                    memory > xtree
                    memory > xns
                    memory > xcode
                    memory > xnode
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("x = 123"))
                        xnode.write ((((unsupported)).apply (((xtree).xbody)) (0)).xvalue)
                        xnew_node.write (((unsupported)).apply (((xast).xConstant)) ((xvalue)))
                        bogusForceDataize.write ((((xast).xcopy_location)).apply ((xnew_node)) ((xnode)))
                        (((unsupported)).apply (((((unsupported)).apply (((xtree).xbody)) (0)).xvalue)) ((xnew_node)))
                        xcode.write (((xcompile)).apply ((xtree)) ("<string>") ("exec"))
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)))
                        (((unsupported)).apply ((((unsupported)).apply ((xns)) ("x"))))
                xtest_validation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xself).xcompile_constant)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("got an invalid type in Constant: list"))
                xtest_singletons.write
                  [xself]
                    memory > xvalue
                    seq > @
                      (((unsupported)).apply ((xconst)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) (TRUE) ((xEllipsis)) ("") ((((xfrozenset)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xconst)))))
                          seq
                            xvalue.write ((((xself).xcompile_constant)).apply ((xconst)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xvalue)) ((xconst)))
                xtest_values.write
                  [xself]
                    memory > xnested_tuple
                    memory > xresult
                    memory > xvalues
                    memory > xnested_frozenset
                    seq > @
                      seq
                        xnested_tuple.write (((unsupported)).apply (1))
                        xnested_frozenset.write (((xfrozenset)).apply ((((unsupported)).apply (1))))
                        (((unsupported)).apply ((xlevel)) ((((xrange)).apply (3))))
                          seq
                            xnested_tuple.write (((unsupported)).apply ((xnested_tuple)) (2))
                            xnested_frozenset.write (((xfrozenset)).apply ((((unsupported)).apply ((xnested_frozenset)) (2))))
                        xvalues.write (((unsupported)).apply (123) (123.0) ((((unsupported)).apply)) ("unicode") ("bytes") ((((xtuple)).apply ("tuple"))) ((((xfrozenset)).apply ("frozenset"))) ((xnested_tuple)) ((xnested_frozenset)))
                        (((unsupported)).apply ((xvalue)) ((xvalues)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xresult.write ((((xself).xcompile_constant)).apply ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xvalue)))
                xtest_assign_to_constant.write
                  [xself]
                    memory > xtarget
                    memory > xnew_target
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("x = 1"))
                        xtarget.write (((unsupported)).apply (((((unsupported)).apply (((xtree).xbody)) (0)).xtargets)) (0))
                        xnew_target.write (((unsupported)).apply (((xast).xConstant)) (1))
                        bogusForceDataize.write ((((xast).xcopy_location)).apply ((xnew_target)) ((xtarget)))
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xtree).xbody)) (0)).xtargets)) (0))) ((xnew_target)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write (((xcompile)).apply ((xtree)) ("string") ("exec"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("expression which can't be assigned to in Store context"))
                xtest_get_docstring.write
                  [xself]
                    memory > xtree
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("'docstring'nx = 1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_docstring)).apply ((xtree)))) ("docstring"))
                xget_load_const.write
                  [xself xtree]
                    memory > xconsts
                    memory > xco
                    seq > @
                      seq
                        xco.write (((xcompile)).apply ((xtree)) ("<string>") ("exec"))
                        xconsts.write (((unsupported)).apply)
                        (((unsupported)).apply ((xinstr)) (((((xdis).xget_instructions)).apply ((xco)))))
                          (((xinstr).xopname).eq "LOAD_CONST").if
                            bogusForceDataize.write ((((xconsts).xappend)).apply (((xinstr).xargval)))
                        (((unsupported)).apply ((xconsts)))
                xtest_load_const.write
                  [xself]
                    memory > xconsts
                    memory > xcode
                    memory > xtree
                    memory > xnew_node
                    seq > @
                      (((unsupported)).apply)
                        xconsts.write (((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (FALSE) (124) (2.0) ((((unsupported)).apply)) ("unicode") ("bytes") ((((unsupported)).apply (1) (2) (3))))
                        xcode.write ((("n".xjoin)).apply ((((unsupported)).apply (((("x={!r}".xformat)).apply ((xconst)))) ((xconst)) ((xconsts)))))
                        (((unsupported)).apply ((xcode)) ("nx = ..."))
                        bogusForceDataize.write ((((xconsts).xextend)).apply ((((unsupported)).apply ((xEllipsis)) ("None: is there a None literal in the EO language?"))))
                        xtree.write ((((xast).xparse)).apply ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xget_load_const)).apply ((xtree)))) ((xconsts)))
                        (((unsupported)).apply ((((unsupported)).apply ((xassign)) ((xconst)))) ((((xzip)).apply (((xtree).xbody)) ((xconsts)))))
                          seq
                            (((unsupported)).apply ((((xisinstance)).apply ((xassign)) (((xast).xAssign)))) (((((xast).xdump)).apply ((xassign)))))
                            xnew_node.write (((unsupported)).apply (((xast).xConstant)) ((xconst)))
                            bogusForceDataize.write ((((xast).xcopy_location)).apply ((xnew_node)) (((xassign).xvalue)))
                            (((unsupported)).apply (((xassign).xvalue)) ((xnew_node)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xget_load_const)).apply ((xtree)))) ((xconsts)))
                xtest_literal_eval.write
                  [xself]
                    memory > xnew_right
                    memory > xnew_left
                    memory > xtree
                    memory > xbinop
                    seq > @
                      seq
                        xtree.write ((((xast).xparse)).apply ("1 + 2"))
                        xbinop.write ((((unsupported)).apply (((xtree).xbody)) (0)).xvalue)
                        xnew_left.write (((unsupported)).apply (((xast).xConstant)) (10))
                        bogusForceDataize.write ((((xast).xcopy_location)).apply ((xnew_left)) (((xbinop).xleft)))
                        (((unsupported)).apply (((xbinop).xleft)) ((xnew_left)))
                        xnew_right.write (((unsupported)).apply (((xast).xConstant)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xast).xcopy_location)).apply ((xnew_right)) (((xbinop).xright)))
                        (((unsupported)).apply (((xbinop).xright)) ((xnew_right)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ((xbinop)))) ((10.add (((unsupported)).apply))))
                xtest_string_kind.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write ((((unsupported)).apply (((xast).xparse)) ("\"x\"") ("eval")).xbody)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xvalue)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xkind)) ("None: is there a None literal in the EO language?"))
                        xc.write ((((unsupported)).apply (((xast).xparse)) ("u\"x\"") ("eval")).xbody)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xvalue)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xkind)) ("u"))
                        xc.write ((((unsupported)).apply (((xast).xparse)) ("r\"x\"") ("eval")).xbody)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xvalue)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xkind)) ("None: is there a None literal in the EO language?"))
                        xc.write ((((unsupported)).apply (((xast).xparse)) ("b\"x\"") ("eval")).xbody)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xvalue)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xkind)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                x_check_end_pos.write
                  [xself xast_node xend_lineno xend_col_offset]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xast_node).xend_lineno)) ((xend_lineno)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xast_node).xend_col_offset)) ((xend_col_offset)))
                x_check_content.write
                  [xself xsource xast_node xcontent]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_source_segment)).apply ((xsource)) ((xast_node)))) ((xcontent)))
                x_parse_value.write
                  [xself xs]
                    seq > @
                      (((unsupported)).apply (((((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0)).xvalue)))
                xtest_lambda.write
                  [xself]
                    memory > xs
                    memory > xlam
                    seq > @
                      seq
                        xs.write "lambda x, *y: None"
                        xlam.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xlam).xbody)) ("None"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply ((((xlam).xargs).xargs)) (0))) ("x"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((xlam).xargs).xvararg)) ("y"))
                xtest_func_def.write
                  [xself]
                    memory > xfdef
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xfdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xfdef)) (5) (15))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xfdef).xbody)) (0))) ("return True"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply ((((xfdef).xargs).xargs)) (0))) ("x: int"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply ((((xfdef).xargs).xargs)) (0)).xannotation)) ("int"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((xfdef).xargs).xkwarg)) ("kwargs: Any"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((xfdef).xargs).xkwarg).xannotation)) ("Any"))
                xtest_call.write
                  [xself]
                    memory > xs
                    memory > xcall
                    seq > @
                      seq
                        xs.write "func(x, y=2, **kw)"
                        xcall.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xcall).xfunc)) ("func"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xcall).xkeywords)) (0)).xvalue)) ("2"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xcall).xkeywords)) (1)).xvalue)) ("kw"))
                xtest_call_noargs.write
                  [xself]
                    memory > xs
                    memory > xcall
                    seq > @
                      seq
                        xs.write "x[0]()"
                        xcall.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xcall).xfunc)) ("x[0]"))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xcall)) (1) (6))
                xtest_class_def.write
                  [xself]
                    memory > xs
                    memory > xcdef
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xcdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xcdef)) (2) (14))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xcdef).xbases)) (1))) ("B"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xcdef).xbody)) (0))) ("x: int = 0"))
                xtest_class_kw.write
                  [xself]
                    memory > xs
                    memory > xcdef
                    seq > @
                      seq
                        xs.write "class S(metaclass=abc.ABCMeta): pass"
                        xcdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xcdef).xkeywords)) (0)).xvalue)) ("abc.ABCMeta"))
                xtest_multi_line_str.write
                  [xself]
                    memory > xs
                    memory > xassign
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xassign.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xassign)) (3) (40))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply (((xassign).xvalue)) (3) (40))
                xtest_continued_str.write
                  [xself]
                    memory > xs
                    memory > xassign
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xassign.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xassign)) (2) (13))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply (((xassign).xvalue)) (2) (13))
                xtest_suites.write
                  [xself]
                    memory > xwhile_loop
                    memory > xs
                    memory > xtry_stmt
                    memory > xmod
                    memory > xif_stmt
                    memory > xfor_loop
                    memory > xpass_stmt
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xmod.write ((((xast).xparse)).apply ((xs)))
                        xwhile_loop.write (((unsupported)).apply (((xmod).xbody)) (0))
                        xif_stmt.write (((unsupported)).apply (((xmod).xbody)) (1))
                        xfor_loop.write (((unsupported)).apply (((xmod).xbody)) (2))
                        xtry_stmt.write (((unsupported)).apply (((xmod).xbody)) (3))
                        xpass_stmt.write (((unsupported)).apply (((xmod).xbody)) (4))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xwhile_loop)) (2) (8))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xif_stmt)) (9) (12))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xfor_loop)) (12) (15))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xtry_stmt)) (17) (8))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xpass_stmt)) (19) (4))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xwhile_loop).xtest)) ("True"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xif_stmt).xbody)) (0))) ("x = None"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xif_stmt).xorelse)) (0)).xtest)) ("other()"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xfor_loop).xtarget)) ("x, y"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xtry_stmt).xbody)) (0))) ("raise RuntimeError"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xtry_stmt).xhandlers)) (0)).xtype)) ("TypeError"))
                xtest_fstring.write
                  [xself]
                    memory > xs
                    memory > xfstr
                    memory > xbinop
                    seq > @
                      seq
                        xs.write "x = f\"abc {x + y} abc\""
                        xfstr.write ((((xself).x_parse_value)).apply ((xs)))
                        xbinop.write ((((unsupported)).apply (((xfstr).xvalues)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xbinop)) ("x + y"))
                xtest_fstring_multi_line.write
                  [xself]
                    memory > xs
                    memory > xfstr
                    memory > xbinop
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xfstr.write ((((xself).x_parse_value)).apply ((xs)))
                        xbinop.write ((((unsupported)).apply (((xfstr).xvalues)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xbinop)) (5) (7))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xleft)) ("arg_one"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xright)) ("arg_two"))
                xtest_import_from_multi_line.write
                  [xself]
                    memory > xs
                    memory > ximp
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        ximp.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((ximp)) (3) (1))
                xtest_slices.write
                  [xself]
                    memory > xsm
                    memory > xs1
                    memory > xs2
                    seq > @
                      seq
                        xs1.write "f()[1, 2] [0]"
                        xs2.write "x[ a.b: c.d]"
                        xsm.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi1)) ((xi2)) ((xim)))) ((((xmap)).apply (((xself).x_parse_value)) ((((unsupported)).apply ((xs1)) ((xs2)) ((xsm)))))))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) (((xi1).xvalue)) ("f()[1, 2]"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) (((((xi1).xvalue).xslice).xvalue)) ("1, 2"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((((xi2).xslice).xlower)) ("a.b"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((((xi2).xslice).xupper)) ("c.d"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xsm)) (((((unsupported)).apply ((((xim).xslice).xdims)) (0)).xupper)) ("f ()"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xsm)) (((((unsupported)).apply ((((xim).xslice).xdims)) (1)).xlower)) ("g ()"))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xim)) (3) (3))
                xtest_binop.write
                  [xself]
                    memory > xs
                    memory > xbinop
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xbinop.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xbinop)) (2) (6))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xright)) ("4"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xleft)) ("1 * 2 + (3 )"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((xbinop).xleft).xright)) ("3"))
                xtest_boolop.write
                  [xself]
                    memory > xs
                    memory > xbop
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xbop.write ((((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0)).xtest)
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xbop)) (2) (44))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xbop).xvalues)) (1))) ("other_condition or yet_another_one"))
                xtest_tuples.write
                  [xself]
                    memory > xsm
                    memory > xs1
                    memory > xs2
                    memory > xs3
                    seq > @
                      seq
                        xs1.write "x = () ;"
                        xs2.write "x = 1 , ;"
                        xs3.write "x = (1 , 2 ) ;"
                        xsm.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xtm)))) ((((xmap)).apply (((xself).x_parse_value)) ((((unsupported)).apply ((xs1)) ((xs2)) ((xs3)) ((xsm)))))))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) ((xt1)) ("()"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((xt2)) ("1 ,"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs3)) ((xt3)) ("(1 , 2 )"))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xtm)) (3) (1))
                xtest_attribute_spaces.write
                  [xself]
                    memory > xs
                    memory > xcall
                    seq > @
                      seq
                        xs.write "func(x. y .z)"
                        xcall.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xcall)) ((xs)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((xcall).xargs)) (0))) ("x. y .z"))
                xtest_redundant_parenthesis.write
                  [xself]
                    memory > xs
                    memory > xv
                    memory > xs2
                    seq > @
                      seq
                        xs.write "( ( ( a + b ) ) )"
                        xv.write ((((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtype)).apply ((xv))).x__name__)) ("BinOp"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xv)) ("a + b"))
                        xs2.write ("await ".add (xs))
                        xv.write (((((unsupported)).apply ((((((xast).xparse)).apply ((xs2))).xbody)) (0)).xvalue).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtype)).apply ((xv))).x__name__)) ("BinOp"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((xv)) ("a + b"))
                xtest_trailers_with_redundant_parenthesis.write
                  [xself]
                    memory > xtests
                    memory > xv
                    memory > xs2
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("( ( ( a ) ) ) ( )") ("Call"))) ((((unsupported)).apply ("( ( ( a ) ) ) ( b )") ("Call"))) ((((unsupported)).apply ("( ( ( a ) ) ) [ b ]") ("Subscript"))) ((((unsupported)).apply ("( ( ( a ) ) ) . b") ("Attribute"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xt)))) ((xtests)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xs)))))
                            seq
                              xv.write ((((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0)).xvalue)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtype)).apply ((xv))).x__name__)) ((xt)))
                              bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xv)) ((xs)))
                              xs2.write ("await ".add (xs))
                              xv.write (((((unsupported)).apply ((((((xast).xparse)).apply ((xs2))).xbody)) (0)).xvalue).xvalue)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtype)).apply ((xv))).x__name__)) ((xt)))
                              bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((xv)) ((xs)))
                xtest_displays.write
                  [xself]
                    memory > xs1
                    memory > xc1
                    memory > xs2
                    memory > xc2
                    seq > @
                      seq
                        xs1.write "[{}, {1, }, {1, 2,} ]"
                        xs2.write "{a: b, f (): g () ,}"
                        xc1.write ((((xself).x_parse_value)).apply ((xs1)))
                        xc2.write ((((xself).x_parse_value)).apply ((xs2)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) ((((unsupported)).apply (((xc1).xelts)) (0))) ("{}"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) ((((unsupported)).apply (((xc1).xelts)) (1))) ("{1, }"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs1)) ((((unsupported)).apply (((xc1).xelts)) (2))) ("{1, 2,}"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((((unsupported)).apply (((xc2).xkeys)) (1))) ("f ()"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((((unsupported)).apply (((xc2).xvalues)) (1))) ("g ()"))
                xtest_comprehensions.write
                  [xself]
                    memory > xs
                    memory > xcmp
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xcmp.write ((((xself).x_parse_value)).apply ((xs)))
                        bogusForceDataize.write ((((xself).x_check_end_pos)).apply ((xcmp)) (2) (37))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xcmp).xgenerators)) (0)).xiter)) ("things"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply ((((xcmp).xelt).xgenerators)) (0)).xiter)) ("stuff"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((((unsupported)).apply (((((unsupported)).apply ((((xcmp).xelt).xgenerators)) (0)).xifs)) (0))) ("cond.x"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply ((((xcmp).xelt).xgenerators)) (0)).xtarget)) ("x, y"))
                xtest_yield_await.write
                  [xself]
                    memory > xfdef
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xfdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xfdef).xbody)) (0)).xvalue)) ("yield x"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((((unsupported)).apply (((xfdef).xbody)) (1)).xvalue)) ("await y"))
                xtest_source_segment_multi.write
                  [xself]
                    memory > xs_tuple
                    memory > xs_orig
                    memory > xbinop
                    seq > @
                      seq
                        xs_orig.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xs_tuple.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xbinop.write ((((xself).x_parse_value)).apply ((xs_orig)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xget_source_segment)).apply ((xs_orig)) (((xbinop).xleft)))) ((xs_tuple)))
                xtest_source_segment_padded.write
                  [xself]
                    memory > xs_method
                    memory > xs_orig
                    memory > xcdef
                    seq > @
                      seq
                        xs_orig.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xs_method.write "    def fun(self) -> None:n        \"ЖЖЖЖЖ\""
                        xcdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs_orig))).xbody)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xget_source_segment)) ((xs_orig)) ((((unsupported)).apply (((xcdef).xbody)) (0))) (TRUE))) ((xs_method)))
                xtest_source_segment_endings.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write "v = 1rnw = 1nx = 1nry = 1rz = 1rn"
                        (((unsupported)).apply ((((unsupported)).apply ((xv)) ((xw)) ((xx)) ((xy)) ((xz)))) ((((((xast).xparse)).apply ((xs))).xbody)))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xv)) ("v = 1"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xw)) ("w = 1"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xx)) ("x = 1"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xy)) ("y = 1"))
                        bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xz)) ("z = 1"))
                xtest_source_segment_tabs.write
                  [xself]
                    memory > xs_method
                    memory > xs
                    memory > xcdef
                    seq > @
                      seq
                        xs.write ((((((xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xs_method.write "  tf  def fun(self) -> None:n  tf      pass"
                        xcdef.write (((unsupported)).apply ((((((xast).xparse)).apply ((xs))).xbody)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xast).xget_source_segment)) ((xs)) ((((unsupported)).apply (((xcdef).xbody)) (0))) (TRUE))) ((xs_method)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_old_constant_nodes.write
                [xself]
                  memory > xvisit_NameConstant
                  memory > xvisit_Ellipsis
                  memory > xvisit_Bytes
                  memory > xlog
                  memory > xvisitor
                  memory > xmod
                  memory > xvisit_Num
                  memory > xvisit_Str
                  seq > @
                    seq
                      (((unsupported)).apply (((xast).xNodeVisitor)))
                        seq
                          xvisit_Num.write
                            [xself xnode]
                              seq > @
                                bogusForceDataize.write ((((xlog).xappend)).apply ((((unsupported)).apply (((xnode).xlineno)) ("Num") (((xnode).xn)))))
                          xvisit_Str.write
                            [xself xnode]
                              seq > @
                                bogusForceDataize.write ((((xlog).xappend)).apply ((((unsupported)).apply (((xnode).xlineno)) ("Str") (((xnode).xs)))))
                          xvisit_Bytes.write
                            [xself xnode]
                              seq > @
                                bogusForceDataize.write ((((xlog).xappend)).apply ((((unsupported)).apply (((xnode).xlineno)) ("Bytes") (((xnode).xs)))))
                          xvisit_NameConstant.write
                            [xself xnode]
                              seq > @
                                bogusForceDataize.write ((((xlog).xappend)).apply ((((unsupported)).apply (((xnode).xlineno)) ("NameConstant") (((xnode).xvalue)))))
                          xvisit_Ellipsis.write
                            [xself xnode]
                              seq > @
                                bogusForceDataize.write ((((xlog).xappend)).apply ((((unsupported)).apply (((xnode).xlineno)) ("Ellipsis") ((((unsupported)).apply)))))
                      xmod.write ((((xast).xparse)).apply ((((xdedent)).apply ((((unsupported)).apply)))))
                      xvisitor.write (((xVisitor)).apply)
                      xlog.write (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xwlog)))
                        seq
                          bogusForceDataize.write ((((xwarnings).xfilterwarnings)).apply ("always") ("") ((xPendingDeprecationWarning)))
                          bogusForceDataize.write ((((xvisitor).xvisit)).apply ((xmod)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlog)) ((((unsupported)).apply ((((unsupported)).apply (1) ("Num") (42))) ((((unsupported)).apply (2) ("Num") (4.25))) ((((unsupported)).apply (3) ("Num") ((((unsupported)).apply)))) ((((unsupported)).apply (4) ("Str") ("string"))) ((((unsupported)).apply (5) ("Bytes") ("bytes"))) ((((unsupported)).apply (6) ("NameConstant") (TRUE))) ((((unsupported)).apply (7) ("NameConstant") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (8) ("Ellipsis") ((((unsupported)).apply)))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xstr)).apply (((xw).xmessage)))) ((xw)) ((xwlog)))) ((((unsupported)).apply ("visit_Num is deprecated; add visit_Constant") ("visit_Num is deprecated; add visit_Constant") ("visit_Num is deprecated; add visit_Constant") ("visit_Str is deprecated; add visit_Constant") ("visit_Bytes is deprecated; add visit_Constant") ("visit_NameConstant is deprecated; add visit_Constant") ("visit_NameConstant is deprecated; add visit_Constant") ("visit_Ellipsis is deprecated; add visit_Constant"))))
            xmain.write
              []
                memory > xtree
                seq > @
                  seq
                    ((x__name__).neq "__main__").if
                      (((unsupported)).apply)
                    ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply (1)))).eq (((unsupported)).apply ("-g"))).if
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xstatements)) ((xkind)))) ((((unsupported)).apply ((((unsupported)).apply ((xexec_tests)) ("exec"))) ((((unsupported)).apply ((xsingle_tests)) ("single"))) ((((unsupported)).apply ((xeval_tests)) ("eval"))))))
                          seq
                            bogusForceDataize.write (((xprint)).apply (((xkind).add "_results = [")))
                            (((unsupported)).apply ((xstatement)) ((xstatements)))
                              seq
                                xtree.write ((((xast).xparse)).apply ((xstatement)) ("?") ((xkind)))
                                bogusForceDataize.write (((xprint)).apply (("%r,".mod (((unsupported)).apply ((((xto_tuple)).apply ((xtree))))))))
                            bogusForceDataize.write (((xprint)).apply ("]"))
                        bogusForceDataize.write (((xprint)).apply ("main()"))
                        (((unsupported)).apply ((xSystemExit)))
                    bogusForceDataize.write ((((xunittest).xmain)).apply)
            xexec_results.write (((unsupported)).apply ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) ("module docstring") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (9))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (9))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (9))) ("function docstring") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (10))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (0) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (12))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (7))) ("args") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (14))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (8))) ("kwargs") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (17))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (9))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (22))) ("d") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (28))) ("e") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (35))) ("args") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (41))) ("f") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (43))) (42) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (49))) ("kwargs") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (11))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (24))) ((((unsupported)).apply)) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (30))) ((((unsupported)).apply)) ((((unsupported)).apply)))))))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (58))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (58))) ("doc for f()") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("ClassDef") ((((unsupported)).apply (1) (0))) ("C") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (8))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("ClassDef") ((((unsupported)).apply (1) (0))) ("C") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (9))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (9))) ("docstring for class C") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("ClassDef") ((((unsupported)).apply (1) (0))) ("C") ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (8))) ("object") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (17))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Return") ((((unsupported)).apply (1) (8))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (15))) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Delete") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("v") ((((unsupported)).apply ("Del"))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Assign") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("v") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (1) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Assign") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("c") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Assign") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (3))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (8))) ("c") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Assign") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (3))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (8))) ("c") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AugAssign") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("v") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Add"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (5))) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("v") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (9))) ("v") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (11))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("While") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("v") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (8))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("If") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (3))) ("v") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (5))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("If") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (3))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("If") ((((unsupported)).apply (3) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (5))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (2))))))) ((((unsupported)).apply)))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("If") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (3))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("If") ((((unsupported)).apply (3) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (5))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (6) (2))))))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("With") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("withitem") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (10))) ("y") ((((unsupported)).apply ("Store"))))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (13))))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("With") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("withitem") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (10))) ("y") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("withitem") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("z") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (18))) ("q") ((((unsupported)).apply ("Store"))))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (21))))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Raise") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (6))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("Exception") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) ("string") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Try") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("ExceptHandler") ((((unsupported)).apply (3) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (7))) ("Exception") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (2))))))))))) ((((unsupported)).apply)) ((((unsupported)).apply)))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Try") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (2))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Assert") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("v") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Import") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("alias") ("sys") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("ImportFrom") ((((unsupported)).apply (1) (0))) ("sys") ((((unsupported)).apply ((((unsupported)).apply ("alias") ("v") ("None: is there a None literal in the EO language?"))))) (0))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Global") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("v"))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (0))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("v") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (9))) ("v") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Break") ((((unsupported)).apply (1) (11))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("v") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (9))) ("v") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Continue") ((((unsupported)).apply (1) (11))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (4))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (14))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (4))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (16))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("For") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (4))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (16))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (2) (4))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (4))) ("Aa") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (5) (7))) ("Bb") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (8) (4))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (8) (4))) ("Aa") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (10) (4))) ("Bb") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (10) (10))) ("Cc") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("DictComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("w") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (16))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))) ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (22))) ("m") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (27))) ("p") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (32))) ("g") ((((unsupported)).apply ("Load"))))))) (0))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("DictComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (5))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("v") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("w") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (18))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("SetComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("r") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("l") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (17))) ("g") ((((unsupported)).apply ("Load"))))))) (0))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("SetComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("r") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (7))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("l") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (9))) ("m") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("x") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AsyncFunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (2) (1))) ("async function") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Expr") ((((unsupported)).apply (3) (1))) ((((unsupported)).apply ("Await") ((((unsupported)).apply (3) (1))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (3) (7))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (7))) ("something") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) ((((unsupported)).apply)))))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AsyncFunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("AsyncFor") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (11))) ("e") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (16))) ("i") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (2) (19))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (2) (19))) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (3) (7))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (3) (7))) (2) ("None: is there a None literal in the EO language?"))))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AsyncFunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("AsyncWith") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ((((unsupported)).apply ("withitem") ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (12))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (17))) ("b") ((((unsupported)).apply ("Store"))))))))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (2) (20))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (2) (20))) (1) ("None: is there a None literal in the EO language?"))))))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (10))) (2) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (6))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (12))) (3) ("None: is there a None literal in the EO language?"))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Set") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Starred") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Set") ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (3))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (6))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (10))) (3) ("None: is there a None literal in the EO language?"))))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AsyncFunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("ListComp") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (2))) ("i") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (14))) ("b") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (19))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (1))))))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (4) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (9))))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("deco1") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (1))) ("deco2") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (3) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (1))) ("deco3") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (3) (7))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("AsyncFunctionDef") ((((unsupported)).apply (4) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (15))))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("deco1") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (1))) ("deco2") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (3) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (1))) ("deco3") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (3) (7))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("ClassDef") ((((unsupported)).apply (4) (0))) ("C") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (4) (9))))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("deco1") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (2) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (2) (1))) ("deco2") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("Call") ((((unsupported)).apply (3) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (3) (1))) ("deco3") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (3) (7))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (2) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (9))))))) ((((unsupported)).apply ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("deco") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (5))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (17))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply)))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (2) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (2) (9))))))) ((((unsupported)).apply ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Load"))))) ("b") ((((unsupported)).apply ("Load"))))) ("c") ((((unsupported)).apply ("Load"))))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("NamedExpr") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (6))) (1) ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (14))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (12))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (15))) ("d") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (18))) ("e") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (22))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (12))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (18))) ("d") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (21))) ("e") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (25))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (12))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (18))) ("d") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (21))) ("e") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (26))) ("kwargs") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (35))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (16))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (19))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (21))) (4) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (25))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (22))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (24))) (4) ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (28))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (22))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (26))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (22))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (24))) (4) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (29))) ("kwargs") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (38))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("Module") ((((unsupported)).apply ((((unsupported)).apply ("FunctionDef") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("arguments") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (6))) ("a") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (14))) ("b") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (22))) ("c") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("arg") ((((unsupported)).apply (1) (27))) ("kwargs") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (16))) (2) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ("Pass") ((((unsupported)).apply (1) (36))))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply)))))
            xsingle_results.write (((unsupported)).apply ((((unsupported)).apply ("Interactive") ((((unsupported)).apply ((((unsupported)).apply ("Expr") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("BinOp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Add"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (2))) (2) ("None: is there a None literal in the EO language?"))))))))))))
            xeval_results.write (((unsupported)).apply ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("BoolOp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("And"))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (6))) ("b") ((((unsupported)).apply ("Load"))))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("BinOp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Add"))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("UnaryOp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Not"))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("v") ((((unsupported)).apply ("Load"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Lambda") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("arguments") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (7))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (2))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (2) ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply)) ((((unsupported)).apply)))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Set") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (1))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Dict") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (2) (6))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (4) (10))) (2) ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("ListComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("b") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (17))) ("d") ((((unsupported)).apply ("Load"))))))) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (1))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (7))) ("b") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (17))) ("d") ((((unsupported)).apply ("Load"))))))) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("ListComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (18))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("ListComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("ListComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("SetComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (18))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("SetComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("SetComp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (18))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (11))) ((((unsupported)).apply ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (12))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (14))) ("b") ((((unsupported)).apply ("Store"))))))) ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (20))) ("c") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Compare") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("Lt"))) ((((unsupported)).apply ("Lt"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (3) ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (2))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Starred") ((((unsupported)).apply (1) (10))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (11))) ("d") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ((((unsupported)).apply ("keyword") ("c") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (8))) (3) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("keyword") ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (15))) ("e") ((((unsupported)).apply ("Load"))))))))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Starred") ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (0) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (7))) (1) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("f") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("GeneratorExp") ((((unsupported)).apply (1) (1))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("comprehension") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (8))) ("a") ((((unsupported)).apply ("Store"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (13))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply)) (0))))))))) ((((unsupported)).apply)))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) (10) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) ("string") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Load"))))) ("b") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Subscript") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Slice") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (2))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (4))) ("c") ((((unsupported)).apply ("Load"))))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("v") ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (1))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (3))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (5))) (3) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("List") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply)) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (0))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (2))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (4))) (3) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (1))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (3))) (2) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (5))) (3) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Tuple") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply)) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply ("Expression") ((((unsupported)).apply ("Call") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (0))) ("a") ((((unsupported)).apply ("Load"))))) ("b") ((((unsupported)).apply ("Load"))))) ("c") ((((unsupported)).apply ("Load"))))) ("d") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ((((unsupported)).apply ("Subscript") ((((unsupported)).apply (1) (8))) ((((unsupported)).apply ("Attribute") ((((unsupported)).apply (1) (8))) ((((unsupported)).apply ("Name") ((((unsupported)).apply (1) (8))) ("a") ((((unsupported)).apply ("Load"))))) ("b") ((((unsupported)).apply ("Load"))))) ((((unsupported)).apply ("Slice") ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (12))) (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Constant") ((((unsupported)).apply (1) (14))) (2) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("Load"))))))) ((((unsupported)).apply)))))))
            bogusForceDataize.write (((xmain)).apply)