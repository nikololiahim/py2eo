270,272c270,272
<             xexec_tests.write (((unsupported)).apply ("None") ("'module docstring'") ("def f(): pass") ("def f(): 'function docstring'") ("def f(a): pass") ("def f(a=0): pass") ("def f(*args): pass") ("def f(**kwargs): pass") ("def f(a, b=1, c=None, d=[], e={}, *args, f=42, **kwargs): 'doc for f()'") ("class C:pass") ("class C: 'docstring for class C'") ("class C(object): pass") ("def f():return 1") ("del v") ("v = 1") ("a,b = c") ("(a,b) = c") ("[a,b] = c") ("v += 1") ("for v in v:pass") ("while v:pass") ("if v:pass") ("if a:n  passnelif b:n  pass") ("if a:n  passnelif b:n  passnelse:n  pass") ("with x as y: pass") ("with x as y, z as q: pass") ("raise Exception('string')") ("try:n  passnexcept Exception:n  pass") ("try:n  passnfinally:n  pass") ("assert v") ("import sys") ("from sys import v") ("global v") ("1") ("pass") ("for v in v:break") ("for v in v:continue") ("for a,b in c: pass") ("for (a,b) in c: pass") ("for [a,b] in c: pass") ((((unsupported)).apply)) ("{a : b for w in x for m in p if g}") ("{a : b for v,w in x}") ("{r for l in x if g}") ("{r for l,m in x}") ("async def f():n 'async function'n await something()") ("async def f():n async for e in i: 1n else: 2") ("async def f():n async with a as b: 1") ("{**{1:2}, 2:3}") ("{*{1, 2}, 3}") ("async def f():n [i async for b in c]") ("@deco1n@deco2()n@deco3(1)ndef f(): pass") ("@deco1n@deco2()n@deco3(1)nasync def f(): pass") ("@deco1n@deco2()n@deco3(1)nclass C: pass") ("@deco(a for a in b)ndef f(): pass") ("@a.b.cndef f(): pass") ("(a := 1)") ("def f(a, /,): pass") ("def f(a, /, c, d, e): pass") ("def f(a, /, c, *, d, e): pass") ("def f(a, /, c, *, d, e, **kwargs): pass") ("def f(a=1, /,): pass") ("def f(a=1, /, b=2, c=4): pass") ("def f(a=1, /, b=2, *, c=4): pass") ("def f(a=1, /, b=2, *, c): pass") ("def f(a=1, /, b=2, *, c=4, **kwargs): pass") ("def f(a=1, /, b=2, *, c, **kwargs): pass"))
<             xsingle_tests.write (((unsupported)).apply ("1+2"))
<             xeval_tests.write (((unsupported)).apply ("None") ("a and b") ("a + b") ("not v") ("lambda:None") ("{ 1:2 }") ("{}") ("{None,}") ((((unsupported)).apply)) ("[a for b in c if d]") ("(a for b in c if d)") ("[(a,b) for a,b in c]") ("[(a,b) for (a,b) in c]") ("[(a,b) for [a,b] in c]") ("{(a,b) for a,b in c}") ("{(a,b) for (a,b) in c}") ("{(a,b) for [a,b] in c}") ("((a,b) for a,b in c)") ("((a,b) for (a,b) in c)") ("((a,b) for [a,b] in c)") ("1 < 2 < 3") ("f(1,2,c=3,*d,**e)") ("f(*[0, 1])") ("f(a for a in b)") ("10") ("'string'") ("a.b") ("a[b:c]") ("v") ("[1,2,3]") ("[]") ("1,2,3") ("(1,2,3)") ("()") ("a.b.c.d(a.b[1:2])"))
---
>             xexec_tests.write (((unsupported)).apply ("None") ("'module docstring'") ("def f(): pass") ("def f(): 'function docstring'") ("def f(a): pass") ("def f(a=0): pass") ("def f(*args): pass") ("def f(**kwargs): pass") ("def f(a, b=1, c=None, d=[], e={}, *args, f=42, **kwargs): 'doc for f()'") ("class C:pass") ("class C: 'docstring for class C'") ("class C(object): pass") ("def f():return 1") ("del v") ("v = 1") ("a,b = c") ("(a,b) = c") ("[a,b] = c") ("v -= 1") ("for v in v:pass") ("while v:pass") ("if v:pass") ("if a:n  passnelif b:n  pass") ("if a:n  passnelif b:n  passnelse:n  pass") ("with x as y: pass") ("with x as y, z as q: pass") ("raise Exception('string')") ("try:n  passnexcept Exception:n  pass") ("try:n  passnfinally:n  pass") ("assert v") ("import sys") ("from sys import v") ("global v") ("1") ("pass") ("for v in v:break") ("for v in v:continue") ("for a,b in c: pass") ("for (a,b) in c: pass") ("for [a,b] in c: pass") ((((unsupported)).apply)) ("{a : b for w in x for m in p if g}") ("{a : b for v,w in x}") ("{r for l in x if g}") ("{r for l,m in x}") ("async def f():n 'async function'n await something()") ("async def f():n async for e in i: 1n else: 2") ("async def f():n async with a as b: 1") ("{**{1:2}, 2:3}") ("{*{1, 2}, 3}") ("async def f():n [i async for b in c]") ("@deco1n@deco2()n@deco3(1)ndef f(): pass") ("@deco1n@deco2()n@deco3(1)nasync def f(): pass") ("@deco1n@deco2()n@deco3(1)nclass C: pass") ("@deco(a for a in b)ndef f(): pass") ("@a.b.cndef f(): pass") ("(a := 1)") ("def f(a, /,): pass") ("def f(a, /, c, d, e): pass") ("def f(a, /, c, *, d, e): pass") ("def f(a, /, c, *, d, e, **kwargs): pass") ("def f(a=1, /,): pass") ("def f(a=1, /, b=2, c=4): pass") ("def f(a=1, /, b=2, *, c=4): pass") ("def f(a=1, /, b=2, *, c): pass") ("def f(a=1, /, b=2, *, c=4, **kwargs): pass") ("def f(a=1, /, b=2, *, c, **kwargs): pass"))
>             xsingle_tests.write (((unsupported)).apply ("1-2"))
>             xeval_tests.write (((unsupported)).apply ("None") ("a and b") ("a - b") ("not v") ("lambda:None") ("{ 1:2 }") ("{}") ("{None,}") ((((unsupported)).apply)) ("[a for b in c if d]") ("(a for b in c if d)") ("[(a,b) for a,b in c]") ("[(a,b) for (a,b) in c]") ("[(a,b) for [a,b] in c]") ("{(a,b) for a,b in c}") ("{(a,b) for (a,b) in c}") ("{(a,b) for [a,b] in c}") ("((a,b) for a,b in c)") ("((a,b) for (a,b) in c)") ("((a,b) for [a,b] in c)") ("1 < 2 < 3") ("f(1,2,c=3,*d,**e)") ("f(*[0, 1])") ("f(a for a in b)") ("10") ("'string'") ("a.b") ("a[b:c]") ("v") ("[1,2,3]") ("[]") ("1,2,3") ("(1,2,3)") ("()") ("a.b.c.d(a.b[1:2])"))
349c349
<                         xsnippets_to_validate.write (((xexec_tests).add (xsingle_tests)).add (xeval_tests))
---
>                         xsnippets_to_validate.write (((xexec_tests).sub (xsingle_tests)).sub (xeval_tests))
675c675
<                         xtree.write ((((xast).xparse)).apply ("4+5+6+7"))
---
>                         xtree.write ((((xast).xparse)).apply ("4-5-6-7"))
736,737c736,737
<                         xa.write ((((xast).xparse)).apply ("foo(1 + 1)"))
<                         xb.write (((xcompile)).apply ("foo(1 + 1)") ("<unknown>") ("exec") (((xast).xPyCF_ONLY_AST)))
---
>                         xa.write ((((xast).xparse)).apply ("foo(1 - 1)"))
>                         xb.write (((xcompile)).apply ("foo(1 - 1)") ("<unknown>") ("exec") (((xast).xPyCF_ONLY_AST)))
779c779
<                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
---
>                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 - 1") ("eval"))
803c803
<                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
---
>                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 - 1") ("eval"))
806c806
<                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 + 1") ("eval"))
---
>                         xsrc.write (((unsupported)).apply (((xast).xparse)) ("1 - 1") ("eval"))
929c929
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("+6"))) (6))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-6"))) (6))
932c932
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("+3.25"))) (3.25))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25"))) (3.25))
935,937c935,937
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("++6"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("+True"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("2+3"))
---
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("--6"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-True"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("2-3"))
946,947d945
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3+6j"))) ((3.add (((unsupported)).apply))))
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3+6j"))) (((3.neg).add (((unsupported)).apply))))
950,951c948,951
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3.25+6.75j"))) ((3.25.add (((unsupported)).apply))))
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25+6.75j"))) (((3.25.neg).add (((unsupported)).apply))))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3-6j"))) ((3.sub (((unsupported)).apply))))
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3-6j"))) (((3.neg).sub (((unsupported)).apply))))
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("3.25-6.75j"))) ((3.25.sub (((unsupported)).apply))))
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("-3.25-6.75j"))) (((3.25.neg).sub (((unsupported)).apply))))
954,959c954,959
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("(3+6j)"))) ((3.add (((unsupported)).apply))))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j+3"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j+3j"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3+-6j"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3+(0+6j)"))
<                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-(3+6j)"))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ("(3-6j)"))) ((3.sub (((unsupported)).apply))))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j-3"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-6j-3j"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3--6j"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("3-(0-6j)"))
>                         bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xast).xliteral_eval)) ("-(3-6j)"))
1622c1622
<                         xtree.write ((((xast).xparse)).apply ("1 + 2"))
---
>                         xtree.write ((((xast).xparse)).apply ("1 - 2"))
1630c1630
<                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ((xbinop)))) ((10.add (((unsupported)).apply))))
---
>                         bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xast).xliteral_eval)).apply ((xbinop)))) ((10.sub (((unsupported)).apply))))
1787c1787
<                         xs.write "x = f\"abc {x + y} abc\""
---
>                         xs.write "x = f\"abc {x - y} abc\""
1790c1790
<                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xbinop)) ("x + y"))
---
>                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xbinop)) ("x - y"))
1841c1841
<                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xleft)) ("1 * 2 + (3 )"))
---
>                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) (((xbinop).xleft)) ("1 * 2 - (3 )"))
1887c1887
<                         xs.write "( ( ( a + b ) ) )"
---
>                         xs.write "( ( ( a - b ) ) )"
1890,1891c1890,1891
<                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xv)) ("a + b"))
<                         xs2.write ("await ".add (xs))
---
>                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs)) ((xv)) ("a - b"))
>                         xs2.write ("await ".sub (xs))
1894c1894
<                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((xv)) ("a + b"))
---
>                         bogusForceDataize.write ((((xself).x_check_content)).apply ((xs2)) ((xv)) ("a - b"))
1909c1909
<                               xs2.write ("await ".add (xs))
---
>                               xs2.write ("await ".sub (xs))
2053c2053
<                             bogusForceDataize.write (((xprint)).apply (((xkind).add "_results = [")))
---
>                             bogusForceDataize.write (((xprint)).apply (((xkind).sub "_results = [")))