memory > xTranslatorCommentWarning
memory > xsymlinks_supported
memory > xenumerate
memory > xPOFileAssertionMixin
memory > xpo_contents
memory > x_
memory > xtime
memory > xwrite_pot_file
memory > xsuper
memory > xSyntaxError
memory > xExtractorTests
memory > xmanagement
memory > xminor_part
memory > xout
memory > xRunInTmpDirMixin
memory > xstr
memory > xskipUnless
memory > xwarnings
memory > xcaptured_stdout
memory > xcontent
memory > xtempfile
memory > xerr
memory > xpot_file
memory > xexecute_from_command_line
memory > xopen
memory > xPath
memory > xtfile
memory > xf
memory > xw
memory > xset
memory > xre
memory > xoverride_settings
memory > xissubclass
memory > xhas_xgettext
memory > xAdminScriptTestCase
memory > xlocale
memory > xmock
memory > xos
memory > xskipIf
memory > xcomment_parts
memory > xfind_command
memory > xStringIO
memory > xshutil
memory > xcopytree
memory > xoptions
memory > xisinstance
memory > xcaptured_stderr
memory > xline
memory > xSimpleTestCase
memory > xCommandError
memory > xlen
memory > xfp
memory > xws
[] > test_extraction
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xassertLocationCommentPresent
        memory > xtest_po_remains_unchanged
        memory > xtest_po_changed_with_new_strings
        memory > xtest_symlink
        memory > xtest_add_location_never
        memory > xtest_extraction_warning
        memory > xPO_FILE_ES
        memory > xwork_subdir
        memory > xassertNotMsgId
        memory > xtest_translate_and_plural_blocktranslate_collision
        memory > xtest_special_char_extracted
        memory > xtest_keep_pot_enabled
        memory > xtest_no_option
        memory > xtest_valid_locale
        memory > xtest_multiple_locales
        memory > xtest_keep_pot_explicitly_disabled
        memory > xtest_add_location_full
        memory > xtest_pot_charset_header_is_utf8
        memory > xassertNotRecentlyModified
        memory > xtest_default_root_settings
        memory > xLOCALES
        memory > xtest_ignore_subdirectory
        memory > xtest_project_locale_paths_pathlib
        memory > x_get_token_line_number
        memory > xtest_comments_extractor
        memory > x_assertPoLocComment
        memory > xPO_FILE
        memory > xtest_copy_plural_forms
        memory > xLOCALE
        memory > xPO_FILE_DE
        memory > xtest_add_location_gettext_version_check
        memory > xtest_makemessages_gettext_version
        memory > xsetUp
        memory > xtest_makemessages_find_files
        memory > xtest_no_location_enabled
        memory > xassertRecentlyModified
        memory > xtest_project_locale_paths
        memory > xassertMsgIdPlural
        memory > xtest_one_locale_excluded_with_locale
        memory > xtest_add_location_file
        memory > xtest_makemessages_no_settings
        memory > xassertLocationCommentNotPresent
        memory > x_run_makemessages
        memory > xtest_multiple_locales_excluded_with_locale
        memory > xtest_unicode_file_name
        memory > xtest_location_comments_for_templatized_files
        memory > xtest_extraction_error
        memory > xtest_command_help
        memory > xgettext_version
        memory > xtest_no_wrap_enabled
        memory > xtest_override_plural_forms
        memory > xtest_invalid_locale
        memory > xtest_no_locale_raises
        memory > xPO_FILE_KO
        memory > xtest_template_message_context_extractor
        memory > x_set_times_for_all_po_files
        memory > xtest_template_comments
        memory > x_test_project_locale_paths
        memory > xtest_ignore_file_patterns
        memory > xassertMsgStr
        memory > xtest_keep_pot_disabled_by_default
        memory > xtest_blocktranslate_trimmed
        memory > xtest_all_locales
        memory > xtest_unicode_decode_error
        memory > xtest_no_location_disabled
        memory > xtest_context_in_single_quotes
        memory > xtest_ignore_directory
        memory > xtest_one_locale_excluded
        memory > xtest_no_wrap_disabled
        memory > xPOT_FILE
        memory > xhas_xgettext2
        memory > xMakeMessagesCommand
        memory > xtest_multiple_locales_excluded
        memory > xPO_FILE_PT
        memory > xtest_media_static_dirs_ignored
        memory > xrequires_gettext_019
        memory > xtest_javascript_literals
        memory > xtest_use_i18n_false
        memory > xtest_po_file_encoding_when_updating
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xLOCALE.write "de"
            xhas_xgettext2.write (((xfind_command)).apply ("xgettext"))
            xgettext_version.write ((xhas_xgettext).if ((((xMakeMessagesCommand)).apply).xgettext_version) "None: is there a None literal in the EO language?")
            xrequires_gettext_019.write (((xskipIf)).apply (((xhas_xgettext).and ((xgettext_version).less (((unsupported)).apply (0) (19))))) ("gettext 0.19 required"))
            (((unsupported)).apply ((xPOFileAssertionMixin)) ((xRunInTmpDirMixin)) ((xSimpleTestCase)) ((((xskipUnless)).apply ((xhas_xgettext)) ("xgettext is mandatory for extraction tests"))))
              seq
                xwork_subdir.write "commands"
                xPO_FILE.write ("locale/%s/LC_MESSAGES/django.po".mod (xLOCALE))
                x_run_makemessages.write
                  [xself]
                    memory > xpo_contents
                    memory > xout
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (2) ((xout)) ((((unsupported)).apply ((xoptions)))))
                        xoutput.write ((((xout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          xpo_contents.write ((((xfp).xread)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xpo_contents)))))
                xassertMsgIdPlural.write
                  [xself xmsgid xhaystack xuse_quotes]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_assertPoKeyword)) ("msgid_plural") ((xmsgid)) ((xhaystack)) ((xuse_quotes)))))
                xassertMsgStr.write
                  [xself xmsgstr xhaystack xuse_quotes]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_assertPoKeyword)) ("msgstr") ((xmsgstr)) ((xhaystack)) ((xuse_quotes)))))
                xassertNotMsgId.write
                  [xself xmsgid xs xuse_quotes]
                    seq > @
                      (((unsupported)).apply)
                        (xuse_quotes).if
                          xmsgid.write ("\"%s\"".mod (xmsgid))
                        xmsgid.write ((((xre).xescape)).apply ((xmsgid)))
                        (((unsupported)).apply (((((xself).xassertTrue)).apply ((((((xre).xsearch)).apply (("^msgid %s".mod (xmsgid))) ((xs)) (((xre).xMULTILINE))).not)))))
                x_assertPoLocComment.write
                  [xself xassert_presence xpo_filename xline_number]
                    memory > xparts
                    memory > xpo_contents
                    memory > xneedle
                    memory > xcwd_prefix
                    memory > xpath
                    memory > xpattern
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xpo_filename)))) ((xfp)))
                          xpo_contents.write ((((xfp).xread)).apply)
                        (((xos).xname).eq "nt").if
                          xcwd_prefix.write ("%s%s".mod (((unsupported)).apply (((xos).xcurdir)) (((xos).xsep))))
                          xcwd_prefix.write ""
                        xpath.write (((((xos).xpath).xjoin)).apply ((xcwd_prefix)) ((((unsupported)).apply ((xcomment_parts)))))
                        xparts.write (((unsupported)).apply ((xpath)))
                        (((xisinstance)).apply ((xline_number)) ((xstr))).if
                          xline_number.write ((((xself).x_get_token_line_number)).apply ((xpath)) ((xline_number)))
                        (((unsupported)).apply ((xline_number)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xparts).xappend)).apply ((":%d".mod (xline_number))))
                        xneedle.write ((("".xjoin)).apply ((xparts)))
                        xpattern.write ((((xre).xcompile)).apply (("^#:.*".add ((((xre).xescape)).apply ((xneedle))))) (((xre).xMULTILINE)))
                        (xassert_presence).if
                          (((unsupported)).apply (((((xself).xassertRegex)).apply ((xpo_contents)) ((xpattern)) (("\"%s\" not found in final .po file.".mod (xneedle))))))
                          (((unsupported)).apply (((((xself).xassertNotRegex)).apply ((xpo_contents)) ((xpattern)) (("\"%s\" shouldn't be in final .po file.".mod (xneedle))))))
                x_get_token_line_number.write
                  [xself xpath xtoken]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xpath)))) ((xf)))
                          (((unsupported)).apply ((((unsupported)).apply ((xline)) ((xcontent)))) ((((xenumerate)).apply ((xf)) (1))))
                            (((unsupported)).apply ((xtoken)) ((xcontent))).if
                              (((unsupported)).apply ((xline)))
                        bogusForceDataize.write ((((xself).xfail)).apply (("The token '%s' could not be found in %s, please check the test config".mod (((unsupported)).apply ((xtoken)) ((xpath))))))
                xassertLocationCommentPresent.write
                  [xself xpo_filename xline_number]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_assertPoLocComment)).apply (TRUE) ((xpo_filename)) ((xline_number)) ((((unsupported)).apply ((xcomment_parts)))))))
                xassertLocationCommentNotPresent.write
                  [xself xpo_filename xline_number]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).x_assertPoLocComment)).apply (FALSE) ((xpo_filename)) ((xline_number)) ((((unsupported)).apply ((xcomment_parts)))))))
                xassertRecentlyModified.write
                  [xself xpath]
                    memory > xdelta
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdelta.write (((((xtime).xtime)).apply).sub (((((xos).xstat)).apply ((xpath))).xst_mtime))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xdelta)) (10) (("%s was recently modified".mod (xpath))))
                xassertNotRecentlyModified.write
                  [xself xpath]
                    memory > xdelta
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdelta.write (((((xtime).xtime)).apply).sub (((((xos).xstat)).apply ((xpath))).xst_mtime))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xdelta)) (10) (("%s wasn't recently modified".mod (xpath))))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xtest_use_i18n_false.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xPO_FILE)) ("utf-8"))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #1") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special trans context #1\"") ((xpo_contents)))
                xtest_no_option.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Type 'manage.py help makemessages' for usage information."
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.core.management.commands.makemessages.sys.argv") ((((unsupported)).apply ("manage.py") ("makemessages"))))))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xCommandError)) ((xmsg)))))
                            bogusForceDataize.write ((((xmanagement).xcall_command)).apply ("makemessages"))
                xtest_valid_locale.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("de"))) ((xout)) (1))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("invalid locale de") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("processing locale de") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xPath)).apply (((xself).xPO_FILE))).xexists)).apply)) (TRUE))
                xtest_invalid_locale.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("pl-PL"))) ((xout)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("invalid locale pl-PL, did you mean pl_PL?") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("processing locale pl-PL") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xPath)).apply ("locale/pl-PL/LC_MESSAGES/django.po")).xexists)).apply)) (FALSE))
                xtest_comments_extractor.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xPO_FILE)) ("utf-8"))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("This comment should not be extracted") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: This comment should be extracted") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Django comment block for translatorsn#. string's meaning unveiled") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #1") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Two-line translator comment #1n#. continued here.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #2") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Two-line translator comment #2n#. continued here.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #3") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Two-line translator comment #3n#. continued here.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #4") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Two-line translator comment #4n#. continued here.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: One-line translator comment #5 -- with non ASCII characters: áéíóúö") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: Two-line translator comment #5 -- with non ASCII characters: áéíóúön#. continued here.") ((xpo_contents)))
                xtest_special_char_extracted.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xPO_FILE)) ("utf-8"))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Non-breaking spaceu00a0:") ((xpo_contents)))
                xtest_blocktranslate_trimmed.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotMsgId)).apply ("Text with a few line breaks.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Again some text with a few line breaks, this time should be trimmed.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Get my line number") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) ("Get my line number") ("templates") ("test.html"))
                xtest_extraction_error.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ("Translation blocks must not include other block tags: blocktranslate (file %s, line 3)".mod (((((xos).xpath).xjoin)).apply ("templates") ("template_with_error.tpl")))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xSyntaxError)) ((xmsg)))))
                          (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) ((((unsupported)).apply ("tpl"))) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ("./templates/template_with_error.tpl.py"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ("./templates/template_0_with_no_error.tpl.py"))))
                xtest_unicode_decode_error.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply ("./not_utf8.sample") ("./not_utf8.txt"))
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("UnicodeDecodeError: skipped file not_utf8.txt in .") (((((xout).xgetvalue)).apply)))
                xtest_unicode_file_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("vidéo.txt"))) ("a")).xclose)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                xtest_extraction_warning.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply ("./code.sample") ("./code_sample.py"))
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("code_sample.py:4") (((((xout).xgetvalue)).apply)))
                xtest_template_message_context_extractor.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special trans context #1\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #7a") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special trans context #2\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #7b") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special trans context #3\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #7c") ((xpo_contents)))
                            (((unsupported)).apply ((xminor_part)) ("abcdefgh"))
                              seq
                                bogusForceDataize.write ((((xself).xassertIn)).apply (((("msgctxt \"context #7.1{}\"".xformat)).apply ((xminor_part)))) ((xpo_contents)))
                                bogusForceDataize.write ((((xself).xassertMsgId)).apply (((("Translatable literal #7.1{}".xformat)).apply ((xminor_part)))) ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context #1\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #8a") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context #2\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #8b-singular") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Translatable literal #8b-plural") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context #3\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #8c-singular") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Translatable literal #8c-plural") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context #4\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #8d %(a)s") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("trans text") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("blocktrans text") ((xpo_contents)))
                xtest_context_in_single_quotes.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Context wrapped in double quotes\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Context wrapped in single quotes\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context wrapped in double quotes\"") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("msgctxt \"Special blocktranslate context wrapped in single quotes\"") ((xpo_contents)))
                xtest_template_comments.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xws)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("always"))
                            (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) ((((unsupported)).apply ("thtml"))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xws)))) (3))
                            (((unsupported)).apply ((xw)) ((xws)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xw).xcategory)) ((xTranslatorCommentWarning)))))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply ((xws)) (0)).xmessage)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply ((xws)) (1)).xmessage)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply (((((unsupported)).apply ((xws)) (2)).xmessage)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9a") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored comment #1") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Translators: ignored i18n comment #1") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9b") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored i18n comment #2") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored comment #2") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9c") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored comment #3") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored i18n comment #3") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9d") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored comment #4") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9e") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored comment #5") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ignored i18n comment #4") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9f") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: valid i18n comment #5") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9g") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: valid i18n comment #6") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9h") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#. Translators: valid i18n comment #7") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9i") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xpo_contents)) ("#..+Translators: valid i18n comment #8"))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xpo_contents)) ("#..+Translators: valid i18n comment #9"))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Translatable literal #9j") ((xpo_contents)))
                xtest_makemessages_find_files.write
                  [xself]
                    memory > xfound_files
                    memory > xcmd
                    memory > xfound_exts
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcmd.write (((xMakeMessagesCommand)).apply)
                        (((unsupported)).apply (((xcmd).xignore_patterns)) ((((unsupported)).apply ("CVS") (".*") ("*~") ("*.pyc"))))
                        (((unsupported)).apply (((xcmd).xsymlinks)) (FALSE))
                        (((unsupported)).apply (((xcmd).xdomain)) ("django"))
                        (((unsupported)).apply (((xcmd).xextensions)) ((((unsupported)).apply ("html") ("txt") ("py"))))
                        (((unsupported)).apply (((xcmd).xverbosity)) (0))
                        (((unsupported)).apply (((xcmd).xlocale_paths)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xcmd).xdefault_locale_path)) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("locale"))))
                        xfound_files.write ((((xcmd).xfind_files)).apply (((xself).xtest_dir)))
                        xfound_exts.write (((unsupported)).apply ((((unsupported)).apply ((((((xos).xpath).xsplitext)).apply (((xtfile).xfile)))) (1))) ((xtfile)) ((xfound_files)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfound_exts).xdifference)).apply ((((unsupported)).apply (".py") (".html") (".txt"))))) ((((xset)).apply)))
                        (((unsupported)).apply (((xcmd).xextensions)) ((((unsupported)).apply ("js"))))
                        (((unsupported)).apply (((xcmd).xdomain)) ("djangojs"))
                        xfound_files.write ((((xcmd).xfind_files)).apply (((xself).xtest_dir)))
                        xfound_exts.write (((unsupported)).apply ((((unsupported)).apply ((((((xos).xpath).xsplitext)).apply (((xtfile).xfile)))) (1))) ((xtfile)) ((xfound_files)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfound_exts).xdifference)).apply ((((unsupported)).apply (".js"))))) ((((xset)).apply)))
                xtest_makemessages_gettext_version.write
                  [xself xmocked_popen_wrapper]
                    memory > xcmd
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_popen_wrapper).xreturn_value)) ((((unsupported)).apply ("xgettext (GNU gettext-tools) 0.18.1nCopyright (C) 1995-1998, 2000-2010 Free Software Foundation, Inc.nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>nThis is free software: you are free to change and redistribute it.nThere is NO WARRANTY, to the extent permitted by law.nWritten by Ulrich Drepper.n") ("") (0))))
                        xcmd.write (((xMakeMessagesCommand)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcmd).xgettext_version)) ((((unsupported)).apply (0) (18) (1))))
                        (((unsupported)).apply (((xmocked_popen_wrapper).xreturn_value)) ((((unsupported)).apply ("xgettext (GNU gettext-tools) 0.17n") ("") (0))))
                        xcmd.write (((xMakeMessagesCommand)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcmd).xgettext_version)) ((((unsupported)).apply (0) (17))))
                        (((unsupported)).apply (((xmocked_popen_wrapper).xreturn_value)) ((((unsupported)).apply ("any other return valuen") ("") (0))))
                        xcmd.write (((xMakeMessagesCommand)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Unable to get gettext version. Is it installed?"))))
                          unsupported
                xtest_po_file_encoding_when_updating.write
                  [xself]
                    memory > xpo_contents
                    memory > xBR_PO_BASE
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xBR_PO_BASE.write "locale/pt_BR/LC_MESSAGES/django"
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply (((xBR_PO_BASE).add ".pristine")) (((xBR_PO_BASE).add ".po")))
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("pt_BR"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xBR_PO_BASE).add ".po")))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xBR_PO_BASE).add ".po")) ("utf-8"))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertMsgStr)).apply ("Größe") ((xpo_contents)))
                xtest_pot_charset_header_is_utf8.write
                  [xself]
                    memory > xpot_filename
                    memory > xpot_contents
                    memory > xmsgs
                    seq > @
                      seq
                        unsupported
                        xmsgs.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xNamedTemporaryFile)).apply)) ((xpot_file)))
                          xpot_filename.write ((xpot_file).xname)
                        bogusForceDataize.write (((xwrite_pot_file)).apply ((xpot_filename)) ((xmsgs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpot_filename)) ("utf-8"))) ((xfp)))
                          seq
                            xpot_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Content-Type: text/plain; charset=UTF-8") ((xpot_contents)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("mañana; charset=CHARSET") ((xpot_contents)))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xPO_FILE.write ("locale/%s/LC_MESSAGES/djangojs.po".mod (xLOCALE))
                xtest_javascript_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ("djangojs"))))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This literal should be included.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("gettext_noop should, too.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This one as well.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("He said, \"hello\".") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("okkkk") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("TEXT") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("It's at http://example.com") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("String") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("/* but this one will be too */ 'cause there is no way of telling...") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("foo") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("bar") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("baz") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("quz") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("foobar") ((xpo_contents)))
                xtest_media_static_dirs_ignored.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("static/"))) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("media_root/"))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ("djangojs"))))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Static content inside app should be included.") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertNotMsgId)).apply ("Content from STATIC_ROOT should not be included") ((xpo_contents)))
                xtest_default_root_settings.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ("djangojs"))))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("Static content inside app should be included.") ((xpo_contents)))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xtest_ignore_directory.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ((((unsupported)).apply ((((((xos).xpath).xjoin)).apply ("ignore_dir") ("*"))))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ignoring directory ignore_dir") ((xout)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This literal should be included.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertNotMsgId)).apply ("This should be ignored.") ((xpo_contents)))
                xtest_ignore_subdirectory.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ((((unsupported)).apply ("templates/*/ignore.html") ("templates/subdir/*"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ignoring directory subdir") ((xout)))
                        bogusForceDataize.write ((((xself).xassertNotMsgId)).apply ("This subdir should be ignored too.") ((xpo_contents)))
                xtest_ignore_file_patterns.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xpo_contents)))) ((((unsupported)).apply (((xself).x_run_makemessages)) ((((unsupported)).apply ("xxx_*"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ignoring file xxx_ignored.html") ((xout)))
                        bogusForceDataize.write ((((xself).xassertNotMsgId)).apply ("This should be ignored too.") ((xpo_contents)))
                xtest_media_static_dirs_ignored.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("static/"))) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("media_root/"))))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xout)) ((x_)))) (((((xself).x_run_makemessages)).apply)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("ignoring directory static") ((xout)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("ignoring directory media_root") ((xout)))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).xsymlinked_dir)) ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("templates_symlinked"))))
                xtest_symlink.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((xsymlinks_supported)).apply).if
                          bogusForceDataize.write ((((xos).xsymlink)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("templates"))) (((xself).xsymlinked_dir)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("os.symlink() not available on this OS + Python version combination."))
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This literal should be included.") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) ("None: is there a None literal in the EO language?") ("templates_symlinked") ("test.html"))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xPO_FILE_ES.write "locale/es/LC_MESSAGES/django.po"
                xtest_copy_plural_forms.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Plural-Forms: nplurals=2; plural=(n != 1)") ((xpo_contents)))
                xtest_override_plural_forms.write
                  [xself]
                    memory > xpo_contents
                    memory > xfound
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("es"))) ((((unsupported)).apply ("djtpl"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE_ES)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xPO_FILE_ES)) ("utf-8"))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            xfound.write ((((xre).xfindall)).apply ((((unsupported)).apply)) ((xpo_contents)) ((((xre).xMULTILINE).or ((xre).xDOTALL))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xlen)).apply ((xfound)))))
                xtest_translate_and_plural_blocktranslate_collision.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) ((((unsupported)).apply ("html") ("djtpl"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply)) ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("First `translate`, then `blocktranslate` with a plural") ((xpo_contents)))
                            bogusForceDataize.write ((((xself).xassertMsgIdPlural)).apply ("Plural for a `translate` and `blocktranslate` collision case") ((xpo_contents)))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xtest_no_wrap_enabled.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This literal should also be included wrapped or not wrapped depending on the use of the --no-wrap option.") ((xpo_contents)))
                xtest_no_wrap_disabled.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          seq
                            xpo_contents.write ((((xfp).xread)).apply)
                            (((unsupported)).apply (((xself).xassertMsgId)) ("\"\"n\"This literal should also be included wrapped or not wrapped depending on the \"n\"use of the --no-wrap option.\"") ((xpo_contents)) (FALSE))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xtest_no_location_enabled.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        bogusForceDataize.write ((((xself).xassertLocationCommentNotPresent)).apply (((xself).xPO_FILE)) ("None: is there a None literal in the EO language?") ("test.html"))
                xtest_no_location_disabled.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) ("Translatable literal #6b") ("templates") ("test.html"))
                xtest_location_comments_for_templatized_files.write
                  [xself]
                    memory > xpo_contents
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xPO_FILE)))) ((xfp)))
                          xpo_contents.write ((((xfp).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("#: templates/test.html.py") ((xpo_contents)))
                        bogusForceDataize.write ((((xself).xassertLocationCommentNotPresent)).apply (((xself).xPO_FILE)) ("None: is there a None literal in the EO language?") (".html.py"))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) (5) ("templates") ("test.html"))
                xtest_add_location_full.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) ("full"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) ("Translatable literal #6b") ("templates") ("test.html"))
                xtest_add_location_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) ("file"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        bogusForceDataize.write ((((xself).xassertLocationCommentPresent)).apply (((xself).xPO_FILE)) ("None: is there a None literal in the EO language?") ("templates") ("test.html"))
                        bogusForceDataize.write ((((xself).xassertLocationCommentNotPresent)).apply (((xself).xPO_FILE)) ("Translatable literal #6b") ("templates") ("test.html"))
                xtest_add_location_never.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) ("never"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE)))))
                        bogusForceDataize.write ((((xself).xassertLocationCommentNotPresent)).apply (((xself).xPO_FILE)) ("None: is there a None literal in the EO language?") ("test.html"))
                xtest_add_location_gettext_version_check.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "The --add-location option requires gettext 0.19 or later. You have 0.18.99."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) ("full"))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xPOT_FILE.write "locale/django.pot"
                xtest_keep_pot_disabled_by_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xself).xPOT_FILE)))))
                xtest_keep_pot_explicitly_disabled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xself).xPOT_FILE)))))
                xtest_keep_pot_enabled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPOT_FILE)))))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xPO_FILE_PT.write "locale/pt/LC_MESSAGES/django.po"
                xPO_FILE_DE.write "locale/de/LC_MESSAGES/django.po"
                xPO_FILE_KO.write "locale/ko/LC_MESSAGES/django.po"
                xLOCALES.write (((unsupported)).apply ("pt") ("de") ("ch"))
                xtest_multiple_locales.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("pt") ("de"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE_PT)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE_DE)))))
                xtest_all_locales.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply ("locale") ("_do_not_pick"))))
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("ja") ("es_AR"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xself).xPO_FILE_KO)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ("locale/_do_not_pick/LC_MESSAGES/django.po"))))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xwork_subdir.write "exclude"
                xLOCALES.write (((unsupported)).apply ("en") ("fr") ("it"))
                xPO_FILE.write "locale/%s/LC_MESSAGES/django.po"
                x_set_times_for_all_po_files.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xlocale)) (((xself).xLOCALES)))
                          bogusForceDataize.write ((((xos).xutime)).apply ((((xself).xPO_FILE).mod (xlocale))) ((((unsupported)).apply (0) (0))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        bogusForceDataize.write (((xcopytree)).apply ("canned_locale") ("locale"))
                        bogusForceDataize.write ((((xself).x_set_times_for_all_po_files)).apply)
                xtest_command_help.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((((xcaptured_stderr)).apply)))
                        bogusForceDataize.write (((xexecute_from_command_line)).apply ((((unsupported)).apply ("django-admin") ("help") ("makemessages"))))
                xtest_one_locale_excluded.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("it"))) (0))
                        bogusForceDataize.write ((((xself).xassertRecentlyModified)).apply ((((xself).xPO_FILE).mod "en")))
                        bogusForceDataize.write ((((xself).xassertRecentlyModified)).apply ((((xself).xPO_FILE).mod "fr")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "it")))
                xtest_multiple_locales_excluded.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("it") ("fr"))) (0))
                        bogusForceDataize.write ((((xself).xassertRecentlyModified)).apply ((((xself).xPO_FILE).mod "en")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "fr")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "it")))
                xtest_one_locale_excluded_with_locale.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("en") ("fr"))) ((((unsupported)).apply ("fr"))) (0))
                        bogusForceDataize.write ((((xself).xassertRecentlyModified)).apply ((((xself).xPO_FILE).mod "en")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "fr")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "it")))
                xtest_multiple_locales_excluded_with_locale.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ("en") ("fr") ("it"))) ((((unsupported)).apply ("fr") ("it"))) (0))
                        bogusForceDataize.write ((((xself).xassertRecentlyModified)).apply ((((xself).xPO_FILE).mod "en")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "fr")))
                        bogusForceDataize.write ((((xself).xassertNotRecentlyModified)).apply ((((xself).xPO_FILE).mod "it")))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xwork_subdir.write "project_dir"
                xtest_no_locale_raises.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Unable to find a locale path to store translations for file __init__.py. Make sure the 'locale' directory exists in an app or LOCALE_PATHS setting is set."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xmanagement).xCommandError)) ((xmsg)))))
                          (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ("./app_no_locale/test.html.py"))))
                xtest_project_locale_paths.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_project_locale_paths)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("project_locale"))))
                xtest_project_locale_paths_pathlib.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_project_locale_paths)).apply (((((xPath)).apply (((xself).xtest_dir))).div "project_locale")))
                x_test_project_locale_paths.write
                  [xself xlocale_path]
                    memory > xpo_contents
                    memory > xproject_de_locale
                    memory > xapp_de_locale
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xlocale_path)))))))
                          seq
                            (((unsupported)).apply (((xmanagement).xcall_command)) ("makemessages") ((((unsupported)).apply ((xLOCALE)))) (0))
                            xproject_de_locale.write (((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("project_locale") ("de") ("LC_MESSAGES") ("django.po"))
                            xapp_de_locale.write (((((xos).xpath).xjoin)).apply (((xself).xtest_dir)) ("app_with_locale") ("locale") ("de") ("LC_MESSAGES") ("django.po"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xproject_de_locale)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xapp_de_locale)))))
                            (((unsupported)).apply ((((xopen)).apply ((xproject_de_locale)))) ((xfp)))
                              seq
                                xpo_contents.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This app has no locale directory") ((xpo_contents)))
                                bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This is a project-level string") ((xpo_contents)))
                            (((unsupported)).apply ((((xopen)).apply ((xapp_de_locale)))) ((xfp)))
                              seq
                                xpo_contents.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This app has a locale directory") ((xpo_contents)))
            (((unsupported)).apply ((xAdminScriptTestCase)) ((((xskipUnless)).apply ((xhas_xgettext)) ("xgettext is mandatory for extraction tests"))))
              xtest_makemessages_no_settings.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) (((((xself).xrun_django_admin)).apply ((((unsupported)).apply ("makemessages") ("-l") ("en") ("-v") ("0"))))))
                      bogusForceDataize.write ((((xself).xassertNoOutput)).apply ((xerr)))
                      bogusForceDataize.write ((((xself).xassertNoOutput)).apply ((xout)))
            (((unsupported)).apply ((xExtractorTests)))
              seq
                xwork_subdir.write "unchanged"
                xsetUp.write
                  [xself]
                    memory > xpo_contents
                    memory > xpo_file_tmp
                    memory > xpo_file
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        xpo_file.write (((xPath)).apply (((xself).xPO_FILE)))
                        xpo_file_tmp.write (((xPath)).apply ((((xself).xPO_FILE).add ".tmp")))
                        (((xos).xname).eq "nt").if
                          seq
                            xpo_contents.write (((((((xpo_file_tmp).xread_text)).apply).xreplace)).apply ("#: __init__.py") ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xpo_file).xwrite_text)).apply ((xpo_contents)))
                          bogusForceDataize.write ((((xpo_file_tmp).xrename)).apply ((xpo_file)))
                        (((unsupported)).apply (((xself).xoriginal_po_contents)) (((((xpo_file).xread_text)).apply)))
                xtest_po_remains_unchanged.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpo_contents)))) (((((xself).x_run_makemessages)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpo_contents)) (((xself).xoriginal_po_contents)))
                xtest_po_changed_with_new_strings.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((((xPath)).apply ("models.py.tmp")).xrename)).apply ("models.py"))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xpo_contents)))) (((((xself).x_run_makemessages)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xpo_contents)) (((xself).xoriginal_po_contents)))
                        bogusForceDataize.write ((((xself).xassertMsgId)).apply ("This is a hitherto undiscovered translatable string.") ((xpo_contents)))