memory > xsymlinks_supported
memory > xTestCollection
memory > xDummyStorage
memory > xNotImplementedError
memory > xTEST_SETTINGS
memory > xPath
memory > xoverride_settings
memory > xstorage
memory > xextend_sys_path
memory > xStaticFilesTestCase
memory > xTEST_ROOT
memory > xdatetime
memory > xSystemCheckError
memory > xempty
memory > xstr
memory > xout
memory > xcall_command
memory > xTestNoFilesCreated
memory > xtempfile
memory > xerr
memory > xrunserver
memory > xopen
memory > xf
memory > xsettings
memory > xRequestFactory
memory > xsuper
memory > xAdminScriptTestCase
memory > xmocked
memory > xmock
memory > xos
memory > xCollectionTestCase
memory > xTestDefaults
memory > xTestCollectionDryRun
memory > xstatic_dir
memory > xStringIO
memory > xshutil
memory > xunittest
memory > xImproperlyConfigured
memory > xkwargs
memory > xcollectstatic
memory > xline
memory > xroot
memory > xCommandError
memory > xlen
[] > test_management
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_ignore
        memory > xtest_dir_not_exists
        memory > x_get_file
        memory > xtest_all_files
        memory > xstaticfiles_copied_msg
        memory > xtest_no_remote_link
        memory > xrun_collectstatic_in_setUp
        memory > xtest_verbosity_1
        memory > xmkdtemp
        memory > xtearDown
        memory > xoverwrite_warning_msg
        memory > xtest_verbosity_0
        memory > xtest_links_created
        memory > xcopying_msg
        memory > xtest_no_warning_for_empty_staticdir
        memory > xtest_no_common_ignore_patterns
        memory > xfiles_copied_msg
        memory > xtest_collectstatis_check
        memory > xtest_all_files_less_verbose
        memory > x_collectstatic_output
        memory > xwarning_string
        memory > xtest_symlinks_and_files_replaced
        memory > xtest_missing_settings_dont_prevent_help
        memory > xtest_cancelled
        memory > xtest_404_response
        memory > xtest_warning_when_overwriting_files_in_staticdir
        memory > xtest_local_storage_detection_helper
        memory > xtest_warning_when_clearing_staticdir
        memory > xtest_no_warning
        memory > xtest_verbosity_2
        memory > xtest_all_files_more_verbose
        memory > xtest_common_ignore_patterns
        memory > xtest_no_files_created
        memory > xsetUp
        memory > xtest_clear_broken_symlink
        memory > xtest_verbosity_2_with_post_process
        memory > xdelete_warning_msg
        memory > xtest_broken_symlink
        memory > xrun_collectstatic
        memory > xtest_ordering_override
        memory > xpost_process_msg
        memory > xtest_verbosity_1_with_post_process
        memory > xtest_storage_properties
        memory > xtest_handle_path_notimplemented
        memory > xtest_no_warning_when_staticdir_does_not_exist
        memory > xtest_location_empty
        memory > xtest_warning
        memory > xtest_middleware_loaded_only_once
        memory > xtest_pathlib
        memory > xmock_input
        memory > xtest_skips_newer_files_in_remote_storage
        memory > xtest_cleared_not_found
        memory > xtest_custom_ignore_patterns
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              xtest_no_files_created.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply (((xsettings).xSTATIC_ROOT)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xStaticFilesTestCase)))
              seq
                xtest_middleware_loaded_only_once.write
                  [xself]
                    memory > xcommand
                    seq > @
                      (((unsupported)).apply)
                        xcommand.write ((xrunserver).xCommand)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.middleware.common.CommonMiddleware"))) ((xmocked)))
                          seq
                            (((unsupported)).apply (((xcommand).xget_handler)) (TRUE) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked).xcall_count)) (1))
                xtest_404_response.write
                  [xself]
                    memory > xhandler
                    memory > xreq
                    memory > xmissing_static_file
                    memory > xcommand
                    memory > xresponse
                    seq > @
                      seq
                        xcommand.write ((xrunserver).xCommand)
                        xhandler.write (((unsupported)).apply (((xcommand).xget_handler)) (TRUE) (TRUE))
                        xmissing_static_file.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_URL)) ("unknown.css"))
                        xreq.write ((((xRequestFactory).xget)).apply ((xmissing_static_file)))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (FALSE))))
                          seq
                            xresponse.write ((((xhandler).xget_response)).apply ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (TRUE))))
                          seq
                            xresponse.write ((((xhandler).xget_response)).apply ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
            (((unsupported)).apply ((xTestDefaults)) ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                x_get_file.write
                  [xself xfilepath]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((unsupported)).apply ((xcall_command)) ("findstatic") ((xfilepath)) (FALSE) (0) ((xStringIO)))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpath)) ("utf-8"))) ((xf)))
                          (((unsupported)).apply (((xf).xread)))
                xtest_all_files.write
                  [xself]
                    memory > xresult
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((unsupported)).apply ((xcall_command)) ("findstatic") ("test/file.txt") (1) ((xStringIO)))
                        xlines.write (((unsupported)).apply (((xline).xstrip)) ((xline)) (((((xresult).xsplit)).apply ("n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlines)))) (3))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("project") ((((unsupported)).apply ((xlines)) (1))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("apps") ((((unsupported)).apply ((xlines)) (2))))
                xtest_all_files_less_verbose.write
                  [xself]
                    memory > xresult
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((unsupported)).apply ((xcall_command)) ("findstatic") ("test/file.txt") (0) ((xStringIO)))
                        xlines.write (((unsupported)).apply (((xline).xstrip)) ((xline)) (((((xresult).xsplit)).apply ("n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlines)))) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("project") ((((unsupported)).apply ((xlines)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("apps") ((((unsupported)).apply ((xlines)) (1))))
                xtest_all_files_more_verbose.write
                  [xself]
                    memory > xsearched_locations
                    memory > xresult
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((unsupported)).apply ((xcall_command)) ("findstatic") ("test/file.txt") (2) ((xStringIO)))
                        xlines.write (((unsupported)).apply (((xline).xstrip)) ((xline)) (((((xresult).xsplit)).apply ("n"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("project") ((((unsupported)).apply ((xlines)) (1))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("apps") ((((unsupported)).apply ((xlines)) (2))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Looking in the following locations:") ((((unsupported)).apply ((xlines)) (3))))
                        xsearched_locations.write (((", ".xjoin)).apply ((((unsupported)).apply ((xlines)) ((((unsupported)).apply (4))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("staticfiles_tests") ("apps") ("test") ("static"))) ((xsearched_locations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("staticfiles_tests") ("apps") ("no_label") ("static"))) ((xsearched_locations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEST_SETTINGS)) ("STATICFILES_DIRS"))) (1))) (1))) ((xsearched_locations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEST_SETTINGS)) ("STATICFILES_DIRS"))) (0))) ((xsearched_locations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xstr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEST_SETTINGS)) ("STATICFILES_DIRS"))) (2))))) ((xsearched_locations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("staticfiles_tests") ("project") ("site_media") ("media"))) ((xsearched_locations)))
            (((unsupported)).apply ((xStaticFilesTestCase)))
              seq
                xtest_location_empty.write
                  [xself]
                    memory > xerr
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "without having set the STATIC_ROOT setting to a filesystem path"
                        xerr.write (xStringIO)
                        (((unsupported)).apply ((xroot)) ((((unsupported)).apply ("") ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((xroot)))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                              (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (0) ((xerr)))
                xtest_local_storage_detection_helper.write
                  [xself]
                    memory > xstaticfiles_storage
                    memory > xcommand
                    seq > @
                      seq
                        xstaticfiles_storage.write ((xstorage).xstaticfiles_storage)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((xstorage).xstaticfiles_storage).x_wrapped)) ((xempty)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("django.contrib.staticfiles.storage.StaticFilesStorage"))))
                              seq
                                xcommand.write ((xcollectstatic).xCommand)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcommand).xis_local_storage)))
                            (((unsupported)).apply ((((xstorage).xstaticfiles_storage).x_wrapped)) ((xempty)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("staticfiles_tests.storage.DummyStorage"))))
                              seq
                                xcommand.write ((xcollectstatic).xCommand)
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcommand).xis_local_storage)))
                            (((unsupported)).apply (((xcollectstatic).xstaticfiles_storage)) (((xstorage).xFileSystemStorage)))
                            xcommand.write ((xcollectstatic).xCommand)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcommand).xis_local_storage)))
                            (((unsupported)).apply (((xcollectstatic).xstaticfiles_storage)) ((xDummyStorage)))
                            xcommand.write ((xcollectstatic).xCommand)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcommand).xis_local_storage)))
                          seq
                            (((unsupported)).apply (((xstaticfiles_storage).x_wrapped)) ((xempty)))
                            (((unsupported)).apply (((xcollectstatic).xstaticfiles_storage)) ((xstaticfiles_storage)))
                            (((unsupported)).apply (((xstorage).xstaticfiles_storage)) ((xstaticfiles_storage)))
                xtest_collectstatis_check.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "The STATICFILES_DIRS setting is not a tuple or list."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xSystemCheckError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE))
            (((unsupported)).apply ((xAdminScriptTestCase)))
              xtest_missing_settings_dont_prevent_help.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      (((unsupported)).apply (((xself).xwrite_settings)) ("settings.py") ((((unsupported)).apply ("django.contrib.staticfiles"))))
                      (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) (((((xself).xrun_manage)).apply ((((unsupported)).apply ("help") ("collectstatic"))))))
                      bogusForceDataize.write ((((xself).xassertNoOutput)).apply ((xerr)))
            (((unsupported)).apply ((xTestDefaults)) ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                xtest_ignore.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("test/test.ignoreme"))
                xtest_common_ignore_patterns.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("test/.hidden"))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("test/backup~"))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("test/CVS"))
                xtest_pathlib.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFileContains)).apply ("pathlib.txt") ("pathlib"))
            (((unsupported)).apply ((xTestCollection)))
              xmkdtemp.write
                [xself]
                  memory > xtmp_dir
                  seq > @
                    seq
                      xtmp_dir.write ((xsuper).xmkdtemp)
                      (((unsupported)).apply ((((xPath)).apply ((xtmp_dir)))))
            (((unsupported)).apply ((xCollectionTestCase)))
              seq
                xcopying_msg.write "Copying "
                xrun_collectstatic_in_setUp.write FALSE
                xpost_process_msg.write "Post-processed"
                xstaticfiles_copied_msg.write "static files copied to"
                xtest_verbosity_0.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (0) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstdout).xgetvalue)) (""))
                xtest_verbosity_1.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (1) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xstaticfiles_copied_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xcopying_msg)) ((xoutput)))
                xtest_verbosity_2.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (2) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xstaticfiles_copied_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xcopying_msg)) ((xoutput)))
                xtest_verbosity_1_with_post_process.write
                  [xself]
                    memory > xstdout
                    seq > @
                      (((unsupported)).apply)
                        xstdout.write (xStringIO)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (1) ((xstdout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xpost_process_msg)) (((xstdout).xgetvalue)))
                xtest_verbosity_2_with_post_process.write
                  [xself]
                    memory > xstdout
                    seq > @
                      (((unsupported)).apply)
                        xstdout.write (xStringIO)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (2) ((xstdout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xpost_process_msg)) (((xstdout).xgetvalue)))
            (((unsupported)).apply ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                xrun_collectstatic.write
                  [xself]
                    memory > xclear_filepath
                    seq > @
                      (((unsupported)).apply)
                        xclear_filepath.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("cleared.txt"))
                        (((unsupported)).apply ((((xopen)).apply ((xclear_filepath)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("should be cleared"))
                        (((unsupported)).apply (((xsuper).xrun_collectstatic)) (TRUE))
                xtest_cleared_not_found.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("cleared.txt"))
                xtest_dir_not_exists.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply (((xsettings).xSTATIC_ROOT)))
                        (((unsupported)).apply (((xsuper).xrun_collectstatic)) (TRUE))
                xtest_handle_path_notimplemented.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("cleared.txt"))
            (((unsupported)).apply ((xCollectionTestCase)))
              seq
                xoverwrite_warning_msg.write "This will overwrite existing files!"
                xdelete_warning_msg.write "This will DELETE ALL FILES in this location!"
                xfiles_copied_msg.write "static files copied"
                xmock_input.write
                  [xstdout]
                    memory > x_input
                    seq > @
                      (((unsupported)).apply)
                        x_input.write
                          [xmsg]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstdout).xwrite)).apply ((xmsg)))
                                (((unsupported)).apply ("yes"))
                        (((unsupported)).apply ((x_input)))
                xtest_warning_when_clearing_staticdir.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") (((((xself).xmock_input)).apply ((xstdout)))))))
                          (((unsupported)).apply ((xcall_command)) ("collectstatic") (TRUE) (TRUE) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xoverwrite_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xdelete_warning_msg)) ((xoutput)))
                xtest_warning_when_overwriting_files_in_staticdir.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") (((((xself).xmock_input)).apply ((xstdout)))))))
                          (((unsupported)).apply ((xcall_command)) ("collectstatic") (TRUE) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xoverwrite_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xdelete_warning_msg)) ((xoutput)))
                xtest_no_warning_when_staticdir_does_not_exist.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply (((xsettings).xSTATIC_ROOT)))
                        (((unsupported)).apply ((xcall_command)) ("collectstatic") (TRUE) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xoverwrite_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xdelete_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xfiles_copied_msg)) ((xoutput)))
                xtest_no_warning_for_empty_staticdir.write
                  [xself]
                    memory > xstdout
                    memory > xoutput
                    seq > @
                      seq
                        xstdout.write (xStringIO)
                        (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xTemporaryDirectory)) ("collectstatic_empty_staticdir_test"))) ((xstatic_dir)))
                          (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((xstatic_dir)))))
                            (((unsupported)).apply ((xcall_command)) ("collectstatic") (TRUE) ((xstdout)))
                        xoutput.write ((xstdout).xgetvalue)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xoverwrite_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xdelete_warning_msg)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xfiles_copied_msg)) ((xoutput)))
                xtest_cancelled.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ((((unsupported)).apply ("no"))))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Collecting static files cancelled"))))
                            (((unsupported)).apply ((xcall_command)) ("collectstatic") (TRUE))
            (((unsupported)).apply ((xTestDefaults)) ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                xrun_collectstatic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsuper).xrun_collectstatic)) (FALSE))
                xtest_no_common_ignore_patterns.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFileContains)).apply ("test/.hidden") ("should be ignored"))
                        bogusForceDataize.write ((((xself).xassertFileContains)).apply ("test/backup~") ("should be ignored"))
                        bogusForceDataize.write ((((xself).xassertFileContains)).apply ("test/CVS") ("should be ignored"))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("staticfiles_tests.apps.staticfiles_config.IgnorePatternsAppConfig") ("staticfiles_tests.apps.test"))))))
              xtest_custom_ignore_patterns.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ("test/nonascii.css"))
                      bogusForceDataize.write ((((xself).xassertFileContains)).apply ("test/.hidden") ("should be ignored"))
                      bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ((((((xos).xpath).xjoin)).apply ("test") ("vendor") ("module.js"))))
            (((unsupported)).apply ((xTestNoFilesCreated)) ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                xrun_collectstatic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsuper).xrun_collectstatic)) (TRUE))
            (((unsupported)).apply ((xTestCollectionDryRun)) ((((unsupported)).apply ((xoverride_settings)) ("django.contrib.staticfiles.storage.ManifestStaticFilesStorage"))))
            (((unsupported)).apply ((xCollectionTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtemp_dir)) (((xtempfile).xmkdtemp)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) (((xself).xtemp_dir)))
                        (((unsupported)).apply (((xself).xorig_path)) ((((((xos).xpath).xjoin)).apply ((xTEST_ROOT)) ("apps") ("no_label") ("static") ("file2.txt"))))
                        (((unsupported)).apply (((xself).xorig_mtime)) ((((((xos).xpath).xgetmtime)).apply (((xself).xorig_path)))))
                        (((unsupported)).apply (((xself).xorig_atime)) ((((((xos).xpath).xgetatime)).apply (((xself).xorig_path)))))
                        (((unsupported)).apply (((xself).xtemp_app_path)) ((((((xos).xpath).xjoin)).apply (((xself).xtemp_dir)) ("staticfiles_test_app"))))
                        (((unsupported)).apply (((xself).xtestfile_path)) ((((((xos).xpath).xjoin)).apply (((xself).xtemp_app_path)) ("static") ("file2.txt"))))
                        bogusForceDataize.write ((((xos).xmakedirs)).apply (((xself).xtemp_app_path)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtemp_app_path)) ("__init__.py"))) ("w+"))))
                        bogusForceDataize.write ((((xos).xmakedirs)).apply ((((((xos).xpath).xdirname)).apply (((xself).xtestfile_path)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtestfile_path)) ("w+"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("duplicate of file2.txt"))
                        bogusForceDataize.write ((((xos).xutime)).apply (((xself).xtestfile_path)) ((((unsupported)).apply ((((xself).xorig_atime).sub 1)) ((((xself).xorig_mtime).sub 1)))))
                        (((unsupported)).apply (((xself).xsettings_with_test_app)) ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("prepend") ("staticfiles_test_app"))))))
                        (((unsupported)).apply ((((xextend_sys_path)).apply (((xself).xtemp_dir)))))
                          unsupported
                        unsupported
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                xtest_ordering_override.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFileContains)).apply ("file2.txt") ("duplicate of file2.txt"))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertFileContains)).apply ("file2.txt") ("duplicate of file2.txt"))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply)))))
              seq
                (((unsupported)).apply)
                xwarning_string.write "Found another file"
                x_collectstatic_output.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write (xStringIO)
                        (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (3) ((xout)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xout).xgetvalue)))
                xtest_no_warning.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xoutput.write (((unsupported)).apply (((xself).x_collectstatic_output)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xwarning_string)) ((xoutput)))
                xtest_warning.write
                  [xself]
                    memory > xduplicate
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xtempfile).xTemporaryDirectory)) ((xstatic_dir)))
                          seq
                            xduplicate.write (((((xos).xpath).xjoin)).apply ((xstatic_dir)) ("test") ("file.txt"))
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xdirname)).apply ((xduplicate)))))
                            (((unsupported)).apply ((((xopen)).apply ((xduplicate)) ("w+"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ("duplicate of file.txt"))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((xstatic_dir)))))))
                              xoutput.write (((unsupported)).apply (((xself).x_collectstatic_output)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xwarning_string)) ((xoutput)))
                            bogusForceDataize.write ((((xos).xremove)).apply ((xduplicate)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((xstatic_dir)))))))
                              xoutput.write (((unsupported)).apply (((xself).x_collectstatic_output)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xwarning_string)) ((xoutput)))
            (((unsupported)).apply ((xTestNoFilesCreated)) ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("staticfiles_tests.storage.DummyStorage"))))
              seq
                (((unsupported)).apply)
                xtest_storage_properties.write
                  [xself]
                    memory > xstorage
                    seq > @
                      seq
                        xstorage.write (xDummyStorage)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstorage).xget_modified_time)).apply ("name"))) ((((unsupported)).apply (((xdatetime).xdatetime)) (1970) (1) (1) ((((xdatetime).xtimezone).xutc)))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ("This backend doesn't support absolute paths."))))
                          bogusForceDataize.write ((((xstorage).xpath)).apply ("name"))
            (((unsupported)).apply ((xCollectionTestCase)))
              xtest_skips_newer_files_in_remote_storage.write
                [xself]
                  memory > xstdout
                  memory > xoutput
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      xstdout.write (xStringIO)
                      (((unsupported)).apply (((xself).xrun_collectstatic)) ((xstdout)) (2))
                      xoutput.write ((xstdout).xgetvalue)
                      bogusForceDataize.write ((((xself).xassertIn)).apply ("Skipping 'test.txt' (not modified)") ((xoutput)))
            (((unsupported)).apply ((xTestDefaults)) ((xCollectionTestCase)) (((((xunittest).xskipUnless)).apply ((xsymlinks_supported)) ("Must be able to symlink to run this test."))))
              seq
                (((unsupported)).apply)
                xrun_collectstatic.write
                  [xself xclear xlink]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xsuper).xrun_collectstatic)) ((xlink)) ((xclear)) ((((unsupported)).apply ((xkwargs)))))
                xtest_links_created.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xislink)).apply ((((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("test.txt"))))))
                xtest_broken_symlink.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xpath.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("test.txt"))
                        bogusForceDataize.write ((((xos).xunlink)).apply ((xpath)))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xislink)).apply ((xpath)))))
                xtest_symlinks_and_files_replaced.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xpath.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("test.txt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xislink)).apply ((xpath)))))
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xislink)).apply ((xpath)))))
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xislink)).apply ((xpath)))))
                xtest_clear_broken_symlink.write
                  [xself]
                    memory > xnonexistent_file_path
                    memory > xbroken_symlink_path
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnonexistent_file_path.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("nonexistent.txt"))
                        xbroken_symlink_path.write (((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("symlink.txt"))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((xnonexistent_file_path)) ((xbroken_symlink_path)))
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xlexists)).apply ((xbroken_symlink_path)))))
                xtest_no_remote_link.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Can't symlink to a remote destination."))))
                          unsupported