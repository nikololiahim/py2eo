memory > ximportlib
memory > xstr
memory > xtempfile
memory > xSimpleUploadedFile
memory > xCallableSettingWrapper
memory > xcm
memory > xk
memory > xinspect
memory > xCallableSettingWithSlots
memory > xthreading
memory > xreverse
memory > xWrappedCallable
memory > xsensitive_args_function_caller
memory > xfilename
memory > xAttributeError
memory > xfd
memory > xSafeExceptionReporterFilter
memory > x_lazy_re_compile
memory > xexpected
memory > xExceptionReporter
memory > xRuntimeError
memory > xsetting
memory > xValueError
memory > xnon_sensitive_view
memory > xHttpRequest
memory > xCustomExceptionReporterFilter
memory > xExceptionUser
memory > xtmpfile
memory > xindex_page
memory > xexec
memory > xOomOutput
memory > xNonUtf8Output
memory > xrange
memory > xsensitive_kwargs_function_caller
memory > xurl
memory > xIndexError
memory > xnewline
memory > xparanoid_view
memory > xMemoryError
memory > xconnection
memory > xpath
memory > xPath
memory > xget_default_exception_reporter_filter
memory > xmultivalue_dict_key_error
memory > xHttpResponse
memory > xrepr
memory > xre
memory > xDatabaseError
memory > xException
memory > xtechnical_404_response
memory > xtb
memory > xdefault_urlconf
memory > xcustom_exception_reporter_filter_view
memory > xtechnical_500_response
memory > xcursor
memory > xi
memory > xcompile
memory > xRequestFactory
memory > xIntConverter
memory > xsys
memory > xrender
memory > xMyClass
memory > xsensitive_view
memory > xExceptionCycleWarning
memory > xm
memory > xtuple
memory > xbool
memory > xoverride_settings
memory > xHttp404
memory > xmark_safe
memory > xexc_type
memory > xLoggingCaptureMixin
memory > xmail
memory > xmock
memory > xos
memory > xTemplateDoesNotExist
memory > xv
memory > xBrokenEvaluation
memory > xexc_value
memory > xExceptionReportTestMixin
memory > x__file__
memory > xSimpleLazyObject
memory > xStringIO
memory > xexplicit
memory > xexc
memory > xLargeOutput
memory > xSimpleTestCase
memory > xsensitive_method_view
memory > xUser
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_debug
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_mid_stack_exception_without_traceback
        memory > xtest_files
        memory > xtest_message_only
        memory > xtest_template_loader_postmortem
        memory > xtest_custom_exception_reporter_filter
        memory > xtest_unprintable_values_handling
        memory > xtest_template_exceptions
        memory > xtest_request_and_message
        memory > x__str__
        memory > xtest_sensitive_function_keyword_arguments
        memory > xurlpatterns
        memory > xdatabases
        memory > xtest_technical_404_converter_raise_404
        memory > xtest_sensitive_post_parameters_not_called
        memory > xtest_safestring_in_exception
        memory > xtest_cleanse_setting_basic
        memory > xtest_404
        memory > xtest_local_variable_escaping
        memory > xverify_paranoid_response
        memory > xtest_template_exception
        memory > xtest_get_raw_insecure_uri
        memory > xtest_reporting_frames_source_not_match
        memory > xtest_sensitive_settings
        memory > xtest_regression_21530
        memory > xtest_ignore_traceback_evaluation_exceptions
        memory > xtest_request_with_items_key
        memory > xrf
        memory > xtest_request_meta_filtering
        memory > xtest_dict_setting_with_non_str_key
        memory > xtest_cleanse_setting_recurses_in_dictionary_with_non_string_key
        memory > xtest_no_template_source_loaders
        memory > xtest_repr
        memory > xtest_template_override_exception_reporter
        memory > xtest_default_urlconf_template
        memory > xtest_encoding_error
        memory > xtest_no_request
        memory > xtest_cleanse_setting_ignore_case
        memory > xverify_unsafe_response
        memory > xtest_sensitive_post_parameters_http_request
        memory > xtest_400_bad_request
        memory > xtest_exception_fetching_user
        memory > xtest_reporting_frames_for_cyclic_reference
        memory > xverify_unsafe_email
        memory > xtest_cleansed_substitute_override
        memory > xsetUp
        memory > xbreakfast_data
        memory > xtest_sensitive_function_arguments
        memory > xtest_too_large_values_handling
        memory > xtest_sensitive_variables_not_called
        memory > xtest_non_utf8_values_handling
        memory > xtest_setting_allows_custom_subclass
        memory > xtest_400
        memory > xtest_suppressed_context
        memory > xtest_reporting_of_nested_exceptions
        memory > xtest_template_encoding
        memory > xtest_sensitive_method
        memory > xverify_safe_email
        memory > xtest_non_l10ned_numeric_ids
        memory > xtest_paranoid_request
        memory > xtest_hidden_settings_override
        memory > xtest_exception_report_uses_meta_filtering
        memory > xtest_classbased_technical_500
        memory > xtest_non_html_response_encoding
        memory > xtest_unfrozen_importlib
        memory > xtest_handle_db_exception
        memory > xtest_404_empty_path_not_in_urls
        memory > xtest_technical_500
        memory > xtest_403
        memory > xtest_non_sensitive_request
        memory > xtest_callable_settings_forbidding_to_set_attributes
        memory > xverify_paranoid_email
        memory > xtest_callable_settings
        memory > xtest_no_exception
        memory > xtest_technical_404
        memory > xcleansed_substitute
        memory > xtest_multivalue_dict_key_error
        memory > xhidden_settings
        memory > xtest_reporting_frames_without_source
        memory > xtest_sensitive_request
        memory > xtest_403_template
        memory > xtest_settings_with_sensitive_keys
        memory > xtest_template_not_found_error
        memory > xtest_innermost_exception_without_traceback
        memory > xtearDown
        memory > xtest_cleanse_setting_recurses_in_dictionary
        memory > xtest_disallowed_host
        memory > xverify_safe_response
        memory > xtest_sharing_traceback
        memory > xtest_exception_reporter_from_request
        memory > xtest_exception_reporter_from_settings
        memory > xtest_eol_support
        memory > xDebugPath
        memory > xtest_404_not_in_urls
        memory > xtest_classbased_technical_404
        memory > xtest_request_and_exception
        memory > xtest_cleanse_setting_recurses_in_list_tuples
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              x__str__.write
                [xself]
                  seq > @
                    (((unsupported)).apply ("jacob"))
            (((unsupported)).apply)
              xurlpatterns.write (((unsupported)).apply ((((unsupported)).apply ((xpath)) ("url/") ((xindex_page)) ("url"))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                unsupported
                xtest_repr.write
                  [xself]
                    memory > xactual
                    memory > x__call__
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("repr from the wrapped callable"))
                            x__call__.write
                              [xself]
                                seq > @
                        xactual.write (((xrepr)).apply ((((xCallableSettingWrapper)).apply ((((xWrappedCallable)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ("repr from the wrapped callable"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ("view_tests.urls"))))
              seq
                xtest_files.write
                  [xself]
                    memory > xresponse
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (500))
                        xdata.write (((unsupported)).apply ("file_data.txt") ((((xSimpleUploadedFile)).apply ("file_data.txt") ("haha"))))
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xpost)).apply ("/raises/") ((xdata)))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("file_data.txt") (500))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("haha") (500))
                xtest_400.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.security") ("WARNING"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises400/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (400))
                xtest_400_bad_request.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("WARNING"))) ((xcm)))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises400_bad_request/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (400))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xcm).xrecords)) (0)).xgetMessage)).apply)) ("Malformed request syntax: /raises400_bad_request/"))
                xtest_403.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/raises403/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h1>403 Forbidden</h1>") (403))
                xtest_403_template.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/raises403/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("test template") (403))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("(Insufficient Permissions).") (403))
                xtest_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/raises404/"))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("<pre class=\"exception_value\">") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<p>The current path, <code>not-in-urls</code>, didn’t match any of these.</p>") (404) (TRUE))
                xtest_404_not_in_urls.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/not-in-urls"))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("Raised by:") (404))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("<pre class=\"exception_value\">") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Django tried these URL patterns") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<p>The current path, <code>not-in-urls</code>, didn’t match any of these.</p>") (404) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("^regex-post/(?P&lt;pk&gt;[0-9]+)/$") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("[name='regex-post']") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("path-post/&lt;int:pk&gt;/") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("[name='path-post']") (404))
                xtest_404_empty_path_not_in_urls.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<p>The empty path didn’t match any of these.</p>") (404) (TRUE))
                xtest_technical_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/technical404/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<pre class=\"exception_value\">Testing technical 404.</pre>") (404) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Raised by:") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<td>view_tests.views.technical404</td>") (404))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<p>The current path, <code>technical404/</code>, matched the last one.</p>") (404) (TRUE))
                xtest_classbased_technical_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/classbased404/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<th>Raised by:</th><td>view_tests.views.Http404View</td>") (404) (TRUE))
                xtest_technical_500.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<th>Raised during:</th><td>view_tests.views.raises500</td>") (500) (TRUE))
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/raises500/") ("text/plain"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Raised during: view_tests.views.raises500") (500))
                xtest_classbased_technical_500.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/classbased500/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<th>Raised during:</th><td>view_tests.views.Raises500View</td>") (500) (TRUE))
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/classbased500/") ("text/plain"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Raised during: view_tests.views.Raises500View") (500))
                xtest_non_l10ned_numeric_ids.write
                  [xself]
                    memory > xid_repr
                    memory > xresponse
                    memory > xmatch
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                              xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (500))
                            xmatch.write ((((xre).xsearch)).apply ("<div class=\"context\" id=\"(?P<id>[^\"]+)\">") (((xresponse).xcontent)))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xmatch)))
                            xid_repr.write (((unsupported)).apply ((xmatch)) ("id"))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xre).xsearch)).apply ("[^c0-9]") ((xid_repr)))) (("Numeric IDs in debug response HTML page shouldn't be localized (value: %s).".mod ((((xid_repr).xdecode)).apply))))
                xtest_template_exceptions.write
                  [xself]
                    memory > xraising_loc
                    seq > @
                      (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("template_exception"))))
                          seq
                            xraising_loc.write ((((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xinspect).xtrace)).apply)) ((1.neg)))) ((2.neg)))) (0)).xstrip)).apply)
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xraising_loc).xfind)).apply ("raise Exception(\"boom\")"))) ((1.neg)) (("Failed to find 'raise Exception' in last frame of traceback, instead found: %s".mod (xraising_loc))))
                xtest_safestring_in_exception.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/safestring_exception/"))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("<script>alert(1);</script>") (500) (TRUE))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("&lt;script&gt;alert(1);&lt;/script&gt;") (3) (500) (TRUE))
                xtest_template_loader_postmortem.write
                  [xself]
                    memory > xtemplate_name
                    memory > xtempdir
                    memory > xresponse
                    memory > xtemplate_path
                    seq > @
                      seq
                        unsupported
                        xtemplate_name.write "notfound.html"
                        (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((xtemplate_name)))) ((xtmpfile)))
                          seq
                            xtempdir.write (((((xos).xpath).xdirname)).apply (((xtmpfile).xname)))
                            xtemplate_path.write (((((xos).xpath).xjoin)).apply ((xtempdir)) ((xtemplate_name)))
                            (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("DIRS") ((((unsupported)).apply ((xtempdir)))))))))) (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                              xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("raises_template_does_not_exist") ((((unsupported)).apply ("path") ((xtemplate_name)))))))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) (("%s (Source does not exist)".mod (xtemplate_path))) (500) (2))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) (("<li><code>django.template.loaders.filesystem.Loader</code>: %s (Source does not exist)</li>".mod (((((xos).xpath).xjoin)).apply ((xtempdir)) ("notfound.html")))) (500) (TRUE))
                xtest_no_template_source_loaders.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateDoesNotExist)))))
                            bogusForceDataize.write (((((xself).xclient).xget)).apply ("/render_no_template/"))
                xtest_default_urlconf_template.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<h1>The install worked successfully! Congratulations!</h1>"))
                xtest_regression_21530.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Page not found <span>(404)</span>") (404))
                xtest_template_encoding.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xDebugPath)) ("open"))) ((xm)))
                          seq
                            bogusForceDataize.write (((xdefault_urlconf)).apply ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((xm).xassert_called_once_with)) ("utf-8"))
                            bogusForceDataize.write ((((xm).xreset_mock)).apply)
                            bogusForceDataize.write (((xtechnical_404_response)).apply (((((xmock).xMagicMock)).apply)) (((((xmock).xMock)).apply)))
                            (((unsupported)).apply (((xm).xassert_called_once_with)) ("utf-8"))
                xtest_technical_404_converter_raise_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xIntConverter)) ("to_python") ((xHttp404)))))
                        seq
                          xresponse.write (((((xself).xclient).xget)).apply ("/path-post/1/"))
                          (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Page not found") (404))
                xtest_exception_reporter_from_request.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/custom_reporter_class_view/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("custom traceback text") (500))
                xtest_exception_reporter_from_settings.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("custom traceback text") (500))
                xtest_template_override_exception_reporter.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h1>Oh no, an error occurred!</h1>") (500) (TRUE))
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/raises500/") ("text/plain"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("Oh dear, an error occurred!") (500))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default"))
                xtest_handle_db_exception.write
                  [xself]
                    memory > xrf
                    memory > xresponse
                    memory > xexc_info
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          (((unsupported)).apply ((xDatabaseError)))
                            bogusForceDataize.write ((((xcursor).xexecute)).apply ("INVALID SQL"))
                            xexc_info.write ((((xsys).xexc_info)).apply)
                        xrf.write (((xRequestFactory)).apply)
                        xresponse.write (((xtechnical_500_response)).apply (((((xrf).xget)).apply ("/"))) ((((unsupported)).apply ((xexc_info)))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("OperationalError at /") (500))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ("view_tests.urls") ((((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.dummy.TemplateStrings"))))))))
              seq
                xtest_400.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.security") ("WARNING"))))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises400/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (400))
                xtest_400_bad_request.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("WARNING"))) ((xcm)))
                          xresponse.write (((((xself).xclient).xget)).apply ("/raises400_bad_request/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (400))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xcm).xrecords)) (0)).xgetMessage)).apply)) ("Malformed request syntax: /raises400_bad_request/"))
                xtest_403.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/raises403/"))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h1>403 Forbidden</h1>") (403))
                xtest_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/raises404/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_template_not_found_error.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      seq
                        xurl.write (((unsupported)).apply ((xreverse)) ("raises_template_does_not_exist") ((((unsupported)).apply ("path") ("notfound.html"))))
                        (((unsupported)).apply (((((xself).xassertLogs)).apply ("django.request") ("ERROR"))))
                          xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<div class=\"context\" id=\"") (500))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrf.write (((xRequestFactory)).apply)
                xtest_request_and_exception.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xrequest
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                            (((unsupported)).apply (((xrequest).xuser)) ((((xUser)).apply)))
                            (((unsupported)).apply ((((xValueError)).apply ("Can't find my keys"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>ValueError at /test_view/</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Can&#x27;t find my keys</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request Method:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request URL:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h3 id=\"user-info\">USER</h3>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>jacob</p>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>No POST data</p>") ((xhtml)))
                xtest_no_request.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((xValueError)).apply ("Can't find my keys"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>ValueError</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Can&#x27;t find my keys</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Request Method:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Request URL:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<h3 id=\"user-info\">USER</h3>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                xtest_sharing_traceback.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((xValueError)).apply ("Oops"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<form action=\"https://dpaste.com/\" name=\"pasteform\" id=\"pasteform\" method=\"post\">") ((xhtml)))
                xtest_eol_support.write
                  [xself]
                    memory > xreporter
                    memory > xLINES
                    seq > @
                      seq
                        unsupported
                        xLINES.write (((unsupported)).apply (("print %d".mod (xi))) ((xi)) ((((xrange)).apply (1) (6))))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xnewline)) ((((unsupported)).apply ("n") ("rn") ("r"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfd)) ((xfilename)))) ((((unsupported)).apply (((xtempfile).xmkstemp)) (FALSE))))
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) (((((((((xnewline).xjoin)).apply ((xLINES))).add (xnewline)).xencode)).apply)))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                            (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter).x_get_lines_from_file)).apply ((xfilename)) (3) (2))) ((((unsupported)).apply (1) ((((unsupported)).apply ((xLINES)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((xLINES)) (3))) ((((unsupported)).apply ((xLINES)) ((((unsupported)).apply (4))))))))
                              bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
                xtest_no_exception.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xrequest
                    seq > @
                      seq
                        unsupported
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>Report at /test_view/</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">No exception message supplied</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request Method:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request URL:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                xtest_suppressed_context.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((xRuntimeError)))
                            (((unsupported)).apply ((((xRuntimeError)).apply ("Can't find my keys"))))
                            (((unsupported)).apply ((((xValueError)).apply ("Can't find my keys"))) ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>ValueError</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Can&#x27;t find my keys</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("During handling of the above exception") ((xhtml)))
                xtest_innermost_exception_without_traceback.write
                  [xself]
                    memory > xtext
                    memory > xreporter
                    memory > xnew_exc
                    memory > xhtml
                    memory > xframes
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xException)))
                            (((unsupported)).apply ((((xRuntimeError)).apply ("Oops"))))
                            seq
                              xnew_exc.write (((xRuntimeError)).apply ("My context"))
                              (((unsupported)).apply (((xexc).x__context__)) ((xnew_exc)))
                              (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xframes.write ((((xreporter).xget_traceback_frames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xframes)))) (2))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>RuntimeError</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Oops</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("During handling of the above exception (My context), another exception occurred") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<li class=\"frame user\">None</li>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):n  None") ((xhtml)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Type: RuntimeError") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Value: Oops") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):n  None") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("During handling of the above exception (My context), another exception occurred") ((xtext)))
                xtest_mid_stack_exception_without_traceback.write
                  [xself]
                    memory > xreporter
                    memory > xnew_exc
                    memory > xhtml
                    memory > xtext
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xException)))
                            (((unsupported)).apply ((((xRuntimeError)).apply ("Inner Oops"))))
                            seq
                              xnew_exc.write (((xRuntimeError)).apply ("My context"))
                              (((unsupported)).apply (((xnew_exc).x__context__)) ((xexc)))
                              (((unsupported)).apply ((((xRuntimeError)).apply ("Oops"))) ((xnew_exc)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>RuntimeError</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Oops</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<li class=\"frame user\">Traceback: None</li>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("During handling of the above exception (Inner Oops), another exception occurred:n  Traceback: None") ((xhtml)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Type: RuntimeError") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Value: Oops") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("During handling of the above exception (Inner Oops), another exception occurred:n  Traceback: None") ((xtext)))
                xtest_reporting_of_nested_exceptions.write
                  [xself]
                    memory > xexplicit_exc
                    memory > xrequest
                    memory > ximplicit_exc
                    memory > xtext
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xAttributeError)))
                            (((unsupported)).apply ((((xAttributeError)).apply ((((xmark_safe)).apply ("<p>Top level</p>"))))))
                            (((unsupported)).apply ((xValueError)))
                              (((unsupported)).apply ((((xValueError)).apply ((((xmark_safe)).apply ("<p>Second exception</p>"))))) ((xexplicit)))
                              (((unsupported)).apply ((((xIndexError)).apply ((((xmark_safe)).apply ("<p>Final exception</p>"))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xexplicit_exc.write "The above exception ({0}) was the direct cause of the following exception:"
                        ximplicit_exc.write "During handling of the above exception ({0}), another exception occurred:"
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xhtml).xcount)).apply (((((xexplicit_exc).xformat)).apply ("&lt;p&gt;Top level&lt;/p&gt;"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xhtml).xcount)).apply (((((ximplicit_exc).xformat)).apply ("&lt;p&gt;Second exception&lt;/p&gt;"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (10) (((((xhtml).xcount)).apply ("&lt;p&gt;Final exception&lt;/p&gt;"))))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xexplicit_exc).xformat)).apply ("<p>Top level</p>"))) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((ximplicit_exc).xformat)).apply ("<p>Second exception</p>"))) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xtext).xcount)).apply ("<p>Final exception</p>"))))
                xtest_reporting_frames_without_source.write
                  [xself]
                    memory > xnamespace
                    memory > xlast_frame
                    memory > xrequest
                    memory > xtext
                    memory > xreporter
                    memory > xcode
                    memory > xframes
                    memory > xhtml
                    memory > xsource
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          seq
                            xsource.write "def funcName():n    raise Error('Whoops')nfuncName()"
                            xnamespace.write (((unsupported)).apply)
                            xcode.write (((xcompile)).apply ((xsource)) ("generated") ("exec"))
                            bogusForceDataize.write (((xexec)).apply ((xcode)) ((xnamespace)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xframes.write ((((xreporter).xget_traceback_frames)).apply)
                        xlast_frame.write (((unsupported)).apply ((xframes)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("context_line"))) ("<source code not available>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("filename"))) ("generated"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("function"))) ("funcName"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("lineno"))) (2))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<span class=\"fname\">generated</span>, line 2, in funcName") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<code class=\"fname\">generated</code>, line 2, in funcName") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"generated\", line 2, in funcNamen    &lt;source code not available&gt;") ((xhtml)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"generated\", line 2, in funcNamen    <source code not available>") ((xtext)))
                xtest_reporting_frames_source_not_match.write
                  [xself]
                    memory > xnamespace
                    memory > xlast_frame
                    memory > xrequest
                    memory > xtext
                    memory > xreporter
                    memory > xcode
                    memory > xframes
                    memory > xhtml
                    memory > xsource
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          seq
                            xsource.write "def funcName():n    raise Error('Whoops')nfuncName()"
                            xnamespace.write (((unsupported)).apply)
                            xcode.write (((xcompile)).apply ((xsource)) ("generated") ("exec"))
                            bogusForceDataize.write (((xexec)).apply ((xcode)) ((xnamespace)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("django.views.debug.ExceptionReporter._get_source") ((((unsupported)).apply ("wrong source"))))))
                          seq
                            xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                            xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                            xframes.write ((((xreporter).xget_traceback_frames)).apply)
                            xlast_frame.write (((unsupported)).apply ((xframes)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("context_line"))) ("<source code not available>"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("filename"))) ("generated"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("function"))) ("funcName"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("lineno"))) (2))
                            xhtml.write ((((xreporter).xget_traceback_html)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("<span class=\"fname\">generated</span>, line 2, in funcName") ((xhtml)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("<code class=\"fname\">generated</code>, line 2, in funcName") ((xhtml)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("\"generated\", line 2, in funcNamen    &lt;source code not available&gt;") ((xhtml)))
                            xtext.write ((((xreporter).xget_traceback_text)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("\"generated\", line 2, in funcNamen    <source code not available>") ((xtext)))
                xtest_reporting_frames_for_cyclic_reference.write
                  [xself]
                    memory > xlast_frame
                    memory > xtest_func
                    memory > xmsg
                    memory > xreporter
                    memory > xtb_generator
                    memory > xgenerate_traceback_frames
                    memory > xrequest
                    memory > xtb_frames
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          seq
                            xtest_func.write
                              []
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                                    (((unsupported)).apply ((((xRuntimeError)).apply ("outer"))) ((((xRuntimeError)).apply ("inner"))))
                                    (((unsupported)).apply (((xexc).x__cause__)))
                            bogusForceDataize.write (((xtest_func)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xgenerate_traceback_frames.write
                          []
                            memory > xtb_frames
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                xtb_frames.write ((((xreporter).xget_traceback_frames)).apply)
                        xtb_frames.write "None: is there a None literal in the EO language?"
                        xtb_generator.write (((unsupported)).apply (((xthreading).xThread)) ((xgenerate_traceback_frames)) (TRUE))
                        xmsg.write "Cycle in the exception chain detected: exception 'inner' encountered again."
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xExceptionCycleWarning)) ((xmsg)))))
                          bogusForceDataize.write ((((xtb_generator).xstart)).apply)
                        (((unsupported)).apply (((xtb_generator).xjoin)) (5))
                        ((((xtb_generator).xis_alive)).apply).if
                          seq
                            (((unsupported)).apply (((xexc_value).x__traceback__)) (((xexc_value).x__context__)) (((xexc_value).x__cause__)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xtb_generator).xjoin)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply ("Cyclic reference in Exception Reporter.get_traceback_frames()"))
                        (((unsupported)).apply ((xtb_frames)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("Traceback generation failed"))
                        xlast_frame.write (((unsupported)).apply ((xtb_frames)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("raise exc.__cause__") ((((unsupported)).apply ((xlast_frame)) ("context_line"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("filename"))) ((x__file__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlast_frame)) ("function"))) ("test_func"))
                xtest_request_and_message.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xrequest
                    seq > @
                      seq
                        unsupported
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("I'm a little teapot") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>Report at /test_view/</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">I&#x27;m a little teapot</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request Method:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<th>Request URL:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                xtest_message_only.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("I'm a little teapot") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>Report</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">I&#x27;m a little teapot</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Request Method:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Request URL:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Type:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<th>Exception Value:</th>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Traceback ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Request information</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>Request data not supplied</p>") ((xhtml)))
                xtest_non_utf8_values_handling.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xsomevar
                    memory > x__repr__
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xException)))
                          seq
                            (((unsupported)).apply ((xException)))
                              x__repr__.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply ("EXCxe9EXC"))
                            xsomevar.write "VALxe9VAL"
                            (((unsupported)).apply ((((xNonUtf8Output)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply)) ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply)) ((xhtml)))
                xtest_local_variable_escaping.write
                  [xself]
                    memory > xlocal
                    memory > xhtml
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xException)))
                          seq
                            xlocal.write (((xmark_safe)).apply ("<p>Local variable</p>"))
                            (((unsupported)).apply ((((xValueError)).apply ((xlocal)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xhtml.write ((((((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb))).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<td class=\"code\"><pre>&#x27;&lt;p&gt;Local variable&lt;/p&gt;&#x27;</pre></td>") ((xhtml)))
                xtest_unprintable_values_handling.write
                  [xself]
                    memory > xreporter
                    memory > xoomvalue
                    memory > xhtml
                    memory > x__repr__
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xException)))
                          seq
                            (((unsupported)).apply)
                              x__repr__.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply ((((xMemoryError)).apply ("OOM"))))
                            xoomvalue.write (((xOomOutput)).apply)
                            (((unsupported)).apply ((((xValueError)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<td class=\"code\"><pre>Error in formatting") ((xhtml)))
                xtest_too_large_values_handling.write
                  [xself]
                    memory > x__repr__
                    memory > xlarge
                    memory > xreporter
                    memory > xhtml
                    memory > xrepr_of_str_adds
                    memory > xlargevalue
                    seq > @
                      seq
                        unsupported
                        xlarge.write (256.mul 1024)
                        xrepr_of_str_adds.write (((xlen)).apply ((((xrepr)).apply (""))))
                        (((unsupported)).apply ((xException)))
                          seq
                            (((unsupported)).apply)
                              x__repr__.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply ((((xrepr)).apply (("A".mul (xlarge))))))
                            xlargevalue.write (((xLargeOutput)).apply)
                            (((unsupported)).apply ((((xValueError)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply ((xhtml)))) (1024))) (128))) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("&lt;trimmed %d bytes string&gt;".mod (((unsupported)).apply (((xlarge).add (xrepr_of_str_adds)))))) ((xhtml)))
                xtest_encoding_error.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write ((((((xmark_safe)).apply ("abcdefghijkl<p>mnὀp</p>qrstuwxyz")).xencode)).apply ("ascii"))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h2>Unicode error hint</h2>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("The string that could not be encoded/decoded was: ") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<strong>&lt;p&gt;mnὀp&lt;/p&gt;</strong>") ((xhtml)))
                xtest_unfrozen_importlib.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xrequest
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          seq
                            xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                            bogusForceDataize.write ((((ximportlib).ximport_module)).apply ("abc.def.invalid.name"))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>ModuleNotFoundError at /test_view/</h1>") ((xhtml)))
                xtest_ignore_traceback_evaluation_exceptions.write
                  [xself]
                    memory > xrequest
                    memory > xbroken_lazy
                    memory > xbroken_setup
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                        xbroken_setup.write
                          []
                            seq > @
                              (((unsupported)).apply ((xBrokenEvaluation)))
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xbroken_lazy.write (((xSimpleLazyObject)).apply ((xbroken_setup)))
                        (((unsupported)).apply ((xBrokenEvaluation)))
                          bogusForceDataize.write (((xbool)).apply ((xbroken_lazy)))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("BrokenEvaluation") (((((((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb))).xget_traceback_html)).apply)) ("Evaluation exception reason not mentioned in traceback"))
                xtest_disallowed_host.write
                  [xself]
                    memory > xreporter
                    memory > xhtml
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xget)) ("/") ("evil.com"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("http://evil.com/") ((xhtml)))
                xtest_request_with_items_key.write
                  [xself]
                    memory > xrequest
                    memory > xrf
                    memory > xvalue
                    memory > xreporter
                    memory > xhtml
                    memory > xfp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xvalue.write "<td>items</td><td class=\"code\"><pre>&#x27;Oops&#x27;</pre></td>"
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/?items=Oops"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ((xvalue)) ((xhtml)))
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xpost)) ("/test_view/") ((((unsupported)).apply ("items") ("Oops"))))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ((xvalue)) ((xhtml)))
                        xfp.write (((xStringIO)).apply ("filecontent"))
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xpost)) ("/test_view/") ((((unsupported)).apply ("name") ("filename") ("items") ((xfp)))))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<td>items</td><td class=\"code\"><pre>&lt;InMemoryUploadedFile: items (application/octet-stream)&gt;</pre></td>") ((xhtml)))
                        xrf.write (((xRequestFactory)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xrf).xcookies)) ("items"))) ("Oops"))
                        xrequest.write ((((xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<td>items</td><td class=\"code\"><pre>&#x27;Oops&#x27;</pre></td>") ((xhtml)))
                xtest_exception_fetching_user.write
                  [xself]
                    memory > x__str__
                    memory > xrequest
                    memory > xtext
                    memory > xreporter
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xException)).apply)))
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        (((unsupported)).apply (((xrequest).xuser)) ((((xExceptionUser)).apply)))
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((xValueError)).apply ("Oops"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xhtml.write ((((xreporter).xget_traceback_html)).apply)
                        bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<h1>ValueError at /test_view/</h1>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<pre class=\"exception_value\">Oops</pre>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<h3 id=\"user-info\">USER</h3>") ((xhtml)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<p>[unable to retrieve the current user]</p>") ((xhtml)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("USER: [unable to retrieve the current user]") ((xtext)))
                xtest_template_encoding.write
                  [xself]
                    memory > xreporter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xDebugPath)) ("open"))) ((xm)))
                          seq
                            bogusForceDataize.write ((((xreporter).xget_traceback_html)).apply)
                            (((unsupported)).apply (((xm).xassert_called_once_with)) ("utf-8"))
                            bogusForceDataize.write ((((xm).xreset_mock)).apply)
                            bogusForceDataize.write ((((xreporter).xget_traceback_text)).apply)
                            (((unsupported)).apply (((xm).xassert_called_once_with)) ("utf-8"))
                xtest_get_raw_insecure_uri.write
                  [xself]
                    memory > xreporter
                    memory > xfactory
                    memory > xtests
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        xfactory.write (((unsupported)).apply ((xRequestFactory)) ("evil.com"))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("////absolute-uri") ("http://evil.com//absolute-uri"))) ((((unsupported)).apply ("/?foo=bar") ("http://evil.com/?foo=bar"))) ((((unsupported)).apply ("/path/with:colons") ("http://evil.com/path/with:colons"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)))))
                            seq
                              xrequest.write ((((xfactory).xget)).apply ((xurl)))
                              xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter).x_get_raw_insecure_uri)).apply)) ((xexpected)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrf.write (((xRequestFactory)).apply)
                xtest_request_and_exception.write
                  [xself]
                    memory > xreporter
                    memory > xrequest
                    memory > xtext
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                            (((unsupported)).apply (((xrequest).xuser)) ((((xUser)).apply)))
                            (((unsupported)).apply ((((xValueError)).apply ("Can't find my keys"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ValueError at /test_view/") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Can't find my keys") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Request Method:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Request URL:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("USER: jacob") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Type:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Value:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Request information:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Request data not supplied") ((xtext)))
                xtest_no_request.write
                  [xself]
                    memory > xreporter
                    memory > xtext
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((xValueError)).apply ("Can't find my keys"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ((xexc_type)) ((xexc_value)) ((xtb)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ValueError") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Can't find my keys") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Request Method:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Request URL:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("USER:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Type:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception Value:") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):") ((xtext)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Request data not supplied") ((xtext)))
                xtest_no_exception.write
                  [xself]
                    memory > xreporter
                    memory > xrequest
                    seq > @
                      seq
                        unsupported
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xreporter).xget_traceback_text)).apply)
                xtest_request_and_message.write
                  [xself]
                    memory > xreporter
                    memory > xrequest
                    seq > @
                      seq
                        unsupported
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("I'm a little teapot") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xreporter).xget_traceback_text)).apply)
                xtest_template_exception.write
                  [xself]
                    memory > xreporter
                    memory > xtempl_path
                    memory > xrequest
                    memory > xtext
                    seq > @
                      (((unsupported)).apply)
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/"))
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write (((xrender)).apply ((xrequest)) ("debug/template_error.html"))
                          (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ((xexc_type)) ((xexc_value)) ((xtb)))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        xtempl_path.write (((xPath)).apply ((((unsupported)).apply (((((xPath)).apply ((x__file__))).xparents)) (1))) ("templates") ("debug") ("template_error.html"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("Template error:nIn template %(path)s, error at line 2n   'cycle' tag requires at least two argumentsn   1 : Template with error:n   2 :  {%% cycle %%} n   3 : ".mod (((unsupported)).apply ("path") ((xtempl_path))))) ((xtext)))
                xtest_request_with_items_key.write
                  [xself]
                    memory > xrequest
                    memory > xrf
                    memory > xtext
                    memory > xreporter
                    memory > xfp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrequest.write (((((xself).xrf).xget)).apply ("/test_view/?items=Oops"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("items = 'Oops'") ((xtext)))
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xpost)) ("/test_view/") ((((unsupported)).apply ("items") ("Oops"))))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("items = 'Oops'") ((xtext)))
                        xfp.write (((xStringIO)).apply ("filecontent"))
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xpost)) ("/test_view/") ((((unsupported)).apply ("name") ("filename") ("items") ((xfp)))))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("items = <InMemoryUploadedFile:") ((xtext)))
                        xrf.write (((xRequestFactory)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xrf).xcookies)) ("items"))) ("Oops"))
                        xrequest.write ((((xrf).xget)).apply ("/test_view/"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("items = 'Oops'") ((xtext)))
                xtest_message_only.write
                  [xself]
                    memory > xreporter
                    seq > @
                      seq
                        xreporter.write (((xExceptionReporter)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("I'm a little teapot") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xreporter).xget_traceback_text)).apply)
                xtest_disallowed_host.write
                  [xself]
                    memory > xreporter
                    memory > xrequest
                    memory > xtext
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xget)) ("/") ("evil.com"))
                        xreporter.write (((xExceptionReporter)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xtext.write ((((xreporter).xget_traceback_text)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("http://evil.com/") ((xtext)))
            (((unsupported)).apply)
              seq
                xbreakfast_data.write (((unsupported)).apply ("sausage-key") ("sausage-value") ("baked-beans-key") ("baked-beans-value") ("hash-brown-key") ("hash-brown-value") ("bacon-key") ("bacon-value"))
                xverify_unsafe_response.write
                  [xself xview xcheck_for_vars xcheck_for_POST_params]
                    memory > xresponse
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                        xresponse.write (((xview)).apply ((xrequest)))
                        (xcheck_for_vars).if
                          seq
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("cooked_eggs") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("scrambled") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("sauce") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("worcestershire") (500))
                        (xcheck_for_POST_params).if
                          (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xbreakfast_data).xitems)).apply)))
                            seq
                              (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ((xk)) (500))
                              (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ((xv)) (500))
                xverify_safe_response.write
                  [xself xview xcheck_for_vars xcheck_for_POST_params]
                    memory > xresponse
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                        xresponse.write (((xview)).apply ((xrequest)))
                        (xcheck_for_vars).if
                          seq
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("cooked_eggs") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("scrambled") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("sauce") (500))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("worcestershire") (500))
                        (xcheck_for_POST_params).if
                          seq
                            (((unsupported)).apply ((xk)) (((xself).xbreakfast_data)))
                              (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ((xk)) (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("baked-beans-value") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("hash-brown-value") (500))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("sausage-value") (500))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("bacon-value") (500))
                xverify_paranoid_response.write
                  [xself xview xcheck_for_vars xcheck_for_POST_params]
                    memory > xresponse
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                        xresponse.write (((xview)).apply ((xrequest)))
                        (xcheck_for_vars).if
                          seq
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("cooked_eggs") (500))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("scrambled") (500))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("sauce") (500))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("worcestershire") (500))
                        (xcheck_for_POST_params).if
                          (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xbreakfast_data).xitems)).apply)))
                            seq
                              (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ((xk)) (500))
                              (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ((xv)) (500))
                xverify_unsafe_email.write
                  [xself xview xcheck_for_POST_params]
                    memory > xbody_html
                    memory > xemail
                    memory > xrequest
                    memory > xbody_plain
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((((unsupported)).apply ("Admin") ("admin@fattie-breakie.com"))))))))
                          seq
                            (((unsupported)).apply (((xmail).xoutbox)) ((((unsupported)).apply)))
                            xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                            bogusForceDataize.write (((xview)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                            xemail.write (((unsupported)).apply (((xmail).xoutbox)) (0))
                            xbody_plain.write (((xstr)).apply (((xemail).xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cooked_eggs") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("scrambled") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sauce") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("worcestershire") ((xbody_plain)))
                            xbody_html.write (((xstr)).apply ((((unsupported)).apply ((((unsupported)).apply (((xemail).xalternatives)) (0))) (0))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("cooked_eggs") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("scrambled") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("sauce") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("worcestershire") ((xbody_html)))
                            (xcheck_for_POST_params).if
                              (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xbreakfast_data).xitems)).apply)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xbody_plain)))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xv)) ((xbody_plain)))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xbody_html)))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xv)) ((xbody_html)))
                xverify_safe_email.write
                  [xself xview xcheck_for_POST_params]
                    memory > xbody_html
                    memory > xemail
                    memory > xrequest
                    memory > xbody_plain
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((((unsupported)).apply ("Admin") ("admin@fattie-breakie.com"))))))))
                          seq
                            (((unsupported)).apply (((xmail).xoutbox)) ((((unsupported)).apply)))
                            xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                            bogusForceDataize.write (((xview)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                            xemail.write (((unsupported)).apply (((xmail).xoutbox)) (0))
                            xbody_plain.write (((xstr)).apply (((xemail).xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cooked_eggs") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("scrambled") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sauce") ((xbody_plain)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("worcestershire") ((xbody_plain)))
                            xbody_html.write (((xstr)).apply ((((unsupported)).apply ((((unsupported)).apply (((xemail).xalternatives)) (0))) (0))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("cooked_eggs") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("scrambled") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("sauce") ((xbody_html)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("worcestershire") ((xbody_html)))
                            (xcheck_for_POST_params).if
                              seq
                                (((unsupported)).apply ((xk)) (((xself).xbreakfast_data)))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xbody_plain)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("baked-beans-value") ((xbody_plain)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("hash-brown-value") ((xbody_plain)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("baked-beans-value") ((xbody_html)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("hash-brown-value") ((xbody_html)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sausage-value") ((xbody_plain)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("bacon-value") ((xbody_plain)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sausage-value") ((xbody_html)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("bacon-value") ((xbody_html)))
                xverify_paranoid_email.write
                  [xself xview]
                    memory > xemail
                    memory > xrequest
                    memory > xbody
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((((unsupported)).apply ("Admin") ("admin@fattie-breakie.com"))))))))
                          seq
                            (((unsupported)).apply (((xmail).xoutbox)) ((((unsupported)).apply)))
                            xrequest.write (((((xself).xrf).xpost)).apply ("/some_url/") (((xself).xbreakfast_data)))
                            bogusForceDataize.write (((xview)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                            xemail.write (((unsupported)).apply (((xmail).xoutbox)) (0))
                            xbody.write (((xstr)).apply (((xemail).xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cooked_eggs") ((xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("scrambled") ((xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sauce") ((xbody)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("worcestershire") ((xbody)))
                            (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xbreakfast_data).xitems)).apply)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xbody)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xv)) ((xbody)))
            (((unsupported)).apply ((xExceptionReportTestMixin)) ((xLoggingCaptureMixin)) ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("view_tests.urls"))))
              seq
                (((unsupported)).apply)
                xrf.write (((xRequestFactory)).apply)
                xtest_non_sensitive_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xnon_sensitive_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xnon_sensitive_view)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xnon_sensitive_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xnon_sensitive_view)))
                xtest_sensitive_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xsensitive_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xsensitive_view)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_safe_response)).apply ((xsensitive_view)))
                            bogusForceDataize.write ((((xself).xverify_safe_email)).apply ((xsensitive_view)))
                xtest_paranoid_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xparanoid_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xparanoid_view)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_paranoid_response)).apply ((xparanoid_view)))
                            bogusForceDataize.write ((((xself).xverify_paranoid_email)).apply ((xparanoid_view)))
                xtest_multivalue_dict_key_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xmultivalue_dict_key_error)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xmultivalue_dict_key_error)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_safe_response)).apply ((xmultivalue_dict_key_error)))
                            bogusForceDataize.write ((((xself).xverify_safe_email)).apply ((xmultivalue_dict_key_error)))
                xtest_custom_exception_reporter_filter.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xcustom_exception_reporter_filter_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xcustom_exception_reporter_filter_view)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xcustom_exception_reporter_filter_view)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xcustom_exception_reporter_filter_view)))
                xtest_sensitive_method.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xsensitive_method_view)) (FALSE))
                            (((unsupported)).apply (((xself).xverify_unsafe_email)) ((xsensitive_method_view)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            (((unsupported)).apply (((xself).xverify_safe_response)) ((xsensitive_method_view)) (FALSE))
                            (((unsupported)).apply (((xself).xverify_safe_email)) ((xsensitive_method_view)) (FALSE))
                xtest_sensitive_function_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xsensitive_args_function_caller)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xsensitive_args_function_caller)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            (((unsupported)).apply (((xself).xverify_safe_response)) ((xsensitive_args_function_caller)) (FALSE))
                            (((unsupported)).apply (((xself).xverify_safe_email)) ((xsensitive_args_function_caller)) (FALSE))
                xtest_sensitive_function_keyword_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xverify_unsafe_response)).apply ((xsensitive_kwargs_function_caller)))
                            bogusForceDataize.write ((((xself).xverify_unsafe_email)).apply ((xsensitive_kwargs_function_caller)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            (((unsupported)).apply (((xself).xverify_safe_response)) ((xsensitive_kwargs_function_caller)) (FALSE))
                            (((unsupported)).apply (((xself).xverify_safe_email)) ((xsensitive_kwargs_function_caller)) (FALSE))
                xtest_callable_settings.write
                  [xself]
                    memory > xcallable_setting
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcallable_setting.write
                          []
                            seq > @
                              (((unsupported)).apply ("This should not be displayed"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ((xcallable_setting)))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("This should not be displayed") (500))
                xtest_callable_settings_forbidding_to_set_attributes.write
                  [xself]
                    memory > xresponse
                    memory > x__slots__
                    memory > x__call__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__slots__.write (((unsupported)).apply)
                            x__call__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("This should not be displayed"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ((((xCallableSettingWithSlots)).apply)))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                            (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("This should not be displayed") (500))
                xtest_dict_setting_with_non_str_key.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ((((unsupported)).apply (42) ("None: is there a None literal in the EO language?"))))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("FOOBAR") (500))
                xtest_sensitive_settings.write
                  [xself]
                    memory > xresponse
                    memory > xsensitive_settings
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsensitive_settings.write (((unsupported)).apply ("SECRET_KEY") ("SECRET_KEY_FALLBACKS") ("PASSWORD") ("API_KEY") ("AUTH_TOKEN"))
                        (((unsupported)).apply ((xsetting)) ((xsensitive_settings)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xsetting)) ("should not be displayed"))))))))
                            seq
                              xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                              (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("should not be displayed") (500))
                xtest_settings_with_sensitive_keys.write
                  [xself]
                    memory > xFOOBAR
                    memory > xresponse
                    memory > xsensitive_settings
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsensitive_settings.write (((unsupported)).apply ("SECRET_KEY") ("SECRET_KEY_FALLBACKS") ("PASSWORD") ("API_KEY") ("AUTH_TOKEN"))
                        (((unsupported)).apply ((xsetting)) ((xsensitive_settings)))
                          seq
                            xFOOBAR.write (((unsupported)).apply ((xsetting)) ("should not be displayed") ("recursive") ((((unsupported)).apply ((xsetting)) ("should not be displayed"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ((xFOOBAR)))))
                              seq
                                xresponse.write (((((xself).xclient).xget)).apply ("/raises500/"))
                                (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) ("should not be displayed") (500))
                xtest_cleanse_setting_basic.write
                  [xself]
                    memory > xreporter_filter
                    seq > @
                      seq
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("TEST") ("TEST"))) ("TEST"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("PASSWORD") ("super_secret"))) (((xreporter_filter).xcleansed_substitute)))
                xtest_cleanse_setting_ignore_case.write
                  [xself]
                    memory > xreporter_filter
                    seq > @
                      seq
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("password") ("super_secret"))) (((xreporter_filter).xcleansed_substitute)))
                xtest_cleanse_setting_recurses_in_dictionary.write
                  [xself]
                    memory > xreporter_filter
                    memory > xinitial
                    seq > @
                      seq
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        xinitial.write (((unsupported)).apply ("login") ("cooper") ("password") ("secret"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("SETTING_NAME") ((xinitial)))) ((((unsupported)).apply ("login") ("cooper") ("password") (((xreporter_filter).xcleansed_substitute)))))
                xtest_cleanse_setting_recurses_in_dictionary_with_non_string_key.write
                  [xself]
                    memory > xreporter_filter
                    memory > xinitial
                    seq > @
                      seq
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        xinitial.write (((unsupported)).apply ((((unsupported)).apply ("localhost") (8000))) ((((unsupported)).apply ("login") ("cooper") ("password") ("secret"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("SETTING_NAME") ((xinitial)))) ((((unsupported)).apply ((((unsupported)).apply ("localhost") (8000))) ((((unsupported)).apply ("login") ("cooper") ("password") (((xreporter_filter).xcleansed_substitute)))))))
                xtest_cleanse_setting_recurses_in_list_tuples.write
                  [xself]
                    memory > xcleansed
                    memory > xreporter_filter
                    memory > xinitial
                    seq > @
                      seq
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        xinitial.write (((unsupported)).apply ((((unsupported)).apply ("login") ("cooper") ("password") ("secret") ("apps") ((((unsupported)).apply ((((unsupported)).apply ("name") ("app1") ("api_key") ("a06b-c462cffae87a"))) ((((unsupported)).apply ("name") ("app2") ("api_key") ("a9f4-f152e97ad808"))))) ("tokens") ((((unsupported)).apply ("98b37c57-ec62-4e39") ("8690ef7d-8004-4916"))))) ((((unsupported)).apply ("SECRET_KEY") ("c4d77c62-6196-4f17-a06b-c462cffae87a"))))
                        xcleansed.write (((unsupported)).apply ((((unsupported)).apply ("login") ("cooper") ("password") (((xreporter_filter).xcleansed_substitute)) ("apps") ((((unsupported)).apply ((((unsupported)).apply ("name") ("app1") ("api_key") (((xreporter_filter).xcleansed_substitute)))) ((((unsupported)).apply ("name") ("app2") ("api_key") (((xreporter_filter).xcleansed_substitute)))))) ("tokens") (((xreporter_filter).xcleansed_substitute)))) ((((unsupported)).apply ("SECRET_KEY") (((xreporter_filter).xcleansed_substitute)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("SETTING_NAME") ((xinitial)))) ((xcleansed)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("SETTING_NAME") ((((xtuple)).apply ((xinitial)))))) ((((xtuple)).apply ((xcleansed)))))
                xtest_request_meta_filtering.write
                  [xself]
                    memory > xrequest
                    memory > xreporter_filter
                    seq > @
                      seq
                        xrequest.write (((unsupported)).apply ((((xself).xrf).xget)) ("/") ("super_secret"))
                        xreporter_filter.write (((xSafeExceptionReporterFilter)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xreporter_filter).xget_safe_request_meta)).apply ((xrequest)))) ("HTTP_SECRET_HEADER"))) (((xreporter_filter).xcleansed_substitute)))
                xtest_exception_report_uses_meta_filtering.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/raises500/") ("super_secret"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("super_secret") (((xresponse).xcontent)))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/raises500/") ("super_secret") ("application/json"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("super_secret") (((xresponse).xcontent)))
            (((unsupported)).apply ((xSafeExceptionReporterFilter)))
              seq
                xcleansed_substitute.write "XXXXXXXXXXXXXXXXXXXX"
                xhidden_settings.write (((unsupported)).apply ((x_lazy_re_compile)) ("API|TOKEN|KEY|SECRET|PASS|SIGNATURE|DATABASE_URL") (((xre).xI)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("view_tests.urls") (("%s.CustomExceptionReporterFilter".mod (x__name__))))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xget_default_exception_reporter_filter).xcache_clear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xget_default_exception_reporter_filter).xcache_clear)).apply)
                xtest_setting_allows_custom_subclass.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xget_default_exception_reporter_filter)).apply)) ((xCustomExceptionReporterFilter)))
                xtest_cleansed_substitute_override.write
                  [xself]
                    memory > xreporter_filter
                    seq > @
                      seq
                        xreporter_filter.write (((xget_default_exception_reporter_filter)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("password") ("super_secret"))) (((xreporter_filter).xcleansed_substitute)))
                xtest_hidden_settings_override.write
                  [xself]
                    memory > xreporter_filter
                    seq > @
                      seq
                        xreporter_filter.write (((xget_default_exception_reporter_filter)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreporter_filter).xcleanse_setting)).apply ("database_url") ("super_secret"))) (((xreporter_filter).xcleansed_substitute)))
            (((unsupported)).apply ((xExceptionReportTestMixin)) ((xLoggingCaptureMixin)) ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xrf.write (((unsupported)).apply ((xRequestFactory)) ("application/json"))
                xtest_non_sensitive_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xnon_sensitive_view)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xnon_sensitive_view)) (FALSE))
                xtest_sensitive_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xsensitive_view)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          (((unsupported)).apply (((xself).xverify_safe_response)) ((xsensitive_view)) (FALSE))
                xtest_paranoid_request.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xparanoid_view)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          (((unsupported)).apply (((xself).xverify_paranoid_response)) ((xparanoid_view)) (FALSE))
                xtest_custom_exception_reporter_filter.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xcustom_exception_reporter_filter_view)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          (((unsupported)).apply (((xself).xverify_unsafe_response)) ((xcustom_exception_reporter_filter_view)) (FALSE))
                xtest_non_html_response_encoding.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/raises500/") ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("text/plain; charset=utf-8"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_sensitive_variables_not_called.write
                  [xself]
                    memory > xtest_func
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "sensitive_variables() must be called to use it as a decorator, e.g., use @sensitive_variables(), not @sensitive_variables."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          xtest_func.write
                            [xpassword]
                              seq > @
                                (((unsupported)).apply)
                xtest_sensitive_post_parameters_not_called.write
                  [xself]
                    memory > xtest_func
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "sensitive_post_parameters() must be called to use it as a decorator, e.g., use @sensitive_post_parameters(), not @sensitive_post_parameters."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          xtest_func.write
                            [xrequest]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((xindex_page)).apply ((xrequest)))))
                xtest_sensitive_post_parameters_http_request.write
                  [xself]
                    memory > xmsg
                    memory > xa_view
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xa_view.write
                            [xself xrequest]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((xHttpResponse)).apply)))
                        xmsg.write "sensitive_post_parameters didn't receive an HttpRequest object. If you are decorating a classmethod, make sure to use @method_decorator."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write ((((((xMyClass)).apply).xa_view)).apply ((((xHttpRequest)).apply)))