memory > xJsToCForGettextTest
memory > xJsTokensTest
memory > xpair
memory > xi
memory > xinput
memory > xprepare_js_for_gettext
memory > xSimpleTestCase
memory > xtoks
memory > xenumerate
memory > xtok
memory > xJsLexer
memory > xsetattr
memory > xname
[] > test_jslex
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xGETTEXT_CASES
        memory > xLEX_CASES
        memory > xmake_function
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              xLEX_CASES.write (((unsupported)).apply ((((unsupported)).apply ("a ABC $ _ a123") ((((unsupported)).apply ("id a") ("id ABC") ("id $") ("id _") ("id a123"))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))) ((((unsupported)).apply ("123 1.234 0.123e-3 0 1E+40 1e1 .123") ((((unsupported)).apply ("dnum 123") ("dnum 1.234") ("dnum 0.123e-3") ("dnum 0") ("dnum 1E+40") ("dnum 1e1") ("dnum .123"))))) ((((unsupported)).apply ("0x1 0xabCD 0XABcd") ((((unsupported)).apply ("hnum 0x1") ("hnum 0xabCD") ("hnum 0XABcd"))))) ((((unsupported)).apply ("010 0377 090") ((((unsupported)).apply ("onum 010") ("onum 0377") ("dnum 0") ("dnum 90"))))) ((((unsupported)).apply ("0xa123ghi") ((((unsupported)).apply ("hnum 0xa123") ("id ghi"))))) ((((unsupported)).apply ("function Function FUNCTION") ((((unsupported)).apply ("keyword function") ("id Function") ("id FUNCTION"))))) ((((unsupported)).apply ("const constructor in inherits") ((((unsupported)).apply ("keyword const") ("id constructor") ("keyword in") ("id inherits"))))) ((((unsupported)).apply ("true true_enough") ((((unsupported)).apply ("reserved true") ("id true_enough"))))) ((((unsupported)).apply (" 'hello' \"hello\" ") ((((unsupported)).apply ("string 'hello'") ("string \"hello\""))))) ((((unsupported)).apply (" 'don't' \"don\"t\" '\"' \"'\" ''' \"\"\" ") ((((unsupported)).apply ("string 'don't'") ("string \"don\"t\"") ("string '\"'") ("string \"'\"") ("string '''") ("string \"\"\""))))) ((((unsupported)).apply ("\"ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\"\"") ((((unsupported)).apply ("string \"ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\"\""))))) ((((unsupported)).apply ("a//b") ((((unsupported)).apply ("id a") ("linecomment //b"))))) ((((unsupported)).apply ("/****/a/=2//hello") ((((unsupported)).apply ("comment /****/") ("id a") ("punct /=") ("dnum 2") ("linecomment //hello"))))) ((((unsupported)).apply ("/*n * Headern */na=1;") ((((unsupported)).apply ("comment /*n * Headern */") ("id a") ("punct =") ("dnum 1") ("punct ;"))))) ((((unsupported)).apply ("a+++b") ((((unsupported)).apply ("id a") ("punct ++") ("punct +") ("id b"))))) ((((unsupported)).apply ("a=/a*/,1") ((((unsupported)).apply ("id a") ("punct =") ("regex /a*/") ("punct ,") ("dnum 1"))))) ((((unsupported)).apply ("a=/a*[^/]+/,1") ((((unsupported)).apply ("id a") ("punct =") ("regex /a*[^/]+/") ("punct ,") ("dnum 1"))))) ((((unsupported)).apply ("a=/a*[^/,1") ((((unsupported)).apply ("id a") ("punct =") ("regex /a*[^/") ("punct ,") ("dnum 1"))))) ((((unsupported)).apply ("a=///,1") ((((unsupported)).apply ("id a") ("punct =") ("regex ///") ("punct ,") ("dnum 1"))))) ((((unsupported)).apply ("for (var x = a in foo && \"</x>\" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}") ((((unsupported)).apply ("keyword for") ("punct (") ("keyword var") ("id x") ("punct =") ("id a") ("keyword in") ("id foo") ("punct &&") ("string \"</x>\"") ("punct ||") ("id mot") ("punct ?") ("id z") ("punct :") ("regex /x:3;x<5;y</g") ("punct /") ("id i") ("punct )") ("punct {") ("id xyz") ("punct (") ("id x") ("punct ++") ("punct )") ("punct ;") ("punct }"))))) ((((unsupported)).apply ("for (var x = a in foo && \"</x>\" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}") ((((unsupported)).apply ("keyword for") ("punct (") ("keyword var") ("id x") ("punct =") ("id a") ("keyword in") ("id foo") ("punct &&") ("string \"</x>\"") ("punct ||") ("id mot") ("punct ?") ("id z") ("punct /") ("id x") ("punct :") ("dnum 3") ("punct ;") ("id x") ("punct <") ("dnum 5") ("punct ;") ("id y") ("punct <") ("regex /g/i") ("punct )") ("punct {") ("id xyz") ("punct (") ("id x") ("punct ++") ("punct )") ("punct ;") ("punct }"))))) ((((unsupported)).apply ("/????/, /++++/, /[----]/ ") ((((unsupported)).apply ("regex /????/") ("punct ,") ("regex /++++/") ("punct ,") ("regex /[----]/"))))) ((((unsupported)).apply ("/[/") ((((unsupported)).apply ("regex /[/"))))) ((((unsupported)).apply ("/[i]/") ((((unsupported)).apply ("regex /[i]/"))))) ((((unsupported)).apply ("/[]]/") ((((unsupported)).apply ("regex /[]]/"))))) ((((unsupported)).apply ("/a[]]/") ((((unsupported)).apply ("regex /a[]]/"))))) ((((unsupported)).apply ("/a[]]b/") ((((unsupported)).apply ("regex /a[]]b/"))))) ((((unsupported)).apply ("/[]/]/gi") ((((unsupported)).apply ("regex /[]/]/gi"))))) ((((unsupported)).apply ("/[[^]]+]/gi") ((((unsupported)).apply ("regex /[[^]]+]/gi"))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("id rexl") ("punct .") ("id re") ("punct =") ("punct {") ("id NAME") ("punct :") ("regex /^(?![0-9])(?:w)+|^\"(?:[^\"]|\"\")+\"/") ("punct ,") ("id UNQUOTED_LITERAL") ("punct :") ("regex /^@(?:(?![0-9])(?:w|:)+|^\"(?:[^\"]|\"\")+\")[[^]]+]/") ("punct ,") ("id QUOTED_LITERAL") ("punct :") ("regex /^'(?:[^']|'')*'/") ("punct ,") ("id NUMERIC_LITERAL") ("punct :") ("regex /^[0-9]+(?:.[0-9]*(?:[eE][-+][0-9]+)?)?/") ("punct ,") ("id SYMBOL") ("punct :") ("regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|||.|:|,|(|)|[|]|{|}|?|:|;|@|^|/+|/|*|+|-)/") ("punct }") ("punct ;"))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("id rexl") ("punct .") ("id re") ("punct =") ("punct {") ("id NAME") ("punct :") ("regex /^(?![0-9])(?:w)+|^\"(?:[^\"]|\"\")+\"/") ("punct ,") ("id UNQUOTED_LITERAL") ("punct :") ("regex /^@(?:(?![0-9])(?:w|:)+|^\"(?:[^\"]|\"\")+\")[[^]]+]/") ("punct ,") ("id QUOTED_LITERAL") ("punct :") ("regex /^'(?:[^']|'')*'/") ("punct ,") ("id NUMERIC_LITERAL") ("punct :") ("regex /^[0-9]+(?:.[0-9]*(?:[eE][-+][0-9]+)?)?/") ("punct ,") ("id SYMBOL") ("punct :") ("regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|||.|:|,|(|)|[|]|{|}|?|:|;|@|^|/+|/|*|+|-)/") ("punct }") ("punct ;") ("id str") ("punct =") ("string '\"'") ("punct ;"))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("keyword this") ("punct .") ("id _js") ("punct =") ("string \"e.str(\"\"") ("punct +") ("keyword this") ("punct .") ("id value") ("punct .") ("id replace") ("punct (") ((((unsupported)).apply)) ("punct ,") ("string \"\\\\\"") ("punct )") ("punct .") ("id replace") ("punct (") ("regex /\"/g") ("punct ,") ("string \"\\\"\"") ("punct )") ("punct +") ("string \"\")\"") ("punct ;"))))))
            xmake_function.write
              [xinput xtoks]
                memory > xtest_func
                seq > @
                  seq
                    xtest_func.write
                      [xself]
                        memory > xresult
                        memory > xlexer
                        seq > @
                          seq
                            xlexer.write (((xJsLexer)).apply)
                            xresult.write (((unsupported)).apply (("%s %s".mod (((unsupported)).apply ((xname)) ((xtok))))) ((((unsupported)).apply ((xname)) ((xtok)))) (((((xlexer).xlex)).apply ((xinput)))) (((xname).neq "ws")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtoks)) ((xresult)))
                    (((unsupported)).apply ((xtest_func)))
            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((((unsupported)).apply ((xinput)) ((xtoks)))))) ((((xenumerate)).apply (((xJsTokensTest).xLEX_CASES)))))
              bogusForceDataize.write (((xsetattr)).apply ((xJsTokensTest)) (("test_case_%d".mod (xi))) ((((xmake_function)).apply ((xinput)) ((xtoks)))))
            xGETTEXT_CASES.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
            (((unsupported)).apply ((xSimpleTestCase)))
            xmake_function.write
              [xjs xc]
                memory > xtest_func
                seq > @
                  seq
                    xtest_func.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprepare_js_for_gettext)).apply ((xjs)))) ((xc)))
                    (((unsupported)).apply ((xtest_func)))
            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xpair)))) ((((xenumerate)).apply ((xGETTEXT_CASES)))))
              bogusForceDataize.write (((xsetattr)).apply ((xJsToCForGettextTest)) (("test_case_%d".mod (xi))) ((((xmake_function)).apply ((((unsupported)).apply ((xpair)))))))