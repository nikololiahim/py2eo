memory > xAlwaysEqual
memory > xKeyError
memory > xkw
memory > xset
memory > xDict
memory > xsupport
memory > xDictVersionTests
memory > xargs
memory > xunittest
memory > xobject
memory > xdict
memory > x__name__
[] > test_dict_version
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xnew_dict
        memory > xtest_constructor
        memory > x_testcapi
        memory > xtest_pop
        memory > xsetUp
        memory > xtest_copy
        memory > xtest_setitem_equal
        memory > xcheck_version_dont_change
        memory > xtest_setitem_same_value
        memory > xcheck_version_changed
        memory > xtest_delitem
        memory > xtest_setdefault
        memory > xcheck_version_unique
        memory > xtest_update
        memory > xtest_clear
        memory > xtest_setitem
        memory > xtest_popitem
        memory > xtype2test
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_testcapi.write ((((xsupport).ximport_module)).apply ("_testcapi"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtype2test.write (xdict)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseen_versions)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xdict)) ("None: is there a None literal in the EO language?"))
                xcheck_version_unique.write
                  [xself xmydict]
                    memory > xversion
                    seq > @
                      seq
                        xversion.write ((((x_testcapi).xdict_get_version)).apply ((xmydict)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xversion)) (((xself).xseen_versions)))
                        bogusForceDataize.write (((((xself).xseen_versions).xadd)).apply ((xversion)))
                xcheck_version_changed.write
                  [xself xmydict xmethod]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((xmethod)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                        bogusForceDataize.write ((((xself).xcheck_version_unique)).apply ((xmydict)))
                        (((unsupported)).apply ((xresult)))
                xcheck_version_dont_change.write
                  [xself xmydict xmethod]
                    memory > xversion1
                    memory > xresult
                    memory > xversion2
                    seq > @
                      (((unsupported)).apply)
                        xversion1.write ((((x_testcapi).xdict_get_version)).apply ((xmydict)))
                        bogusForceDataize.write (((((xself).xseen_versions).xadd)).apply ((xversion1)))
                        xresult.write (((xmethod)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                        xversion2.write ((((x_testcapi).xdict_get_version)).apply ((xmydict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xversion2)) ((xversion1)) ("version changed"))
                        (((unsupported)).apply ((xresult)))
                xnew_dict.write
                  [xself]
                    memory > xd
                    seq > @
                      (((unsupported)).apply)
                        xd.write ((((xself).xtype2test)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                        bogusForceDataize.write ((((xself).xcheck_version_unique)).apply ((xd)))
                        (((unsupported)).apply ((xd)))
                xtest_constructor.write
                  [xself]
                    memory > xempty2
                    memory > xnonempty2
                    memory > xempty3
                    memory > xnonempty1
                    memory > xempty1
                    seq > @
                      seq
                        xempty1.write ((((xself).xnew_dict)).apply)
                        xempty2.write ((((xself).xnew_dict)).apply)
                        xempty3.write ((((xself).xnew_dict)).apply)
                        xnonempty1.write (((unsupported)).apply (((xself).xnew_dict)) ("x"))
                        xnonempty2.write (((unsupported)).apply (((xself).xnew_dict)) ("x") ("y"))
                xtest_copy.write
                  [xself]
                    memory > xd
                    memory > xd2
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) (1) (2))
                        xd2.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).xcopy)))
                        bogusForceDataize.write ((((xself).xcheck_version_unique)).apply ((xd2)))
                xtest_setitem.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xself).xnew_dict)).apply)
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("x") ("x"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("y") ("y"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("x") (1))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("y") (2))
                xtest_setitem_same_value.write
                  [xself]
                    memory > xd
                    memory > xvalue
                    memory > xd2
                    seq > @
                      seq
                        xvalue.write (((xobject)).apply)
                        xd.write ((((xself).xnew_dict)).apply)
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("key") ((xvalue)))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).x__setitem__)) ("key") ((xvalue)))
                        (((unsupported)).apply (((xself).xcheck_version_dont_change)) ((xd)) (((xd).xupdate)) ((xvalue)))
                        xd2.write (((unsupported)).apply (((xself).xnew_dict)) ((xvalue)))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).xupdate)) ((xd2)))
                xtest_setitem_equal.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xd2
                    memory > xvalue1
                    memory > xvalue2
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        xvalue1.write (((xAlwaysEqual)).apply)
                        xvalue2.write (((xAlwaysEqual)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xvalue1).eq (xvalue2))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xvalue1).neq (xvalue2))))
                        xd.write ((((xself).xnew_dict)).apply)
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("key") ((xvalue1)))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__setitem__)) ("key") ((xvalue2)))
                        (((unsupported)).apply (((xself).xcheck_version_changed)) ((xd)) (((xd).xupdate)) ((xvalue1)))
                        xd2.write (((unsupported)).apply (((xself).xnew_dict)) ((xvalue2)))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xupdate)) ((xd2)))
                xtest_setdefault.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xself).xnew_dict)).apply)
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xsetdefault)) ("key") ("value1"))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).xsetdefault)) ("key") ("value2"))
                xtest_delitem.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) ("value"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).x__delitem__)) ("key"))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xself).xassertRaises)) ((xKeyError)) (((xd).x__delitem__)) ("key"))
                xtest_pop.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) ("value"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xpop)) ("key"))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xself).xassertRaises)) ((xKeyError)) (((xd).xpop)) ("key"))
                xtest_popitem.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) ("value"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xpopitem)))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xself).xassertRaises)) ((xKeyError)) (((xd).xpopitem)))
                xtest_update.write
                  [xself]
                    memory > xd
                    memory > xd2
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) ("value"))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).xupdate)))
                        (((unsupported)).apply (((xself).xcheck_version_changed)) ((xd)) (((xd).xupdate)) ("new value"))
                        xd2.write (((unsupported)).apply (((xself).xnew_dict)) ("value 3"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xupdate)) ((xd2)))
                xtest_clear.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (((xself).xnew_dict)) ("value"))
                        bogusForceDataize.write ((((xself).xcheck_version_changed)).apply ((xd)) (((xd).xclear)))
                        bogusForceDataize.write ((((xself).xcheck_version_dont_change)).apply ((xd)) (((xd).xclear)))
            (((unsupported)).apply ((xdict)))
            (((unsupported)).apply ((xDictVersionTests)))
              xtype2test.write (xDict)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)