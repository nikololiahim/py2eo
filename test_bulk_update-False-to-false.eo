memory > xfalse
memory > xFieldDoesNotExist
memory > xcat
memory > xstr
memory > xindividual
memory > xTestCase
memory > xJSONFieldNullable
memory > x_
memory > xset
memory > xarticle
memory > xobj
memory > xzip
memory > xnote
memory > xmodel
memory > xValid
memory > xFood
memory > xcategory
memory > xdatetime
memory > xlist
memory > xnumber
memory > xTag
memory > xValueError
memory > xrange
memory > xMember
memory > xIndividual
memory > xCustomDbColumn
memory > xip
memory > xLower
memory > xNumber
memory > xOrder
memory > xCustomPk
memory > xNote
memory > xParagraph
memory > xbottom
memory > xtag
memory > xi
memory > xtop
memory > xF
memory > xDetail
memory > xRelatedObject
memory > xIntegrityError
memory > xArticle
memory > xSingleObject
memory > xSpecialCategory
memory > xlen
[] > test_bulk_update
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdb_for_write
        memory > xtest_database_routing_batch_atomicity
        memory > xtest_custom_pk
        memory > xtest_simple
        memory > xtest_invalid_batch_size
        memory > xtest_multiple_fields
        memory > xpk_fields_error
        memory > xtest_large_batch
        memory > xtest_f_expression
        memory > xtest_functions
        memory > xdatabases
        memory > xtest_update_primary_key
        memory > xtest_set_field_to_null
        memory > xtest_database_routing
        memory > xtest_batch_size
        memory > xtest_unsaved_models
        memory > xtest_json_field
        memory > xtest_only_concrete_fields_allowed
        memory > xtest_unspecified_unsaved_parent
        memory > xtest_no_fields
        memory > xtest_datetime_field
        memory > xtest_falsey_pk_value
        memory > xsetUpTestData
        memory > xtest_empty_objects
        memory > xtest_field_references
        memory > xcreate_tags
        memory > xtest_ipaddressfield
        memory > xtest_unsaved_parent
        memory > xtest_foreign_keys_do_not_lookup
        memory > xtest_booleanfield
        memory > xtest_updated_rows_when_passing_duplicates
        memory > xtest_custom_db_columns
        memory > xtest_nullable_fk_after_related_save
        memory > xtest_inherited_fields
        memory > xtest_set_mixed_fields_to_null
        memory > xtest_update_custom_primary_key
        memory > xtest_nonexistent_field
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              xdb_for_write.write
                [xself xmodel]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply ("other"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xnotes)) ((((unsupported)).apply ((((unsupported)).apply ((((xNote).xobjects).xcreate)) ((((xstr)).apply ((xi)))) ((((xstr)).apply ((xi)))))) ((xi)) ((((xrange)).apply (10))))))
                xcreate_tags.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtags)) ((((unsupported)).apply ((((unsupported)).apply ((((xTag).xobjects).xcreate)) ((((xstr)).apply ((xi)))))) ((xi)) ((((xrange)).apply (10))))))
                xtest_simple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xnote)) (((xself).xnotes)))
                          (((unsupported)).apply (((xnote).xnote)) (("test-%s".mod ((xnote).xid))))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                          bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("note"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xvalues_list)) ("note") (TRUE))) ((((unsupported)).apply (((xcat).xnote)) ((xcat)) (((xself).xnotes)))))
                xtest_multiple_fields.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xnote)) (((xself).xnotes)))
                          seq
                            (((unsupported)).apply (((xnote).xnote)) (("test-%s".mod ((xnote).xid))))
                            (((unsupported)).apply (((xnote).xmisc)) (("misc-%s".mod ((xnote).xid))))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                          bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("note") ("misc"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xvalues_list)) ("note") (TRUE))) ((((unsupported)).apply (((xcat).xnote)) ((xcat)) (((xself).xnotes)))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xvalues_list)) ("misc") (TRUE))) ((((unsupported)).apply (((xcat).xmisc)) ((xcat)) (((xself).xnotes)))))
                xtest_batch_size.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertNumQueries)).apply ((((xlen)).apply (((xself).xnotes)))))))
                        (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) (((xself).xnotes)) ((((unsupported)).apply ("note"))) (1))
                xtest_unsaved_models.write
                  [xself]
                    memory > xobjs
                    memory > xmsg
                    seq > @
                      seq
                        xobjs.write (((xself).xnotes).add (((unsupported)).apply ((((unsupported)).apply ((xNote)) ("test") ("test")))))
                        xmsg.write "All bulk_update() objects must have a primary key set."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) ((xobjs)) ((((unsupported)).apply ("note"))))
                xtest_foreign_keys_do_not_lookup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_tags)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xnote)) ((xtag)))) ((((xzip)).apply (((xself).xnotes)) (((xself).xtags)))))
                          (((unsupported)).apply (((xnote).xtag)) ((xtag)))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                          bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("tag"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xfilter)) ((xfalse)))) (((xself).xnotes)))
                xtest_set_field_to_null.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_tags)).apply)
                        (((unsupported)).apply ((((xNote).xobjects).xupdate)) ((((unsupported)).apply (((xself).xtags)) (0))))
                        (((unsupported)).apply ((xnote)) (((xself).xnotes)))
                          (((unsupported)).apply (((xnote).xtag)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("tag"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xfilter)) (TRUE))) (((xself).xnotes)))
                xtest_set_mixed_fields_to_null.write
                  [xself]
                    memory > xmidpoint
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_tags)).apply)
                        xmidpoint.write (((unsupported)).apply ((((xlen)).apply (((xself).xnotes)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xtop)) ((xbottom)))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xnotes)) ((((unsupported)).apply ((xmidpoint)))))) ((((unsupported)).apply (((xself).xnotes)) ((((unsupported)).apply ((xmidpoint)))))))))
                        (((unsupported)).apply ((xnote)) ((xtop)))
                          (((unsupported)).apply (((xnote).xtag)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xnote)) ((xbottom)))
                          (((unsupported)).apply (((xnote).xtag)) ((((unsupported)).apply (((xself).xtags)) (0))))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("tag"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xfilter)) (TRUE))) ((xtop)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xfilter)) ((xfalse)))) ((xbottom)))
                xtest_functions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xNote).xobjects).xupdate)) ("TEST"))
                        (((unsupported)).apply ((xnote)) (((xself).xnotes)))
                          (((unsupported)).apply (((xnote).xnote)) ((((xLower)).apply ("note"))))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply (((xself).xnotes)) ((((unsupported)).apply ("note"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((unsupported)).apply ((((xNote).xobjects).xvalues_list)) ("note") (TRUE))))) ((((unsupported)).apply ("test"))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_no_fields.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Field names must be given to bulk_update()."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_invalid_batch_size.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Batch size must be a positive integer."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) ((((unsupported)).apply)) ((((unsupported)).apply ("note"))) ((1.neg)))
                xtest_nonexistent_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldDoesNotExist)) ("Note has no field named 'nonexistent'"))))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("nonexistent"))))
                xpk_fields_error.write "bulk_update() cannot be used with primary key fields."
                xtest_update_primary_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (((xself).xpk_fields_error)))))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("id"))))
                xtest_update_custom_primary_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (((xself).xpk_fields_error)))))
                        bogusForceDataize.write (((((xCustomPk).xobjects).xbulk_update)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("name"))))
                xtest_empty_objects.write
                  [xself]
                    memory > xrows_updated
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                          xrows_updated.write (((((xNote).xobjects).xbulk_update)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("note"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrows_updated)) (0))
                xtest_large_batch.write
                  [xself]
                    memory > xnotes
                    memory > xrows_updated
                    seq > @
                      seq
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNote)) ((((xstr)).apply ((xi)))) ((((xstr)).apply ((xi)))))) ((xi)) ((((xrange)).apply (0) (2000))))))
                        xnotes.write (((xlist)).apply ((((((xNote).xobjects).xall)).apply)))
                        xrows_updated.write (((((xNote).xobjects).xbulk_update)).apply ((xnotes)) ((((unsupported)).apply ("note"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrows_updated)) (2000))
                xtest_updated_rows_when_passing_duplicates.write
                  [xself]
                    memory > xnote
                    memory > xrows_updated
                    seq > @
                      seq
                        xnote.write (((unsupported)).apply ((((xNote).xobjects).xcreate)) ("test-note") ("test"))
                        xrows_updated.write (((((xNote).xobjects).xbulk_update)).apply ((((unsupported)).apply ((xnote)) ((xnote)))) ((((unsupported)).apply ("note"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrows_updated)) (1))
                        xrows_updated.write (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) ((((unsupported)).apply ((xnote)) ((xnote)))) ((((unsupported)).apply ("note"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrows_updated)) (2))
                xtest_only_concrete_fields_allowed.write
                  [xself]
                    memory > xparagraph
                    memory > xdetail
                    memory > xmsg
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xValid).xobjects).xcreate)) ("test"))
                        xdetail.write (((unsupported)).apply ((((xDetail).xobjects).xcreate)) ("test"))
                        xparagraph.write (((unsupported)).apply ((((xParagraph).xobjects).xcreate)) ("test"))
                        (((unsupported)).apply ((((xMember).xobjects).xcreate)) ("test") ((xdetail)))
                        xmsg.write "bulk_update() can only be used with concrete fields."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xDetail).xobjects).xbulk_update)) ((((unsupported)).apply ((xdetail)))) ((((unsupported)).apply ("member"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xParagraph).xobjects).xbulk_update)) ((((unsupported)).apply ((xparagraph)))) ((((unsupported)).apply ("page"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xValid).xobjects).xbulk_update)) ((((unsupported)).apply ((xobj)))) ((((unsupported)).apply ("parent"))))
                xtest_custom_db_columns.write
                  [xself]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((unsupported)).apply ((((xCustomDbColumn).xobjects).xcreate)) (1))
                        (((unsupported)).apply (((xmodel).xcustom_column)) (2))
                        (((unsupported)).apply ((((xCustomDbColumn).xobjects).xbulk_update)) ((((unsupported)).apply ((xmodel)))) ((((unsupported)).apply ("custom_column"))))
                        bogusForceDataize.write ((((xmodel).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xcustom_column)) (2))
                xtest_custom_pk.write
                  [xself]
                    memory > xcustom_pks
                    seq > @
                      seq
                        xcustom_pks.write (((unsupported)).apply ((((unsupported)).apply ((((xCustomPk).xobjects).xcreate)) (("pk-%s".mod (xi))) (""))) ((xi)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xmodel)) ((xcustom_pks)))
                          (((unsupported)).apply (((xmodel).xextra)) (("extra-%s".mod ((xmodel).xpk))))
                        bogusForceDataize.write (((((xCustomPk).xobjects).xbulk_update)).apply ((xcustom_pks)) ((((unsupported)).apply ("extra"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xCustomPk).xobjects).xvalues_list)) ("extra") (TRUE))) ((((unsupported)).apply (((xcat).xextra)) ((xcat)) ((xcustom_pks)))))
                xtest_falsey_pk_value.write
                  [xself]
                    memory > xorder
                    seq > @
                      seq
                        xorder.write (((unsupported)).apply ((((xOrder).xobjects).xcreate)) (0) ("test"))
                        (((unsupported)).apply (((xorder).xname)) ("updated"))
                        bogusForceDataize.write (((((xOrder).xobjects).xbulk_update)).apply ((((unsupported)).apply ((xorder)))) ((((unsupported)).apply ("name"))))
                        bogusForceDataize.write ((((xorder).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xorder).xname)) ("updated"))
                xtest_inherited_fields.write
                  [xself]
                    memory > xspecial_categories
                    seq > @
                      seq
                        xspecial_categories.write (((unsupported)).apply ((((unsupported)).apply ((((xSpecialCategory).xobjects).xcreate)) ((((xstr)).apply ((xi)))) ((((xstr)).apply ((xi)))))) ((xi)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xcategory)) ((xspecial_categories)))
                          seq
                            (((unsupported)).apply (((xcategory).xname)) (("test-%s".mod ((xcategory).xid))))
                            (((unsupported)).apply (((xcategory).xspecial_name)) (("special-test-%s".mod ((xcategory).xspecial_name))))
                        bogusForceDataize.write (((((xSpecialCategory).xobjects).xbulk_update)).apply ((xspecial_categories)) ((((unsupported)).apply ("name") ("special_name"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xSpecialCategory).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply (((xcat).xname)) ((xcat)) ((xspecial_categories)))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xSpecialCategory).xobjects).xvalues_list)) ("special_name") (TRUE))) ((((unsupported)).apply (((xcat).xspecial_name)) ((xcat)) ((xspecial_categories)))))
                xtest_field_references.write
                  [xself]
                    memory > xnumbers
                    seq > @
                      seq
                        xnumbers.write (((unsupported)).apply ((((unsupported)).apply ((((xNumber).xobjects).xcreate)) (0))) ((x_)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xnumber)) ((xnumbers)))
                          (((unsupported)).apply (((xnumber).xnum)) (((((xF)).apply ("num")).add 1)))
                        bogusForceDataize.write (((((xNumber).xobjects).xbulk_update)).apply ((xnumbers)) ((((unsupported)).apply ("num"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))) ((xnumbers)))
                xtest_f_expression.write
                  [xself]
                    memory > xnotes
                    seq > @
                      seq
                        xnotes.write (((unsupported)).apply ((((unsupported)).apply ((((xNote).xobjects).xcreate)) ("test_note") ("test_misc"))) ((x_)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xnote)) ((xnotes)))
                          (((unsupported)).apply (((xnote).xmisc)) ((((xF)).apply ("note"))))
                        bogusForceDataize.write (((((xNote).xobjects).xbulk_update)).apply ((xnotes)) ((((unsupported)).apply ("misc"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xNote).xobjects).xfilter)) ("test_note"))) ((xnotes)))
                xtest_booleanfield.write
                  [xself]
                    memory > xindividuals
                    seq > @
                      seq
                        xindividuals.write (((unsupported)).apply ((((unsupported)).apply ((((xIndividual).xobjects).xcreate)) ((xfalse)))) ((x_)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xindividual)) ((xindividuals)))
                          (((unsupported)).apply (((xindividual).xalive)) (TRUE))
                        bogusForceDataize.write (((((xIndividual).xobjects).xbulk_update)).apply ((xindividuals)) ((((unsupported)).apply ("alive"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xIndividual).xobjects).xfilter)) (TRUE))) ((xindividuals)))
                xtest_ipaddressfield.write
                  [xself]
                    memory > xmodels
                    seq > @
                      (((unsupported)).apply ((xip)) ((((unsupported)).apply ("2001::1") ("1.2.3.4"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xip)))))
                          seq
                            xmodels.write (((unsupported)).apply ((((unsupported)).apply ((((xCustomDbColumn).xobjects).xcreate)) ("0.0.0.0"))) ((x_)) ((((xrange)).apply (10))))
                            (((unsupported)).apply ((xmodel)) ((xmodels)))
                              (((unsupported)).apply (((xmodel).xip_address)) ((xip)))
                            bogusForceDataize.write (((((xCustomDbColumn).xobjects).xbulk_update)).apply ((xmodels)) ((((unsupported)).apply ("ip_address"))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xCustomDbColumn).xobjects).xfilter)) ((xip)))) ((xmodels)))
                xtest_datetime_field.write
                  [xself]
                    memory > xpoint_in_time
                    memory > xarticles
                    seq > @
                      seq
                        xarticles.write (((unsupported)).apply ((((unsupported)).apply ((((xArticle).xobjects).xcreate)) ((((xstr)).apply ((xi)))) ((((((xdatetime).xdatetime).xtoday)).apply)))) ((xi)) ((((xrange)).apply (10))))
                        xpoint_in_time.write ((((xdatetime).xdatetime)).apply (1991) (10) (31))
                        (((unsupported)).apply ((xarticle)) ((xarticles)))
                          (((unsupported)).apply (((xarticle).xcreated)) ((xpoint_in_time)))
                        bogusForceDataize.write (((((xArticle).xobjects).xbulk_update)).apply ((xarticles)) ((((unsupported)).apply ("created"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xArticle).xobjects).xfilter)) ((xpoint_in_time)))) ((xarticles)))
                xtest_json_field.write
                  [xself]
                    memory > xobjs
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xJSONFieldNullable).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xJSONFieldNullable)) ((((unsupported)).apply ("a") ((xi)))))) ((xi)) ((((xrange)).apply (10))))))
                        xobjs.write (((((xJSONFieldNullable).xobjects).xall)).apply)
                        (((unsupported)).apply ((xobj)) ((xobjs)))
                          (((unsupported)).apply (((xobj).xjson_field)) ((((unsupported)).apply ("c") (((((unsupported)).apply (((xobj).xjson_field)) ("a")).add 1)))))
                        bogusForceDataize.write (((((xJSONFieldNullable).xobjects).xbulk_update)).apply ((xobjs)) ((((unsupported)).apply ("json_field"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xJSONFieldNullable).xobjects).xfilter)) ("c"))) ((xobjs)))
                xtest_nullable_fk_after_related_save.write
                  [xself]
                    memory > xchild
                    memory > xparent
                    seq > @
                      seq
                        xparent.write (((((xRelatedObject).xobjects).xcreate)).apply)
                        xchild.write (((xSingleObject)).apply)
                        (((unsupported)).apply (((xparent).xsingle)) ((xchild)))
                        bogusForceDataize.write (((((xparent).xsingle).xsave)).apply)
                        (((unsupported)).apply ((((xRelatedObject).xobjects).xbulk_update)) ((((unsupported)).apply ((xparent)))) ((((unsupported)).apply ("single"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent).xsingle_id)) ((((xparent).xsingle).xpk)))
                        bogusForceDataize.write ((((xparent).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent).xsingle)) ((xchild)))
                xtest_unsaved_parent.write
                  [xself]
                    memory > xparent
                    memory > xmsg
                    seq > @
                      seq
                        xparent.write (((((xRelatedObject).xobjects).xcreate)).apply)
                        (((unsupported)).apply (((xparent).xsingle)) ((((xSingleObject)).apply)))
                        xmsg.write "bulk_update() prohibited to prevent data loss due to unsaved related object 'single'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xRelatedObject).xobjects).xbulk_update)) ((((unsupported)).apply ((xparent)))) ((((unsupported)).apply ("single"))))
                xtest_unspecified_unsaved_parent.write
                  [xself]
                    memory > xparent
                    seq > @
                      seq
                        xparent.write (((((xRelatedObject).xobjects).xcreate)).apply)
                        (((unsupported)).apply (((xparent).xsingle)) ((((xSingleObject)).apply)))
                        (((unsupported)).apply (((xparent).xf)) (42))
                        (((unsupported)).apply ((((xRelatedObject).xobjects).xbulk_update)) ((((unsupported)).apply ((xparent)))) ((((unsupported)).apply ("f"))))
                        bogusForceDataize.write ((((xparent).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparent).xf)) (42))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xparent).xsingle)))
                xtest_database_routing.write
                  [xself]
                    memory > xnote
                    seq > @
                      (((unsupported)).apply)
                        xnote.write (((unsupported)).apply ((((xNote).xobjects).xcreate)) ("create"))
                        (((unsupported)).apply (((xnote).xnote)) ("bulk_update"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertNumQueries)) (1) ("other"))))
                          (((unsupported)).apply ((((xNote).xobjects).xbulk_update)) ((((unsupported)).apply ((xnote)))) ((((unsupported)).apply ("note"))))
                xtest_database_routing_batch_atomicity.write
                  [xself]
                    memory > xf2
                    memory > xf1
                    seq > @
                      (((unsupported)).apply)
                        xf1.write (((unsupported)).apply ((((xFood).xobjects).xcreate)) ("Banana"))
                        xf2.write (((unsupported)).apply ((((xFood).xobjects).xcreate)) ("Apple"))
                        (((unsupported)).apply (((xf1).xname)) ("Kiwi"))
                        (((unsupported)).apply (((xf2).xname)) ("Kiwi"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))))
                          (((unsupported)).apply ((((xFood).xobjects).xbulk_update)) ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ("name"))) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xFood).xobjects).xfilter)) ("Kiwi")).xexists)).apply)) ((xfalse)))