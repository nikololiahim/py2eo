memory > xfalse
memory > xAttributeError
memory > xdelattr
memory > xConnectionDoesNotExist
memory > xgetattr
memory > xiter
memory > xsetattr
memory > xNotImplementedError
memory > xalias
memory > xException
memory > xLocal
memory > xhasattr
[] > connection
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdjango_settings
        memory > x__eq__
        memory > xall
        memory > x__getattr__
        memory > x__iter__
        memory > x__getitem__
        memory > x__delitem__
        memory > x__delattr__
        memory > x__setitem__
        memory > x__init__
        memory > xsettings_name
        memory > x__contains__
        memory > xexception_class
        memory > xsettings
        memory > x__setattr__
        memory > xcreate_connection
        memory > xconfigure_settings
        memory > xthread_critical
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xconnections xalias]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("_connections"))) ((xconnections)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("_alias"))) ((xalias)))
                x__getattr__.write
                  [xself xitem]
                    seq > @
                      (((unsupported)).apply ((((xgetattr)).apply ((((unsupported)).apply (((xself).x_connections)) (((xself).x_alias)))) ((xitem)))))
                x__setattr__.write
                  [xself xname xvalue]
                    seq > @
                      (((unsupported)).apply ((((xsetattr)).apply ((((unsupported)).apply (((xself).x_connections)) (((xself).x_alias)))) ((xname)) ((xvalue)))))
                x__delattr__.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply ((((xdelattr)).apply ((((unsupported)).apply (((xself).x_connections)) (((xself).x_alias)))) ((xname)))))
                x__contains__.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((((unsupported)).apply (((xself).x_connections)) (((xself).x_alias)))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((unsupported)).apply (((xself).x_connections)) (((xself).x_alias))).eq (xother))))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply)
              seq
                xsettings_name.write "None: is there a None literal in the EO language?"
                xexception_class.write (xConnectionDoesNotExist)
                xthread_critical.write (xfalse)
                x__init__.write
                  [xself xsettings]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_settings)) ((xsettings)))
                        (((unsupported)).apply (((xself).x_connections)) ((((xLocal)).apply (((xself).xthread_critical)))))
                xsettings.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_settings)) (((((xself).xconfigure_settings)).apply (((xself).x_settings)))))
                        (((unsupported)).apply (((xself).x_settings)))
                xconfigure_settings.write
                  [xself xsettings]
                    seq > @
                      seq
                        (((unsupported)).apply ((xsettings)) ("None: is there a None literal in the EO language?")).if
                          xsettings.write (((xgetattr)).apply ((xdjango_settings)) (((xself).xsettings_name)))
                        (((unsupported)).apply ((xsettings)))
                xcreate_connection.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Subclasses must implement create_connection()."))))
                x__getitem__.write
                  [xself xalias]
                    memory > xconn
                    seq > @
                      seq
                        (((unsupported)).apply ((xAttributeError)))
                          (((unsupported)).apply ((((xgetattr)).apply (((xself).x_connections)) ((xalias)))))
                          (((unsupported)).apply ((xalias)) (((xself).xsettings))).if
                            (((unsupported)).apply (((((xself).xexception_class)).apply ("The connection '{alias}' doesn't exist."))))
                        xconn.write ((((xself).xcreate_connection)).apply ((xalias)))
                        bogusForceDataize.write (((xsetattr)).apply (((xself).x_connections)) ((xalias)) ((xconn)))
                        (((unsupported)).apply ((xconn)))
                x__setitem__.write
                  [xself xkey xvalue]
                    seq > @
                      bogusForceDataize.write (((xsetattr)).apply (((xself).x_connections)) ((xkey)) ((xvalue)))
                x__delitem__.write
                  [xself xkey]
                    seq > @
                      bogusForceDataize.write (((xdelattr)).apply (((xself).x_connections)) ((xkey)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((xself).xsettings)))))
                xall.write
                  [xself xinitialized_only]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ((xalias)))) ((xalias)) ((xself)) ((((xinitialized_only).not).or (((xhasattr)).apply (((xself).x_connections)) ((xalias))))))))