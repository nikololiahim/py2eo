memory > xthreading
memory > xTestPOP3Class
memory > xSSLConnection
memory > xerr
memory > xDummyPOP3Handler
memory > xssl
memory > xhasattr
memory > xparams
memory > xgetattr
memory > xasynchat
memory > x__file__
memory > xaddr
memory > x__name__
memory > xcap
memory > xValueError
memory > xerrno
memory > xstr
memory > xconn
memory > xTestTimeouts
memory > xskipUnless
memory > xTestCase
memory > xsocket
memory > xTestPOP3_TLSClass
memory > xDummyPOP3_SSLHandler
memory > xTestPOP3_SSLClass
memory > xOSError
memory > xos
memory > xpoplib
memory > xasyncore
memory > xDummyPOP3Server
memory > xlen
memory > xdict
[] > test_poplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_exceptions
        memory > xtest_dele
        memory > xpush
        memory > xcmd_utf8
        memory > xcmd_quit
        memory > xrun
        memory > xtest_apop_REDOS
        memory > xHOST
        memory > xserver
        memory > xcmd_stls
        memory > xhandle_error
        memory > xtest_apop_normal
        memory > xtest_uidl
        memory > xcollect_incoming_data
        memory > xtest__all__
        memory > xCAFILE
        memory > xtest_pass_
        memory > xtestTimeoutValue
        memory > xcmd_user
        memory > xcmd_dele
        memory > xtest_rpop
        memory > xcmd_pass
        memory > x_do_tls_handshake
        memory > xhandler
        memory > xcmd_retr
        memory > xtest_utf8_raises_if_unsupported
        memory > xtest_too_long_lines
        memory > xtest_top
        memory > xtest_capa
        memory > xtest_stls
        memory > xcmd_stat
        memory > xtest_stls_capa
        memory > xassertOK
        memory > xcmd_rpop
        memory > xtest_main
        memory > xcmd_capa
        memory > xstop
        memory > xcmd_list
        memory > xhandle_accepted
        memory > xtestTimeoutNone
        memory > xstart
        memory > xenable_UTF8
        memory > xsetUp
        memory > xtest_retr
        memory > xcmd_echo
        memory > xwritable
        memory > xtest_utf8
        memory > xtest_stat
        memory > xtest_noop
        memory > xhandle_read
        memory > xLIST_RESP
        memory > xPORT
        memory > xtest_stls_context
        memory > xcmd_uidl
        memory > xSUPPORTS_SSL
        memory > xhandle_connect
        memory > xfound_terminator
        memory > x_get_capas
        memory > xcmd_noop
        memory > xcmd_apop
        memory > x__init__
        memory > xrequires_ssl
        memory > xCERTFILE
        memory > xtest_quit
        memory > xRETR_RESP
        memory > xtestTimeoutDefault
        memory > xtearDown
        memory > xcmd_top
        memory > xCAPAS
        memory > xtest_support
        memory > xtest_user
        memory > xtest_context
        memory > xtest_getwelcome
        memory > xtest_list
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xHOST.write ((xtest_support).xHOST)
            xPORT.write 0
            xSUPPORTS_SSL.write FALSE
            (((xhasattr)).apply ((xpoplib)) ("POP3_SSL")).if
              seq
                (((unsupported)).apply)
                xSUPPORTS_SSL.write TRUE
                xCERTFILE.write (((((xos).xpath).xjoin)).apply (((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))) ("keycert3.pem"))
                xCAFILE.write (((((xos).xpath).xjoin)).apply (((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))) ("pycacert.pem"))
            xrequires_ssl.write (((xskipUnless)).apply ((xSUPPORTS_SSL)) ("SSL not supported"))
            xLIST_RESP.write "1 1rn2 2rn3 3rn4 4rn5 5rn.rn"
            xRETR_RESP.write (((unsupported)).apply)
            (((unsupported)).apply (((xasynchat).xasync_chat)))
              seq
                xCAPAS.write (((unsupported)).apply ("UIDL") ((((unsupported)).apply)) ("IMPLEMENTATION") ((((unsupported)).apply ("python-testlib-pop-server"))))
                xenable_UTF8.write FALSE
                x__init__.write
                  [xself xconn]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)).apply ((xself)) ((xconn)))
                        bogusForceDataize.write ((((xself).xset_terminator)).apply ("rn"))
                        (((unsupported)).apply (((xself).xin_buffer)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xpush)).apply ("+OK dummy pop3 server ready. <timestamp>"))
                        (((unsupported)).apply (((xself).xtls_active)) (FALSE))
                        (((unsupported)).apply (((xself).xtls_starting)) (FALSE))
                xcollect_incoming_data.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xin_buffer).xappend)).apply ((xdata)))
                xfound_terminator.write
                  [xself]
                    memory > xspace
                    memory > xcmd
                    memory > xarg
                    memory > xline
                    memory > xmethod
                    seq > @
                      seq
                        xline.write ((("".xjoin)).apply (((xself).xin_buffer)))
                        xline.write (((xstr)).apply ((xline)) ("ISO-8859-1"))
                        (((unsupported)).apply (((xself).xin_buffer)) ((((unsupported)).apply)))
                        xcmd.write ((((((unsupported)).apply (((((xline).xsplit)).apply (" "))) (0)).xlower)).apply)
                        xspace.write ((((xline).xfind)).apply (" "))
                        ((xspace).neq (1.neg)).if
                          xarg.write (((unsupported)).apply ((xline)) ((((unsupported)).apply (((xspace).add 1)))))
                          xarg.write ""
                        (((xhasattr)).apply ((xself)) (("cmd_".add (xcmd)))).if
                          seq
                            xmethod.write (((xgetattr)).apply ((xself)) (("cmd_".add (xcmd))))
                            bogusForceDataize.write (((xmethod)).apply ((xarg)))
                          bogusForceDataize.write ((((xself).xpush)).apply (("-ERR unrecognized POP3 command \"%s\".".mod (xcmd))))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xpush.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)).apply ((xself)) ((((((xdata).xencode)).apply ("ISO-8859-1")).add "rn")))
                xcmd_echo.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ((xarg)))
                xcmd_user.write
                  [xself xarg]
                    seq > @
                      seq
                        ((xarg).neq "guido").if
                          bogusForceDataize.write ((((xself).xpush)).apply ("-ERR no such user"))
                        bogusForceDataize.write ((((xself).xpush)).apply ("+OK password required"))
                xcmd_pass.write
                  [xself xarg]
                    seq > @
                      seq
                        ((xarg).neq "python").if
                          bogusForceDataize.write ((((xself).xpush)).apply ("-ERR wrong password"))
                        bogusForceDataize.write ((((xself).xpush)).apply ("+OK 10 messages"))
                xcmd_stat.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ("+OK 10 100"))
                xcmd_list.write
                  [xself xarg]
                    seq > @
                      (xarg).if
                        bogusForceDataize.write ((((xself).xpush)).apply (("+OK %s %s".mod (((unsupported)).apply ((xarg)) ((xarg))))))
                        seq
                          bogusForceDataize.write ((((xself).xpush)).apply ("+OK"))
                          bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)).apply ((xself)) ((xLIST_RESP)))
                xcmd_uidl.write (xcmd_list)
                xcmd_retr.write
                  [xself xarg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)).apply (("+OK %s bytes".mod (((xlen)).apply ((xRETR_RESP))))))
                        bogusForceDataize.write (((((xasynchat).xasync_chat).xpush)).apply ((xself)) ((xRETR_RESP)))
                xcmd_top.write (xcmd_retr)
                xcmd_dele.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ("+OK message marked for deletion."))
                xcmd_noop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ("+OK done nothing."))
                xcmd_rpop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ("+OK done nothing."))
                xcmd_apop.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ("+OK done nothing."))
                xcmd_quit.write
                  [xself xarg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)).apply ("+OK closing."))
                        bogusForceDataize.write ((((xself).xclose_when_done)).apply)
                x_get_capas.write
                  [xself]
                    memory > x_capas
                    seq > @
                      seq
                        x_capas.write (((xdict)).apply (((xself).xCAPAS)))
                        ((((xself).xtls_active).not).and (xSUPPORTS_SSL)).if
                          (((unsupported)).apply ((((unsupported)).apply ((x_capas)) ("STLS"))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((x_capas)))
                xcmd_capa.write
                  [xself xarg]
                    memory > x_ln
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpush)).apply ("+OK Capability list follows"))
                        ((((xself).x_get_capas)).apply).if
                          (((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xparams)))) ((((((((xself).x_get_capas)).apply).xitems)).apply)))
                            seq
                              x_ln.write (((unsupported)).apply ((xcap)))
                              (xparams).if
                                bogusForceDataize.write ((((x_ln).xextend)).apply ((xparams)))
                              bogusForceDataize.write ((((xself).xpush)).apply ((((" ".xjoin)).apply ((x_ln)))))
                        bogusForceDataize.write ((((xself).xpush)).apply ("."))
                xcmd_utf8.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((xself).xpush)).apply ((((xself).xenable_UTF8).if "+OK I know RFC6856" "-ERR What is UTF8?!")))
                (xSUPPORTS_SSL).if
                  seq
                    xcmd_stls.write
                      [xself xarg]
                        memory > xcontext
                        memory > xtls_sock
                        seq > @
                          (((unsupported)).apply (((xself).xtls_active)) (FALSE)).if
                            seq
                              bogusForceDataize.write ((((xself).xpush)).apply ("+OK Begin TLS negotiation"))
                              xcontext.write ((((xssl).xSSLContext)).apply)
                              bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xCERTFILE)))
                              xtls_sock.write (((unsupported)).apply (((xcontext).xwrap_socket)) (((xself).xsocket)) (TRUE) (FALSE) (FALSE))
                              bogusForceDataize.write ((((xself).xdel_channel)).apply)
                              bogusForceDataize.write ((((xself).xset_socket)).apply ((xtls_sock)))
                              (((unsupported)).apply (((xself).xtls_active)) (TRUE))
                              (((unsupported)).apply (((xself).xtls_starting)) (TRUE))
                              (((unsupported)).apply (((xself).xin_buffer)) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).x_do_tls_handshake)).apply)
                            bogusForceDataize.write ((((xself).xpush)).apply ("-ERR Command not permitted when TLS active"))
                    x_do_tls_handshake.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xssl).xSSLError)) ((xOSError)))
                            bogusForceDataize.write (((((xself).xsocket).xdo_handshake)).apply)
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xerr).xargs)) (0))) ((((unsupported)).apply (((xssl).xSSL_ERROR_WANT_READ)) (((xssl).xSSL_ERROR_WANT_WRITE))))).if
                                (((unsupported)).apply)
                                ((((unsupported)).apply (((xerr).xargs)) (0)).eq ((xssl).xSSL_ERROR_EOF)).if
                                  (((unsupported)).apply (((((xself).xhandle_close)).apply)))
                                  ((((unsupported)).apply ("SSLV3_ALERT_BAD_CERTIFICATE") ((((unsupported)).apply (((xerr).xargs)) (1)))).or (((unsupported)).apply ("SSLV3_ALERT_CERTIFICATE_UNKNOWN") ((((unsupported)).apply (((xerr).xargs)) (1))))).if
                                    (((unsupported)).apply (((((xself).xhandle_close)).apply)))
                              (((unsupported)).apply)
                            ((((unsupported)).apply (((xerr).xargs)) (0)).eq ((xerrno).xECONNABORTED)).if
                              (((unsupported)).apply (((((xself).xhandle_close)).apply)))
                            seq
                              (((unsupported)).apply (((xself).xtls_active)) (TRUE))
                              (((unsupported)).apply (((xself).xtls_starting)) (FALSE))
                    xhandle_read.write
                      [xself]
                        seq > @
                          ((xself).xtls_starting).if
                            bogusForceDataize.write ((((xself).x_do_tls_handshake)).apply)
                            (((unsupported)).apply (((xssl).xSSLEOFError)))
                              bogusForceDataize.write (((((xasynchat).xasync_chat).xhandle_read)).apply ((xself)))
                              bogusForceDataize.write ((((xself).xhandle_close)).apply)
            (((unsupported)).apply (((xasyncore).xdispatcher)) (((xthreading).xThread)))
              seq
                xhandler.write (xDummyPOP3Handler)
                x__init__.write
                  [xself xaddress xaf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xself).xcreate_socket)).apply ((xaf)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xbind)).apply ((xaddress)))
                        bogusForceDataize.write ((((xself).xlisten)).apply (5))
                        (((unsupported)).apply (((xself).xactive)) (FALSE))
                        (((unsupported)).apply (((xself).xactive_lock)) (((((xthreading).xLock)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xhost)) (((xself).xport)))) ((((unsupported)).apply ((((((xself).xsocket).xgetsockname)).apply)) ((((unsupported)).apply (2))))))
                        (((unsupported)).apply (((xself).xhandler_instance)) ("None: is there a None literal in the EO language?"))
                xstart.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xactive).not)))
                        (((unsupported)).apply (((xself).x__flag)) (((((xthreading).xEvent)).apply)))
                        bogusForceDataize.write (((((xthreading).xThread).xstart)).apply ((xself)))
                        bogusForceDataize.write (((((xself).x__flag).xwait)).apply)
                xrun.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xactive)) (TRUE))
                        bogusForceDataize.write (((((xself).x__flag).xset)).apply)
                        (((unsupported)).apply)
                          while.
                            (((xself).xactive).and ((xasyncore).xsocket_map))
                            [unused]
                              seq > @
                                (((unsupported)).apply (((xself).xactive_lock)))
                                  (((unsupported)).apply (((xasyncore).xloop)) (0.1) (1))
                          (((unsupported)).apply (((xasyncore).xclose_all)) (TRUE))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xactive)))
                        (((unsupported)).apply (((xself).xactive)) (FALSE))
                        bogusForceDataize.write ((((xself).xjoin)).apply)
                xhandle_accepted.write
                  [xself xconn xaddr]
                    seq > @
                      (((unsupported)).apply (((xself).xhandler_instance)) (((((xself).xhandler)).apply ((xconn)))))
                xhandle_connect.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xclose)).apply)
                xhandle_read.write (xhandle_connect)
                xwritable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (0))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xassertOK.write
                  [xself xresp]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xstartswith)).apply ("+OK"))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver)) ((((xDummyPOP3Server)).apply ((((unsupported)).apply ((xHOST)) ((xPORT)))))))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        (((unsupported)).apply (((xself).xclient)) ((((unsupported)).apply (((xpoplib).xPOP3)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) (3))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xclose)).apply)
                        bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                        (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_getwelcome.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xclient).xgetwelcome)).apply)) ("+OK dummy pop3 server ready. <timestamp>"))
                xtest_exceptions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).x_shortcmd)) ("echo -err"))
                xtest_user.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xuser)).apply ("guido"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xuser)) ("invalid"))
                xtest_pass_.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xpass_)).apply ("python"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xuser)) ("invalid"))
                xtest_stat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xclient).xstat)).apply)) ((((unsupported)).apply (10) (100))))
                xtest_list.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((xself).xclient).xlist)).apply)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((((unsupported)).apply ("1 1") ("2 2") ("3 3") ("4 4") ("5 5"))) (25))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xclient).xlist)).apply ("1")).xendswith)).apply ("OK 1 1"))))
                xtest_retr.write
                  [xself]
                    memory > xexpected
                    memory > xfoo
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ("+OK 116 bytes") ((((unsupported)).apply ("From: postmaster@python.org") ("Content-Type: text/plain") ("MIME-Version: 1.0") ("Subject: Dummy") ("") ("line1") ("line2") ("line3"))) (113))
                        xfoo.write (((((xself).xclient).xretr)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfoo)) ((xexpected)))
                xtest_too_long_lines.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).x_shortcmd)) (("echo +%s".mod ((((xpoplib).x_MAXLINE).add 10).mul "a"))))
                xtest_dele.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xdele)).apply ("foo"))))
                xtest_noop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xnoop)).apply)))
                xtest_rpop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xrpop)).apply ("foo"))))
                xtest_apop_normal.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertOK)).apply ((((((xself).xclient).xapop)).apply ("foo") ("dummypassword"))))
                xtest_apop_REDOS.write
                  [xself]
                    memory > xevil_welcome
                    seq > @
                      (((unsupported)).apply)
                        xevil_welcome.write ("+OK".add ("<".mul 1000000))
                        (((unsupported)).apply (((((xtest_support).xswap_attr)).apply (((xself).xclient)) ("welcome") ((xevil_welcome)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xapop)) ("a") ("kb"))
                xtest_top.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ("+OK 116 bytes") ((((unsupported)).apply ("From: postmaster@python.org") ("Content-Type: text/plain") ("MIME-Version: 1.0") ("Subject: Dummy") ("") ("line1") ("line2") ("line3"))) (113))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xclient).xtop)).apply (1) (1))) ((xexpected)))
                xtest_uidl.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xuidl)).apply)
                        bogusForceDataize.write (((((xself).xclient).xuidl)).apply ("foo"))
                xtest_utf8_raises_if_unsupported.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xserver).xhandler).xenable_UTF8)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xutf8)))
                xtest_utf8.write
                  [xself]
                    memory > xexpected
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xserver).xhandler).xenable_UTF8)) (TRUE))
                        xexpected.write "+OK I know RFC6856"
                        xresult.write (((((xself).xclient).xutf8)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)))
                xtest_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("IMPLEMENTATION") (((((xcapa).xkeys)).apply)))))
                xtest_quit.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        xresp.write (((((xself).xclient).xquit)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xresp)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xclient).xsock)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xclient).xfile)))
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      (((unsupported)).apply)
                        xcapa.write (((((xself).xclient).xcapa)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("STLS") (((((xcapa).xkeys)).apply)))))
                xtest_stls.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    seq > @
                      (((unsupported)).apply)
                        xexpected.write "+OK Begin TLS negotiation"
                        xresp.write (((((xself).xclient).xstls)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((xexpected)))
                xtest_stls_context.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xexpected.write "+OK Begin TLS negotiation"
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCAFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xcheck_hostname)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xCertificateError)))))
                          xresp.write (((unsupported)).apply ((((xself).xclient).xstls)) ((xctx)))
                        (((unsupported)).apply (((xself).xclient)) ((((unsupported)).apply (((xpoplib).xPOP3)) ("localhost") ((((xself).xserver).xport)) (3))))
                        xresp.write (((unsupported)).apply ((((xself).xclient).xstls)) ((xctx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((xexpected)))
            (xSUPPORTS_SSL).if
              seq
                (((unsupported)).apply)
                (((unsupported)).apply ((xSSLConnection)) ((xDummyPOP3Handler)))
                  x__init__.write
                    [xself xconn]
                      seq > @
                        seq
                          bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)).apply ((xself)) ((xconn)))
                          bogusForceDataize.write ((((xself).xsecure_connection)).apply)
                          bogusForceDataize.write ((((xself).xset_terminator)).apply ("rn"))
                          (((unsupported)).apply (((xself).xin_buffer)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xpush)).apply ("+OK dummy pop3 server ready. <timestamp>"))
                          (((unsupported)).apply (((xself).xtls_active)) (TRUE))
                          (((unsupported)).apply (((xself).xtls_starting)) (FALSE))
            (((unsupported)).apply ((xTestPOP3Class)) ((xrequires_ssl)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver)) ((((xDummyPOP3Server)).apply ((((unsupported)).apply ((xHOST)) ((xPORT)))))))
                        (((unsupported)).apply ((((xself).xserver).xhandler)) ((xDummyPOP3_SSLHandler)))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        (((unsupported)).apply (((xself).xclient)) (((((xpoplib).xPOP3_SSL)).apply ((((xself).xserver).xhost)) ((((xself).xserver).xport)))))
                xtest__all__.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply ("POP3_SSL") (((xpoplib).x__all__)))
                xtest_context.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xctx)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xctx)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xCERTFILE)) ((xCERTFILE)) ((xctx)))
                        bogusForceDataize.write (((((xself).xclient).xquit)).apply)
                        (((unsupported)).apply (((xself).xclient)) ((((unsupported)).apply (((xpoplib).xPOP3_SSL)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) ((xctx)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xself).xclient).xsock)) (((xssl).xSSLSocket)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xself).xclient).xsock).xcontext)) ((xctx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xclient).xnoop)).apply).xstartswith)).apply ("+OK"))))
                xtest_stls.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xstls)))
                xtest_stls_context.write (xtest_stls)
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ("STLS") (((((xcapa).xkeys)).apply)))))
            (((unsupported)).apply ((xTestPOP3Class)) ((xrequires_ssl)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver)) ((((xDummyPOP3Server)).apply ((((unsupported)).apply ((xHOST)) ((xPORT)))))))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        (((unsupported)).apply (((xself).xclient)) ((((unsupported)).apply (((xpoplib).xPOP3)) ((((xself).xserver).xhost)) ((((xself).xserver).xport)) (3))))
                        bogusForceDataize.write (((((xself).xclient).xstls)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((((unsupported)).apply ((((xself).xclient).xfile)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((xself).xclient).xsock)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply (((xpoplib).xerror_proto)))
                            bogusForceDataize.write (((((xself).xclient).xquit)).apply)
                            bogusForceDataize.write (((((xself).xclient).xclose)).apply)
                        bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                        (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_stls.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xpoplib).xerror_proto)) ((((xself).xclient).xstls)))
                xtest_stls_context.write (xtest_stls)
                xtest_stls_capa.write
                  [xself]
                    memory > xcapa
                    seq > @
                      seq
                        xcapa.write (((((xself).xclient).xcapa)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ("STLS") (((((xcapa).xkeys)).apply)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xevt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (60))
                        (((unsupported)).apply (((xself).xport)) (((((xtest_support).xbind_port)).apply (((xself).xsock)))))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) (((xself).xserver)) ((((unsupported)).apply (((xself).xevt)) (((xself).xsock)))))))
                        (((unsupported)).apply ((((xself).xthread).xdaemon)) (TRUE))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xevt).xwait)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xthread).xjoin)).apply)
                        (((unsupported)).apply (((xself).xthread)) ("None: is there a None literal in the EO language?"))
                xserver.write
                  [xself xevt xserv]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xserv).xlisten)).apply)
                        bogusForceDataize.write ((((xevt).xset)).apply)
                        (((unsupported)).apply (((xsocket).xtimeout)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserv).xaccept)).apply)))
                            bogusForceDataize.write ((((xconn).xsend)).apply ("+ Hola mundon"))
                            bogusForceDataize.write ((((xconn).xclose)).apply)
                          bogusForceDataize.write ((((xserv).xclose)).apply)
                xtestTimeoutDefault.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          xpop.write ((((xpoplib).xPOP3)).apply ((xHOST)) (((xself).xport)))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xpop).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xpop).xclose)).apply)
                xtestTimeoutNone.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          xpop.write (((unsupported)).apply (((xpoplib).xPOP3)) ((xHOST)) (((xself).xport)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xpop).xsock).xgettimeout)).apply)))
                        bogusForceDataize.write ((((xpop).xclose)).apply)
                xtestTimeoutValue.write
                  [xself]
                    memory > xpop
                    seq > @
                      seq
                        xpop.write (((unsupported)).apply (((xpoplib).xPOP3)) ((xHOST)) (((xself).xport)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xpop).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xpop).xclose)).apply)
            xtest_main.write
              []
                memory > xthread_info
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)).apply ((xTestPOP3Class)) ((xTestTimeouts)) ((xTestPOP3_SSLClass)) ((xTestPOP3_TLSClass)))
                    xthread_info.write ((((xtest_support).xthreading_setup)).apply)
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xtest_support).xrun_unittest)).apply ((((unsupported)).apply ((xtests)))))
                      bogusForceDataize.write ((((xtest_support).xthreading_cleanup)).apply ((((unsupported)).apply ((xthread_info)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)