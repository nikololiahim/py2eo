memory > xTCPTimeoutTestCase
memory > xerrno
memory > xsocket
memory > xrange
memory > xNotImplementedError
memory > xerr
memory > xtype
memory > xtime
memory > xi
memory > xsupport
memory > xgetattr
memory > xCreationTestCase
memory > xValueError
memory > xTimeoutTestCase
memory > xserv
memory > xargs
memory > xOSError
memory > xUDPTimeoutTestCase
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_timeout
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestReturnType
        memory > x_sock_operation
        memory > xtestSendto
        memory > xtestRangeCheck
        memory > xtestObjectCreation
        memory > xtestSendall
        memory > xtest_main
        memory > xfuzz2
        memory > xskip_expected
        memory > xsetUp
        memory > xtestFloatReturnValue
        memory > xresolve_address
        memory > xtestSend
        memory > xtestTypeCheck
        memory > xtestConnectTimeout
        memory > xtestRecvfromTimeout
        memory > xtestAcceptTimeout
        memory > xtestTimeoutThenBlocking
        memory > xtestRecvTimeout
        memory > xlocalhost
        memory > xtearDown
        memory > xtestBlockingThenTimeout
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xskip_expected.write (((((xsupport).xis_resource_enabled)).apply ("network")).not)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xresolve_address.write
              [xhost xport]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xhost)))))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xsocket).xgetaddrinfo)).apply ((xhost)) ((xport)) (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) (0))) (4))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xsock).xclose)).apply)
                xtestObjectCreation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?") ("timeout not disabled by default"))
                xtestFloatReturnValue.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (7.345))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (7.345))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (3))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?"))
                xtestReturnType.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((((xself).xsock).xgettimeout)).apply)))) ((((xtype)).apply (1.0))))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (3.9))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((((xself).xsock).xgettimeout)).apply)))) ((((xtype)).apply (1.0))))
                xtestTypeCheck.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (0))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (0))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (0.0))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xsock).xsettimeout)) ((((unsupported)).apply)))
                xtestRangeCheck.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xsock).xsettimeout)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xsock).xsettimeout)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xsock).xsettimeout)) ((1.0.neg)))
                xtestTimeoutThenBlocking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (10))
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (0.0))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (10))
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (0.0))
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?"))
                xtestBlockingThenTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (0))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (1))
                        bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (1))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xsock).xgettimeout)).apply)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xfuzz2.write 2.0
                xlocalhost.write ((xsupport).xHOST)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply)))
                xtearDown.write (xsetUp)
                x_sock_operation.write
                  [xself xcount xtimeout xmethod]
                    memory > xdelta
                    memory > xt1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply ((xtimeout)))
                        xmethod.write (((xgetattr)).apply (((xself).xsock)) ((xmethod)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xcount)))))
                          seq
                            xt1.write ((((xtime).xmonotonic)).apply)
                            (((unsupported)).apply (((xsocket).xtimeout)))
                              bogusForceDataize.write (((xmethod)).apply ((((unsupported)).apply ((xargs)))))
                              seq
                                xdelta.write (((((xtime).xmonotonic)).apply).sub (xt1))
                                (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("socket.timeout was not raised"))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xdelta)) (((xtimeout).add ((xself).xfuzz))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xdelta)) (((xtimeout).sub 1.0)))
            (((unsupported)).apply ((xTimeoutTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        (((unsupported)).apply (((xself).xaddr_remote)) ((((xresolve_address)).apply ("www.python.org.") (80))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xsock).xclose)).apply)
                xtestConnectTimeout.write
                  [xself]
                    memory > xsock
                    memory > xtimeout
                    memory > xskip
                    memory > xblackhole
                    memory > xwhitehole
                    seq > @
                      (((unsupported)).apply)
                        xblackhole.write (((xresolve_address)).apply ("blackhole.snakebite.net") (56666))
                        xwhitehole.write (((xresolve_address)).apply ("whitehole.snakebite.net") (56667))
                        xskip.write TRUE
                        xsock.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        xtimeout.write 3
                        bogusForceDataize.write ((((xsock).xsettimeout)).apply ((xtimeout)))
                        (((unsupported)).apply (((xsocket).xtimeout)) ((xOSError)))
                          bogusForceDataize.write ((((xsock).xconnect)).apply ((xwhitehole)))
                          (((xerr).xerrno).eq ((xerrno).xECONNREFUSED)).if
                            xskip.write FALSE
                          seq
                            bogusForceDataize.write ((((xsock).xclose)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsock)))))))
                        (xskip).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply (((("We didn't receive a connection reset (RST) packet from {}:{} within {} seconds, so we're unable to test connect timeout against the corresponding {}:{} (which is configured to silently drop packets).".xformat)).apply ((((unsupported)).apply ((xwhitehole)) (0))) ((((unsupported)).apply ((xwhitehole)) (1))) ((xtimeout)) ((((unsupported)).apply ((xblackhole)) (0))) ((((unsupported)).apply ((xblackhole)) (1))))))
                        (((unsupported)).apply (((xself).xaddr_remote)) ((xblackhole)))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((((unsupported)).apply (((xself).xaddr_remote)) (0))))))
                          bogusForceDataize.write ((((xself).x_sock_operation)).apply (1) (0.001) ("connect") (((xself).xaddr_remote)))
                xtestRecvTimeout.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((((unsupported)).apply (((xself).xaddr_remote)) (0))))))
                        seq
                          bogusForceDataize.write (((((xself).xsock).xconnect)).apply (((xself).xaddr_remote)))
                          bogusForceDataize.write ((((xself).x_sock_operation)).apply (1) (1.5) ("recv") (1024))
                xtestAcceptTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xbind_port)).apply (((xself).xsock)) (((xself).xlocalhost)))
                        bogusForceDataize.write (((((xself).xsock).xlisten)).apply)
                        bogusForceDataize.write ((((xself).x_sock_operation)).apply (1) (1.5) ("accept"))
                xtestSend.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xserv)))
                        seq
                          bogusForceDataize.write ((((xsupport).xbind_port)).apply ((xserv)) (((xself).xlocalhost)))
                          bogusForceDataize.write ((((xserv).xlisten)).apply)
                          bogusForceDataize.write (((((xself).xsock).xconnect)).apply (((((xserv).xgetsockname)).apply)))
                          bogusForceDataize.write ((((xself).x_sock_operation)).apply (100) (1.5) ("send") (("X".mul 200000)))
                xtestSendto.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xserv)))
                        seq
                          bogusForceDataize.write ((((xsupport).xbind_port)).apply ((xserv)) (((xself).xlocalhost)))
                          bogusForceDataize.write ((((xserv).xlisten)).apply)
                          bogusForceDataize.write (((((xself).xsock).xconnect)).apply (((((xserv).xgetsockname)).apply)))
                          bogusForceDataize.write ((((xself).x_sock_operation)).apply (100) (1.5) ("sendto") (("X".mul 200000)) (((((xserv).xgetsockname)).apply)))
                xtestSendall.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))) ((xserv)))
                        seq
                          bogusForceDataize.write ((((xsupport).xbind_port)).apply ((xserv)) (((xself).xlocalhost)))
                          bogusForceDataize.write ((((xserv).xlisten)).apply)
                          bogusForceDataize.write (((((xself).xsock).xconnect)).apply (((((xserv).xgetsockname)).apply)))
                          bogusForceDataize.write ((((xself).x_sock_operation)).apply (100) (1.5) ("sendall") (("X".mul 200000)))
            (((unsupported)).apply ((xTimeoutTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xsock).xclose)).apply)
                xtestRecvfromTimeout.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xbind_port)).apply (((xself).xsock)) (((xself).xlocalhost)))
                        bogusForceDataize.write ((((xself).x_sock_operation)).apply (1) (1.5) ("recvfrom") (1024))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xCreationTestCase)) ((xTCPTimeoutTestCase)) ((xUDPTimeoutTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)