memory > xNode
memory > xparent
memory > xtotal_ordering
memory > xKeyError
memory > xNodeNotFoundError
memory > xCircularDependencyError
memory > xset
memory > xsuper
memory > xtuple
memory > xsorted
memory > xDummyNode
memory > xhash
memory > xn
memory > xkey
memory > xall
memory > xlist
memory > xprocessed
memory > xstr
memory > xreplaced_key
memory > xProjectState
memory > xerr
memory > xsum
memory > xnodes
memory > xmigration
memory > xnode
memory > xchild
memory > xedges
memory > xisinstance
memory > xlen
[] > graph
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xadd_child
        memory > xbackwards_plan
        memory > x_generate_plan
        memory > x__lt__
        memory > xroot_nodes
        memory > x__init__
        memory > xforwards_plan
        memory > x_nodes_and_edges
        memory > xadd_dependency
        memory > xraise_error
        memory > x__str__
        memory > xadd_parent
        memory > xmake_state
        memory > x__eq__
        memory > x__repr__
        memory > xvalidate_consistency
        memory > xiterative_dfs
        memory > xensure_not_cyclic
        memory > x__contains__
        memory > xremove_replacement_node
        memory > x__getitem__
        memory > xadd_dummy_node
        memory > xadd_node
        memory > xleaf_nodes
        memory > x__hash__
        memory > xremove_replaced_nodes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xtotal_ordering)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xkey]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xkey)) ((xkey)))
                        (((unsupported)).apply (((xself).xchildren)) ((xset)))
                        (((unsupported)).apply (((xself).xparents)) ((xset)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xkey).eq (xother))))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xkey).less (xother))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xkey)))))
                x__getitem__.write
                  [xself xitem]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xkey)) ((xitem)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xstr)).apply (((xself).xkey)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: (%r, %r)>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((((unsupported)).apply (((xself).xkey)) (0))) ((((unsupported)).apply (((xself).xkey)) (1)))))))
                xadd_child.write
                  [xself xchild]
                    seq > @
                      bogusForceDataize.write (((((xself).xchildren).xadd)).apply ((xchild)))
                xadd_parent.write
                  [xself xparent]
                    seq > @
                      bogusForceDataize.write (((((xself).xparents).xadd)).apply ((xparent)))
            (((unsupported)).apply ((xNode)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xkey xorigin xerror_message]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsuper).x__init__)).apply ((xkey)))
                        (((unsupported)).apply (((xself).xorigin)) ((xorigin)))
                        (((unsupported)).apply (((xself).xerror_message)) ((xerror_message)))
                xraise_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xNodeNotFoundError)) (((xself).xerror_message)) (((xself).xkey)) (((xself).xorigin)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xnode_map)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xnodes)) ((((unsupported)).apply)))
                xadd_node.write
                  [xself xkey xmigration]
                    memory > xnode
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) (((xself).xnode_map)))))
                        xnode.write (((xNode)).apply ((xkey)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnode_map)) ((xkey)))) ((xnode)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnodes)) ((xkey)))) ((xmigration)))
                xadd_dummy_node.write
                  [xself xkey xorigin xerror_message]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((xDummyNode)).apply ((xkey)) ((xorigin)) ((xerror_message)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnode_map)) ((xkey)))) ((xnode)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnodes)) ((xkey)))) ("None: is there a None literal in the EO language?"))
                xadd_dependency.write
                  [xself xmigration xchild xparent xskip_validation]
                    memory > xerror_message
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xchild)) (((xself).xnodes))).if
                          seq
                            xerror_message.write ("Migration %s dependencies reference nonexistent child node %r".mod (((unsupported)).apply ((xmigration)) ((xchild))))
                            bogusForceDataize.write ((((xself).xadd_dummy_node)).apply ((xchild)) ((xmigration)) ((xerror_message)))
                        (((unsupported)).apply ((xparent)) (((xself).xnodes))).if
                          seq
                            xerror_message.write ("Migration %s dependencies reference nonexistent parent node %r".mod (((unsupported)).apply ((xmigration)) ((xparent))))
                            bogusForceDataize.write ((((xself).xadd_dummy_node)).apply ((xparent)) ((xmigration)) ((xerror_message)))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xnode_map)) ((xchild))).xadd_parent)).apply ((((unsupported)).apply (((xself).xnode_map)) ((xparent)))))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xnode_map)) ((xparent))).xadd_child)).apply ((((unsupported)).apply (((xself).xnode_map)) ((xchild)))))
                        ((xskip_validation).not).if
                          unsupported
                xremove_replaced_nodes.write
                  [xself xreplacement xreplaced]
                    memory > xreplaced_node
                    memory > xreplacement_node
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xreplaced.write (((xset)).apply ((xreplaced)))
                        (((unsupported)).apply ((xKeyError)))
                          xreplacement_node.write (((unsupported)).apply (((xself).xnode_map)) ((xreplacement)))
                          (((unsupported)).apply ((((xNodeNotFoundError)).apply (("Unable to find replacement node %r. It was either never added to the migration graph, or has been removed.".mod (((unsupported)).apply ((xreplacement))))) ((xreplacement)))) ((xerr)))
                        (((unsupported)).apply ((xreplaced_key)) ((xreplaced)))
                          seq
                            bogusForceDataize.write (((((xself).xnodes).xpop)).apply ((xreplaced_key)) ("None: is there a None literal in the EO language?"))
                            xreplaced_node.write (((((xself).xnode_map).xpop)).apply ((xreplaced_key)) ("None: is there a None literal in the EO language?"))
                            (xreplaced_node).if
                              seq
                                (((unsupported)).apply ((xchild)) (((xreplaced_node).xchildren)))
                                  seq
                                    bogusForceDataize.write (((((xchild).xparents).xremove)).apply ((xreplaced_node)))
                                    (((unsupported)).apply (((xchild).xkey)) ((xreplaced))).if
                                      seq
                                        bogusForceDataize.write ((((xreplacement_node).xadd_child)).apply ((xchild)))
                                        bogusForceDataize.write ((((xchild).xadd_parent)).apply ((xreplacement_node)))
                                (((unsupported)).apply ((xparent)) (((xreplaced_node).xparents)))
                                  seq
                                    bogusForceDataize.write (((((xparent).xchildren).xremove)).apply ((xreplaced_node)))
                                    (((unsupported)).apply (((xparent).xkey)) ((xreplaced))).if
                                      seq
                                        bogusForceDataize.write ((((xreplacement_node).xadd_parent)).apply ((xparent)))
                                        bogusForceDataize.write ((((xparent).xadd_child)).apply ((xreplacement_node)))
                xremove_replacement_node.write
                  [xself xreplacement xreplaced]
                    memory > xreplaced_nodes_parents
                    memory > xreplaced_nodes
                    memory > xreplaced_node
                    memory > xreplacement_node
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xnodes).xpop)).apply ((xreplacement)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xKeyError)))
                          xreplacement_node.write (((((xself).xnode_map).xpop)).apply ((xreplacement)))
                          (((unsupported)).apply ((((xNodeNotFoundError)).apply (("Unable to remove replacement node %r. It was either never added to the migration graph, or has been removed already.".mod (((unsupported)).apply ((xreplacement))))) ((xreplacement)))) ((xerr)))
                        xreplaced_nodes.write (xset)
                        xreplaced_nodes_parents.write (xset)
                        (((unsupported)).apply ((xkey)) ((xreplaced)))
                          seq
                            xreplaced_node.write (((((xself).xnode_map).xget)).apply ((xkey)))
                            (xreplaced_node).if
                              seq
                                bogusForceDataize.write ((((xreplaced_nodes).xadd)).apply ((xreplaced_node)))
                                (((unsupported)).apply ((xreplaced_nodes_parents)) (((xreplaced_node).xparents)))
                        (((unsupported)).apply ((xreplaced_nodes)) ((xreplaced_nodes_parents)))
                        (((unsupported)).apply ((xchild)) (((xreplacement_node).xchildren)))
                          seq
                            bogusForceDataize.write (((((xchild).xparents).xremove)).apply ((xreplacement_node)))
                            (((unsupported)).apply ((xreplaced_node)) ((xreplaced_nodes)))
                              seq
                                bogusForceDataize.write ((((xreplaced_node).xadd_child)).apply ((xchild)))
                                bogusForceDataize.write ((((xchild).xadd_parent)).apply ((xreplaced_node)))
                        (((unsupported)).apply ((xparent)) (((xreplacement_node).xparents)))
                          bogusForceDataize.write (((((xparent).xchildren).xremove)).apply ((xreplacement_node)))
                xvalidate_consistency.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xn).xraise_error)) ((xn)) ((((xself).xnode_map).xvalues)) ((((xisinstance)).apply ((xn)) ((xDummyNode)))))
                xforwards_plan.write
                  [xself xtarget]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xtarget)) (((xself).xnodes))).if
                          (((unsupported)).apply ((((xNodeNotFoundError)).apply (("Node %r not a valid node".mod (((unsupported)).apply ((xtarget))))) ((xtarget)))))
                        (((unsupported)).apply (((((xself).xiterative_dfs)).apply ((((unsupported)).apply (((xself).xnode_map)) ((xtarget)))))))
                xbackwards_plan.write
                  [xself xtarget]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xtarget)) (((xself).xnodes))).if
                          (((unsupported)).apply ((((xNodeNotFoundError)).apply (("Node %r not a valid node".mod (((unsupported)).apply ((xtarget))))) ((xtarget)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xiterative_dfs)) ((((unsupported)).apply (((xself).xnode_map)) ((xtarget)))) (FALSE))))
                xiterative_dfs.write
                  [xself xstart xforwards]
                    memory > xvisited
                    memory > xvisited_set
                    memory > xstack
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xvisited.write (((unsupported)).apply)
                        xvisited_set.write (xset)
                        xstack.write (((unsupported)).apply ((((unsupported)).apply ((xstart)) (FALSE))))
                        while.
                          (xstack)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xnode)) ((xprocessed)))) (((xstack).xpop)))
                                (((unsupported)).apply ((xnode)) ((xvisited_set))).if
                                  (xprocessed).if
                                    seq
                                      bogusForceDataize.write ((((xvisited_set).xadd)).apply ((xnode)))
                                      bogusForceDataize.write ((((xvisited).xappend)).apply (((xnode).xkey)))
                                    seq
                                      bogusForceDataize.write ((((xstack).xappend)).apply ((((unsupported)).apply ((xnode)) (TRUE))))
                                      (((unsupported)).apply ((xstack)) ((((unsupported)).apply ((((unsupported)).apply ((xn)) (FALSE))) ((xn)) ((((xsorted)).apply (((xforwards).if ((xnode).xparents) ((xnode).xchildren))))))))
                        (((unsupported)).apply ((xvisited)))
                xroot_nodes.write
                  [xself xapp]
                    memory > xroots
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xroots.write (xset)
                        (((unsupported)).apply ((xnode)) (((xself).xnodes)))
                          ((((xall)).apply ((((unsupported)).apply (((((unsupported)).apply ((xkey)) (0)).neq (((unsupported)).apply ((xnode)) (0)))) ((xkey)) (((((unsupported)).apply (((xself).xnode_map)) ((xnode))).xparents))))).and (((xapp).not).or ((xapp).eq (((unsupported)).apply ((xnode)) (0))))).if
                            bogusForceDataize.write ((((xroots).xadd)).apply ((xnode)))
                        (((unsupported)).apply ((((xsorted)).apply ((xroots)))))
                xleaf_nodes.write
                  [xself xapp]
                    memory > xleaves
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xleaves.write (xset)
                        (((unsupported)).apply ((xnode)) (((xself).xnodes)))
                          ((((xall)).apply ((((unsupported)).apply (((((unsupported)).apply ((xkey)) (0)).neq (((unsupported)).apply ((xnode)) (0)))) ((xkey)) (((((unsupported)).apply (((xself).xnode_map)) ((xnode))).xchildren))))).and (((xapp).not).or ((xapp).eq (((unsupported)).apply ((xnode)) (0))))).if
                            bogusForceDataize.write ((((xleaves).xadd)).apply ((xnode)))
                        (((unsupported)).apply ((((xsorted)).apply ((xleaves)))))
                xensure_not_cyclic.write
                  [xself]
                    memory > xstack
                    memory > xcycle
                    memory > xtodo
                    memory > xnode
                    memory > xtop
                    seq > @
                      seq
                        xtodo.write (((xset)).apply (((xself).xnodes)))
                        while.
                          (xtodo)
                          [unused]
                            seq > @
                              seq
                                xnode.write ((xtodo).xpop)
                                xstack.write (((unsupported)).apply ((xnode)))
                                while.
                                  (xstack)
                                  [unused]
                                    seq > @
                                      seq
                                        xtop.write (((unsupported)).apply ((xstack)) ((1.neg)))
                                        (((unsupported)).apply ((xchild)) (((((unsupported)).apply (((xself).xnode_map)) ((xtop))).xchildren)))
                                          seq
                                            xnode.write ((xchild).xkey)
                                            (((unsupported)).apply ((xnode)) ((xstack))).if
                                              seq
                                                xcycle.write (((unsupported)).apply ((xstack)) ((((unsupported)).apply (((((xstack).xindex)).apply ((xnode)))))))
                                                (((unsupported)).apply ((((xCircularDependencyError)).apply ((((", ".xjoin)).apply ((((unsupported)).apply (("%s.%s".mod (xn))) ((xn)) ((xcycle)))))))))
                                            (((unsupported)).apply ((xnode)) ((xtodo))).if
                                              seq
                                                bogusForceDataize.write ((((xstack).xappend)).apply ((xnode)))
                                                bogusForceDataize.write ((((xtodo).xremove)).apply ((xnode)))
                                                (((unsupported)).apply)
                                          xnode.write ((xstack).xpop)
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Graph: %s nodes, %s edges".mod ((xself).x_nodes_and_edges))))
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xnodes)) ((xedges)))) (((xself).x_nodes_and_edges)))
                        (((unsupported)).apply (("<%s: nodes=%s, edges=%s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xnodes)) ((xedges))))))
                x_nodes_and_edges.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply (((xself).xnodes)))) ((((xsum)).apply ((((unsupported)).apply ((((xlen)).apply (((xnode).xparents)))) ((xnode)) ((((xself).xnode_map).xvalues)))))))))
                x_generate_plan.write
                  [xself xnodes xat_end]
                    memory > xplan
                    seq > @
                      seq
                        xplan.write (((unsupported)).apply)
                        (((unsupported)).apply ((xnode)) ((xnodes)))
                          (((unsupported)).apply ((xmigration)) (((((xself).xforwards_plan)).apply ((xnode)))))
                            ((((unsupported)).apply ((xmigration)) ((xplan))).and ((xat_end).or (((unsupported)).apply ((xmigration)) ((xnodes))))).if
                              bogusForceDataize.write ((((xplan).xappend)).apply ((xmigration)))
                        (((unsupported)).apply ((xplan)))
                xmake_state.write
                  [xself xnodes xat_end xreal_apps]
                    memory > xplan
                    memory > xproject_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xnodes)) ("None: is there a None literal in the EO language?")).if
                          xnodes.write (((xlist)).apply (((xself).xleaf_nodes)))
                        ((xnodes).not).if
                          (((unsupported)).apply ((xProjectState)))
                        ((((xisinstance)).apply ((((unsupported)).apply ((xnodes)) (0))) ((xtuple))).not).if
                          xnodes.write (((unsupported)).apply ((xnodes)))
                        xplan.write ((((xself).x_generate_plan)).apply ((xnodes)) ((xat_end)))
                        xproject_state.write (((unsupported)).apply ((xProjectState)) ((xreal_apps)))
                        (((unsupported)).apply ((xnode)) ((xplan)))
                          xproject_state.write (((unsupported)).apply (((((unsupported)).apply (((xself).xnodes)) ((xnode))).xmutate_state)) ((xproject_state)) (FALSE))
                        (((unsupported)).apply ((xproject_state)))
                x__contains__.write
                  [xself xnode]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xnode)) (((xself).xnodes)))))