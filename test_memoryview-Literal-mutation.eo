memory > xMyObject
memory > xMyView
memory > xrange
memory > xproto
memory > xi
memory > xbytes
memory > xtp_comp
memory > xhash
memory > xmemoryview
memory > xcm
memory > xarray
memory > xcopy
memory > xBaseMemorySliceSliceTests
memory > xc
memory > xtp
memory > xBaseArrayMemoryTests
memory > xpickle
memory > xlist
memory > xBaseBytesMemoryTests
memory > xValueError
memory > xstr
memory > xio
memory > xb
memory > xtest
memory > xNotImplementedError
memory > xIndexError
memory > xbytearray
memory > xreversed
memory > xtype
memory > xrepr
memory > xint
memory > xMySource
memory > xsys
memory > xgc
memory > xBaseMemoryviewTests
memory > xslice
memory > xweakref
memory > xord
memory > xunittest
memory > xfilter
memory > xAbstractMemoryTests
memory > xisinstance
memory > xlen
memory > xBaseMemorySliceTests
memory > xTypeError
memory > x__name__
[] > test_memoryview
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_constructor
        memory > xtest_hash
        memory > x_types
        memory > xtest_compare
        memory > xro_type
        memory > xtest_attributes_writable
        memory > xtest_iter
        memory > xcheck_attributes_with_type
        memory > xtest_weakref
        memory > x_source
        memory > xcheck_getitem_with_type
        memory > xtest_memoryview_hex
        memory > xtest_pickle
        memory > xtest_gc
        memory > xtest_tobytes
        memory > xsource_bytes
        memory > xtest_getbuffer
        memory > xtest_writable_readonly
        memory > xtest_tolist
        memory > xtest_setitem_writable
        memory > xtest_ctypes_cast
        memory > xtest_array_assign
        memory > xgetitem_type
        memory > xtest_issue22668
        memory > xtest_attributes_readonly
        memory > xtest_refs
        memory > xitemsize
        memory > xrw_type
        memory > x_check_released
        memory > xtest_getitem
        memory > xtest_copy
        memory > xtest_toreadonly
        memory > xtest_release
        memory > x_check_contents
        memory > xtest_hash_writable
        memory > xtest_contextmanager
        memory > xformat
        memory > xtest_reversed
        memory > x_view
        memory > xtest_delitem
        memory > xtest_setitem_readonly
        memory > xtest_getbuf_fail
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xsource_bytes.write "abcdef"
                x_source.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsource_bytes)))
                x_types.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xfilter)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (((xself).xro_type)) (((xself).xrw_type)))))))
                xcheck_getitem_with_type.write
                  [xself xtp]
                    memory > xb
                    memory > xoldrefcount
                    memory > xm
                    seq > @
                      seq
                        xb.write (((xtp)).apply (((xself).x_source)))
                        xoldrefcount.write ((((xsys).xgetrefcount)).apply ((xb)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (0))) ((((xord)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xm)) (0))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (5))) ((((xord)).apply ("f"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((1.neg)))) ((((xord)).apply ("f"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((6.neg)))) ((((xord)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) (6))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((7.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) (((xsys).xmaxsize)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((((xsys).xmaxsize).neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) (0.0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("a"))))))
                        xm.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xb)))) ((xoldrefcount)))
                xtest_getitem.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        bogusForceDataize.write ((((xself).xcheck_getitem_with_type)).apply ((xtp)))
                xtest_iter.write
                  [xself]
                    memory > xb
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xm)))) ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((xi)))) ((xi)) ((((xrange)).apply ((((xlen)).apply ((xm)))))))))
                xtest_setitem_readonly.write
                  [xself]
                    memory > xsetitem
                    memory > xb
                    memory > xoldrefcount
                    memory > xm
                    seq > @
                      seq
                        (((xself).xro_type).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no read-only type to test"))
                        xb.write ((((xself).xro_type)).apply (((xself).x_source)))
                        xoldrefcount.write ((((xsys).xgetrefcount)).apply ((xb)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        xsetitem.write
                          [xvalue]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) (65))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ((((xmemoryview)).apply ("a"))))
                        xm.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xb)))) ((xoldrefcount)))
                xtest_setitem_writable.write
                  [xself]
                    memory > xslices
                    memory > xtp
                    memory > xb
                    memory > xsetitem
                    memory > xm
                    memory > xoldrefcount
                    memory > xexc
                    seq > @
                      seq
                        (((xself).xrw_type).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no writable type to test"))
                        xtp.write ((xself).xrw_type)
                        xb.write ((((xself).xrw_type)).apply (((xself).x_source)))
                        xoldrefcount.write ((((xsys).xgetrefcount)).apply ((xb)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((((xord)).apply ("1"))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("1bcdef"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (1))))) ((((xtp)).apply ("0"))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("0bcdef"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (3))))) ((((xtp)).apply ("12"))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("012def"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (1))))) ((((xtp)).apply (""))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("012def"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) ((((xtp)).apply ("abcdef"))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("abcdef"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (3))))) ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2) (5))))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("cdedef"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) ((((xtp)).apply ("abcdef"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (3))))))
                        bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) ("ababcf"))
                        xsetitem.write
                          [xkey xvalue]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xkey)))) ((((xtp)).apply ((xvalue)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((xsetitem)) (6) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((xsetitem)) ((7.neg)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((xsetitem)) (((xsys).xmaxsize)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((xsetitem)) ((((xsys).xmaxsize).neg)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) (0.0) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ((((unsupported)).apply (0))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ((((unsupported)).apply ((((xslice)).apply (0) (1) (1))) (0))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ((((unsupported)).apply (0) ((((xslice)).apply (0) (1) (1))))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ((((unsupported)).apply (0))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetitem)) ("a") ("a"))
                        xslices.write (((unsupported)).apply ((((xslice)).apply (0) (1) (1))) ((((xslice)).apply (0) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((xsetitem)) ((xslices)) ("a"))
                        xexc.write ((((xm).xformat).eq "c").if (xValueError) (xTypeError))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) ((xsetitem)) (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) ((xsetitem)) (0) ("ab"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xsetitem)) ((((xslice)).apply (1) (1))) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xsetitem)) ((((xslice)).apply (0) (2))) ("a"))
                        xm.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xb)))) ((xoldrefcount)))
                xtest_delitem.write
                  [xself]
                    memory > xb
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) (1))))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (4))))))))))
                xtest_tobytes.write
                  [xself]
                    memory > xexpected
                    memory > xb
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xm.write ((((xself).x_view)).apply ((((xtp)).apply (((xself).x_source)))))
                          xb.write ((((xm).xtobytes)).apply)
                          xexpected.write ((("".xjoin)).apply ((((unsupported)).apply (((((xself).xgetitem_type)).apply ((((xbytes)).apply ((((unsupported)).apply ((xc)))))))) ((xc)) ("abcdef"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xexpected)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xb)) ((xbytes)))
                xtest_tolist.write
                  [xself]
                    memory > xl
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xm.write ((((xself).x_view)).apply ((((xtp)).apply (((xself).x_source)))))
                          xl.write ((((xm).xtolist)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((xlist)).apply ("abcdef"))))
                xtest_compare.write
                  [xself]
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xm.write ((((xself).x_view)).apply ((((xtp)).apply (((xself).x_source)))))
                          (((unsupported)).apply ((xtp_comp)) (((xself).x_types)))
                            seq
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).eq (((xtp_comp)).apply ("abcdef")))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((xm).neq (((xtp_comp)).apply ("abcdef")))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((xm).eq (((xtp_comp)).apply ("abcde")))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).neq (((xtp_comp)).apply ("abcde")))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((xm).eq (((xtp_comp)).apply ("abcde1")))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).neq (((xtp_comp)).apply ("abcde1")))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).eq (xm))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).eq (((unsupported)).apply ((xm)) ((((unsupported)).apply))))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (6)))).eq (((unsupported)).apply ((xm)) ((((unsupported)).apply))))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (5)))).eq (xm))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xm).eq "abcdef")))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).neq "abcdef")))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (("abcdef".eq (xm))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (("abcdef".neq (xm))))
                          (((unsupported)).apply ((xc)) ((((unsupported)).apply ((xm)) ("abcdef"))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xm).less (xc))))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xc).leq (xm))))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xm).geq (xc))))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xc).greater (xm))))))
                xcheck_attributes_with_type.write
                  [xself xtp]
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((xself).x_view)).apply ((((xtp)).apply (((xself).x_source)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xformat)) (((xself).xformat)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xitemsize)) (((xself).xitemsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xndim)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xshape)) ((((unsupported)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xm)))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xstrides)) ((((unsupported)).apply (((xself).xitemsize)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xsuboffsets)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xm)))
                xtest_attributes_readonly.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        (((xself).xro_type).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no read-only type to test"))
                        xm.write ((((xself).xcheck_attributes_with_type)).apply (((xself).xro_type)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xreadonly)) (TRUE))
                xtest_attributes_writable.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        (((xself).xrw_type).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no writable type to test"))
                        xm.write ((((xself).xcheck_attributes_with_type)).apply (((xself).xrw_type)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xreadonly)) (FALSE))
                xtest_getbuffer.write
                  [xself]
                    memory > xoldviewrefcount
                    memory > xb
                    memory > xs
                    memory > xm
                    memory > xoldrefcount
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xoldrefcount.write ((((xsys).xgetrefcount)).apply ((xb)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          xoldviewrefcount.write ((((xsys).xgetrefcount)).apply ((xm)))
                          xs.write (((xstr)).apply ((xm)) ("utf-8"))
                          bogusForceDataize.write ((((xself).x_check_contents)).apply ((xtp)) ((xb)) (((((xs).xencode)).apply ("utf-8"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xm)))) ((xoldviewrefcount)))
                          xm.write "None: is there a None literal in the EO language?"
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xb)))) ((xoldrefcount)))
                xtest_gc.write
                  [xself]
                    memory > xo
                    memory > xwr
                    memory > xb
                    memory > xm
                    memory > x__init__
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          ((((xisinstance)).apply ((xtp)) ((xtype))).not).if
                            (((unsupported)).apply)
                          (((unsupported)).apply)
                            x__init__.write
                              [xself xbase]
                                seq > @
                                  (((unsupported)).apply (((xself).xm)) ((((xmemoryview)).apply ((xbase)))))
                          (((unsupported)).apply ((xtp)))
                          (((unsupported)).apply)
                          xb.write (((xMySource)).apply ((((xtp)).apply ("abc"))))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          xo.write (((xMyObject)).apply)
                          (((unsupported)).apply (((xb).xm)) ((xm)))
                          (((unsupported)).apply (((xb).xo)) ((xo)))
                          xwr.write ((((xweakref).xref)).apply ((xo)))
                          (((unsupported)).apply ((xb)) ((xm)) ((xo)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xgc).xcollect)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))) ((((xwr)).apply)))
                          xm.write (((xMyView)).apply ((((xtp)).apply ("abc"))))
                          xo.write (((xMyObject)).apply)
                          (((unsupported)).apply (((xm).xx)) ((xm)))
                          (((unsupported)).apply (((xm).xo)) ((xo)))
                          xwr.write ((((xweakref).xref)).apply ((xo)))
                          (((unsupported)).apply ((xm)) ((xo)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xgc).xcollect)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))) ((((xwr)).apply)))
                x_check_released.write
                  [xself xm xtp]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("released"))
                        (((unsupported)).apply ((xcheck)))
                          bogusForceDataize.write (((xbytes)).apply ((xm)))
                        (((unsupported)).apply ((xcheck)))
                          bogusForceDataize.write ((((xm).xtobytes)).apply)
                        (((unsupported)).apply ((xcheck)))
                          bogusForceDataize.write ((((xm).xtolist)).apply)
                        (((unsupported)).apply ((xcheck)))
                          (((unsupported)).apply ((xm)) (0))
                        (((unsupported)).apply ((xcheck)))
                          (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ("x"))
                        (((unsupported)).apply ((xcheck)))
                          bogusForceDataize.write (((xlen)).apply ((xm)))
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          unsupported
                        (((unsupported)).apply ((xcheck)))
                          (((unsupported)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("released memory") ((((xstr)).apply ((xm)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("released memory") ((((xrepr)).apply ((xm)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm)) ((((xmemoryview)).apply ((((xtp)).apply (((xself).x_source)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm)) ((((xtp)).apply (((xself).x_source)))))
                xtest_contextmanager.write
                  [xself]
                    memory > xb
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          (((unsupported)).apply ((xm)) ((xcm)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xcm)) ((xm)))
                          bogusForceDataize.write ((((xself).x_check_released)).apply ((xm)) ((xtp)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          (((unsupported)).apply ((xm)))
                            bogusForceDataize.write ((((xm).xrelease)).apply)
                xtest_release.write
                  [xself]
                    memory > xb
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          bogusForceDataize.write ((((xm).xrelease)).apply)
                          bogusForceDataize.write ((((xself).x_check_released)).apply ((xm)) ((xtp)))
                          bogusForceDataize.write ((((xm).xrelease)).apply)
                          bogusForceDataize.write ((((xself).x_check_released)).apply ((xm)) ((xtp)))
                xtest_writable_readonly.write
                  [xself]
                    memory > xtp
                    memory > xb
                    memory > xm
                    memory > xi
                    seq > @
                      seq
                        xtp.write ((xself).xro_type)
                        (((unsupported)).apply ((xtp)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no read-only type to test"))
                        xb.write (((xtp)).apply (((xself).x_source)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        xi.write ((((xio).xBytesIO)).apply ("ZZZZ"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xi).xreadinto)) ((xm)))
                xtest_getbuf_fail.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).x_view)) ((((unsupported)).apply)))
                xtest_hash.write
                  [xself]
                    memory > xtp
                    memory > xb
                    memory > xm
                    seq > @
                      seq
                        xtp.write ((xself).xro_type)
                        (((unsupported)).apply ((xtp)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no read-only type to test"))
                        xb.write (((xtp)).apply (((xself).x_source)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xm)))) ((((xhash)).apply ("abcdef"))))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xm)))) ((((xhash)).apply ("abcdef"))))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xhash)) ((xm)))
                xtest_hash_writable.write
                  [xself]
                    memory > xtp
                    memory > xb
                    memory > xm
                    seq > @
                      seq
                        xtp.write ((xself).xrw_type)
                        (((unsupported)).apply ((xtp)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("no writable type to test"))
                        xb.write (((xtp)).apply (((xself).x_source)))
                        xm.write ((((xself).x_view)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xhash)) ((xm)))
                xtest_weakref.write
                  [xself]
                    memory > xwr
                    memory > xb
                    memory > xL
                    memory > xm
                    memory > xcallback
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          xL.write (((unsupported)).apply)
                          xcallback.write
                            [xwr xb]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xL).xappend)).apply ((xb)))
                          xwr.write ((((xweakref).xref)).apply ((xm)) ((xcallback)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ((xm)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)))))))
                          bogusForceDataize.write (((((xtest).xsupport).xgc_collect)).apply)
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xL)) (0))) ((xb)))
                xtest_reversed.write
                  [xself]
                    memory > xb
                    memory > xm
                    memory > xaslist
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          xaslist.write (((xlist)).apply ((((xreversed)).apply (((((xm).xtolist)).apply)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((xm)))))) ((xaslist)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((xm)))))) ((((xlist)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((1.neg)))))))))
                xtest_toreadonly.write
                  [xself]
                    memory > xb
                    memory > xm
                    memory > xmm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xb.write (((xtp)).apply (((xself).x_source)))
                          xm.write ((((xself).x_view)).apply ((xb)))
                          xmm.write ((((xm).xtoreadonly)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmm).xreadonly)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmemoryview)).apply ((xmm))).xreadonly)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmm).xtolist)).apply)) (((((xm).xtolist)).apply)))
                          bogusForceDataize.write ((((xmm).xrelease)).apply)
                          bogusForceDataize.write ((((xm).xtolist)).apply)
                xtest_issue22668.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xb
                    memory > x_
                    memory > xx
                    memory > xm
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("H") ((((unsupported)).apply (256) (256) (256) (256))))
                        xx.write (((xmemoryview)).apply ((xa)))
                        xm.write ((((xx).xcast)).apply ("B"))
                        xb.write ((((xm).xcast)).apply ("H"))
                        xc.write (((unsupported)).apply ((xb)) ((((unsupported)).apply (0) (2))))
                        xd.write (((xmemoryview)).apply ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) (0))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (0))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xformat)) ("H"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xformat)) ("H"))
                        x_.write ((((xm).xcast)).apply ("I"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) (0))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (0))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xformat)) ("H"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xformat)) ("H"))
            (((unsupported)).apply ((xAbstractMemoryTests)))
              seq
                xro_type.write (xbytes)
                xrw_type.write (xbytearray)
                xgetitem_type.write (xbytes)
                xitemsize.write 1
                xformat.write "B"
            (((unsupported)).apply ((xAbstractMemoryTests)))
              seq
                xro_type.write "None: is there a None literal in the EO language?"
                xrw_type.write (((unsupported)).apply (((((xarray).xarray)).apply ("i") ((((xlist)).apply ((xb)))))))
                xgetitem_type.write (((unsupported)).apply ((((((((xarray).xarray)).apply ("i") ((((xlist)).apply ((xb))))).xtobytes)).apply)))
                xitemsize.write (((((xarray).xarray)).apply ("i")).xitemsize)
                xformat.write "i"
                xtest_getbuffer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xtest_tolist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x_view.write
                  [xself xobj]
                    seq > @
                      (((unsupported)).apply ((((xmemoryview)).apply ((xobj)))))
                x_check_contents.write
                  [xself xtp xobj xcontents]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ((((xtp)).apply ((xcontents)))))
            (((unsupported)).apply)
              seq
                xsource_bytes.write "XabcdefY"
                x_view.write
                  [xself xobj]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmemoryview)).apply ((xobj)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (7))))))
                x_check_contents.write
                  [xself xtp xobj xcontents]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xobj)) ((((unsupported)).apply (1) (7))))) ((((xtp)).apply ((xcontents)))))
                xtest_refs.write
                  [xself]
                    memory > xoldrefcount
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xtp)) (((xself).x_types)))
                        seq
                          xm.write (((xmemoryview)).apply ((((xtp)).apply (((xself).x_source)))))
                          xoldrefcount.write ((((xsys).xgetrefcount)).apply ((xm)))
                          (((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xm)))) ((xoldrefcount)))
            (((unsupported)).apply)
              seq
                xsource_bytes.write "XabcdefY"
                x_view.write
                  [xself xobj]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmemoryview)).apply ((xobj)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (7))))) ((((unsupported)).apply (1))))))
                x_check_contents.write
                  [xself xtp xobj xcontents]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xobj)) ((((unsupported)).apply (1) (7))))) ((((xtp)).apply ((xcontents)))))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemoryviewTests)) ((xBaseBytesMemoryTests)))
              xtest_constructor.write
                [xself]
                  memory > xob
                  seq > @
                    (((unsupported)).apply ((xtp)) (((xself).x_types)))
                      seq
                        xob.write (((xtp)).apply (((xself).x_source)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmemoryview)).apply ((xob)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xmemoryview)) ((xob)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmemoryview)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmemoryview)) ((xob)) ((xob)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xmemoryview)) ((xob)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xmemoryview)) ((xob)) (TRUE))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemoryviewTests)) ((xBaseArrayMemoryTests)))
              xtest_array_assign.write
                [xself]
                  memory > xnew_a
                  memory > xm
                  memory > xa
                  seq > @
                    seq
                      xa.write ((((xarray).xarray)).apply ("i") ((((xrange)).apply (10))))
                      xm.write (((xmemoryview)).apply ((xa)))
                      xnew_a.write ((((xarray).xarray)).apply ("i") ((((xrange)).apply (9) ((1.neg)) ((1.neg)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) ((xnew_a)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xnew_a)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemorySliceTests)) ((xBaseBytesMemoryTests)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemorySliceTests)) ((xBaseArrayMemoryTests)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemorySliceSliceTests)) ((xBaseBytesMemoryTests)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseMemorySliceSliceTests)) ((xBaseArrayMemoryTests)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_ctypes_cast.write
                  [xself]
                    memory > xd
                    memory > xctypes
                    memory > xm
                    memory > xp6
                    seq > @
                      seq
                        xctypes.write (((((xtest).xsupport).ximport_module)).apply ("ctypes"))
                        xp6.write (((xbytes)).apply (((((xctypes).xc_double)).apply (0.6))))
                        xd.write ((((xctypes).xc_double)).apply)
                        xm.write ((((((xmemoryview)).apply ((xd))).xcast)).apply ("B"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ((xp6)) ((((unsupported)).apply (2))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ((xp6)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xvalue)) (0.6))
                        (((unsupported)).apply ((xformat)) ("Bbc"))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xformat)))))
                            seq
                              xd.write ((((xctypes).xc_double)).apply)
                              xm.write ((((((xmemoryview)).apply ((xd))).xcast)).apply ((xformat)))
                              (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (((((((xmemoryview)).apply ((xp6))).xcast)).apply ((xformat)))) ((((unsupported)).apply (2))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (((((((xmemoryview)).apply ((xp6))).xcast)).apply ((xformat)))) ((((unsupported)).apply (2))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xvalue)) (0.6))
                xtest_memoryview_hex.write
                  [xself]
                    memory > xx
                    memory > xm1
                    memory > xm2
                    seq > @
                      seq
                        xx.write ("0".mul 200000)
                        xm1.write (((xmemoryview)).apply ((xx)))
                        xm2.write (((unsupported)).apply ((xm1)) ((((unsupported)).apply ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm2).xhex)).apply)) (("30".mul 200000)))
                xtest_copy.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmemoryview)).apply ("abc"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xcopy).xcopy)).apply ((xm)))
                xtest_pickle.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmemoryview)).apply ("abc"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write ((((xpickle).xdumps)).apply ((xm)) ((xproto)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)