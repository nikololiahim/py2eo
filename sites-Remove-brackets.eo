memory > xgettext_lazy
memory > xREDIRECT_FIELD_NAME
memory > xo
memory > xapps
memory > xAlreadyRegistered
memory > xmodel_admin
memory > xTemplateResponse
memory > xException
memory > xPasswordChangeView
memory > xHttpResponsePermanentRedirect
memory > xResolver404
memory > xreverse
memory > xapp
memory > xNoReverseMatch
memory > xLazyObject
memory > xresolve
memory > xmodeladmin
memory > xLoginView
memory > ximport_string
memory > xstr
memory > xnever_cache
memory > xAdminPasswordChangeForm
memory > xAutocompleteJsonView
memory > xpath
memory > xtype
memory > xset
memory > xre
memory > xrepr
memory > xsettings
memory > xcsrf_protect
memory > xx
memory > xredirect_to_login
memory > xinclude
memory > xm
memory > xcapfirst
memory > xHttp404
memory > xsorted
memory > xHttpResponseRedirect
memory > xModelAdmin
memory > xm_a
memory > xargs
memory > xAdminAuthenticationForm
memory > xDefaultAdminSite
memory > xgetattr
memory > xupdate_wrapper
memory > xNotRegistered
memory > xre_path
memory > xJavaScriptCatalog
memory > xPasswordChangeDoneView
memory > xModelBase
memory > xImproperlyConfigured
memory > xoptions
memory > xkwargs
memory > xmodel
memory > xisinstance
memory > xWeakSet
memory > xLogoutView
memory > x__name__
[] > sites
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsite_url
        memory > x__repr__
        memory > xunregister
        memory > xadmin_view
        memory > xlogin
        memory > xsite_title
        memory > xapp_index_template
        memory > xpassword_change
        memory > xactions
        memory > xautocomplete_view
        memory > xindex_title
        memory > x_setup
        memory > xadd_action
        memory > xget_action
        memory > xlogout_template
        memory > xcatch_all_view
        memory > xis_registered
        memory > xsite
        memory > xindex
        memory > xenable_nav_sidebar
        memory > xlogin_template
        memory > xlogin_form
        memory > xapp_index
        memory > xindex_template
        memory > xpassword_change_done_template
        memory > xcheck
        memory > xget_app_list
        memory > xsite_header
        memory > x_
        memory > xeach_context
        memory > xi18n_javascript
        memory > xdisable_action
        memory > xfinal_catch_all_view
        memory > xregister
        memory > xurls
        memory > xlogout
        memory > xall_sites
        memory > xhas_permission
        memory > x__init__
        memory > xpassword_change_done
        memory > xpassword_change_template
        memory > xempty_value_display
        memory > xget_urls
        memory > x_build_app_dict
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xall_sites.write (xWeakSet)
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xsite_title.write (((xgettext_lazy)).apply ("Django site admin"))
                xsite_header.write (((xgettext_lazy)).apply ("Django administration"))
                xindex_title.write (((xgettext_lazy)).apply ("Site administration"))
                xsite_url.write "/"
                xenable_nav_sidebar.write TRUE
                xempty_value_display.write "-"
                xlogin_form.write "None: is there a None literal in the EO language?"
                xindex_template.write "None: is there a None literal in the EO language?"
                xapp_index_template.write "None: is there a None literal in the EO language?"
                xlogin_template.write "None: is there a None literal in the EO language?"
                xlogout_template.write "None: is there a None literal in the EO language?"
                xpassword_change_template.write "None: is there a None literal in the EO language?"
                xpassword_change_done_template.write "None: is there a None literal in the EO language?"
                xfinal_catch_all_view.write TRUE
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_registry)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).x_actions)) ((((unsupported)).apply ("delete_selected") (((xactions).xdelete_selected)))))
                        (((unsupported)).apply (((xself).x_global_actions)) ((((xself).x_actions).xcopy)))
                        bogusForceDataize.write ((((xall_sites).xadd)).apply ((xself)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("{self.__class__.__name__}(name={self.name!r})"))
                xcheck.write
                  [xself xapp_configs]
                    memory > xerrors
                    memory > xmodeladmins
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xapp_configs)) ("None: is there a None literal in the EO language?")).if
                          xapp_configs.write ((xapps).xget_app_configs)
                        xapp_configs.write (((xset)).apply ((xapp_configs)))
                        xerrors.write (((unsupported)).apply)
                        xmodeladmins.write (((unsupported)).apply ((xo)) ((xo)) ((((xself).x_registry).xvalues)) ((((unsupported)).apply (((xo).x__class__)) ((xModelAdmin)))))
                        (((unsupported)).apply ((xmodeladmin)) ((xmodeladmins)))
                          (((unsupported)).apply (((((xmodeladmin).xmodel).x_meta).xapp_config)) ((xapp_configs))).if
                            bogusForceDataize.write ((((xerrors).xextend)).apply (((xmodeladmin).xcheck)))
                        (((unsupported)).apply ((xerrors)))
                xregister.write
                  [xself xmodel_or_iterable xadmin_class]
                    memory > xmsg
                    memory > xregistered_admin
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xadmin_class.write ((xadmin_class).or (xModelAdmin))
                        (((xisinstance)).apply ((xmodel_or_iterable)) ((xModelBase))).if
                          xmodel_or_iterable.write (((unsupported)).apply ((xmodel_or_iterable)))
                        (((unsupported)).apply ((xmodel)) ((xmodel_or_iterable)))
                          seq
                            (((xmodel).x_meta).xabstract).if
                              (((unsupported)).apply ((((xImproperlyConfigured)).apply (("The model %s is abstract, so it cannot be registered with admin.".mod ((xmodel).x__name__))))))
                            (((unsupported)).apply ((xmodel)) (((xself).x_registry))).if
                              seq
                                xregistered_admin.write (((xstr)).apply ((((unsupported)).apply (((xself).x_registry)) ((xmodel)))))
                                xmsg.write ("The model %s is already registered ".mod ((xmodel).x__name__))
                                ((((xregistered_admin).xendswith)).apply (".ModelAdmin")).if
                                  (((unsupported)).apply ((xmsg)) (("in app %r.".mod ((((xre).xsub)).apply (".ModelAdmin$") ("") ((xregistered_admin))))))
                                  (((unsupported)).apply ((xmsg)) (("with %r.".mod (xregistered_admin))))
                                (((unsupported)).apply ((((xAlreadyRegistered)).apply ((xmsg)))))
                            ((((xmodel).x_meta).xswapped).not).if
                              seq
                                (xoptions).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("__module__"))) ((x__name__)))
                                    xadmin_class.write (((xtype)).apply (("%sAdmin".mod ((xmodel).x__name__))) ((((unsupported)).apply ((xadmin_class)))) ((xoptions)))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).x_registry)) ((xmodel)))) ((((xadmin_class)).apply ((xmodel)) ((xself)))))
                xunregister.write
                  [xself xmodel_or_iterable]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xmodel_or_iterable)) ((xModelBase))).if
                          xmodel_or_iterable.write (((unsupported)).apply ((xmodel_or_iterable)))
                        (((unsupported)).apply ((xmodel)) ((xmodel_or_iterable)))
                          seq
                            (((unsupported)).apply ((xmodel)) (((xself).x_registry))).if
                              (((unsupported)).apply ((((xNotRegistered)).apply (("The model %s is not registered".mod ((xmodel).x__name__))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_registry)) ((xmodel)))))))
                xis_registered.write
                  [xself xmodel]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) (((xself).x_registry)))))
                xadd_action.write
                  [xself xaction xname]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xname.write ((xname).or ((xaction).x__name__))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_actions)) ((xname)))) ((xaction)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_global_actions)) ((xname)))) ((xaction)))
                xdisable_action.write
                  [xself xname]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_actions)) ((xname)))))))
                xget_action.write
                  [xself xname]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_global_actions)) ((xname)))))
                xactions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).x_actions).xitems)))
                xhas_permission.write
                  [xself xrequest]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xrequest).xuser).xis_active).and (((xrequest).xuser).xis_staff))))
                xadmin_view.write
                  [xself xview xcacheable]
                    memory > xinner
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xinner.write
                          [xrequest]
                            memory > xindex_path
                            seq > @
                              (((unsupported)).apply)
                                (((((xself).xhas_permission)).apply ((xrequest))).not).if
                                  seq
                                    (((xrequest).xpath).eq (((unsupported)).apply ((xreverse)) ("admin:logout") (((xself).xname)))).if
                                      seq
                                        xindex_path.write (((unsupported)).apply ((xreverse)) ("admin:index") (((xself).xname)))
                                        (((unsupported)).apply ((((xHttpResponseRedirect)).apply ((xindex_path)))))
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((((xredirect_to_login)).apply (((xrequest).xget_full_path)) ((((unsupported)).apply ((xreverse)) ("admin:login") (((xself).xname)))))))
                                (((unsupported)).apply ((((xview)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        ((xcacheable).not).if
                          xinner.write (((xnever_cache)).apply ((xinner)))
                        ((((xgetattr)).apply ((xview)) ("csrf_exempt") (FALSE)).not).if
                          xinner.write (((xcsrf_protect)).apply ((xinner)))
                        (((unsupported)).apply ((((xupdate_wrapper)).apply ((xinner)) ((xview)))))
                xget_urls.write
                  [xself]
                    memory > xurlpatterns
                    memory > xcontenttype_views
                    memory > xvalid_app_labels
                    memory > xwrap
                    memory > xregex
                    seq > @
                      seq
                        (((unsupported)).apply)
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xwrap.write
                          [xview xcacheable]
                            memory > xwrapper
                            seq > @
                              (((unsupported)).apply)
                                xwrapper.write
                                  []
                                    seq > @
                                      (((unsupported)).apply)
                                        (((unsupported)).apply (((((((xself).xadmin_view)).apply ((xview)) ((xcacheable)))).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                                (((unsupported)).apply (((xwrapper).xadmin_site)) ((xself)))
                                (((unsupported)).apply ((((xupdate_wrapper)).apply ((xwrapper)) ((xview)))))
                        xurlpatterns.write (((unsupported)).apply ((((unsupported)).apply ((xpath)) ("") ((((xwrap)).apply (((xself).xindex)))) ("index"))) ((((unsupported)).apply ((xpath)) ("login/") (((xself).xlogin)) ("login"))) ((((unsupported)).apply ((xpath)) ("logout/") ((((xwrap)).apply (((xself).xlogout)))) ("logout"))) ((((unsupported)).apply ((xpath)) ("password_change/") ((((unsupported)).apply ((xwrap)) (((xself).xpassword_change)) (TRUE))) ("password_change"))) ((((unsupported)).apply ((xpath)) ("password_change/done/") ((((unsupported)).apply ((xwrap)) (((xself).xpassword_change_done)) (TRUE))) ("password_change_done"))) ((((unsupported)).apply ((xpath)) ("autocomplete/") ((((xwrap)).apply (((xself).xautocomplete_view)))) ("autocomplete"))) ((((unsupported)).apply ((xpath)) ("jsi18n/") ((((unsupported)).apply ((xwrap)) (((xself).xi18n_javascript)) (TRUE))) ("jsi18n"))) ((((unsupported)).apply ((xpath)) ("r/<int:content_type_id>/<path:object_id>/") ((((xwrap)).apply (((xcontenttype_views).xshortcut)))) ("view_on_site"))))
                        xvalid_app_labels.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xmodel_admin)))) ((((xself).x_registry).xitems)))
                          seq
                            (((unsupported)).apply ((xurlpatterns)) ((((unsupported)).apply ((((xpath)).apply (("%s/%s/".mod (((unsupported)).apply ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xmodel_name))))) ((((xinclude)).apply (((xmodel_admin).xurls)))))))))
                            (((unsupported)).apply ((((xmodel).x_meta).xapp_label)) ((xvalid_app_labels))).if
                              bogusForceDataize.write ((((xvalid_app_labels).xappend)).apply ((((xmodel).x_meta).xapp_label)))
                        (xvalid_app_labels).if
                          seq
                            xregex.write (("^(?P<app_label>".add ((("|".xjoin)).apply ((xvalid_app_labels)))).add ")/$")
                            (((unsupported)).apply ((xurlpatterns)) ((((unsupported)).apply ((((unsupported)).apply ((xre_path)) ((xregex)) ((((xwrap)).apply (((xself).xapp_index)))) ("app_list"))))))
                        ((xself).xfinal_catch_all_view).if
                          bogusForceDataize.write ((((xurlpatterns).xappend)).apply ((((xre_path)).apply ("(?P<url>.*)$") ((((xwrap)).apply (((xself).xcatch_all_view)))))))
                        (((unsupported)).apply ((xurlpatterns)))
                xurls.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xget_urls)) ("admin") (((xself).xname)))))
                xeach_context.write
                  [xself xrequest]
                    memory > xscript_name
                    memory > xsite_url
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xscript_name.write (((unsupported)).apply (((xrequest).xMETA)) ("SCRIPT_NAME"))
                        xsite_url.write (((((xself).xsite_url).eq "/").and (xscript_name)).if (xscript_name) ((xself).xsite_url))
                        (((unsupported)).apply ((((unsupported)).apply ("site_title") (((xself).xsite_title)) ("site_header") (((xself).xsite_header)) ("site_url") ((xsite_url)) ("has_permission") (((((xself).xhas_permission)).apply ((xrequest)))) ("available_apps") (((((xself).xget_app_list)).apply ((xrequest)))) ("is_popup") (FALSE) ("is_nav_sidebar_enabled") (((xself).xenable_nav_sidebar)))))
                xpassword_change.write
                  [xself xrequest xextra_context]
                    memory > xdefaults
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xurl.write (((unsupported)).apply ((xreverse)) ("admin:password_change_done") (((xself).xname)))
                        xdefaults.write (((unsupported)).apply ("form_class") ((xAdminPasswordChangeForm)) ("success_url") ((xurl)) ("extra_context") ((((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) (((xextra_context).or (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xpassword_change_template)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdefaults)) ("template_name"))) (((xself).xpassword_change_template)))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply (((((((xPasswordChangeView).xas_view)).apply ((((unsupported)).apply ((xdefaults)))))).apply ((xrequest)))))
                xpassword_change_done.write
                  [xself xrequest xextra_context]
                    memory > xdefaults
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdefaults.write (((unsupported)).apply ("extra_context") ((((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) (((xextra_context).or (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xpassword_change_done_template)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdefaults)) ("template_name"))) (((xself).xpassword_change_done_template)))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply (((((((xPasswordChangeDoneView).xas_view)).apply ((((unsupported)).apply ((xdefaults)))))).apply ((xrequest)))))
                xi18n_javascript.write
                  [xself xrequest xextra_context]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((unsupported)).apply (((xJavaScriptCatalog).xas_view)) ((((unsupported)).apply ("django.contrib.admin"))))).apply ((xrequest)))))
                xlogout.write
                  [xself xrequest xextra_context]
                    memory > xdefaults
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdefaults.write (((unsupported)).apply ("extra_context") ((((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) ("has_permission") (FALSE) (((xextra_context).or (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xlogout_template)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdefaults)) ("template_name"))) (((xself).xlogout_template)))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply (((((((xLogoutView).xas_view)).apply ((((unsupported)).apply ((xdefaults)))))).apply ((xrequest)))))
                xlogin.write
                  [xself xrequest xextra_context]
                    memory > xdefaults
                    memory > xindex_path
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xrequest).xmethod).eq "GET").and ((((xself).xhas_permission)).apply ((xrequest)))).if
                          seq
                            xindex_path.write (((unsupported)).apply ((xreverse)) ("admin:index") (((xself).xname)))
                            (((unsupported)).apply ((((xHttpResponseRedirect)).apply ((xindex_path)))))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcontext.write (((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) ("title") ((((x_)).apply ("Log in"))) ("subtitle") ("None: is there a None literal in the EO language?") ("app_path") (((xrequest).xget_full_path)) ("username") ((((xrequest).xuser).xget_username)))
                        ((((unsupported)).apply ((xREDIRECT_FIELD_NAME)) (((xrequest).xGET))).and (((unsupported)).apply ((xREDIRECT_FIELD_NAME)) (((xrequest).xPOST)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ((xREDIRECT_FIELD_NAME)))) ((((unsupported)).apply ((xreverse)) ("admin:index") (((xself).xname)))))
                        bogusForceDataize.write ((((xcontext).xupdate)).apply (((xextra_context).or (((unsupported)).apply))))
                        xdefaults.write (((unsupported)).apply ("extra_context") ((xcontext)) ("authentication_form") ((((xself).xlogin_form).or (xAdminAuthenticationForm))) ("template_name") ((((xself).xlogin_template).or "admin/login.html")))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply (((((((xLoginView).xas_view)).apply ((((unsupported)).apply ((xdefaults)))))).apply ((xrequest)))))
                xautocomplete_view.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply ((((((unsupported)).apply (((xAutocompleteJsonView).xas_view)) ((xself)))).apply ((xrequest)))))
                xcatch_all_view.write
                  [xself xrequest xurl]
                    memory > xurlconf
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        (((xsettings).xAPPEND_SLASH).and (((((xurl).xendswith)).apply ("/")).not)).if
                          seq
                            xurlconf.write (((xgetattr)).apply ((xrequest)) ("urlconf") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xResolver404)))
                              xmatch.write (((xresolve)).apply (("%s/".mod ((xrequest).xpath_info))) ((xurlconf)))
                              (((xgetattr)).apply (((xmatch).xfunc)) ("should_append_slash") (TRUE)).if
                                (((unsupported)).apply ((((xHttpResponsePermanentRedirect)).apply (("%s/".mod ((xrequest).xpath))))))
                        (((unsupported)).apply ((xHttp404)))
                x_build_app_dict.write
                  [xself xrequest xlabel]
                    memory > xinfo
                    memory > xapp_label
                    memory > xperms
                    memory > xhas_module_perms
                    memory > xmodel_dict
                    memory > xapp_dict
                    memory > xmodels
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xapp_dict.write (((unsupported)).apply)
                        (xlabel).if
                          xmodels.write (((unsupported)).apply ((xm)) ((xm_a)) ((((unsupported)).apply ((xm)) ((xm_a)))) ((((xself).x_registry).xitems)) (((((xm).x_meta).xapp_label).eq (xlabel))))
                          xmodels.write ((xself).x_registry)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xmodel_admin)))) (((xmodels).xitems)))
                          seq
                            xapp_label.write (((xmodel).x_meta).xapp_label)
                            xhas_module_perms.write ((((xmodel_admin).xhas_module_permission)).apply ((xrequest)))
                            ((xhas_module_perms).not).if
                              (((unsupported)).apply)
                            xperms.write ((((xmodel_admin).xget_model_perms)).apply ((xrequest)))
                            (((unsupported)).apply (TRUE) (((xperms).xvalues))).if
                              (((unsupported)).apply)
                            xinfo.write (((unsupported)).apply ((xapp_label)) ((((xmodel).x_meta).xmodel_name)))
                            xmodel_dict.write (((unsupported)).apply ("model") ((xmodel)) ("name") ((((xcapfirst)).apply ((((xmodel).x_meta).xverbose_name_plural)))) ("object_name") ((((xmodel).x_meta).xobject_name)) ("perms") ((xperms)) ("admin_url") ("None: is there a None literal in the EO language?") ("add_url") ("None: is there a None literal in the EO language?"))
                            (((((xperms).xget)).apply ("change")).or ((((xperms).xget)).apply ("view"))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xmodel_dict)) ("view_only"))) ((((((xperms).xget)).apply ("change")).not)))
                                (((unsupported)).apply ((xNoReverseMatch)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xmodel_dict)) ("admin_url"))) ((((unsupported)).apply ((xreverse)) (("admin:%s_%s_changelist".mod (xinfo))) (((xself).xname)))))
                            ((((xperms).xget)).apply ("add")).if
                              (((unsupported)).apply ((xNoReverseMatch)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmodel_dict)) ("add_url"))) ((((unsupported)).apply ((xreverse)) (("admin:%s_%s_add".mod (xinfo))) (((xself).xname)))))
                            (((unsupported)).apply ((xapp_label)) ((xapp_dict))).if
                              bogusForceDataize.write ((((((unsupported)).apply ((((unsupported)).apply ((xapp_dict)) ((xapp_label)))) ("models")).xappend)).apply ((xmodel_dict)))
                              (((unsupported)).apply ((((unsupported)).apply ((xapp_dict)) ((xapp_label)))) ((((unsupported)).apply ("name") ((((((xapps).xget_app_config)).apply ((xapp_label))).xverbose_name)) ("app_label") ((xapp_label)) ("app_url") ((((unsupported)).apply ((xreverse)) ("admin:app_list") ((((unsupported)).apply ("app_label") ((xapp_label)))) (((xself).xname)))) ("has_module_perms") ((xhas_module_perms)) ("models") ((((unsupported)).apply ((xmodel_dict)))))))
                        (((unsupported)).apply ((xapp_dict)))
                xget_app_list.write
                  [xself xrequest xapp_label]
                    memory > xapp_list
                    memory > xapp_dict
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xapp_dict.write ((((xself).x_build_app_dict)).apply ((xrequest)) ((xapp_label)))
                        xapp_list.write (((unsupported)).apply ((xsorted)) (((xapp_dict).xvalues)) ((((unsupported)).apply (((((unsupported)).apply ((xx)) ("name")).xlower)))))
                        (((unsupported)).apply ((xapp)) ((xapp_list)))
                          (((unsupported)).apply (((((unsupported)).apply ((xapp)) ("models")).xsort)) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ("name"))))))
                        (((unsupported)).apply ((xapp_list)))
                xindex.write
                  [xself xrequest xextra_context]
                    memory > xapp_list
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xapp_list.write ((((xself).xget_app_list)).apply ((xrequest)))
                        xcontext.write (((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) ("title") (((xself).xindex_title)) ("subtitle") ("None: is there a None literal in the EO language?") ("app_list") ((xapp_list)) (((xextra_context).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply ((((xTemplateResponse)).apply ((xrequest)) ((((xself).xindex_template).or "admin/index.html")) ((xcontext)))))
                xapp_index.write
                  [xself xrequest xapp_label xextra_context]
                    memory > xapp_list
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        xapp_list.write ((((xself).xget_app_list)).apply ((xrequest)) ((xapp_label)))
                        ((xapp_list).not).if
                          (((unsupported)).apply ((((xHttp404)).apply ("The requested admin page does not exist."))))
                        xcontext.write (((unsupported)).apply (((((xself).xeach_context)).apply ((xrequest)))) ("title") (((((x_)).apply ("%(app)s administration")).mod (((unsupported)).apply ("app") ((((unsupported)).apply ((((unsupported)).apply ((xapp_list)) (0))) ("name")))))) ("subtitle") ("None: is there a None literal in the EO language?") ("app_list") ((xapp_list)) ("app_label") ((xapp_label)) (((xextra_context).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xrequest).xcurrent_app)) (((xself).xname)))
                        (((unsupported)).apply ((((xTemplateResponse)).apply ((xrequest)) ((((xself).xapp_index_template).or (((unsupported)).apply (("admin/%s/app_index.html".mod (xapp_label))) ("admin/app_index.html")))) ((xcontext)))))
            (((unsupported)).apply ((xLazyObject)))
              seq
                x_setup.write
                  [xself]
                    memory > xAdminSiteClass
                    seq > @
                      seq
                        xAdminSiteClass.write (((ximport_string)).apply ((((((xapps).xget_app_config)).apply ("admin")).xdefault_site)))
                        (((unsupported)).apply (((xself).x_wrapped)) ((xAdminSiteClass)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xrepr)).apply (((xself).x_wrapped)))))
            xsite.write (xDefaultAdminSite)