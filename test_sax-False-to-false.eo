memory > xUnicodeError
memory > xFakePath
memory > xparse
memory > xunescape
memory > xStreamWriterXmlgenTest
memory > xencoding
memory > xErrorReportingTest
memory > xfalse
memory > xrun_unittest
memory > xSaxutilsTest
memory > xtmp
memory > xlist
memory > xBytesIO
memory > xfeature_external_ges
memory > xAttributesImpl
memory > xSAXParseException
memory > xfrozenset
memory > xstr
memory > xXmlgenTest
memory > xStringXmlgenTest
memory > xKeyError
memory > xf2
memory > xfindfile
memory > xSAXReaderNotAvailable
memory > xparseString
memory > xopen
memory > xWriterXmlgenTest
memory > xfeature_namespaces
memory > xMakeParserTest
memory > xf
memory > xmake_parser
memory > xset
memory > xXmlReaderTest
memory > xSAXException
memory > xprepare_input_source
memory > xcodecs
memory > xContentHandler
memory > xParseTest
memory > xsupport
memory > xExpatReaderTest
memory > xXMLFilterBase
memory > xtuple
memory > xquoteattr
memory > xescape
memory > xargs
memory > xTESTFN
memory > xmock
memory > xos
memory > xUnicodeEncodeError
memory > xiter
memory > xe
memory > xPrepareInputSourceTest
memory > xStringIO
memory > xshutil
memory > xunittest
memory > xXMLGenerator
memory > xXmlTestBase
memory > xInputSource
memory > xcreate_parser
memory > xStreamReaderWriterXmlgenTest
memory > xURLError
memory > xlen
memory > xBytesXmlgenTest
memory > xTypeError
memory > xAttributesNSImpl
memory > x__name__
[] > test_sax
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_attrs_empty
        memory > xtest_xmlgen_content
        memory > xtest_1463026_1
        memory > xtest_unescape_extra
        memory > xtest_1463026_2_empty
        memory > xtest_expat_binary_file
        memory > xmake_byte_stream
        memory > xgetPublicId
        memory > xtest_1463026_3
        memory > xtest_double_quoteattr
        memory > xcheck_parseString
        memory > xtest_parse_path_object
        memory > xtest_filter_basic
        memory > xtest_binary_file
        memory > xdata
        memory > xtest_expat_nsattrs_wattr
        memory > xtest_xmlgen_encoding_bytes
        memory > xtest_no_close_file
        memory > xtest_escape_extra
        memory > xtest_expat_locator_withinfo_nonascii
        memory > xtest_expat_inpsource_sysid
        memory > xtest_path_objects
        memory > xtest_parse_InputSource
        memory > xtest_xmlgen_ignorable_empty
        memory > xtest_unescape_basic
        memory > xgetvalue
        memory > xtest_attrs_wattr
        memory > xtest_xmlgen_pi
        memory > xcheck_parse
        memory > xtest_make_parser5
        memory > xnotationDecl
        memory > xtest_5027_1
        memory > xgetLineNumber
        memory > xtest_expat_locator_noinfo
        memory > xtest_expat_inpsource_sysid_nonascii
        memory > xtest_parseString_bytes
        memory > xtest_expat_incremental
        memory > xtest_system_id
        memory > xtest_xmlgen_encoding
        memory > xtest_xmlgen_basic
        memory > xtest_xmlgen_unencodable
        memory > xverify_empty_attrs
        memory > xtest_main
        memory > xtest_expat_attrs_wattr
        memory > xtest_expat_binary_file_int_name
        memory > xtest_expat_binary_file_nonascii
        memory > xtest_make_parser4
        memory > xresolveEntity
        memory > xtest_expat_text_file
        memory > xtest_1463026_1_empty
        memory > xstart
        memory > xverify_empty_nsattrs
        memory > xtest_unescape_amp_extra
        memory > xtest_expat_nsattrs_empty
        memory > xmake_xml_file
        memory > xtest_make_parser2
        memory > xtest_expat_dtdhandler
        memory > xsetUp
        memory > xstartElement
        memory > xtest_single_quoteattr
        memory > xtest_expat_incremental_reset
        memory > xstartElementNS
        memory > xxml_str
        memory > xxml
        memory > xtest_escape_all
        memory > xxml_test_out
        memory > xtest_unescape_all
        memory > xtest_nsattrs_wattr
        memory > xtest_character_stream
        memory > xtest_xmlgen_ns_empty
        memory > xtest_expat_inpsource_character_stream
        memory > xtest_xmlgen_basic_empty
        memory > xtest_parseString_text
        memory > xcheckContent
        memory > xtest_5027_2
        memory > xclosed
        memory > xtest_single_double_quoteattr
        memory > xtest_parse_close_source
        memory > xtest_text_file
        memory > xtest_expat_external_dtd_default
        memory > xmake_character_stream
        memory > xtest_xmlgen_attr_escape
        memory > xtest_expat_locator_withinfo
        memory > xseekable
        memory > xtest_expat_binary_file_bytes_name
        memory > xfname
        memory > xtest_quoteattr_basic
        memory > xtest_xmlgen_ignorable
        memory > xtest_expat_inpsource_byte_stream
        memory > xtest_make_parser3
        memory > xtest_xmlgen_content_escape
        memory > xTEST_XMLFILE_OUT
        memory > xrequires_nonascii_filenames
        memory > xxml_bytes
        memory > xunparsedEntityDecl
        memory > xtest_parse_text
        memory > xtest_sax_parse_exception_str
        memory > xns_uri
        memory > xtest_expat_inpsource_filename
        memory > x__init__
        memory > xtest_xmlgen_content_empty
        memory > xtest_xmlgen_ns
        memory > xtell
        memory > xtest_expat_entityresolver_enabled
        memory > xtest_expat_incomplete
        memory > xtest_byte_stream
        memory > xsupports_nonascii_filenames
        memory > xgetSystemId
        memory > xTEST_XMLFILE
        memory > xwrite
        memory > xtest_escape_basic
        memory > xtest_1463026_3_empty
        memory > xtest_string
        memory > xtest_nsattrs_empty
        memory > xioclass
        memory > xtest_1463026_2
        memory > xtest_expat_attrs_empty
        memory > xtest_make_parser
        memory > xtearDown
        memory > xgetColumnNumber
        memory > xtest_expat_inpsource_location
        memory > xtest_expat_external_dtd_enabled
        memory > xtest_expat_entityresolver_default
        memory > xtest_xmlgen_fragment
        memory > xverify_attrs_wattr
        memory > xtest_parse_bytes
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSAXReaderNotAvailable)))
              bogusForceDataize.write (((xmake_parser)).apply)
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("no XML parsers available"))))
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xTEST_XMLFILE.write (((unsupported)).apply ((xfindfile)) ("test.xml") ("xmltestdata"))
            xTEST_XMLFILE_OUT.write (((unsupported)).apply ((xfindfile)) ("test.xml.out") ("xmltestdata"))
            (((unsupported)).apply ((xUnicodeEncodeError)))
              seq
                bogusForceDataize.write ((((xTEST_XMLFILE).xencode)).apply ("utf-8"))
                bogusForceDataize.write ((((xTEST_XMLFILE_OUT).xencode)).apply ("utf-8"))
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("filename is not encodable to utf8"))))
            xsupports_nonascii_filenames.write TRUE
            ((((xos).xpath).xsupports_unicode_filenames).not).if
              (((unsupported)).apply ((((unsupported)).apply ((xUnicodeError)) ((xTypeError)))))
                bogusForceDataize.write (((((xsupport).xTESTFN_UNICODE).xencode)).apply (((xsupport).xTESTFN_ENCODING)))
                xsupports_nonascii_filenames.write (xfalse)
            xrequires_nonascii_filenames.write ((((xunittest).xskipUnless)).apply ((xsupports_nonascii_filenames)) ("Requires non-ascii filenames support"))
            xns_uri.write "http://www.python.org/xml-ns/saxtest/"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xverify_empty_attrs.write
                  [xself xattrs]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetValue)) ("attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetValueByQName)) ("attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetNameByQName)) ("attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetQNameByName)) ("attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).x__getitem__)) ("attr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetLength)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNames)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNames)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xattrs)))) (0))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("attr") ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xkeys)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ("attrs"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ("attrs") (25))) (25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xitems)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xvalues)).apply)))) ((((unsupported)).apply)))
                xverify_empty_nsattrs.write
                  [xself xattrs]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetValue)) ((((unsupported)).apply ((xns_uri)) ("attr"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetValueByQName)) ("ns:attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetNameByQName)) ("ns:attr"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).xgetQNameByName)) ((((unsupported)).apply ((xns_uri)) ("attr"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xattrs).x__getitem__)) ((((unsupported)).apply ((xns_uri)) ("attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetLength)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNames)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNames)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xattrs)))) (0))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xkeys)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) (25))) (25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xitems)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xvalues)).apply)))) ((((unsupported)).apply)))
                xverify_attrs_wattr.write
                  [xself xattrs]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetLength)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNames)).apply)) ((((unsupported)).apply ("attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNames)).apply)) ((((unsupported)).apply ("attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xattrs)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("attr") ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xkeys)).apply)))) ((((unsupported)).apply ("attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ("attr"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ("attr") (25))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("attr") ("val"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xvalues)).apply)))) ((((unsupported)).apply ("val"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetValue)).apply ("attr"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetValueByQName)).apply ("attr"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNameByQName)).apply ("attr"))) ("attr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xattrs)) ("attr"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNameByName)).apply ("attr"))) ("attr"))
            xxml_str.write
              [xdoc xencoding]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xencoding)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xdoc)))
                    (((unsupported)).apply (("<?xml version=\"1.0\" encoding=\"%s\"?>n%s".mod (((unsupported)).apply ((xencoding)) ((xdoc))))))
            xxml_bytes.write
              [xdoc xencoding xdecl_encoding]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xdecl_encoding)) ((((unsupported)).apply))).if
                      xdecl_encoding.write (xencoding)
                    (((unsupported)).apply (((((((xxml_str)).apply ((xdoc)) ((xdecl_encoding))).xencode)).apply ((xencoding)) ("xmlcharrefreplace"))))
            xmake_xml_file.write
              [xdoc xencoding xdecl_encoding]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xdecl_encoding)) ((((unsupported)).apply))).if
                      xdecl_encoding.write (xencoding)
                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xTESTFN)) ("w") ((xencoding)) ("xmlcharrefreplace"))) ((xf)))
                      bogusForceDataize.write ((((xf).xwrite)).apply ((((xxml_str)).apply ((xdoc)) ((xdecl_encoding)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xdata.write "<money value=\"$xa3u20acU0001017b\">$xa3u20acU0001017b</money>"
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)).apply ((xTESTFN)))
                xcheck_parse.write
                  [xself xf]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((xStringIO)).apply)
                        bogusForceDataize.write (((xparse)).apply ((xf)) ((((xXMLGenerator)).apply ((xresult)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((xxml_str)).apply (((xself).xdata)) ("utf-8"))))
                xtest_parse_text.write
                  [xself]
                    memory > xencodings
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("us-ascii") ("iso-8859-1") ("utf-8") ("utf-16") ("utf-16le") ("utf-16be"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xStringIO)).apply ((((xxml_str)).apply (((xself).xdata)) ((xencoding)))))))
                            bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ((xencoding)))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xTESTFN)) ("r") ((xencoding)))) ((xf)))
                              bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xStringIO)).apply (((xself).xdata)))))
                            bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ((xencoding)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xTESTFN)) ("r") ((xencoding)))) ((xf)))
                              bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                xtest_parse_bytes.write
                  [xself]
                    memory > xencodings
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("us-ascii") ("utf-8") ("utf-16") ("utf-16le") ("utf-16be"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ((xencoding)))))))
                            bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ((xencoding)))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                            (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ((xencoding)) ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ((xencoding)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                            (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("utf-8-sig") ("utf-8"))))))
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("utf-8-sig") ("utf-8"))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("utf-8-sig") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("utf-8-sig") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("iso-8859-1"))))))
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("iso-8859-1"))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSAXException)))))
                          bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xBytesIO)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("iso-8859-1") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("iso-8859-1") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSAXException)))))
                          bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSAXException)))))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xf)))
                xtest_parse_path_object.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("utf-8") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_parse)).apply ((((xFakePath)).apply ((xTESTFN)))))
                xtest_parse_InputSource.write
                  [xself]
                    memory > xinput
                    seq > @
                      seq
                        bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("iso-8859-1") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                          seq
                            xinput.write (((xInputSource)).apply)
                            bogusForceDataize.write ((((xinput).xsetByteStream)).apply ((xf)))
                            bogusForceDataize.write ((((xinput).xsetEncoding)).apply ("iso-8859-1"))
                            bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xinput)))
                xtest_parse_close_source.write
                  [xself]
                    memory > xmock_open
                    memory > xfileobj
                    memory > xbuiltin_open
                    seq > @
                      seq
                        xbuiltin_open.write (xopen)
                        xfileobj.write "None: is there a None literal in the EO language?"
                        xmock_open.write
                          []
                            memory > xfileobj
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                xfileobj.write (((xbuiltin_open)).apply ((((unsupported)).apply ((xargs)))))
                                (((unsupported)).apply ((xfileobj)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("xml.sax.saxutils.open") ((xmock_open)))))
                          seq
                            bogusForceDataize.write (((xmake_xml_file)).apply (((xself).xdata)) ("iso-8859-1") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSAXException)))))
                              bogusForceDataize.write ((((xself).xcheck_parse)).apply ((xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xfileobj).xclosed)))
                xcheck_parseString.write
                  [xself xs]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresult.write (((xStringIO)).apply)
                        bogusForceDataize.write (((xparseString)).apply ((xs)) ((((xXMLGenerator)).apply ((xresult)) ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((xxml_str)).apply (((xself).xdata)) ("utf-8"))))
                xtest_parseString_text.write
                  [xself]
                    memory > xencodings
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("us-ascii") ("iso-8859-1") ("utf-8") ("utf-16") ("utf-16le") ("utf-16be"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_str)).apply (((xself).xdata)) ((xencoding)))))
                        bogusForceDataize.write ((((xself).xcheck_parseString)).apply (((xself).xdata)))
                xtest_parseString_bytes.write
                  [xself]
                    memory > xencodings
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("us-ascii") ("utf-8") ("utf-16") ("utf-16le") ("utf-16be"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ((xencoding)))))
                            bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ((xencoding)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("utf-8-sig") ("utf-8"))))
                        bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("utf-8-sig") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("iso-8859-1"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSAXException)))))
                          bogusForceDataize.write ((((xself).xcheck_parseString)).apply ((((xxml_bytes)).apply (((xself).xdata)) ("iso-8859-1") ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_make_parser2.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                        (((unsupported)).apply)
                        xp.write (((xmake_parser)).apply)
                xtest_make_parser3.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xfrozenset)).apply ((((unsupported)).apply ("module"))))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xiter)).apply ((((unsupported)).apply ("module"))))))
                xtest_make_parser4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xtuple)).apply)))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xset)).apply)))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xfrozenset)).apply)))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xiter)).apply ((((unsupported)).apply)))))
                xtest_make_parser5.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module1") ("module2"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module1") ("module2"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module1") ("module2"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xfrozenset)).apply ((((unsupported)).apply ("module1") ("module2"))))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((unsupported)).apply ("module1") ("None: is there a None literal in the EO language?") ("module2") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write (((xmake_parser)).apply ((((xiter)).apply ((((unsupported)).apply ("module1") ("module2"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_escape_basic.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape)).apply ("Donald Duck & Co"))) ("Donald Duck &amp; Co"))
                xtest_escape_all.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape)).apply ("<Donald Duck & Co>"))) ("&lt;Donald Duck &amp; Co&gt;"))
                xtest_escape_extra.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape)).apply ("Hei på deg") ((((unsupported)).apply ("å") ("&aring;"))))) ("Hei p&aring; deg"))
                xtest_unescape_basic.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunescape)).apply ("Donald Duck &amp; Co"))) ("Donald Duck & Co"))
                xtest_unescape_all.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunescape)).apply ("&lt;Donald Duck &amp; Co&gt;"))) ("<Donald Duck & Co>"))
                xtest_unescape_extra.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunescape)).apply ("Hei på deg") ((((unsupported)).apply ("å") ("&aring;"))))) ("Hei p&aring; deg"))
                xtest_unescape_amp_extra.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunescape)).apply ("&amp;foo;") ((((unsupported)).apply ("&foo;") ("splat"))))) ("&foo;"))
                xtest_quoteattr_basic.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquoteattr)).apply ("Donald Duck & Co"))) ("\"Donald Duck &amp; Co\""))
                xtest_single_quoteattr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquoteattr)).apply ("Includes \"double\" quotes"))) ("'Includes \"double\" quotes'"))
                xtest_double_quoteattr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquoteattr)).apply ("Includes 'single' quotes"))) ("\"Includes 'single' quotes\""))
                xtest_single_double_quoteattr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquoteattr)).apply ("Includes 'single' and \"double\" quotes"))) ("\"Includes 'single' and &quot;double&quot; quotes\""))
                xtest_make_parser.write
                  [xself]
                    memory > xp
                    seq > @
                      xp.write (((xmake_parser)).apply ((((unsupported)).apply ("xml.parsers.no_such_parser"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfile)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfile)) ("w"))) ((xtmp)))
                          bogusForceDataize.write ((((xtmp).xwrite)).apply ("This was read from a file."))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfile)))
                xmake_byte_stream.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xBytesIO)).apply ("This is a byte stream."))))
                xmake_character_stream.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xStringIO)).apply ("This is a character stream."))))
                xcheckContent.write
                  [xself xstream xcontent]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xstream)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstream).xread)).apply)) ((xcontent)))
                        bogusForceDataize.write ((((xstream).xclose)).apply)
                xtest_character_stream.write
                  [xself]
                    memory > xsrc
                    memory > xprep
                    seq > @
                      seq
                        xsrc.write (((xInputSource)).apply (((xself).xfile)))
                        bogusForceDataize.write ((((xsrc).xsetCharacterStream)).apply (((((xself).xmake_character_stream)).apply)))
                        xprep.write (((xprepare_input_source)).apply ((xsrc)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetByteStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetCharacterStream)).apply)) ("This is a character stream."))
                xtest_byte_stream.write
                  [xself]
                    memory > xsrc
                    memory > xprep
                    seq > @
                      seq
                        xsrc.write (((xInputSource)).apply (((xself).xfile)))
                        bogusForceDataize.write ((((xsrc).xsetByteStream)).apply (((((xself).xmake_byte_stream)).apply)))
                        xprep.write (((xprepare_input_source)).apply ((xsrc)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetCharacterStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetByteStream)).apply)) ("This is a byte stream."))
                xtest_system_id.write
                  [xself]
                    memory > xsrc
                    memory > xprep
                    seq > @
                      seq
                        xsrc.write (((xInputSource)).apply (((xself).xfile)))
                        xprep.write (((xprepare_input_source)).apply ((xsrc)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetCharacterStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetByteStream)).apply)) ("This was read from a file."))
                xtest_string.write
                  [xself]
                    memory > xprep
                    seq > @
                      seq
                        xprep.write (((xprepare_input_source)).apply (((xself).xfile)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetCharacterStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetByteStream)).apply)) ("This was read from a file."))
                xtest_path_objects.write
                  [xself]
                    memory > xprep
                    seq > @
                      seq
                        xprep.write (((xprepare_input_source)).apply ((((xFakePath)).apply (((xself).xfile)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetCharacterStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetByteStream)).apply)) ("This was read from a file."))
                xtest_binary_file.write
                  [xself]
                    memory > xprep
                    seq > @
                      seq
                        xprep.write (((xprepare_input_source)).apply (((((xself).xmake_byte_stream)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetCharacterStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetByteStream)).apply)) ("This is a byte stream."))
                xtest_text_file.write
                  [xself]
                    memory > xprep
                    seq > @
                      seq
                        xprep.write (((xprepare_input_source)).apply (((((xself).xmake_character_stream)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xprep).xgetByteStream)).apply)))
                        bogusForceDataize.write ((((xself).xcheckContent)).apply (((((xprep).xgetCharacterStream)).apply)) ("This is a character stream."))
            (((unsupported)).apply)
              seq
                xtest_xmlgen_basic.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc></doc>"))))
                xtest_xmlgen_basic_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc/>"))))
                xtest_xmlgen_content.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("huhei"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc>huhei</doc>"))))
                xtest_xmlgen_content_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("huhei"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc>huhei</doc>"))))
                xtest_xmlgen_pi.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xprocessingInstruction)).apply ("test") ("data"))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<?test data?><doc></doc>"))))
                xtest_xmlgen_content_escape.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("<huhei&"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc>&lt;huhei&amp;</doc>"))))
                xtest_xmlgen_attr_escape.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply ("a") ("\""))))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("e") ((((unsupported)).apply ("a") ("'"))))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("e"))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("e") ((((unsupported)).apply ("a") ("'\""))))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("e"))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("e") ((((unsupported)).apply ("a") ("nrt"))))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("e"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc a='\"'><e a=\"'\"></e><e a=\"'&quot;\"></e><e a=\"&#10;&#13;&#9;\"></e></doc>"))))
                xtest_xmlgen_encoding.write
                  [xself]
                    memory > xencodings
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("iso-8859-15") ("utf-8") ("utf-8-sig") ("utf-16") ("utf-16be") ("utf-16le") ("utf-32") ("utf-32be") ("utf-32le"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          seq
                            xresult.write ((((xself).xioclass)).apply)
                            xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) ((xencoding)))
                            bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                            bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply ("a") ("u20ac"))))
                            bogusForceDataize.write ((((xgen).xcharacters)).apply ("u20ac"))
                            bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                            bogusForceDataize.write ((((xgen).xendDocument)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((unsupported)).apply (((xself).xxml)) ("<doc a=\"u20ac\">u20ac</doc>") ((xencoding)))))
                xtest_xmlgen_unencodable.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) ("ascii"))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply ("a") ("u20ac"))))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("u20ac"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((unsupported)).apply (((xself).xxml)) ("<doc a=\"&#8364;\">&#8364;</doc>") ("ascii"))))
                xtest_xmlgen_ignorable.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xignorableWhitespace)).apply (" "))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc> </doc>"))))
                xtest_xmlgen_ignorable_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xignorableWhitespace)).apply (" "))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<doc> </doc>"))))
                xtest_xmlgen_encoding_bytes.write
                  [xself]
                    memory > xencodings
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("iso-8859-15") ("utf-8") ("utf-8-sig") ("utf-16") ("utf-16be") ("utf-16le") ("utf-32") ("utf-32be") ("utf-32le"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          seq
                            xresult.write ((((xself).xioclass)).apply)
                            xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) ((xencoding)))
                            bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                            bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply ("a") ("u20ac"))))
                            bogusForceDataize.write ((((xgen).xcharacters)).apply (((("u20ac".xencode)).apply ((xencoding)))))
                            bogusForceDataize.write ((((xgen).xignorableWhitespace)).apply ((((" ".xencode)).apply ((xencoding)))))
                            bogusForceDataize.write ((((xgen).xendElement)).apply ("doc"))
                            bogusForceDataize.write ((((xgen).xendDocument)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((unsupported)).apply (((xself).xxml)) ("<doc a=\"u20ac\">u20ac </doc>") ((xencoding)))))
                xtest_xmlgen_ns.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("ns1") ((xns_uri)))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ((xns_uri)) ("doc"))) ("ns1:doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("udoc"))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("udoc"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ((xns_uri)) ("doc"))) ("ns1:doc"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("ns1"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply (("<ns1:doc xmlns:ns1=\"%s\"><udoc></udoc></ns1:doc>".mod (xns_uri))))))
                xtest_xmlgen_ns_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("ns1") ((xns_uri)))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ((xns_uri)) ("doc"))) ("ns1:doc") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("udoc"))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("udoc"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ((xns_uri)) ("doc"))) ("ns1:doc"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("ns1"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply (("<ns1:doc xmlns:ns1=\"%s\"><udoc/></ns1:doc>".mod (xns_uri))))))
                xtest_1463026_1.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))) ("a") ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("b"))) ("c"))))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a b=\"c\"></a>"))))
                xtest_1463026_1_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))) ("a") ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("b"))) ("c"))))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a b=\"c\"/>"))))
                xtest_1463026_2.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("None: is there a None literal in the EO language?") ("qux"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a xmlns=\"qux\"></a>"))))
                xtest_1463026_2_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("None: is there a None literal in the EO language?") ("qux"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a xmlns=\"qux\"/>"))))
                xtest_1463026_3.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("my") ("qux"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a") ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("b"))) ("c"))))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("my"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<my:a xmlns:my=\"qux\" b=\"c\"></my:a>"))))
                xtest_1463026_3_empty.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((unsupported)).apply ((xXMLGenerator)) ((xresult)) (TRUE))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("my") ("qux"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a") ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("b"))) ("c"))))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("qux") ("a"))) ("a"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("my"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<my:a xmlns:my=\"qux\" b=\"c\"/>"))))
                xtest_5027_1.write
                  [xself]
                    memory > xtest_xml
                    memory > xgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xtest_xml.write (((xStringIO)).apply ("<?xml version=\"1.0\"?><a:g1 xmlns:a=\"http://example.com/ns\"><a:g2 xml:lang=\"en\">Hello</a:g2></a:g1>"))
                        xparser.write (((xmake_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetFeature)).apply ((xfeature_namespaces)) (TRUE))
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((xtest_xml)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a:g1 xmlns:a=\"http://example.com/ns\"><a:g2 xml:lang=\"en\">Hello</a:g2></a:g1>"))))
                xtest_5027_2.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    memory > xlang_attr
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                        bogusForceDataize.write ((((xgen).xstartPrefixMapping)).apply ("a") ("http://example.com/ns"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("http://example.com/ns") ("g1"))) ("g1") ((((unsupported)).apply)))
                        xlang_attr.write (((unsupported)).apply ((((unsupported)).apply ("http://www.w3.org/XML/1998/namespace") ("lang"))) ("en"))
                        bogusForceDataize.write ((((xgen).xstartElementNS)).apply ((((unsupported)).apply ("http://example.com/ns") ("g2"))) ("g2") ((xlang_attr)))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("Hello"))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("http://example.com/ns") ("g2"))) ("g2"))
                        bogusForceDataize.write ((((xgen).xendElementNS)).apply ((((unsupported)).apply ("http://example.com/ns") ("g1"))) ("g1"))
                        bogusForceDataize.write ((((xgen).xendPrefixMapping)).apply ("a"))
                        bogusForceDataize.write ((((xgen).xendDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((((xself).xxml)).apply ("<a:g1 xmlns:a=\"http://example.com/ns\"><a:g2 xml:lang=\"en\">Hello</a:g2></a:g1>"))))
                xtest_no_close_file.write
                  [xself]
                    memory > xresult
                    memory > xfunc
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xfunc.write
                          [xout]
                            memory > xgen
                            seq > @
                              seq
                                xgen.write (((xXMLGenerator)).apply ((xout)))
                                bogusForceDataize.write ((((xgen).xstartDocument)).apply)
                                bogusForceDataize.write ((((xgen).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xfunc)).apply ((xresult)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xresult).xclosed)))
                xtest_xmlgen_fragment.write
                  [xself]
                    memory > xgen
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xioclass)).apply)
                        xgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("foo") ((((unsupported)).apply ("a") ("1.0"))))
                        bogusForceDataize.write ((((xgen).xcharacters)).apply ("Hello"))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("foo"))
                        bogusForceDataize.write ((((xgen).xstartElement)).apply ("bar") ((((unsupported)).apply ("b") ("2.0"))))
                        bogusForceDataize.write ((((xgen).xendElement)).apply ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((((unsupported)).apply (((((xself).xxml)).apply ("<foo a=\"1.0\">Hello</foo><bar b=\"2.0\"></bar>"))) ((((unsupported)).apply ((((xlen)).apply (((((xself).xxml)).apply (""))))))))))
            (((unsupported)).apply ((xXmlgenTest)) (((xunittest).xTestCase)))
              seq
                xioclass.write (xStringIO)
                xxml.write
                  [xself xdoc xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("<?xml version=\"1.0\" encoding=\"%s\"?>n%s".mod (((unsupported)).apply ((xencoding)) ((xdoc))))))
                xtest_xmlgen_unencodable.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xXmlgenTest)) (((xunittest).xTestCase)))
              seq
                xioclass.write (xBytesIO)
                xxml.write
                  [xself xdoc xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((("<?xml version=\"1.0\" encoding=\"%s\"?>n%s".mod (((unsupported)).apply ((xencoding)) ((xdoc)))).xencode)).apply ((xencoding)) ("xmlcharrefreplace"))))
            (((unsupported)).apply ((xBytesXmlgenTest)))
              (((unsupported)).apply ((xlist)))
                seq
                  xwrite.write ((xlist).xappend)
                  xclosed.write (xfalse)
                  xseekable.write
                    [xself]
                      seq > @
                        (((unsupported)).apply (TRUE))
                  xtell.write
                    [xself]
                      seq > @
                        (((unsupported)).apply ((((xlen)).apply ((xself)))))
                  xgetvalue.write
                    [xself]
                      seq > @
                        (((unsupported)).apply (((("".xjoin)).apply ((xself)))))
            (((unsupported)).apply ((xXmlgenTest)) (((xunittest).xTestCase)))
              seq
                xioclass.write
                  [xself]
                    memory > xraw
                    memory > xwriter
                    seq > @
                      seq
                        xraw.write (((xBytesIO)).apply)
                        xwriter.write ((((((xcodecs).xgetwriter)).apply ("ascii"))).apply ((xraw)) ("xmlcharrefreplace"))
                        (((unsupported)).apply (((xwriter).xgetvalue)) (((xraw).xgetvalue)))
                        (((unsupported)).apply ((xwriter)))
                xxml.write
                  [xself xdoc xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((("<?xml version=\"1.0\" encoding=\"%s\"?>n%s".mod (((unsupported)).apply ((xencoding)) ((xdoc)))).xencode)).apply ("ascii") ("xmlcharrefreplace"))))
            (((unsupported)).apply ((xXmlgenTest)) (((xunittest).xTestCase)))
              seq
                xfname.write (((xsupport).xTESTFN).add "-codecs")
                xioclass.write
                  [xself]
                    memory > xgetvalue
                    memory > xcleanup
                    memory > xwriter
                    seq > @
                      seq
                        xwriter.write (((unsupported)).apply (((xcodecs).xopen)) (((xself).xfname)) ("w") ("ascii") ("xmlcharrefreplace") (0))
                        xcleanup.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xwriter).xclose)).apply)
                                bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xcleanup)))
                        xgetvalue.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xwriter).xclose)).apply)
                                (((unsupported)).apply ((((xopen)).apply (((xwriter).xname)) ("rb"))) ((xf)))
                                  (((unsupported)).apply (((((xf).xread)).apply)))
                        (((unsupported)).apply (((xwriter).xgetvalue)) ((xgetvalue)))
                        (((unsupported)).apply ((xwriter)))
                xxml.write
                  [xself xdoc xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((("<?xml version=\"1.0\" encoding=\"%s\"?>n%s".mod (((unsupported)).apply ((xencoding)) ((xdoc)))).xencode)).apply ("ascii") ("xmlcharrefreplace"))))
            xstart.write "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>n"
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_filter_basic.write
                [xself]
                  memory > xgen
                  memory > xresult
                  memory > xfilter
                  seq > @
                    seq
                      xresult.write (((xBytesIO)).apply)
                      xgen.write (((xXMLGenerator)).apply ((xresult)))
                      xfilter.write (((xXMLFilterBase)).apply)
                      bogusForceDataize.write ((((xfilter).xsetContentHandler)).apply ((xgen)))
                      bogusForceDataize.write ((((xfilter).xstartDocument)).apply)
                      bogusForceDataize.write ((((xfilter).xstartElement)).apply ("doc") ((((unsupported)).apply)))
                      bogusForceDataize.write ((((xfilter).xcharacters)).apply ("content"))
                      bogusForceDataize.write ((((xfilter).xignorableWhitespace)).apply (" "))
                      bogusForceDataize.write ((((xfilter).xendElement)).apply ("doc"))
                      bogusForceDataize.write ((((xfilter).xendDocument)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((xstart).add "<doc>content </doc>")))
            (((unsupported)).apply ((((xopen)).apply ((xTEST_XMLFILE_OUT)) ("rb"))) ((xf)))
              xxml_test_out.write ((((xf).xread)).apply)
            (((unsupported)).apply ((xXmlTestBase)))
              seq
                xtest_expat_binary_file.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        (((unsupported)).apply ((((xopen)).apply ((xTEST_XMLFILE)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xparser).xparse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_text_file.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xTEST_XMLFILE)) ("rt") ("iso-8859-1"))) ((xf)))
                          bogusForceDataize.write ((((xparser).xparse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_binary_file_nonascii.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    memory > xfname
                    seq > @
                      (((unsupported)).apply)
                        xfname.write ((xsupport).xTESTFN_UNICODE)
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply ((xTEST_XMLFILE)) ((xfname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfname)))
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((((xopen)).apply ((xfname)) ("rb"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_binary_file_bytes_name.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    memory > xfname
                    seq > @
                      seq
                        xfname.write ((((xos).xfsencode)).apply ((xTEST_XMLFILE)))
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        (((unsupported)).apply ((((xopen)).apply ((xfname)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xparser).xparse)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_binary_file_int_name.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        (((unsupported)).apply ((((xopen)).apply ((xTEST_XMLFILE)) ("rb"))) ((xf)))
                          (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((((xf).xfileno)).apply)) ("rb") ((xfalse)))) ((xf2)))
                            bogusForceDataize.write ((((xparser).xparse)).apply ((xf2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).x_notations)) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).x_entities)) ((((unsupported)).apply)))
                    xnotationDecl.write
                      [xself xname xpublicId xsystemId]
                        seq > @
                          bogusForceDataize.write (((((xself).x_notations).xappend)).apply ((((unsupported)).apply ((xname)) ((xpublicId)) ((xsystemId)))))
                    xunparsedEntityDecl.write
                      [xself xname xpublicId xsystemId xndata]
                        seq > @
                          bogusForceDataize.write (((((xself).x_entities).xappend)).apply ((((unsupported)).apply ((xname)) ((xpublicId)) ((xsystemId)) ((xndata)))))
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xself).xentities)) ((((unsupported)).apply)))
                    xresolveEntity.write
                      [xself xpublicId xsystemId]
                        memory > xsource
                        seq > @
                          seq
                            bogusForceDataize.write (((((xself).xentities).xappend)).apply ((((unsupported)).apply ((xpublicId)) ((xsystemId)))))
                            xsource.write (((xInputSource)).apply)
                            bogusForceDataize.write ((((xsource).xsetPublicId)).apply ((xpublicId)))
                            bogusForceDataize.write ((((xsource).xsetSystemId)).apply ((xsystemId)))
                            (((unsupported)).apply ((xsource)))
                xtest_expat_dtdhandler.write
                  [xself]
                    memory > xhandler
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xhandler.write ((((xself).xTestDTDHandler)).apply)
                        bogusForceDataize.write ((((xparser).xsetDTDHandler)).apply ((xhandler)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<!DOCTYPE doc [n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("  <!ENTITY img SYSTEM \"expat.gif\" NDATA GIF>n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("  <!NOTATION GIF PUBLIC \"-//CompuServe//NOTATION Graphics Interchange Format 89a//EN\">n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("]>n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc></doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).x_notations)) ((((unsupported)).apply ((((unsupported)).apply ("GIF") ("-//CompuServe//NOTATION Graphics Interchange Format 89a//EN") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).x_entities)) ((((unsupported)).apply ((((unsupported)).apply ("img") ("None: is there a None literal in the EO language?") ("expat.gif") ("GIF"))))))
                xtest_expat_external_dtd_enabled.write
                  [xself]
                    memory > xparser
                    memory > xresolver
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetFeature)).apply ((xfeature_external_ges)) (TRUE))
                        xresolver.write ((((xself).xTestEntityRecorder)).apply)
                        bogusForceDataize.write ((((xparser).xsetEntityResolver)).apply ((xresolver)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xURLError)))))
                          bogusForceDataize.write ((((xparser).xfeed)).apply ("<!DOCTYPE external SYSTEM \"unsupported://non-existing\">n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresolver).xentities)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("unsupported://non-existing"))))))
                xtest_expat_external_dtd_default.write
                  [xself]
                    memory > xparser
                    memory > xresolver
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresolver.write ((((xself).xTestEntityRecorder)).apply)
                        bogusForceDataize.write ((((xparser).xsetEntityResolver)).apply ((xresolver)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<!DOCTYPE external SYSTEM \"unsupported://non-existing\">n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc />"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresolver).xentities)) ((((unsupported)).apply)))
                (((unsupported)).apply)
                  xresolveEntity.write
                    [xself xpublicId xsystemId]
                      memory > xinpsrc
                      seq > @
                        seq
                          xinpsrc.write (((xInputSource)).apply)
                          bogusForceDataize.write ((((xinpsrc).xsetByteStream)).apply ((((xBytesIO)).apply ("<entity/>"))))
                          (((unsupported)).apply ((xinpsrc)))
                xtest_expat_entityresolver_enabled.write
                  [xself]
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetFeature)).apply ((xfeature_external_ges)) (TRUE))
                        bogusForceDataize.write ((((xparser).xsetEntityResolver)).apply (((((xself).xTestEntityResolver)).apply)))
                        xresult.write (((xBytesIO)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((((xXMLGenerator)).apply ((xresult)))))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<!DOCTYPE doc [n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("  <!ENTITY test SYSTEM \"whatever\">n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("]>n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>&test;</doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((xstart).add "<doc><entity></entity></doc>")))
                xtest_expat_entityresolver_default.write
                  [xself]
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetFeature)).apply ((xfeature_external_ges)))) ((xfalse)))
                        bogusForceDataize.write ((((xparser).xsetEntityResolver)).apply (((((xself).xTestEntityResolver)).apply)))
                        xresult.write (((xBytesIO)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((((xXMLGenerator)).apply ((xresult)))))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<!DOCTYPE doc [n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("  <!ENTITY test SYSTEM \"whatever\">n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("]>n"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>&test;</doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((xstart).add "<doc></doc>")))
                (((unsupported)).apply ((xContentHandler)))
                  seq
                    xstartElement.write
                      [xself xname xattrs]
                        seq > @
                          (((unsupported)).apply (((xself).x_attrs)) ((xattrs)))
                    xstartElementNS.write
                      [xself xname xqname xattrs]
                        seq > @
                          (((unsupported)).apply (((xself).x_attrs)) ((xattrs)))
                xtest_expat_attrs_empty.write
                  [xself]
                    memory > xgather
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xgather.write ((((xself).xAttrGatherer)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xgather)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc/>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xverify_empty_attrs)).apply (((xgather).x_attrs)))
                xtest_expat_attrs_wattr.write
                  [xself]
                    memory > xgather
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xgather.write ((((xself).xAttrGatherer)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xgather)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc attr='val'/>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xverify_attrs_wattr)).apply (((xgather).x_attrs)))
                xtest_expat_nsattrs_empty.write
                  [xself]
                    memory > xgather
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply (1))
                        xgather.write ((((xself).xAttrGatherer)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xgather)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc/>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xverify_empty_nsattrs)).apply (((xgather).x_attrs)))
                xtest_expat_nsattrs_wattr.write
                  [xself]
                    memory > xgather
                    memory > xparser
                    memory > xattrs
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply (1))
                        xgather.write ((((xself).xAttrGatherer)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xgather)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply (("<doc xmlns:ns='%s' ns:attr='val'/>".mod (xns_uri))))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        xattrs.write ((xgather).x_attrs)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetLength)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNames)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xattrs).xgetQNames)).apply).eq (((unsupported)).apply)).or (((((xattrs).xgetQNames)).apply).eq (((unsupported)).apply ("ns:attr"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xattrs)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) (25))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ("val"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xvalues)).apply)))) ((((unsupported)).apply ("val"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetValue)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xattrs)) ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                xtest_expat_inpsource_filename.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((xTEST_XMLFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_inpsource_sysid.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((((xInputSource)).apply ((xTEST_XMLFILE)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_inpsource_sysid_nonascii.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    memory > xfname
                    seq > @
                      (((unsupported)).apply)
                        xfname.write ((xsupport).xTESTFN_UNICODE)
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply ((xTEST_XMLFILE)) ((xfname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfname)))
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((((xInputSource)).apply ((xfname)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_inpsource_byte_stream.write
                  [xself]
                    memory > xresult
                    memory > xparser
                    memory > xxmlgen
                    memory > xinpsrc
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        xinpsrc.write (((xInputSource)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xTEST_XMLFILE)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xinpsrc).xsetByteStream)).apply ((xf)))
                            bogusForceDataize.write ((((xparser).xparse)).apply ((xinpsrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_inpsource_character_stream.write
                  [xself]
                    memory > xresult
                    memory > xparser
                    memory > xxmlgen
                    memory > xinpsrc
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        xinpsrc.write (((xInputSource)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xTEST_XMLFILE)) ("rt") ("iso-8859-1"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xinpsrc).xsetCharacterStream)).apply ((xf)))
                            bogusForceDataize.write ((((xparser).xparse)).apply ((xinpsrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) ((xxml_test_out)))
                xtest_expat_incremental.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("</doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((xstart).add "<doc></doc>")))
                xtest_expat_incremental_reset.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("text"))
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xreset)).apply)
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("text"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("</doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xgetvalue)).apply)) (((xstart).add "<doc>text</doc>")))
                xtest_expat_locator_noinfo.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("<doc>"))
                        bogusForceDataize.write ((((xparser).xfeed)).apply ("</doc>"))
                        bogusForceDataize.write ((((xparser).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetSystemId)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetPublicId)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetLineNumber)).apply)) (1))
                xtest_expat_locator_withinfo.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    seq > @
                      seq
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((xTEST_XMLFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetSystemId)).apply)) ((xTEST_XMLFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetPublicId)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_expat_locator_withinfo_nonascii.write
                  [xself]
                    memory > xxmlgen
                    memory > xresult
                    memory > xparser
                    memory > xfname
                    seq > @
                      (((unsupported)).apply)
                        xfname.write ((xsupport).xTESTFN_UNICODE)
                        bogusForceDataize.write ((((xshutil).xcopyfile)).apply ((xTEST_XMLFILE)) ((xfname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfname)))
                        xresult.write (((xBytesIO)).apply)
                        xxmlgen.write (((xXMLGenerator)).apply ((xresult)))
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((xxmlgen)))
                        bogusForceDataize.write ((((xparser).xparse)).apply ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetSystemId)).apply)) ((xfname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetPublicId)).apply)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_expat_inpsource_location.write
                  [xself]
                    memory > xname
                    memory > xsource
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((((xContentHandler)).apply)))
                        xsource.write (((xInputSource)).apply)
                        bogusForceDataize.write ((((xsource).xsetByteStream)).apply ((((xBytesIO)).apply ("<foo bar foobar>"))))
                        xname.write "a file name"
                        bogusForceDataize.write ((((xsource).xsetSystemId)).apply ((xname)))
                        (((unsupported)).apply ((xSAXException)))
                          seq
                            bogusForceDataize.write ((((xparser).xparse)).apply ((xsource)))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xgetSystemId)).apply)) ((xname)))
                xtest_expat_incomplete.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((xcreate_parser)).apply)
                        bogusForceDataize.write ((((xparser).xsetContentHandler)).apply ((((xContentHandler)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSAXParseException)) (((xparser).xparse)) ((((xStringIO)).apply ("<foo>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetColumnNumber)).apply)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetLineNumber)).apply)) (1))
                xtest_sax_parse_exception_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xstr)).apply ((((xSAXParseException)).apply ("message") ("None: is there a None literal in the EO language?") (((((xself).xDummyLocator)).apply (1) (1))))))
                        bogusForceDataize.write (((xstr)).apply ((((xSAXParseException)).apply ("message") ("None: is there a None literal in the EO language?") (((((xself).xDummyLocator)).apply ("None: is there a None literal in the EO language?") (1))))))
                        bogusForceDataize.write (((xstr)).apply ((((xSAXParseException)).apply ("message") ("None: is there a None literal in the EO language?") (((((xself).xDummyLocator)).apply (1) ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write (((xstr)).apply ((((xSAXParseException)).apply ("message") ("None: is there a None literal in the EO language?") (((((xself).xDummyLocator)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself xlineno xcolno]
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).x_lineno)) ((xlineno)))
                            (((unsupported)).apply (((xself).x_colno)) ((xcolno)))
                    xgetPublicId.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ("pubid"))
                    xgetSystemId.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ("sysid"))
                    xgetLineNumber.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xself).x_lineno)))
                    xgetColumnNumber.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xself).x_colno)))
            (((unsupported)).apply ((xXmlTestBase)))
              seq
                xtest_attrs_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xverify_empty_attrs)).apply ((((xAttributesImpl)).apply ((((unsupported)).apply)))))
                xtest_attrs_wattr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xverify_attrs_wattr)).apply ((((xAttributesImpl)).apply ((((unsupported)).apply ("attr") ("val"))))))
                xtest_nsattrs_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xverify_empty_nsattrs)).apply ((((xAttributesNSImpl)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xtest_nsattrs_wattr.write
                  [xself]
                    memory > xattrs
                    seq > @
                      seq
                        xattrs.write (((xAttributesNSImpl)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ("val"))) ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ("ns:attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetLength)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNames)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNames)).apply)) ((((unsupported)).apply ("ns:attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xattrs)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xkeys)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xget)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) (25))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))) ("val"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xattrs).xvalues)).apply)))) ((((unsupported)).apply ("val"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetValue)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetValueByQName)).apply ("ns:attr"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetNameByQName)).apply ("ns:attr"))) ((((unsupported)).apply ((xns_uri)) ("attr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xattrs)) ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xattrs).xgetQNameByName)).apply ((((unsupported)).apply ((xns_uri)) ("attr"))))) ("ns:attr"))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write (((xrun_unittest)).apply ((xMakeParserTest)) ((xParseTest)) ((xSaxutilsTest)) ((xPrepareInputSourceTest)) ((xStringXmlgenTest)) ((xBytesXmlgenTest)) ((xWriterXmlgenTest)) ((xStreamWriterXmlgenTest)) ((xStreamReaderWriterXmlgenTest)) ((xExpatReaderTest)) ((xErrorReportingTest)) ((xXmlReaderTest)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)