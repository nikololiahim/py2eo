memory > xKeyError
memory > xcallable
memory > xsuper
memory > xobject
memory > xkwargs
memory > xNotImplementedError2
memory > xchecks
[] > mixins
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_cached_value
        memory > xis_cached
        memory > x_check_default
        memory > xcheck
        memory > xset_cached_value
        memory > xNOT_PROVIDED
        memory > xget_cache_name
        memory > x_default_hint
        memory > xdelete_cached_value
        seq > @
          seq
            (((unsupported)).apply)
            xNOT_PROVIDED.write (((xobject)).apply)
            (((unsupported)).apply)
              seq
                unsupported
                xget_cache_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xNotImplementedError2)))
                xget_cached_value.write
                  [xself xinstance xdefault]
                    memory > xcache_name
                    seq > @
                      (((unsupported)).apply)
                        xcache_name.write ((((xself).xget_cache_name)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply ((((xinstance).x_state).xfields_cache)) ((xcache_name)))))
                          seq
                            (((unsupported)).apply ((xdefault)) ((xNOT_PROVIDED))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xdefault)))
                xis_cached.write
                  [xself xinstance]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((((xself).xget_cache_name)).apply)) ((((xinstance).x_state).xfields_cache)))))
                xset_cached_value.write
                  [xself xinstance xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xinstance).x_state).xfields_cache)) (((((xself).xget_cache_name)).apply)))) ((xvalue)))
                xdelete_cached_value.write
                  [xself xinstance]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xinstance).x_state).xfields_cache)) (((((xself).xget_cache_name)).apply)))))))))
            (((unsupported)).apply)
              seq
                x_default_hint.write (((unsupported)).apply ("<valid default>") ("<invalid default>"))
                x_check_default.write
                  [xself]
                    seq > @
                      ((((((xself).xhas_default)).apply).and (((unsupported)).apply (((xself).xdefault)) ("None: is there a None literal in the EO language?"))).and ((((xcallable)).apply (((xself).xdefault))).not)).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xWarning)) (("%s default should be a callable instead of an instance so that it's not shared between all field instances.".mod (((unsupported)).apply ((((xself).x__class__).x__name__))))) (("Use a callable instead, e.g., use `%s` instead of `%s`.".mod ((xself).x_default_hint))) ((xself)) ("fields.E010"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xcheck.write
                  [xself]
                    memory > xerrors
                    seq > @
                      (((unsupported)).apply)
                        xerrors.write ((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xself).x_check_default)).apply)))
                        (((unsupported)).apply ((xerrors)))