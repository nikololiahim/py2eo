memory > xTemplateSyntaxError
memory > xUnsafeClass
memory > xmark_safe
memory > xSafeClass
memory > xSimpleTestCase
[] > test_autoescape
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_autoescape_literals01
        memory > xtest_autoescape_tag01
        memory > xtest_autoescape_tag05
        memory > xtest_autoescape_tag08
        memory > xtest_autoescape_lookup01
        memory > xtest_autoescape_stringiterations01
        memory > xtest_autoescape_tag07
        memory > xtest_autoescape_filters02
        memory > xtest_invalid_arg
        memory > xtest_autoescape_tag02
        memory > xtest_autoescape_tag04
        memory > xtest_no_arg
        memory > xtest_autoescape_tag10
        memory > xtest_autoescape_tag09
        memory > xtest_autoescape_filtertag01
        memory > xtest_autoescape_tag03
        memory > xtest_autoescape_tag06
        memory > xtest_autoescape_filters01
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_autoescape_tag01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag01"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("hello"))
                xtest_autoescape_tag02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag02") ((((unsupported)).apply ("first") ("<b>hello</b>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("<b>hello</b>"))
                xtest_autoescape_tag03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag03") ((((unsupported)).apply ("first") ("<b>hello</b>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("&lt;b&gt;hello&lt;/b&gt;"))
                xtest_autoescape_tag04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag04") ((((unsupported)).apply ("first") ("<a>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("<a> &lt;a&gt;"))
                xtest_autoescape_tag05.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag05") ((((unsupported)).apply ("first") ("<b>first</b>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("&lt;b&gt;first&lt;/b&gt;"))
                xtest_autoescape_tag06.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag06") ((((unsupported)).apply ("first") ((((xmark_safe)).apply ("<b>first</b>"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("<b>first</b>"))
                xtest_autoescape_tag07.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag07") ((((unsupported)).apply ("first") ((((xmark_safe)).apply ("<b>Apple</b>"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("<b>Apple</b>"))
                xtest_autoescape_tag08.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag08") ((((unsupported)).apply ("var") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (" endquote\" hah"))
                xtest_autoescape_tag09.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag09") ((((unsupported)).apply ("unsafe") ((((xUnsafeClass)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("you &amp; me"))
                xtest_autoescape_tag10.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-tag10") ((((unsupported)).apply ("safe") ((((xSafeClass)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("you &gt; me"))
                xtest_autoescape_filtertag01.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-filtertag01") ((((unsupported)).apply ("first") ("<a>"))))
                xtest_autoescape_filters01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-filters01") ((((unsupported)).apply ("var") ("this & that"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("this  that"))
                xtest_autoescape_filters02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-filters02") ((((unsupported)).apply ("var") ((((unsupported)).apply ("Tom") ("Dick") ("Harry"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Tom & Dick & Harry"))
                xtest_autoescape_literals01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-literals01"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("this & that"))
                xtest_autoescape_stringiterations01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-stringiterations01") ((((unsupported)).apply ("var") ("K&R"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("K,&amp;,R,"))
                xtest_autoescape_lookup01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-lookup01") ((((unsupported)).apply ("var") ((((unsupported)).apply ("key") ("this & that"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("this &amp; that"))
                xtest_invalid_arg.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'autoescape' argument should be 'on' or 'off'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-incorrect-arg") ((((unsupported)).apply ("var") ((((unsupported)).apply ("key") ("this & that"))))))
                xtest_no_arg.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'autoescape' tag requires exactly one argument."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("autoescape-incorrect-arg") ((((unsupported)).apply ("var") ((((unsupported)).apply ("key") ("this & that"))))))