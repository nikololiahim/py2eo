memory > xrouter
memory > xKeyError
memory > xconnections
memory > xForwardManyToOneDescriptor
memory > xsuper
memory > xtuple
memory > xModel
memory > xTypeError
memory > xManyRelatedManager
memory > xmust_send_signals
memory > xcan_fast_add
memory > xfalse
memory > xfield
memory > xAttributeError
memory > xReverseManyToOneDescriptor
memory > xRelatedManager
memory > xobjs
memory > xindex
memory > xenumerate
memory > xhints
memory > xValueError
memory > xQ
memory > xinst
memory > xtarget_id
memory > xFieldError
memory > xcan_ignore_conflicts
memory > xany
memory > xtype
memory > xf
memory > xcreated
memory > xrh_field
memory > xobj
memory > xDeferredAttribute
memory > xresolve_callables
memory > xgetattr
memory > xsetattr
memory > xlh_field
memory > xQuerySet
memory > xresult
memory > xsignals
memory > xkwargs
memory > xisinstance
memory > xtransaction
memory > xlen
memory > xdict
memory > xrel_obj
[] > related_descriptors
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_prefetch_queryset
        memory > x__reduce__
        memory > xget_queryset
        memory > xcreate_reverse_many_to_one_manager
        memory > xrelated_manager_cls
        memory > xget_object
        memory > xRelatedObjectDoesNotExist
        memory > x__set__
        memory > xrelated_manager_cache_key
        memory > x__get__
        memory > x__init__
        memory > xis_cached
        memory > x_get_set_deprecation_msg_params
        memory > xcreate_forward_many_to_many_manager
        memory > xthrough
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xDeferredAttribute)))
              x__set__.write
                [xself xinstance xvalue]
                  seq > @
                    seq
                      (((((((xinstance).x__dict__).xget)).apply ((((xself).xfield).xattname))).neq (xvalue)).and (((((xself).xfield).xis_cached)).apply ((xinstance)))).if
                        bogusForceDataize.write (((((xself).xfield).xdelete_cached_value)).apply ((xinstance)))
                      (((unsupported)).apply ((((unsupported)).apply (((xinstance).x__dict__)) ((((xself).xfield).xattname)))) ((xvalue)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfield_with_rel]
                    seq > @
                      (((unsupported)).apply (((xself).xfield)) ((xfield_with_rel)))
                xRelatedObjectDoesNotExist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xtype)).apply ("RelatedObjectDoesNotExist") ((((unsupported)).apply ((((((xself).xfield).xremote_field).xmodel).xDoesNotExist)) ((xAttributeError)))) ((((unsupported)).apply ("__module__") (((((xself).xfield).xmodel).x__module__)) ("__qualname__") (("%s.%s.RelatedObjectDoesNotExist".mod (((unsupported)).apply (((((xself).xfield).xmodel).x__qualname__)) ((((xself).xfield).xname))))))))))
                xis_cached.write
                  [xself xinstance]
                    seq > @
                      (((unsupported)).apply ((((((xself).xfield).xis_cached)).apply ((xinstance)))))
                xget_queryset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply (((((((xself).xfield).xremote_field).xmodel).x_base_manager).xdb_manager)) ((xhints))).xall)).apply)))
                xget_prefetch_queryset.write
                  [xself xinstances xqueryset]
                    memory > xrel_obj_attr
                    memory > xinstances_dict
                    memory > xinstance
                    memory > xinstance_attr
                    memory > xquery
                    memory > xrelated_field
                    memory > xremote_field
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                          xqueryset.write ((((xself).xget_queryset)).apply)
                        (((unsupported)).apply (((xqueryset).x_add_hints)) ((((unsupported)).apply ((xinstances)) (0))))
                        xrel_obj_attr.write (((xself).xfield).xget_foreign_related_value)
                        xinstance_attr.write (((xself).xfield).xget_local_related_value)
                        xinstances_dict.write (((unsupported)).apply ((((xinstance_attr)).apply ((xinst)))) ((xinst)) ((xinst)) ((xinstances)))
                        xrelated_field.write (((unsupported)).apply ((((xself).xfield).xforeign_related_fields)) (0))
                        xremote_field.write (((xself).xfield).xremote_field)
                        (((((xremote_field).xis_hidden)).apply).or ((((xlen)).apply ((((xself).xfield).xforeign_related_fields))).eq 1)).if
                          xquery.write (((unsupported)).apply (("%s__in".mod ((xrelated_field).xname))) ((((unsupported)).apply ((((unsupported)).apply ((((xinstance_attr)).apply ((xinst)))) (0))) ((xinst)) ((xinstances)))))
                          xquery.write (((unsupported)).apply (("%s__in".mod (((((xself).xfield).xrelated_query_name)).apply))) ((xinstances)))
                        xqueryset.write ((((xqueryset).xfilter)).apply ((((unsupported)).apply ((xquery)))))
                        (((xremote_field).xmultiple).not).if
                          (((unsupported)).apply ((xrel_obj)) ((xqueryset)))
                            seq
                              xinstance.write (((unsupported)).apply ((xinstances_dict)) ((((xrel_obj_attr)).apply ((xrel_obj)))))
                              bogusForceDataize.write ((((xremote_field).xset_cached_value)).apply ((xrel_obj)) ((xinstance)))
                        (((unsupported)).apply ((((unsupported)).apply ((xqueryset)) ((xrel_obj_attr)) ((xinstance_attr)) (TRUE) ((((((xself).xfield).xget_cache_name)).apply)) ((xfalse)))))
                xget_object.write
                  [xself xinstance]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply (((xself).xget_queryset)) ((xinstance)))
                        (((unsupported)).apply (((((xqs).xget)).apply ((((((xself).xfield).xget_reverse_related_filter)).apply ((xinstance)))))))
                x__get__.write
                  [xself xinstance xcls]
                    memory > xancestor
                    memory > xremote_field
                    memory > xhas_value
                    memory > xancestor_link
                    memory > xrel_obj
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xKeyError)))
                          xrel_obj.write (((((xself).xfield).xget_cached_value)).apply ((xinstance)))
                          seq
                            xhas_value.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ((((((xself).xfield).xget_local_related_value)).apply ((xinstance)))))
                            xancestor_link.write ((xhas_value).if (((((xinstance).x_meta).xget_ancestor_link)).apply ((((xself).xfield).xmodel))) "None: is there a None literal in the EO language?")
                            ((xancestor_link).and ((((xancestor_link).xis_cached)).apply ((xinstance)))).if
                              seq
                                xancestor.write ((((xancestor_link).xget_cached_value)).apply ((xinstance)))
                                xrel_obj.write (((unsupported)).apply ((((xself).xfield).xget_cached_value)) ((xancestor)) ("None: is there a None literal in the EO language?"))
                              xrel_obj.write "None: is there a None literal in the EO language?"
                            ((((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).and (xhas_value)).if
                              seq
                                xrel_obj.write ((((xself).xget_object)).apply ((xinstance)))
                                xremote_field.write (((xself).xfield).xremote_field)
                                (((xremote_field).xmultiple).not).if
                                  bogusForceDataize.write ((((xremote_field).xset_cached_value)).apply ((xrel_obj)) ((xinstance)))
                            bogusForceDataize.write (((((xself).xfield).xset_cached_value)).apply ((xinstance)) ((xrel_obj)))
                        ((((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).and ((((xself).xfield).xnull).not)).if
                          (((unsupported)).apply (((((xself).xRelatedObjectDoesNotExist)).apply (("%s has no %s.".mod (((unsupported)).apply (((((xself).xfield).xmodel).x__name__)) ((((xself).xfield).xname))))))))
                          (((unsupported)).apply ((xrel_obj)))
                x__set__.write
                  [xself xinstance xvalue]
                    memory > xremote_field
                    memory > xrelated
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).and ((((xisinstance)).apply ((xvalue)) (((((((xself).xfield).xremote_field).xmodel).x_meta).xconcrete_model))).not)).if
                          (((unsupported)).apply ((((xValueError)).apply (("Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance.".mod (((unsupported)).apply ((xvalue)) ((((xinstance).x_meta).xobject_name)) ((((xself).xfield).xname)) (((((((xself).xfield).xremote_field).xmodel).x_meta).xobject_name))))))))
                          (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                            seq
                              (((unsupported)).apply ((((xinstance).x_state).xdb)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((xinstance).x_state).xdb)) ((((unsupported)).apply (((xrouter).xdb_for_write)) (((xinstance).x__class__)) ((xvalue)))))
                              (((unsupported)).apply ((((xvalue).x_state).xdb)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((xvalue).x_state).xdb)) ((((unsupported)).apply (((xrouter).xdb_for_write)) (((xvalue).x__class__)) ((xinstance)))))
                              (((((xrouter).xallow_relation)).apply ((xvalue)) ((xinstance))).not).if
                                (((unsupported)).apply ((((xValueError)).apply (("Cannot assign \"%r\": the current database router prevents this relation.".mod (xvalue))))))
                        xremote_field.write (((xself).xfield).xremote_field)
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xrelated.write (((unsupported)).apply ((((xself).xfield).xget_cached_value)) ((xinstance)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xrelated)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xremote_field).xset_cached_value)).apply ((xrelated)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((unsupported)).apply ((xlh_field)) ((xrh_field)))) ((((xself).xfield).xrelated_fields)))
                              bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xlh_field).xattname)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((((unsupported)).apply ((xlh_field)) ((xrh_field)))) ((((xself).xfield).xrelated_fields)))
                            bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xlh_field).xattname)) ((((xgetattr)).apply ((xvalue)) (((xrh_field).xattname)))))
                        bogusForceDataize.write (((((xself).xfield).xset_cached_value)).apply ((xinstance)) ((xvalue)))
                        ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).and (((xremote_field).xmultiple).not)).if
                          bogusForceDataize.write ((((xremote_field).xset_cached_value)).apply ((xvalue)) ((xinstance)))
                x__reduce__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xgetattr)) ((((unsupported)).apply ((((xself).xfield).xmodel)) ((((xself).xfield).xname)))))))
            (((unsupported)).apply ((xForwardManyToOneDescriptor)))
              seq
                (((unsupported)).apply)
                xget_object.write
                  [xself xinstance]
                    memory > xfields
                    memory > xobj
                    memory > xdeferred
                    memory > xrel_model
                    memory > xkwargs
                    seq > @
                      seq
                        ((((xself).xfield).xremote_field).xparent_link).if
                          seq
                            xdeferred.write ((((xinstance).xget_deferred_fields)).apply)
                            xrel_model.write ((((xself).xfield).xremote_field).xmodel)
                            xfields.write (((unsupported)).apply (((xfield).xattname)) ((xfield)) ((((xrel_model).x_meta).xconcrete_fields)))
                            ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xfields)))) ((xfield)) ((xdeferred))))).not).if
                              seq
                                xkwargs.write (((unsupported)).apply ((xfield)) ((((xgetattr)).apply ((xinstance)) ((xfield)))) ((xfield)) ((xfields)))
                                xobj.write (((xrel_model)).apply ((((unsupported)).apply ((xkwargs)))))
                                (((unsupported)).apply ((((xobj).x_state).xadding)) ((((xinstance).x_state).xadding)))
                                (((unsupported)).apply ((((xobj).x_state).xdb)) ((((xinstance).x_state).xdb)))
                                (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_object)).apply ((xinstance)))))
                x__set__.write
                  [xself xinstance xvalue]
                    memory > xrel_model_pk_name
                    memory > xinherited_pk_fields
                    memory > xopts
                    memory > xraw_value
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__set__)).apply ((xinstance)) ((xvalue)))
                        ((((xself).xfield).xprimary_key).and ((((xself).xfield).xremote_field).xparent_link)).if
                          seq
                            xopts.write ((xinstance).x_meta)
                            xinherited_pk_fields.write (((unsupported)).apply ((xfield)) ((xfield)) (((xopts).xconcrete_fields)) ((((xfield).xprimary_key).and ((xfield).xremote_field))))
                            (((unsupported)).apply ((xfield)) ((xinherited_pk_fields)))
                              seq
                                xrel_model_pk_name.write ((((((xfield).xremote_field).xmodel).x_meta).xpk).xattname)
                                xraw_value.write ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if (((xgetattr)).apply ((xvalue)) ((xrel_model_pk_name))) "None: is there a None literal in the EO language?")
                                bogusForceDataize.write (((xsetattr)).apply ((xinstance)) ((xrel_model_pk_name)) ((xraw_value)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xrelated]
                    seq > @
                      (((unsupported)).apply (((xself).xrelated)) ((xrelated)))
                xRelatedObjectDoesNotExist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xtype)).apply ("RelatedObjectDoesNotExist") ((((unsupported)).apply (((((xself).xrelated).xrelated_model).xDoesNotExist)) ((xAttributeError)))) ((((unsupported)).apply ("__module__") (((((xself).xrelated).xmodel).x__module__)) ("__qualname__") (("%s.%s.RelatedObjectDoesNotExist".mod (((unsupported)).apply (((((xself).xrelated).xmodel).x__qualname__)) ((((xself).xrelated).xname))))))))))
                xis_cached.write
                  [xself xinstance]
                    seq > @
                      (((unsupported)).apply ((((((xself).xrelated).xis_cached)).apply ((xinstance)))))
                xget_queryset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply ((((((xself).xrelated).xrelated_model).x_base_manager).xdb_manager)) ((xhints))).xall)).apply)))
                xget_prefetch_queryset.write
                  [xself xinstances xqueryset]
                    memory > xrel_obj_attr
                    memory > xinstances_dict
                    memory > xinstance
                    memory > xinstance_attr
                    memory > xquery
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                          xqueryset.write ((((xself).xget_queryset)).apply)
                        (((unsupported)).apply (((xqueryset).x_add_hints)) ((((unsupported)).apply ((xinstances)) (0))))
                        xrel_obj_attr.write ((((xself).xrelated).xfield).xget_local_related_value)
                        xinstance_attr.write ((((xself).xrelated).xfield).xget_foreign_related_value)
                        xinstances_dict.write (((unsupported)).apply ((((xinstance_attr)).apply ((xinst)))) ((xinst)) ((xinst)) ((xinstances)))
                        xquery.write (((unsupported)).apply (("%s__in".mod ((((xself).xrelated).xfield).xname))) ((xinstances)))
                        xqueryset.write ((((xqueryset).xfilter)).apply ((((unsupported)).apply ((xquery)))))
                        (((unsupported)).apply ((xrel_obj)) ((xqueryset)))
                          seq
                            xinstance.write (((unsupported)).apply ((xinstances_dict)) ((((xrel_obj_attr)).apply ((xrel_obj)))))
                            bogusForceDataize.write ((((((xself).xrelated).xfield).xset_cached_value)).apply ((xrel_obj)) ((xinstance)))
                        (((unsupported)).apply ((((unsupported)).apply ((xqueryset)) ((xrel_obj_attr)) ((xinstance_attr)) (TRUE) ((((((xself).xrelated).xget_cache_name)).apply)) ((xfalse)))))
                x__get__.write
                  [xself xinstance xcls]
                    memory > xrel_obj
                    memory > xfilter_args
                    memory > xrelated_pk
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xKeyError)))
                          xrel_obj.write (((((xself).xrelated).xget_cached_value)).apply ((xinstance)))
                          seq
                            xrelated_pk.write ((xinstance).xpk)
                            (((unsupported)).apply ((xrelated_pk)) ("None: is there a None literal in the EO language?")).if
                              xrel_obj.write "None: is there a None literal in the EO language?"
                              seq
                                xfilter_args.write ((((((xself).xrelated).xfield).xget_forward_related_filter)).apply ((xinstance)))
                                (((unsupported)).apply (((((xself).xrelated).xrelated_model).xDoesNotExist)))
                                  xrel_obj.write ((((((unsupported)).apply (((xself).xget_queryset)) ((xinstance))).xget)).apply ((((unsupported)).apply ((xfilter_args)))))
                                  xrel_obj.write "None: is there a None literal in the EO language?"
                                  bogusForceDataize.write ((((((xself).xrelated).xfield).xset_cached_value)).apply ((xrel_obj)) ((xinstance)))
                            bogusForceDataize.write (((((xself).xrelated).xset_cached_value)).apply ((xinstance)) ((xrel_obj)))
                        (((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((((xself).xRelatedObjectDoesNotExist)).apply (("%s has no %s.".mod (((unsupported)).apply ((((xinstance).x__class__).x__name__)) ((((((xself).xrelated).xget_accessor_name)).apply))))))))
                          (((unsupported)).apply ((xrel_obj)))
                x__set__.write
                  [xself xinstance xvalue]
                    memory > xrel_obj
                    memory > xrelated_pk
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xrel_obj.write (((unsupported)).apply ((((xself).xrelated).xget_cached_value)) ((xinstance)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).if
                              seq
                                bogusForceDataize.write (((((xself).xrelated).xdelete_cached_value)).apply ((xinstance)))
                                bogusForceDataize.write (((xsetattr)).apply ((xrel_obj)) (((((xself).xrelated).xfield).xname)) ("None: is there a None literal in the EO language?"))
                          ((((xisinstance)).apply ((xvalue)) ((((xself).xrelated).xrelated_model))).not).if
                            (((unsupported)).apply ((((xValueError)).apply (("Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance.".mod (((unsupported)).apply ((xvalue)) ((((xinstance).x_meta).xobject_name)) ((((((xself).xrelated).xget_accessor_name)).apply)) ((((((xself).xrelated).xrelated_model).x_meta).xobject_name))))))))
                            seq
                              (((unsupported)).apply ((((xinstance).x_state).xdb)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((xinstance).x_state).xdb)) ((((unsupported)).apply (((xrouter).xdb_for_write)) (((xinstance).x__class__)) ((xvalue)))))
                              (((unsupported)).apply ((((xvalue).x_state).xdb)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((xvalue).x_state).xdb)) ((((unsupported)).apply (((xrouter).xdb_for_write)) (((xvalue).x__class__)) ((xinstance)))))
                              (((((xrouter).xallow_relation)).apply ((xvalue)) ((xinstance))).not).if
                                (((unsupported)).apply ((((xValueError)).apply (("Cannot assign \"%r\": the current database router prevents this relation.".mod (xvalue))))))
                              xrelated_pk.write (((xtuple)).apply ((((unsupported)).apply ((((xgetattr)).apply ((xinstance)) (((xfield).xattname)))) ((xfield)) (((((xself).xrelated).xfield).xforeign_related_fields)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xfield)))) ((((xenumerate)).apply (((((xself).xrelated).xfield).xlocal_related_fields)))))
                                bogusForceDataize.write (((xsetattr)).apply ((xvalue)) (((xfield).xattname)) ((((unsupported)).apply ((xrelated_pk)) ((xindex)))))
                              bogusForceDataize.write (((((xself).xrelated).xset_cached_value)).apply ((xinstance)) ((xvalue)))
                              bogusForceDataize.write ((((((xself).xrelated).xfield).xset_cached_value)).apply ((xvalue)) ((xinstance)))
                x__reduce__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xgetattr)) ((((unsupported)).apply ((((xself).xrelated).xmodel)) ((((xself).xrelated).xname)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xrel]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrel)) ((xrel)))
                        (((unsupported)).apply (((xself).xfield)) (((xrel).xfield)))
                xrelated_manager_cache_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xrel).xget_cache_name)).apply)))
                xrelated_manager_cls.write
                  [xself]
                    memory > xrelated_model
                    seq > @
                      (((unsupported)).apply)
                        xrelated_model.write (((xself).xrel).xrelated_model)
                        (((unsupported)).apply ((((xcreate_reverse_many_to_one_manager)).apply ((((xrelated_model).x_default_manager).x__class__)) (((xself).xrel)))))
                x__get__.write
                  [xself xinstance xcls]
                    memory > xinstance_cache
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        xkey.write ((xself).xrelated_manager_cache_key)
                        xinstance_cache.write (((xinstance).x_state).xrelated_managers_cache)
                        (((unsupported)).apply ((xkey)) ((xinstance_cache))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xinstance_cache)) ((xkey)))) (((((xself).xrelated_manager_cls)).apply ((xinstance)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xinstance_cache)) ((xkey)))))
                x_get_set_deprecation_msg_params.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("reverse side of a related set") ((((((xself).xrel).xget_accessor_name)).apply)))))
                x__set__.write
                  [xself xinstance xvalue]
                    seq > @
                      (((unsupported)).apply ((((xTypeError)).apply (("Direct assignment to the %s is prohibited. Use %s.set() instead.".mod ((((xself).x_get_set_deprecation_msg_params)).apply))))))
            xcreate_reverse_many_to_one_manager.write
              [xsuperclass xrel]
                memory > xget_prefetch_queryset
                memory > x__call__
                memory > xget_or_create
                memory > xset
                memory > x_apply_rel_filters
                memory > x_clear
                memory > xadd
                memory > xdo_not_call_in_templates
                memory > xcreate
                memory > x_remove_prefetched_objects
                memory > xremove
                memory > xupdate_or_create
                memory > xget_queryset
                memory > xclear
                memory > x_check_fk_val
                memory > x__init__
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xsuperclass)))
                      seq
                        x__init__.write
                          [xself xinstance]
                            seq > @
                              seq
                                bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                                (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                                (((unsupported)).apply (((xself).xmodel)) (((xrel).xrelated_model)))
                                (((unsupported)).apply (((xself).xfield)) (((xrel).xfield)))
                                (((unsupported)).apply (((xself).xcore_filters)) ((((unsupported)).apply ((((xself).xfield).xname)) ((xinstance)))))
                                (((unsupported)).apply ((((xself).xinstance).xpk)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((xValueError)).apply ("{instance.__class__.__name__!r} instance needs to have a primary key value before this relationship can be used."))))
                        x__call__.write
                          [xself xmanager]
                            memory > xmanager_class
                            seq > @
                              (((unsupported)).apply)
                                xmanager.write (((xgetattr)).apply (((xself).xmodel)) ((xmanager)))
                                xmanager_class.write (((xcreate_reverse_many_to_one_manager)).apply (((xmanager).x__class__)) ((xrel)))
                                (((unsupported)).apply ((((xmanager_class)).apply (((xself).xinstance)))))
                        xdo_not_call_in_templates.write TRUE
                        x_check_fk_val.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((xfield)) ((((xself).xfield).xforeign_related_fields)))
                                (((unsupported)).apply ((((xgetattr)).apply (((xself).xinstance)) (((xfield).xattname)))) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((xValueError)).apply ("\"{self.instance!r}\" needs to have a value for field \"{field.attname}\" before this relationship can be used."))))
                        x_apply_rel_filters.write
                          [xself xqueryset]
                            memory > xdb
                            memory > xtarget_field
                            memory > xrel_obj_id
                            memory > xval
                            memory > xempty_strings_as_null
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xdb.write (((xself).x_db).or (((unsupported)).apply (((xrouter).xdb_for_read)) (((xself).xmodel)) (((xself).xinstance))))
                                xempty_strings_as_null.write (((((unsupported)).apply ((xconnections)) ((xdb))).xfeatures).xinterprets_empty_strings_as_nulls)
                                (((unsupported)).apply (((xqueryset).x_add_hints)) (((xself).xinstance)))
                                ((xself).x_db).if
                                  xqueryset.write ((((xqueryset).xusing)).apply (((xself).x_db)))
                                (((unsupported)).apply (((xqueryset).x_defer_next_filter)) (TRUE))
                                xqueryset.write ((((xqueryset).xfilter)).apply ((((unsupported)).apply (((xself).xcore_filters)))))
                                (((unsupported)).apply ((xfield)) ((((xself).xfield).xforeign_related_fields)))
                                  seq
                                    xval.write (((xgetattr)).apply (((xself).xinstance)) (((xfield).xattname)))
                                    ((((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).or (((xval).eq "").and (xempty_strings_as_null))).if
                                      (((unsupported)).apply (((((xqueryset).xnone)).apply)))
                                (((xself).xfield).xmany_to_one).if
                                  seq
                                    (((unsupported)).apply ((xFieldError)))
                                      xtarget_field.write (((xself).xfield).xtarget_field)
                                      xrel_obj_id.write (((xtuple)).apply ((((unsupported)).apply ((((xgetattr)).apply (((xself).xinstance)) (((xtarget_field).xattname)))) ((xtarget_field)) (((((unsupported)).apply ((((xself).xfield).xpath_infos)) ((1.neg))).xtarget_fields)))))
                                      xrel_obj_id.write (((xgetattr)).apply (((xself).xinstance)) (((xtarget_field).xattname)))
                                    (((unsupported)).apply (((xqueryset).x_known_related_objects)) ((((unsupported)).apply (((xself).xfield)) ((((unsupported)).apply ((xrel_obj_id)) (((xself).xinstance)))))))
                                (((unsupported)).apply ((xqueryset)))
                        x_remove_prefetched_objects.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                bogusForceDataize.write ((((((xself).xinstance).x_prefetched_objects_cache).xpop)).apply (((((((xself).xfield).xremote_field).xget_cache_name)).apply)))
                        xget_queryset.write
                          [xself]
                            memory > xqueryset
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((xself).xinstance).x_prefetched_objects_cache)) (((((((xself).xfield).xremote_field).xget_cache_name)).apply)))))
                                seq
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                  (((unsupported)).apply (((((xself).x_apply_rel_filters)).apply ((xqueryset)))))
                        xget_prefetch_queryset.write
                          [xself xinstances xqueryset]
                            memory > xrel_obj_attr
                            memory > xcache_name
                            memory > xinstances_dict
                            memory > xinstance
                            memory > xinstance_attr
                            memory > xquery
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                (((unsupported)).apply (((xqueryset).x_add_hints)) ((((unsupported)).apply ((xinstances)) (0))))
                                xqueryset.write ((((xqueryset).xusing)).apply ((((xqueryset).x_db).or ((xself).x_db))))
                                xrel_obj_attr.write (((xself).xfield).xget_local_related_value)
                                xinstance_attr.write (((xself).xfield).xget_foreign_related_value)
                                xinstances_dict.write (((unsupported)).apply ((((xinstance_attr)).apply ((xinst)))) ((xinst)) ((xinst)) ((xinstances)))
                                xquery.write (((unsupported)).apply (("%s__in".mod (((xself).xfield).xname))) ((xinstances)))
                                xqueryset.write ((((xqueryset).xfilter)).apply ((((unsupported)).apply ((xquery)))))
                                (((unsupported)).apply ((xrel_obj)) ((xqueryset)))
                                  ((((((xself).xfield).xis_cached)).apply ((xrel_obj))).not).if
                                    seq
                                      xinstance.write (((unsupported)).apply ((xinstances_dict)) ((((xrel_obj_attr)).apply ((xrel_obj)))))
                                      bogusForceDataize.write (((xsetattr)).apply ((xrel_obj)) ((((xself).xfield).xname)) ((xinstance)))
                                xcache_name.write ((((((xself).xfield).xremote_field).xget_cache_name)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xqueryset)) ((xrel_obj_attr)) ((xinstance_attr)) ((xfalse)) ((xcache_name)) ((xfalse)))))
                        xadd.write
                          [xself xbulk]
                            memory > xpks
                            memory > xdb
                            memory > xcheck_and_update_obj
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                xcheck_and_update_obj.write
                                  [xobj]
                                    seq > @
                                      seq
                                        ((((xisinstance)).apply ((xobj)) (((xself).xmodel))).not).if
                                          (((unsupported)).apply ((((xTypeError)).apply (("'%s' instance expected, got %r".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) ((xobj))))))))
                                        bogusForceDataize.write (((xsetattr)).apply ((xobj)) ((((xself).xfield).xname)) (((xself).xinstance)))
                                (xbulk).if
                                  seq
                                    xpks.write (((unsupported)).apply)
                                    (((unsupported)).apply ((xobj)) ((xobjs)))
                                      seq
                                        bogusForceDataize.write (((xcheck_and_update_obj)).apply ((xobj)))
                                        ((((xobj).x_state).xadding).or ((((xobj).x_state).xdb).neq (xdb))).if
                                          (((unsupported)).apply ((((xValueError)).apply (("%r instance isn't saved. Use bulk=false or save the object first.".mod (xobj))))))
                                        bogusForceDataize.write ((((xpks).xappend)).apply (((xobj).xpk)))
                                    bogusForceDataize.write ((((((unsupported)).apply ((((((((xself).xmodel).x_base_manager).xusing)).apply ((xdb))).xfilter)) ((xpks))).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xfield).xname)) (((xself).xinstance)))))))
                                  (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                    (((unsupported)).apply ((xobj)) ((xobjs)))
                                      seq
                                        bogusForceDataize.write (((xcheck_and_update_obj)).apply ((xobj)))
                                        bogusForceDataize.write ((((xobj).xsave)).apply)
                        (((unsupported)).apply (((xadd).xalters_data)) (TRUE))
                        xcreate.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((((xself).xfield).xname)))) (((xself).xinstance)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply (((((((xsuper)).apply ((xRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xcreate)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xcreate).xalters_data)) (TRUE))
                        xget_or_create.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((((xself).xfield).xname)))) (((xself).xinstance)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply (((((((xsuper)).apply ((xRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xget_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xget_or_create).xalters_data)) (TRUE))
                        xupdate_or_create.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((((xself).xfield).xname)))) (((xself).xinstance)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply (((((((xsuper)).apply ((xRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xupdate_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xupdate_or_create).xalters_data)) (TRUE))
                        (((xrel).xfield).xnull).if
                          seq
                            xremove.write
                              [xself xbulk]
                                memory > xval
                                memory > xold_ids
                                seq > @
                                  (((unsupported)).apply)
                                    ((xobjs).not).if
                                      (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                    xval.write (((((xself).xfield).xget_foreign_related_value)).apply (((xself).xinstance)))
                                    xold_ids.write (((xset)).apply)
                                    (((unsupported)).apply ((xobj)) ((xobjs)))
                                      seq
                                        ((((xisinstance)).apply ((xobj)) (((xself).xmodel))).not).if
                                          (((unsupported)).apply ((((xTypeError)).apply (("'%s' instance expected, got %r".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) ((xobj))))))))
                                        ((((((xself).xfield).xget_local_related_value)).apply ((xobj))).eq (xval)).if
                                          bogusForceDataize.write ((((xold_ids).xadd)).apply (((xobj).xpk)))
                                          (((unsupported)).apply ((((((((xself).xfield).xremote_field).xmodel).xDoesNotExist)).apply (("%r is not related to %r.".mod (((unsupported)).apply ((xobj)) (((xself).xinstance))))))))
                                    bogusForceDataize.write ((((xself).x_clear)).apply ((((unsupported)).apply (((xself).xfilter)) ((xold_ids)))) ((xbulk)))
                            (((unsupported)).apply (((xremove).xalters_data)) (TRUE))
                            xclear.write
                              [xself xbulk]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                    bogusForceDataize.write ((((xself).x_clear)).apply ((xself)) ((xbulk)))
                            (((unsupported)).apply (((xclear).xalters_data)) (TRUE))
                            x_clear.write
                              [xself xqueryset xbulk]
                                memory > xdb
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                    xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                    xqueryset.write ((((xqueryset).xusing)).apply ((xdb)))
                                    (xbulk).if
                                      bogusForceDataize.write ((((xqueryset).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xfield).xname)) ("None: is there a None literal in the EO language?"))))))
                                      (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                        (((unsupported)).apply ((xobj)) ((xqueryset)))
                                          seq
                                            bogusForceDataize.write (((xsetattr)).apply ((xobj)) ((((xself).xfield).xname)) ("None: is there a None literal in the EO language?"))
                                            (((unsupported)).apply (((xobj).xsave)) ((((unsupported)).apply ((((xself).xfield).xname)))))
                            (((unsupported)).apply (((x_clear).xalters_data)) (TRUE))
                        xset.write
                          [xself xobjs xbulk xclear]
                            memory > xdb
                            memory > xold_objs
                            memory > xnew_objs
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_check_fk_val)).apply)
                                xobjs.write (((xtuple)).apply ((xobjs)))
                                (((xself).xfield).xnull).if
                                  seq
                                    xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                    (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                      (xclear).if
                                        seq
                                          (((unsupported)).apply (((xself).xclear)) ((xbulk)))
                                          (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xobjs)))) ((xbulk)))
                                        seq
                                          xold_objs.write (((xset)).apply ((((((((xself).xusing)).apply ((xdb))).xall)).apply)))
                                          xnew_objs.write (((unsupported)).apply)
                                          (((unsupported)).apply ((xobj)) ((xobjs)))
                                            (((unsupported)).apply ((xobj)) ((xold_objs))).if
                                              bogusForceDataize.write ((((xold_objs).xremove)).apply ((xobj)))
                                              bogusForceDataize.write ((((xnew_objs).xappend)).apply ((xobj)))
                                          (((unsupported)).apply (((xself).xremove)) ((((unsupported)).apply ((xold_objs)))) ((xbulk)))
                                          (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xnew_objs)))) ((xbulk)))
                                  (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xobjs)))) ((xbulk)))
                        (((unsupported)).apply (((xset).xalters_data)) (TRUE))
                    (((unsupported)).apply ((xRelatedManager)))
            (((unsupported)).apply ((xReverseManyToOneDescriptor)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xrel xreverse]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xrel)))
                        (((unsupported)).apply (((xself).xreverse)) ((xreverse)))
                xthrough.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xrel).xthrough)))
                xrelated_manager_cls.write
                  [xself]
                    memory > xrelated_model
                    seq > @
                      (((unsupported)).apply)
                        xrelated_model.write (((xself).xreverse).if (((xself).xrel).xrelated_model) (((xself).xrel).xmodel))
                        (((unsupported)).apply ((((unsupported)).apply ((xcreate_forward_many_to_many_manager)) ((((xrelated_model).x_default_manager).x__class__)) (((xself).xrel)) (((xself).xreverse)))))
                xrelated_manager_cache_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((xself).xreverse).if
                          (((unsupported)).apply ((((((xself).xrel).xget_cache_name)).apply)))
                          (((unsupported)).apply ((((((xself).xfield).xget_cache_name)).apply)))
                x_get_set_deprecation_msg_params.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (("%s side of a many-to-many set".mod (((xself).xreverse).if "reverse" "forward"))) ((((xself).xreverse).if (((((xself).xrel).xget_accessor_name)).apply) (((xself).xfield).xname))))))
            xcreate_forward_many_to_many_manager.write
              [xsuperclass xrel xreverse]
                memory > xget_prefetch_queryset
                memory > xget_or_create
                memory > x_get_target_ids
                memory > x_get_add_plan
                memory > x_build_remove_filters
                memory > xset
                memory > x_apply_rel_filters
                memory > x_remove_items
                memory > x__init__
                memory > xadd
                memory > xdo_not_call_in_templates
                memory > x_remove_prefetched_objects
                memory > xremove
                memory > x__call__
                memory > x_add_items
                memory > xupdate_or_create
                memory > xget_queryset
                memory > xclear
                memory > xcreate
                memory > x_get_missing_target_ids
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xsuperclass)))
                      seq
                        x__init__.write
                          [xself xinstance]
                            memory > xcore_filter_key
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                                (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                                ((xreverse).not).if
                                  seq
                                    (((unsupported)).apply (((xself).xmodel)) (((xrel).xmodel)))
                                    (((unsupported)).apply (((xself).xquery_field_name)) ((((((xrel).xfield).xrelated_query_name)).apply)))
                                    (((unsupported)).apply (((xself).xprefetch_cache_name)) ((((xrel).xfield).xname)))
                                    (((unsupported)).apply (((xself).xsource_field_name)) ((((((xrel).xfield).xm2m_field_name)).apply)))
                                    (((unsupported)).apply (((xself).xtarget_field_name)) ((((((xrel).xfield).xm2m_reverse_field_name)).apply)))
                                    (((unsupported)).apply (((xself).xsymmetrical)) (((xrel).xsymmetrical)))
                                  seq
                                    (((unsupported)).apply (((xself).xmodel)) (((xrel).xrelated_model)))
                                    (((unsupported)).apply (((xself).xquery_field_name)) ((((xrel).xfield).xname)))
                                    (((unsupported)).apply (((xself).xprefetch_cache_name)) ((((((xrel).xfield).xrelated_query_name)).apply)))
                                    (((unsupported)).apply (((xself).xsource_field_name)) ((((((xrel).xfield).xm2m_reverse_field_name)).apply)))
                                    (((unsupported)).apply (((xself).xtarget_field_name)) ((((((xrel).xfield).xm2m_field_name)).apply)))
                                    (((unsupported)).apply (((xself).xsymmetrical)) ((xfalse)))
                                (((unsupported)).apply (((xself).xthrough)) (((xrel).xthrough)))
                                (((unsupported)).apply (((xself).xreverse)) ((xreverse)))
                                (((unsupported)).apply (((xself).xsource_field)) (((((((xself).xthrough).x_meta).xget_field)).apply (((xself).xsource_field_name)))))
                                (((unsupported)).apply (((xself).xtarget_field)) (((((((xself).xthrough).x_meta).xget_field)).apply (((xself).xtarget_field_name)))))
                                (((unsupported)).apply (((xself).xcore_filters)) ((((unsupported)).apply)))
                                (((unsupported)).apply (((xself).xpk_field_names)) ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xlh_field)) ((xrh_field)))) ((((xself).xsource_field).xrelated_fields)))
                                  seq
                                    xcore_filter_key.write ("%s__%s".mod (((unsupported)).apply (((xself).xquery_field_name)) (((xrh_field).xname))))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xcore_filters)) ((xcore_filter_key)))) ((((xgetattr)).apply ((xinstance)) (((xrh_field).xattname)))))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xpk_field_names)) (((xlh_field).xname)))) (((xrh_field).xname)))
                                (((unsupported)).apply (((xself).xrelated_val)) ((((((xself).xsource_field).xget_foreign_related_value)).apply ((xinstance)))))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?") (((xself).xrelated_val))).if
                                  (((unsupported)).apply ((((xValueError)).apply (("\"%r\" needs to have a value for field \"%s\" before this many-to-many relationship can be used.".mod (((unsupported)).apply ((xinstance)) ((((unsupported)).apply (((xself).xpk_field_names)) (((xself).xsource_field_name))))))))))
                                (((unsupported)).apply (((xinstance).xpk)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((xValueError)).apply (("%r instance needs to have a primary key value before a many-to-many relationship can be used.".mod (((xinstance).x__class__).x__name__))))))
                        x__call__.write
                          [xself xmanager]
                            memory > xmanager_class
                            seq > @
                              (((unsupported)).apply)
                                xmanager.write (((xgetattr)).apply (((xself).xmodel)) ((xmanager)))
                                xmanager_class.write (((xcreate_forward_many_to_many_manager)).apply (((xmanager).x__class__)) ((xrel)) ((xreverse)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmanager_class)) (((xself).xinstance)))))
                        xdo_not_call_in_templates.write TRUE
                        x_build_remove_filters.write
                          [xself xremoved_vals]
                            memory > xremoved_vals_filters
                            memory > xfilters
                            memory > xsymmetrical_filters
                            seq > @
                              seq
                                xfilters.write (((xQ)).apply ((((unsupported)).apply (((xself).xsource_field_name)) (((xself).xrelated_val)))))
                                xremoved_vals_filters.write (((((xisinstance)).apply ((xremoved_vals)) ((xQuerySet))).not).or ((((xremoved_vals).x_has_filters)).apply))
                                (xremoved_vals_filters).if
                                  (((unsupported)).apply ((xfilters)) ((((xQ)).apply ((((unsupported)).apply ("{self.target_field_name}__in") ((xremoved_vals)))))))
                                ((xself).xsymmetrical).if
                                  seq
                                    xsymmetrical_filters.write (((xQ)).apply ((((unsupported)).apply (((xself).xtarget_field_name)) (((xself).xrelated_val)))))
                                    (xremoved_vals_filters).if
                                      (((unsupported)).apply ((xsymmetrical_filters)) ((((xQ)).apply ((((unsupported)).apply ("{self.source_field_name}__in") ((xremoved_vals)))))))
                                    (((unsupported)).apply ((xfilters)) ((xsymmetrical_filters)))
                                (((unsupported)).apply ((xfilters)))
                        x_apply_rel_filters.write
                          [xself xqueryset]
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply (((xqueryset).x_add_hints)) (((xself).xinstance)))
                                ((xself).x_db).if
                                  xqueryset.write ((((xqueryset).xusing)).apply (((xself).x_db)))
                                (((unsupported)).apply (((xqueryset).x_defer_next_filter)) (TRUE))
                                (((unsupported)).apply ((((((((xqueryset).x_next_is_sticky)).apply).xfilter)).apply ((((unsupported)).apply (((xself).xcore_filters)))))))
                        x_remove_prefetched_objects.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                bogusForceDataize.write ((((((xself).xinstance).x_prefetched_objects_cache).xpop)).apply (((xself).xprefetch_cache_name)))
                        xget_queryset.write
                          [xself]
                            memory > xqueryset
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((xself).xinstance).x_prefetched_objects_cache)) (((xself).xprefetch_cache_name)))))
                                seq
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                  (((unsupported)).apply (((((xself).x_apply_rel_filters)).apply ((xqueryset)))))
                        xget_prefetch_queryset.write
                          [xself xinstances xqueryset]
                            memory > xfk
                            memory > xjoin_table
                            memory > xconnection
                            memory > xquery
                            memory > xqn
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                (((unsupported)).apply (((xqueryset).x_add_hints)) ((((unsupported)).apply ((xinstances)) (0))))
                                xqueryset.write ((((xqueryset).xusing)).apply ((((xqueryset).x_db).or ((xself).x_db))))
                                xquery.write (((unsupported)).apply (("%s__in".mod ((xself).xquery_field_name))) ((xinstances)))
                                xqueryset.write (((((((xqueryset).x_next_is_sticky)).apply).xfilter)).apply ((((unsupported)).apply ((xquery)))))
                                xfk.write ((((((xself).xthrough).x_meta).xget_field)).apply (((xself).xsource_field_name)))
                                xjoin_table.write ((((xfk).xmodel).x_meta).xdb_table)
                                xconnection.write (((unsupported)).apply ((xconnections)) (((xqueryset).xdb)))
                                xqn.write (((xconnection).xops).xquote_name)
                                xqueryset.write (((unsupported)).apply (((xqueryset).xextra)) ((((unsupported)).apply (("_prefetch_related_val_%s".mod ((xf).xattname))) (("%s.%s".mod (((unsupported)).apply ((((xqn)).apply ((xjoin_table)))) ((((xqn)).apply (((xf).xcolumn))))))) ((xf)) (((xfk).xlocal_related_fields)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xqueryset)) ((((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xgetattr)).apply ((xresult)) (("_prefetch_related_val_%s".mod ((xf).xattname))))) ((xf)) (((xfk).xlocal_related_fields)))))))) ((((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply (((((xf).xget_db_prep_value)).apply ((((xgetattr)).apply ((xinst)) (((xf).xattname)))) ((xconnection)))) ((xf)) (((xfk).xforeign_related_fields)))))))) ((xfalse)) (((xself).xprefetch_cache_name)) ((xfalse)))))
                        xadd.write
                          [xself xthrough_defaults]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xthrough)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                  seq
                                    (((unsupported)).apply (((xself).x_add_items)) (((xself).xsource_field_name)) (((xself).xtarget_field_name)) ((((unsupported)).apply ((xobjs)))) ((xthrough_defaults)))
                                    ((xself).xsymmetrical).if
                                      (((unsupported)).apply (((xself).x_add_items)) (((xself).xtarget_field_name)) (((xself).xsource_field_name)) ((((unsupported)).apply ((xobjs)))) ((xthrough_defaults)))
                        (((unsupported)).apply (((xadd).xalters_data)) (TRUE))
                        xremove.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                bogusForceDataize.write ((((xself).x_remove_items)).apply (((xself).xsource_field_name)) (((xself).xtarget_field_name)) ((((unsupported)).apply ((xobjs)))))
                        (((unsupported)).apply (((xremove).xalters_data)) (TRUE))
                        xclear.write
                          [xself]
                            memory > xdb
                            memory > xfilters
                            seq > @
                              seq
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xthrough)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                  seq
                                    (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("pre_clear") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ("None: is there a None literal in the EO language?") ((xdb)))
                                    bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                    xfilters.write ((((xself).x_build_remove_filters)).apply ((((((((((xsuper)).apply).xget_queryset)).apply).xusing)).apply ((xdb)))))
                                    bogusForceDataize.write ((((((((((((xself).xthrough).x_default_manager).xusing)).apply ((xdb))).xfilter)).apply ((xfilters))).xdelete)).apply)
                                    (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("post_clear") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ("None: is there a None literal in the EO language?") ((xdb)))
                        (((unsupported)).apply (((xclear).xalters_data)) (TRUE))
                        xset.write
                          [xself xobjs xclear xthrough_defaults]
                            memory > xdb
                            memory > xold_ids
                            memory > xfk_val
                            memory > xnew_objs
                            seq > @
                              (((unsupported)).apply)
                                xobjs.write (((xtuple)).apply ((xobjs)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xthrough)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                  (xclear).if
                                    seq
                                      bogusForceDataize.write ((((xself).xclear)).apply)
                                      (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xobjs)))) ((xthrough_defaults)))
                                    seq
                                      xold_ids.write (((xset)).apply ((((unsupported)).apply ((((((xself).xusing)).apply ((xdb))).xvalues_list)) (((((xself).xtarget_field).xtarget_field).xattname)) (TRUE))))
                                      xnew_objs.write (((unsupported)).apply)
                                      (((unsupported)).apply ((xobj)) ((xobjs)))
                                        seq
                                          xfk_val.write ((((xisinstance)).apply ((xobj)) (((xself).xmodel))).if (((unsupported)).apply ((((((xself).xtarget_field).xget_foreign_related_value)).apply ((xobj)))) (0)) (((((xself).xtarget_field).xget_prep_value)).apply ((xobj))))
                                          (((unsupported)).apply ((xfk_val)) ((xold_ids))).if
                                            bogusForceDataize.write ((((xold_ids).xremove)).apply ((xfk_val)))
                                            bogusForceDataize.write ((((xnew_objs).xappend)).apply ((xobj)))
                                      bogusForceDataize.write ((((xself).xremove)).apply ((((unsupported)).apply ((xold_ids)))))
                                      (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xnew_objs)))) ((xthrough_defaults)))
                        (((unsupported)).apply (((xset).xalters_data)) (TRUE))
                        xcreate.write
                          [xself xthrough_defaults]
                            memory > xdb
                            memory > xnew_obj
                            seq > @
                              (((unsupported)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) ((((xself).xinstance).x__class__)) (((xself).xinstance)))
                                xnew_obj.write ((((((xsuper)).apply ((xManyRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xcreate)).apply ((((unsupported)).apply ((xkwargs)))))
                                (((unsupported)).apply (((xself).xadd)) ((xnew_obj)) ((xthrough_defaults)))
                                (((unsupported)).apply ((xnew_obj)))
                        (((unsupported)).apply (((xcreate).xalters_data)) (TRUE))
                        xget_or_create.write
                          [xself xthrough_defaults]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) ((((xself).xinstance).x__class__)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcreated)))) (((((((xsuper)).apply ((xManyRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xget_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                                (xcreated).if
                                  (((unsupported)).apply (((xself).xadd)) ((xobj)) ((xthrough_defaults)))
                                (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcreated)))))
                        (((unsupported)).apply (((xget_or_create).xalters_data)) (TRUE))
                        xupdate_or_create.write
                          [xself xthrough_defaults]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) ((((xself).xinstance).x__class__)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcreated)))) (((((((xsuper)).apply ((xManyRelatedManager)) (((((xself).xdb_manager)).apply ((xdb))))).xupdate_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                                (xcreated).if
                                  (((unsupported)).apply (((xself).xadd)) ((xobj)) ((xthrough_defaults)))
                                (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcreated)))))
                        (((unsupported)).apply (((xupdate_or_create).xalters_data)) (TRUE))
                        x_get_target_ids.write
                          [xself xtarget_field_name xobjs]
                            memory > xtarget_id
                            memory > xtarget_field
                            memory > xtarget_ids
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                                xtarget_ids.write (((xset)).apply)
                                xtarget_field.write ((((((xself).xthrough).x_meta).xget_field)).apply ((xtarget_field_name)))
                                (((unsupported)).apply ((xobj)) ((xobjs)))
                                  (((xisinstance)).apply ((xobj)) (((xself).xmodel))).if
                                    seq
                                      (((((xrouter).xallow_relation)).apply ((xobj)) (((xself).xinstance))).not).if
                                        (((unsupported)).apply ((((xValueError)).apply (("Cannot add \"%r\": instance is on database \"%s\", value is on database \"%s\"".mod (((unsupported)).apply ((xobj)) (((((xself).xinstance).x_state).xdb)) ((((xobj).x_state).xdb))))))))
                                      xtarget_id.write (((unsupported)).apply (((((xtarget_field).xget_foreign_related_value)).apply ((xobj)))) (0))
                                      (((unsupported)).apply ((xtarget_id)) ("None: is there a None literal in the EO language?")).if
                                        (((unsupported)).apply ((((xValueError)).apply (("Cannot add \"%r\": the value for field \"%s\" is None".mod (((unsupported)).apply ((xobj)) ((xtarget_field_name))))))))
                                      bogusForceDataize.write ((((xtarget_ids).xadd)).apply ((xtarget_id)))
                                    (((xisinstance)).apply ((xobj)) ((xModel))).if
                                      (((unsupported)).apply ((((xTypeError)).apply (("'%s' instance expected, got %r".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) ((xobj))))))))
                                      bogusForceDataize.write ((((xtarget_ids).xadd)).apply (((((xtarget_field).xget_prep_value)).apply ((xobj)))))
                                (((unsupported)).apply ((xtarget_ids)))
                        x_get_missing_target_ids.write
                          [xself xsource_field_name xtarget_field_name xdb xtarget_ids]
                            memory > xvals
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xvals.write ((((((unsupported)).apply ((((((((xself).xthrough).x_default_manager).xusing)).apply ((xdb))).xvalues_list)) ((xtarget_field_name)) (TRUE)).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsource_field_name)) ((((unsupported)).apply (((xself).xrelated_val)) (0))) (("%s__in".mod (xtarget_field_name))) ((xtarget_ids)))))))
                                (((unsupported)).apply (((((xtarget_ids).xdifference)).apply ((xvals)))))
                        x_get_add_plan.write
                          [xself xdb xsource_field_name]
                            memory > xmust_send_signals
                            memory > xcan_ignore_conflicts
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xcan_ignore_conflicts.write ((((unsupported)).apply (((((xself).xthrough).x_meta).xauto_created)) ((xfalse))).and (((((unsupported)).apply ((xconnections)) ((xdb))).xfeatures).xsupports_ignore_conflicts))
                                xmust_send_signals.write ((((xself).xreverse).or ((xsource_field_name).eq ((xself).xsource_field_name))).and (((((xsignals).xm2m_changed).xhas_listeners)).apply (((xself).xthrough))))
                                (((unsupported)).apply ((((unsupported)).apply ((xcan_ignore_conflicts)) ((xmust_send_signals)) (((xcan_ignore_conflicts).and ((xmust_send_signals).not))))))
                        x_add_items.write
                          [xself xsource_field_name xtarget_field_name xthrough_defaults]
                            memory > xdb
                            memory > xmissing_target_ids
                            memory > xtarget_ids
                            seq > @
                              (((unsupported)).apply)
                                ((xobjs).not).if
                                  (((unsupported)).apply)
                                xthrough_defaults.write (((xdict)).apply ((((xresolve_callables)).apply (((xthrough_defaults).or (((unsupported)).apply))))))
                                xtarget_ids.write ((((xself).x_get_target_ids)).apply ((xtarget_field_name)) ((xobjs)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xthrough)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply ((xcan_ignore_conflicts)) ((xmust_send_signals)) ((xcan_fast_add)))) (((((xself).x_get_add_plan)).apply ((xdb)) ((xsource_field_name)))))
                                (xcan_fast_add).if
                                  seq
                                    (((unsupported)).apply ((((((((xself).xthrough).x_default_manager).xusing)).apply ((xdb))).xbulk_create)) ((((unsupported)).apply (((((xself).xthrough)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s_id".mod (xsource_field_name))) ((((unsupported)).apply (((xself).xrelated_val)) (0))) (("%s_id".mod (xtarget_field_name))) ((xtarget_id)))))))) ((xtarget_id)) ((xtarget_ids)))) (TRUE))
                                    (((unsupported)).apply)
                                xmissing_target_ids.write ((((xself).x_get_missing_target_ids)).apply ((xsource_field_name)) ((xtarget_field_name)) ((xdb)) ((xtarget_ids)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                  seq
                                    (xmust_send_signals).if
                                      (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("pre_add") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ((xmissing_target_ids)) ((xdb)))
                                    (((unsupported)).apply ((((((((xself).xthrough).x_default_manager).xusing)).apply ((xdb))).xbulk_create)) ((((unsupported)).apply (((((xself).xthrough)).apply ((((unsupported)).apply ((xthrough_defaults)))) ((((unsupported)).apply ((((unsupported)).apply (("%s_id".mod (xsource_field_name))) ((((unsupported)).apply (((xself).xrelated_val)) (0))) (("%s_id".mod (xtarget_field_name))) ((xtarget_id)))))))) ((xtarget_id)) ((xmissing_target_ids)))) ((xcan_ignore_conflicts)))
                                    (xmust_send_signals).if
                                      (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("post_add") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ((xmissing_target_ids)) ((xdb)))
                        x_remove_items.write
                          [xself xsource_field_name xtarget_field_name]
                            memory > xold_ids
                            memory > xfk_val
                            memory > xold_vals
                            memory > xtarget_model_qs
                            memory > xfilters
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                ((xobjs).not).if
                                  (((unsupported)).apply)
                                xold_ids.write (((xset)).apply)
                                (((unsupported)).apply ((xobj)) ((xobjs)))
                                  (((xisinstance)).apply ((xobj)) (((xself).xmodel))).if
                                    seq
                                      xfk_val.write (((unsupported)).apply ((((((xself).xtarget_field).xget_foreign_related_value)).apply ((xobj)))) (0))
                                      bogusForceDataize.write ((((xold_ids).xadd)).apply ((xfk_val)))
                                    bogusForceDataize.write ((((xold_ids).xadd)).apply ((xobj)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xthrough)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) ((xfalse)))))
                                  seq
                                    (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("pre_remove") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ((xold_ids)) ((xdb)))
                                    xtarget_model_qs.write ((((((xsuper)).apply).xget_queryset)).apply)
                                    ((((xtarget_model_qs).x_has_filters)).apply).if
                                      xold_vals.write (((((((xtarget_model_qs).xusing)).apply ((xdb))).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__in".mod ((((xself).xtarget_field).xtarget_field).xattname))) ((xold_ids)))))))
                                      xold_vals.write (xold_ids)
                                    xfilters.write ((((xself).x_build_remove_filters)).apply ((xold_vals)))
                                    bogusForceDataize.write ((((((((((((xself).xthrough).x_default_manager).xusing)).apply ((xdb))).xfilter)).apply ((xfilters))).xdelete)).apply)
                                    (((unsupported)).apply ((((xsignals).xm2m_changed).xsend)) (((xself).xthrough)) ("post_remove") (((xself).xinstance)) (((xself).xreverse)) (((xself).xmodel)) ((xold_ids)) ((xdb)))
                    (((unsupported)).apply ((xManyRelatedManager)))