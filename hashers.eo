memory > xImportError
memory > xb64salt
memory > xwarnings
memory > xRANDOM_STRING_CHARS
memory > xNotImplementedError
memory > xhasher_path
memory > xhashlib
memory > xe
memory > xname
memory > xhash
memory > xImproperlyConfigured
memory > xTypeError
memory > xdata
memory > xconstant_time_compare
memory > xlist
memory > ximportlib
memory > xempty
memory > xValueError
memory > xmd5
memory > ximport_string
memory > xstr
memory > xrest
memory > xmath
memory > xKeyError
memory > xhasher
memory > xbinascii
memory > xhash_
memory > xalgostr
memory > xtype
memory > xint
memory > xget_random_string
memory > xsettings
memory > xbase64
memory > xBasePasswordHasher
memory > xhasattr
memory > xvariety
memory > xbytes
memory > xtuple
memory > xBCryptSHA256PasswordHasher
memory > xgetattr
memory > xpbkdf2
memory > xPBKDF2PasswordHasher
memory > xisinstance
memory > xlen
[] > hashers
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmaxmem
        memory > xreset_hashers
        memory > xsalt
        memory > x_
        memory > xmust_update
        memory > xencode
        memory > xsafe_summary
        memory > xparams
        memory > xis_password_usable
        memory > xget_hashers
        memory > xget_hasher
        memory > xmask_hash
        memory > xiterations
        memory > xblock_size
        memory > xget_hashers_by_algorithm
        memory > xlibrary
        memory > xUNUSABLE_PASSWORD_SUFFIX_LENGTH
        memory > xidentify_hasher
        memory > xverify
        memory > xcheck_password
        memory > xrounds
        memory > xmemory_cost
        memory > xharden_runtime
        memory > xwork_factor
        memory > xdigest
        memory > xdecode
        memory > x_check_encode_args
        memory > xUNUSABLE_PASSWORD_PREFIX
        memory > xparallelism
        memory > xalgorithm
        memory > xsalt_entropy
        memory > xmust_update_salt
        memory > xmake_password
        memory > xtime_cost
        memory > x_load_library
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xUNUSABLE_PASSWORD_PREFIX.write "!"
            xUNUSABLE_PASSWORD_SUFFIX_LENGTH.write 40
            xis_password_usable.write
              [xencoded]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((unsupported)).apply ((xencoded)) ("None: is there a None literal in the EO language?")).or (((((xencoded).xstartswith)).apply ((xUNUSABLE_PASSWORD_PREFIX))).not))))
            xcheck_password.write
              [xpassword xencoded xsetter xpreferred]
                memory > xhasher
                memory > xmust_update
                memory > xis_correct
                memory > xhasher_changed
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((((unsupported)).apply ((xpassword)) ("None: is there a None literal in the EO language?")).or ((((xis_password_usable)).apply ((xencoded))).not)).if
                      (((unsupported)).apply (FALSE))
                    xpreferred.write (((xget_hasher)).apply ((xpreferred)))
                    (((unsupported)).apply ((xValueError)))
                      xhasher.write (((xidentify_hasher)).apply ((xencoded)))
                      (((unsupported)).apply (FALSE))
                    xhasher_changed.write (((xhasher).xalgorithm).neq ((xpreferred).xalgorithm))
                    xmust_update.write ((xhasher_changed).or ((((xpreferred).xmust_update)).apply ((xencoded))))
                    xis_correct.write ((((xhasher).xverify)).apply ((xpassword)) ((xencoded)))
                    ((((xis_correct).not).and ((xhasher_changed).not)).and (xmust_update)).if
                      bogusForceDataize.write ((((xhasher).xharden_runtime)).apply ((xpassword)) ((xencoded)))
                    (((xsetter).and (xis_correct)).and (xmust_update)).if
                      bogusForceDataize.write (((xsetter)).apply ((xpassword)))
                    (((unsupported)).apply ((xis_correct)))
            xmake_password.write
              [xpassword xsalt xhasher]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xpassword)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply (((xUNUSABLE_PASSWORD_PREFIX).add (((xget_random_string)).apply ((xUNUSABLE_PASSWORD_SUFFIX_LENGTH))))))
                    ((((xisinstance)).apply ((xpassword)) ((((unsupported)).apply ((xbytes)) ((xstr))))).not).if
                      (((unsupported)).apply ((((xTypeError)).apply (("Password must be a string or bytes, got %s.".mod ((((xtype)).apply ((xpassword))).x__qualname__))))))
                    xhasher.write (((xget_hasher)).apply ((xhasher)))
                    xsalt.write ((xsalt).or ((((xhasher).xsalt)).apply))
                    (((unsupported)).apply (((((xhasher).xencode)).apply ((xpassword)) ((xsalt)))))
            xget_hashers.write
              []
                memory > xhasher
                memory > xhashers
                memory > xhasher_cls
                seq > @
                  (((unsupported)).apply)
                    xhashers.write (((unsupported)).apply)
                    (((unsupported)).apply ((xhasher_path)) (((xsettings).xPASSWORD_HASHERS)))
                      seq
                        xhasher_cls.write (((ximport_string)).apply ((xhasher_path)))
                        xhasher.write (((xhasher_cls)).apply)
                        ((((xgetattr)).apply ((xhasher)) ("algorithm")).not).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("hasher doesn't specify an algorithm name: %s".mod (xhasher_path))))))
                        bogusForceDataize.write ((((xhashers).xappend)).apply ((xhasher)))
                    (((unsupported)).apply ((xhashers)))
            xget_hashers_by_algorithm.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply (((xhasher).xalgorithm)) ((xhasher)) ((xhasher)) ((((xget_hashers)).apply)))))
            xreset_hashers.write
              [xsetting]
                seq > @
                  (((unsupported)).apply)
                    ((xsetting).eq "PASSWORD_HASHERS").if
                      seq
                        bogusForceDataize.write ((((xget_hashers).xcache_clear)).apply)
                        bogusForceDataize.write ((((xget_hashers_by_algorithm).xcache_clear)).apply)
            xget_hasher.write
              [xalgorithm]
                memory > xhashers
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xhasattr)).apply ((xalgorithm)) ("algorithm")).if
                      (((unsupported)).apply ((xalgorithm)))
                      ((xalgorithm).eq "default").if
                        (((unsupported)).apply ((((unsupported)).apply ((((xget_hashers)).apply)) (0))))
                        seq
                          xhashers.write (((xget_hashers_by_algorithm)).apply)
                          (((unsupported)).apply ((xKeyError)))
                            (((unsupported)).apply ((((unsupported)).apply ((xhashers)) ((xalgorithm)))))
                            (((unsupported)).apply ((((xValueError)).apply (("Unknown password hashing algorithm '%s'. Did you specify it in the PASSWORD_HASHERS setting?".mod (xalgorithm))))))
            xidentify_hasher.write
              [xencoded]
                memory > xalgorithm
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((((((xlen)).apply ((xencoded))).eq 32).and (((unsupported)).apply ("$") ((xencoded)))).or (((((xlen)).apply ((xencoded))).eq 37).and ((((xencoded).xstartswith)).apply ("md5$$")))).if
                      xalgorithm.write "unsalted_md5"
                      (((((xlen)).apply ((xencoded))).eq 46).and ((((xencoded).xstartswith)).apply ("sha1$$"))).if
                        xalgorithm.write "unsalted_sha1"
                        xalgorithm.write (((unsupported)).apply (((((xencoded).xsplit)).apply ("$") (1))) (0))
                    (((unsupported)).apply ((((xget_hasher)).apply ((xalgorithm)))))
            xmask_hash.write
              [xhash xshow xchar]
                memory > xmasked
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xmasked.write (((unsupported)).apply ((xhash)) ((((unsupported)).apply ((xshow)))))
                    (((unsupported)).apply ((xmasked)) (((xchar).mul (((xlen)).apply ((((unsupported)).apply ((xhash)) ((((unsupported)).apply ((xshow))))))))))
                    (((unsupported)).apply ((xmasked)))
            xmust_update_salt.write
              [xsalt xexpected_entropy]
                seq > @
                  (((unsupported)).apply ((((((xlen)).apply ((xsalt))).mul ((((xmath).xlog2)).apply ((((xlen)).apply ((xRANDOM_STRING_CHARS)))))).less (xexpected_entropy))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xalgorithm.write "None: is there a None literal in the EO language?"
                xlibrary.write "None: is there a None literal in the EO language?"
                xsalt_entropy.write 128
                x_load_library.write
                  [xself]
                    memory > xmod_path
                    memory > xmodule
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xlibrary)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((xisinstance)).apply (((xself).xlibrary)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xmod_path)))) (((xself).xlibrary)))
                              xmod_path.write ((xself).xlibrary)
                            (((unsupported)).apply ((xImportError)))
                              xmodule.write ((((ximportlib).ximport_module)).apply ((xmod_path)))
                              (((unsupported)).apply ((((xValueError)).apply (("Couldn't load %r algorithm library: %s".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xe))))))))
                            (((unsupported)).apply ((xmodule)))
                        (((unsupported)).apply ((((xValueError)).apply (("Hasher %r doesn't specify a library attribute".mod (((xself).x__class__).x__name__))))))
                xsalt.write
                  [xself]
                    memory > xchar_count
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchar_count.write ((((xmath).xceil)).apply ((((xself).xsalt_entropy).div ((((xmath).xlog2)).apply ((((xlen)).apply ((xRANDOM_STRING_CHARS))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xget_random_string)) ((xchar_count)) ((xRANDOM_STRING_CHARS)))))
                xverify.write
                  [xself xpassword xencoded]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BasePasswordHasher must provide a verify() method"))))
                x_check_encode_args.write
                  [xself xpassword xsalt]
                    seq > @
                      seq
                        (((unsupported)).apply ((xpassword)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xTypeError)).apply ("password must be provided."))))
                        (((xsalt).not).or (((unsupported)).apply ("$") ((xsalt)))).if
                          (((unsupported)).apply ((((xValueError)).apply ("salt must be provided and cannot contain $."))))
                xencode.write
                  [xself xpassword xsalt]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BasePasswordHasher must provide an encode() method"))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BasePasswordHasher must provide a decode() method."))))
                xsafe_summary.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BasePasswordHasher must provide a safe_summary() method"))))
                xmust_update.write
                  [xself xencoded]
                    seq > @
                      (((unsupported)).apply (FALSE))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xwarnings).xwarn)).apply ("subclasses of BasePasswordHasher should provide a harden_runtime() method"))
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "pbkdf2_sha256"
                xiterations.write 390000
                xdigest.write ((xhashlib).xsha256)
                xencode.write
                  [xself xpassword xsalt xiterations]
                    memory > xhash
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_check_encode_args)).apply ((xpassword)) ((xsalt)))
                        xiterations.write ((xiterations).or ((xself).xiterations))
                        xhash.write (((unsupported)).apply ((xpbkdf2)) ((xpassword)) ((xsalt)) ((xiterations)) (((xself).xdigest)))
                        xhash.write ((((((((((xbase64).xb64encode)).apply ((xhash))).xdecode)).apply ("ascii")).xstrip)).apply)
                        (((unsupported)).apply (("%s$%d$%s$%s".mod (((unsupported)).apply (((xself).xalgorithm)) ((xiterations)) ((xsalt)) ((xhash))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xiterations)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (3))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("hash") ((xhash)) ("iterations") ((((xint)).apply ((xiterations)))) ("salt") ((xsalt)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("salt"))) ((((unsupported)).apply ((xdecoded)) ("iterations"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("iterations"))) ((((unsupported)).apply ((xdecoded)) ("iterations"))) ((((x_)).apply ("salt"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xupdate_salt
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xupdate_salt.write (((xmust_update_salt)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))) (((xself).xsalt_entropy)))
                        (((unsupported)).apply ((((((unsupported)).apply ((xdecoded)) ("iterations")).neq ((xself).xiterations)).or (xupdate_salt))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    memory > xextra_iterations
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xextra_iterations.write (((xself).xiterations).sub (((unsupported)).apply ((xdecoded)) ("iterations")))
                        ((xextra_iterations).greater 0).if
                          bogusForceDataize.write ((((xself).xencode)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("salt"))) ((xextra_iterations)))
            (((unsupported)).apply ((xPBKDF2PasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "pbkdf2_sha1"
                xdigest.write ((xhashlib).xsha1)
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "argon2"
                xlibrary.write "argon2"
                xtime_cost.write 2
                xmemory_cost.write 102400
                xparallelism.write 8
                xencode.write
                  [xself xpassword xsalt]
                    memory > xargon2
                    memory > xparams
                    memory > xdata
                    seq > @
                      seq
                        xargon2.write ((((xself).x_load_library)).apply)
                        xparams.write ((((xself).xparams)).apply)
                        xdata.write (((unsupported)).apply ((((xargon2).xlow_level).xhash_secret)) (((((xpassword).xencode)).apply)) (((((xsalt).xencode)).apply)) (((xparams).xtime_cost)) (((xparams).xmemory_cost)) (((xparams).xparallelism)) (((xparams).xhash_len)) (((xparams).xtype)))
                        (((unsupported)).apply ((((xself).xalgorithm).add ((((xdata).xdecode)).apply ("ascii")))))
                xdecode.write
                  [xself xencoded]
                    memory > xsalt
                    memory > xargon2
                    memory > xparams
                    seq > @
                      seq
                        xargon2.write ((((xself).x_load_library)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xrest)))) (((((xencoded).xsplit)).apply ("$") (1))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        xparams.write ((((xargon2).xextract_parameters)).apply (("$".add (xrest))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvariety)) ((((unsupported)).apply ((x_)))) ((xb64salt)) ((xhash)))) (((((xrest).xsplit)).apply ("$"))))
                        (((unsupported)).apply ((xb64salt)) (("=".mul (((((xlen)).apply ((xb64salt))).neg).mod 4))))
                        xsalt.write (((((((xbase64).xb64decode)).apply ((xb64salt))).xdecode)).apply ("latin1"))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("hash") ((xhash)) ("memory_cost") (((xparams).xmemory_cost)) ("parallelism") (((xparams).xparallelism)) ("salt") ((xsalt)) ("time_cost") (((xparams).xtime_cost)) ("variety") ((xvariety)) ("version") (((xparams).xversion)) ("params") ((xparams)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xargon2
                    seq > @
                      seq
                        xargon2.write ((((xself).x_load_library)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xrest)))) (((((xencoded).xsplit)).apply ("$") (1))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((xargon2).xexceptions).xVerificationError)))
                          (((unsupported)).apply ((((((((xargon2).xPasswordHasher)).apply).xverify)).apply (("$".add (xrest))) ((xpassword)))))
                          (((unsupported)).apply (FALSE))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("variety"))) ((((unsupported)).apply ((xdecoded)) ("variety"))) ((((x_)).apply ("version"))) ((((unsupported)).apply ((xdecoded)) ("version"))) ((((x_)).apply ("memory cost"))) ((((unsupported)).apply ((xdecoded)) ("memory_cost"))) ((((x_)).apply ("time cost"))) ((((unsupported)).apply ((xdecoded)) ("time_cost"))) ((((x_)).apply ("parallelism"))) ((((unsupported)).apply ((xdecoded)) ("parallelism"))) ((((x_)).apply ("salt"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xupdate_salt
                    memory > xcurrent_params
                    memory > xnew_params
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xcurrent_params.write (((unsupported)).apply ((xdecoded)) ("params"))
                        xnew_params.write ((((xself).xparams)).apply)
                        (((unsupported)).apply (((xnew_params).xsalt_len)) (((xcurrent_params).xsalt_len)))
                        xupdate_salt.write (((xmust_update_salt)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))) (((xself).xsalt_entropy)))
                        (((unsupported)).apply ((((xcurrent_params).neq (xnew_params)).or (xupdate_salt))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
                xparams.write
                  [xself]
                    memory > xargon2
                    seq > @
                      seq
                        xargon2.write ((((xself).x_load_library)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xargon2).xParameters)) (((((xargon2).xlow_level).xType).xID)) ((((xargon2).xlow_level).xARGON2_VERSION)) (((xargon2).xDEFAULT_RANDOM_SALT_LENGTH)) (((xargon2).xDEFAULT_HASH_LENGTH)) (((xself).xtime_cost)) (((xself).xmemory_cost)) (((xself).xparallelism)))))
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "bcrypt_sha256"
                xdigest.write ((xhashlib).xsha256)
                xlibrary.write (((unsupported)).apply ("bcrypt") ("bcrypt"))
                xrounds.write 12
                xsalt.write
                  [xself]
                    memory > xbcrypt
                    seq > @
                      seq
                        xbcrypt.write ((((xself).x_load_library)).apply)
                        (((unsupported)).apply (((((xbcrypt).xgensalt)).apply (((xself).xrounds)))))
                xencode.write
                  [xself xpassword xsalt]
                    memory > xbcrypt
                    memory > xdata
                    seq > @
                      seq
                        xbcrypt.write ((((xself).x_load_library)).apply)
                        xpassword.write ((((xpassword).xencode)).apply)
                        (((unsupported)).apply (((xself).xdigest)) ("None: is there a None literal in the EO language?")).if
                          xpassword.write ((((xbinascii).xhexlify)).apply ((((((((xself).xdigest)).apply ((xpassword))).xdigest)).apply)))
                        xdata.write ((((xbcrypt).xhashpw)).apply ((xpassword)) ((xsalt)))
                        (((unsupported)).apply (("%s$%s".mod (((unsupported)).apply (((xself).xalgorithm)) (((((xdata).xdecode)).apply ("ascii")))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xempty)) ((xalgostr)) ((xwork_factor)) ((xdata)))) (((((xencoded).xsplit)).apply ("$") (4))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("algostr") ((xalgostr)) ("checksum") ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (22))))) ("salt") ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (22))))) ("work_factor") ((((xint)).apply ((xwork_factor)))))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xdata)))) (((((xencoded).xsplit)).apply ("$") (1))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) (((((xdata).xencode)).apply ("ascii"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("work factor"))) ((((unsupported)).apply ((xdecoded)) ("work_factor"))) ((((x_)).apply ("salt"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))))) ((((x_)).apply ("checksum"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("checksum"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply (((((unsupported)).apply ((xdecoded)) ("work_factor")).neq ((xself).xrounds))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    memory > xrounds
                    memory > xsalt
                    memory > xdiff
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xdata)))) (((((xencoded).xsplit)).apply ("$") (1))))
                        xsalt.write (((unsupported)).apply ((xdata)) ((((unsupported)).apply (29))))
                        xrounds.write (((unsupported)).apply (((((xdata).xsplit)).apply ("$"))) (2))
                        xdiff.write ((((unsupported)).apply (2) ((((xself).xrounds).sub (((xint)).apply ((xrounds)))))).sub 1)
                        while.
                          ((xdiff).greater 0)
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xencode)).apply ((xpassword)) (((((xsalt).xencode)).apply ("ascii"))))
                                (((unsupported)).apply ((xdiff)) (1))
            (((unsupported)).apply ((xBCryptSHA256PasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "bcrypt"
                xdigest.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "scrypt"
                xblock_size.write 8
                xmaxmem.write 0
                xparallelism.write 1
                xwork_factor.write (((unsupported)).apply (2) (14))
                xencode.write
                  [xself xpassword xsalt xn xr xp]
                    memory > xhash_
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_check_encode_args)).apply ((xpassword)) ((xsalt)))
                        xn.write ((xn).or ((xself).xwork_factor))
                        xr.write ((xr).or ((xself).xblock_size))
                        xp.write ((xp).or ((xself).xparallelism))
                        xhash_.write (((unsupported)).apply (((xhashlib).xscrypt)) (((((xpassword).xencode)).apply)) (((((xsalt).xencode)).apply)) ((xn)) ((xr)) ((xp)) (((xself).xmaxmem)) (64))
                        xhash_.write ((((((((((xbase64).xb64encode)).apply ((xhash_))).xdecode)).apply ("ascii")).xstrip)).apply)
                        (((unsupported)).apply (("%s$%d$%s$%d$%d$%s".mod (((unsupported)).apply (((xself).xalgorithm)) ((xn)) ((xsalt)) ((xr)) ((xp)) ((xhash_))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xwork_factor)) ((xsalt)) ((xblock_size)) ((xparallelism)) ((xhash_)))) (((((xencoded).xsplit)).apply ("$") (6))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("work_factor") ((((xint)).apply ((xwork_factor)))) ("salt") ((xsalt)) ("block_size") ((((xint)).apply ((xblock_size)))) ("parallelism") ((((xint)).apply ((xparallelism)))) ("hash") ((xhash_)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("salt"))) ((((unsupported)).apply ((xdecoded)) ("work_factor"))) ((((unsupported)).apply ((xdecoded)) ("block_size"))) ((((unsupported)).apply ((xdecoded)) ("parallelism"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("work factor"))) ((((unsupported)).apply ((xdecoded)) ("work_factor"))) ((((x_)).apply ("block size"))) ((((unsupported)).apply ((xdecoded)) ("block_size"))) ((((x_)).apply ("parallelism"))) ((((unsupported)).apply ((xdecoded)) ("parallelism"))) ((((x_)).apply ("salt"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply (((((((unsupported)).apply ((xdecoded)) ("work_factor")).neq ((xself).xwork_factor)).or ((((unsupported)).apply ((xdecoded)) ("block_size")).neq ((xself).xblock_size))).or ((((unsupported)).apply ((xdecoded)) ("parallelism")).neq ((xself).xparallelism)))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "sha1"
                xencode.write
                  [xself xpassword xsalt]
                    memory > xhash
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_encode_args)).apply ((xpassword)) ((xsalt)))
                        xhash.write (((((((xhashlib).xsha1)).apply ((((((xsalt).add (xpassword)).xencode)).apply))).xhexdigest)).apply)
                        (((unsupported)).apply (("%s$%s$%s".mod (((unsupported)).apply (((xself).xalgorithm)) ((xsalt)) ((xhash))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (2))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("hash") ((xhash)) ("salt") ((xsalt)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("salt"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("salt"))) ((((unsupported)).apply ((xmask_hash)) ((((unsupported)).apply ((xdecoded)) ("salt"))) (2))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((xmust_update_salt)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))) (((xself).xsalt_entropy)))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "md5"
                xencode.write
                  [xself xpassword xsalt]
                    memory > xhash
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_encode_args)).apply ((xpassword)) ((xsalt)))
                        xhash.write ((((((xmd5)).apply ((((((xsalt).add (xpassword)).xencode)).apply))).xhexdigest)).apply)
                        (((unsupported)).apply (("%s$%s$%s".mod (((unsupported)).apply (((xself).xalgorithm)) ((xsalt)) ((xhash))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (2))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("hash") ((xhash)) ("salt") ((xsalt)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("salt"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("salt"))) ((((unsupported)).apply ((xmask_hash)) ((((unsupported)).apply ((xdecoded)) ("salt"))) (2))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xmust_update.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((xmust_update_salt)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))) (((xself).xsalt_entropy)))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "unsalted_sha1"
                xsalt.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (""))
                xencode.write
                  [xself xpassword xsalt]
                    memory > xhash
                    seq > @
                      seq
                        ((xsalt).neq "").if
                          (((unsupported)).apply ((((xValueError)).apply ("salt must be empty."))))
                        xhash.write (((((((xhashlib).xsha1)).apply (((((xpassword).xencode)).apply))).xhexdigest)).apply)
                        (((unsupported)).apply (("sha1$$%s".mod (xhash))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xencoded).xstartswith)).apply ("sha1$$"))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") (((xself).xalgorithm)) ("hash") ((((unsupported)).apply ((xencoded)) ((((unsupported)).apply (6))))) ("salt") ("None: is there a None literal in the EO language?"))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    seq > @
                      seq
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) (""))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("hash"))) ((((xmask_hash)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))))))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "unsalted_md5"
                xsalt.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (""))
                xencode.write
                  [xself xpassword xsalt]
                    seq > @
                      seq
                        ((xsalt).neq "").if
                          (((unsupported)).apply ((((xValueError)).apply ("salt must be empty."))))
                        (((unsupported)).apply (((((((xmd5)).apply (((((xpassword).xencode)).apply))).xhexdigest)).apply)))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("algorithm") (((xself).xalgorithm)) ("hash") ((xencoded)) ("salt") ("None: is there a None literal in the EO language?"))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xencoded_2
                    seq > @
                      seq
                        (((((xlen)).apply ((xencoded))).eq 37).and ((((xencoded).xstartswith)).apply ("md5$$"))).if
                          xencoded.write (((unsupported)).apply ((xencoded)) ((((unsupported)).apply (5))))
                        xencoded_2.write ((((xself).xencode)).apply ((xpassword)) (""))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((xencoded)) ((xencoded_2)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("hash"))) ((((unsupported)).apply ((xmask_hash)) ((((unsupported)).apply ((xdecoded)) ("hash"))) (3))))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @
            (((unsupported)).apply ((xBasePasswordHasher)))
              seq
                (((unsupported)).apply)
                xalgorithm.write "crypt"
                xlibrary.write "crypt"
                xsalt.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xget_random_string)).apply (2))))
                xencode.write
                  [xself xpassword xsalt]
                    memory > xhash
                    memory > xcrypt
                    seq > @
                      seq
                        xcrypt.write ((((xself).x_load_library)).apply)
                        ((((xlen)).apply ((xsalt))).neq 2).if
                          (((unsupported)).apply ((((xValueError)).apply ("salt must be of length 2."))))
                        xhash.write ((((xcrypt).xcrypt)).apply ((xpassword)) ((xsalt)))
                        (((unsupported)).apply ((xhash)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xTypeError)).apply ("hash must be provided."))))
                        (((unsupported)).apply (("%s$%s$%s".mod (((unsupported)).apply (((xself).xalgorithm)) ("") ((xhash))))))
                xdecode.write
                  [xself xencoded]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (2))))
                        (((unsupported)).apply (((xalgorithm).eq ((xself).xalgorithm))))
                        (((unsupported)).apply ((((unsupported)).apply ("algorithm") ((xalgorithm)) ("hash") ((xhash)) ("salt") ((xsalt)))))
                xverify.write
                  [xself xpassword xencoded]
                    memory > xcrypt
                    memory > xdata
                    memory > xdecoded
                    seq > @
                      seq
                        xcrypt.write ((((xself).x_load_library)).apply)
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        xdata.write ((((xcrypt).xcrypt)).apply ((xpassword)) ((((unsupported)).apply ((xdecoded)) ("hash"))))
                        (((unsupported)).apply ((((xconstant_time_compare)).apply ((((unsupported)).apply ((xdecoded)) ("hash"))) ((xdata)))))
                xsafe_summary.write
                  [xself xencoded]
                    memory > xdecoded
                    seq > @
                      seq
                        xdecoded.write ((((xself).xdecode)).apply ((xencoded)))
                        (((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("algorithm"))) ((((unsupported)).apply ((xdecoded)) ("algorithm"))) ((((x_)).apply ("salt"))) ((((unsupported)).apply ((xdecoded)) ("salt"))) ((((x_)).apply ("hash"))) ((((unsupported)).apply ((xmask_hash)) ((((unsupported)).apply ((xdecoded)) ("hash"))) (3))))))
                xharden_runtime.write
                  [xself xpassword xencoded]
                    seq > @