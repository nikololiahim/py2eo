memory > xparam_list
memory > xmany
memory > xlist
memory > xSquare
memory > xreported_sql
memory > xclass_attr_name
memory > xTestCase
memory > xrange
memory > xpatch
memory > xtype
memory > xconnections
memory > xtuple
memory > xargs
memory > xgetattr
memory > xsql
memory > xmocked_check_database_version_supported
memory > xMagicMock
memory > xDEFAULT_DB_ALIAS
memory > xdb
memory > xcontext
memory > xAssertionError
memory > xNotImplementedError
memory > x_
memory > xconnection
memory > xexecute
memory > xmocked_is_usable
memory > xinstance_attr_name
memory > xBaseDatabaseWrapper
memory > xrepr
memory > xcursor
memory > xi
memory > xparams
memory > xlen
memory > xSimpleTestCase
[] > test_base
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_get_database_version
        memory > xtest_outer_wrapper_blocks
        memory > xtest_wrapper_invoked_many
        memory > xtest_repr
        memory > xtest_database_queried
        memory > xtest_initialization_class_attributes
        memory > xtest_set_autocommit_health_checks_enabled
        memory > xmock_wrapper
        memory > xpatch_settings_dict
        memory > xtest_health_checks_enabled_errors_occurred
        memory > xrun_query
        memory > xtest_check_database_version_supported_with_none_as_database_version
        memory > xtest_multi_database_init_connection_state_called_once
        memory > xtest_wrapper_invoked
        memory > xdatabases
        memory > xtest_initialization_display_name
        memory > xsetUp
        memory > xtest_wrapper_gets_sql
        memory > xtest_health_checks_enabled
        memory > xtest_nested_wrapper_invoked
        memory > xcall_execute
        memory > xtest_wrapper_connection_specific
        memory > xtest_health_checks_disabled
        memory > xcall_executemany
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_repr.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write (((unsupported)).apply ((xconnections)) ((xDEFAULT_DB_ALIAS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconn)))) ("<DatabaseWrapper vendor={connection.vendor!r} alias='default'>"))
                xtest_initialization_class_attributes.write
                  [xself]
                    memory > xconn_class
                    memory > xclass_attr_value
                    memory > xconn
                    memory > xinstance_attr_value
                    memory > xattr_names
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xconn.write (((unsupported)).apply ((xconnections)) ((xDEFAULT_DB_ALIAS)))
                        xconn_class.write (((xtype)).apply ((xconn)))
                        xattr_names.write (((unsupported)).apply ((((unsupported)).apply ("client_class") ("client"))) ((((unsupported)).apply ("creation_class") ("creation"))) ((((unsupported)).apply ("features_class") ("features"))) ((((unsupported)).apply ("introspection_class") ("introspection"))) ((((unsupported)).apply ("ops_class") ("ops"))) ((((unsupported)).apply ("validation_class") ("validation"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclass_attr_name)) ((xinstance_attr_name)))) ((xattr_names)))
                          seq
                            xclass_attr_value.write (((xgetattr)).apply ((xconn_class)) ((xclass_attr_name)))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xclass_attr_value)))
                            xinstance_attr_value.write (((xgetattr)).apply ((xconn)) ((xinstance_attr_name)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinstance_attr_value)) ((xclass_attr_value)))
                xtest_initialization_display_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBaseDatabaseWrapper).xdisplay_name)) ("unknown"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xconnection).xdisplay_name)) ("unknown"))
                xtest_get_database_version.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xBaseDatabaseWrapper)) ("__init__") ("None: is there a None literal in the EO language?"))))
                        seq
                          xmsg.write "subclasses of BaseDatabaseWrapper may require a get_database_version() method."
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ((xmsg)))))
                            bogusForceDataize.write ((((((xBaseDatabaseWrapper)).apply).xget_database_version)).apply)
                xtest_check_database_version_supported_with_none_as_database_version.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xpatch).xobject)).apply (((xconnection).xfeatures)) ("minimum_database_version") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xconnection).xcheck_database_version_supported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xcall_execute.write
                  [xconnection xparams]
                    memory > xsql
                    memory > xret_val
                    seq > @
                      (((unsupported)).apply)
                        xret_val.write ((((unsupported)).apply ((xparams)) ("None: is there a None literal in the EO language?")).if "1" "%s")
                        xsql.write (("SELECT ".sub (xret_val)).sub (((xconnection).xfeatures).xbare_select_suffix))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xcursor).xexecute)).apply ((xsql)) ((xparams)))
                xcall_executemany.write
                  [xself xconnection xparams]
                    memory > xsql
                    seq > @
                      (((unsupported)).apply)
                        xsql.write ((("DELETE FROM {} WHERE 0=1 AND 0=%s".xformat)).apply ((((xSquare).x_meta).xdb_table)))
                        (((unsupported)).apply ((xparams)) ("None: is there a None literal in the EO language?")).if
                          xparams.write (((unsupported)).apply ((((unsupported)).apply ((xi)))) ((xi)) ((((xrange)).apply (3))))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xcursor).xexecutemany)).apply ((xsql)) ((xparams)))
                xmock_wrapper.write
                  []
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xMagicMock)) ((((unsupported)).apply ((((xexecute)).apply ((((unsupported)).apply ((xargs)))))))))))
                xtest_wrapper_invoked.write
                  [xself]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        (((unsupported)).apply (((((xconnection).xexecute_wrapper)).apply ((xwrapper)))))
                          bogusForceDataize.write ((((xself).xcall_execute)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xwrapper).xcalled)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)) ((xsql)) ((xparams)) ((xmany)) ((xcontext)))) ((x_)))) (((xwrapper).xcall_args)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SELECT") ((xsql)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xparams)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xmany)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcontext)) ("connection"))) ((xconnection)))
                xtest_wrapper_invoked_many.write
                  [xself]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        (((unsupported)).apply (((((xconnection).xexecute_wrapper)).apply ((xwrapper)))))
                          bogusForceDataize.write ((((xself).xcall_executemany)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xwrapper).xcalled)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)) ((xsql)) ((xparam_list)) ((xmany)) ((xcontext)))) ((x_)))) (((xwrapper).xcall_args)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("DELETE") ((xsql)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xparam_list)) ((((unsupported)).apply ((xlist)) ((xtuple)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xmany)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcontext)) ("connection"))) ((xconnection)))
                xtest_database_queried.write
                  [xself]
                    memory > xsql
                    memory > xwrapper
                    memory > xseventeen
                    seq > @
                      seq
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        (((unsupported)).apply (((((xconnection).xexecute_wrapper)).apply ((xwrapper)))))
                          seq
                            (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                              seq
                                xsql.write ("SELECT 17".sub (((xconnection).xfeatures).xbare_select_suffix))
                                bogusForceDataize.write ((((xcursor).xexecute)).apply ((xsql)))
                                xseventeen.write ((((xcursor).xfetchall)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xseventeen)))) ((((unsupported)).apply ((((unsupported)).apply (17))))))
                            bogusForceDataize.write ((((xself).xcall_executemany)).apply ((xconnection)))
                xtest_nested_wrapper_invoked.write
                  [xself]
                    memory > xinner_wrapper
                    memory > xouter_wrapper
                    seq > @
                      seq
                        xouter_wrapper.write ((((xself).xmock_wrapper)).apply)
                        xinner_wrapper.write ((((xself).xmock_wrapper)).apply)
                        (((unsupported)).apply (((((xconnection).xexecute_wrapper)).apply ((xouter_wrapper)))) (((((xconnection).xexecute_wrapper)).apply ((xinner_wrapper)))))
                          seq
                            bogusForceDataize.write ((((xself).xcall_execute)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinner_wrapper).xcall_count)) (1))
                            bogusForceDataize.write ((((xself).xcall_executemany)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinner_wrapper).xcall_count)) (2))
                xtest_outer_wrapper_blocks.write
                  [xself]
                    memory > xwrapper
                    memory > xc
                    memory > xblocker
                    seq > @
                      seq
                        xblocker.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        xc.write (xconnection)
                        (((unsupported)).apply (((((xc).xexecute_wrapper)).apply ((xwrapper)))) (((((xc).xexecute_wrapper)).apply ((xblocker)))) (((((xc).xexecute_wrapper)).apply ((xwrapper)))))
                          (((unsupported)).apply (((((xc).xcursor)).apply)) ((xcursor)))
                            seq
                              bogusForceDataize.write ((((xcursor).xexecute)).apply ("The database never sees this"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xcall_count)) (1))
                              bogusForceDataize.write ((((xcursor).xexecutemany)).apply ("The database never sees this %s") ((((unsupported)).apply ((((unsupported)).apply ("either"))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xcall_count)) (2))
                xtest_wrapper_gets_sql.write
                  [xself]
                    memory > xsql
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        xsql.write ("SELECT 'aloha'".sub (((xconnection).xfeatures).xbare_select_suffix))
                        (((unsupported)).apply (((((xconnection).xexecute_wrapper)).apply ((xwrapper)))) (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xcursor).xexecute)).apply ((xsql)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)) ((xreported_sql)) ((x_)) ((x_)) ((x_)))) ((x_)))) (((xwrapper).xcall_args)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreported_sql)) ((xsql)))
                xtest_wrapper_connection_specific.write
                  [xself]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write ((((xself).xmock_wrapper)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply ((xconnections)) ("other")).xexecute_wrapper)).apply ((xwrapper)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xconnections)) ("other")).xexecute_wrappers)) ((((unsupported)).apply ((xwrapper)))))
                            bogusForceDataize.write ((((xself).xcall_execute)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xwrapper).xcalled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconnection).xexecute_wrappers)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xconnections)) ("other")).xexecute_wrappers)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default"))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xconnection).xclose)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xconnection).xclose)))
                xpatch_settings_dict.write
                  [xself xconn_health_checks]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsettings_dict_patcher)) (((((xpatch).xdict)).apply (((xconnection).xsettings_dict)) ((((unsupported)).apply (((xconnection).xsettings_dict)) ("CONN_MAX_AGE") ("None: is there a None literal in the EO language?") ("CONN_HEALTH_CHECKS") ((xconn_health_checks)))))))
                        bogusForceDataize.write (((((xself).xsettings_dict_patcher).xstart)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xself).xsettings_dict_patcher).xstop)))
                xrun_query.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                        bogusForceDataize.write ((((xcursor).xexecute)).apply (("SELECT 42".sub (((xconnection).xfeatures).xbare_select_suffix))))
                xtest_health_checks_enabled.write
                  [xself]
                    memory > xold_connection
                    memory > xnew_connection
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpatch_settings_dict)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          bogusForceDataize.write ((((xself).xrun_query)).apply)
                        xold_connection.write ((xconnection).xconnection)
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") (FALSE))) ((xmocked_is_usable)))
                          seq
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            xnew_connection.write ((xconnection).xconnection)
                            bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xnew_connection)) ((xold_connection)))
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_connection)) (((xconnection).xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_is_usable).xcall_count)) (1))
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xself).xrun_query)).apply)
                        bogusForceDataize.write ((((xself).xrun_query)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_connection)) (((xconnection).xconnection)))
                xtest_health_checks_enabled_errors_occurred.write
                  [xself]
                    memory > xold_connection
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpatch_settings_dict)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          bogusForceDataize.write ((((xself).xrun_query)).apply)
                        xold_connection.write ((xconnection).xconnection)
                        (((unsupported)).apply (((xconnection).xerrors_occurred)) (TRUE))
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          bogusForceDataize.write ((((xself).xrun_query)).apply)
                xtest_health_checks_disabled.write
                  [xself]
                    memory > xold_connection
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpatch_settings_dict)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          bogusForceDataize.write ((((xself).xrun_query)).apply)
                        xold_connection.write ((xconnection).xconnection)
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          seq
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                xtest_set_autocommit_health_checks_enabled.write
                  [xself]
                    memory > xold_connection
                    memory > xnew_connection
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpatch_settings_dict)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") ((xAssertionError)))))
                          seq
                            bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (FALSE))
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            bogusForceDataize.write ((((xconnection).xcommit)).apply)
                            bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (TRUE))
                        xold_connection.write ((xconnection).xconnection)
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_connection)) (((xconnection).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((xconnection)) ("is_usable") (FALSE))) ((xmocked_is_usable)))
                          seq
                            bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (FALSE))
                            xnew_connection.write ((xconnection).xconnection)
                            bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xnew_connection)) ((xold_connection)))
                            bogusForceDataize.write ((((xself).xrun_query)).apply)
                            bogusForceDataize.write ((((xconnection).xcommit)).apply)
                            bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_connection)) (((xconnection).xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_is_usable).xcall_count)) (1))
                        bogusForceDataize.write ((((xconnection).xclose_if_unusable_or_obsolete)).apply)
                        bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xrun_query)).apply)
                        bogusForceDataize.write ((((xconnection).xcommit)).apply)
                        bogusForceDataize.write ((((xconnection).xset_autocommit)).apply (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_connection)) (((xconnection).xconnection)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_multi_database_init_connection_state_called_once.write
                  [xself]
                    memory > xafter_first_calls
                    seq > @
                      (((unsupported)).apply ((xdb)) (((xself).xdatabases)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdb)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xpatch).xobject)) ((((unsupported)).apply ((xconnections)) ((xdb)))) ("commit") ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((((xpatch).xobject)).apply ((((unsupported)).apply ((xconnections)) ((xdb)))) ("check_database_version_supported"))) ((xmocked_check_database_version_supported)))
                              seq
                                bogusForceDataize.write ((((((unsupported)).apply ((xconnections)) ((xdb))).xinit_connection_state)).apply)
                                xafter_first_calls.write (((xlen)).apply (((xmocked_check_database_version_supported).xmock_calls)))
                                bogusForceDataize.write ((((((unsupported)).apply ((xconnections)) ((xdb))).xinit_connection_state)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmocked_check_database_version_supported).xmock_calls)))) ((xafter_first_calls)))