memory > xis_naive
memory > xMONTHS_3
memory > xstr
memory > xMONTHS
memory > xcalendar
memory > xget_default_timezone
memory > xtype
memory > xint
memory > xFormatter
memory > xgetattr
memory > xisinstance
memory > x_lazy_re_compile
memory > xWEEKDAYS
memory > xdatetime
memory > xenumerate
memory > xTimeFormat
memory > xNotImplementedError
memory > xpiece
memory > xMONTHS_ALT
memory > xDateFormat
memory > xmake_aware
memory > xhasattr
memory > xWEEKDAYS_ABBR
memory > x_datetime_ambiguous_or_imaginary
memory > xabs
memory > xTypeError
memory > xMONTHS_AP
[] > dateformat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xc
        memory > xO
        memory > xZ
        memory > xg
        memory > xt
        memory > xl
        memory > xP
        memory > xW
        memory > xr
        memory > xs
        memory > xtime_format
        memory > x__init__
        memory > xN
        memory > xj
        memory > xa
        memory > xd
        memory > xD
        memory > xU
        memory > xu
        memory > xz
        memory > xo
        memory > xS
        memory > xH
        memory > xh
        memory > xb
        memory > xG
        memory > xT
        memory > x_
        memory > xL
        memory > xf
        memory > xw
        memory > xI
        memory > xi
        memory > xF
        memory > x_no_timezone_or_datetime_is_ambiguous_or_imaginary
        memory > xM
        memory > xm
        memory > xre_formatchars
        memory > xe
        memory > xformat
        memory > xE
        memory > xformat_datetime_rfc5322
        memory > xy
        memory > xY
        memory > xn
        memory > xA
        memory > xre_escaped
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xre_formatchars.write (((x_lazy_re_compile)).apply ((((unsupported)).apply)))
            xre_escaped.write (((x_lazy_re_compile)).apply ((((unsupported)).apply)))
            (((unsupported)).apply)
              xformat.write
                [xself xformatstr]
                  memory > xpieces
                  seq > @
                    seq
                      xpieces.write (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xpiece)))) ((((xenumerate)).apply (((((xre_formatchars).xsplit)).apply ((((xstr)).apply ((xformatstr)))))))))
                        ((xi).mod 2).if
                          seq
                            ((((unsupported)).apply ((((xtype)).apply (((xself).xdata)))) (((xdatetime).xdate))).and (((xhasattr)).apply ((xTimeFormat)) ((xpiece)))).if
                              (((unsupported)).apply ((((xTypeError)).apply (("The format for date objects may not contain time-related format specifiers (found '%s').".mod (xpiece))))))
                            bogusForceDataize.write ((((xpieces).xappend)).apply ((((xstr)).apply ((((xgetattr)).apply ((xself)) ((xpiece)))))))
                          (xpiece).if
                            bogusForceDataize.write ((((xpieces).xappend)).apply (((((xre_escaped).xsub)).apply ("1") ((xpiece)))))
                      (((unsupported)).apply (((("".xjoin)).apply ((xpieces)))))
            (((unsupported)).apply ((xFormatter)))
              seq
                x__init__.write
                  [xself xobj]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdata)) ((xobj)))
                        (((unsupported)).apply (((xself).xtimezone)) ("None: is there a None literal in the EO language?"))
                        (((xisinstance)).apply ((xobj)) (((xdatetime).xdatetime))).if
                          (((xis_naive)).apply ((xobj))).if
                            (((unsupported)).apply (((xself).xtimezone)) ((xget_default_timezone)))
                            (((unsupported)).apply (((xself).xtimezone)) (((xobj).xtzinfo)))
                x_no_timezone_or_datetime_is_ambiguous_or_imaginary.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xtimezone).not).or (((x_datetime_ambiguous_or_imaginary)).apply (((xself).xdata)) (((xself).xtimezone))))))
                xa.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((((xself).xdata).xhour).greater 11).if
                          (((unsupported)).apply ((((x_)).apply ("p.m."))))
                        (((unsupported)).apply ((((x_)).apply ("a.m."))))
                xA.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((((xself).xdata).xhour).greater 11).if
                          (((unsupported)).apply ((((x_)).apply ("PM"))))
                        (((unsupported)).apply ((((x_)).apply ("AM"))))
                xe.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xtimezone).not).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply ((xNotImplementedError)))
                          ((((xhasattr)).apply (((xself).xdata)) ("tzinfo")).and (((xself).xdata).xtzinfo)).if
                            (((unsupported)).apply (((((xself).xdata).xtzname).or "")))
                        (((unsupported)).apply (""))
                xf.write
                  [xself]
                    memory > xhour
                    memory > xminute
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xhour.write (((((xself).xdata).xhour).mod 12).or 12)
                        xminute.write (((xself).xdata).xminute)
                        (((unsupported)).apply (((xminute).if ("%d:%02d".mod (((unsupported)).apply ((xhour)) ((xminute)))) (xhour))))
                xg.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xdata).xhour).mod 12).or 12)))
                xG.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xself).xdata).xhour)))
                xh.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((((xself).xdata).xhour).mod 12).or 12))))
                xH.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((xself).xdata).xhour))))
                xi.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((xself).xdata).xminute))))
                xO.write
                  [xself]
                    memory > xseconds
                    memory > xsign
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).x_no_timezone_or_datetime_is_ambiguous_or_imaginary).if
                          (((unsupported)).apply (""))
                        xseconds.write ((xself).xZ)
                        xsign.write (((xseconds).less 0).if "-" "+")
                        xseconds.write (((xabs)).apply ((xseconds)))
                        (((unsupported)).apply (("%s%02d%02d".mod (((unsupported)).apply ((xsign)) ((((unsupported)).apply ((xseconds)) (3600))) (((((unsupported)).apply ((xseconds)) (60)).mod 60))))))
                xP.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((((xself).xdata).xminute).eq 0).and ((((xself).xdata).xhour).eq 0)).if
                          (((unsupported)).apply ((((x_)).apply ("midnight"))))
                        (((((xself).xdata).xminute).eq 0).and ((((xself).xdata).xhour).eq 12)).if
                          (((unsupported)).apply ((((x_)).apply ("noon"))))
                        (((unsupported)).apply (("%s %s".mod (((unsupported)).apply (((xself).xf)) (((xself).xa))))))
                xs.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((xself).xdata).xsecond))))
                xT.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).x_no_timezone_or_datetime_is_ambiguous_or_imaginary).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply ((((xstr)).apply ((((((xself).xtimezone).xtzname)).apply (((xself).xdata)))))))
                xu.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%06d".mod (((xself).xdata).xmicrosecond))))
                xZ.write
                  [xself]
                    memory > xoffset
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).x_no_timezone_or_datetime_is_ambiguous_or_imaginary).if
                          (((unsupported)).apply (""))
                        xoffset.write (((((xself).xtimezone).xutcoffset)).apply (((xself).xdata)))
                        (((unsupported)).apply (((((xoffset).xdays).mul 86400).add ((xoffset).xseconds))))
            (((unsupported)).apply ((xTimeFormat)))
              seq
                xb.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xMONTHS_3)) ((((xself).xdata).xmonth)))))
                xc.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xdata).xisoformat)))
                xd.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((xself).xdata).xday))))
                xD.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xWEEKDAYS_ABBR)) ((((xself).xdata).xweekday)))))
                xE.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xMONTHS_ALT)) ((((xself).xdata).xmonth)))))
                xF.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xMONTHS)) ((((xself).xdata).xmonth)))))
                xI.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((xself).x_no_timezone_or_datetime_is_ambiguous_or_imaginary).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply (((((((xself).xtimezone).xdst)).apply (((xself).xdata))).if "1" "0")))
                xj.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xself).xdata).xday)))
                xl.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xWEEKDAYS)) ((((xself).xdata).xweekday)))))
                xL.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xcalendar).xisleap)).apply ((((xself).xdata).xyear)))))
                xm.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((xself).xdata).xmonth))))
                xM.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((unsupported)).apply ((xMONTHS_3)) ((((xself).xdata).xmonth))).xtitle)))
                xn.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xself).xdata).xmonth)))
                xN.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xMONTHS_AP)) ((((xself).xdata).xmonth)))))
                xo.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xdata).xisocalendar)) (0))))
                xr.write
                  [xself]
                    memory > xdt
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xtype)).apply (((xself).xdata)))) (((xdatetime).xdate))).if
                          (((unsupported)).apply ((((xTypeError)).apply ("The format for date objects may not contain time-related format specifiers (found 'r')."))))
                        (((xis_naive)).apply (((xself).xdata))).if
                          xdt.write (((unsupported)).apply ((xmake_aware)) (((xself).xdata)) (((xself).xtimezone)))
                          xdt.write ((xself).xdata)
                        (((unsupported)).apply ((((xformat_datetime_rfc5322)).apply ((xdt)))))
                xS.write
                  [xself]
                    memory > xlast
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xdata).xday)) ((((unsupported)).apply (11) (12) (13)))).if
                          (((unsupported)).apply ("th"))
                        xlast.write ((((xself).xdata).xday).mod 10)
                        ((xlast).eq 1).if
                          (((unsupported)).apply ("st"))
                        ((xlast).eq 2).if
                          (((unsupported)).apply ("nd"))
                        ((xlast).eq 3).if
                          (((unsupported)).apply ("rd"))
                        (((unsupported)).apply ("th"))
                xt.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod (((unsupported)).apply (((((xcalendar).xmonthrange)).apply ((((xself).xdata).xyear)) ((((xself).xdata).xmonth)))) (1)))))
                xU.write
                  [xself]
                    memory > xvalue
                    seq > @
                      seq
                        unsupported
                        xvalue.write ((xself).xdata)
                        ((((xisinstance)).apply ((xvalue)) (((xdatetime).xdatetime))).not).if
                          xvalue.write (((((xdatetime).xdatetime).xcombine)).apply ((xvalue)) ((((xdatetime).xtime).xmin)))
                        (((unsupported)).apply ((((xint)).apply (((xvalue).xtimestamp)))))
                xw.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xdata).xweekday).add 1).mod 7)))
                xW.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xdata).xisocalendar)) (1))))
                xy.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%02d".mod ((((xself).xdata).xyear).mod 100))))
                xY.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%04d".mod (((xself).xdata).xyear))))
                xz.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xdata).xtimetuple).xtm_yday)))
            xformat.write
              [xvalue xformat_string]
                memory > xdf
                seq > @
                  seq
                    unsupported
                    xdf.write (((xDateFormat)).apply ((xvalue)))
                    (((unsupported)).apply (((((xdf).xformat)).apply ((xformat_string)))))
            xtime_format.write
              [xvalue xformat_string]
                memory > xtf
                seq > @
                  seq
                    unsupported
                    xtf.write (((xTimeFormat)).apply ((xvalue)))
                    (((unsupported)).apply (((((xtf).xformat)).apply ((xformat_string)))))