memory > xTestGenericUnivNewlines
memory > xTestCRLFNewlines
memory > xTestMixedNewlines
memory > xio
memory > xCTest
memory > xPyTest
memory > xrepr
memory > xhasattr
memory > xx
memory > xos
memory > xunittest
memory > xstaticmethod
memory > xTestCRNewlines
memory > xTestLFNewlines
memory > xsupport
memory > xsys
memory > xfp
memory > x__name__
[] > test_univnewlines
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xFATX
        memory > xDATA_SPLIT
        memory > xpyio
        memory > xWRITEMODE
        memory > xDATA_TEMPLATE
        memory > xopen
        memory > xREADMODE
        memory > xtest_tell
        memory > xtest_readline
        memory > xDATA
        memory > xtearDown
        memory > xDATA_LF
        memory > xtest_seek
        memory > xsetUp
        memory > xNEWLINE
        memory > xDATA_CR
        memory > xDATA_CRLF
        memory > xtest_readlines
        memory > xtest_read
        memory > xDATA_MIXED
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            ((((xhasattr)).apply (((xsys).xstdin)) ("newlines")).not).if
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("This Python does not have universal newline support"))))
            xFATX.write ("x".mul (((unsupported)).apply (2) (14)))
            xDATA_TEMPLATE.write (((unsupported)).apply ("line1=1") ((("line2='this is a very long line designed to go past any default ".add "buffer limits that exist in io.py but we also want to test ").add "the uncommon case, naturally.'")) ("def line3():pass") (("line4 = '%s'".mod (xFATX))))
            xDATA_LF.write (((("n".xjoin)).apply ((xDATA_TEMPLATE))).add "n")
            xDATA_CR.write (((("r".xjoin)).apply ((xDATA_TEMPLATE))).add "r")
            xDATA_CRLF.write (((("rn".xjoin)).apply ((xDATA_TEMPLATE))).add "rn")
            xDATA_MIXED.write (((("n".xjoin)).apply ((xDATA_TEMPLATE))).add "r")
            xDATA_SPLIT.write (((unsupported)).apply (((xx).add "n")) ((xx)) ((xDATA_TEMPLATE)))
            (((unsupported)).apply)
              xopen.write ((xio).xopen)
            (((unsupported)).apply)
              xopen.write (((xstaticmethod)).apply (((xpyio).xopen)))
            (((unsupported)).apply)
              seq
                xREADMODE.write "r"
                xWRITEMODE.write "wb"
                xsetUp.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ((xself).xDATA)
                        (((unsupported)).apply ("b") (((xself).xWRITEMODE))).if
                          xdata.write ((((xdata).xencode)).apply ("ascii"))
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xWRITEMODE)))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply ((xdata)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_read.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xREADMODE)))) ((xfp)))
                          xdata.write ((((xfp).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xDATA_LF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xfp).xnewlines)))) ((((xrepr)).apply (((xself).xNEWLINE)))))
                xtest_readlines.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xREADMODE)))) ((xfp)))
                          xdata.write ((((xfp).xreadlines)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xDATA_SPLIT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xfp).xnewlines)))) ((((xrepr)).apply (((xself).xNEWLINE)))))
                xtest_readline.write
                  [xself]
                    memory > xd
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xREADMODE)))) ((xfp)))
                          seq
                            xdata.write (((unsupported)).apply)
                            xd.write ((((xfp).xreadline)).apply)
                            while.
                              (xd)
                              [unused]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xdata).xappend)).apply ((xd)))
                                    xd.write ((((xfp).xreadline)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xDATA_SPLIT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xfp).xnewlines)))) ((((xrepr)).apply (((xself).xNEWLINE)))))
                xtest_seek.write
                  [xself]
                    memory > xpos
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xREADMODE)))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xreadline)).apply)
                            xpos.write ((((xfp).xtell)).apply)
                            xdata.write ((((xfp).xreadlines)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((((unsupported)).apply ((xDATA_SPLIT)) ((((unsupported)).apply (1))))))
                            bogusForceDataize.write ((((xfp).xseek)).apply ((xpos)))
                            xdata.write ((((xfp).xreadlines)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((((unsupported)).apply ((xDATA_SPLIT)) ((((unsupported)).apply (1))))))
            (((unsupported)).apply ((xTestGenericUnivNewlines)))
              seq
                xNEWLINE.write "r"
                xDATA.write (xDATA_CR)
            (((unsupported)).apply ((xCTest)) ((xTestCRNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xPyTest)) ((xTestCRNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xTestGenericUnivNewlines)))
              seq
                xNEWLINE.write "n"
                xDATA.write (xDATA_LF)
            (((unsupported)).apply ((xCTest)) ((xTestLFNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xPyTest)) ((xTestLFNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xTestGenericUnivNewlines)))
              seq
                xNEWLINE.write "rn"
                xDATA.write (xDATA_CRLF)
                xtest_tell.write
                  [xself]
                    memory > xpos
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xopen)).apply (((xsupport).xTESTFN)) (((xself).xREADMODE)))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xfp).xnewlines)))) ((((xrepr)).apply ("None: is there a None literal in the EO language?"))))
                            xdata.write ((((xfp).xreadline)).apply)
                            xpos.write ((((xfp).xtell)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xfp).xnewlines)))) ((((xrepr)).apply (((xself).xNEWLINE)))))
            (((unsupported)).apply ((xCTest)) ((xTestCRLFNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xPyTest)) ((xTestCRLFNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xTestGenericUnivNewlines)))
              seq
                xNEWLINE.write (((unsupported)).apply ("r") ("n"))
                xDATA.write (xDATA_MIXED)
            (((unsupported)).apply ((xCTest)) ((xTestMixedNewlines)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xPyTest)) ((xTestMixedNewlines)) (((xunittest).xTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)