memory > xMyComplex
memory > xbad_complex
memory > xg
memory > xset_errno
memory > xphase
memory > xe
memory > xobject
memory > xMyComplexOS
memory > xplatform
memory > xcomplex
memory > xvalues
memory > xflags
memory > xpi
memory > xz
memory > xValueError
memory > xmath
memory > xer
memory > xfn
memory > xcmath
memory > xbase
memory > xNeitherComplexNorFloat
memory > xmax
memory > xSomeException
memory > xopen
memory > xFloatAndComplex
memory > xIndex
memory > xf
memory > xrepr
memory > xint
memory > xMyComplexException
memory > xException
memory > xOverflowError
memory > xx
memory > xFloatAndComplexOS
memory > xMyInt
memory > xarg
memory > xMyComplexExceptionOS
memory > xfname
memory > xsys
memory > xtuple
memory > xNotImplemented
memory > xfloat
memory > xar
memory > xJustFloat
memory > xei
memory > xparse_testfile
memory > xgetattr
memory > xv
memory > xid
memory > xpolar
memory > xzip
memory > xunittest
memory > xrect
memory > xy
memory > xmap
memory > xabs
memory > xtest_file
memory > xNeitherComplexNorFloatOS
memory > xJustFloatOS
memory > xNAN
memory > xai
memory > xTypeError
memory > x__name__
[] > test_cmath
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_functions
        memory > xtest_infinity_and_nan_constants
        memory > xrAssertAlmostEqual
        memory > xtest_specific_values
        memory > xcomplex_nans
        memory > xtest_input_type
        memory > xcheck_polar
        memory > xtest_isfinite
        memory > xisclose
        memory > xcomplex_infinities
        memory > xtest_reject_complex_tolerances
        memory > xtestAtanhSign
        memory > xtest_complex_values
        memory > xINF
        memory > xtest_isinf
        memory > xtest_abs_overflows
        memory > xassertFloatIdentical
        memory > xtest_rect
        memory > xtest_polar
        memory > xtest_complex_near_zero
        memory > xtest_isnan
        memory > xassertComplexIdentical
        memory > xcomplex_zeros
        memory > xNAN2
        memory > xtest_cmath_matches_math
        memory > xsetUp
        memory > xtest_phase
        memory > xtestTanhSign
        memory > xtest_constants
        memory > xtest_math
        memory > xtest_user_object
        memory > xtestAtanSign
        memory > xtearDown
        memory > xtest_polar_errno
        memory > xassertCEqual
        memory > xtest_abs
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xINF.write (((xfloat)).apply ("inf"))
            xNAN2.write (((xfloat)).apply ("nan"))
            xcomplex_zeros.write (((unsupported)).apply ((((xcomplex)).apply ((xx)) ((xy)))) ((xx)) ((((unsupported)).apply (0.0) ((0.0.neg)))) ((xy)) ((((unsupported)).apply (0.0) ((0.0.neg)))))
            xcomplex_infinities.write (((unsupported)).apply ((((xcomplex)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((unsupported)).apply ((xINF)) (0.0))) ((((unsupported)).apply ((xINF)) (2.3))) ((((unsupported)).apply ((xINF)) ((xINF)))) ((((unsupported)).apply (2.3) ((xINF)))) ((((unsupported)).apply (0.0) ((xINF)))) ((((unsupported)).apply ((0.0.neg)) ((xINF)))) ((((unsupported)).apply ((2.3.neg)) ((xINF)))) ((((unsupported)).apply (((xINF).neg)) ((xINF)))) ((((unsupported)).apply (((xINF).neg)) (2.3))) ((((unsupported)).apply (((xINF).neg)) (0.0))) ((((unsupported)).apply (((xINF).neg)) ((0.0.neg)))) ((((unsupported)).apply (((xINF).neg)) ((2.3.neg)))) ((((unsupported)).apply (((xINF).neg)) (((xINF).neg)))) ((((unsupported)).apply ((2.3.neg)) (((xINF).neg)))) ((((unsupported)).apply ((0.0.neg)) (((xINF).neg)))) ((((unsupported)).apply (0.0) (((xINF).neg)))) ((((unsupported)).apply (2.3) (((xINF).neg)))) ((((unsupported)).apply ((xINF)) (((xINF).neg)))) ((((unsupported)).apply ((xINF)) ((2.3.neg)))) ((((unsupported)).apply ((xINF)) ((0.0.neg)))))))
            xcomplex_nans.write (((unsupported)).apply ((((xcomplex)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((unsupported)).apply ((xNAN)) (((xINF).neg)))) ((((unsupported)).apply ((xNAN)) ((2.3.neg)))) ((((unsupported)).apply ((xNAN)) ((0.0.neg)))) ((((unsupported)).apply ((xNAN)) (0.0))) ((((unsupported)).apply ((xNAN)) (2.3))) ((((unsupported)).apply ((xNAN)) ((xINF)))) ((((unsupported)).apply (((xINF).neg)) ((xNAN)))) ((((unsupported)).apply ((2.3.neg)) ((xNAN)))) ((((unsupported)).apply ((0.0.neg)) ((xNAN)))) ((((unsupported)).apply (0.0) ((xNAN)))) ((((unsupported)).apply (2.3) ((xNAN)))) ((((unsupported)).apply ((xINF)) ((xNAN)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_functions.write (((unsupported)).apply ((((xgetattr)).apply ((xcmath)) ((xfname)))) ((xfname)) ((((unsupported)).apply ("acos") ("acosh") ("asin") ("asinh") ("atan") ("atanh") ("cos") ("cosh") ("exp") ("log") ("log10") ("sin") ("sinh") ("sqrt") ("tan") ("tanh"))))
                bogusForceDataize.write ((((xtest_functions).xappend)).apply ((((unsupported)).apply (((((xcmath).xlog)).apply ((xx)) (((((unsupported)).apply).add (((unsupported)).apply))))))))
                bogusForceDataize.write ((((xtest_functions).xappend)).apply ((((unsupported)).apply (((((xcmath).xlog)).apply (((((unsupported)).apply).sub (((unsupported)).apply))) ((xx)))))))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtest_values)) ((((xopen)).apply ((xtest_file)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xtest_values).xclose)).apply)
                xassertFloatIdentical.write
                  [xself xx xy]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmsg.write "floats {!r} and {!r} are not identical"
                        (((((xmath).xisnan)).apply ((xx))).or ((((xmath).xisnan)).apply ((xy)))).if
                          (((((xmath).xisnan)).apply ((xx))).and ((((xmath).xisnan)).apply ((xy)))).if
                            (((unsupported)).apply)
                          ((xx).eq (xy)).if
                            ((xx).neq 0.0).if
                              (((unsupported)).apply)
                              (((((xmath).xcopysign)).apply (1.0) ((xx))).eq ((((xmath).xcopysign)).apply (1.0) ((xy)))).if
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xmsg)) (": zeros have different signs"))
                        bogusForceDataize.write ((((xself).xfail)).apply (((((xmsg).xformat)).apply ((xx)) ((xy)))))
                xassertComplexIdentical.write
                  [xself xx xy]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFloatIdentical)).apply (((xx).xreal)) (((xy).xreal)))
                        bogusForceDataize.write ((((xself).xassertFloatIdentical)).apply (((xx).ximag)) (((xy).ximag)))
                xrAssertAlmostEqual.write
                  [xself xa xb xrel_err xabs_err xmsg]
                    memory > xabsolute_error
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xmath).xisnan)).apply ((xa))).if
                          seq
                            ((((xmath).xisnan)).apply ((xb))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (((xmsg).or ((("{!r} should be nan".xformat)).apply ((xb))))))
                        ((((xmath).xisinf)).apply ((xa))).if
                          seq
                            ((xa).eq (xb)).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (((xmsg).or ((("finite result where infinity expected: expected {!r}, got {!r}".xformat)).apply ((xa)) ((xb))))))
                        (((xa).not).and ((xb).not)).if
                          (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((xa))).neq ((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((xb)))).if
                            bogusForceDataize.write ((((xself).xfail)).apply (((xmsg).or ((("zero has wrong sign: expected {!r}, got {!r}".xformat)).apply ((xa)) ((xb))))))
                        (((unsupported)).apply ((xOverflowError)))
                          xabsolute_error.write (((xabs)).apply (((xb).sub (xa))))
                          ((xabsolute_error).leq (((xmax)).apply ((xabs_err)) (((xrel_err).mul (((xabs)).apply ((xa))))))).if
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xfail)).apply (((xmsg).or ((("{!r} and {!r} are not sufficiently close".xformat)).apply ((xa)) ((xb))))))
                xtest_constants.write
                  [xself]
                    memory > xe_expected
                    memory > xpi_expected
                    seq > @
                      seq
                        xe_expected.write 2.71828182845904523536
                        xpi_expected.write 3.14159265358979323846
                        (((unsupported)).apply (((xself).xassertAlmostEqual)) (((xcmath).xpi)) ((xpi_expected)) (9) (((("cmath.pi is {}; should be {}".xformat)).apply (((xcmath).xpi)) ((xpi_expected)))))
                        (((unsupported)).apply (((xself).xassertAlmostEqual)) (((xcmath).xe)) ((xe_expected)) (9) (((("cmath.e is {}; should be {}".xformat)).apply (((xcmath).xe)) ((xe_expected)))))
                xtest_infinity_and_nan_constants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xinf).xreal)) (((xmath).xinf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xinf).ximag)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xinfj).xreal)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xinfj).ximag)) (((xmath).xinf)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xcmath).xnan).xreal)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xnan).ximag)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcmath).xnanj).xreal)) (0.0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xcmath).xnanj).ximag)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xcmath).xinf)))) ("inf"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xcmath).xinfj)))) ("infj"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xcmath).xnan)))) ("nan"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xcmath).xnanj)))) ("nanj"))
                xtest_user_object.write
                  [xself]
                    memory > x__complex__
                    memory > xcx_arg
                    memory > x__index__
                    memory > xflt_arg
                    memory > x__init__
                    memory > x__float__
                    memory > x__int__
                    memory > xnon_complexes
                    seq > @
                      seq
                        xcx_arg.write (4.419414439.add (((unsupported)).apply))
                        xflt_arg.write (6.131677725.neg)
                        xnon_complexes.write (((unsupported)).apply ("not complex") (1) (5) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?") ((((xobject)).apply)) ((xNotImplemented)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__complex__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__complex__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          x__complex__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xSomeException)))
                        (((unsupported)).apply)
                          x__complex__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xSomeException)))
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__int__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (2))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (2))
                        (((unsupported)).apply)
                          x__int__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (2))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__float__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xflt_arg)))
                            x__complex__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xcx_arg)))
                        (((unsupported)).apply)
                          seq
                            x__float__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xflt_arg)))
                            x__complex__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xcx_arg)))
                        (((unsupported)).apply ((xobject)))
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xflt_arg)))
                        (((unsupported)).apply)
                          x__float__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xflt_arg)))
                        (((unsupported)).apply ((xf)) (((xself).xtest_functions)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xMyComplex)).apply ((xcx_arg)))))) ((((xf)).apply ((xcx_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xMyComplexOS)).apply ((xcx_arg)))))) ((((xf)).apply ((xcx_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xFloatAndComplex)).apply)))) ((((xf)).apply ((xcx_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xFloatAndComplexOS)).apply)))) ((((xf)).apply ((xcx_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xJustFloat)).apply)))) ((((xf)).apply ((xflt_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xJustFloatOS)).apply)))) ((((xf)).apply ((xflt_arg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xIndex)).apply)))) ((((xf)).apply ((((xint)).apply ((((xIndex)).apply)))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((xNeitherComplexNorFloat)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((xMyInt)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xException)) ((xf)) ((((xNeitherComplexNorFloatOS)).apply)))
                            (((unsupported)).apply ((xbad_complex)) ((xnon_complexes)))
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((xMyComplex)).apply ((xbad_complex)))))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((xMyComplexOS)).apply ((xbad_complex)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSomeException)) ((xf)) ((((xMyComplexException)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSomeException)) ((xf)) ((((xMyComplexExceptionOS)).apply)))
                xtest_input_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xf)) (((xself).xtest_functions)))
                          (((unsupported)).apply ((xarg)) ((((unsupported)).apply (2) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xarg)))) ((((xf)).apply (((((xarg).x__float__)).apply)))))
                        (((unsupported)).apply ((xf)) (((xself).xtest_functions)))
                          (((unsupported)).apply ((xarg)) ((((unsupported)).apply ("a") ("long_string") ("0") ("1j") (""))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((xarg)))
                xtest_cmath_matches_math.write
                  [xself]
                    memory > xtest_functions
                    memory > xunit_interval
                    memory > xpositive
                    memory > xreal_line
                    memory > xcomplex_fn
                    memory > xnonnegative
                    memory > xtest_values
                    memory > xfloat_fn
                    memory > xz
                    seq > @
                      seq
                        xtest_values.write (((unsupported)).apply (0.01) (0.1) (0.2) (0.5) (0.9) (0.99))
                        xunit_interval.write (((xtest_values).add (((unsupported)).apply (((xx).neg)) ((xx)) ((xtest_values)))).add (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) (((((unsupported)).apply).neg))))
                        xpositive.write (((xtest_values).add (((unsupported)).apply ((((unsupported)).apply)))).add (((unsupported)).apply (((((unsupported)).apply).div (xx))) ((xx)) ((xtest_values))))
                        xnonnegative.write ((((unsupported)).apply ((((unsupported)).apply))).add (xpositive))
                        xreal_line.write (((((unsupported)).apply ((((unsupported)).apply))).add (xpositive)).add (((unsupported)).apply (((xx).neg)) ((xx)) ((xpositive))))
                        xtest_functions.write (((unsupported)).apply ("acos") ((xunit_interval)) ("asin") ((xunit_interval)) ("atan") ((xreal_line)) ("cos") ((xreal_line)) ("cosh") ((xreal_line)) ("exp") ((xreal_line)) ("log") ((xpositive)) ("log10") ((xpositive)) ("sin") ((xreal_line)) ("sinh") ((xreal_line)) ("sqrt") ((xnonnegative)) ("tan") ((xreal_line)) ("tanh") ((xreal_line)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfn)) ((xvalues)))) (((((xtest_functions).xitems)).apply)))
                          seq
                            xfloat_fn.write (((xgetattr)).apply ((xmath)) ((xfn)))
                            xcomplex_fn.write (((xgetattr)).apply ((xcmath)) ((xfn)))
                            (((unsupported)).apply ((xv)) ((xvalues)))
                              seq
                                xz.write (((xcomplex_fn)).apply ((xv)))
                                bogusForceDataize.write ((((xself).xrAssertAlmostEqual)).apply ((((xfloat_fn)).apply ((xv)))) (((xz).xreal)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((xz).ximag)))
                        (((unsupported)).apply ((xbase)) ((((unsupported)).apply (0.5) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          (((unsupported)).apply ((xv)) ((xpositive)))
                            seq
                              xz.write ((((xcmath).xlog)).apply ((xv)) ((xbase)))
                              bogusForceDataize.write ((((xself).xrAssertAlmostEqual)).apply (((((xmath).xlog)).apply ((xv)) ((xbase)))) (((xz).xreal)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((xz).ximag)))
                xtest_specific_values.write
                  [xself]
                    memory > xexpected
                    memory > xarg
                    memory > xosx_version
                    memory > xSKIP_ON_TIGER
                    memory > xrect_complex
                    memory > xreal_abs_err
                    memory > xactual
                    memory > xversion_txt
                    memory > xfunction
                    memory > xerror_message
                    memory > xpolar_complex
                    seq > @
                      (((unsupported)).apply)
                        xSKIP_ON_TIGER.write (((unsupported)).apply ("tan0064"))
                        xosx_version.write "None: is there a None literal in the EO language?"
                        (((xsys).xplatform).eq "darwin").if
                          seq
                            xversion_txt.write (((unsupported)).apply (((((xplatform).xmac_ver)).apply)) (0))
                            (((unsupported)).apply ((xValueError)))
                              xosx_version.write (((xtuple)).apply ((((xmap)).apply ((xint)) (((((xversion_txt).xsplit)).apply ("."))))))
                        xrect_complex.write
                          [xz]
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply (((((xcmath).xrect)).apply (((xz).xreal)) (((xz).ximag)))))
                        xpolar_complex.write
                          [xz]
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xcomplex)).apply ((((unsupported)).apply ((((xpolar)).apply ((xz)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((xar)) ((xai)) ((xer)) ((xei)) ((xflags)))) ((((xparse_testfile)).apply ((xtest_file)))))
                          seq
                            xarg.write (((xcomplex)).apply ((xar)) ((xai)))
                            xexpected.write (((xcomplex)).apply ((xer)) ((xei)))
                            ((((unsupported)).apply ((xosx_version)) ("None: is there a None literal in the EO language?")).and ((xosx_version).less (((unsupported)).apply (10) (5)))).if
                              (((unsupported)).apply ((xid)) ((xSKIP_ON_TIGER))).if
                                (((unsupported)).apply)
                            ((xfn).eq "rect").if
                              xfunction.write (xrect_complex)
                              ((xfn).eq "polar").if
                                xfunction.write (xpolar_complex)
                                xfunction.write (((xgetattr)).apply ((xcmath)) ((xfn)))
                            ((((unsupported)).apply ("divide-by-zero") ((xflags))).or (((unsupported)).apply ("invalid") ((xflags)))).if
                              (((unsupported)).apply ((xValueError)))
                                xactual.write (((xfunction)).apply ((xarg)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xfail)).apply (((("ValueError not raised in test {}: {}(complex({!r}, {!r}))".xformat)).apply ((xid)) ((xfn)) ((xar)) ((xai)))))
                            (((unsupported)).apply ("overflow") ((xflags))).if
                              (((unsupported)).apply ((xOverflowError)))
                                xactual.write (((xfunction)).apply ((xarg)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xfail)).apply (((("OverflowError not raised in test {}: {}(complex({!r}, {!r}))".xformat)).apply ((xid)) ((xfn)) ((xar)) ((xai)))))
                            xactual.write (((xfunction)).apply ((xarg)))
                            (((unsupported)).apply ("ignore-real-sign") ((xflags))).if
                              seq
                                xactual.write (((xcomplex)).apply ((((xabs)).apply (((xactual).xreal)))) (((xactual).ximag)))
                                xexpected.write (((xcomplex)).apply ((((xabs)).apply (((xexpected).xreal)))) (((xexpected).ximag)))
                            (((unsupported)).apply ("ignore-imag-sign") ((xflags))).if
                              seq
                                xactual.write (((xcomplex)).apply (((xactual).xreal)) ((((xabs)).apply (((xactual).ximag)))))
                                xexpected.write (((xcomplex)).apply (((xexpected).xreal)) ((((xabs)).apply (((xexpected).ximag)))))
                            (((unsupported)).apply ((xfn)) ((((unsupported)).apply ("log") ("log10")))).if
                              xreal_abs_err.write (((unsupported)).apply)
                              xreal_abs_err.write (((unsupported)).apply)
                            xerror_message.write ((("{}: {}(complex({!r}, {!r}))nExpected: complex({!r}, {!r})nReceived: complex({!r}, {!r})nReceived value insufficiently close to expected value.".xformat)).apply ((xid)) ((xfn)) ((xar)) ((xai)) (((xexpected).xreal)) (((xexpected).ximag)) (((xactual).xreal)) (((xactual).ximag)))
                            (((unsupported)).apply (((xself).xrAssertAlmostEqual)) (((xexpected).xreal)) (((xactual).xreal)) ((xreal_abs_err)) ((xerror_message)))
                            (((unsupported)).apply (((xself).xrAssertAlmostEqual)) (((xexpected).ximag)) (((xactual).ximag)) ((xerror_message)))
                xcheck_polar.write
                  [xself xfunc]
                    memory > xcheck
                    memory > xinf
                    memory > xnan
                    seq > @
                      seq
                        xcheck.write
                          [xarg xexpected]
                            memory > xgot
                            seq > @
                              seq
                                xgot.write (((xfunc)).apply ((xarg)))
                                (((unsupported)).apply ((((unsupported)).apply ((xe)) ((xg)))) ((((xzip)).apply ((xexpected)) ((xgot)))))
                                  bogusForceDataize.write ((((xself).xrAssertAlmostEqual)).apply ((xe)) ((xg)))
                        bogusForceDataize.write (((xcheck)).apply (0) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xcheck)).apply (1) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xcheck)).apply ((1.neg)) ((((unsupported)).apply ((((unsupported)).apply)) ((xpi)))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) (((xpi).div 2)))))
                        bogusForceDataize.write (((xcheck)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply ((((unsupported)).apply)) ((((xpi).neg).div 2)))))
                        xinf.write (((xfloat)).apply ("inf"))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xinf)) (0))) ((((unsupported)).apply ((xinf)) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (((xinf).neg)) (0))) ((((unsupported)).apply ((xinf)) ((xpi)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (3) ((xinf)))) ((((unsupported)).apply ((xinf)) (((xpi).div 2)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (5) (((xinf).neg)))) ((((unsupported)).apply ((xinf)) ((((xpi).neg).div 2)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xinf)) ((xinf)))) ((((unsupported)).apply ((xinf)) (((xpi).div 4)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xinf)) (((xinf).neg)))) ((((unsupported)).apply ((xinf)) ((((xpi).neg).div 4)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (((xinf).neg)) ((xinf)))) ((((unsupported)).apply ((xinf)) (((3.mul (xpi)).div 4)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (((xinf).neg)) (((xinf).neg)))) ((((unsupported)).apply ((xinf)) ((((3.neg).mul (xpi)).div 4)))))
                        xnan.write (((xfloat)).apply ("nan"))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xnan)) (0))) ((((unsupported)).apply ((xnan)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (0) ((xnan)))) ((((unsupported)).apply ((xnan)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xnan)) ((xnan)))) ((((unsupported)).apply ((xnan)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xinf)) ((xnan)))) ((((unsupported)).apply ((xinf)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply (((xinf).neg)) ((xnan)))) ((((unsupported)).apply ((xinf)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xnan)) ((xinf)))) ((((unsupported)).apply ((xinf)) ((xnan)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcomplex)).apply ((xnan)) (((xinf).neg)))) ((((unsupported)).apply ((xinf)) ((xnan)))))
                xtest_polar.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_polar)).apply ((xpolar)))
                xtest_polar_errno.write
                  [xself]
                    memory > xpolar_with_errno_set
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xpolar_with_errno_set.write
                          [xz]
                            seq > @
                              seq
                                bogusForceDataize.write (((xset_errno)).apply (11))
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((xpolar)).apply ((xz)))))
                                  bogusForceDataize.write (((xset_errno)).apply (0))
                        bogusForceDataize.write ((((xself).xcheck_polar)).apply ((xpolar_with_errno_set)))
                xtest_phase.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply (0))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply (((((unsupported)).apply).neg)))) ((xpi)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((((unsupported)).apply).neg).add (((unsupported)).apply))))) ((xpi)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((((unsupported)).apply).neg).sub (((unsupported)).apply))))) (((xpi).neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((unsupported)).apply)))) (((xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply (((((unsupported)).apply).neg)))) ((((xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (0.0) (0.0))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (0.0) ((0.0.neg)))))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((0.0.neg)) (0.0))))) ((xpi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((0.0.neg)) ((0.0.neg)))))) (((xpi).neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) ((0.0.neg)))))) (((xpi).neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) ((2.3.neg)))))) (((xpi).neg)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) (((xINF).neg)))))) (((0.75.neg).mul (xpi))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((2.3.neg)) (((xINF).neg)))))) ((((xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((0.0.neg)) (((xINF).neg)))))) ((((xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (0.0) (((xINF).neg)))))) ((((xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (2.3) (((xINF).neg)))))) ((((xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) (((xINF).neg)))))) ((((xpi).neg).div 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) ((2.3.neg)))))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) ((0.0.neg)))))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) (0.0))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) (2.3))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((xINF)) ((xINF)))))) (((xpi).div 4)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (2.3) ((xINF)))))) (((xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (0.0) ((xINF)))))) (((xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((0.0.neg)) ((xINF)))))) (((xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply ((2.3.neg)) ((xINF)))))) (((xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) ((xINF)))))) ((0.75.mul (xpi))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) (2.3))))) ((xpi)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xphase)).apply ((((xcomplex)).apply (((xINF).neg)) (0.0))))) ((xpi)))
                        (((unsupported)).apply ((xz)) ((xcomplex_nans)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xphase)).apply ((xz)))))))
                xtest_abs.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xz)) ((xcomplex_zeros)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((xz)))) (0.0))
                        (((unsupported)).apply ((xz)) ((xcomplex_infinities)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((xz)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) (((xINF).neg)))))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) ((2.3.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) ((0.0.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) (0.0))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) (2.3))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) ((xINF)))))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((((xcomplex)).apply (((xINF).neg)) ((xNAN)))))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((2.3.neg)) ((xNAN)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((0.0.neg)) ((xNAN)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply (0.0) ((xNAN)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply (2.3) ((xNAN)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply ((((xcomplex)).apply ((xINF)) ((xNAN)))))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xabs)).apply ((((xcomplex)).apply ((xNAN)) ((xNAN)))))))))
                xtest_abs_overflows.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xabs)) ((((xcomplex)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xassertCEqual.write
                  [xself xa xb]
                    memory > xeps
                    seq > @
                      seq
                        xeps.write (((unsupported)).apply)
                        (((((xabs)).apply ((((xa).xreal).sub (((unsupported)).apply ((xb)) (0))))).greater (xeps)).or ((((xabs)).apply ((((xa).ximag).sub (((unsupported)).apply ((xb)) (1))))).greater (xeps))).if
                          bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                xtest_rect.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertCEqual)).apply ((((xrect)).apply (0) (0))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertCEqual)).apply ((((xrect)).apply (1) (0))) ((((unsupported)).apply ((((unsupported)).apply)) (0))))
                        bogusForceDataize.write ((((xself).xassertCEqual)).apply ((((xrect)).apply (1) (((xpi).neg)))) ((((unsupported)).apply (((((unsupported)).apply).neg)) (0))))
                        bogusForceDataize.write ((((xself).xassertCEqual)).apply ((((xrect)).apply (1) (((xpi).div 2)))) ((((unsupported)).apply (0) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertCEqual)).apply ((((xrect)).apply (1) ((((xpi).neg).div 2)))) ((((unsupported)).apply (0) (((((unsupported)).apply).neg)))))
                xtest_isfinite.write
                  [xself]
                    memory > xz
                    memory > xreal_vals
                    seq > @
                      seq
                        xreal_vals.write (((unsupported)).apply ((((xfloat)).apply ("-inf"))) ((2.3.neg)) ((0.0.neg)) (0.0) (2.3) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("nan"))))
                        (((unsupported)).apply ((xx)) ((xreal_vals)))
                          (((unsupported)).apply ((xy)) ((xreal_vals)))
                            seq
                              xz.write (((xcomplex)).apply ((xx)) ((xy)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcmath).xisfinite)).apply ((xz)))) ((((((xmath).xisfinite)).apply ((xx))).and ((((xmath).xisfinite)).apply ((xy))))))
                xtest_isnan.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisnan)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisnan)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisnan)).apply ((xINF)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((xNAN)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((((xcomplex)).apply ((xNAN)) (0))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((((xcomplex)).apply (0) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((((xcomplex)).apply ((xNAN)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((((xcomplex)).apply ((xNAN)) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisnan)).apply ((((xcomplex)).apply ((xINF)) ((xNAN)))))))
                xtest_isinf.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisinf)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisinf)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xcmath).xisinf)).apply ((xNAN)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((xINF)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((((xcomplex)).apply ((xINF)) (0))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((((xcomplex)).apply (0) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((((xcomplex)).apply ((xINF)) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((((xcomplex)).apply ((xNAN)) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcmath).xisinf)).apply ((((xcomplex)).apply ((xINF)) ((xNAN)))))))
                xtestTanhSign.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xz)) ((xcomplex_zeros)))
                          bogusForceDataize.write ((((xself).xassertComplexIdentical)).apply (((((xcmath).xtanh)).apply ((xz)))) ((xz)))
                xtestAtanSign.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xz)) ((xcomplex_zeros)))
                          bogusForceDataize.write ((((xself).xassertComplexIdentical)).apply (((((xcmath).xatan)).apply ((xz)))) ((xz)))
                xtestAtanhSign.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xz)) ((xcomplex_zeros)))
                          bogusForceDataize.write ((((xself).xassertComplexIdentical)).apply (((((xcmath).xatanh)).apply ((xz)))) ((xz)))
            (((unsupported)).apply (((xtest_math).xIsCloseTests)))
              seq
                xisclose.write ((xcmath).xisclose)
                xtest_reject_complex_tolerances.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xisclose)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xisclose)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xisclose)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_complex_values.write
                  [xself]
                    memory > xcomplex_examples
                    seq > @
                      seq
                        xcomplex_examples.write (((unsupported)).apply ((((unsupported)).apply ((1.0.add (((unsupported)).apply))) ((1.000000000001.add (((unsupported)).apply))))) ((((unsupported)).apply ((1.0.add (((unsupported)).apply))) ((1.0.add (((unsupported)).apply))))) ((((unsupported)).apply (((1.0.neg).add (((unsupported)).apply))) (((1.000000000001.neg).add (((unsupported)).apply))))) ((((unsupported)).apply ((1.0.sub (((unsupported)).apply))) ((1.0.sub (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xcomplex_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xcomplex_examples)) ((((unsupported)).apply)))
                xtest_complex_near_zero.write
                  [xself]
                    memory > xnear_zero_examples
                    seq > @
                      seq
                        xnear_zero_examples.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (0))) ((((unsupported)).apply (0.001) (0))) ((((unsupported)).apply ((0.001.add (((unsupported)).apply))) (0))) ((((unsupported)).apply (((0.001.neg).add (((unsupported)).apply))) (0))) ((((unsupported)).apply ((0.001.sub (((unsupported)).apply))) (0))) ((((unsupported)).apply (((0.001.neg).sub (((unsupported)).apply))) (0))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xnear_zero_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xnear_zero_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertIsClose)) ((0.001.sub (((unsupported)).apply))) ((0.001.add (((unsupported)).apply))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertIsNotClose)) ((0.001.sub (((unsupported)).apply))) ((0.001.add (((unsupported)).apply))) ((((unsupported)).apply)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)