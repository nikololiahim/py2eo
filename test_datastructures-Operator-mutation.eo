memory > xd
memory > xcopy
memory > xAttributeError
memory > xImmutableList
memory > xstr
memory > xMultiValueDict
memory > xrange
memory > xvalue
memory > xcollections
memory > xreversed
memory > xOrderedSet
memory > xCaseInsensitiveMapping
memory > xsorted
memory > xMultiValueDictKeyError
memory > xobject
memory > xpickle
memory > xlist
memory > xValueError
memory > xDictWrapper
memory > xcopy_func
memory > xset
memory > xrepr
memory > xlen
memory > xdict
memory > xSimpleTestCase
memory > xTypeError
memory > xkey
[] > test_datastructures
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_create_with_invalid_key
        memory > xtest_create_with_invalid_values
        memory > xtest_equal
        memory > xtest_dictwrapper
        memory > xtest_bool
        memory > xtest_getlist_default
        memory > xtest_in
        memory > xtest_update_with_iterable_of_pairs
        memory > xtest_dict
        memory > xtest_reversed
        memory > xtest_update_multivaluedict_arg
        memory > xtest_items
        memory > xtest_multivaluedict
        memory > xtest_init_with_iterable
        memory > xtest_getlist_doesnt_mutate
        memory > xtest_pickle
        memory > xtest_del
        memory > xtest_update_with_empty_iterable
        memory > xtest_repr
        memory > xsetUp
        memory > xtest_remove
        memory > xtest_deepcopy
        memory > xtest_custom_warning
        memory > xtest_dict_translation
        memory > xtest_discard
        memory > xtest_update_kwargs
        memory > xtest_copy
        memory > xtest_getitem
        memory > xtest_update_dict_arg
        memory > xtest_sort
        memory > xtest_str
        memory > xtest_internal_getlist_does_mutate
        memory > xtest_contains
        memory > xtest_getlist_none_empty_values
        memory > xtest_appendlist
        memory > xtest_setitem
        memory > xtest_update_raises_correct_exceptions
        memory > xtest_len
        memory > xtest_set
        memory > xtest_update_no_args
        memory > xtest_setdefault
        memory > xtest_list
        memory > xtest_update_too_many_args
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_init_with_iterable.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((((xs).xdict).xkeys)).apply)))) ((((unsupported)).apply (1) (2) (3))))
                xtest_remove.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (0))
                        bogusForceDataize.write ((((xs).xadd)).apply (1))
                        bogusForceDataize.write ((((xs).xadd)).apply (2))
                        bogusForceDataize.write ((((xs).xremove)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (1))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (2) ((xs)))
                xtest_discard.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (0))
                        bogusForceDataize.write ((((xs).xadd)).apply (1))
                        bogusForceDataize.write ((((xs).xdiscard)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (1))
                xtest_reversed.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xreversed)).apply ((((xOrderedSet)).apply ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xs)) ((((xcollections).xabc).xIterator)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xs)))) ((((unsupported)).apply (3) (2) (1))))
                xtest_contains.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (0))
                        bogusForceDataize.write ((((xs).xadd)).apply (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (1) ((xs)))
                xtest_bool.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xs)))
                        bogusForceDataize.write ((((xs).xadd)).apply (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xs)))
                xtest_len.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xOrderedSet)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (0))
                        bogusForceDataize.write ((((xs).xadd)).apply (1))
                        bogusForceDataize.write ((((xs).xadd)).apply (2))
                        bogusForceDataize.write ((((xs).xadd)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (2))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOrderedSet)).apply)))) ("OrderedSet()"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xOrderedSet)).apply ((((unsupported)).apply (2) (3) (2) (1))))))) ("OrderedSet([2, 3, 1])"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_repr.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xMultiValueDict)).apply ((((unsupported)).apply ("key") ("value"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("<MultiValueDict: {'key': 'value'}>"))
                xtest_multivaluedict.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xMultiValueDict)).apply ((((unsupported)).apply ("name") ((((unsupported)).apply ("Adrian") ("Simon"))) ("position") ((((unsupported)).apply ("Developer"))) ("empty") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("name"))) ("Simon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("name"))) ("Simon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xgetlist)).apply ("name"))) ((((unsupported)).apply ("Adrian") ("Simon"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("name") ("Simon"))) ((((unsupported)).apply ("position") ("Developer"))) ((((unsupported)).apply ("empty") ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("name") ((((unsupported)).apply ("Adrian") ("Simon"))))) ((((unsupported)).apply ("position") ((((unsupported)).apply ("Developer"))))) ((((unsupported)).apply ("empty") ((((unsupported)).apply)))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xMultiValueDictKeyError)) ("'lastname'"))))
                          bogusForceDataize.write ((((xd).x__getitem__)).apply ("lastname"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xd).xget)).apply ("empty"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("empty") ("nonexistent"))) ("nonexistent"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xd).xget)).apply ("lastname"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("lastname") ("nonexistent"))) ("nonexistent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xgetlist)).apply ("lastname"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xgetlist)).apply ("doesnotexist") ((((unsupported)).apply ("Adrian") ("Simon"))))) ((((unsupported)).apply ("Adrian") ("Simon"))))
                        bogusForceDataize.write ((((xd).xsetlist)).apply ("lastname") ((((unsupported)).apply ("Holovaty") ("Willison"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xgetlist)).apply ("lastname"))) ((((unsupported)).apply ("Holovaty") ("Willison"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xvalues)).apply)))) ((((unsupported)).apply ("Simon") ("Developer") ((((unsupported)).apply)) ("Willison"))))
                xtest_appendlist.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xMultiValueDict)).apply)
                        bogusForceDataize.write ((((xd).xappendlist)).apply ("name") ("Adrian"))
                        bogusForceDataize.write ((((xd).xappendlist)).apply ("name") ("Simon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xgetlist)).apply ("name"))) ((((unsupported)).apply ("Adrian") ("Simon"))))
                xtest_copy.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    seq > @
                      (((unsupported)).apply ((xcopy_func)) ((((unsupported)).apply (((xcopy).xcopy)) ((((unsupported)).apply (((((xd).xcopy)).apply)))))))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((xcopy_func)))))
                          seq
                            xd1.write (((xMultiValueDict)).apply ((((unsupported)).apply ("developers") ((((unsupported)).apply ("Carl") ("Fred"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd1)) ("developers"))) ("Fred"))
                            xd2.write (((xcopy_func)).apply ((xd1)))
                            bogusForceDataize.write ((((xd2).xupdate)).apply ((((unsupported)).apply ("developers") ("Groucho"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd2)) ("developers"))) ("Groucho"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd1)) ("developers"))) ("Fred"))
                            xd1.write (((xMultiValueDict)).apply ((((unsupported)).apply ("key") ((((unsupported)).apply ((((unsupported)).apply)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd1)) ("key"))) ((((unsupported)).apply)))
                            xd2.write (((xcopy_func)).apply ((xd1)))
                            bogusForceDataize.write ((((((unsupported)).apply ((xd2)) ("key")).xappend)).apply ("Penguin"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd1)) ("key"))) ((((unsupported)).apply ("Penguin"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd2)) ("key"))) ((((unsupported)).apply ("Penguin"))))
                xtest_deepcopy.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    memory > xd3
                    seq > @
                      seq
                        xd1.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ((((unsupported)).apply (123))))))))
                        xd2.write ((((xcopy).xcopy)).apply ((xd1)))
                        xd3.write ((((xcopy).xdeepcopy)).apply ((xd1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xd1)) ("a"))) ((((unsupported)).apply ((xd2)) ("a"))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xd1)) ("a"))) ((((unsupported)).apply ((xd3)) ("a"))))
                xtest_pickle.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ("1") ("2"))) ("b") ((((unsupported)).apply ("3"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xx)))))))
                xtest_dict_translation.write
                  [xself]
                    memory > xd
                    memory > xmvd
                    seq > @
                      seq
                        xmvd.write (((xMultiValueDict)).apply ((((unsupported)).apply ("devs") ((((unsupported)).apply ("Bob") ("Joe"))) ("pm") ((((unsupported)).apply ("Rory"))))))
                        xd.write ((((xmvd).xdict)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xd)))) ((((xlist)).apply ((xmvd)))))
                        (((unsupported)).apply ((xkey)) ((xmvd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xkey)))) ((((unsupported)).apply ((xmvd)) ((xkey)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((((((xMultiValueDict)).apply).xdict)).apply)))
                xtest_getlist_doesnt_mutate.write
                  [xself]
                    memory > xx
                    memory > xvalues
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ("1") ("2"))) ("b") ((((unsupported)).apply ("3"))))))
                        xvalues.write ((((xx).xgetlist)).apply ("a"))
                        (((unsupported)).apply ((xvalues)) (((((xx).xgetlist)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xgetlist)).apply ("a"))) ((((unsupported)).apply ("1") ("2"))))
                xtest_internal_getlist_does_mutate.write
                  [xself]
                    memory > xx
                    memory > xvalues
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply ("1") ("2"))) ("b") ((((unsupported)).apply ("3"))))))
                        xvalues.write ((((xx).x_getlist)).apply ("a"))
                        (((unsupported)).apply ((xvalues)) (((((xx).x_getlist)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).x_getlist)).apply ("a"))) ((((unsupported)).apply ("1") ("2") ("3"))))
                xtest_getlist_default.write
                  [xself]
                    memory > xx
                    memory > xMISSING
                    memory > xvalues
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1))))))
                        xMISSING.write (((xobject)).apply)
                        xvalues.write (((unsupported)).apply (((xx).xgetlist)) ("b") ((xMISSING)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xvalues)) ((xMISSING)))
                xtest_getlist_none_empty_values.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xx).xgetlist)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xgetlist)).apply ("b"))) ((((unsupported)).apply)))
                xtest_setitem.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ("a"))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (3))))))))
                xtest_setdefault.write
                  [xself]
                    memory > xx
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))))
                        xa.write ((((xx).xsetdefault)).apply ("a") (3))
                        xb.write ((((xx).xsetdefault)).apply ("b") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ("b") ((((unsupported)).apply (3))))))))
                xtest_update_too_many_args.write
                  [xself]
                    memory > xx
                    memory > xmsg
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply)))))
                        xmsg.write "update expected at most 1 argument, got 2"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write ((((xx).xupdate)).apply (1) (2))
                xtest_update_no_args.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xx).xupdate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply)))))))
                xtest_update_dict_arg.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1))) ("b") ((((unsupported)).apply (2))) ("c") ((((unsupported)).apply (3))))))
                        bogusForceDataize.write ((((xx).xupdate)).apply ((((unsupported)).apply ("a") (4) ("b") (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (4))))) ((((unsupported)).apply ("b") ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ("c") ((((unsupported)).apply (3))))))))
                xtest_update_multivaluedict_arg.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1))) ("b") ((((unsupported)).apply (2))) ("c") ((((unsupported)).apply (3))))))
                        bogusForceDataize.write ((((xx).xupdate)).apply ((((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (4))) ("b") ((((unsupported)).apply (5))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (4))))) ((((unsupported)).apply ("b") ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ("c") ((((unsupported)).apply (3))))))))
                xtest_update_kwargs.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1))) ("b") ((((unsupported)).apply (2))) ("c") ((((unsupported)).apply (3))))))
                        (((unsupported)).apply (((xx).xupdate)) (4) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xx).xlists)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (4))))) ((((unsupported)).apply ("b") ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ("c") ((((unsupported)).apply (3))))))))
                xtest_update_with_empty_iterable.write
                  [xself]
                    memory > xd
                    seq > @
                      (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("") ("") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((xset)).apply)) ((((unsupported)).apply)))))
                        seq
                          xd.write (((xMultiValueDict)).apply)
                          bogusForceDataize.write ((((xd).xupdate)).apply ((xvalue)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xMultiValueDict)).apply)))
                xtest_update_with_iterable_of_pairs.write
                  [xself]
                    memory > xd
                    seq > @
                      (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))))))))
                        seq
                          xd.write (((xMultiValueDict)).apply)
                          bogusForceDataize.write ((((xd).xupdate)).apply ((xvalue)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xMultiValueDict)).apply ((((unsupported)).apply ("a") ((((unsupported)).apply (1))))))))
                xtest_update_raises_correct_exceptions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (FALSE) (123) (123.45))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xvalue)))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write ((((((xMultiValueDict)).apply).xupdate)).apply ((xvalue)))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("123") ("abc") ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xvalue)))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write ((((((xMultiValueDict)).apply).xupdate)).apply ((xvalue)))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("123") ("abc") ((((unsupported)).apply ("a") ("b") ("c"))) ((((unsupported)).apply ("a") ("b") ("c"))) ((((unsupported)).apply ("a") ("b") ("c"))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xvalue)))) (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((((xMultiValueDict)).apply).xupdate)).apply ((xvalue)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_sort.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((xImmutableList)).apply ((((xrange)).apply (10))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xAttributeError)) ("ImmutableList object is immutable."))))
                          bogusForceDataize.write ((((xd).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)"))
                xtest_custom_warning.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ((xImmutableList)) ((((xrange)).apply (10))) ("Object is immutable!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xAttributeError)) ("Object is immutable!"))))
                          bogusForceDataize.write ((((xd).x__setitem__)).apply (1) ("test"))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_dictwrapper.write
                [xself]
                  memory > xd
                  memory > xf
                  seq > @
                    seq
                      xf.write
                        [xx]
                          seq > @
                            (((unsupported)).apply (("*%s".mod (xx))))
                      xd.write (((xDictWrapper)).apply ((((unsupported)).apply ("a") ("a"))) ((xf)) ("xx_"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (("Normal: %(a)s. Modified: %(xx_a)s".mod (xd))) ("Normal: a. Modified: *a"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xdict1)) ((((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ("Accept") ("application/json") ("content-type") ("text/html"))))))
                xtest_create_with_invalid_values.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "dictionary update sequence element #1 has length 4; 2 is required"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ((((unsupported)).apply ("Key1") ("Val1"))) ("Key2"))))
                xtest_create_with_invalid_key.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Element key 1 invalid, only strings are allowed"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ((((unsupported)).apply (1) ("2"))))))
                xtest_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xself).xdict1)))) ((((unsupported)).apply ("Accept") ("content-type"))))
                xtest_dict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply (((xself).xdict1)))) ((((unsupported)).apply ("Accept") ("application/json") ("content-type") ("text/html"))))
                xtest_repr.write
                  [xself]
                    memory > xdict2
                    memory > xdict1
                    seq > @
                      seq
                        xdict1.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ("Accept") ("application/json"))))
                        xdict2.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ("content-type") ("text/html"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xdict1)))) ((((xrepr)).apply ((((unsupported)).apply ("Accept") ("application/json"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xdict2)))) ((((xrepr)).apply ((((unsupported)).apply ("content-type") ("text/html"))))))
                xtest_str.write
                  [xself]
                    memory > xdict2
                    memory > xdict1
                    seq > @
                      seq
                        xdict1.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ("Accept") ("application/json"))))
                        xdict2.write (((xCaseInsensitiveMapping)).apply ((((unsupported)).apply ("content-type") ("text/html"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xdict1)))) ((((xstr)).apply ((((unsupported)).apply ("Accept") ("application/json"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xdict2)))) ((((xstr)).apply ((((unsupported)).apply ("content-type") ("text/html"))))))
                xtest_equal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xdict1)) ((((unsupported)).apply ("Accept") ("application/json") ("content-type") ("text/html"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xself).xdict1)) ((((unsupported)).apply ("accept") ("application/jso") ("Content-Type") ("text/html"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xself).xdict1)) ("string"))
                xtest_items.write
                  [xself]
                    memory > xother
                    seq > @
                      seq
                        xother.write (((unsupported)).apply ("Accept") ("application/json") ("content-type") ("text/html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((((((xself).xdict1).xitems)).apply)))) ((((xsorted)).apply (((((xother).xitems)).apply)))))
                xtest_copy.write
                  [xself]
                    memory > xcopy
                    seq > @
                      seq
                        xcopy.write (((((xself).xdict1).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xcopy)) (((xself).xdict1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcopy)) (((xself).xdict1)))
                xtest_getitem.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("Accept"))) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("accept"))) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("aCCept"))) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("content-type"))) ("text/html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("Content-Type"))) ("text/html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xdict1)) ("Content-type"))) ("text/html"))
                xtest_in.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Accept") (((xself).xdict1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("accept") (((xself).xdict1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("aCCept") (((xself).xdict1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("content-type") (((xself).xdict1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Content-Type") (((xself).xdict1)))
                xtest_del.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Accept") (((xself).xdict1)))
                        xmsg.write "'CaseInsensitiveMapping' object does not support item deletion"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xdict1)) ("Accept"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Accept") (((xself).xdict1)))
                xtest_set.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xdict1)))) (2))
                        xmsg.write "'CaseInsensitiveMapping' object does not support item assignment"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xdict1)) ("New Key"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xdict1)))) (2))