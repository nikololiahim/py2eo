memory > xRangeError
memory > xc
memory > xc2
memory > xrange
memory > xis_normalized
memory > xunidata_version
memory > xc5
memory > xint
memory > xException
memory > xx
memory > xsys
memory > xOSError
memory > xPermissionError
memory > xunittest
memory > x__name__
memory > xc3
memory > xHTTPException
memory > xopen_urlresource
memory > xnormalize
memory > xchr
memory > xc4
[] > test_normalization
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xTESTDATAFILE
        memory > xrun_normalization_tests
        memory > xcheck_version
        memory > xtest_main
        memory > xtest_bug_834676
        memory > xNFKC
        memory > xNFD
        memory > xNFC
        memory > xunistr
        memory > xNFKD
        memory > xTESTDATAURL
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xTESTDATAFILE.write "NormalizationTest.txt"
            xTESTDATAURL.write ((("http://www.pythontest.net/unicode/".add (xunidata_version)).add "/").add (xTESTDATAFILE))
            xcheck_version.write
              [xtestfile]
                memory > xhdr
                seq > @
                  seq
                    xhdr.write ((xtestfile).xreadline)
                    (((unsupported)).apply ((((unsupported)).apply ((xunidata_version)) ((xhdr)))))
            (((unsupported)).apply ((xException)))
            xNFC.write
              [xstr]
                seq > @
                  (((unsupported)).apply ((((xnormalize)).apply ("NFC") ((xstr)))))
            xNFKC.write
              [xstr]
                seq > @
                  (((unsupported)).apply ((((xnormalize)).apply ("NFKC") ((xstr)))))
            xNFD.write
              [xstr]
                seq > @
                  (((unsupported)).apply ((((xnormalize)).apply ("NFD") ((xstr)))))
            xNFKD.write
              [xstr]
                seq > @
                  (((unsupported)).apply ((((xnormalize)).apply ("NFKD") ((xstr)))))
            xunistr.write
              [xdata]
                seq > @
                  seq
                    xdata.write (((unsupported)).apply ((((xint)).apply ((xx)) (16))) ((xx)) (((((xdata).xsplit)).apply (" "))))
                    (((unsupported)).apply ((xx)) ((xdata)))
                      ((xx).greater ((xsys).xmaxunicode)).if
                        (((unsupported)).apply ((xRangeError)))
                    (((unsupported)).apply (((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((xdata)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_main.write
                  [xself]
                    memory > xtestdata
                    seq > @
                      seq
                        (((unsupported)).apply ((xPermissionError)) ((((unsupported)).apply ((xOSError)) ((xHTTPException)))))
                          xtestdata.write (((unsupported)).apply ((xopen_urlresource)) ((xTESTDATAURL)) ("utf-8") ((xcheck_version)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("Permission error when downloading {TESTDATAURL} into the test data directory"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Could not retrieve {TESTDATAURL}"))
                        (((unsupported)).apply ((xtestdata)))
                          bogusForceDataize.write ((((xself).xrun_normalization_tests)).apply ((xtestdata)))
                xrun_normalization_tests.write
                  [xself xtestdata]
                    memory > xpart
                    memory > xX
                    memory > xpart1_data
                    memory > xline
                    memory > xc1
                    seq > @
                      seq
                        xpart.write "None: is there a None literal in the EO language?"
                        xpart1_data.write (((unsupported)).apply)
                        (((unsupported)).apply ((xline)) ((xtestdata)))
                          seq
                            (((unsupported)).apply ("#") ((xline))).if
                              xline.write (((unsupported)).apply (((((xline).xsplit)).apply ("#"))) (0))
                            xline.write ((xline).xstrip)
                            ((xline).not).if
                              (((unsupported)).apply)
                            ((((xline).xstartswith)).apply ("@Part")).if
                              seq
                                xpart.write (((unsupported)).apply (((xline).xsplit)) (0))
                                (((unsupported)).apply)
                            (((unsupported)).apply ((xRangeError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)) ((xc3)) ((xc4)) ((xc5)))) ((((unsupported)).apply ((((xunistr)).apply ((xx)))) ((xx)) ((((unsupported)).apply (((((xline).xsplit)).apply (";"))) ((((unsupported)).apply ((1.neg)))))))))
                              seq
                                ((xpart).eq "@Part1").if
                                  (((unsupported)).apply ((xRangeError)))
                                    xc1.write (((xunistr)).apply ((((unsupported)).apply (((((xline).xsplit)).apply (";"))) (0))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xpart1_data)) ((xc1)))) (1))
                                (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc2)) ((((xNFC)).apply ((xc1)))) ((((xNFC)).apply ((xc2)))) ((((xNFC)).apply ((xc3)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc4)) ((((xNFC)).apply ((xc4)))) ((((xNFC)).apply ((xc5)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc3)) ((((xNFD)).apply ((xc1)))) ((((xNFD)).apply ((xc2)))) ((((xNFD)).apply ((xc3)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc5)) ((((xNFD)).apply ((xc4)))) ((((xNFD)).apply ((xc5)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc4)) ((((xNFKC)).apply ((xc1)))) ((((xNFKC)).apply ((xc2)))) ((((xNFKC)).apply ((xc3)))) ((((xNFKC)).apply ((xc4)))) ((((xNFKC)).apply ((xc5)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xc5)) ((((xNFKD)).apply ((xc1)))) ((((xNFKD)).apply ((xc2)))) ((((xNFKD)).apply ((xc3)))) ((((xNFKD)).apply ((xc4)))) ((((xNFKD)).apply ((xc5)))))) ((xline)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFC") ((xc2)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFC") ((xc4)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFD") ((xc3)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFD") ((xc5)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFKC") ((xc4)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_normalized)).apply ("NFKD") ((xc5)))))
                            ((xpart).eq "@Part1").if
                              (((unsupported)).apply ((((unsupported)).apply ((xpart1_data)) ((xc1)))) (1))
                        (((unsupported)).apply ((xc)) ((((xrange)).apply ((((xsys).xmaxunicode).add 1)))))
                          seq
                            xX.write (((xchr)).apply ((xc)))
                            (((unsupported)).apply ((xX)) ((xpart1_data))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xX)) ((((xNFC)).apply ((xX)))) ((((xNFD)).apply ((xX)))) ((((xNFKC)).apply ((xX)))) ((((xNFKD)).apply ((xX)))))) ((xc)))
                xtest_bug_834676.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xnormalize)).apply ("NFC") ("ud55cuae00"))
            ((x__name__).eq "__main__").if
              unsupported