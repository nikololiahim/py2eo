memory > xModelAbstract
memory > xRelatedModelAbstract
memory > xAbstractDescendant
memory > xParentA
memory > xf
memory > xMixin2
memory > xChild
memory > xmodels
memory > xDescendantMixin
memory > xContentType
memory > xConcreteModel
memory > xFirstChild
memory > xFieldDoesNotExist
memory > xDerivedChild
memory > xConcreteModel2
memory > xConcreteParent
memory > xDescendant
memory > xFieldError
memory > xAbstractParent
memory > xExtendModelAbstract
memory > xAnotherChild
memory > xError
memory > xBar
memory > xRemovedAbstractModelField
memory > xAbstractModel
memory > xFoo
memory > xtype
memory > xParentB
memory > xhasattr
memory > xOverrideRelatedModelAbstract
memory > xGenericRelation
memory > xConcreteDescendant
memory > xGenericForeignKey
memory > xRoot
memory > xConcreteBase
memory > xgetattr
memory > xRelationModel
memory > xDerivedGrandChild
memory > xOverrideRemovedFieldByConcreteModel
memory > xMixin
memory > xAbstractBase
memory > xisolate_apps
memory > xSimpleTestCase
[] > test_abstract_inheritance
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_multi_inheritance_field_clashes
        memory > xtest_multiple_inheritance_allows_inherited_field
        memory > xtest_diamond_shaped_multiple_inheritance_is_depth_first
        memory > xtest_shadow_related_name_when_set_to_none
        memory > xtest_single_parent
        memory > xtest_abstract_model_with_regular_python_mixin_mro
        memory > xtest_override_field_with_attr
        memory > xtest_shadowed_fkey_id
        memory > xtest_virtual_field
        memory > xtest_target_field_may_be_pushed_down
        memory > xtest_multiple_inheritance_cannot_shadow_concrete_inherited_field
        memory > xtest_overriding_field_removed_by_concrete_model
        memory > xtest_cannot_override_indirect_abstract_field
        memory > xtest_reverse_foreign_key
        memory > xtest_override_one2one_relation_auto_field_clashes
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("model_inheritance"))))
              seq
                xtest_single_parent.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                        (((unsupported)).apply ((xAbstractDescendant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xAbstractDescendant).x_meta).xget_field)).apply ("name")).xmax_length)) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xDerivedChild).x_meta).xget_field)).apply ("name")).xmax_length)) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xDerivedGrandChild).x_meta).xget_field)).apply ("name")).xmax_length)) (50))
                xtest_multiple_inheritance_allows_inherited_field.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    memory > xinherited_field
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xParentA)) ((xParentB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xChild).xcheck)) ((((unsupported)).apply)))
                        xinherited_field.write (((((xChild).x_meta).xget_field)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinherited_field)) (((xmodels).xCharField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinherited_field).xmax_length)) (255))
                xtest_diamond_shaped_multiple_inheritance_is_depth_first.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    memory > xinherited_field
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xRoot)))
                          (((unsupported)).apply)
                            xabstract.write TRUE
                        (((unsupported)).apply ((xRoot)))
                          seq
                            xname.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xParentA)) ((xParentB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xChild).xcheck)) ((((unsupported)).apply)))
                        xinherited_field.write (((((xChild).x_meta).xget_field)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinherited_field)) (((xmodels).xCharField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinherited_field).xmax_length)) (255))
                xtest_target_field_may_be_pushed_down.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    memory > xinherited_field
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xRoot)))
                          (((unsupported)).apply)
                            xabstract.write TRUE
                        (((unsupported)).apply ((xRoot)))
                          seq
                            xname.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xParentA)) ((xParentB)))
                          xname.write ((xmodels).xIntegerField)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xChild).xcheck)) ((((unsupported)).apply)))
                        xinherited_field.write (((((xChild).x_meta).xget_field)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinherited_field)) (((xmodels).xIntegerField)))
                xtest_multiple_inheritance_cannot_shadow_concrete_inherited_field.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xConcreteParent)) ((xAbstractParent)))
                        (((unsupported)).apply ((xAbstractParent)) ((xConcreteParent)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((xFirstChild).x_meta).xget_field)).apply ("name"))) (((xmodels).xCharField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xAnotherChild).xcheck)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The field 'name' clashes with the field 'name' from model 'model_inheritance.concreteparent'.") ((((((xAnotherChild).x_meta).xget_field)).apply ("name"))) ("models.E006"))))))
                xtest_virtual_field.write
                  [xself]
                    memory > xfield
                    memory > xcontent_type
                    memory > xcontent_object
                    memory > xobject_id
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcontent_type.write ((((xmodels).xForeignKey)).apply ((xContentType)) (((xmodels).xCASCADE)))
                            xobject_id.write ((xmodels).xPositiveIntegerField)
                            xcontent_object.write (((xGenericForeignKey)).apply ("content_type") ("object_id"))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((xGenericRelation)).apply ((xRelationModel)))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((unsupported)).apply (((xmodels).xCharField)) (100))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xRelatedModelAbstract)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (100))
                        (((unsupported)).apply ((xModelAbstract)))
                          xfield.write (((xGenericRelation)).apply ((xRelationModel)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((xOverrideRelatedModelAbstract).x_meta).xget_field)).apply ("field"))) (((xmodels).xCharField)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((xExtendModelAbstract).x_meta).xget_field)).apply ("field"))) ((xGenericRelation)))
                xtest_cannot_override_indirect_abstract_field.write
                  [xself]
                    memory > xname
                    memory > xmsg
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                        xmsg.write "Local field 'name' in class 'Descendant' clashes with field of the same name from base class 'ConcreteDescendant'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldError)) ((xmsg)))))
                          (((unsupported)).apply ((xConcreteDescendant)))
                            xname.write ((xmodels).xIntegerField)
                xtest_override_field_with_attr.write
                  [xself]
                    memory > xlast_name
                    memory > xfull_name
                    memory > xmsg
                    memory > xfirst_name
                    memory > xmiddle_name
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfirst_name.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                            xlast_name.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                            xmiddle_name.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                            xfull_name.write (((unsupported)).apply (((xmodels).xCharField)) (150))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                          seq
                            xmiddle_name.write "None: is there a None literal in the EO language?"
                            xfull_name.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xself).xfirst_name).add ((xself).xlast_name))))
                        xmsg.write "Descendant has no field named %r"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldDoesNotExist)) (((xmsg).mod "middle_name")))))
                          bogusForceDataize.write (((((xDescendant).x_meta).xget_field)).apply ("middle_name"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldDoesNotExist)) (((xmsg).mod "full_name")))))
                          bogusForceDataize.write (((((xDescendant).x_meta).xget_field)).apply ("full_name"))
                xtest_overriding_field_removed_by_concrete_model.write
                  [xself]
                    memory > xabstract
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfoo.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractModel)))
                          xfoo.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xRemovedAbstractModelField)))
                          xfoo.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xOverrideRemovedFieldByConcreteModel).x_meta).xget_field)).apply ("foo")).xmax_length)) (50))
                xtest_shadowed_fkey_id.write
                  [xself]
                    memory > xabstract
                    memory > xfoo_id
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfoo.write ((((xmodels).xForeignKey)).apply ((xFoo)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                          xfoo_id.write ((xmodels).xIntegerField)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xDescendant).xcheck)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The field 'foo_id' clashes with the field 'foo' from model 'model_inheritance.descendant'.") ((((((xDescendant).x_meta).xget_field)).apply ("foo_id"))) ("models.E006"))))))
                xtest_shadow_related_name_when_set_to_none.write
                  [xself]
                    memory > xabstract
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xbar.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                          seq
                            xbar.write "None: is there a None literal in the EO language?"
                            xfoo.write ((xmodels).xIntegerField)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xbar.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xFoo)) (((xmodels).xCASCADE)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBar).xcheck)) ((((unsupported)).apply)))
                xtest_reverse_foreign_key.write
                  [xself]
                    memory > xabstract
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfoo.write (((unsupported)).apply (((xmodels).xCharField)) (100))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfoo.write (((unsupported)).apply (((xmodels).xForeignKey)) ((xDescendant)) (((xmodels).xCASCADE)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xFoo).x_meta).xget_field)).apply ("foo")).xcheck)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("Reverse accessor 'Descendant.foo' for 'model_inheritance.Foo.foo' clashes with field name 'model_inheritance.Descendant.foo'.") ("Rename field 'model_inheritance.Descendant.foo', or add/change a related_name argument to the definition for field 'model_inheritance.Foo.foo'.") ((((((xFoo).x_meta).xget_field)).apply ("foo"))) ("fields.E302"))) ((((unsupported)).apply ((xError)) ("Reverse query name for 'model_inheritance.Foo.foo' clashes with field name 'model_inheritance.Descendant.foo'.") ("Rename field 'model_inheritance.Descendant.foo', or add/change a related_name argument to the definition for field 'model_inheritance.Foo.foo'.") ((((((xFoo).x_meta).xget_field)).apply ("foo"))) ("fields.E303"))))))
                xtest_multi_inheritance_field_clashes.write
                  [xself]
                    memory > xname
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractBase)))
                        (((unsupported)).apply ((xConcreteBase)))
                          (((unsupported)).apply)
                            xabstract.write TRUE
                        (((unsupported)).apply ((xAbstractDescendant)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xConcreteDescendant).xcheck)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The field 'name' clashes with the field 'name' from model 'model_inheritance.concretebase'.") ((((((xConcreteDescendant).x_meta).xget_field)).apply ("name"))) ("models.E006"))))))
                xtest_override_one2one_relation_auto_field_clashes.write
                  [xself]
                    memory > xname
                    memory > xconcreteparent_ptr
                    memory > xmsg
                    memory > xabstract
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        xmsg.write "Auto-generated field 'concreteparent_ptr' in class 'Descendant' for parent_link to base class 'ConcreteParent' clashes with declared field of the same name."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldError)) ((xmsg)))))
                          (((unsupported)).apply ((xConcreteParent)) ((xAbstractParent)))
                            xconcreteparent_ptr.write (((unsupported)).apply (((xmodels).xCharField)) (30))
                xtest_abstract_model_with_regular_python_mixin_mro.write
                  [xself]
                    memory > xmodel2
                    memory > xmodel3
                    memory > xfields
                    memory > xmodel1
                    memory > xmodel4
                    memory > xabstract
                    memory > xname
                    memory > xmodel5
                    memory > xfoo
                    memory > xmodel_dict
                    memory > xage
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xage.write ((xmodels).xIntegerField)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply)
                          xage.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          xage.write 2
                        (((unsupported)).apply ((xMixin)))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfoo.write ((xmodels).xIntegerField)
                        (((unsupported)).apply ((xConcreteModel)))
                          xage.write ((xmodels).xSmallIntegerField)
                        xfields.write
                          [xmodel]
                            seq > @
                              seq
                                ((((xhasattr)).apply ((xmodel)) ("_meta")).not).if
                                  (((unsupported)).apply ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xf).xname)) (((xf).x__class__)))) ((xf)) ((((xmodel).x_meta).xget_fields)))))
                        xmodel_dict.write (((unsupported)).apply ("__module__") ("model_inheritance"))
                        xmodel1.write (((xtype)).apply ("Model1") ((((unsupported)).apply ((xAbstractModel)) ((xMixin)))) (((xmodel_dict).xcopy)))
                        xmodel2.write (((xtype)).apply ("Model2") ((((unsupported)).apply ((xMixin2)) ((xAbstractModel)))) (((xmodel_dict).xcopy)))
                        xmodel3.write (((xtype)).apply ("Model3") ((((unsupported)).apply ((xDescendantMixin)) ((xAbstractModel)))) (((xmodel_dict).xcopy)))
                        xmodel4.write (((xtype)).apply ("Model4") ((((unsupported)).apply ((xMixin2)) ((xMixin)) ((xAbstractModel)))) (((xmodel_dict).xcopy)))
                        xmodel5.write (((xtype)).apply ("Model5") ((((unsupported)).apply ((xMixin2)) ((xConcreteModel2)) ((xMixin)) ((xAbstractModel)))) (((xmodel_dict).xcopy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xmodel1)))) ((((unsupported)).apply ((((unsupported)).apply ("id") (((xmodels).xAutoField)))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))) ((((unsupported)).apply ("age") (((xmodels).xIntegerField)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xmodel2)))) ((((unsupported)).apply ((((unsupported)).apply ("id") (((xmodels).xAutoField)))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xmodel2)) ("age"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xmodel3)))) ((((unsupported)).apply ((((unsupported)).apply ("id") (((xmodels).xAutoField)))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xmodel4)))) ((((unsupported)).apply ((((unsupported)).apply ("id") (((xmodels).xAutoField)))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xmodel4)) ("age"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xmodel5)))) ((((unsupported)).apply ((((unsupported)).apply ("id") (((xmodels).xAutoField)))) ((((unsupported)).apply ("foo") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("concretemodel_ptr") (((xmodels).xOneToOneField)))) ((((unsupported)).apply ("age") (((xmodels).xSmallIntegerField)))) ((((unsupported)).apply ("concretemodel2_ptr") (((xmodels).xOneToOneField)))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))))))