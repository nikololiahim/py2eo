memory > xcm
memory > xlist
memory > xstr
memory > xhasattr
memory > xsupport
memory > xos
memory > xPermissionError
memory > xUnicodeEncodeError
memory > xunittest
memory > xexc
memory > xKeyError
memory > xentry
memory > xint
memory > xcx
memory > xTypeError
memory > x__name__
[] > test_spwd
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_getspall
        memory > xspwd
        memory > xtest_getspnam
        memory > xtest_getspnam_exception
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xspwd.write ((((xsupport).ximport_module)).apply ("spwd"))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply (((((xhasattr)).apply ((xos)) ("geteuid")).and (((((xos).xgeteuid)).apply).eq 0))) ("root privileges required"))))
              seq
                xtest_getspall.write
                  [xself]
                    memory > xentries
                    seq > @
                      seq
                        xentries.write ((((xspwd).xgetspall)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xentries)) ((xlist)))
                        (((unsupported)).apply ((xentry)) ((xentries)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xentry)) (((xspwd).xstruct_spwd)))
                xtest_getspnam.write
                  [xself]
                    memory > xentries
                    memory > xentry
                    memory > xrandom_name
                    memory > xbytes_name
                    seq > @
                      seq
                        xentries.write ((((xspwd).xgetspall)).apply)
                        ((xentries).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("empty shadow password database"))
                        xrandom_name.write ((((unsupported)).apply ((xentries)) (0)).xsp_namp)
                        xentry.write ((((xspwd).xgetspnam)).apply ((xrandom_name)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xentry)) (((xspwd).xstruct_spwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_namp)) ((xrandom_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_namp)) ((((unsupported)).apply ((xentry)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_namp)) (((xentry).xsp_nam)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_pwdp)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_pwdp)) ((((unsupported)).apply ((xentry)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_pwdp)) (((xentry).xsp_pwd)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_lstchg)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_lstchg)) ((((unsupported)).apply ((xentry)) (2))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_min)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_min)) ((((unsupported)).apply ((xentry)) (3))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_max)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_max)) ((((unsupported)).apply ((xentry)) (4))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_warn)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_warn)) ((((unsupported)).apply ((xentry)) (5))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_inact)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_inact)) ((((unsupported)).apply ((xentry)) (6))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_expire)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_expire)) ((((unsupported)).apply ((xentry)) (7))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xentry).xsp_flag)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xentry).xsp_flag)) ((((unsupported)).apply ((xentry)) (8))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))) ((xcx)))
                          bogusForceDataize.write ((((xspwd).xgetspnam)).apply ("invalid user name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcx).xexception)))) ("'getspnam(): name not found'"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xspwd).xgetspnam)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xspwd).xgetspnam)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xspwd).xgetspnam)) ((xrandom_name)) (0))
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          xbytes_name.write ((((xos).xfsencode)).apply ((xrandom_name)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xspwd).xgetspnam)) ((xbytes_name)))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply (((((xhasattr)).apply ((xos)) ("geteuid")).and (((((xos).xgeteuid)).apply).neq 0))) ("non-root user required"))))
              xtest_getspnam_exception.write
                [xself]
                  memory > xname
                  seq > @
                    seq
                      xname.write "bin"
                      (((unsupported)).apply ((xKeyError)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xPermissionError)))) ((xcm)))
                          bogusForceDataize.write ((((xspwd).xgetspnam)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xskipTest)).apply (("spwd entry %r doesn't exist: %s".mod (((unsupported)).apply ((xname)) ((xexc))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)