memory > xmodule_name
memory > xEngine
memory > xentry
memory > xwalk_packages
memory > xsettings
memory > xhasattr
memory > xsuper
memory > xBaseEngine
memory > xTemplateDoesNotExist
memory > xmake_context
memory > xexc
memory > xlen
memory > xImportError
memory > xcandidate
memory > xfull_name
memory > ximport_module
memory > xInvalidTemplateLibrary
memory > xapps
memory > xTemplate
memory > xe
memory > xapp_config
memory > xname
[] > django
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_template_tag_modules
        memory > xget_installed_libraries
        memory > xreraise
        memory > xget_template
        memory > xapp_dirname
        memory > x__init__
        memory > xfrom_string
        memory > xrender
        memory > xorigin
        memory > xcopy_exception
        memory > xget_package_libraries
        memory > xget_templatetag_libraries
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xBaseEngine)))
              seq
                xapp_dirname.write "templates"
                x__init__.write
                  [xself xparams]
                    memory > xoptions
                    memory > xlibraries
                    seq > @
                      seq
                        xparams.write ((((xparams).xcopy)).apply)
                        xoptions.write (((((((xparams).xpop)).apply ("OPTIONS")).xcopy)).apply)
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("autoescape") (TRUE))
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("debug") (((xsettings).xDEBUG)))
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("file_charset") ("utf-8"))
                        xlibraries.write ((((xoptions).xget)).apply ("libraries") ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("libraries"))) (((((xself).xget_templatetag_libraries)).apply ((xlibraries)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xparams)))
                        (((unsupported)).apply (((xself).xengine)) ((((xEngine)).apply (((xself).xdirs)) (((xself).xapp_dirs)) ((((unsupported)).apply ((xoptions)))))))
                xfrom_string.write
                  [xself xtemplate_code]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply ((((((xself).xengine).xfrom_string)).apply ((xtemplate_code)))) ((xself)))))
                xget_template.write
                  [xself xtemplate_name]
                    seq > @
                      (((unsupported)).apply ((xTemplateDoesNotExist)))
                        (((unsupported)).apply ((((xTemplate)).apply ((((((xself).xengine).xget_template)).apply ((xtemplate_name)))) ((xself)))))
                        bogusForceDataize.write (((xreraise)).apply ((xexc)) ((xself)))
                xget_templatetag_libraries.write
                  [xself xcustom_libraries]
                    memory > xlibraries
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlibraries.write (((xget_installed_libraries)).apply)
                        bogusForceDataize.write ((((xlibraries).xupdate)).apply ((xcustom_libraries)))
                        (((unsupported)).apply ((xlibraries)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xtemplate xbackend]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtemplate)) ((xtemplate)))
                        (((unsupported)).apply (((xself).xbackend)) ((xbackend)))
                xorigin.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xtemplate).xorigin)))
                xrender.write
                  [xself xcontext xrequest]
                    seq > @
                      (((unsupported)).apply)
                        xcontext.write (((unsupported)).apply ((xmake_context)) ((xcontext)) ((xrequest)) (((((xself).xbackend).xengine).xautoescape)))
                        (((unsupported)).apply ((xTemplateDoesNotExist)))
                          (((unsupported)).apply ((((((xself).xtemplate).xrender)).apply ((xcontext)))))
                          bogusForceDataize.write (((xreraise)).apply ((xexc)) (((xself).xbackend)))
            xcopy_exception.write
              [xexc xbackend]
                memory > xnew
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbackend.write ((xbackend).or ((xexc).xbackend))
                    xnew.write (((unsupported)).apply (((xexc).x__class__)) ((((unsupported)).apply (((xexc).xargs)))) (((xexc).xtried)) ((xbackend)) (((xexc).xchain)))
                    (((xhasattr)).apply ((xexc)) ("template_debug")).if
                      (((unsupported)).apply (((xnew).xtemplate_debug)) (((xexc).xtemplate_debug)))
                    (((unsupported)).apply ((xnew)))
            xreraise.write
              [xexc xbackend]
                memory > xnew
                seq > @
                  seq
                    (((unsupported)).apply)
                    xnew.write (((xcopy_exception)).apply ((xexc)) ((xbackend)))
                    (((unsupported)).apply ((xnew)) ((xexc)))
            xget_template_tag_modules.write
              []
                memory > xpkg
                memory > xcandidates
                seq > @
                  seq
                    (((unsupported)).apply)
                    xcandidates.write (((unsupported)).apply ("django.templatetags"))
                    bogusForceDataize.write ((((xcandidates).xextend)).apply ((((unsupported)).apply ("{app_config.name}.templatetags") ((xapp_config)) (((((xapps).xget_app_configs)).apply)))))
                    (((unsupported)).apply ((xcandidate)) ((xcandidates)))
                      seq
                        (((unsupported)).apply ((xImportError)))
                          xpkg.write (((ximport_module)).apply ((xcandidate)))
                          (((unsupported)).apply)
                        (((xhasattr)).apply ((xpkg)) ("__path__")).if
                          (((unsupported)).apply ((xname)) ((((xget_package_libraries)).apply ((xpkg)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply (((((xlen)).apply ((xcandidate))).sub 1)))))) ((xname)))))
            xget_installed_libraries.write
              []
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xmodule_name)) ((xfull_name)) ((((unsupported)).apply ((xmodule_name)) ((xfull_name)))) ((((xget_template_tag_modules)).apply)))))
            xget_package_libraries.write
              [xpkg]
                memory > xmodule
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xentry)) ((((xwalk_packages)).apply (((xpkg).x__path__)) ((((xpkg).x__name__).sub ".")))))
                      seq
                        (((unsupported)).apply ((xImportError)))
                          xmodule.write (((ximport_module)).apply ((((unsupported)).apply ((xentry)) (1))))
                          (((unsupported)).apply ((((xInvalidTemplateLibrary)).apply (("Invalid template library specified. ImportError raised when trying to load '%s': %s".mod (((unsupported)).apply ((((unsupported)).apply ((xentry)) (1))) ((xe))))))) ((xe)))
                        (((xhasattr)).apply ((xmodule)) ("register")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xentry)) (1))))