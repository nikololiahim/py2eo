memory > xk
memory > xAlwaysEqual
memory > xt
memory > xrange
memory > xb
memory > xBadCmp
memory > xsys
memory > xslice
memory > xiter
memory > xunittest
memory > xC2
memory > xAttributeError
memory > xC3
memory > xstep
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xIX
memory > xenumerate
memory > xIN
memory > xValueError
memory > xIndexError
memory > xStopIteration
memory > xstart
memory > xproto
memory > xbase
memory > xreversed
memory > xtype
memory > xrepr
memory > xint
memory > xException
memory > xOverflowError
memory > xBadExc
memory > xr
memory > xx
memory > xend
memory > xI
memory > xi
memory > xM
memory > xtuple
memory > xitertools
memory > xC1
memory > xy
memory > xhash
memory > xnext
memory > xmap
memory > xjiggle
memory > xobject
memory > xj
memory > xlen
memory > xTypeError
memory > x__name__
memory > xa
[] > test_range
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_large_exhausted_iterator_pickling
        memory > xpyrange
        memory > xpyrange_reversed
        memory > xtest_index
        memory > xtest_reverse_iteration
        memory > xtest_exhausted_iterator_pickling
        memory > xassert_iterators_equal
        memory > xtest_issue11845
        memory > xtest_comparison
        memory > xtest_strided_limits
        memory > xtest_range_iterators
        memory > xtest_types
        memory > xtest_range
        memory > xtest_user_index_method
        memory > xtest_repr
        memory > xassert_attrs
        memory > xtest_pickling
        memory > xtest_count
        memory > xtest_large_range
        memory > xtest_odd_bug
        memory > xtest_contains
        memory > xtest_large_operands
        memory > xtest_iterator_pickling
        memory > xtest_attributes
        memory > xtest_invalid_invocation
        memory > xtest_empty
        memory > xtest_range_iterators_invocation
        memory > xtest_slice
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xpyrange.write
              [xstart xstop xstep]
                seq > @
                  ((((unsupported)).apply (((xstart).sub (xstop))) ((xstep))).less 0).if
                    seq
                      (((unsupported)).apply ((xstop)) ((((xstart).sub (xstop)).mod (xstep))))
                      while.
                        ((xstart).neq (xstop))
                        [unused]
                          seq > @
                            seq
                              (((unsupported)).apply ((xstart)))
                              (((unsupported)).apply ((xstart)) ((xstep)))
            xpyrange_reversed.write
              [xstart xstop xstep]
                seq > @
                  seq
                    (((unsupported)).apply ((xstop)) ((((xstart).sub (xstop)).mod (xstep))))
                    (((unsupported)).apply ((((xpyrange)).apply (((xstop).sub (xstep))) (((xstart).sub (xstep))) (((xstep).neg)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassert_iterators_equal.write
                  [xself xxs xys xtest_id xlimit]
                    memory > xpairs
                    memory > xsentinel
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xlimit)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xxs.write ((((xitertools).xislice)).apply ((xxs)) ((xlimit)))
                            xys.write ((((xitertools).xislice)).apply ((xys)) ((xlimit)))
                        xsentinel.write (((xobject)).apply)
                        xpairs.write (((unsupported)).apply (((xitertools).xzip_longest)) ((xxs)) ((xys)) ((xsentinel)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((((unsupported)).apply ((xx)) ((xy)))))) ((((xenumerate)).apply ((xpairs)))))
                          ((xx).eq (xy)).if
                            (((unsupported)).apply)
                            ((xx).eq (xsentinel)).if
                              bogusForceDataize.write ((((xself).xfail)).apply (((("{}: iterator ended unexpectedly at position {}; expected {}".xformat)).apply ((xtest_id)) ((xi)) ((xy)))))
                              ((xy).eq (xsentinel)).if
                                bogusForceDataize.write ((((xself).xfail)).apply (((("{}: unexpected excess element {} at position {}".xformat)).apply ((xtest_id)) ((xx)) ((xi)))))
                                bogusForceDataize.write ((((xself).xfail)).apply (((("{}: wrong element at position {}; expected {}, got {}".xformat)).apply ((xtest_id)) ((xi)) ((xy)) ((xx)))))
                xtest_range.write
                  [xself]
                    memory > xc
                    memory > xseq
                    memory > xb
                    memory > xr
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (3))))) ((((unsupported)).apply (0) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (1) (5))))) ((((unsupported)).apply (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (0))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply ((3.neg)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (1) (10) (3))))) ((((unsupported)).apply (1) (4) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (5) ((5.neg)) ((3.neg)))))) ((((unsupported)).apply (5) (2) ((1.neg)) ((4.neg)))))
                        xa.write 10
                        xb.write 101
                        xc.write 51
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply ((xa)) (((xa).add 2)))))) ((((unsupported)).apply ((xa)) (((xa).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (((xa).add 2)) ((xa)) ((1.neg)))))) ((((unsupported)).apply (((xa).add 2)) (((xa).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (((xa).add 4)) ((xa)) ((2.neg)))))) ((((unsupported)).apply (((xa).add 4)) (((xa).add 2)))))
                        xseq.write (((xlist)).apply ((((xrange)).apply ((xa)) ((xb)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        xseq.write (((xlist)).apply ((((xrange)).apply ((xb)) ((xa)) (((xc).neg)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xb)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xa)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        xseq.write (((xlist)).apply ((((xrange)).apply (((xa).neg)) (((xb).neg)) (((xc).neg)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xa).neg)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xb).neg)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xrange)) (1) (2) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (1) (2.0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (1) (2) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (42) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xrange)).apply (0) (((xsys).xmaxsize)) ((((xsys).xmaxsize).sub 1)))))) (2))
                        xr.write (((xrange)).apply ((((xsys).xmaxsize).neg)) (((xsys).xmaxsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xr)))) (((xsys).xmaxsize)))
                xtest_large_operands.write
                  [xself]
                    memory > xc
                    memory > xseq
                    memory > xb
                    memory > xx
                    memory > xa
                    seq > @
                      seq
                        xx.write (((xrange)).apply ((((unsupported)).apply (10) (20))) (((((unsupported)).apply (10) (20)).add 10)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xx)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((xx)))))) (4))
                        xx.write (((xrange)).apply (((((unsupported)).apply (10) (20)).add 10)) ((((unsupported)).apply (10) (20))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xx)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((xx)))))) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xx)))
                        xx.write (((xrange)).apply ((((unsupported)).apply (10) (20))) (((((unsupported)).apply (10) (20)).add 10)) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xx)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((xx)))))) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xx)))
                        xx.write (((xrange)).apply (((((unsupported)).apply (10) (20)).add 10)) ((((unsupported)).apply (10) (20))) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xx)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((xx)))))) (4))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xx)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((((xrange)).apply (((((unsupported)).apply (2) (100)).neg)))) ((((xrange)).apply (0) (((((unsupported)).apply (2) (100)).neg)))) ((((xrange)).apply (0) ((((unsupported)).apply (2) (100))) ((1.neg)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xx)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((xx)))
                        xa.write (((xint)).apply ((10.mul ((xsys).xmaxsize))))
                        xb.write (((xint)).apply ((100.mul ((xsys).xmaxsize))))
                        xc.write (((xint)).apply ((50.mul ((xsys).xmaxsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply ((xa)) (((xa).add 2)))))) ((((unsupported)).apply ((xa)) (((xa).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (((xa).add 2)) ((xa)) ((1.neg)))))) ((((unsupported)).apply (((xa).add 2)) (((xa).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply (((xa).add 4)) ((xa)) ((2.neg)))))) ((((unsupported)).apply (((xa).add 4)) (((xa).add 2)))))
                        xseq.write (((xlist)).apply ((((xrange)).apply ((xa)) ((xb)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) (0))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) ((1.neg)))) (((xa).add (xc))))
                        xseq.write (((xlist)).apply ((((xrange)).apply ((xb)) ((xa)) (((xc).neg)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xb)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xa)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) (0))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) ((1.neg)))) (((xb).sub (xc))))
                        xseq.write (((xlist)).apply ((((xrange)).apply (((xa).neg)) (((xb).neg)) (((xc).neg)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xa).neg)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xb).neg)) ((xseq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) (0))) (((xa).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xseq)) ((1.neg)))) ((((xa).neg).sub (xc))))
                xtest_large_range.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xexpected_len
                    memory > xx
                    memory > x_range_len
                    memory > xidx
                    memory > xa
                    seq > @
                      seq
                        x_range_len.write
                          [xx]
                            memory > xlength
                            memory > xstep
                            seq > @
                              seq
                                (((unsupported)).apply ((xOverflowError)))
                                  xlength.write (((xlen)).apply ((xx)))
                                  seq
                                    xstep.write ((((unsupported)).apply ((xx)) (1)).sub (((unsupported)).apply ((xx)) (0)))
                                    xlength.write (1.add (((unsupported)).apply (((((unsupported)).apply ((xx)) ((1.neg))).sub (((unsupported)).apply ((xx)) (0)))) ((xstep))))
                                (((unsupported)).apply ((xlength)))
                        xa.write (((xsys).xmaxsize).neg)
                        xb.write ((xsys).xmaxsize)
                        xexpected_len.write ((xb).sub (xa))
                        xx.write (((xrange)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xlen)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_range_len)).apply ((xx)))) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) (0))) ((xa)))
                        xidx.write (((xsys).xmaxsize).add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xidx)))) (((xa).add (xidx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xidx)) (((xidx).add 1)))))) (0))) (((xa).add (xidx))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((((xexpected_len).neg).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((xexpected_len)))
                        xa.write 1
                        xb.write (2.mul ((xsys).xmaxsize))
                        xexpected_len.write ((xb).sub (xa))
                        xx.write (((xrange)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xlen)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_range_len)).apply ((xx)))) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) (0))) ((xa)))
                        xidx.write (((xsys).xmaxsize).add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xidx)))) (((xa).add (xidx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xidx)) (((xidx).add 1)))))) (0))) (((xa).add (xidx))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((((xexpected_len).neg).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((xexpected_len)))
                        xa.write 1
                        xb.write (((unsupported)).apply (((xsys).xmaxsize)) (10))
                        xc.write (2.mul ((xsys).xmaxsize))
                        xexpected_len.write (1.add (((unsupported)).apply (((xb).sub (xa))) ((xc))))
                        xx.write (((xrange)).apply ((xa)) ((xb)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xlen)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_range_len)).apply ((xx)))) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) (0))) ((xa)))
                        xidx.write (((xsys).xmaxsize).add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xidx)))) (((xa).add ((xidx).mul (xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xidx)) (((xidx).add 1)))))) (0))) (((xa).add ((xidx).mul (xc)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((((xexpected_len).neg).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((xexpected_len)))
                        xa.write (((unsupported)).apply (((xsys).xmaxsize)) (10))
                        xb.write 1
                        xc.write ((2.neg).mul ((xsys).xmaxsize))
                        xexpected_len.write (1.add (((unsupported)).apply (((xb).sub (xa))) ((xc))))
                        xx.write (((xrange)).apply ((xa)) ((xb)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xa)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xb)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xlen)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_range_len)).apply ((xx)))) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) (0))) ((xa)))
                        xidx.write (((xsys).xmaxsize).add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xidx)))) (((xa).add ((xidx).mul (xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xidx)) (((xidx).add 1)))))) (0))) (((xa).add ((xidx).mul (xc)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((((xexpected_len).neg).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xx)) ((xexpected_len)))
                xtest_invalid_invocation.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xrange)) (1) (2) (0))
                        xa.write (((xint)).apply ((10.mul ((xsys).xmaxsize))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xrange)) ((xa)) (((xa).add 1)) ((((xint)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (42) ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (0.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (0) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (0.0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0) (0.0) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0.0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) (0.0) (0.0) (1.0))
                xtest_index.write
                  [xself]
                    memory > xalways_equal
                    memory > x__eq__
                    memory > xu
                    memory > xa
                    seq > @
                      seq
                        xu.write (((xrange)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xindex)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xindex)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xu).xindex)) (2))
                        xu.write (((xrange)).apply ((2.neg)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xcount)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xindex)).apply (0))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xu).xindex)))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  ((xother).eq 2).if
                                    (((unsupported)).apply ((((xBadExc)).apply)))
                                  (((unsupported)).apply (FALSE))
                        xa.write (((xrange)).apply (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBadExc)) (((xa).xindex)) ((((xBadCmp)).apply)))
                        xa.write (((xrange)).apply ((2.neg)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xindex)).apply (0))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (1) (10) (3)).xindex)).apply (4))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (1) ((10.neg)) ((3.neg))).xindex)).apply ((5.neg)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply ((((unsupported)).apply (10) (20)))).xindex)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply ((((unsupported)).apply (10) (20)))).xindex)).apply (((((unsupported)).apply (10) (20)).sub 1)))) (((((unsupported)).apply (10) (20)).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((((xrange)).apply (1) ((((unsupported)).apply (2) (100))) (2)).xindex)) ((((unsupported)).apply (2) (87))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (1) ((((unsupported)).apply (2) (100))) (2)).xindex)).apply (((((unsupported)).apply (2) (87)).add 1)))) ((((unsupported)).apply (2) (86))))
                        (((unsupported)).apply ((xobject)))
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        xalways_equal.write (((xAlwaysEqual)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (10)).xindex)).apply ((xalways_equal)))) (0))
                xtest_user_index_method.write
                  [xself]
                    memory > xsmallnum
                    memory > x__index__
                    memory > xbignum
                    memory > x__init__
                    seq > @
                      seq
                        xbignum.write (2.mul ((xsys).xmaxsize))
                        xsmallnum.write 43
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xn]
                                seq > @
                                  (((unsupported)).apply (((xself).xn)) ((((xint)).apply ((xn)))))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply ((((xI)).apply ((xbignum)))) ((((xI)).apply (((xbignum).add 1)))))))) ((((unsupported)).apply ((xbignum)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrange)).apply ((((xI)).apply ((xsmallnum)))) ((((xI)).apply (((xsmallnum).add 1)))))))) ((((unsupported)).apply ((xsmallnum)))))
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xRuntimeError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xrange)) ((((xIX)).apply)))
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("not a number"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrange)) ((((xIN)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xrange)).apply (10))) ((((unsupported)).apply ((((xI)).apply (5))))))) ((((xrange)).apply (5))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((((xrange)).apply (0) (10))) ((((unsupported)).apply ((((xIX)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xrange)).apply (0) (10))) ((((unsupported)).apply ((((xIN)).apply)))))
                xtest_count.write
                  [xself]
                    memory > xalways_equal
                    memory > x__eq__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xcount)).apply ((1.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xcount)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xcount)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xcount)).apply (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xcount)).apply (3))) (0))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((((xrange)).apply (3)).xcount)).apply ((1.neg)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((((xrange)).apply (3)).xcount)).apply (1))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply ((((unsupported)).apply (10) (20)))).xcount)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply ((((unsupported)).apply (10) (20)))).xcount)).apply ((((unsupported)).apply (10) (20))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (3)).xindex)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (1) ((((unsupported)).apply (2) (100))) (2)).xcount)).apply ((((unsupported)).apply (2) (87))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (1) ((((unsupported)).apply (2) (100))) (2)).xcount)).apply (((((unsupported)).apply (2) (87)).add 1)))) (1))
                        (((unsupported)).apply ((xobject)))
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        xalways_equal.write (((xAlwaysEqual)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrange)).apply (10)).xcount)).apply ((xalways_equal)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xrange)).apply (((xsys).xmaxsize)) ((((xsys).xmaxsize).add 10)))))) (10))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xrange)).apply (1))))) ("range(0, 1)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xrange)).apply (1) (2))))) ("range(1, 2)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xrange)).apply (1) (2) (3))))) ("range(1, 2, 3)"))
                xtest_pickling.write
                  [xself]
                    memory > xr
                    memory > xtestcases
                    seq > @
                      seq
                        xtestcases.write (((unsupported)).apply ((((unsupported)).apply (13))) ((((unsupported)).apply (0) (11))) ((((unsupported)).apply ((22.neg)) (10))) ((((unsupported)).apply (20) (3) ((1.neg)))) ((((unsupported)).apply (13) (21) (3))) ((((unsupported)).apply ((2.neg)) (2) (2))) ((((unsupported)).apply ((((unsupported)).apply (2) (65))) (((((unsupported)).apply (2) (65)).add 2)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply ((xt)) ((xtestcases)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xproto)) ((xt)))))
                              seq
                                xr.write (((xrange)).apply ((((unsupported)).apply ((xt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xr)) ((xproto)))))))) ((((xlist)).apply ((xr)))))
                xtest_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xit
                    memory > xitorg
                    memory > xtestcases
                    seq > @
                      seq
                        xtestcases.write (((unsupported)).apply ((((unsupported)).apply (13))) ((((unsupported)).apply (0) (11))) ((((unsupported)).apply ((22.neg)) (10))) ((((unsupported)).apply (20) (3) ((1.neg)))) ((((unsupported)).apply (13) (21) (3))) ((((unsupported)).apply ((2.neg)) (2) (2))) ((((unsupported)).apply ((((unsupported)).apply (2) (65))) (((((unsupported)).apply (2) (65)).add 2)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply ((xt)) ((xtestcases)))
                            seq
                              (((unsupported)).apply ((xit)) ((xitorg)) ((((xiter)).apply ((((xrange)).apply ((((unsupported)).apply ((xt)))))))))
                              xdata.write (((xlist)).apply ((((xrange)).apply ((((unsupported)).apply ((xt)))))))
                              xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                              xit.write ((((xpickle).xloads)).apply ((xd)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xitorg)))) ((((xtype)).apply ((xit)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((xdata)))
                              xit.write ((((xpickle).xloads)).apply ((xd)))
                              (((unsupported)).apply ((xStopIteration)))
                                bogusForceDataize.write (((xnext)).apply ((xit)))
                                (((unsupported)).apply)
                              xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                              xit.write ((((xpickle).xloads)).apply ((xd)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))))
                xtest_exhausted_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xr
                    memory > xi
                    memory > xi2
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xr.write (((xrange)).apply ((((unsupported)).apply (2) (65))) (((((unsupported)).apply (2) (65)).add 2)))
                          xi.write (((xiter)).apply ((xr)))
                          while.
                            TRUE
                            [unused]
                              seq > @
                                seq
                                  xr.write (((xnext)).apply ((xi)))
                                  ((xr).eq ((((unsupported)).apply (2) (65)).add 1)).if
                                    (((unsupported)).apply)
                          xd.write ((((xpickle).xdumps)).apply ((xi)) ((xproto)))
                          xi2.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xi)))) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xi2)))) ((((unsupported)).apply)))
                xtest_large_exhausted_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xr
                    memory > xi
                    memory > xi2
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xr.write (((xrange)).apply (20))
                          xi.write (((xiter)).apply ((xr)))
                          while.
                            TRUE
                            [unused]
                              seq > @
                                seq
                                  xr.write (((xnext)).apply ((xi)))
                                  ((xr).eq 19).if
                                    (((unsupported)).apply)
                          xd.write ((((xpickle).xdumps)).apply ((xi)) ((xproto)))
                          xi2.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xi)))) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xi2)))) ((((unsupported)).apply)))
                xtest_odd_bug.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write (((xrange)).apply ((((unsupported)).apply)) (1) ((1.neg)))
                xtest_types.write
                  [xself]
                    memory > x__int__
                    memory > x__index__
                    memory > x__eq__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply (1.0) ((((xrange)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (TRUE) ((((xrange)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((1.add (((unsupported)).apply))) ((((xrange)).apply (3))))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xC1)).apply)) ((((xrange)).apply (3))))
                        (((unsupported)).apply)
                          seq
                            x__int__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (2))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (2))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xC2)).apply)) ((((xrange)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xint)).apply ((((xC2)).apply)))) ((((xrange)).apply (3))))
                        (((unsupported)).apply ((xint)))
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xC3)).apply (11))) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xC3)).apply (11))) ((((xlist)).apply ((((xrange)).apply (10))))))
                xtest_strided_limits.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xrange)).apply (0) (101) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (2) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (99) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (100) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (101) ((xr)))
                        xr.write (((xrange)).apply (0) ((20.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((19.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((20.neg)) ((xr)))
                        xr.write (((xrange)).apply (0) ((20.neg)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((18.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((19.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((20.neg)) ((xr)))
                xtest_empty.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xrange)).apply (0))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) ((xr)))
                        xr.write (((xrange)).apply (0) ((10.neg)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) ((xr)))
                xtest_range_iterators.write
                  [xself]
                    memory > xtest_ranges
                    memory > xlimits
                    memory > xiter2
                    memory > xiter1
                    memory > xtest_id
                    seq > @
                      seq
                        xlimits.write (((unsupported)).apply (((xbase).add (xjiggle))) ((xM)) ((((unsupported)).apply ((((unsupported)).apply (2) (32))) ((((unsupported)).apply (2) (64))))) ((xbase)) ((((unsupported)).apply (((xM).neg)) ((((unsupported)).apply (((xM).neg)) (2))) (0) ((((unsupported)).apply ((xM)) (2))) ((xM)))) ((xjiggle)) ((((unsupported)).apply ((2.neg)) ((1.neg)) (0) (1) (2))))
                        xtest_ranges.write (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)) ((xstep)))) ((xstart)) ((xlimits)) ((xend)) ((xlimits)) ((xstep)) ((((unsupported)).apply (((((unsupported)).apply (2) (63)).neg)) (((((unsupported)).apply (2) (31)).neg)) ((2.neg)) ((1.neg)) (1) (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)) ((xstep)))) ((xtest_ranges)))
                          seq
                            xiter1.write (((xrange)).apply ((xstart)) ((xend)) ((xstep)))
                            xiter2.write (((xpyrange)).apply ((xstart)) ((xend)) ((xstep)))
                            xtest_id.write ((("range({}, {}, {})".xformat)).apply ((xstart)) ((xend)) ((xstep)))
                            (((unsupported)).apply (((xself).xassert_iterators_equal)) ((xiter1)) ((xiter2)) ((xtest_id)) (100))
                            xiter1.write (((xreversed)).apply ((((xrange)).apply ((xstart)) ((xend)) ((xstep)))))
                            xiter2.write (((xpyrange_reversed)).apply ((xstart)) ((xend)) ((xstep)))
                            xtest_id.write ((("reversed(range({}, {}, {}))".xformat)).apply ((xstart)) ((xend)) ((xstep)))
                            (((unsupported)).apply (((xself).xassert_iterators_equal)) ((xiter1)) ((xiter2)) ((xtest_id)) (100))
                xtest_range_iterators_invocation.write
                  [xself]
                    memory > xlong_rangeiter_type
                    memory > xrangeiter_type
                    seq > @
                      seq
                        xrangeiter_type.write (((xtype)).apply ((((xiter)).apply ((((xrange)).apply (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrangeiter_type)) (1) (3) (1))
                        xlong_rangeiter_type.write (((xtype)).apply ((((xiter)).apply ((((xrange)).apply ((((unsupported)).apply (1) (1000))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlong_rangeiter_type)) (1) (3) (1))
                xtest_slice.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xstart xstop xstep]
                            memory > xi
                            seq > @
                              (((unsupported)).apply)
                                xi.write (((xslice)).apply ((xstart)) ((xstop)) ((xstep)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xr)) ((xi)))))) ((((unsupported)).apply ((((xlist)).apply ((xr)))) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xr)) ((xi)))))) ((((xlen)).apply ((((unsupported)).apply ((((xlist)).apply ((xr)))) ((xi)))))))
                        (((unsupported)).apply ((xr)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1) (9) (3))) ((((xrange)).apply (8) (0) ((3.neg)))) ((((xrange)).apply ((((xsys).xmaxsize).add 1)) ((((xsys).xmaxsize).add 10)))))))
                          seq
                            bogusForceDataize.write (((xcheck)).apply (0) (2))
                            bogusForceDataize.write (((xcheck)).apply (0) (20))
                            bogusForceDataize.write (((xcheck)).apply (1) (2))
                            bogusForceDataize.write (((xcheck)).apply (20) (30))
                            bogusForceDataize.write (((xcheck)).apply ((30.neg)) ((20.neg)))
                            bogusForceDataize.write (((xcheck)).apply ((1.neg)) (100) (2))
                            bogusForceDataize.write (((xcheck)).apply (0) ((1.neg)))
                            bogusForceDataize.write (((xcheck)).apply ((1.neg)) ((3.neg)) ((1.neg)))
                xtest_contains.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xrange)).apply (10))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (5.0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (5.1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (10) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("") ((xr)))
                        xr.write (((xrange)).apply (9) ((1.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (5.0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (5.1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (10) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("") ((xr)))
                        xr.write (((xrange)).apply (0) (10) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (5.0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (5.1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (10) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("") ((xr)))
                        xr.write (((xrange)).apply (9) ((1.neg)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (5.0) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (5.1) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((1.neg)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (10) ((xr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("") ((xr)))
                xtest_reverse_iteration.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xr)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1) (9) (3))) ((((xrange)).apply (8) (0) ((3.neg)))) ((((xrange)).apply ((((xsys).xmaxsize).add 1)) ((((xsys).xmaxsize).add 10)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((xr)))))) ((((unsupported)).apply ((((xlist)).apply ((xr)))) ((((unsupported)).apply ((1.neg)))))))
                xtest_issue11845.write
                  [xself]
                    memory > xr
                    memory > xvalues
                    seq > @
                      seq
                        xr.write (((xrange)).apply ((((unsupported)).apply (((((((xslice)).apply (1) (18) (2)).xindices)).apply (20))))))
                        xvalues.write (((unsupported)).apply ("None: is there a None literal in the EO language?") (0) (1) ((1.neg)) (2) ((2.neg)) (5) ((5.neg)) (19) ((19.neg)) (20) ((20.neg)) (21) ((21.neg)) (30) ((30.neg)) (99) ((99.neg)))
                        (((unsupported)).apply ((xi)) ((xvalues)))
                          (((unsupported)).apply ((xj)) ((xvalues)))
                            (((unsupported)).apply ((xk)) (((xvalues).sub (((unsupported)).apply (0)))))
                              (((unsupported)).apply ((xr)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))
                xtest_comparison.write
                  [xself]
                    memory > xtest_ranges
                    memory > xranges_ne
                    memory > xtest_tuples
                    memory > xranges_eq
                    memory > xtuples_eq
                    seq > @
                      seq
                        xtest_ranges.write (((unsupported)).apply ((((xrange)).apply (0))) ((((xrange)).apply (0) ((1.neg)))) ((((xrange)).apply (1) (1) (3))) ((((xrange)).apply (1))) ((((xrange)).apply (5) (6))) ((((xrange)).apply (5) (6) (2))) ((((xrange)).apply (5) (7) (2))) ((((xrange)).apply (2))) ((((xrange)).apply (0) (4) (2))) ((((xrange)).apply (0) (5) (2))) ((((xrange)).apply (0) (6) (2))))
                        xtest_tuples.write (((xlist)).apply ((((xmap)).apply ((xtuple)) ((xtest_ranges)))))
                        xranges_eq.write (((unsupported)).apply (((xa).eq (xb))) ((xa)) ((xtest_ranges)) ((xb)) ((xtest_ranges)))
                        xtuples_eq.write (((unsupported)).apply (((xa).eq (xb))) ((xa)) ((xtest_tuples)) ((xb)) ((xtest_tuples)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xranges_eq)) ((xtuples_eq)))
                        xranges_ne.write (((unsupported)).apply (((xa).neq (xb))) ((xa)) ((xtest_ranges)) ((xb)) ((xtest_ranges)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xranges_ne)) ((((unsupported)).apply (((xx).not)) ((xx)) ((xranges_eq)))))
                        (((unsupported)).apply ((xa)) ((xtest_ranges)))
                          (((unsupported)).apply ((xb)) ((xtest_ranges)))
                            ((xa).eq (xb)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((((xhash)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xrange)).apply (0)).eq (((unsupported)).apply))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply).eq (((xrange)).apply (0)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xrange)).apply (2)).eq (((unsupported)).apply (0) (1)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrange)).apply (0) (((((unsupported)).apply (2) (100)).sub 1)) (2))) ((((xrange)).apply (0) ((((unsupported)).apply (2) (100))) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xrange)).apply (0) (((((unsupported)).apply (2) (100)).sub 1)) (2))))) ((((xhash)).apply ((((xrange)).apply (0) ((((unsupported)).apply (2) (100))) (2))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xrange)).apply (0) ((((unsupported)).apply (2) (100))) (2))) ((((xrange)).apply (0) (((((unsupported)).apply (2) (100)).add 1)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrange)).apply ((((unsupported)).apply (2) (200))) (((((unsupported)).apply (2) (201)).sub (((unsupported)).apply (2) (99)))) ((((unsupported)).apply (2) (100))))) ((((xrange)).apply ((((unsupported)).apply (2) (200))) ((((unsupported)).apply (2) (201))) ((((unsupported)).apply (2) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xrange)).apply ((((unsupported)).apply (2) (200))) (((((unsupported)).apply (2) (201)).sub (((unsupported)).apply (2) (99)))) ((((unsupported)).apply (2) (100))))))) ((((xhash)).apply ((((xrange)).apply ((((unsupported)).apply (2) (200))) ((((unsupported)).apply (2) (201))) ((((unsupported)).apply (2) (100))))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xrange)).apply ((((unsupported)).apply (2) (200))) ((((unsupported)).apply (2) (201))) ((((unsupported)).apply (2) (100))))) ((((xrange)).apply ((((unsupported)).apply (2) (200))) (((((unsupported)).apply (2) (201)).add 1)) ((((unsupported)).apply (2) (100))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                xtest_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (0))) (0) (0) (1))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (10))) (0) (10) (1))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply ((10.neg)))) (0) ((10.neg)) (1))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (0) (10) (1))) (0) (10) (1))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (0) (10) (3))) (0) (10) (3))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (10) (0) ((1.neg)))) (10) (0) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassert_attrs)).apply ((((xrange)).apply (10) (0) ((3.neg)))) (10) (0) ((3.neg)))
                xassert_attrs.write
                  [xself xrangeobj xstart xstop xstep]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrangeobj).xstart)) ((xstart)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrangeobj).xstop)) ((xstop)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrangeobj).xstep)) ((xstep)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xrangeobj).xstart)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xrangeobj).xstop)) (11))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xrangeobj).xstep)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xrangeobj).xstart)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xrangeobj).xstop)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xrangeobj).xstep)))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)