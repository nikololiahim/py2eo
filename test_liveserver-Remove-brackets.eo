memory > xf
memory > xException
memory > xsuper
memory > xoverride_settings
memory > xos
memory > x__file__
memory > xImproperlyConfigured
memory > xStaticLiveServerTestCase
memory > xLiveServerBase
[] > test_liveserver
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xraises_exception
        memory > xTEST_ROOT
        memory > xtearDownClass
        memory > xTEST_SETTINGS
        memory > xsetUpClass
        memory > xtest_test_test
        memory > xtest_collectstatic_emulation
        memory > xurlopen
        memory > xavailable_apps
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xTEST_ROOT.write (((((xos).xpath).xdirname)).apply ((x__file__)))
            xTEST_SETTINGS.write (((unsupported)).apply ("MEDIA_URL") ("media/") ("STATIC_URL") ("static/") ("MEDIA_ROOT") ((((((xos).xpath).xjoin)).apply ((xTEST_ROOT)) ("project") ("site_media") ("media"))) ("STATIC_ROOT") ((((((xos).xpath).xjoin)).apply ((xTEST_ROOT)) ("project") ("site_media") ("static"))))
            (((unsupported)).apply ((xStaticLiveServerTestCase)))
              seq
                xavailable_apps.write (((unsupported)).apply)
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xsettings_override)) ((((xoverride_settings)).apply ((((unsupported)).apply ((xTEST_SETTINGS)))))))
                        unsupported
                        bogusForceDataize.write ((((xcls).xaddClassCleanup)).apply ((((xcls).xsettings_override).xdisable)))
                        unsupported
            (((unsupported)).apply ((xLiveServerBase)))
              seq
                xsetUpClass.write
                  [xcls]
                    memory > xold_STATIC_URL
                    seq > @
                      (((unsupported)).apply)
                        xold_STATIC_URL.write (((unsupported)).apply ((xTEST_SETTINGS)) ("STATIC_URL"))
                        (((unsupported)).apply ((((unsupported)).apply ((xTEST_SETTINGS)) ("STATIC_URL"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          unsupported
                          (((unsupported)).apply ((((unsupported)).apply ((xTEST_SETTINGS)) ("STATIC_URL"))) ((xold_STATIC_URL)))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                xraises_exception.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          unsupported
                          (((unsupported)).apply ((((xException)).apply ("setUpClass should have raised an exception."))))
                xtest_test_test.write
                  [xself]
                    seq > @
            (((unsupported)).apply ((xLiveServerBase)))
              seq
                xurlopen.write
                  [xself xurl]
                    seq > @
                      (((unsupported)).apply ((((xurlopen)).apply ((((xself).xlive_server_url).add (xurl))))))
                xtest_collectstatic_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xurlopen)).apply ("/static/test/file.txt"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xread).xrstrip)).apply ("rn"))) ("In static directory."))