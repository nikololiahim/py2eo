memory > xcolumn_name
memory > xindex_expressions
memory > xp
memory > xtype
memory > xOrderBy
memory > xsorted
memory > xwrapper
memory > xorder
memory > xkwargs
memory > xtable_name
memory > xfield
memory > xall
memory > xlist
memory > xenumerate
memory > xFunc
memory > xValueError
memory > xpartition
memory > xstr
memory > xQ
memory > x_
memory > xQuery
memory > xw
memory > xset
memory > xrepr
memory > xi
memory > xparams
memory > xF
memory > xsplit_identifier
memory > xsuper
memory > xbool
memory > xtuple
memory > xexpressions
memory > xNotImplemented
memory > xargs
memory > xExpressionList
memory > xCol
memory > xextra_context
memory > xsql
memory > xe
memory > xexpression
memory > xIndexExpression
memory > xCollate
memory > xzip
memory > xisinstance
memory > xfield_name
memory > xlen
memory > xnames_digest
memory > xwrapper_cls
[] > indexes
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xwrapper_classes
        memory > xset_wrapper_classes
        memory > xregister_wrappers
        memory > xtemplate
        memory > xset_name_with_model
        memory > xremove_sql
        memory > xas_sqlite
        memory > x__all__
        memory > xdeconstruct
        memory > xresolve_expression
        memory > xsuffix
        memory > x__eq__
        memory > x__repr__
        memory > xcreate_sql
        memory > xclone
        memory > x__init__
        memory > xcontains_expressions
        memory > xmax_name_length
        memory > x_get_condition_sql
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("Index"))
            (((unsupported)).apply)
              seq
                xsuffix.write "idx"
                xmax_name_length.write 30
                x__init__.write
                  [xself xfields xname xdb_tablespace xopclasses xcondition xinclude]
                    seq > @
                      (((unsupported)).apply)
                        ((xopclasses).and ((xname).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("An index must be named to use opclasses."))))
                        ((((xisinstance)).apply ((xcondition)) ((((unsupported)).apply ((((xtype)).apply ("None: is there a None literal in the EO language?"))) ((xQ))))).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.condition must be a Q instance."))))
                        ((xcondition).and ((xname).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("An index must be named to use condition."))))
                        ((((xisinstance)).apply ((xfields)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.fields must be a list or tuple."))))
                        ((((xisinstance)).apply ((xopclasses)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.opclasses must be a list or tuple."))))
                        (((xexpressions).not).and ((xfields).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("At least one field or expression is required to define an index."))))
                        ((xexpressions).and (xfields)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.fields and expressions are mutually exclusive."))))
                        ((xexpressions).and ((xname).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("An index must be named to use expressions."))))
                        ((xexpressions).and (xopclasses)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.opclasses cannot be used with expressions. Use django.contrib.postgres.indexes.OpClass() instead."))))
                        ((xopclasses).and ((((xlen)).apply ((xfields))).neq (((xlen)).apply ((xopclasses))))).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.fields and Index.opclasses must have the same number of elements."))))
                        ((xfields).and ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xfield)) ((xstr)))) ((xfield)) ((xfields))))).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.fields must contain only strings with field names."))))
                        ((xinclude).and ((xname).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("A covering index must be named."))))
                        ((((xisinstance)).apply ((xinclude)) ((((unsupported)).apply ((((xtype)).apply ("None: is there a None literal in the EO language?"))) ((xlist)) ((xtuple))))).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index.include must be a list or tuple."))))
                        (((unsupported)).apply (((xself).xfields)) ((((xlist)).apply ((xfields)))))
                        (((unsupported)).apply (((xself).xfields_orders)) ((((unsupported)).apply ((((((xfield_name).xstartswith)).apply ("-")).if (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((((unsupported)).apply (1))))) ("DESC")) (((unsupported)).apply ((xfield_name)) ("")))) ((xfield_name)) (((xself).xfields)))))
                        (((unsupported)).apply (((xself).xname)) (((xname).or "")))
                        (((unsupported)).apply (((xself).xdb_tablespace)) ((xdb_tablespace)))
                        (((unsupported)).apply (((xself).xopclasses)) ((xopclasses)))
                        (((unsupported)).apply (((xself).xcondition)) ((xcondition)))
                        (((unsupported)).apply (((xself).xinclude)) (((xinclude).if (((xtuple)).apply ((xinclude))) (((unsupported)).apply))))
                        (((unsupported)).apply (((xself).xexpressions)) ((((xtuple)).apply ((((unsupported)).apply (((((xisinstance)).apply ((xexpression)) ((xstr))).if (((xF)).apply ((xexpression))) (xexpression))) ((xexpression)) ((xexpressions)))))))
                xcontains_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xbool)).apply (((xself).xexpressions)))))
                x_get_condition_sql.write
                  [xself xmodel xschema_editor]
                    memory > xcompiler
                    memory > xwhere
                    memory > xquery
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcondition)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xquery.write (((unsupported)).apply ((xQuery)) ((xmodel)) (FALSE))
                        xwhere.write ((((xquery).xbuild_where)).apply (((xself).xcondition)))
                        xcompiler.write (((unsupported)).apply (((xquery).xget_compiler)) (((xschema_editor).xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xwhere).xas_sql)).apply ((xcompiler)) (((xschema_editor).xconnection)))))
                        (((unsupported)).apply (((xsql).mod (((xtuple)).apply ((((unsupported)).apply (((((xschema_editor).xquote_value)).apply ((xp)))) ((xp)) ((xparams))))))))
                xcreate_sql.write
                  [xself xmodel xschema_editor xusing]
                    memory > xindex_expression
                    memory > xfields
                    memory > xindex_expressions
                    memory > xcondition
                    memory > xcol_suffixes
                    memory > xinclude
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xinclude.write (((unsupported)).apply (((((((xmodel).x_meta).xget_field)).apply ((xfield_name))).xcolumn)) ((xfield_name)) (((xself).xinclude)))
                        xcondition.write ((((xself).x_get_condition_sql)).apply ((xmodel)) ((xschema_editor)))
                        ((xself).xexpressions).if
                          seq
                            xindex_expressions.write (((unsupported)).apply)
                            (((unsupported)).apply ((xexpression)) (((xself).xexpressions)))
                              seq
                                xindex_expression.write (((xIndexExpression)).apply ((xexpression)))
                                bogusForceDataize.write ((((xindex_expression).xset_wrapper_classes)).apply (((xschema_editor).xconnection)))
                                bogusForceDataize.write ((((xindex_expressions).xappend)).apply ((xindex_expression)))
                            xexpressions.write ((((((xExpressionList)).apply ((((unsupported)).apply ((xindex_expressions))))).xresolve_expression)).apply ((((unsupported)).apply ((xQuery)) ((xmodel)) (FALSE))))
                            xfields.write "None: is there a None literal in the EO language?"
                            xcol_suffixes.write "None: is there a None literal in the EO language?"
                          seq
                            xfields.write (((unsupported)).apply ((((((xmodel).x_meta).xget_field)).apply ((xfield_name)))) ((((unsupported)).apply ((xfield_name)) ((x_)))) (((xself).xfields_orders)))
                            xcol_suffixes.write (((unsupported)).apply ((((unsupported)).apply ((xorder)) (1))) ((xorder)) (((xself).xfields_orders)))
                            xexpressions.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((unsupported)).apply (((xschema_editor).x_create_index_sql)) ((xmodel)) ((xfields)) (((xself).xname)) ((xusing)) (((xself).xdb_tablespace)) ((xcol_suffixes)) (((xself).xopclasses)) ((xcondition)) ((xinclude)) ((xexpressions)) ((((unsupported)).apply ((xkwargs)))))))
                xremove_sql.write
                  [xself xmodel xschema_editor]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xschema_editor).x_delete_index_sql)).apply ((xmodel)) (((xself).xname)) ((((unsupported)).apply ((xkwargs)))))))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    memory > xpath
                    seq > @
                      seq
                        xpath.write ("%s.%s".mod (((unsupported)).apply ((((xself).x__class__).x__module__)) ((((xself).x__class__).x__name__))))
                        xpath.write ((((xpath).xreplace)).apply ("django.db.models.indexes") ("django.db.models"))
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)))
                        ((xself).xfields).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("fields"))) (((xself).xfields)))
                        (((unsupported)).apply (((xself).xdb_tablespace)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("db_tablespace"))) (((xself).xdb_tablespace)))
                        ((xself).xopclasses).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("opclasses"))) (((xself).xopclasses)))
                        ((xself).xcondition).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("condition"))) (((xself).xcondition)))
                        ((xself).xinclude).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("include"))) (((xself).xinclude)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) (((xself).xexpressions)) ((xkwargs)))))
                xclone.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xargs)) ((xkwargs)))) (((((xself).xdeconstruct)).apply)))
                        (((unsupported)).apply (((((xself).x__class__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xset_name_with_model.write
                  [xself xmodel]
                    memory > xcolumn_names
                    memory > xcolumn_names_with_order
                    memory > xhash_data
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xtable_name)))) ((((xsplit_identifier)).apply ((((xmodel).x_meta).xdb_table)))))
                        xcolumn_names.write (((unsupported)).apply (((((((xmodel).x_meta).xget_field)).apply ((xfield_name))).xcolumn)) ((((unsupported)).apply ((xfield_name)) ((xorder)))) (((xself).xfields_orders)))
                        xcolumn_names_with_order.write (((unsupported)).apply (((xorder).if "-%s" ("%s".mod (xcolumn_name)))) ((((unsupported)).apply ((xcolumn_name)) ((((unsupported)).apply ((xfield_name)) ((xorder)))))) ((((xzip)).apply ((xcolumn_names)) (((xself).xfields_orders)))))
                        xhash_data.write (((((unsupported)).apply ((xtable_name))).add (xcolumn_names_with_order)).add (((unsupported)).apply (((xself).xsuffix))))
                        (((unsupported)).apply (((xself).xname)) (("%s_%s_%s".mod (((unsupported)).apply ((((unsupported)).apply ((xtable_name)) ((((unsupported)).apply (11))))) ((((unsupported)).apply ((((unsupported)).apply ((xcolumn_names)) (0))) ((((unsupported)).apply (7))))) (("%s_%s".mod (((unsupported)).apply ((((unsupported)).apply ((xnames_digest)) ((((unsupported)).apply ((xhash_data)))) (6))) (((xself).xsuffix)))))))))
                        ((((xlen)).apply (((xself).xname))).greater ((xself).xmax_name_length)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Index too long for multiple database support. Is self.suffix longer than 3 characters?"))))
                        (((((unsupported)).apply (((xself).xname)) (0)).eq "_").or ((((((unsupported)).apply (((xself).xname)) (0)).xisdigit)).apply)).if
                          (((unsupported)).apply (((xself).xname)) (("D%s".mod (((unsupported)).apply (((xself).xname)) ((((unsupported)).apply (1)))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s:%s%s%s%s%s%s%s>".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) (((((xself).xfields).not).if "" (" fields=%s".mod (((xrepr)).apply (((xself).xfields)))))) (((((xself).xexpressions).not).if "" (" expressions=%s".mod (((xrepr)).apply (((xself).xexpressions)))))) (((((xself).xname).not).if "" (" name=%s".mod (((xrepr)).apply (((xself).xname)))))) (((((unsupported)).apply (((xself).xdb_tablespace)) ("None: is there a None literal in the EO language?")).if "" (" db_tablespace=%s".mod (((xrepr)).apply (((xself).xdb_tablespace)))))) (((((unsupported)).apply (((xself).xcondition)) ("None: is there a None literal in the EO language?")).if "" (" condition=%s".mod ((xself).xcondition)))) (((((xself).xinclude).not).if "" (" include=%s".mod (((xrepr)).apply (((xself).xinclude)))))) (((((xself).xopclasses).not).if "" (" opclasses=%s".mod (((xrepr)).apply (((xself).xopclasses))))))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xself).x__class__).eq ((xother).x__class__)).if
                          (((unsupported)).apply ((((((xself).xdeconstruct)).apply).eq ((((xother).xdeconstruct)).apply))))
                        (((unsupported)).apply ((xNotImplemented)))
            (((unsupported)).apply ((xFunc)))
              seq
                unsupported
                xtemplate.write "%(expressions)s"
                xwrapper_classes.write (((unsupported)).apply ((xOrderBy)) ((xCollate)))
                xset_wrapper_classes.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply)
                        ((xconnection).and (((xconnection).xfeatures).xcollate_as_index_expression)).if
                          (((unsupported)).apply (((xself).xwrapper_classes)) ((((xtuple)).apply ((((unsupported)).apply ((xwrapper_cls)) ((xwrapper_cls)) (((xself).xwrapper_classes)) ((((unsupported)).apply ((xwrapper_cls)) ((xCollate)))))))))
                xregister_wrappers.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xwrapper_classes)) ((xwrapper_classes)))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xresolve_root_expression
                    memory > xwrapper_types
                    memory > xwrappers
                    memory > xexpressions
                    memory > xroot_expression
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((xlist)).apply (((((xself).xflatten)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xindex_expressions)) ((xwrappers)))) ((((xpartition)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xe)) (((xself).xwrapper_classes)))))) ((xexpressions)))))
                        xwrapper_types.write (((unsupported)).apply ((((xtype)).apply ((xwrapper)))) ((xwrapper)) ((xwrappers)))
                        ((((xlen)).apply ((xwrapper_types))).neq (((xlen)).apply ((((xset)).apply ((xwrapper_types)))))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Multiple references to %s can't be used in an indexed expression.".mod (((", ".xjoin)).apply ((((unsupported)).apply (((xwrapper_cls).x__qualname__)) ((xwrapper_cls)) (((xself).xwrapper_classes))))))))))
                        ((((unsupported)).apply ((xexpressions)) ((((unsupported)).apply (1) (((((xlen)).apply ((xwrappers))).add 1))))).neq (xwrappers)).if
                          (((unsupported)).apply ((((xValueError)).apply (("%s must be topmost expressions in an indexed expression.".mod (((", ".xjoin)).apply ((((unsupported)).apply (((xwrapper_cls).x__qualname__)) ((xwrapper_cls)) (((xself).xwrapper_classes))))))))))
                        xroot_expression.write (((unsupported)).apply ((xindex_expressions)) (1))
                        xresolve_root_expression.write ((((xroot_expression).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))
                        ((((xisinstance)).apply ((xresolve_root_expression)) ((xCol))).not).if
                          xroot_expression.write (((unsupported)).apply ((xFunc)) ((xroot_expression)) ("(%(expressions)s)"))
                        (xwrappers).if
                          seq
                            xwrappers.write (((unsupported)).apply ((xsorted)) ((xwrappers)) ((((unsupported)).apply ((((((xself).xwrapper_classes).xindex)).apply ((((xtype)).apply ((xw)))))))))
                            xwrappers.write (((unsupported)).apply (((((xwrapper).xcopy)).apply)) ((xwrapper)) ((xwrappers)))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xwrapper)))) ((((xenumerate)).apply ((((unsupported)).apply ((xwrappers)) ((((unsupported)).apply ((1.neg)))))))))
                              bogusForceDataize.write ((((xwrapper).xset_source_expressions)).apply ((((unsupported)).apply ((((unsupported)).apply ((xwrappers)) (((xi).add 1)))))))
                            bogusForceDataize.write ((((((unsupported)).apply ((xwrappers)) ((1.neg))).xset_source_expressions)).apply ((((unsupported)).apply ((xroot_expression)))))
                            bogusForceDataize.write ((((xself).xset_source_expressions)).apply ((((unsupported)).apply ((((unsupported)).apply ((xwrappers)) (0))))))
                          bogusForceDataize.write ((((xself).xset_source_expressions)).apply ((((unsupported)).apply ((xroot_expression)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))