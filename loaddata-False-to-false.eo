memory > xd
memory > xValueError
memory > xno_style
memory > xcmp_fmt
memory > xRuntimeWarning
memory > xcursor
memory > xser_fmt
memory > xapp_config
memory > xext
memory > xDEFAULT_DB_ALIAS
memory > xfixture_label
memory > xfalse
memory > xImportError
memory > xcandidate
memory > xfixture_dir
memory > xbasename
memory > xmode
memory > xfixture_labels
memory > xwarnings
memory > xapps
memory > xproduct
memory > xrouter
memory > xSingleZipReader
memory > xfixture_file
memory > x_
memory > xglob
memory > xopen
memory > xtype
memory > xBaseCommand
memory > xset
memory > xsettings
memory > xDatabaseError
memory > xException
memory > xconnections
memory > xgzip
memory > xsuper
memory > xserializers
memory > xsys
memory > xopen_method
memory > xbz2
memory > xargs
memory > xobj
memory > xdir_
memory > xos
memory > xdirname
memory > xIntegrityError
memory > xfixture_name
memory > xe
memory > xImproperlyConfigured
memory > xoptions
memory > xkwargs
memory > xmodel
memory > xisinstance
memory > xtransaction
memory > xline
memory > xCommandError
memory > xlen
memory > xzipfile
memory > xparse_apps_and_model_labels
memory > xcombo
memory > xlzma
[] > loaddata
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xloaddata
        memory > xhumanize
        memory > xhas_lzma
        memory > xREAD_STDIN
        memory > xfind_fixtures
        memory > xhas_bz2
        memory > x__init__
        memory > xread
        memory > xparse_name
        memory > xadd_arguments
        memory > xcompression_formats
        memory > xmissing_args_message
        memory > xreset_sequences
        memory > xload_label
        memory > xfind_fixture_files_in_dir
        memory > xget_fixture_name_and_dirs
        memory > xsave_obj
        memory > xhandle
        memory > xget_targets
        memory > xhelp
        memory > xfixture_dirs
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                xhas_bz2.write TRUE
              xhas_bz2.write (xfalse)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                xhas_lzma.write TRUE
              xhas_lzma.write (xfalse)
            xREAD_STDIN.write "-"
            (((unsupported)).apply ((xBaseCommand)))
              seq
                xhelp.write "Installs the named fixture(s) in the database."
                xmissing_args_message.write "No database fixture specified. Please provide the path of at least one fixture in the command line."
                xadd_arguments.write
                  [xself xparser]
                    seq > @
                      seq
                        (((unsupported)).apply (((xparser).xadd_argument)) ("args") ("fixture") ("+") ("Fixture labels."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--database") ((xDEFAULT_DB_ALIAS)) ("Nominates a specific database to load fixtures into. Defaults to the \"default\" database."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--app") ("app_label") ("Only look for fixtures in the specified app."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--ignorenonexistent") ("-i") ("store_true") ("ignore") ("Ignores entries in the serialized data for fields that do not currently exist on the model."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-e") ("--exclude") ("append") ((((unsupported)).apply)) ("An app_label or app_label.ModelName to exclude. Can be used multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--format") ("Format of serialized data when reading from stdin."))
                xhandle.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xignore)) ((((unsupported)).apply ((xoptions)) ("ignore"))))
                        (((unsupported)).apply (((xself).xusing)) ((((unsupported)).apply ((xoptions)) ("database"))))
                        (((unsupported)).apply (((xself).xapp_label)) ((((unsupported)).apply ((xoptions)) ("app_label"))))
                        (((unsupported)).apply (((xself).xverbosity)) ((((unsupported)).apply ((xoptions)) ("verbosity"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xexcluded_models)) (((xself).xexcluded_apps)))) ((((xparse_apps_and_model_labels)).apply ((((unsupported)).apply ((xoptions)) ("exclude"))))))
                        (((unsupported)).apply (((xself).xformat)) ((((unsupported)).apply ((xoptions)) ("format"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) (((xself).xusing)))))
                          bogusForceDataize.write ((((xself).xloaddata)).apply ((xfixture_labels)))
                        ((((xtransaction).xget_autocommit)).apply (((xself).xusing))).if
                          bogusForceDataize.write ((((((unsupported)).apply ((xconnections)) (((xself).xusing))).xclose)).apply)
                xcompression_formats.write
                  [xself]
                    memory > xcompression_formats
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xcompression_formats.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xopen)) ("rb"))) ("gz") ((((unsupported)).apply (((xgzip).xGzipFile)) ("rb"))) ("zip") ((((unsupported)).apply ((xSingleZipReader)) ("r"))) ("stdin") ((((unsupported)).apply ((((unsupported)).apply (((xsys).xstdin)))) ("None: is there a None literal in the EO language?"))))
                        (xhas_bz2).if
                          (((unsupported)).apply ((((unsupported)).apply ((xcompression_formats)) ("bz2"))) ((((unsupported)).apply (((xbz2).xBZ2File)) ("r"))))
                        (xhas_lzma).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcompression_formats)) ("lzma"))) ((((unsupported)).apply (((xlzma).xLZMAFile)) ("r"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xcompression_formats)) ("xz"))) ((((unsupported)).apply (((xlzma).xLZMAFile)) ("r"))))
                        (((unsupported)).apply ((xcompression_formats)))
                xreset_sequences.write
                  [xself xconnection xmodels]
                    memory > xsequence_sql
                    seq > @
                      seq
                        unsupported
                        xsequence_sql.write (((((xconnection).xops).xsequence_reset_sql)).apply ((((xno_style)).apply)) ((xmodels)))
                        (xsequence_sql).if
                          seq
                            (((xself).xverbosity).geq 2).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ("Resetting sequences"))
                            (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                              (((unsupported)).apply ((xline)) ((xsequence_sql)))
                                bogusForceDataize.write ((((xcursor).xexecute)).apply ((xline)))
                xloaddata.write
                  [xself xfixture_labels]
                    memory > xtable_names
                    memory > xconnection
                    seq > @
                      seq
                        xconnection.write (((unsupported)).apply ((xconnections)) (((xself).xusing)))
                        (((unsupported)).apply (((xself).xfixture_count)) (0))
                        (((unsupported)).apply (((xself).xloaded_object_count)) (0))
                        (((unsupported)).apply (((xself).xfixture_object_count)) (0))
                        (((unsupported)).apply (((xself).xmodels)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xserialization_formats)) (((((xserializers).xget_public_serializer_formats)).apply)))
                        (((unsupported)).apply ((xfixture_label)) ((xfixture_labels)))
                          ((((xself).xfind_fixtures)).apply ((xfixture_label))).if
                            (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xobjs_with_deferred_fields)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xconnection).xconstraint_checks_disabled)).apply)))
                          seq
                            (((unsupported)).apply ((xfixture_label)) ((xfixture_labels)))
                              bogusForceDataize.write ((((xself).xload_label)).apply ((xfixture_label)))
                            (((unsupported)).apply ((xobj)) (((xself).xobjs_with_deferred_fields)))
                              (((unsupported)).apply (((xobj).xsave_deferred_fields)) (((xself).xusing)))
                        xtable_names.write (((unsupported)).apply ((((xmodel).x_meta).xdb_table)) ((xmodel)) (((xself).xmodels)))
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply (((xconnection).xcheck_constraints)) ((xtable_names)))
                          seq
                            (((unsupported)).apply (((xe).xargs)) ((((unsupported)).apply (("Problem installing fixtures: %s".mod (xe))))))
                            (((unsupported)).apply)
                        (((xself).xloaded_object_count).greater 0).if
                          bogusForceDataize.write ((((xself).xreset_sequences)).apply ((xconnection)) (((xself).xmodels)))
                        (((xself).xverbosity).geq 1).if
                          (((xself).xfixture_object_count).eq ((xself).xloaded_object_count)).if
                            bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Installed %d object(s) from %d fixture(s)".mod (((unsupported)).apply (((xself).xloaded_object_count)) (((xself).xfixture_count))))))
                            bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Installed %d object(s) (of %d) from %d fixture(s)".mod (((unsupported)).apply (((xself).xloaded_object_count)) (((xself).xfixture_object_count)) (((xself).xfixture_count))))))
                xsave_obj.write
                  [xself xobj]
                    memory > xsaved
                    seq > @
                      seq
                        unsupported
                        ((((unsupported)).apply (((((xobj).xobject).x_meta).xapp_config)) (((xself).xexcluded_apps))).or (((unsupported)).apply ((((xtype)).apply (((xobj).xobject)))) (((xself).xexcluded_models)))).if
                          (((unsupported)).apply ((xfalse)))
                        xsaved.write (xfalse)
                        ((((xrouter).xallow_migrate_model)).apply (((xself).xusing)) ((((xobj).xobject).x__class__))).if
                          seq
                            xsaved.write TRUE
                            bogusForceDataize.write (((((xself).xmodels).xadd)).apply ((((xobj).xobject).x__class__)))
                            (((unsupported)).apply ((((unsupported)).apply ((xDatabaseError)) ((xIntegrityError)) ((xValueError)))))
                              (((unsupported)).apply (((xobj).xsave)) (((xself).xusing)))
                              seq
                                (((unsupported)).apply (((xe).xargs)) ((((unsupported)).apply (("Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s".mod (((unsupported)).apply ("object_label") (((((xobj).xobject).x_meta).xlabel)) ("pk") ((((xobj).xobject).xpk)) ("error_msg") ((xe))))))))
                                (((unsupported)).apply)
                        ((xobj).xdeferred_fields).if
                          bogusForceDataize.write (((((xself).xobjs_with_deferred_fields).xappend)).apply ((xobj)))
                        (((unsupported)).apply ((xsaved)))
                xload_label.write
                  [xself xfixture_label]
                    memory > xobjects
                    memory > xloaded_objects_in_fixture
                    memory > xfixture
                    memory > xobjects_in_fixture
                    memory > xshow_progress
                    seq > @
                      seq
                        unsupported
                        xshow_progress.write (((xself).xverbosity).geq 3)
                        (((unsupported)).apply ((((unsupported)).apply ((xfixture_file)) ((xfixture_dir)) ((xfixture_name)))) (((((xself).xfind_fixtures)).apply ((xfixture_label)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xser_fmt)) ((xcmp_fmt)))) (((((xself).xparse_name)).apply ((((((xos).xpath).xbasename)).apply ((xfixture_file)))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen_method)) ((xmode)))) ((((unsupported)).apply (((xself).xcompression_formats)) ((xcmp_fmt)))))
                            xfixture.write (((xopen_method)).apply ((xfixture_file)) ((xmode)))
                            (((unsupported)).apply (((xself).xfixture_count)) (1))
                            xobjects_in_fixture.write 0
                            xloaded_objects_in_fixture.write 0
                            (((xself).xverbosity).geq 2).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Installing %s fixture '%s' from %s.".mod (((unsupported)).apply ((xser_fmt)) ((xfixture_name)) ((((xhumanize)).apply ((xfixture_dir))))))))
                            (((unsupported)).apply ((xException)))
                              seq
                                xobjects.write (((unsupported)).apply (((xserializers).xdeserialize)) ((xser_fmt)) ((xfixture)) (((xself).xusing)) (((xself).xignore)) (TRUE))
                                (((unsupported)).apply ((xobj)) ((xobjects)))
                                  seq
                                    (((unsupported)).apply ((xobjects_in_fixture)) (1))
                                    ((((xself).xsave_obj)).apply ((xobj))).if
                                      seq
                                        (((unsupported)).apply ((xloaded_objects_in_fixture)) (1))
                                        (xshow_progress).if
                                          (((unsupported)).apply ((((xself).xstdout).xwrite)) (("rProcessed %i object(s).".mod (xloaded_objects_in_fixture))) (""))
                              seq
                                ((((xisinstance)).apply ((xe)) ((xCommandError))).not).if
                                  (((unsupported)).apply (((xe).xargs)) ((((unsupported)).apply (("Problem installing fixture '%s': %s".mod (((unsupported)).apply ((xfixture_file)) ((xe))))))))
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xfixture).xclose)).apply)
                            ((xobjects_in_fixture).and (xshow_progress)).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply)
                            (((unsupported)).apply (((xself).xloaded_object_count)) ((xloaded_objects_in_fixture)))
                            (((unsupported)).apply (((xself).xfixture_object_count)) ((xobjects_in_fixture)))
                            ((xobjects_in_fixture).eq 0).if
                              bogusForceDataize.write ((((xwarnings).xwarn)).apply (("No fixture data found for '%s'. (File format may be invalid.)".mod (xfixture_name))) ((xRuntimeWarning)))
                xget_fixture_name_and_dirs.write
                  [xself xfixture_name]
                    memory > xfixture_dirs
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdirname)) ((xbasename)))) ((((((xos).xpath).xsplit)).apply ((xfixture_name)))))
                        (((((xos).xpath).xisabs)).apply ((xfixture_name))).if
                          xfixture_dirs.write (((unsupported)).apply ((xdirname)))
                          seq
                            xfixture_dirs.write ((xself).xfixture_dirs)
                            (((unsupported)).apply ((((xos).xpath).xsep)) ((((((xos).xpath).xnormpath)).apply ((xfixture_name))))).if
                              xfixture_dirs.write (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xdir_)) ((xdirname)))) ((xdir_)) ((xfixture_dirs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xbasename)) ((xfixture_dirs)))))
                xget_targets.write
                  [xself xfixture_name xser_fmt xcmp_fmt]
                    memory > xser_fmts
                    memory > xdatabases
                    memory > xcmp_fmts
                    seq > @
                      seq
                        xdatabases.write (((unsupported)).apply (((xself).xusing)) ("None: is there a None literal in the EO language?"))
                        xcmp_fmts.write ((((unsupported)).apply ((xcmp_fmt)) ("None: is there a None literal in the EO language?")).if ((xself).xcompression_formats) (((unsupported)).apply ((xcmp_fmt))))
                        xser_fmts.write ((((unsupported)).apply ((xser_fmt)) ("None: is there a None literal in the EO language?")).if ((xself).xserialization_formats) (((unsupported)).apply ((xser_fmt))))
                        (((unsupported)).apply ((((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((xfixture_name)) ((((".".xjoin)).apply ((((unsupported)).apply ((xext)) ((xext)) ((xcombo)) ((xext))))))))) ((xcombo)) ((((xproduct)).apply ((xdatabases)) ((xser_fmts)) ((xcmp_fmts)))))))
                xfind_fixture_files_in_dir.write
                  [xself xfixture_dir xfixture_name xtargets]
                    memory > xpath
                    memory > xfixture_files_in_dir
                    seq > @
                      seq
                        xfixture_files_in_dir.write (((unsupported)).apply)
                        xpath.write (((((xos).xpath).xjoin)).apply ((xfixture_dir)) ((xfixture_name)))
                        (((unsupported)).apply ((xcandidate)) (((((xglob).xiglob)).apply ((((((xglob).xescape)).apply ((xpath))).add "*")))))
                          (((unsupported)).apply ((((((xos).xpath).xbasename)).apply ((xcandidate)))) ((xtargets))).if
                            bogusForceDataize.write ((((xfixture_files_in_dir).xappend)).apply ((((unsupported)).apply ((xcandidate)) ((xfixture_dir)) ((xfixture_name)))))
                        (((unsupported)).apply ((xfixture_files_in_dir)))
                xfind_fixtures.write
                  [xself xfixture_label]
                    memory > xtargets
                    memory > xfixture_files_in_dir
                    memory > xfixture_files
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xfixture_label).eq (xREAD_STDIN)).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xREAD_STDIN)) ("None: is there a None literal in the EO language?") ((xREAD_STDIN)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfixture_name)) ((xser_fmt)) ((xcmp_fmt)))) (((((xself).xparse_name)).apply ((xfixture_label)))))
                        (((xself).xverbosity).geq 2).if
                          bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Loading '%s' fixtures...".mod (xfixture_name))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfixture_name)) ((xfixture_dirs)))) (((((xself).xget_fixture_name_and_dirs)).apply ((xfixture_name)))))
                        xtargets.write ((((xself).xget_targets)).apply ((xfixture_name)) ((xser_fmt)) ((xcmp_fmt)))
                        xfixture_files.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfixture_dir)) ((xfixture_dirs)))
                          seq
                            (((xself).xverbosity).geq 2).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Checking %s for fixtures...".mod (((xhumanize)).apply ((xfixture_dir))))))
                            xfixture_files_in_dir.write ((((xself).xfind_fixture_files_in_dir)).apply ((xfixture_dir)) ((xfixture_name)) ((xtargets)))
                            ((((xself).xverbosity).geq 2).and ((xfixture_files_in_dir).not)).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("No fixture '%s' in %s.".mod (((unsupported)).apply ((xfixture_name)) ((((xhumanize)).apply ((xfixture_dir))))))))
                            ((((xlen)).apply ((xfixture_files_in_dir))).greater 1).if
                              (((unsupported)).apply ((((xCommandError)).apply (("Multiple fixtures named '%s' in %s. Aborting.".mod (((unsupported)).apply ((xfixture_name)) ((((xhumanize)).apply ((xfixture_dir))))))))))
                            bogusForceDataize.write ((((xfixture_files).xextend)).apply ((xfixture_files_in_dir)))
                        ((xfixture_files).not).if
                          (((unsupported)).apply ((((xCommandError)).apply (("No fixture named '%s' found.".mod (xfixture_name))))))
                        (((unsupported)).apply ((xfixture_files)))
                xfixture_dirs.write
                  [xself]
                    memory > xdirs
                    memory > xfixture_dirs
                    memory > xapp_label
                    memory > xapp_dir
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdirs.write (((unsupported)).apply)
                        xfixture_dirs.write ((xsettings).xFIXTURE_DIRS)
                        ((((xlen)).apply ((xfixture_dirs))).neq (((xlen)).apply ((((xset)).apply ((xfixture_dirs)))))).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply ("settings.FIXTURE_DIRS contains duplicates."))))
                        (((unsupported)).apply ((xapp_config)) (((((xapps).xget_app_configs)).apply)))
                          seq
                            xapp_label.write ((xapp_config).xlabel)
                            xapp_dir.write (((((xos).xpath).xjoin)).apply (((xapp_config).xpath)) ("fixtures"))
                            (((unsupported)).apply ((xapp_dir)) ((xfixture_dirs))).if
                              (((unsupported)).apply ((((xImproperlyConfigured)).apply (("'%s' is a default fixture directory for the '%s' app and cannot be listed in settings.FIXTURE_DIRS.".mod (((unsupported)).apply ((xapp_dir)) ((xapp_label))))))))
                            (((xself).xapp_label).and ((xapp_label).neq ((xself).xapp_label))).if
                              (((unsupported)).apply)
                            (((((xos).xpath).xisdir)).apply ((xapp_dir))).if
                              bogusForceDataize.write ((((xdirs).xappend)).apply ((xapp_dir)))
                        bogusForceDataize.write ((((xdirs).xextend)).apply ((xfixture_dirs)))
                        bogusForceDataize.write ((((xdirs).xappend)).apply (""))
                        (((unsupported)).apply ((((unsupported)).apply ((((((xos).xpath).xrealpath)).apply ((xd)))) ((xd)) ((xdirs)))))
                xparse_name.write
                  [xself xfixture_name]
                    memory > xname
                    memory > xser_fmt
                    memory > xparts
                    memory > xcmp_fmt
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xfixture_name).eq (xREAD_STDIN)).if
                          seq
                            (((xself).xformat).not).if
                              (((unsupported)).apply ((((xCommandError)).apply ("--format must be specified when reading from stdin."))))
                            (((unsupported)).apply ((((unsupported)).apply ((xREAD_STDIN)) (((xself).xformat)) ("stdin"))))
                        xparts.write ((((xfixture_name).xrsplit)).apply (".") (2))
                        (((((xlen)).apply ((xparts))).greater 1).and (((unsupported)).apply ((((unsupported)).apply ((xparts)) ((1.neg)))) (((xself).xcompression_formats)))).if
                          seq
                            xcmp_fmt.write (((unsupported)).apply ((xparts)) ((1.neg)))
                            xparts.write (((unsupported)).apply ((xparts)) ((((unsupported)).apply ((1.neg)))))
                          xcmp_fmt.write "None: is there a None literal in the EO language?"
                        ((((xlen)).apply ((xparts))).greater 1).if
                          (((unsupported)).apply ((((unsupported)).apply ((xparts)) ((1.neg)))) (((xself).xserialization_formats))).if
                            seq
                              xser_fmt.write (((unsupported)).apply ((xparts)) ((1.neg)))
                              xparts.write (((unsupported)).apply ((xparts)) ((((unsupported)).apply ((1.neg)))))
                            (((unsupported)).apply ((((xCommandError)).apply (("Problem installing fixture '%s': %s is not a known serialization format.".mod (((unsupported)).apply ((((".".xjoin)).apply ((((unsupported)).apply ((xparts)) ((((unsupported)).apply ((1.neg)))))))) ((((unsupported)).apply ((xparts)) ((1.neg))))))))))
                          xser_fmt.write "None: is there a None literal in the EO language?"
                        xname.write (((".".xjoin)).apply ((xparts)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xser_fmt)) ((xcmp_fmt)))))
            (((unsupported)).apply (((xzipfile).xZipFile)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        ((((xlen)).apply (((((xself).xnamelist)).apply))).neq 1).if
                          (((unsupported)).apply ((((xValueError)).apply ("Zip-compressed fixtures must contain one file."))))
                xread.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xzipfile).xZipFile).xread)).apply ((xself)) ((((unsupported)).apply (((((xself).xnamelist)).apply)) (0))))))
            xhumanize.write
              [xdirname]
                seq > @
                  (((unsupported)).apply (((xdirname).if ("'%s'".mod (xdirname)) "absolute path")))