memory > xrc
memory > xdaemon
memory > xt
memory > xrange
memory > xlock_tests
memory > xrandom
memory > xi
memory > xweakref
memory > xThreadExit
memory > xlen
memory > x__name__
memory > xthreading
memory > xassert_python_failure
memory > xstdout
memory > xlimit
memory > xKeyboardInterrupt
memory > xRuntimeError
memory > xIssue27558
memory > xassert_python_ok
memory > xWorker
memory > xValueError
memory > ximport_module
memory > xsignal
memory > xstr
memory > xout
memory > x_testcapi
memory > xtest
memory > xverbose
memory > xThreadRunFail
memory > x_
memory > xerr
memory > xobject2
memory > xRunSelfFunction
memory > xprint
memory > xUnboundLocalError
memory > xw
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xr
memory > xhasattr
memory > xtime
memory > xCounter
memory > x_thread
memory > xsupport
memory > xsys
memory > xDeprecationWarning
memory > xstderr
memory > xargs
memory > xsubprocess
memory > xos
memory > xsetattr
memory > xunittest
memory > xSystemExit
memory > xTestThread
memory > xstaticmethod
memory > xnext
memory > xobject
memory > xAsyncExc
memory > xstatus
memory > xBaseTestCase
memory > xkwargs
[] > test_threading
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xplatforms_to_skip
        memory > xtest_threads_join
        memory > xtest_ident_of_no_threading_threads
        memory > xbarriertype
        memory > xtest_various_ops
        memory > xtest_custom_excepthook_fail
        memory > xsetUp
        memory > xtest_repr_daemon
        memory > xtest_joining_inactive_thread
        memory > xtest_interrupt_main_subthread
        memory > xtest_shutdown_locks
        memory > xtest_custom_excepthook
        memory > xtest_interrupt_main_mainthread
        memory > xtest_finalize_runnning_thread
        memory > xtest_excepthook_thread_None
        memory > xtest_3_join_in_forked_from_thread
        memory > xtest_interrupt_main_noerror
        memory > xtest__all__
        memory > xtest_main_thread_after_fork_from_nonmain_thread
        memory > xtest_print_exception
        memory > xtest_daemon_param
        memory > xsemtype
        memory > xtest_no_refcycle_through_target
        memory > xget
        memory > xtest_repr_stopped
        memory > xtest_daemon_threads_fatal_error
        memory > xdec
        memory > xinc
        memory > xtest_clear_threads_states_after_fork
        memory > xeventtype
        memory > xtest_daemonize_active_thread
        memory > xtest_print_exception_stderr_is_none_2
        memory > xtest_init_immutable_default_args
        memory > xcondtype
        memory > xtest_various_ops_small_stack
        memory > xtest_threads_join_2
        memory > xtest_excepthook
        memory > xtest_PyThreadState_SetAsyncExc
        memory > xtest_BoundedSemaphore_limit
        memory > xtest_print_exception_stderr_is_none_1
        memory > xtest_finalize_with_trace
        memory > xtest_joining_current_thread
        memory > xrun
        memory > xtest_main_thread_after_fork
        memory > xtest_frame_tstate_tracing
        memory > xtest_finalization_shutdown
        memory > xtest_dummy_thread_after_fork
        memory > xtest_start_thread_again
        memory > x_callback_spy
        memory > xtest_reinit_tls_after_fork
        memory > xtest_main_thread
        memory > xtest_old_threading_api
        memory > xtest_system_exit
        memory > x__init__
        memory > xtest_limbo_cleanup
        memory > xlocktype
        memory > xtest_4_daemon_threads
        memory > x_run_and_join
        memory > xtest_join_nondaemon_on_shutdown
        memory > xtest_is_alive_after_fork
        memory > xtest_various_ops_large_stack
        memory > xtest_2_join_in_forked_process
        memory > xtest_1_join_on_shutdown
        memory > xtearDown
        memory > xtest_enumerate_after_join
        memory > xtest_bare_raise_in_brand_new_thread
        memory > xtest_releasing_unacquired_lock
        memory > xtest_foreign_thread
        memory > xtest_recursion_limit
        memory > xtest_main_thread_during_shutdown
        memory > xtest_tstate_lock
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xplatforms_to_skip.write (((unsupported)).apply ("netbsd5") ("hp-ux11"))
            (((unsupported)).apply ((xobject2)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) (0))
                xinc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) (1))
                xdec.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) (1))
                xget.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)))
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                x__init__.write
                  [xself xname xtestcase xsema xmutex xnrunning]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xthreading).xThread).x__init__)) ((xself)) ((xname)))
                        (((unsupported)).apply (((xself).xtestcase)) ((xtestcase)))
                        (((unsupported)).apply (((xself).xsema)) ((xsema)))
                        (((unsupported)).apply (((xself).xmutex)) ((xmutex)))
                        (((unsupported)).apply (((xself).xnrunning)) ((xnrunning)))
                xrun.write
                  [xself]
                    memory > xdelay
                    seq > @
                      seq
                        xdelay.write (((((xrandom).xrandom)).apply).div 10000.0)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply (("task %s will run for %.1f usec".mod (((unsupported)).apply (((xself).xname)) (((xdelay).mul (((unsupported)).apply)))))))
                        (((unsupported)).apply (((xself).xsema)))
                          seq
                            (((unsupported)).apply (((xself).xmutex)))
                              seq
                                bogusForceDataize.write (((((xself).xnrunning).xinc)).apply)
                                (xverbose).if
                                  bogusForceDataize.write (((xprint)).apply ((((((xself).xnrunning).xget)).apply)) ("tasks are running"))
                                bogusForceDataize.write (((((xself).xtestcase).xassertLessEqual)).apply ((((((xself).xnrunning).xget)).apply)) (3))
                            bogusForceDataize.write ((((xtime).xsleep)).apply ((xdelay)))
                            (xverbose).if
                              bogusForceDataize.write (((xprint)).apply ("task") (((xself).xname)) ("done"))
                            (((unsupported)).apply (((xself).xmutex)))
                              seq
                                bogusForceDataize.write (((((xself).xnrunning).xdec)).apply)
                                bogusForceDataize.write (((((xself).xtestcase).xassertGreaterEqual)).apply ((((((xself).xnrunning).xget)).apply)) (0))
                                (xverbose).if
                                  bogusForceDataize.write (((xprint)).apply (("%s is finished. %d tasks are running".mod (((unsupported)).apply (((xself).xname)) ((((((xself).xnrunning).xget)).apply))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_threads)) ((((((xtest).xsupport).xthreading_setup)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xtest).xsupport).xthreading_cleanup)).apply ((((unsupported)).apply (((xself).x_threads)))))
                        bogusForceDataize.write (((((xtest).xsupport).xreap_children)).apply)
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_various_ops.write
                  [xself]
                    memory > xnative_ids
                    memory > xsema
                    memory > xt
                    memory > xmutex
                    memory > xnumrunning
                    memory > xthreads
                    memory > xNUMTASKS
                    seq > @
                      seq
                        xNUMTASKS.write 10
                        xsema.write (((unsupported)).apply (((xthreading).xBoundedSemaphore)) (3))
                        xmutex.write ((((xthreading).xRLock)).apply)
                        xnumrunning.write (((xCounter)).apply)
                        xthreads.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xNUMTASKS)))))
                          seq
                            xt.write (((xTestThread)).apply (("<thread %d>".mod (xi))) ((xself)) ((xsema)) ((xmutex)) ((xnumrunning)))
                            bogusForceDataize.write ((((xthreads).xappend)).apply ((xt)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xt).xident)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xt)))) ("^<TestThread(.*, initial)>$"))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                        (((xhasattr)).apply ((xthreading)) ("get_native_id")).if
                          seq
                            xnative_ids.write ((((xset)).apply ((((unsupported)).apply (((xt).xnative_id)) ((xt)) ((xthreads))))).or (((unsupported)).apply (((((xthreading).xget_native_id)).apply))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("None: is there a None literal in the EO language?") ((xnative_ids)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnative_ids)))) (((xNUMTASKS).add 1)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("waiting for all tasks to complete"))
                        (((unsupported)).apply ((xt)) ((xthreads)))
                          seq
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xt).xis_alive)).apply)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xt).xident)) (0))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xt).xident)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xt)))) ("^<TestThread(.*, stopped -?d+)>$"))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("all tasks done"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnumrunning).xget)).apply)) (0))
                xtest_ident_of_no_threading_threads.write
                  [xself]
                    memory > xtid
                    memory > xident
                    memory > xdone
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((((xthreading).xcurrentThread)).apply).xident)))
                        xf.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xident).xappend)).apply ((((((xthreading).xcurrentThread)).apply).xident)))
                                bogusForceDataize.write ((((xdone).xset)).apply)
                        xdone.write ((((xthreading).xEvent)).apply)
                        xident.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                          seq
                            xtid.write ((((x_thread).xstart_new_thread)).apply ((xf)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xdone).xwait)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xident)) (0))) ((xtid)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xthreading).x_active)) ((((unsupported)).apply ((xident)) (0))))))))))
                xtest_various_ops_small_stack.write
                  [xself]
                    seq > @
                      seq
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("with 256 KiB thread stack size..."))
                        (((unsupported)).apply (((x_thread).xerror)))
                          bogusForceDataize.write ((((xthreading).xstack_size)).apply (262144))
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("platform does not support changing thread stack size"))))
                        bogusForceDataize.write ((((xself).xtest_various_ops)).apply)
                        bogusForceDataize.write ((((xthreading).xstack_size)).apply (0))
                xtest_various_ops_large_stack.write
                  [xself]
                    seq > @
                      seq
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("with 1 MiB thread stack size..."))
                        (((unsupported)).apply (((x_thread).xerror)))
                          bogusForceDataize.write ((((xthreading).xstack_size)).apply (1048576))
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("platform does not support changing thread stack size"))))
                        bogusForceDataize.write ((((xself).xtest_various_ops)).apply)
                        bogusForceDataize.write ((((xthreading).xstack_size)).apply (0))
                xtest_foreign_thread.write
                  [xself]
                    memory > xtid
                    memory > xf
                    memory > xmutex
                    seq > @
                      seq
                        xf.write
                          [xmutex]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xthreading).xcurrent_thread)).apply)
                                bogusForceDataize.write ((((xmutex).xrelease)).apply)
                        xmutex.write ((((xthreading).xLock)).apply)
                        bogusForceDataize.write ((((xmutex).xacquire)).apply)
                        (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                          seq
                            xtid.write ((((x_thread).xstart_new_thread)).apply ((xf)) ((((unsupported)).apply ((xmutex)))))
                            bogusForceDataize.write ((((xmutex).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xtid)) (((xthreading).x_active)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xthreading).x_active)) ((xtid)))) (((xthreading).x_DummyThread)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply (((xthreading).x_active)) ((xtid))).xis_alive)).apply)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((((unsupported)).apply (((xthreading).x_active)) ((xtid)))))) ("_DummyThread"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xthreading).x_active)) ((xtid)))))))))
                xtest_PyThreadState_SetAsyncExc.write
                  [xself]
                    memory > xret
                    memory > xt
                    memory > xctypes
                    memory > xset_async_exc
                    memory > xrun
                    memory > xtid
                    memory > xresult
                    memory > xworker_started
                    memory > xexception
                    memory > xworker_saw_exception
                    seq > @
                      seq
                        xctypes.write (((ximport_module)).apply ("ctypes"))
                        xset_async_exc.write (((xctypes).xpythonapi).xPyThreadState_SetAsyncExc)
                        (((unsupported)).apply (((xset_async_exc).xargtypes)) ((((unsupported)).apply (((xctypes).xc_ulong)) (((xctypes).xpy_object)))))
                        (((unsupported)).apply ((xException)))
                        xexception.write ((((xctypes).xpy_object)).apply ((xAsyncExc)))
                        xtid.write ((((xthreading).xget_ident)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xtid)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xtid)) (0))
                        (((unsupported)).apply ((xAsyncExc)))
                          seq
                            xresult.write (((xset_async_exc)).apply ((xtid)) ((xexception)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                          bogusForceDataize.write ((((xself).xfail)).apply ("AsyncExc not raised"))
                        (((unsupported)).apply ((xUnboundLocalError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (1))
                        xworker_started.write ((((xthreading).xEvent)).apply)
                        xworker_saw_exception.write ((((xthreading).xEvent)).apply)
                        (((unsupported)).apply (((xthreading).xThread)))
                          xrun.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xid)) (((((xthreading).xget_ident)).apply)))
                                  (((unsupported)).apply (((xself).xfinished)) (FALSE))
                                  (((unsupported)).apply ((xAsyncExc)))
                                    while.
                                      TRUE
                                      [unused]
                                        seq > @
                                          seq
                                            bogusForceDataize.write ((((xworker_started).xset)).apply)
                                            bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                                    seq
                                      (((unsupported)).apply (((xself).xfinished)) (TRUE))
                                      bogusForceDataize.write ((((xworker_saw_exception).xset)).apply)
                        xt.write (((xWorker)).apply)
                        (((unsupported)).apply (((xt).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    started worker thread"))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    trying nonsensical thread id"))
                        xresult.write (((xset_async_exc)).apply ((1.neg)) ((xexception)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (0))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    waiting for worker thread to get started"))
                        xret.write ((((xworker_started).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xret)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    verifying worker hasn't exited"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xt).xfinished)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    attempting to raise asynch exception in worker"))
                        xresult.write (((xset_async_exc)).apply (((xt).xid)) ((xexception)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (1))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    waiting for worker to say it caught the exception"))
                        (((unsupported)).apply (((xworker_saw_exception).xwait)) (10))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xt).xfinished)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("    all OK -- joining worker"))
                        ((xt).xfinished).if
                          bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_limbo_cleanup.write
                  [xself]
                    memory > xt
                    memory > x_start_new_thread
                    memory > xfail_new_thread
                    seq > @
                      seq
                        xfail_new_thread.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xthreading).xThreadError)).apply)))
                        x_start_new_thread.write ((xthreading).x_start_new_thread)
                        (((unsupported)).apply (((xthreading).x_start_new_thread)) ((xfail_new_thread)))
                        (((unsupported)).apply)
                          seq
                            xt.write (((unsupported)).apply (((xthreading).xThread)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xthreading).xThreadError)) (((xt).xstart)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xt)) (((xthreading).x_limbo)))) ("Failed to cleanup _limbo map on failure of Thread.start()."))
                          (((unsupported)).apply (((xthreading).x_start_new_thread)) ((x_start_new_thread)))
                xtest_finalize_runnning_thread.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((ximport_module)).apply ("ctypes"))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)).apply ("-c") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (42))
                xtest_finalize_with_trace.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xassert_python_ok)).apply ("-c") ((((unsupported)).apply)))
                xtest_join_nondaemon_on_shutdown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("Woke up, sleep function is: <built-in function sleep>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                xtest_enumerate_after_join.write
                  [xself]
                    memory > xt
                    memory > xl
                    memory > xenum
                    memory > xold_interval
                    seq > @
                      seq
                        xenum.write ((xthreading).xenumerate)
                        xold_interval.write ((((xsys).xgetswitchinterval)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (100))))
                            seq
                              bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply (((xi).mul 0.0002)))
                              xt.write (((unsupported)).apply (((xthreading).xThread)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                              bogusForceDataize.write ((((xt).xstart)).apply)
                              bogusForceDataize.write ((((xt).xjoin)).apply)
                              xl.write (((xenum)).apply)
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xt)) ((xl)) (("#1703448 triggered after %d trials: %s".mod (((unsupported)).apply ((xi)) ((xl))))))
                          bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((xold_interval)))
                xtest_no_refcycle_through_target.write
                  [xself]
                    memory > xweak_raising_cyclic_object
                    memory > xweak_cyclic_object
                    memory > x__init__
                    memory > xcyclic_object
                    memory > x_run
                    memory > xraising_cyclic_object
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xshould_raise]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xshould_raise)) ((xshould_raise)))
                                    (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) (((xself).x_run)) ((((unsupported)).apply ((xself)))) ((((unsupported)).apply ("yet_another") ((xself)))))))
                                    bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                            x_run.write
                              [xself xother_ref xyet_another]
                                seq > @
                                  ((xself).xshould_raise).if
                                    (((unsupported)).apply ((xSystemExit)))
                        xcyclic_object.write (((unsupported)).apply ((xRunSelfFunction)) (FALSE))
                        xweak_cyclic_object.write ((((xweakref).xref)).apply ((xcyclic_object)))
                        bogusForceDataize.write (((((xcyclic_object).xthread).xjoin)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcyclic_object)))))))
                        (((unsupported)).apply (((xself).xassertIsNone)) ((((xweak_cyclic_object)).apply)) (("%d references still around".mod ((((xsys).xgetrefcount)).apply ((((xweak_cyclic_object)).apply))))))
                        xraising_cyclic_object.write (((unsupported)).apply ((xRunSelfFunction)) (TRUE))
                        xweak_raising_cyclic_object.write ((((xweakref).xref)).apply ((xraising_cyclic_object)))
                        bogusForceDataize.write (((((xraising_cyclic_object).xthread).xjoin)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xraising_cyclic_object)))))))
                        (((unsupported)).apply (((xself).xassertIsNone)) ((((xweak_raising_cyclic_object)).apply)) (("%d references still around".mod ((((xsys).xgetrefcount)).apply ((((xweak_raising_cyclic_object)).apply))))))
                xtest_old_threading_api.write
                  [xself]
                    memory > xt
                    memory > xe
                    seq > @
                      seq
                        xt.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xt).xisDaemon)).apply)
                        bogusForceDataize.write ((((xt).xsetDaemon)).apply (TRUE))
                        bogusForceDataize.write ((((xt).xgetName)).apply)
                        bogusForceDataize.write ((((xt).xsetName)).apply ("name"))
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xDeprecationWarning)) ("use is_alive()"))))
                          bogusForceDataize.write ((((xt).xisAlive)).apply)
                        xe.write ((((xthreading).xEvent)).apply)
                        bogusForceDataize.write ((((xe).xisSet)).apply)
                        bogusForceDataize.write ((((xthreading).xactiveCount)).apply)
                xtest_repr_daemon.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("daemon") ((((xrepr)).apply ((xt)))))
                        (((unsupported)).apply (((xt).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("daemon") ((((xrepr)).apply ((xt)))))
                xtest_daemon_param.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xt).xdaemon)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xt).xdaemon)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xt).xdaemon)))
                xtest_dummy_thread_after_fork.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                xtest_is_alive_after_fork.write
                  [xself]
                    memory > xt
                    memory > xpid
                    memory > xold_interval
                    seq > @
                      (((unsupported)).apply)
                        xold_interval.write ((((xsys).xgetswitchinterval)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsys).xsetswitchinterval)) ((xold_interval)))
                        bogusForceDataize.write (((((xtest).xsupport).xsetswitchinterval)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (20))))
                          seq
                            xt.write (((unsupported)).apply (((xthreading).xThread)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                            xpid.write ((((xos).xfork)).apply)
                            ((xpid).eq 0).if
                              bogusForceDataize.write ((((xos).x_exit)).apply ((((((xt).xis_alive)).apply).if 11 10)))
                              seq
                                bogusForceDataize.write ((((xt).xjoin)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xpid)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xos).xWIFEXITED)).apply ((xstatus)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (10) (((((xos).xWEXITSTATUS)).apply ((xstatus)))))
                xtest_main_thread.write
                  [xself]
                    memory > xmain
                    memory > xth
                    memory > xf
                    seq > @
                      seq
                        xmain.write ((((xthreading).xmain_thread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmain).xname)) ("MainThread"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmain).xident)) ((((((xthreading).xcurrent_thread)).apply).xident)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmain).xident)) (((((xthreading).xget_ident)).apply)))
                        xf.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((((xthreading).xmain_thread)).apply).xident)) ((((((xthreading).xcurrent_thread)).apply).xident)))
                        xth.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xth).xstart)).apply)
                        bogusForceDataize.write ((((xth).xjoin)).apply)
                xtest_main_thread_after_fork.write
                  [xself]
                    memory > xcode
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        xdata.write (((((((xout).xdecode)).apply).xreplace)).apply ("r") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("MainThreadnTruenTruen"))
                xtest_main_thread_after_fork_from_nonmain_thread.write
                  [xself]
                    memory > xcode
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        xdata.write (((((((xout).xdecode)).apply).xreplace)).apply ("r") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("Thread-1nTruenTruen"))
                xtest_main_thread_during_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        xdata.write ((((xout).xdecode)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdata).xsplitlines)).apply)) (((((unsupported)).apply ("GC: True True True")).mul 2)))
                xtest_finalization_shutdown.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr)) (""))
                xtest_tstate_lock.write
                  [xself]
                    memory > xstarted
                    memory > xt
                    memory > xfinish
                    memory > xtstate_lock
                    memory > xf
                    seq > @
                      seq
                        xstarted.write ((((x_thread).xallocate_lock)).apply)
                        xfinish.write ((((x_thread).xallocate_lock)).apply)
                        bogusForceDataize.write ((((xstarted).xacquire)).apply)
                        bogusForceDataize.write ((((xfinish).xacquire)).apply)
                        xf.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstarted).xrelease)).apply)
                                bogusForceDataize.write ((((xfinish).xacquire)).apply)
                                bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xt).x_tstate_lock)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xstarted).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xt).xis_alive)).apply)))
                        xtstate_lock.write ((xt).x_tstate_lock)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xtstate_lock).xacquire)) (0))) (FALSE))
                        bogusForceDataize.write ((((xfinish).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xtstate_lock).xacquire)) (5))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xt).xis_alive)).apply)))
                        bogusForceDataize.write ((((xtstate_lock).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xt).xis_alive)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xt).x_tstate_lock)))
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_repr_stopped.write
                  [xself]
                    memory > xLOOKING_FOR
                    memory > xstarted
                    memory > xt
                    memory > xfinish
                    memory > xf
                    seq > @
                      seq
                        xstarted.write ((((x_thread).xallocate_lock)).apply)
                        xfinish.write ((((x_thread).xallocate_lock)).apply)
                        bogusForceDataize.write ((((xstarted).xacquire)).apply)
                        bogusForceDataize.write ((((xfinish).xacquire)).apply)
                        xf.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstarted).xrelease)).apply)
                                bogusForceDataize.write ((((xfinish).xacquire)).apply)
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xstarted).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("started") ((((xrepr)).apply ((xt)))))
                        bogusForceDataize.write ((((xfinish).xrelease)).apply)
                        xLOOKING_FOR.write "stopped"
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (500))))
                          seq
                            (((unsupported)).apply ((xLOOKING_FOR)) ((((xrepr)).apply ((xt))))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xLOOKING_FOR)) ((((xrepr)).apply ((xt)))))
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_BoundedSemaphore_limit.write
                  [xself]
                    memory > xthreads
                    memory > xbs
                    seq > @
                      (((unsupported)).apply ((xlimit)) ((((xrange)).apply (1) (10))))
                        seq
                          xbs.write ((((xthreading).xBoundedSemaphore)).apply ((xlimit)))
                          xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) (((xbs).xacquire)))) ((x_)) ((((xrange)).apply ((xlimit)))))
                          (((unsupported)).apply ((xt)) ((xthreads)))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                          (((unsupported)).apply ((xt)) ((xthreads)))
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                          xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) (((xbs).xrelease)))) ((x_)) ((((xrange)).apply ((xlimit)))))
                          (((unsupported)).apply ((xt)) ((xthreads)))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                          (((unsupported)).apply ((xt)) ((xthreads)))
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbs).xrelease)))
                xtest_frame_tstate_tracing.write
                  [xself]
                    memory > xnoop_trace
                    memory > xcallback
                    memory > xold_trace
                    memory > xgenerator
                    seq > @
                      (((unsupported)).apply)
                        xnoop_trace.write
                          [xframe xevent xarg]
                            seq > @
                              (((unsupported)).apply ((xnoop_trace)))
                        xgenerator.write
                          []
                            seq > @
                              while.
                                1
                                [unused]
                                  seq > @
                                    (((unsupported)).apply ("generator"))
                        xcallback.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply (((xcallback).xgen)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply (((xcallback).xgen)) ((((xgenerator)).apply)))
                                (((unsupported)).apply ((((xnext)).apply (((xcallback).xgen)))))
                        (((unsupported)).apply (((xcallback).xgen)) ("None: is there a None literal in the EO language?"))
                        xold_trace.write ((((xsys).xgettrace)).apply)
                        bogusForceDataize.write ((((xsys).xsettrace)).apply ((xnoop_trace)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xthreading).xsettrace)).apply ((xnoop_trace)))
                            (((unsupported)).apply)
                            bogusForceDataize.write ((((x_testcapi).xcall_in_temporary_c_thread)).apply ((xcallback)))
                            (((unsupported)).apply ((xtest)) ((((xrange)).apply (3))))
                              bogusForceDataize.write (((xcallback)).apply)
                          bogusForceDataize.write ((((xsys).xsettrace)).apply ((xold_trace)))
                xtest_shutdown_locks.write
                  [xself]
                    memory > xthread
                    memory > xevent
                    memory > xtstate_lock
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdaemon)) ((((unsupported)).apply (FALSE) (TRUE))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdaemon)))))
                            seq
                              xevent.write ((((xthreading).xEvent)).apply)
                              xthread.write (((unsupported)).apply (((xthreading).xThread)) (((xevent).xwait)) ((xdaemon)))
                              bogusForceDataize.write ((((xthread).xstart)).apply)
                              xtstate_lock.write ((xthread).x_tstate_lock)
                              ((xdaemon).not).if
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xtstate_lock)) (((xthreading).x_shutdown_locks)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xtstate_lock)) (((xthreading).x_shutdown_locks)))
                              bogusForceDataize.write ((((xevent).xset)).apply)
                              bogusForceDataize.write ((((xthread).xjoin)).apply)
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xtstate_lock)) (((xthreading).x_shutdown_locks)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                x_run_and_join.write
                  [xself xscript]
                    memory > xdata
                    seq > @
                      seq
                        xscript.write ((((unsupported)).apply).add (xscript))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xscript)))))
                        xdata.write (((((((xout).xdecode)).apply).xreplace)).apply ("r") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("end of mainnend of threadn"))
                xtest_1_join_on_shutdown.write
                  [xself]
                    memory > xscript
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_run_and_join)).apply ((xscript)))
                xtest_2_join_in_forked_process.write
                  [xself]
                    memory > xscript
                    seq > @
                      (((unsupported)).apply)
                        xscript.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_run_and_join)).apply ((xscript)))
                xtest_3_join_in_forked_from_thread.write
                  [xself]
                    memory > xscript
                    seq > @
                      (((unsupported)).apply)
                        xscript.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_run_and_join)).apply ((xscript)))
                xtest_4_daemon_threads.write
                  [xself]
                    memory > xscript
                    seq > @
                      (((unsupported)).apply)
                        xscript.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xscript)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xerr)))
                xtest_reinit_tls_after_fork.write
                  [xself]
                    memory > xt
                    memory > xdo_fork_and_wait
                    memory > xthreads
                    seq > @
                      (((unsupported)).apply)
                        xdo_fork_and_wait.write
                          []
                            memory > xpid
                            seq > @
                              seq
                                xpid.write ((((xos).xfork)).apply)
                                ((xpid).greater 0).if
                                  bogusForceDataize.write ((((xos).xwaitpid)).apply ((xpid)) (0))
                                  bogusForceDataize.write ((((xos).x_exit)).apply (0))
                        xthreads.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (16))))
                          seq
                            xt.write (((unsupported)).apply (((xthreading).xThread)) ((xdo_fork_and_wait)))
                            bogusForceDataize.write ((((xthreads).xappend)).apply ((xt)))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                        (((unsupported)).apply ((xt)) ((xthreads)))
                          bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_clear_threads_states_after_fork.write
                  [xself]
                    memory > xt
                    memory > xpid
                    memory > xthreads
                    seq > @
                      (((unsupported)).apply)
                        xthreads.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (16))))
                          seq
                            xt.write (((unsupported)).apply (((xthreading).xThread)) ((((unsupported)).apply (((((xtime).xsleep)).apply (0.3))))))
                            bogusForceDataize.write ((((xthreads).xappend)).apply ((xt)))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          ((((xlen)).apply (((((xsys).x_current_frames)).apply))).eq 1).if
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                            bogusForceDataize.write ((((xos).x_exit)).apply (1))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) ((xstatus)))
                        (((unsupported)).apply ((xt)) ((xthreads)))
                          bogusForceDataize.write ((((xt).xjoin)).apply)
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_threads_join.write
                  [xself]
                    memory > xcode
                    memory > xret
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xr)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xw)))
                        xcode.write ((((unsupported)).apply).mod (((unsupported)).apply ((xw))))
                        xret.write (((((xtest).xsupport).xrun_in_subinterp)).apply ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xread)).apply ((xr)) (1))) ("x"))
                xtest_threads_join_2.write
                  [xself]
                    memory > xcode
                    memory > xret
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xr)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xw)))
                        xcode.write ((((unsupported)).apply).mod (((unsupported)).apply ((xw))))
                        xret.write (((((xtest).xsupport).xrun_in_subinterp)).apply ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xret)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xread)).apply ((xr)) (1))) ("x"))
                xtest_daemon_threads_fatal_error.write
                  [xself]
                    memory > xscript
                    memory > xsubinterp_code
                    seq > @
                      (((unsupported)).apply)
                        xsubinterp_code.write (((unsupported)).apply)
                        xscript.write ((((unsupported)).apply).mod (((unsupported)).apply ((xsubinterp_code))))
                        (((unsupported)).apply ((((((xtest).xsupport).xSuppressCrashReport)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_failure)).apply ("-c") ((xscript)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Fatal Python error: Py_EndInterpreter: not the last thread") (((((xerr).xdecode)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_start_thread_again.write
                  [xself]
                    memory > xthread
                    seq > @
                      seq
                        xthread.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xthread).xstart)))
                        bogusForceDataize.write ((((xthread).xjoin)).apply)
                xtest_joining_current_thread.write
                  [xself]
                    memory > xcurrent_thread
                    seq > @
                      seq
                        xcurrent_thread.write ((((xthreading).xcurrent_thread)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xcurrent_thread).xjoin)))
                xtest_joining_inactive_thread.write
                  [xself]
                    memory > xthread
                    seq > @
                      seq
                        xthread.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xthread).xjoin)))
                xtest_daemonize_active_thread.write
                  [xself]
                    memory > xthread
                    seq > @
                      seq
                        xthread.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xsetattr)) ((xthread)) ("daemon") (TRUE))
                        bogusForceDataize.write ((((xthread).xjoin)).apply)
                xtest_releasing_unacquired_lock.write
                  [xself]
                    memory > xlock
                    seq > @
                      seq
                        xlock.write ((((xthreading).xLock)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xlock).xrelease)))
                xtest_recursion_limit.write
                  [xself]
                    memory > xscript
                    memory > xp
                    memory > xexpected_output
                    memory > xdata
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        xexpected_output.write "end of main threadn"
                        xp.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xscript)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)).apply)))
                        xdata.write (((((((xstdout).xdecode)).apply).xreplace)).apply ("r") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xreturncode)) (0) (("Unexpected error: ".add ((((xstderr).xdecode)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_output)))
                xtest_print_exception.write
                  [xself]
                    memory > xscript
                    memory > xerr
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xscript)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        xerr.write ((((xerr).xdecode)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception in thread") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ZeroDivisionError") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Unhandled exception") ((xerr)))
                xtest_print_exception_stderr_is_none_1.write
                  [xself]
                    memory > xscript
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        xscript.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xscript)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        xerr.write ((((xerr).xdecode)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception in thread") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ZeroDivisionError") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Unhandled exception") ((xerr)))
                xtest_print_exception_stderr_is_none_2.write
                  [xself]
                    memory > xscript
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xscript)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Unhandled exception") (((((xerr).xdecode)).apply)))
                xtest_bare_raise_in_brand_new_thread.write
                  [xself]
                    memory > xthread
                    memory > xbare_raise
                    memory > xexc
                    memory > xrun
                    seq > @
                      seq
                        xbare_raise.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((xthreading).xThread)))
                          seq
                            xexc.write "None: is there a None literal in the EO language?"
                            xrun.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xException)))
                                    bogusForceDataize.write (((xbare_raise)).apply)
                                    (((unsupported)).apply (((xself).xexc)) ((xexc)))
                        xthread.write (((xIssue27558)).apply)
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        bogusForceDataize.write ((((xthread).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xthread).xexc)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xthread).xexc)) ((xRuntimeError)))
                        (((unsupported)).apply (((xthread).xexc)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((xthreading).xThread)))
              xrun.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((xValueError)).apply ("run failed"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_excepthook.write
                  [xself]
                    memory > xthread
                    memory > xstderr
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsupport).xcaptured_output)).apply ("stderr"))) ((xstderr)))
                          seq
                            xthread.write (((unsupported)).apply ((xThreadRunFail)) ("excepthook thread"))
                            bogusForceDataize.write ((((xthread).xstart)).apply)
                            bogusForceDataize.write ((((xthread).xjoin)).apply)
                        xstderr.write (((((((xstderr).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception in thread {thread.name}:n") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):n") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ValueError: run failed") ((xstderr)))
                xtest_excepthook_thread_None.write
                  [xself]
                    memory > xstderr
                    memory > xargs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xcaptured_output)).apply ("stderr"))) ((xstderr)))
                          (((unsupported)).apply ((xException)))
                            (((unsupported)).apply ((((xValueError)).apply ("bug"))))
                            seq
                              xargs.write ((((xthreading).xExceptHookArgs)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)))) ("None: is there a None literal in the EO language?"))))
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xthreading).xexcepthook)).apply ((xargs)))
                                xargs.write "None: is there a None literal in the EO language?"
                        xstderr.write (((((((xstderr).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Exception in thread {threading.get_ident()}:n") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Traceback (most recent call last):n") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ValueError: bug") ((xstderr)))
                xtest_system_exit.write
                  [xself]
                    memory > xthread
                    memory > xrun
                    seq > @
                      seq
                        (((unsupported)).apply (((xthreading).xThread)))
                          xrun.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((xsys).xexit)).apply (1))
                        (((unsupported)).apply (((((xsupport).xcaptured_output)).apply ("stderr"))) ((xstderr)))
                          seq
                            xthread.write (((xThreadExit)).apply)
                            bogusForceDataize.write ((((xthread).xstart)).apply)
                            bogusForceDataize.write ((((xthread).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstderr).xgetvalue)).apply)) (""))
                xtest_custom_excepthook.write
                  [xself]
                    memory > xthread
                    memory > xhook
                    memory > xargs
                    seq > @
                      seq
                        xargs.write "None: is there a None literal in the EO language?"
                        xhook.write
                          [xhook_args]
                            memory > xargs
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xargs.write (xhook_args)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xthreading)) ("excepthook") ((xhook)))))
                              seq
                                xthread.write (((xThreadRunFail)).apply)
                                bogusForceDataize.write ((((xthread).xstart)).apply)
                                bogusForceDataize.write ((((xthread).xjoin)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xargs).xexc_type)) ((xValueError)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xargs).xexc_value)))) ("run failed"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xargs).xexc_traceback)) ((((xargs).xexc_value).x__traceback__)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xargs).xthread)) ((xthread)))
                          xargs.write "None: is there a None literal in the EO language?"
                xtest_custom_excepthook_fail.write
                  [xself]
                    memory > xthread
                    memory > xsys_hook
                    memory > xthreading_hook
                    memory > xerr_str
                    seq > @
                      seq
                        xthreading_hook.write
                          [xargs]
                            seq > @
                              (((unsupported)).apply ((((xValueError)).apply ("threading_hook failed"))))
                        xerr_str.write "None: is there a None literal in the EO language?"
                        xsys_hook.write
                          [xexc_type xexc_value xexc_traceback]
                            memory > xerr_str
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xerr_str.write (((xstr)).apply ((xexc_value)))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xthreading)) ("excepthook") ((xthreading_hook)))) (((((xsupport).xswap_attr)).apply ((xsys)) ("excepthook") ((xsys_hook)))) (((((xsupport).xcaptured_output)).apply ("stderr"))) ((xstderr)))
                          seq
                            xthread.write (((xThreadRunFail)).apply)
                            bogusForceDataize.write ((((xthread).xstart)).apply)
                            bogusForceDataize.write ((((xthread).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstderr).xgetvalue)).apply)) ("Exception in threading.excepthook:n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerr_str)) ("threading_hook failed"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTestCase).xsetUp)).apply ((xself)))
                        (((unsupported)).apply (((xself).xcallback_args)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcallback_event)) (((((xthreading).xEvent)).apply)))
                xtest_init_immutable_default_args.write
                  [xself]
                    memory > xtimer1
                    memory > xtimer2
                    seq > @
                      seq
                        xtimer1.write ((((xthreading).xTimer)).apply (0.01) (((xself).x_callback_spy)))
                        bogusForceDataize.write ((((xtimer1).xstart)).apply)
                        bogusForceDataize.write (((((xself).xcallback_event).xwait)).apply)
                        bogusForceDataize.write (((((xtimer1).xargs).xappend)).apply ("blah"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtimer1).xkwargs)) ("foo"))) ("bar"))
                        bogusForceDataize.write (((((xself).xcallback_event).xclear)).apply)
                        xtimer2.write ((((xthreading).xTimer)).apply (0.01) (((xself).x_callback_spy)))
                        bogusForceDataize.write ((((xtimer2).xstart)).apply)
                        bogusForceDataize.write (((((xself).xcallback_event).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xcallback_args)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcallback_args)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xtimer1).xjoin)).apply)
                        bogusForceDataize.write ((((xtimer2).xjoin)).apply)
                x_callback_spy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xcallback_args).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply ((xargs)) ((((unsupported)).apply)))) (((((xkwargs).xcopy)).apply)))))
                        bogusForceDataize.write (((((xself).xcallback_event).xset)).apply)
            (((unsupported)).apply (((xlock_tests).xLockTests)))
              xlocktype.write (((xstaticmethod)).apply (((xthreading).xLock)))
            (((unsupported)).apply (((xlock_tests).xRLockTests)))
              xlocktype.write (((xstaticmethod)).apply (((xthreading).x_PyRLock)))
            (((unsupported)).apply (((xlock_tests).xRLockTests)) (((((xunittest).xskipIf)).apply ((((unsupported)).apply (((xthreading).x_CRLock)) ("None: is there a None literal in the EO language?"))) ("RLock not implemented in C"))))
              xlocktype.write (((xstaticmethod)).apply (((xthreading).x_CRLock)))
            (((unsupported)).apply (((xlock_tests).xEventTests)))
              xeventtype.write (((xstaticmethod)).apply (((xthreading).xEvent)))
            (((unsupported)).apply (((xlock_tests).xRLockTests)))
              xlocktype.write (((xstaticmethod)).apply (((xthreading).xCondition)))
            (((unsupported)).apply (((xlock_tests).xConditionTests)))
              xcondtype.write (((xstaticmethod)).apply (((xthreading).xCondition)))
            (((unsupported)).apply (((xlock_tests).xSemaphoreTests)))
              xsemtype.write (((xstaticmethod)).apply (((xthreading).xSemaphore)))
            (((unsupported)).apply (((xlock_tests).xBoundedSemaphoreTests)))
              xsemtype.write (((xstaticmethod)).apply (((xthreading).xBoundedSemaphore)))
            (((unsupported)).apply (((xlock_tests).xBarrierTests)))
              xbarriertype.write (((xstaticmethod)).apply (((xthreading).xBarrier)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xextra
                  memory > xblacklist
                  seq > @
                    seq
                      xextra.write (((unsupported)).apply ("ThreadError"))
                      xblacklist.write (((unsupported)).apply ("currentThread") ("activeCount"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xthreading)) ((((unsupported)).apply ("threading") ("_thread"))) ((xextra)) ((xblacklist)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_interrupt_main_subthread.write
                  [xself]
                    memory > xt
                    memory > xcall_interrupt
                    seq > @
                      seq
                        xcall_interrupt.write
                          []
                            seq > @
                              bogusForceDataize.write ((((x_thread).xinterrupt_main)).apply)
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xcall_interrupt)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyboardInterrupt)))))
                          seq
                            bogusForceDataize.write ((((xt).xstart)).apply)
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_interrupt_main_mainthread.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyboardInterrupt)))))
                        bogusForceDataize.write ((((x_thread).xinterrupt_main)).apply)
                xtest_interrupt_main_noerror.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xsignal).xgetsignal)).apply (((xsignal).xSIGINT)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGINT)) (((xsignal).xSIG_IGN)))
                            bogusForceDataize.write ((((x_thread).xinterrupt_main)).apply)
                            bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGINT)) (((xsignal).xSIG_DFL)))
                            bogusForceDataize.write ((((x_thread).xinterrupt_main)).apply)
                          bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGINT)) ((xhandler)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)