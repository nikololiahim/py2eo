+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > assign-3
  [raiseme] > apply
    [x] > mkCopy
      x' > copy
      copy.< > @
    [] > newUID
      memory > cur
      seq > apply
        cur.write (cur.is-empty.if 2 (cur.add 1))
        cur
    [] > raiseEmpty
      [] > xclass
        1 > xid
    [] > raiseNothing
      [] > xclass
        0 > xid
    cage > xcurrent-exception
    cage > result
    cage > tmp
    cage > xassignTest3
    goto > @
      [returnLabel]
        seq > @
          stdout "assign-3\n"
          write.
            xassignTest3
            []
              [raiseme] > apply
                cage > result
                cage > tmp
                cage > lhs0
                cage > e1
                cage > e0
                cage > xb
                cage > xa
                goto > @
                  [returnLabel]
                    seq > @
                      stdout "xassignTest3\n"
                      (xa).write (1)
                      (xb).write (3)
                      [] > tmp1
                        memory > dddata
                        dddata.write (((xa).add (xb))) > @
                      (e0).write (tmp1.dddata)
                      (lhs0).write (4)
                      [] > tmp2
                        memory > dddata
                        dddata.write (((e0).eq (lhs0))) > @
                      (e1).write (tmp2.dddata)
                      mkCopy (e1) > tmp3
                      (result).write (tmp3.copy)
                      returnLabel.forward 0
                      123
          tmp.write (((xassignTest3)).apply raiseme)
          (tmp.@)
          (result).write (tmp.result)
          result
  apply 0 > @