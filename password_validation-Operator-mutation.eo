memory > xCommonPasswordValidator
memory > xValueError
memory > xValidationError
memory > xngettext
memory > xopen
memory > xPath
memory > xx
memory > xgzip
memory > xOSError
memory > xImportError
memory > xFieldDoesNotExist
memory > ximport_string
memory > xstr
memory > xerror
memory > xvalue_part
memory > xformat_html_join
memory > xf
memory > xsettings
memory > xre
memory > xgetattr
memory > xlazy
memory > x__file__
memory > xformat_html
memory > xSequenceMatcher
memory > xImproperlyConfigured
memory > xvalidator
memory > xlen
memory > xhelp_text
memory > xisinstance
memory > xattribute_name
[] > password_validation
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xvalidate_password
        memory > xexceeds_maximum_length_ratio
        memory > xget_help_text
        memory > xpassword_validators_help_text_html
        memory > xvalidate
        memory > xDEFAULT_PASSWORD_LIST_PATH
        memory > x_password_validators_help_text_html
        memory > xpassword_validators_help_texts
        memory > x__init__
        memory > xDEFAULT_USER_ATTRIBUTES
        memory > xget_password_validators
        memory > x_
        memory > xget_default_password_validators
        memory > xpassword_changed
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xget_default_password_validators.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((xget_password_validators)).apply (((xsettings).xAUTH_PASSWORD_VALIDATORS)))))
            xget_password_validators.write
              [xvalidator_config]
                memory > xmsg
                memory > xklass
                memory > xvalidators
                seq > @
                  seq
                    xvalidators.write (((unsupported)).apply)
                    (((unsupported)).apply ((xvalidator)) ((xvalidator_config)))
                      seq
                        (((unsupported)).apply ((xImportError)))
                          xklass.write (((ximport_string)).apply ((((unsupported)).apply ((xvalidator)) ("NAME"))))
                          seq
                            xmsg.write "The module in NAME could not be imported: %s. Check your AUTH_PASSWORD_VALIDATORS setting."
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply (((xmsg).mod (((unsupported)).apply ((xvalidator)) ("NAME")))))))
                        bogusForceDataize.write ((((xvalidators).xappend)).apply ((((xklass)).apply ((((unsupported)).apply (((((xvalidator).xget)).apply ("OPTIONS") ((((unsupported)).apply)))))))))
                    (((unsupported)).apply ((xvalidators)))
            xvalidate_password.write
              [xpassword xuser xpassword_validators]
                memory > xerrors
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xerrors.write (((unsupported)).apply)
                    (((unsupported)).apply ((xpassword_validators)) ("None: is there a None literal in the EO language?")).if
                      xpassword_validators.write (((xget_default_password_validators)).apply)
                    (((unsupported)).apply ((xvalidator)) ((xpassword_validators)))
                      (((unsupported)).apply ((xValidationError)))
                        bogusForceDataize.write ((((xvalidator).xvalidate)).apply ((xpassword)) ((xuser)))
                        bogusForceDataize.write ((((xerrors).xappend)).apply ((xerror)))
                    (xerrors).if
                      (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
            xpassword_changed.write
              [xpassword xuser xpassword_validators]
                memory > xpassword_changed
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xpassword_validators)) ("None: is there a None literal in the EO language?")).if
                      xpassword_validators.write (((xget_default_password_validators)).apply)
                    (((unsupported)).apply ((xvalidator)) ((xpassword_validators)))
                      seq
                        xpassword_changed.write (((xgetattr)).apply ((xvalidator)) ("password_changed") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write (((xpassword_changed)).apply ((xpassword)) ((xuser)))
            xpassword_validators_help_texts.write
              [xpassword_validators]
                memory > xhelp_texts
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xhelp_texts.write (((unsupported)).apply)
                    (((unsupported)).apply ((xpassword_validators)) ("None: is there a None literal in the EO language?")).if
                      xpassword_validators.write (((xget_default_password_validators)).apply)
                    (((unsupported)).apply ((xvalidator)) ((xpassword_validators)))
                      bogusForceDataize.write ((((xhelp_texts).xappend)).apply (((((xvalidator).xget_help_text)).apply)))
                    (((unsupported)).apply ((xhelp_texts)))
            x_password_validators_help_text_html.write
              [xpassword_validators]
                memory > xhelp_items
                memory > xhelp_texts
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xhelp_texts.write (((xpassword_validators_help_texts)).apply ((xpassword_validators)))
                    xhelp_items.write (((xformat_html_join)).apply ("") ("<li>{}</li>") ((((unsupported)).apply ((((unsupported)).apply ((xhelp_text)))) ((xhelp_text)) ((xhelp_texts)))))
                    (((unsupported)).apply (((xhelp_items).if (((xformat_html)).apply ("<ul>{}</ul>") ((xhelp_items))) "")))
            xpassword_validators_help_text_html.write (((xlazy)).apply ((x_password_validators_help_text_html)) ((xstr)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xmin_length]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmin_length)) ((xmin_length)))
                xvalidate.write
                  [xself xpassword xuser]
                    seq > @
                      (((unsupported)).apply)
                        ((((xlen)).apply ((xpassword))).less ((xself).xmin_length)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((xngettext)).apply ("This password is too short. It must contain at least %(min_length)d character.") ("This password is too short. It must contain at least %(min_length)d characters.") (((xself).xmin_length)))) ("password_too_short") ((((unsupported)).apply ("min_length") (((xself).xmin_length)))))))
                xget_help_text.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xngettext)).apply ("Your password must contain at least %(min_length)d character.") ("Your password must contain at least %(min_length)d characters.") (((xself).xmin_length))).mod (((unsupported)).apply ("min_length") (((xself).xmin_length))))))
            xexceeds_maximum_length_ratio.write
              [xpassword xmax_similarity xvalue]
                memory > xvalue_len
                memory > xpwd_len
                memory > xlength_bound_similarity
                seq > @
                  seq
                    (((unsupported)).apply)
                    xpwd_len.write (((xlen)).apply ((xpassword)))
                    xlength_bound_similarity.write (((xmax_similarity).div 2).mul (xpwd_len))
                    xvalue_len.write (((xlen)).apply ((xvalue)))
                    (((unsupported)).apply ((((xpwd_len).geq (10.mul (xvalue_len))).and ((xvalue_len).less (xlength_bound_similarity)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xDEFAULT_USER_ATTRIBUTES.write (((unsupported)).apply ("username") ("first_name") ("last_name") ("email"))
                x__init__.write
                  [xself xuser_attributes xmax_similarity]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xuser_attributes)) ((xuser_attributes)))
                        ((xmax_similarity).less 0.1).if
                          (((unsupported)).apply ((((xValueError)).apply ("max_similarity must be at least 0.1"))))
                        (((unsupported)).apply (((xself).xmax_similarity)) ((xmax_similarity)))
                xvalidate.write
                  [xself xpassword xuser]
                    memory > xvalue
                    memory > xvalue_lower
                    memory > xverbose_name
                    memory > xvalue_parts
                    seq > @
                      (((unsupported)).apply)
                        ((xuser).not).if
                          (((unsupported)).apply)
                        xpassword.write ((((xpassword).xlower)).apply)
                        (((unsupported)).apply ((xattribute_name)) (((xself).xuser_attributes)))
                          seq
                            xvalue.write (((xgetattr)).apply ((xuser)) ((xattribute_name)) ("None: is there a None literal in the EO language?"))
                            (((xvalue).not).or ((((xisinstance)).apply ((xvalue)) ((xstr))).not)).if
                              (((unsupported)).apply)
                            xvalue_lower.write ((((xvalue).xlower)).apply)
                            xvalue_parts.write (((((xre).xsplit)).apply ("W-") ((xvalue_lower))).sub (((unsupported)).apply ((xvalue_lower))))
                            (((unsupported)).apply ((xvalue_part)) ((xvalue_parts)))
                              seq
                                (((xexceeds_maximum_length_ratio)).apply ((xpassword)) (((xself).xmax_similarity)) ((xvalue_part))).if
                                  (((unsupported)).apply)
                                (((((((unsupported)).apply ((xSequenceMatcher)) ((xpassword)) ((xvalue_part))).xquick_ratio)).apply).geq ((xself).xmax_similarity)).if
                                  seq
                                    (((unsupported)).apply ((xFieldDoesNotExist)))
                                      xverbose_name.write (((xstr)).apply (((((((xuser).x_meta).xget_field)).apply ((xattribute_name))).xverbose_name)))
                                      xverbose_name.write (xattribute_name)
                                    (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((x_)).apply ("The password is too similar to the %(verbose_name)s."))) ("password_too_similar") ((((unsupported)).apply ("verbose_name") ((xverbose_name)))))))
                xget_help_text.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((x_)).apply ("Your password can’t be too similar to your other personal information."))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xDEFAULT_PASSWORD_LIST_PATH.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((((xPath)).apply ((x__file__))).xresolve)).apply).xparent).div "common-passwords.txt.gz")))
                x__init__.write
                  [xself xpassword_list_path]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xpassword_list_path)) (((xCommonPasswordValidator).xDEFAULT_PASSWORD_LIST_PATH))).if
                          xpassword_list_path.write ((xself).xDEFAULT_PASSWORD_LIST_PATH)
                        (((unsupported)).apply ((xOSError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xgzip).xopen)) ((xpassword_list_path)) ("rt") ("utf-8"))) ((xf)))
                            (((unsupported)).apply (((xself).xpasswords)) ((((unsupported)).apply (((((xx).xstrip)).apply)) ((xx)) ((xf)))))
                          (((unsupported)).apply ((((xopen)).apply ((xpassword_list_path)))) ((xf)))
                            (((unsupported)).apply (((xself).xpasswords)) ((((unsupported)).apply (((((xx).xstrip)).apply)) ((xx)) ((xf)))))
                xvalidate.write
                  [xself xpassword xuser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((((xpassword).xlower)).apply).xstrip)).apply)) (((xself).xpasswords))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((x_)).apply ("This password is too common."))) ("password_too_common"))))
                xget_help_text.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((x_)).apply ("Your password can’t be a commonly used password."))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xvalidate.write
                  [xself xpassword xuser]
                    seq > @
                      (((unsupported)).apply)
                        ((((xpassword).xisdigit)).apply).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((x_)).apply ("This password is entirely numeric."))) ("password_entirely_numeric"))))
                xget_help_text.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((x_)).apply ("Your password can’t be entirely numeric."))))