memory > xstr
memory > xInvalidTemplateLibrary
memory > xparam
memory > xcallable
memory > xTagHelperNode
memory > xException
memory > xsuper
memory > xgetfullargspec
memory > xargs
memory > xis_iterable
memory > xkwargs
memory > xk
memory > xNode
memory > xSimpleNode
memory > xTemplateSyntaxError
memory > xresolved_args
memory > xconditional_escape
memory > xImportError
memory > xflags
memory > xAttributeError
memory > xbit
memory > xvarkw
memory > xlist
memory > xValueError
memory > ximport_module
memory > xkwonly
memory > xdefaults
memory > xtoken_kwargs
memory > xvalue
memory > xunwrap
memory > xIndexError
memory > x_
memory > xresolved_kwargs
memory > xp
memory > xInclusionNode
memory > xvar
memory > xparams
memory > xkwonly_defaults
memory > xgetattr
memory > xv
memory > xTemplate
memory > xe
memory > xsetattr
memory > xattr
memory > xisinstance
memory > xlen
memory > xvarargs
[] > library
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_resolved_arguments
        memory > xparse_bits
        memory > xfilter_function
        memory > xtag
        memory > xrender
        memory > xchild_nodelists
        memory > x__init__
        memory > xsimple_tag
        memory > xfilter
        memory > ximport_library
        memory > xtag_function
        memory > xinclusion_tag
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfilters)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xtags)) ((((unsupported)).apply)))
                xtag.write
                  [xself xname xcompile_function]
                    memory > xdec
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xcompile_function)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply (((xself).xtag_function)))
                          ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xcompile_function)) ("None: is there a None literal in the EO language?"))).if
                            (((xcallable)).apply ((xname))).if
                              (((unsupported)).apply (((((xself).xtag_function)).apply ((xname)))))
                              seq
                                xdec.write
                                  [xfunc]
                                    seq > @
                                      (((unsupported)).apply (((((xself).xtag)).apply ((xname)) ((xfunc)))))
                                (((unsupported)).apply ((xdec)))
                            ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xcompile_function)) ("None: is there a None literal in the EO language?"))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xtags)) ((xname)))) ((xcompile_function)))
                                (((unsupported)).apply ((xcompile_function)))
                              (((unsupported)).apply ((((xValueError)).apply (("Unsupported arguments to Library.tag: (%r, %r)".mod (((unsupported)).apply ((xname)) ((xcompile_function))))))))
                xtag_function.write
                  [xself xfunc]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtags)) (((xfunc).x__name__)))) ((xfunc)))
                        (((unsupported)).apply ((xfunc)))
                xfilter.write
                  [xself xname xfilter_func]
                    memory > xvalue
                    memory > xdec
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xfilter_func)) ("None: is there a None literal in the EO language?"))).if
                          seq
                            xdec.write
                              [xfunc]
                                seq > @
                                  (((unsupported)).apply (((((xself).xfilter_function)).apply ((xfunc)) ((((unsupported)).apply ((xflags)))))))
                            (((unsupported)).apply ((xdec)))
                          ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xfilter_func)) ("None: is there a None literal in the EO language?"))).if
                            (((xcallable)).apply ((xname))).if
                              (((unsupported)).apply (((((xself).xfilter_function)).apply ((xname)) ((((unsupported)).apply ((xflags)))))))
                              seq
                                xdec.write
                                  [xfunc]
                                    seq > @
                                      (((unsupported)).apply (((((xself).xfilter)).apply ((xname)) ((xfunc)) ((((unsupported)).apply ((xflags)))))))
                                (((unsupported)).apply ((xdec)))
                            ((((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xfilter_func)) ("None: is there a None literal in the EO language?"))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xfilters)) ((xname)))) ((xfilter_func)))
                                (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("expects_localtime") ("is_safe") ("needs_autoescape"))))
                                  (((unsupported)).apply ((xattr)) ((xflags))).if
                                    seq
                                      xvalue.write (((unsupported)).apply ((xflags)) ((xattr)))
                                      bogusForceDataize.write (((xsetattr)).apply ((xfilter_func)) ((xattr)) ((xvalue)))
                                      bogusForceDataize.write (((xsetattr)).apply ((((xunwrap)).apply ((xfilter_func)))) ((xattr)) ((xvalue)))
                                (((unsupported)).apply (((xfilter_func).x_filter_name)) ((xname)))
                                (((unsupported)).apply ((xfilter_func)))
                              (((unsupported)).apply ((((xValueError)).apply (("Unsupported arguments to Library.filter: (%r, %r)".mod (((unsupported)).apply ((xname)) ((xfilter_func))))))))
                xfilter_function.write
                  [xself xfunc]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xfilter)).apply (((xfunc).x__name__)) ((xfunc)) ((((unsupported)).apply ((xflags)))))))
                xsimple_tag.write
                  [xself xfunc xtakes_context xname]
                    memory > xdec
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdec.write
                          [xfunc]
                            memory > xfunction_name
                            memory > xcompile_func
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xparams)) ((xvarargs)) ((xvarkw)) ((xdefaults)) ((xkwonly)) ((xkwonly_defaults)) ((x_)))) ((((xgetfullargspec)).apply ((((xunwrap)).apply ((xfunc)))))))
                                xfunction_name.write ((xname).or ((xfunc).x__name__))
                                xcompile_func.write
                                  [xparser xtoken]
                                    memory > xbits
                                    memory > xtarget_var
                                    seq > @
                                      (((unsupported)).apply)
                                        xbits.write (((unsupported)).apply (((((xtoken).xsplit_contents)).apply)) ((((unsupported)).apply (1))))
                                        xtarget_var.write "None: is there a None literal in the EO language?"
                                        (((((xlen)).apply ((xbits))).geq 2).and ((((unsupported)).apply ((xbits)) ((2.neg))).eq "as")).if
                                          seq
                                            xtarget_var.write (((unsupported)).apply ((xbits)) ((1.neg)))
                                            xbits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply ((2.neg)))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) ((((xparse_bits)).apply ((xparser)) ((xbits)) ((xparams)) ((xvarargs)) ((xvarkw)) ((xdefaults)) ((xkwonly)) ((xkwonly_defaults)) ((xtakes_context)) ((xfunction_name)))))
                                        (((unsupported)).apply ((((xSimpleNode)).apply ((xfunc)) ((xtakes_context)) ((xargs)) ((xkwargs)) ((xtarget_var)))))
                                bogusForceDataize.write ((((xself).xtag)).apply ((xfunction_name)) ((xcompile_func)))
                                (((unsupported)).apply ((xfunc)))
                        (((unsupported)).apply ((xfunc)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xdec)))
                          (((xcallable)).apply ((xfunc))).if
                            (((unsupported)).apply ((((xdec)).apply ((xfunc)))))
                            (((unsupported)).apply ((((xValueError)).apply ("Invalid arguments provided to simple_tag"))))
                xinclusion_tag.write
                  [xself xfilename xfunc xtakes_context xname]
                    memory > xdec
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdec.write
                          [xfunc]
                            memory > xfunction_name
                            memory > xcompile_func
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xparams)) ((xvarargs)) ((xvarkw)) ((xdefaults)) ((xkwonly)) ((xkwonly_defaults)) ((x_)))) ((((xgetfullargspec)).apply ((((xunwrap)).apply ((xfunc)))))))
                                xfunction_name.write ((xname).or ((xfunc).x__name__))
                                xcompile_func.write
                                  [xparser xtoken]
                                    memory > xbits
                                    seq > @
                                      (((unsupported)).apply)
                                        xbits.write (((unsupported)).apply (((((xtoken).xsplit_contents)).apply)) ((((unsupported)).apply (1))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) ((((xparse_bits)).apply ((xparser)) ((xbits)) ((xparams)) ((xvarargs)) ((xvarkw)) ((xdefaults)) ((xkwonly)) ((xkwonly_defaults)) ((xtakes_context)) ((xfunction_name)))))
                                        (((unsupported)).apply ((((xInclusionNode)).apply ((xfunc)) ((xtakes_context)) ((xargs)) ((xkwargs)) ((xfilename)))))
                                bogusForceDataize.write ((((xself).xtag)).apply ((xfunction_name)) ((xcompile_func)))
                                (((unsupported)).apply ((xfunc)))
                        (((unsupported)).apply ((xdec)))
            (((unsupported)).apply ((xNode)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfunc xtakes_context xargs xkwargs]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfunc)) ((xfunc)))
                        (((unsupported)).apply (((xself).xtakes_context)) ((xtakes_context)))
                        (((unsupported)).apply (((xself).xargs)) ((xargs)))
                        (((unsupported)).apply (((xself).xkwargs)) ((xkwargs)))
                xget_resolved_arguments.write
                  [xself xcontext]
                    memory > xresolved_args
                    memory > xresolved_kwargs
                    seq > @
                      seq
                        xresolved_args.write (((unsupported)).apply (((((xvar).xresolve)).apply ((xcontext)))) ((xvar)) (((xself).xargs)))
                        ((xself).xtakes_context).if
                          xresolved_args.write ((((unsupported)).apply ((xcontext))).add (xresolved_args))
                        xresolved_kwargs.write (((unsupported)).apply ((xk)) (((((xv).xresolve)).apply ((xcontext)))) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xkwargs).xitems)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xresolved_args)) ((xresolved_kwargs)))))
            (((unsupported)).apply ((xTagHelperNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply)
                x__init__.write
                  [xself xfunc xtakes_context xargs xkwargs xtarget_var]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfunc)) ((xtakes_context)) ((xargs)) ((xkwargs)))
                        (((unsupported)).apply (((xself).xtarget_var)) ((xtarget_var)))
                xrender.write
                  [xself xcontext]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xresolved_args)) ((xresolved_kwargs)))) (((((xself).xget_resolved_arguments)).apply ((xcontext)))))
                        xoutput.write ((((xself).xfunc)).apply ((((unsupported)).apply ((xresolved_args)))) ((((unsupported)).apply ((xresolved_kwargs)))))
                        (((unsupported)).apply (((xself).xtarget_var)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xtarget_var)))) ((xoutput)))
                            (((unsupported)).apply (""))
                        ((xcontext).xautoescape).if
                          xoutput.write (((xconditional_escape)).apply ((xoutput)))
                        (((unsupported)).apply ((xoutput)))
            (((unsupported)).apply ((xTagHelperNode)))
              seq
                x__init__.write
                  [xself xfunc xtakes_context xargs xkwargs xfilename]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfunc)) ((xtakes_context)) ((xargs)) ((xkwargs)))
                        (((unsupported)).apply (((xself).xfilename)) ((xfilename)))
                xrender.write
                  [xself xcontext]
                    memory > xt
                    memory > xcsrf_token
                    memory > xnew_context
                    memory > x_dict
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xresolved_args)) ((xresolved_kwargs)))) (((((xself).xget_resolved_arguments)).apply ((xcontext)))))
                        x_dict.write ((((xself).xfunc)).apply ((((unsupported)).apply ((xresolved_args)))) ((((unsupported)).apply ((xresolved_kwargs)))))
                        xt.write (((((xcontext).xrender_context).xget)).apply ((xself)))
                        (((unsupported)).apply ((xt)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((xisinstance)).apply (((xself).xfilename)) ((xTemplate))).if
                              xt.write ((xself).xfilename)
                              (((xisinstance)).apply ((((xgetattr)).apply (((xself).xfilename)) ("template") ("None: is there a None literal in the EO language?"))) ((xTemplate))).if
                                xt.write (((xself).xfilename).xtemplate)
                                (((((xisinstance)).apply (((xself).xfilename)) ((xstr))).not).and (((xis_iterable)).apply (((xself).xfilename)))).if
                                  xt.write ((((((xcontext).xtemplate).xengine).xselect_template)).apply (((xself).xfilename)))
                                  xt.write ((((((xcontext).xtemplate).xengine).xget_template)).apply (((xself).xfilename)))
                            (((unsupported)).apply ((((unsupported)).apply (((xcontext).xrender_context)) ((xself)))) ((xt)))
                        xnew_context.write ((((xcontext).xnew)).apply ((x_dict)))
                        xcsrf_token.write ((((xcontext).xget)).apply ("csrf_token"))
                        (((unsupported)).apply ((xcsrf_token)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xnew_context)) ("csrf_token"))) ((xcsrf_token)))
                        (((unsupported)).apply (((((xt).xrender)).apply ((xnew_context)))))
            xparse_bits.write
              [xparser xbits xparams xvarargs xvarkw xdefaults xkwonly xkwonly_defaults xtakes_context xname]
                memory > xunhandled_params
                memory > xkwarg
                memory > xunhandled_kwargs
                memory > xargs
                memory > xkwargs
                seq > @
                  seq
                    (((unsupported)).apply)
                    (xtakes_context).if
                      ((xparams).and ((((unsupported)).apply ((xparams)) (0)).eq "context")).if
                        xparams.write (((unsupported)).apply ((xparams)) ((((unsupported)).apply (1))))
                        (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' is decorated with takes_context=True so it must have a first argument of 'context'".mod (xname))))))
                    xargs.write (((unsupported)).apply)
                    xkwargs.write (((unsupported)).apply)
                    xunhandled_params.write (((xlist)).apply ((xparams)))
                    xunhandled_kwargs.write (((unsupported)).apply ((xkwarg)) ((xkwarg)) ((xkwonly)) ((((xkwonly_defaults).not).or (((unsupported)).apply ((xkwarg)) ((xkwonly_defaults))))))
                    (((unsupported)).apply ((xbit)) ((xbits)))
                      seq
                        xkwarg.write (((xtoken_kwargs)).apply ((((unsupported)).apply ((xbit)))) ((xparser)))
                        (xkwarg).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xparam)) ((xvalue)))) (((((xkwarg).xpopitem)).apply)))
                            (((((unsupported)).apply ((xparam)) ((xparams))).and (((unsupported)).apply ((xparam)) ((xkwonly)))).and (((unsupported)).apply ((xvarkw)) ("None: is there a None literal in the EO language?"))).if
                              (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' received unexpected keyword argument '%s'".mod (((unsupported)).apply ((xname)) ((xparam))))))))
                              (((unsupported)).apply ((xparam)) ((xkwargs))).if
                                (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' received multiple values for keyword argument '%s'".mod (((unsupported)).apply ((xname)) ((xparam))))))))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((((xstr)).apply ((xparam)))))) ((xvalue)))
                                  (((unsupported)).apply ((xparam)) ((xunhandled_params))).if
                                    bogusForceDataize.write ((((xunhandled_params).xremove)).apply ((xparam)))
                                    (((unsupported)).apply ((xparam)) ((xunhandled_kwargs))).if
                                      bogusForceDataize.write ((((xunhandled_kwargs).xremove)).apply ((xparam)))
                          (xkwargs).if
                            (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' received some positional argument(s) after some keyword argument(s)".mod (xname))))))
                            seq
                              bogusForceDataize.write ((((xargs).xappend)).apply (((((xparser).xcompile_filter)).apply ((xbit)))))
                              (((unsupported)).apply ((xIndexError)))
                                bogusForceDataize.write ((((xunhandled_params).xpop)).apply (0))
                                (((unsupported)).apply ((xvarargs)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' received too many positional arguments".mod (xname))))))
                    (((unsupported)).apply ((xdefaults)) ("None: is there a None literal in the EO language?")).if
                      xunhandled_params.write (((unsupported)).apply ((xunhandled_params)) ((((unsupported)).apply (((((xlen)).apply ((xdefaults))).neg)))))
                    ((xunhandled_params).or (xunhandled_kwargs)).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' did not receive value(s) for the argument(s): %s".mod (((unsupported)).apply ((xname)) ((((", ".xjoin)).apply ((((unsupported)).apply (("'%s'".mod (xp))) ((xp)) (((xunhandled_params).add (xunhandled_kwargs)))))))))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))))
            ximport_library.write
              [xname]
                memory > xmodule
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xImportError)))
                      xmodule.write (((ximport_module)).apply ((xname)))
                      (((unsupported)).apply ((((xInvalidTemplateLibrary)).apply (("Invalid template library specified. ImportError raised when trying to load '%s': %s".mod (((unsupported)).apply ((xname)) ((xe))))))))
                    (((unsupported)).apply ((xAttributeError)))
                      (((unsupported)).apply (((xmodule).xregister)))
                      (((unsupported)).apply ((((xInvalidTemplateLibrary)).apply (("Module  %s does not have a variable named 'register'".mod (xname))))))