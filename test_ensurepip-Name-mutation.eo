memory > xstdout
memory > xValueError
memory > xFakePip
memory > xsys
memory > xreal_devnull
memory > xstderr
memory > xos
memory > xobject
memory > x__name__
memory > xEnsurepipMixin
memory > xtest
memory > xunittest
memory > xSystemExit
memory > xlen
memory > xensurepip
[] > test_ensurepip
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_altinstall_default_pip_conflict
        memory > xtest_uninstall_error_code
        memory > xtest_uninstall_skipped_when_not_installed
        memory > xfake_pip
        memory > xtest_bootstrapping_error_code
        memory > xtest_uninstall_with_verbosity_1
        memory > xtest_pip_environment_variables_removed
        memory > xtest_bootstrap_version
        memory > xtest_bootstrapping_with_upgrade
        memory > xtest_uninstall_with_verbosity_2
        memory > xtest_bootstrapping_with_root
        memory > xtest_uninstall_skipped_with_warning_for_wrong_version
        memory > xtest_bootstrapping_with_user
        memory > xtest_uninstall_version
        memory > xtest_uninstall_with_verbosity_3
        memory > xEXPECTED_VERSION_OUTPUT
        memory > xsetUp
        memory > xtest_bootstrapping_with_default_pip
        memory > xtest_bootstrapping_with_regular_install
        memory > xtest_bootstrapping_with_verbosity_3
        memory > xtest_bootstrapping_with_alt_install
        memory > xtest_returns_version
        memory > xtest_bootstrapping_with_verbosity_2
        memory > xtest_basic_uninstall
        memory > xtest_pip_config_file_disabled
        memory > xtest_uninstall
        memory > xtest_basic_bootstrapping
        memory > xtest_bootstrapping_with_verbosity_1
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_returns_version.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xensurepip).x_PIP_VERSION)) (((((xensurepip).xversion)).apply)))
            (((unsupported)).apply)
              xsetUp.write
                [xself]
                  memory > xos_patch
                  memory > xrun_pip_patch
                  memory > xreal_devnull2
                  memory > xpatched_os
                  seq > @
                    seq
                      xrun_pip_patch.write (((((xunittest).xmock).xpatch)).apply ("ensurepip._run_pip"))
                      (((unsupported)).apply (((xself).xrun_pip)) (((((xrun_pip_patch).xstart)).apply)))
                      (((unsupported)).apply ((((xself).xrun_pip).xreturn_value)) (0))
                      bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xrun_pip_patch).xstop)))
                      xreal_devnull2.write ((xos).xdevnull)
                      xos_patch.write (((((xunittest).xmock).xpatch)).apply ("ensurepip.os"))
                      xpatched_os.write ((((xos_patch).xstart)).apply)
                      bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos_patch).xstop)))
                      (((unsupported)).apply (((xpatched_os).xdevnull)) ((xreal_devnull)))
                      (((unsupported)).apply (((xpatched_os).xpath)) (((xos).xpath)))
                      (((unsupported)).apply (((xself).xos_environ)) (((xpatched_os).xenviron)) ((((((xos).xenviron).xcopy)).apply)))
            (((unsupported)).apply ((xEnsurepipMixin)) (((xunittest).xTestCase)))
              seq
                xtest_basic_bootstrapping.write
                  [xself]
                    memory > xadditional_paths
                    seq > @
                      seq
                        bogusForceDataize.write ((((xensurepip).xbootstrap)).apply)
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                        xadditional_paths.write (((unsupported)).apply ((((unsupported)).apply ((((xself).xrun_pip).xcall_args)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xadditional_paths)))) (2))
                xtest_bootstrapping_with_root.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) ("/foo/bar/"))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("--root") ("/foo/bar/") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_user.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (TRUE))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("--user") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_upgrade.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (TRUE))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("--upgrade") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_verbosity_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (1))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("-v") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_verbosity_2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (2))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("-vv") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_verbosity_3.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (3))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("-vvv") ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                xtest_bootstrapping_with_regular_install.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xensurepip).xbootstrap)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xos_environ)) ("ENSUREPIP_OPTIONS"))) ("install"))
                xtest_bootstrapping_with_alt_install.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xos_environ)) ("ENSUREPIP_OPTIONS"))) ("altinstall"))
                xtest_bootstrapping_with_default_pip.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xensurepip).xbootstrap)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ENSUREPIP_OPTIONS") (((xself).xos_environ)))
                xtest_altinstall_default_pip_conflict.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xensurepip).xbootstrap)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xrun_pip).xcalled)))
                xtest_pip_environment_variables_removed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xos_environ)) ("PIP_THIS_SHOULD_GO_AWAY"))) ("test fodder"))
                        bogusForceDataize.write ((((xensurepip).xbootstrap)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("PIP_THIS_SHOULD_GO_AWAY") (((xself).xos_environ)))
                xtest_pip_config_file_disabled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xensurepip).xbootstrap)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xos_environ)) ("PIP_CONFIG_FILE"))) (((xos).xdevnull)))
            xfake_pip.write
              [xversion]
                memory > xorig_pip
                memory > xpip
                memory > x__version__
                memory > xsentinel
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xversion)) ("None: is there a None literal in the EO language?")).if
                      xpip.write "None: is there a None literal in the EO language?"
                      seq
                        (((unsupported)).apply)
                          x__version__.write (xversion)
                        xpip.write (((xFakePip)).apply)
                    xsentinel.write (((xobject)).apply)
                    xorig_pip.write (((((xsys).xmodules).xget)).apply ("pip") ((xsentinel)))
                    (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("pip"))) ((xpip)))
                    (((unsupported)).apply)
                      (((unsupported)).apply ((xpip)))
                      (((unsupported)).apply ((xorig_pip)) ((xsentinel))).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("pip"))))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("pip"))) ((xorig_pip)))
            (((unsupported)).apply ((xEnsurepipMixin)) (((xunittest).xTestCase)))
              seq
                xtest_uninstall_skipped_when_not_installed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xensurepip).x_uninstall_helper)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xrun_pip).xcalled)))
                xtest_uninstall_skipped_with_warning_for_wrong_version.write
                  [xself]
                    memory > xwarning
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply ("not a valid version"))))
                          (((unsupported)).apply ((((((xtest).xsupport).xcaptured_stderr)).apply)) ((xstderr)))
                            bogusForceDataize.write ((((xensurepip).x_uninstall_helper)).apply)
                        xwarning.write (((((((xstderr).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("only uninstall a matching version") ((xwarning)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xrun_pip).xcalled)))
                xtest_uninstall.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          bogusForceDataize.write ((((xensurepip).x_uninstall_helper)).apply)
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("uninstall") ("-y") ("--disable-pip-version-check") ("pip") ("setuptools"))))
                xtest_uninstall_with_verbosity_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          (((unsupported)).apply (((xensurepip).x_uninstall_helper)) (1))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("uninstall") ("-y") ("--disable-pip-version-check") ("-v") ("pip") ("setuptools"))))
                xtest_uninstall_with_verbosity_2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          (((unsupported)).apply (((xensurepip).x_uninstall_helper)) (2))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("uninstall") ("-y") ("--disable-pip-version-check") ("-vv") ("pip") ("setuptools"))))
                xtest_uninstall_with_verbosity_3.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          (((unsupported)).apply (((xensurepip).x_uninstall_helper)) (3))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("uninstall") ("-y") ("--disable-pip-version-check") ("-vvv") ("pip") ("setuptools"))))
                xtest_pip_environment_variables_removed.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xos_environ)) ("PIP_THIS_SHOULD_GO_AWAY"))) ("test fodder"))
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          bogusForceDataize.write ((((xensurepip).x_uninstall_helper)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("PIP_THIS_SHOULD_GO_AWAY") (((xself).xos_environ)))
                xtest_pip_config_file_disabled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          bogusForceDataize.write ((((xensurepip).x_uninstall_helper)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xos_environ)) ("PIP_CONFIG_FILE"))) (((xos).xdevnull)))
            xEXPECTED_VERSION_OUTPUT.write ("pip ".add ((xensurepip).x_PIP_VERSION))
            (((unsupported)).apply ((xEnsurepipMixin)) (((xunittest).xTestCase)))
              seq
                xtest_bootstrap_version.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xtest).xsupport).xcaptured_stdout)).apply)) ((xstdout)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                            bogusForceDataize.write ((((xensurepip).x_main)).apply ((((unsupported)).apply ("--version"))))
                        xresult.write (((((((xstdout).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xEXPECTED_VERSION_OUTPUT)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xrun_pip).xcalled)))
                xtest_basic_bootstrapping.write
                  [xself]
                    memory > xadditional_paths
                    memory > xexit_code
                    seq > @
                      seq
                        xexit_code.write ((((xensurepip).x_main)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("install") ("--no-cache-dir") ("--no-index") ("--find-links") ((((xunittest).xmock).xANY)) ("setuptools") ("pip"))) ((((xunittest).xmock).xANY)))
                        xadditional_paths.write (((unsupported)).apply ((((unsupported)).apply ((((xself).xrun_pip).xcall_args)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xadditional_paths)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexit_code)) (0))
                xtest_bootstrapping_error_code.write
                  [xself]
                    memory > xexit_code
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xrun_pip).xreturn_value)) (2))
                        xexit_code.write ((((xensurepip).x_main)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexit_code)) (2))
            (((unsupported)).apply ((xEnsurepipMixin)) (((xunittest).xTestCase)))
              seq
                xtest_uninstall_version.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xtest).xsupport).xcaptured_stdout)).apply)) ((xstdout)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                            bogusForceDataize.write (((((xensurepip).x_uninstall).x_main)).apply ((((unsupported)).apply ("--version"))))
                        xresult.write (((((((xstdout).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xEXPECTED_VERSION_OUTPUT)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xrun_pip).xcalled)))
                xtest_basic_uninstall.write
                  [xself]
                    memory > xexit_code
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          xexit_code.write (((((xensurepip).x_uninstall).x_main)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).xrun_pip).xassert_called_once_with)).apply ((((unsupported)).apply ("uninstall") ("-y") ("--disable-pip-version-check") ("pip") ("setuptools"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexit_code)) (0))
                xtest_uninstall_error_code.write
                  [xself]
                    memory > xexit_code
                    seq > @
                      seq
                        (((unsupported)).apply ((((xfake_pip)).apply)))
                          seq
                            (((unsupported)).apply ((((xself).xrun_pip).xreturn_value)) (2))
                            xexit_code.write (((((xensurepip).x_uninstall).x_main)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexit_code)) (2))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)