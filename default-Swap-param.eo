memory > xTemplateView
memory > xpath
memory > xi18n_patterns
memory > xinclude
memory > xre_path
[] > default
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xurlpatterns
        memory > x_
        memory > xview
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xview.write (((unsupported)).apply (((xTemplateView).xas_view)) ("dummy.html"))
            xurlpatterns.write (((unsupported)).apply ((((unsupported)).apply ((xpath)) ("not-prefixed/") ((xview)) ("not-prefixed"))) ((((xpath)).apply ("not-prefixed-include/") ((((xinclude)).apply ("i18n.patterns.urls.included"))))) ((((unsupported)).apply ((xre_path)) ((((x_)).apply ("^translated/$"))) ((xview)) ("no-prefix-translated"))) ((((unsupported)).apply ((xre_path)) ((((x_)).apply ("^translated/(?P<slug>[w-]+)/$"))) ((xview)) ((((unsupported)).apply ("slug") ("default-slug"))) ("no-prefix-translated-slug"))))
            (((unsupported)).apply ((xurlpatterns)) ((((xi18n_patterns)).apply ((((xre_path)).apply ((((x_)).apply ("^account/"))) ((((unsupported)).apply ((xinclude)) ("i18n.patterns.urls.namespace") ("account"))))) ((((unsupported)).apply ((xre_path)) ((((x_)).apply ("^users/$"))) ((xview)) ("users"))) ((((unsupported)).apply ((xre_path)) ((((x_)).apply ("^with-arguments/(?P<argument>[w-]+)/(?:(?P<optional>[w-]+).html)?$"))) ((xview)) ("with-arguments"))) ((((unsupported)).apply ((xpath)) ("prefixed.xml") ((xview)) ("prefixed_xml"))) ((((unsupported)).apply ((xpath)) ("prefixed/") ((xview)) ("prefixed"))))))