memory > xDeferrable
memory > xValueError
memory > xTable
memory > xold_kwargs
memory > xIndexName
memory > xindex_name
memory > xnew_rel
memory > xtuple
memory > xextra_params
memory > xmap
memory > xkwargs
memory > xother_actions
memory > xnamespace
memory > xExpressions
memory > xfield
memory > xchanges_sql
memory > xold_path
memory > xfk_name
memory > xtimezone
memory > xdatetime
memory > xlist
memory > xold_rel
memory > xrel
memory > xindex
memory > xstr
memory > x_old_rel
memory > xatomic
memory > xnew_kwargs
memory > xColumns
memory > xNotImplementedError
memory > x_
memory > xQuery
memory > xfield_names
memory > xdefinition
memory > xnew_path
memory > xIndex
memory > xset
memory > xStatement
memory > xconstraint_name
memory > xcursor
memory > xsum
memory > xparams
memory > xForeignKeyName
memory > xnew_args
memory > xsplit_identifier
memory > xold_args
memory > xargs
memory > xobj
memory > xTransactionManagementError
memory > xinfodict
memory > xgetattr
memory > xsql
memory > xconstraint
memory > xattr
memory > xname
memory > xzip
memory > xisinstance
memory > xlen
memory > xnames_digest
memory > xlogging
[] > schema
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsql_create_column_inline_fk
        memory > xcolumn_sql
        memory > xalter_index_together
        memory > x_alter_column_type_sql
        memory > xquote_name
        memory > xsql_create_unique_index
        memory > xsql_create_index
        memory > xsql_check_constraint
        memory > x_unique_sql
        memory > xadd_field
        memory > xsql_create_unique
        memory > xprepare_default
        memory > xsql_create_column
        memory > x_field_indexes_sql
        memory > x_delete_index_sql
        memory > x_deferrable_constraint_sql
        memory > xsql_create_fk
        memory > x_get_index_tablespace_sql
        memory > xadd_index
        memory > x_iter_column_sql
        memory > xlogger
        memory > xremove_index
        memory > x_is_relevant_relation
        memory > xsql_delete_column
        memory > xsql_alter_column_no_default_null
        memory > xsql_delete_check
        memory > xremove_field
        memory > x_create_fk_sql
        memory > xsql_rename_table
        memory > x_index_condition_sql
        memory > x_delete_primary_key
        memory > xsql_delete_table
        memory > xsql_unique_constraint
        memory > xsql_rename_column
        memory > xcreate_model
        memory > x_index_columns
        memory > xquote_value
        memory > xsql_delete_fk
        memory > xsql_update_with_default
        memory > xalter_field
        memory > x_check_sql
        memory > x_field_should_be_indexed
        memory > x_delete_check_sql
        memory > x_rename_field_sql
        memory > xtable_sql
        memory > xsql_create_inline_fk
        memory > x_field_should_be_altered
        memory > xsql_delete_index
        memory > xremove_procedure
        memory > x_create_primary_key_sql
        memory > x_alter_column_collation_sql
        memory > xsql_delete_pk
        memory > x_related_non_m2m_objects
        memory > xsql_alter_column_no_default
        memory > xalter_unique_together
        memory > xsql_alter_column_default
        memory > x_alter_column_default_sql
        memory > xalter_db_table
        memory > xeffective_default
        memory > xsql_constraint
        memory > xexecute
        memory > xremove_constraint
        memory > x_effective_default
        memory > xdelete_model
        memory > xsql_create_table
        memory > x_index_include_sql
        memory > xsql_retablespace_table
        memory > x_unique_should_be_added
        memory > xskip_default_on_alter
        memory > x_collate_sql
        memory > x_delete_primary_key_sql
        memory > xskip_default
        memory > x__exit__
        memory > xsql_alter_column_not_null
        memory > xsql_alter_column_collate
        memory > x_delete_unique_sql
        memory > xsql_alter_column_type
        memory > x_fk_constraint_name
        memory > x__enter__
        memory > xalter_db_tablespace
        memory > x_field_became_primary_key
        memory > x_alter_column_null_sql
        memory > xsql_delete_constraint
        memory > x_model_indexes_sql
        memory > xsql_delete_procedure
        memory > x__init__
        memory > x_create_index_sql
        memory > xadd_constraint
        memory > x_delete_constraint_sql
        memory > xsql_delete_unique
        memory > x_delete_fk_sql
        memory > x_delete_composed_index
        memory > xsql_create_check
        memory > x_create_unique_sql
        memory > x_alter_field
        memory > x_column_default_sql
        memory > x_all_related_fields
        memory > xsql_alter_column
        memory > xsql_create_pk
        memory > xsql_alter_column_null
        memory > x_constraint_names
        memory > x_create_check_sql
        memory > x_alter_many_to_many
        memory > x_create_index_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.db.backends.schema"))
            x_is_relevant_relation.write
              [xrelation xaltered_field]
                memory > xfield2
                seq > @
                  seq
                    (((unsupported)).apply)
                    xfield2.write ((xrelation).xfield)
                    ((xfield).xmany_to_many).if
                      (((unsupported)).apply (FALSE))
                    (((xaltered_field).xprimary_key).and (((xfield).xto_fields).eq (((unsupported)).apply ("None: is there a None literal in the EO language?")))).if
                      (((unsupported)).apply (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply (((xaltered_field).xname)) (((xfield).xto_fields)))))
            x_all_related_fields.write
              [xmodel]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((((xmodel).x_meta).x_get_fields)) (FALSE) (TRUE) (TRUE) (FALSE))))
            x_related_non_m2m_objects.write
              [xold_field xnew_field]
                memory > xrelated_fields
                seq > @
                  seq
                    xrelated_fields.write (((xzip)).apply ((((unsupported)).apply ((xobj)) ((xobj)) ((((x_all_related_fields)).apply (((xold_field).xmodel)))) ((((x_is_relevant_relation)).apply ((xobj)) ((xold_field)))))) ((((unsupported)).apply ((xobj)) ((xobj)) ((((x_all_related_fields)).apply (((xnew_field).xmodel)))) ((((x_is_relevant_relation)).apply ((xobj)) ((xnew_field)))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xold_rel)) ((xnew_rel)))) ((xrelated_fields)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xold_rel)) ((xnew_rel)))))
                        (((unsupported)).apply ((((x_related_non_m2m_objects)).apply (((xold_rel).xremote_field)) (((xnew_rel).xremote_field)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xsql_create_table.write "CREATE TABLE %(table)s (%(definition)s)"
                xsql_rename_table.write "ALTER TABLE %(old_table)s RENAME TO %(new_table)s"
                xsql_retablespace_table.write "ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s"
                xsql_delete_table.write "DROP TABLE %(table)s CASCADE"
                xsql_create_column.write "ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s"
                xsql_alter_column.write "ALTER TABLE %(table)s %(changes)s"
                xsql_alter_column_type.write "ALTER COLUMN %(column)s TYPE %(type)s"
                xsql_alter_column_null.write "ALTER COLUMN %(column)s DROP NOT NULL"
                xsql_alter_column_not_null.write "ALTER COLUMN %(column)s SET NOT NULL"
                xsql_alter_column_default.write "ALTER COLUMN %(column)s SET DEFAULT %(default)s"
                xsql_alter_column_no_default.write "ALTER COLUMN %(column)s DROP DEFAULT"
                xsql_alter_column_no_default_null.write (xsql_alter_column_no_default)
                xsql_alter_column_collate.write "ALTER COLUMN %(column)s TYPE %(type)s%(collation)s"
                xsql_delete_column.write "ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE"
                xsql_rename_column.write "ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s"
                xsql_update_with_default.write "UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL"
                xsql_unique_constraint.write "UNIQUE (%(columns)s)%(deferrable)s"
                xsql_check_constraint.write "CHECK (%(check)s)"
                xsql_delete_constraint.write "ALTER TABLE %(table)s DROP CONSTRAINT %(name)s"
                xsql_constraint.write "CONSTRAINT %(name)s %(constraint)s"
                xsql_create_check.write "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)"
                xsql_delete_check.write (xsql_delete_constraint)
                xsql_create_unique.write "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s"
                xsql_delete_unique.write (xsql_delete_constraint)
                xsql_create_fk.write "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s"
                xsql_create_inline_fk.write "None: is there a None literal in the EO language?"
                xsql_create_column_inline_fk.write "None: is there a None literal in the EO language?"
                xsql_delete_fk.write (xsql_delete_constraint)
                xsql_create_index.write "CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s"
                xsql_create_unique_index.write "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s"
                xsql_delete_index.write "DROP INDEX %(name)s"
                xsql_create_pk.write "ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)"
                xsql_delete_pk.write (xsql_delete_constraint)
                xsql_delete_procedure.write "DROP PROCEDURE %(procedure)s"
                x__init__.write
                  [xself xconnection xcollect_sql xatomic]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ((xconnection)))
                        (((unsupported)).apply (((xself).xcollect_sql)) ((xcollect_sql)))
                        ((xself).xcollect_sql).if
                          (((unsupported)).apply (((xself).xcollected_sql)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xatomic_migration)) ((((((xself).xconnection).xfeatures).xcan_rollback_ddl).and (xatomic))))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdeferred_sql)) ((((unsupported)).apply)))
                        ((xself).xatomic_migration).if
                          seq
                            (((unsupported)).apply (((xself).xatomic)) ((((xatomic)).apply ((((xself).xconnection).xalias)))))
                            bogusForceDataize.write (((((xself).xatomic).x__enter__)).apply)
                        (((unsupported)).apply ((xself)))
                x__exit__.write
                  [xself xexc_type xexc_value xtraceback]
                    seq > @
                      seq
                        (((unsupported)).apply ((xexc_type)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xsql)) (((xself).xdeferred_sql)))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)))
                        ((xself).xatomic_migration).if
                          bogusForceDataize.write (((((xself).xatomic).x__exit__)).apply ((xexc_type)) ((xexc_value)) ((xtraceback)))
                xexecute.write
                  [xself xsql xparams]
                    memory > xending
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((((xself).xcollect_sql).not).and (((xself).xconnection).xin_atomic_block)).and (((((xself).xconnection).xfeatures).xcan_rollback_ddl).not)).if
                          (((unsupported)).apply ((((xTransactionManagementError)).apply ("Executing DDL statements while in a transaction on databases that can't perform a rollback is prohibited."))))
                        xsql.write (((xstr)).apply ((xsql)))
                        (((unsupported)).apply (((xlogger).xdebug)) ("%s; (params %r)") ((xsql)) ((xparams)) ((((unsupported)).apply ("params") ((xparams)) ("sql") ((xsql)))))
                        ((xself).xcollect_sql).if
                          seq
                            xending.write ((((((((xsql).xrstrip)).apply).xendswith)).apply (";")).if "" ";")
                            (((unsupported)).apply ((xparams)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write (((((xself).xcollected_sql).xappend)).apply ((((xsql).mod (((xtuple)).apply ((((xmap)).apply (((xself).xquote_value)) ((xparams)))))).add (xending))))
                              bogusForceDataize.write (((((xself).xcollected_sql).xappend)).apply (((xsql).add (xending))))
                          (((unsupported)).apply ((((((xself).xconnection).xcursor)).apply)) ((xcursor)))
                            bogusForceDataize.write ((((xcursor).xexecute)).apply ((xsql)) ((xparams)))
                xquote_name.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply (((((((xself).xconnection).xops).xquote_name)).apply ((xname)))))
                xtable_sql.write
                  [xself xmodel]
                    memory > xconstraints
                    memory > xcolumn_sqls
                    memory > xfields
                    memory > xto_table
                    memory > xautoinc_sql
                    memory > xparams
                    memory > xdb_params
                    memory > xcol_type_suffix
                    memory > xtablespace_sql
                    memory > xto_column
                    memory > xsql
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xfield_names)) ((((xmodel).x_meta).xunique_together)))
                          seq
                            xfields.write (((unsupported)).apply ((((((xmodel).x_meta).xget_field)).apply ((xfield)))) ((xfield)) ((xfield_names)))
                            bogusForceDataize.write (((((xself).xdeferred_sql).xappend)).apply (((((xself).x_create_unique_sql)).apply ((xmodel)) ((xfields)))))
                        xcolumn_sqls.write (((unsupported)).apply)
                        xparams.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_fields)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdefinition)) ((xextra_params)))) (((((xself).xcolumn_sql)).apply ((xmodel)) ((xfield)))))
                            (((unsupported)).apply ((xdefinition)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            xdb_params.write (((unsupported)).apply (((xfield).xdb_parameters)) (((xself).xconnection)))
                            (((unsupported)).apply ((xdb_params)) ("check")).if
                              (((unsupported)).apply ((xdefinition)) ((" ".add (((xself).xsql_check_constraint).mod (xdb_params)))))
                            xcol_type_suffix.write (((unsupported)).apply (((xfield).xdb_type_suffix)) (((xself).xconnection)))
                            (xcol_type_suffix).if
                              (((unsupported)).apply ((xdefinition)) ((" %s".mod (xcol_type_suffix))))
                            bogusForceDataize.write ((((xparams).xextend)).apply ((xextra_params)))
                            (((xfield).xremote_field).and ((xfield).xdb_constraint)).if
                              seq
                                xto_table.write (((((xfield).xremote_field).xmodel).x_meta).xdb_table)
                                xto_column.write ((((((((xfield).xremote_field).xmodel).x_meta).xget_field)).apply ((((xfield).xremote_field).xfield_name))).xcolumn)
                                ((xself).xsql_create_inline_fk).if
                                  (((unsupported)).apply ((xdefinition)) ((" ".add (((xself).xsql_create_inline_fk).mod (((unsupported)).apply ("to_table") (((((xself).xquote_name)).apply ((xto_table)))) ("to_column") (((((xself).xquote_name)).apply ((xto_column)))))))))
                                  ((((xself).xconnection).xfeatures).xsupports_foreign_keys).if
                                    bogusForceDataize.write (((((xself).xdeferred_sql).xappend)).apply (((((xself).x_create_fk_sql)).apply ((xmodel)) ((xfield)) ("_fk_%(to_table)s_%(to_column)s"))))
                            bogusForceDataize.write ((((xcolumn_sqls).xappend)).apply (("%s %s".mod (((unsupported)).apply (((((xself).xquote_name)).apply (((xfield).xcolumn)))) ((xdefinition))))))
                            (((unsupported)).apply (((((xfield).xget_internal_type)).apply)) ((((unsupported)).apply ("AutoField") ("BigAutoField") ("SmallAutoField")))).if
                              seq
                                xautoinc_sql.write ((((((xself).xconnection).xops).xautoinc_sql)).apply ((((xmodel).x_meta).xdb_table)) (((xfield).xcolumn)))
                                (xautoinc_sql).if
                                  bogusForceDataize.write (((((xself).xdeferred_sql).xextend)).apply ((xautoinc_sql)))
                        xconstraints.write (((unsupported)).apply (((((xconstraint).xconstraint_sql)).apply ((xmodel)) ((xself)))) ((xconstraint)) ((((xmodel).x_meta).xconstraints)))
                        xsql.write (((xself).xsql_create_table).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("definition") ((((", ".xjoin)).apply ((((unsupported)).apply ((xconstraint)) ((xconstraint)) ((((unsupported)).apply ((((unsupported)).apply ((xcolumn_sqls)))) ((((unsupported)).apply ((xconstraints)))))) ((xconstraint))))))))
                        (((xmodel).x_meta).xdb_tablespace).if
                          seq
                            xtablespace_sql.write ((((((xself).xconnection).xops).xtablespace_sql)).apply ((((xmodel).x_meta).xdb_tablespace)))
                            (xtablespace_sql).if
                              (((unsupported)).apply ((xsql)) ((" ".add (xtablespace_sql))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
                x_iter_column_sql.write
                  [xself xcolumn_db_type xparams xmodel xfield xinclude_default]
                    memory > xcolumn_default
                    memory > xcollation
                    memory > xdefault_value
                    memory > xtablespace
                    memory > xnull
                    seq > @
                      seq
                        (((unsupported)).apply ((xcolumn_db_type)))
                        xcollation.write (((xgetattr)).apply ((xfield)) ("db_collation") ("None: is there a None literal in the EO language?"))
                        (xcollation).if
                          (((unsupported)).apply (((((xself).x_collate_sql)).apply ((xcollation)))))
                        xnull.write ((xfield).xnull)
                        xinclude_default.write (((xinclude_default).and (((((xself).xskip_default)).apply ((xfield))).not)).and (((xnull).and ((((xself).xskip_default_on_alter)).apply ((xfield)))).not))
                        (xinclude_default).if
                          seq
                            xdefault_value.write ((((xself).xeffective_default)).apply ((xfield)))
                            (((unsupported)).apply ((xdefault_value)) ("None: is there a None literal in the EO language?")).if
                              seq
                                xcolumn_default.write ("DEFAULT ".add ((((xself).x_column_default_sql)).apply ((xfield))))
                                ((((xself).xconnection).xfeatures).xrequires_literal_defaults).if
                                  (((unsupported)).apply (((xcolumn_default).mod ((((xself).xprepare_default)).apply ((xdefault_value))))))
                                  seq
                                    (((unsupported)).apply ((xcolumn_default)))
                                    bogusForceDataize.write ((((xparams).xappend)).apply ((xdefault_value)))
                        ((((xfield).xempty_strings_allowed).and (((xfield).xprimary_key).not)).and ((((xself).xconnection).xfeatures).xinterprets_empty_strings_as_nulls)).if
                          xnull.write TRUE
                        ((xnull).not).if
                          (((unsupported)).apply ("NOT NULL"))
                          (((((xself).xconnection).xfeatures).ximplied_column_null).not).if
                            (((unsupported)).apply ("NULL"))
                        ((xfield).xprimary_key).if
                          (((unsupported)).apply ("PRIMARY KEY"))
                          ((xfield).xunique).if
                            (((unsupported)).apply ("UNIQUE"))
                        xtablespace.write (((xfield).xdb_tablespace).or (((xmodel).x_meta).xdb_tablespace))
                        (((xtablespace).and ((((xself).xconnection).xfeatures).xsupports_tablespaces)).and ((xfield).xunique)).if
                          (((unsupported)).apply ((((unsupported)).apply (((((xself).xconnection).xops).xtablespace_sql)) ((xtablespace)) (TRUE))))
                xcolumn_sql.write
                  [xself xmodel xfield xinclude_default]
                    memory > xcolumn_db_type
                    memory > xdb_params
                    memory > xparams
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdb_params.write (((unsupported)).apply (((xfield).xdb_parameters)) (((xself).xconnection)))
                        xcolumn_db_type.write (((unsupported)).apply ((xdb_params)) ("type"))
                        (((unsupported)).apply ((xcolumn_db_type)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        xparams.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((" ".xjoin)).apply (((((xself).x_iter_column_sql)).apply ((xcolumn_db_type)) ((xparams)) ((xmodel)) ((xfield)) ((xinclude_default)))))) ((xparams)))))
                xskip_default.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
                xskip_default_on_alter.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
                xprepare_default.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseSchemaEditor for backends which have requires_literal_defaults must provide a prepare_default() method"))))
                x_column_default_sql.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ("%s"))
                x_effective_default.write
                  [xfield]
                    memory > xinternal_type
                    memory > xdefault
                    seq > @
                      (((unsupported)).apply)
                        ((((xfield).xhas_default)).apply).if
                          xdefault.write ((((xfield).xget_default)).apply)
                          (((((xfield).xnull).not).and ((xfield).xblank)).and ((xfield).xempty_strings_allowed)).if
                            (((((xfield).xget_internal_type)).apply).eq "BinaryField").if
                              xdefault.write ""
                              xdefault.write ""
                            ((((xgetattr)).apply ((xfield)) ("auto_now") (FALSE)).or (((xgetattr)).apply ((xfield)) ("auto_now_add") (FALSE))).if
                              seq
                                xinternal_type.write ((((xfield).xget_internal_type)).apply)
                                ((xinternal_type).eq "DateTimeField").if
                                  xdefault.write ((((xtimezone).xnow)).apply)
                                  seq
                                    xdefault.write ((((xdatetime).xnow)).apply)
                                    ((xinternal_type).eq "DateField").if
                                      xdefault.write ((((xdefault).xdate)).apply)
                                      ((xinternal_type).eq "TimeField").if
                                        xdefault.write ((((xdefault).xtime)).apply)
                              xdefault.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xdefault)))
                xeffective_default.write
                  [xself xfield]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xfield).xget_db_prep_save)).apply (((((xself).x_effective_default)).apply ((xfield)))) (((xself).xconnection)))))
                xquote_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply)))
                xcreate_model.write
                  [xself xmodel]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xself).xtable_sql)).apply ((xmodel)))))
                        bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) (((xparams).or "None: is there a None literal in the EO language?")))
                        bogusForceDataize.write (((((xself).xdeferred_sql).xextend)).apply (((((xself).x_model_indexes_sql)).apply ((xmodel)))))
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_many_to_many)))
                          (((((xfield).xremote_field).xthrough).x_meta).xauto_created).if
                            bogusForceDataize.write ((((xself).xcreate_model)).apply ((((xfield).xremote_field).xthrough)))
                xdelete_model.write
                  [xself xmodel]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_many_to_many)))
                          (((((xfield).xremote_field).xthrough).x_meta).xauto_created).if
                            bogusForceDataize.write ((((xself).xdelete_model)).apply ((((xfield).xremote_field).xthrough)))
                        bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_delete_table).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table))))))))
                        (((unsupported)).apply ((xsql)) ((((xlist)).apply (((xself).xdeferred_sql)))))
                          ((((xisinstance)).apply ((xsql)) ((xStatement))).and ((((xsql).xreferences_table)).apply ((((xmodel).x_meta).xdb_table)))).if
                            bogusForceDataize.write (((((xself).xdeferred_sql).xremove)).apply ((xsql)))
                xadd_index.write
                  [xself xmodel xindex]
                    seq > @
                      seq
                        unsupported
                        (((xindex).xcontains_expressions).and (((((xself).xconnection).xfeatures).xsupports_expression_indexes).not)).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xexecute)) (((((xindex).xcreate_sql)).apply ((xmodel)) ((xself)))) ("None: is there a None literal in the EO language?"))
                xremove_index.write
                  [xself xmodel xindex]
                    seq > @
                      seq
                        unsupported
                        (((xindex).xcontains_expressions).and (((((xself).xconnection).xfeatures).xsupports_expression_indexes).not)).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xexecute)).apply (((((xindex).xremove_sql)).apply ((xmodel)) ((xself)))))
                xadd_constraint.write
                  [xself xmodel xconstraint]
                    memory > xsql
                    seq > @
                      seq
                        unsupported
                        xsql.write ((((xconstraint).xcreate_sql)).apply ((xmodel)) ((xself)))
                        (xsql).if
                          (((unsupported)).apply (((xself).xexecute)) ((xsql)) ("None: is there a None literal in the EO language?"))
                xremove_constraint.write
                  [xself xmodel xconstraint]
                    memory > xsql
                    seq > @
                      seq
                        unsupported
                        xsql.write ((((xconstraint).xremove_sql)).apply ((xmodel)) ((xself)))
                        (xsql).if
                          bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)))
                xalter_unique_together.write
                  [xself xmodel xold_unique_together xnew_unique_together]
                    memory > xnews
                    memory > xolds
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xolds.write (((unsupported)).apply ((((xtuple)).apply ((xfields)))) ((xfields)) ((xold_unique_together)))
                        xnews.write (((unsupported)).apply ((((xtuple)).apply ((xfields)))) ((xfields)) ((xnew_unique_together)))
                        (((unsupported)).apply ((xfields)) (((((xolds).xdifference)).apply ((xnews)))))
                          bogusForceDataize.write ((((xself).x_delete_composed_index)).apply ((xmodel)) ((xfields)) ((((unsupported)).apply ("unique") (TRUE))) (((xself).xsql_delete_unique)))
                        (((unsupported)).apply ((xfield_names)) (((((xnews).xdifference)).apply ((xolds)))))
                          seq
                            xfields.write (((unsupported)).apply ((((((xmodel).x_meta).xget_field)).apply ((xfield)))) ((xfield)) ((xfield_names)))
                            bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_unique_sql)).apply ((xmodel)) ((xfields)))))
                xalter_index_together.write
                  [xself xmodel xold_index_together xnew_index_together]
                    memory > xnews
                    memory > xolds
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xolds.write (((unsupported)).apply ((((xtuple)).apply ((xfields)))) ((xfields)) ((xold_index_together)))
                        xnews.write (((unsupported)).apply ((((xtuple)).apply ((xfields)))) ((xfields)) ((xnew_index_together)))
                        (((unsupported)).apply ((xfields)) (((((xolds).xdifference)).apply ((xnews)))))
                          bogusForceDataize.write ((((xself).x_delete_composed_index)).apply ((xmodel)) ((xfields)) ((((unsupported)).apply ("index") (TRUE) ("unique") (FALSE))) (((xself).xsql_delete_index)))
                        (((unsupported)).apply ((xfield_names)) (((((xnews).xdifference)).apply ((xolds)))))
                          seq
                            xfields.write (((unsupported)).apply ((((((xmodel).x_meta).xget_field)).apply ((xfield)))) ((xfield)) ((xfield_names)))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((((unsupported)).apply (((xself).x_create_index_sql)) ((xmodel)) ((xfields)) ("_idx"))))
                x_delete_composed_index.write
                  [xself xmodel xfields xconstraint_kwargs xsql]
                    memory > xmeta_constraint_names
                    memory > xmeta_index_names
                    memory > xcolumns
                    memory > xconstraint_names
                    seq > @
                      seq
                        xmeta_constraint_names.write (((unsupported)).apply (((xconstraint).xname)) ((xconstraint)) ((((xmodel).x_meta).xconstraints)))
                        xmeta_index_names.write (((unsupported)).apply (((xconstraint).xname)) ((xconstraint)) ((((xmodel).x_meta).xindexes)))
                        xcolumns.write (((unsupported)).apply (((((((xmodel).x_meta).xget_field)).apply ((xfield))).xcolumn)) ((xfield)) ((xfields)))
                        xconstraint_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((xcolumns)) (((xmeta_constraint_names).or (xmeta_index_names))) ((((unsupported)).apply ((xconstraint_kwargs)))))
                        ((((xlen)).apply ((xconstraint_names))).neq 1).if
                          (((unsupported)).apply ((((xValueError)).apply (("Found wrong number (%s) of constraints for %s(%s)".mod (((unsupported)).apply ((((xlen)).apply ((xconstraint_names)))) ((((xmodel).x_meta).xdb_table)) ((((", ".xjoin)).apply ((xcolumns))))))))))
                        bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_constraint_sql)).apply ((xsql)) ((xmodel)) ((((unsupported)).apply ((xconstraint_names)) (0))))))
                xalter_db_table.write
                  [xself xmodel xold_db_table xnew_db_table]
                    seq > @
                      seq
                        unsupported
                        (((xold_db_table).eq (xnew_db_table)).or (((((xself).xconnection).xfeatures).xignores_table_name_case).and (((((xold_db_table).xlower)).apply).eq ((((xnew_db_table).xlower)).apply)))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_rename_table).mod (((unsupported)).apply ("old_table") (((((xself).xquote_name)).apply ((xold_db_table)))) ("new_table") (((((xself).xquote_name)).apply ((xnew_db_table))))))))
                        (((unsupported)).apply ((xsql)) (((xself).xdeferred_sql)))
                          (((xisinstance)).apply ((xsql)) ((xStatement))).if
                            bogusForceDataize.write ((((xsql).xrename_table_references)).apply ((xold_db_table)) ((xnew_db_table)))
                xalter_db_tablespace.write
                  [xself xmodel xold_db_tablespace xnew_db_tablespace]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_retablespace_table).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("old_tablespace") (((((xself).xquote_name)).apply ((xold_db_tablespace)))) ("new_tablespace") (((((xself).xquote_name)).apply ((xnew_db_tablespace))))))))
                xadd_field.write
                  [xself xmodel xfield]
                    memory > xconstraint_suffix
                    memory > xto_table
                    memory > xdb_params
                    memory > xto_column
                    memory > xsql
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xfield).xmany_to_many).and (((((xfield).xremote_field).xthrough).x_meta).xauto_created)).if
                          (((unsupported)).apply (((((xself).xcreate_model)).apply ((((xfield).xremote_field).xthrough)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdefinition)) ((xparams)))) ((((unsupported)).apply (((xself).xcolumn_sql)) ((xmodel)) ((xfield)) (TRUE))))
                        (((unsupported)).apply ((xdefinition)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply)
                        xdb_params.write (((unsupported)).apply (((xfield).xdb_parameters)) (((xself).xconnection)))
                        (((unsupported)).apply ((xdb_params)) ("check")).if
                          (((unsupported)).apply ((xdefinition)) ((" ".add (((xself).xsql_check_constraint).mod (xdb_params)))))
                        ((((xfield).xremote_field).and ((((xself).xconnection).xfeatures).xsupports_foreign_keys)).and ((xfield).xdb_constraint)).if
                          seq
                            xconstraint_suffix.write "_fk_%(to_table)s_%(to_column)s"
                            ((xself).xsql_create_column_inline_fk).if
                              seq
                                xto_table.write (((((xfield).xremote_field).xmodel).x_meta).xdb_table)
                                xto_column.write ((((((((xfield).xremote_field).xmodel).x_meta).xget_field)).apply ((((xfield).xremote_field).xfield_name))).xcolumn)
                                (((unsupported)).apply ((((unsupported)).apply ((xnamespace)) ((x_)))) ((((xsplit_identifier)).apply ((((xmodel).x_meta).xdb_table)))))
                                (((unsupported)).apply ((xdefinition)) ((" ".add (((xself).xsql_create_column_inline_fk).mod (((unsupported)).apply ("name") (((((xself).x_fk_constraint_name)).apply ((xmodel)) ((xfield)) ((xconstraint_suffix)))) ("namespace") (((xnamespace).if ("%s.".mod ((((xself).xquote_name)).apply ((xnamespace)))) "")) ("column") (((((xself).xquote_name)).apply (((xfield).xcolumn)))) ("to_table") (((((xself).xquote_name)).apply ((xto_table)))) ("to_column") (((((xself).xquote_name)).apply ((xto_column)))) ("deferrable") (((((((xself).xconnection).xops).xdeferrable_sql)).apply)))))))
                              bogusForceDataize.write (((((xself).xdeferred_sql).xappend)).apply (((((xself).x_create_fk_sql)).apply ((xmodel)) ((xfield)) ((xconstraint_suffix)))))
                        xsql.write (((xself).xsql_create_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("column") (((((xself).xquote_name)).apply (((xfield).xcolumn)))) ("definition") ((xdefinition))))
                        bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) ((xparams)))
                        ((((((xself).xskip_default_on_alter)).apply ((xfield))).not).and (((unsupported)).apply (((((xself).xeffective_default)).apply ((xfield)))) ("None: is there a None literal in the EO language?"))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xchanges_sql)) ((xparams)))) ((((unsupported)).apply (((xself).x_alter_column_default_sql)) ((xmodel)) ("None: is there a None literal in the EO language?") ((xfield)) (TRUE))))
                            xsql.write (((xself).xsql_alter_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("changes") ((xchanges_sql))))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) ((xparams)))
                        bogusForceDataize.write (((((xself).xdeferred_sql).xextend)).apply (((((xself).x_field_indexes_sql)).apply ((xmodel)) ((xfield)))))
                        ((((xself).xconnection).xfeatures).xconnection_persists_old_columns).if
                          bogusForceDataize.write (((((xself).xconnection).xclose)).apply)
                xremove_field.write
                  [xself xmodel xfield]
                    memory > xsql
                    memory > xfk_names
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xfield).xmany_to_many).and (((((xfield).xremote_field).xthrough).x_meta).xauto_created)).if
                          (((unsupported)).apply (((((xself).xdelete_model)).apply ((((xfield).xremote_field).xthrough)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xfield).xdb_parameters)) (((xself).xconnection)))) ("type"))) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply)
                        ((xfield).xremote_field).if
                          seq
                            xfk_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((((unsupported)).apply (((xfield).xcolumn)))) (TRUE))
                            (((unsupported)).apply ((xfk_name)) ((xfk_names)))
                              bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_fk_sql)).apply ((xmodel)) ((xfk_name)))))
                        xsql.write (((xself).xsql_delete_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("column") (((((xself).xquote_name)).apply (((xfield).xcolumn))))))
                        bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)))
                        ((((xself).xconnection).xfeatures).xconnection_persists_old_columns).if
                          bogusForceDataize.write (((((xself).xconnection).xclose)).apply)
                        (((unsupported)).apply ((xsql)) ((((xlist)).apply (((xself).xdeferred_sql)))))
                          ((((xisinstance)).apply ((xsql)) ((xStatement))).and ((((xsql).xreferences_column)).apply ((((xmodel).x_meta).xdb_table)) (((xfield).xcolumn)))).if
                            bogusForceDataize.write (((((xself).xdeferred_sql).xremove)).apply ((xsql)))
                xalter_field.write
                  [xself xmodel xold_field xnew_field xstrict]
                    memory > xold_db_params
                    memory > xnew_type
                    memory > xnew_db_params
                    memory > xold_type
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((((xself).x_field_should_be_altered)).apply ((xold_field)) ((xnew_field))).not).if
                          (((unsupported)).apply)
                        xold_db_params.write (((unsupported)).apply (((xold_field).xdb_parameters)) (((xself).xconnection)))
                        xold_type.write (((unsupported)).apply ((xold_db_params)) ("type"))
                        xnew_db_params.write (((unsupported)).apply (((xnew_field).xdb_parameters)) (((xself).xconnection)))
                        xnew_type.write (((unsupported)).apply ((xnew_db_params)) ("type"))
                        (((((unsupported)).apply ((xold_type)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xold_field).xremote_field)) ("None: is there a None literal in the EO language?"))).or ((((unsupported)).apply ((xnew_type)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xnew_field).xremote_field)) ("None: is there a None literal in the EO language?")))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Cannot alter field %s into %s - they do not properly define db_type (are you using a badly-written custom field?)".mod (((unsupported)).apply ((xold_field)) ((xnew_field))))))))
                          (((((unsupported)).apply ((xold_type)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xnew_type)) ("None: is there a None literal in the EO language?"))).and ((((((xold_field).xremote_field).xthrough).and (((xnew_field).xremote_field).xthrough)).and (((((xold_field).xremote_field).xthrough).x_meta).xauto_created)).and (((((xnew_field).xremote_field).xthrough).x_meta).xauto_created))).if
                            (((unsupported)).apply (((((xself).x_alter_many_to_many)).apply ((xmodel)) ((xold_field)) ((xnew_field)) ((xstrict)))))
                            (((((unsupported)).apply ((xold_type)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xnew_type)) ("None: is there a None literal in the EO language?"))).and ((((((xold_field).xremote_field).xthrough).and (((xnew_field).xremote_field).xthrough)).and ((((((xold_field).xremote_field).xthrough).x_meta).xauto_created).not)).and ((((((xnew_field).xremote_field).xthrough).x_meta).xauto_created).not))).if
                              (((unsupported)).apply)
                              ((((unsupported)).apply ((xold_type)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xnew_type)) ("None: is there a None literal in the EO language?"))).if
                                (((unsupported)).apply ((((xValueError)).apply (("Cannot alter field %s into %s - they are not compatible types (you cannot alter to or from M2M fields, or add or remove through= on M2M fields)".mod (((unsupported)).apply ((xold_field)) ((xnew_field))))))))
                        bogusForceDataize.write ((((xself).x_alter_field)).apply ((xmodel)) ((xold_field)) ((xnew_field)) ((xold_type)) ((xnew_type)) ((xold_db_params)) ((xnew_db_params)) ((xstrict)))
                x_alter_field.write
                  [xself xmodel xold_field xnew_field xold_type xnew_type xold_db_params xnew_db_params xstrict]
                    memory > xrel_type
                    memory > xmeta_index_names
                    memory > xrels_to_update
                    memory > xfk_names
                    memory > xneeds_database_default
                    memory > xnew_default
                    memory > xconstraint_name
                    memory > xfks_dropped
                    memory > xpost_actions
                    memory > xactions
                    memory > xsql
                    memory > xnew_collation
                    memory > xold_default
                    memory > xfragment
                    memory > xfour_way_default_alteration
                    memory > xnull_actions
                    memory > xdrop_foreign_keys
                    memory > xold_collation
                    memory > xrel_db_params
                    memory > xindex_names
                    memory > xconstraint_names
                    memory > xmeta_constraint_names
                    memory > xrel_fk_names
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xfks_dropped.write (((xset)).apply)
                        ((((((xself).xconnection).xfeatures).xsupports_foreign_keys).and ((xold_field).xremote_field)).and ((xold_field).xdb_constraint)).if
                          seq
                            xfk_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((((unsupported)).apply (((xold_field).xcolumn)))) (TRUE))
                            ((xstrict).and ((((xlen)).apply ((xfk_names))).neq 1)).if
                              (((unsupported)).apply ((((xValueError)).apply (("Found wrong number (%s) of foreign key constraints for %s.%s".mod (((unsupported)).apply ((((xlen)).apply ((xfk_names)))) ((((xmodel).x_meta).xdb_table)) (((xold_field).xcolumn))))))))
                            (((unsupported)).apply ((xfk_name)) ((xfk_names)))
                              seq
                                bogusForceDataize.write ((((xfks_dropped).xadd)).apply ((((unsupported)).apply (((xold_field).xcolumn)))))
                                bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_fk_sql)).apply ((xmodel)) ((xfk_name)))))
                        (((xold_field).xunique).and ((((xnew_field).xunique).not).or ((((xself).x_field_became_primary_key)).apply ((xold_field)) ((xnew_field))))).if
                          seq
                            xmeta_constraint_names.write (((unsupported)).apply (((xconstraint).xname)) ((xconstraint)) ((((xmodel).x_meta).xconstraints)))
                            xconstraint_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((((unsupported)).apply (((xold_field).xcolumn)))) (TRUE) (FALSE) ((xmeta_constraint_names)))
                            ((xstrict).and ((((xlen)).apply ((xconstraint_names))).neq 1)).if
                              (((unsupported)).apply ((((xValueError)).apply (("Found wrong number (%s) of unique constraints for %s.%s".mod (((unsupported)).apply ((((xlen)).apply ((xconstraint_names)))) ((((xmodel).x_meta).xdb_table)) (((xold_field).xcolumn))))))))
                            (((unsupported)).apply ((xconstraint_name)) ((xconstraint_names)))
                              bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_unique_sql)).apply ((xmodel)) ((xconstraint_name)))))
                        xdrop_foreign_keys.write ((((((xself).xconnection).xfeatures).xsupports_foreign_keys).and ((((xold_field).xprimary_key).and ((xnew_field).xprimary_key)).or (((xold_field).xunique).and ((xnew_field).xunique)))).and ((xold_type).neq (xnew_type)))
                        (xdrop_foreign_keys).if
                          (((unsupported)).apply ((((unsupported)).apply ((x_old_rel)) ((xnew_rel)))) ((((x_related_non_m2m_objects)).apply ((xold_field)) ((xnew_field)))))
                            seq
                              xrel_fk_names.write (((unsupported)).apply (((xself).x_constraint_names)) (((xnew_rel).xrelated_model)) ((((unsupported)).apply ((((xnew_rel).xfield).xcolumn)))) (TRUE))
                              (((unsupported)).apply ((xfk_name)) ((xrel_fk_names)))
                                bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_fk_sql)).apply (((xnew_rel).xrelated_model)) ((xfk_name)))))
                        ((((xold_field).xdb_index).and (((xold_field).xunique).not)).and ((((xnew_field).xdb_index).not).or ((xnew_field).xunique))).if
                          seq
                            xmeta_index_names.write (((unsupported)).apply (((xindex).xname)) ((xindex)) ((((xmodel).x_meta).xindexes)))
                            xindex_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((((unsupported)).apply (((xold_field).xcolumn)))) (TRUE) (((xIndex).xsuffix)) ((xmeta_index_names)))
                            (((unsupported)).apply ((xindex_name)) ((xindex_names)))
                              bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_index_sql)).apply ((xmodel)) ((xindex_name)))))
                        (((((unsupported)).apply ((xold_db_params)) ("check")).neq (((unsupported)).apply ((xnew_db_params)) ("check"))).and (((unsupported)).apply ((xold_db_params)) ("check"))).if
                          seq
                            xmeta_constraint_names.write (((unsupported)).apply (((xconstraint).xname)) ((xconstraint)) ((((xmodel).x_meta).xconstraints)))
                            xconstraint_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) ((((unsupported)).apply (((xold_field).xcolumn)))) (TRUE) ((xmeta_constraint_names)))
                            ((xstrict).and ((((xlen)).apply ((xconstraint_names))).neq 1)).if
                              (((unsupported)).apply ((((xValueError)).apply (("Found wrong number (%s) of check constraints for %s.%s".mod (((unsupported)).apply ((((xlen)).apply ((xconstraint_names)))) ((((xmodel).x_meta).xdb_table)) (((xold_field).xcolumn))))))))
                            (((unsupported)).apply ((xconstraint_name)) ((xconstraint_names)))
                              bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_check_sql)).apply ((xmodel)) ((xconstraint_name)))))
                        (((xold_field).xcolumn).neq ((xnew_field).xcolumn)).if
                          seq
                            bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_rename_field_sql)).apply ((((xmodel).x_meta).xdb_table)) ((xold_field)) ((xnew_field)) ((xnew_type)))))
                            (((unsupported)).apply ((xsql)) (((xself).xdeferred_sql)))
                              (((xisinstance)).apply ((xsql)) ((xStatement))).if
                                bogusForceDataize.write ((((xsql).xrename_column_references)).apply ((((xmodel).x_meta).xdb_table)) (((xold_field).xcolumn)) (((xnew_field).xcolumn)))
                        xactions.write (((unsupported)).apply)
                        xnull_actions.write (((unsupported)).apply)
                        xpost_actions.write (((unsupported)).apply)
                        xold_collation.write (((xgetattr)).apply ((xold_field)) ("db_collation") ("None: is there a None literal in the EO language?"))
                        xnew_collation.write (((xgetattr)).apply ((xnew_field)) ("db_collation") ("None: is there a None literal in the EO language?"))
                        ((xold_collation).neq (xnew_collation)).if
                          seq
                            xfragment.write ((((xself).x_alter_column_collation_sql)).apply ((xmodel)) ((xnew_field)) ((xnew_type)) ((xnew_collation)))
                            bogusForceDataize.write ((((xactions).xappend)).apply ((xfragment)))
                          ((xold_type).neq (xnew_type)).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xfragment)) ((xother_actions)))) (((((xself).x_alter_column_type_sql)).apply ((xmodel)) ((xold_field)) ((xnew_field)) ((xnew_type)))))
                              bogusForceDataize.write ((((xactions).xappend)).apply ((xfragment)))
                              bogusForceDataize.write ((((xpost_actions).xextend)).apply ((xother_actions)))
                        xneeds_database_default.write FALSE
                        (((xold_field).xnull).and (((xnew_field).xnull).not)).if
                          seq
                            xold_default.write ((((xself).xeffective_default)).apply ((xold_field)))
                            xnew_default.write ((((xself).xeffective_default)).apply ((xnew_field)))
                            (((((((xself).xskip_default_on_alter)).apply ((xnew_field))).not).and ((xold_default).neq (xnew_default))).and (((unsupported)).apply ((xnew_default)) ("None: is there a None literal in the EO language?"))).if
                              seq
                                xneeds_database_default.write TRUE
                                bogusForceDataize.write ((((xactions).xappend)).apply (((((xself).x_alter_column_default_sql)).apply ((xmodel)) ((xold_field)) ((xnew_field)))))
                        (((xold_field).xnull).neq ((xnew_field).xnull)).if
                          seq
                            xfragment.write ((((xself).x_alter_column_null_sql)).apply ((xmodel)) ((xold_field)) ((xnew_field)))
                            (xfragment).if
                              bogusForceDataize.write ((((xnull_actions).xappend)).apply ((xfragment)))
                        xfour_way_default_alteration.write (((((xnew_field).xhas_default)).apply).and (((xold_field).xnull).and (((xnew_field).xnull).not)))
                        ((xactions).or (xnull_actions)).if
                          seq
                            ((xfour_way_default_alteration).not).if
                              xactions.write ((xactions).add (xnull_actions))
                            (((((xself).xconnection).xfeatures).xsupports_combined_alters).and (xactions)).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((((xtuple)).apply ((((xzip)).apply ((((unsupported)).apply ((xactions)))))))))
                                xactions.write (((unsupported)).apply ((((unsupported)).apply ((((", ".xjoin)).apply ((xsql)))) ((((xsum)).apply ((xparams)) ((((unsupported)).apply)))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((xactions)))
                              bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_alter_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("changes") ((xsql))))) ((xparams)))
                            (xfour_way_default_alteration).if
                              seq
                                bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_update_with_default).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("default") ("%s")))) ((((unsupported)).apply ((xnew_default)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((xnull_actions)))
                                  bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_alter_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("changes") ((xsql))))) ((xparams)))
                        (xpost_actions).if
                          (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((xpost_actions)))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) ((xparams)))
                        (((xold_field).xprimary_key).and (((xnew_field).xprimary_key).not)).if
                          bogusForceDataize.write ((((xself).x_delete_primary_key)).apply ((xmodel)) ((xstrict)))
                        ((((xself).x_unique_should_be_added)).apply ((xold_field)) ((xnew_field))).if
                          bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_unique_sql)).apply ((xmodel)) ((((unsupported)).apply ((xnew_field)))))))
                        ((((((xold_field).xdb_index).not).or ((xold_field).xunique)).and ((xnew_field).xdb_index)).and (((xnew_field).xunique).not)).if
                          bogusForceDataize.write ((((xself).xexecute)).apply ((((unsupported)).apply (((xself).x_create_index_sql)) ((xmodel)) ((((unsupported)).apply ((xnew_field)))))))
                        xrels_to_update.write (((unsupported)).apply)
                        (xdrop_foreign_keys).if
                          bogusForceDataize.write ((((xrels_to_update).xextend)).apply ((((x_related_non_m2m_objects)).apply ((xold_field)) ((xnew_field)))))
                        ((((xself).x_field_became_primary_key)).apply ((xold_field)) ((xnew_field))).if
                          seq
                            bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_primary_key_sql)).apply ((xmodel)) ((xnew_field)))))
                            bogusForceDataize.write ((((xrels_to_update).xextend)).apply ((((x_related_non_m2m_objects)).apply ((xold_field)) ((xnew_field)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xold_rel)) ((xnew_rel)))) ((xrels_to_update)))
                          seq
                            xrel_db_params.write (((unsupported)).apply ((((xnew_rel).xfield).xdb_parameters)) (((xself).xconnection)))
                            xrel_type.write (((unsupported)).apply ((xrel_db_params)) ("type"))
                            (((unsupported)).apply ((((unsupported)).apply ((xfragment)) ((xother_actions)))) (((((xself).x_alter_column_type_sql)).apply (((xnew_rel).xrelated_model)) (((xold_rel).xfield)) (((xnew_rel).xfield)) ((xrel_type)))))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((((xself).xsql_alter_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply (((((xnew_rel).xrelated_model).x_meta).xdb_table)))) ("changes") ((((unsupported)).apply ((xfragment)) (0)))))) ((((unsupported)).apply ((xfragment)) (1))))
                            (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((xother_actions)))
                              bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) ((xparams)))
                        (((((((xself).xconnection).xfeatures).xsupports_foreign_keys).and ((xnew_field).xremote_field)).and (((xfks_dropped).or (((xold_field).xremote_field).not)).or (((xold_field).xdb_constraint).not))).and ((xnew_field).xdb_constraint)).if
                          bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_fk_sql)).apply ((xmodel)) ((xnew_field)) ("_fk_%(to_table)s_%(to_column)s"))))
                        (xdrop_foreign_keys).if
                          (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xrel)))) ((xrels_to_update)))
                            (((xrel).xfield).xdb_constraint).if
                              bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_fk_sql)).apply (((xrel).xrelated_model)) (((xrel).xfield)) ("_fk"))))
                        (((((unsupported)).apply ((xold_db_params)) ("check")).neq (((unsupported)).apply ((xnew_db_params)) ("check"))).and (((unsupported)).apply ((xnew_db_params)) ("check"))).if
                          seq
                            xconstraint_name.write (((unsupported)).apply (((xself).x_create_index_name)) ((((xmodel).x_meta).xdb_table)) ((((unsupported)).apply (((xnew_field).xcolumn)))) ("_check"))
                            bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_create_check_sql)).apply ((xmodel)) ((xconstraint_name)) ((((unsupported)).apply ((xnew_db_params)) ("check"))))))
                        (xneeds_database_default).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xchanges_sql)) ((xparams)))) ((((unsupported)).apply (((xself).x_alter_column_default_sql)) ((xmodel)) ((xold_field)) ((xnew_field)) (TRUE))))
                            xsql.write (((xself).xsql_alter_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((((xmodel).x_meta).xdb_table)))) ("changes") ((xchanges_sql))))
                            bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)) ((xparams)))
                        ((((xself).xconnection).xfeatures).xconnection_persists_old_columns).if
                          bogusForceDataize.write (((((xself).xconnection).xclose)).apply)
                x_alter_column_null_sql.write
                  [xself xmodel xold_field xnew_field]
                    memory > xsql
                    memory > xnew_db_params
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((((xself).xconnection).xfeatures).xinterprets_empty_strings_as_nulls).and ((xnew_field).xempty_strings_allowed)).if
                          (((unsupported)).apply)
                          seq
                            xnew_db_params.write (((unsupported)).apply (((xnew_field).xdb_parameters)) (((xself).xconnection)))
                            xsql.write (((xnew_field).xnull).if ((xself).xsql_alter_column_null) ((xself).xsql_alter_column_not_null))
                            (((unsupported)).apply ((((unsupported)).apply (((xsql).mod (((unsupported)).apply ("column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("type") ((((unsupported)).apply ((xnew_db_params)) ("type")))))) ((((unsupported)).apply)))))
                x_alter_column_default_sql.write
                  [xself xmodel xold_field xnew_field xdrop]
                    memory > xdefault
                    memory > xnew_default
                    memory > xsql
                    memory > xnew_db_params
                    memory > xparams
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnew_default.write ((((xself).xeffective_default)).apply ((xnew_field)))
                        xdefault.write ((((xself).x_column_default_sql)).apply ((xnew_field)))
                        xparams.write (((unsupported)).apply ((xnew_default)))
                        (xdrop).if
                          xparams.write (((unsupported)).apply)
                          ((((xself).xconnection).xfeatures).xrequires_literal_defaults).if
                            seq
                              xdefault.write ((((xself).xprepare_default)).apply ((xnew_default)))
                              xparams.write (((unsupported)).apply)
                        xnew_db_params.write (((unsupported)).apply (((xnew_field).xdb_parameters)) (((xself).xconnection)))
                        (xdrop).if
                          ((xnew_field).xnull).if
                            xsql.write ((xself).xsql_alter_column_no_default_null)
                            xsql.write ((xself).xsql_alter_column_no_default)
                          xsql.write ((xself).xsql_alter_column_default)
                        (((unsupported)).apply ((((unsupported)).apply (((xsql).mod (((unsupported)).apply ("column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("type") ((((unsupported)).apply ((xnew_db_params)) ("type"))) ("default") ((xdefault))))) ((xparams)))))
                x_alter_column_type_sql.write
                  [xself xmodel xold_field xnew_field xnew_type]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xsql_alter_column_type).mod (((unsupported)).apply ("column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("type") ((xnew_type))))) ((((unsupported)).apply)))) ((((unsupported)).apply)))))
                x_alter_column_collation_sql.write
                  [xself xmodel xnew_field xnew_type xnew_collation]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).xsql_alter_column_collate).mod (((unsupported)).apply ("column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("type") ((xnew_type)) ("collation") (((xnew_collation).if (" ".add ((((xself).x_collate_sql)).apply ((xnew_collation)))) ""))))) ((((unsupported)).apply)))))
                x_alter_many_to_many.write
                  [xself xmodel xold_field xnew_field xstrict]
                    seq > @
                      seq
                        unsupported
                        ((((((xold_field).xremote_field).xthrough).x_meta).xdb_table).neq (((((xnew_field).xremote_field).xthrough).x_meta).xdb_table)).if
                          bogusForceDataize.write ((((xself).xalter_db_table)).apply ((((xold_field).xremote_field).xthrough)) ((((((xold_field).xremote_field).xthrough).x_meta).xdb_table)) ((((((xnew_field).xremote_field).xthrough).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xalter_field)).apply ((((xnew_field).xremote_field).xthrough)) ((((((((xold_field).xremote_field).xthrough).x_meta).xget_field)).apply (((((xold_field).xm2m_reverse_field_name)).apply)))) ((((((((xnew_field).xremote_field).xthrough).x_meta).xget_field)).apply (((((xnew_field).xm2m_reverse_field_name)).apply)))))
                        bogusForceDataize.write ((((xself).xalter_field)).apply ((((xnew_field).xremote_field).xthrough)) ((((((((xold_field).xremote_field).xthrough).x_meta).xget_field)).apply (((((xold_field).xm2m_field_name)).apply)))) ((((((((xnew_field).xremote_field).xthrough).x_meta).xget_field)).apply (((((xnew_field).xm2m_field_name)).apply)))))
                x_create_index_name.write
                  [xself xtable_name xcolumn_names xsuffix]
                    memory > xindex_name
                    memory > xmax_length
                    memory > xother_length
                    memory > xhash_suffix_part
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xtable_name)))) ((((xsplit_identifier)).apply ((xtable_name)))))
                        xhash_suffix_part.write ("%s%s".mod (((unsupported)).apply ((((unsupported)).apply ((xnames_digest)) ((xtable_name)) ((((unsupported)).apply ((xcolumn_names)))) (8))) ((xsuffix))))
                        xmax_length.write (((((((xself).xconnection).xops).xmax_name_length)).apply).or 200)
                        xindex_name.write ("%s_%s_%s".mod (((unsupported)).apply ((xtable_name)) (((("_".xjoin)).apply ((xcolumn_names)))) ((xhash_suffix_part))))
                        ((((xlen)).apply ((xindex_name))).leq (xmax_length)).if
                          (((unsupported)).apply ((xindex_name)))
                        ((((xlen)).apply ((xhash_suffix_part))).greater ((xmax_length).div 3)).if
                          xhash_suffix_part.write (((unsupported)).apply ((xhash_suffix_part)) ((((unsupported)).apply ((((unsupported)).apply ((xmax_length)) (3))))))
                        xother_length.write ((((unsupported)).apply (((xmax_length).sub (((xlen)).apply ((xhash_suffix_part))))) (2)).sub 1)
                        xindex_name.write ("%s_%s_%s".mod (((unsupported)).apply ((((unsupported)).apply ((xtable_name)) ((((unsupported)).apply ((xother_length)))))) ((((unsupported)).apply (((("_".xjoin)).apply ((xcolumn_names)))) ((((unsupported)).apply ((xother_length)))))) ((xhash_suffix_part))))
                        (((((unsupported)).apply ((xindex_name)) (0)).eq "_").or ((((((unsupported)).apply ((xindex_name)) (0)).xisdigit)).apply)).if
                          xindex_name.write ("D%s".mod (((unsupported)).apply ((xindex_name)) ((((unsupported)).apply ((1.neg))))))
                        (((unsupported)).apply ((xindex_name)))
                x_get_index_tablespace_sql.write
                  [xself xmodel xfields xdb_tablespace]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdb_tablespace)) ("None: is there a None literal in the EO language?")).if
                          (((((xlen)).apply ((xfields))).eq 1).and ((((unsupported)).apply ((xfields)) (0)).xdb_tablespace)).if
                            xdb_tablespace.write ((((unsupported)).apply ((xfields)) (0)).xdb_tablespace)
                            (((xmodel).x_meta).xdb_tablespace).if
                              xdb_tablespace.write (((xmodel).x_meta).xdb_tablespace)
                        (((unsupported)).apply ((xdb_tablespace)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((" ".add ((((((xself).xconnection).xops).xtablespace_sql)).apply ((xdb_tablespace))))))
                        (((unsupported)).apply (""))
                x_index_condition_sql.write
                  [xself xcondition]
                    seq > @
                      seq
                        (xcondition).if
                          (((unsupported)).apply ((" WHERE ".add (xcondition))))
                        (((unsupported)).apply (""))
                x_index_include_sql.write
                  [xself xmodel xcolumns]
                    seq > @
                      seq
                        (((xcolumns).not).or (((((xself).xconnection).xfeatures).xsupports_covering_indexes).not)).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xStatement)) (" INCLUDE (%(columns)s)") ((((xColumns)).apply ((((xmodel).x_meta).xdb_table)) ((xcolumns)) (((xself).xquote_name)))))))
                x_create_index_sql.write
                  [xself xmodel xfields xname xsuffix xusing xdb_tablespace xcol_suffixes xsql xopclasses xcondition xinclude xexpressions]
                    memory > xtable
                    memory > xcreate_index_name
                    memory > xtablespace_sql
                    memory > xcolumns
                    memory > xsql_create_index
                    memory > xcompiler
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfields.write ((xfields).or (((unsupported)).apply))
                        xexpressions.write ((xexpressions).or (((unsupported)).apply))
                        xcompiler.write (((unsupported)).apply (((((unsupported)).apply ((xQuery)) ((xmodel)) (FALSE)).xget_compiler)) (((xself).xconnection)))
                        xtablespace_sql.write (((unsupported)).apply (((xself).x_get_index_tablespace_sql)) ((xmodel)) ((xfields)) ((xdb_tablespace)))
                        xcolumns.write (((unsupported)).apply (((xfield).xcolumn)) ((xfield)) ((xfields)))
                        xsql_create_index.write ((xsql).or ((xself).xsql_create_index))
                        xtable.write (((xmodel).x_meta).xdb_table)
                        xcreate_index_name.write
                          []
                            memory > xname
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).if
                                  xname.write ((((xself).x_create_index_name)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                (((unsupported)).apply (((((xself).xquote_name)).apply ((xname)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xStatement)) ((xsql_create_index)) ((((xTable)).apply ((xtable)) (((xself).xquote_name)))) ((((xIndexName)).apply ((xtable)) ((xcolumns)) ((xsuffix)) ((xcreate_index_name)))) ((xusing)) (((xcolumns).if ((((xself).x_index_columns)).apply ((xtable)) ((xcolumns)) ((xcol_suffixes)) ((xopclasses))) (((xExpressions)).apply ((xtable)) ((xexpressions)) ((xcompiler)) (((xself).xquote_value))))) ((xtablespace_sql)) (((((xself).x_index_condition_sql)).apply ((xcondition)))) (((((xself).x_index_include_sql)).apply ((xmodel)) ((xinclude)))))))
                x_delete_index_sql.write
                  [xself xmodel xname xsql]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xStatement)) (((xsql).or ((xself).xsql_delete_index))) ((((xTable)).apply ((((xmodel).x_meta).xdb_table)) (((xself).xquote_name)))) (((((xself).xquote_name)).apply ((xname)))))))
                x_index_columns.write
                  [xself xtable xcolumns xcol_suffixes xopclasses]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xColumns)) ((xtable)) ((xcolumns)) (((xself).xquote_name)) ((xcol_suffixes)))))
                x_model_indexes_sql.write
                  [xself xmodel]
                    memory > xfields
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((((xmodel).x_meta).xmanaged).not).or (((xmodel).x_meta).xproxy)).or (((xmodel).x_meta).xswapped)).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        xoutput.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_fields)))
                          bogusForceDataize.write ((((xoutput).xextend)).apply (((((xself).x_field_indexes_sql)).apply ((xmodel)) ((xfield)))))
                        (((unsupported)).apply ((xfield_names)) ((((xmodel).x_meta).xindex_together)))
                          seq
                            xfields.write (((unsupported)).apply ((((((xmodel).x_meta).xget_field)).apply ((xfield)))) ((xfield)) ((xfield_names)))
                            bogusForceDataize.write ((((xoutput).xappend)).apply ((((unsupported)).apply (((xself).x_create_index_sql)) ((xmodel)) ((xfields)) ("_idx"))))
                        (((unsupported)).apply ((xindex)) ((((xmodel).x_meta).xindexes)))
                          ((((xindex).xcontains_expressions).not).or ((((xself).xconnection).xfeatures).xsupports_expression_indexes)).if
                            bogusForceDataize.write ((((xoutput).xappend)).apply (((((xindex).xcreate_sql)).apply ((xmodel)) ((xself)))))
                        (((unsupported)).apply ((xoutput)))
                x_field_indexes_sql.write
                  [xself xmodel xfield]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xoutput.write (((unsupported)).apply)
                        ((((xself).x_field_should_be_indexed)).apply ((xmodel)) ((xfield))).if
                          bogusForceDataize.write ((((xoutput).xappend)).apply ((((unsupported)).apply (((xself).x_create_index_sql)) ((xmodel)) ((((unsupported)).apply ((xfield)))))))
                        (((unsupported)).apply ((xoutput)))
                x_field_should_be_altered.write
                  [xself xold_field xnew_field]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xold_path)) ((xold_args)) ((xold_kwargs)))) (((((xold_field).xdeconstruct)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xnew_path)) ((xnew_args)) ((xnew_kwargs)))) (((((xnew_field).xdeconstruct)).apply)))
                        (((unsupported)).apply ((xattr)) (((xold_field).xnon_db_attrs)))
                          bogusForceDataize.write ((((xold_kwargs).xpop)).apply ((xattr)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xattr)) (((xnew_field).xnon_db_attrs)))
                          bogusForceDataize.write ((((xnew_kwargs).xpop)).apply ((xattr)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((((xself).xquote_name)).apply (((xold_field).xcolumn))).neq ((((xself).xquote_name)).apply (((xnew_field).xcolumn)))).or ((((unsupported)).apply ((xold_path)) ((xold_args)) ((xold_kwargs))).neq (((unsupported)).apply ((xnew_path)) ((xnew_args)) ((xnew_kwargs)))))))
                x_field_should_be_indexed.write
                  [xself xmodel xfield]
                    seq > @
                      (((unsupported)).apply ((((xfield).xdb_index).and (((xfield).xunique).not))))
                x_field_became_primary_key.write
                  [xself xold_field xnew_field]
                    seq > @
                      (((unsupported)).apply (((((xold_field).xprimary_key).not).and ((xnew_field).xprimary_key))))
                x_unique_should_be_added.write
                  [xself xold_field xnew_field]
                    seq > @
                      (((unsupported)).apply ((((((xnew_field).xprimary_key).not).and ((xnew_field).xunique)).and ((((xold_field).xunique).not).or ((xold_field).xprimary_key)))))
                x_rename_field_sql.write
                  [xself xtable xold_field xnew_field xnew_type]
                    seq > @
                      (((unsupported)).apply ((((xself).xsql_rename_column).mod (((unsupported)).apply ("table") (((((xself).xquote_name)).apply ((xtable)))) ("old_column") (((((xself).xquote_name)).apply (((xold_field).xcolumn)))) ("new_column") (((((xself).xquote_name)).apply (((xnew_field).xcolumn)))) ("type") ((xnew_type))))))
                x_create_fk_sql.write
                  [xself xmodel xfield xsuffix]
                    memory > xtable
                    memory > xto_table
                    memory > xto_column
                    memory > xname
                    memory > xcolumn
                    memory > xdeferrable
                    seq > @
                      seq
                        xtable.write (((xTable)).apply ((((xmodel).x_meta).xdb_table)) (((xself).xquote_name)))
                        xname.write ((((xself).x_fk_constraint_name)).apply ((xmodel)) ((xfield)) ((xsuffix)))
                        xcolumn.write (((xColumns)).apply ((((xmodel).x_meta).xdb_table)) ((((unsupported)).apply (((xfield).xcolumn)))) (((xself).xquote_name)))
                        xto_table.write (((xTable)).apply ((((((xfield).xtarget_field).xmodel).x_meta).xdb_table)) (((xself).xquote_name)))
                        xto_column.write (((xColumns)).apply ((((((xfield).xtarget_field).xmodel).x_meta).xdb_table)) ((((unsupported)).apply ((((xfield).xtarget_field).xcolumn)))) (((xself).xquote_name)))
                        xdeferrable.write ((((((xself).xconnection).xops).xdeferrable_sql)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xStatement)) (((xself).xsql_create_fk)) ((xtable)) ((xname)) ((xcolumn)) ((xto_table)) ((xto_column)) ((xdeferrable)))))
                x_fk_constraint_name.write
                  [xself xmodel xfield xsuffix]
                    memory > xcreate_fk_name
                    seq > @
                      seq
                        xcreate_fk_name.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xquote_name)).apply (((((xself).x_create_index_name)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))))
                        (((unsupported)).apply ((((xForeignKeyName)).apply ((((xmodel).x_meta).xdb_table)) ((((unsupported)).apply (((xfield).xcolumn)))) ((((unsupported)).apply ((((xsplit_identifier)).apply ((((((xfield).xtarget_field).xmodel).x_meta).xdb_table)))) (1))) ((((unsupported)).apply ((((xfield).xtarget_field).xcolumn)))) ((xsuffix)) ((xcreate_fk_name)))))
                x_delete_fk_sql.write
                  [xself xmodel xname]
                    seq > @
                      (((unsupported)).apply (((((xself).x_delete_constraint_sql)).apply (((xself).xsql_delete_fk)) ((xmodel)) ((xname)))))
                x_deferrable_constraint_sql.write
                  [xself xdeferrable]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdeferrable)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (""))
                        ((xdeferrable).eq ((xDeferrable).xDEFERRED)).if
                          (((unsupported)).apply (" DEFERRABLE INITIALLY DEFERRED"))
                        ((xdeferrable).eq ((xDeferrable).xIMMEDIATE)).if
                          (((unsupported)).apply (" DEFERRABLE INITIALLY IMMEDIATE"))
                x_unique_sql.write
                  [xself xmodel xfields xname xcondition xdeferrable xinclude xopclasses xexpressions]
                    memory > xsql
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        ((xdeferrable).and (((((xself).xconnection).xfeatures).xsupports_deferrable_unique_constraints).not)).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((((xcondition).or (xinclude)).or (xopclasses)).or (xexpressions)).if
                          seq
                            xsql.write (((unsupported)).apply (((xself).x_create_unique_sql)) ((xmodel)) ((xfields)) ((xname)) ((xcondition)) ((xinclude)) ((xopclasses)) ((xexpressions)))
                            (xsql).if
                              bogusForceDataize.write (((((xself).xdeferred_sql).xappend)).apply ((xsql)))
                            (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xconstraint.write (((xself).xsql_unique_constraint).mod (((unsupported)).apply ("columns") ((((", ".xjoin)).apply ((((unsupported)).apply (((((xself).xquote_name)).apply (((xfield).xcolumn)))) ((xfield)) ((xfields)))))) ("deferrable") (((((xself).x_deferrable_constraint_sql)).apply ((xdeferrable))))))
                        (((unsupported)).apply ((((xself).xsql_constraint).mod (((unsupported)).apply ("name") (((((xself).xquote_name)).apply ((xname)))) ("constraint") ((xconstraint))))))
                x_create_unique_sql.write
                  [xself xmodel xfields xname xcondition xdeferrable xinclude xopclasses xexpressions]
                    memory > xcompiler
                    memory > xtable
                    memory > xsql
                    memory > xcreate_unique_name
                    memory > xcolumns
                    seq > @
                      (((unsupported)).apply)
                        (((((xdeferrable).and (((((xself).xconnection).xfeatures).xsupports_deferrable_unique_constraints).not)).or ((xcondition).and (((((xself).xconnection).xfeatures).xsupports_partial_indexes).not))).or ((xinclude).and (((((xself).xconnection).xfeatures).xsupports_covering_indexes).not))).or ((xexpressions).and (((((xself).xconnection).xfeatures).xsupports_expression_indexes).not))).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xcreate_unique_name.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xquote_name)).apply (((((xself).x_create_index_name)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))))
                        xcompiler.write (((unsupported)).apply (((((unsupported)).apply ((xQuery)) ((xmodel)) (FALSE)).xget_compiler)) (((xself).xconnection)))
                        xtable.write (((xmodel).x_meta).xdb_table)
                        xcolumns.write (((unsupported)).apply (((xfield).xcolumn)) ((xfield)) ((xfields)))
                        (((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).if
                          xname.write (((xIndexName)).apply ((xtable)) ((xcolumns)) ("_uniq") ((xcreate_unique_name)))
                          xname.write ((((xself).xquote_name)).apply ((xname)))
                        ((((xcondition).or (xinclude)).or (xopclasses)).or (xexpressions)).if
                          xsql.write ((xself).xsql_create_unique_index)
                          xsql.write ((xself).xsql_create_unique)
                        (xcolumns).if
                          xcolumns.write (((unsupported)).apply (((xself).x_index_columns)) ((xtable)) ((xcolumns)) ((((unsupported)).apply)) ((xopclasses)))
                          xcolumns.write (((xExpressions)).apply ((xtable)) ((xexpressions)) ((xcompiler)) (((xself).xquote_value)))
                        (((unsupported)).apply ((((unsupported)).apply ((xStatement)) ((xsql)) ((((xTable)).apply ((xtable)) (((xself).xquote_name)))) ((xname)) ((xcolumns)) (((((xself).x_index_condition_sql)).apply ((xcondition)))) (((((xself).x_deferrable_constraint_sql)).apply ((xdeferrable)))) (((((xself).x_index_include_sql)).apply ((xmodel)) ((xinclude)))))))
                x_delete_unique_sql.write
                  [xself xmodel xname xcondition xdeferrable xinclude xopclasses xexpressions]
                    memory > xsql
                    seq > @
                      (((unsupported)).apply)
                        (((((xdeferrable).and (((((xself).xconnection).xfeatures).xsupports_deferrable_unique_constraints).not)).or ((xcondition).and (((((xself).xconnection).xfeatures).xsupports_partial_indexes).not))).or ((xinclude).and (((((xself).xconnection).xfeatures).xsupports_covering_indexes).not))).or ((xexpressions).and (((((xself).xconnection).xfeatures).xsupports_expression_indexes).not))).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((((xcondition).or (xinclude)).or (xopclasses)).or (xexpressions)).if
                          xsql.write ((xself).xsql_delete_index)
                          xsql.write ((xself).xsql_delete_unique)
                        (((unsupported)).apply (((((xself).x_delete_constraint_sql)).apply ((xsql)) ((xmodel)) ((xname)))))
                x_check_sql.write
                  [xself xname xcheck]
                    seq > @
                      (((unsupported)).apply ((((xself).xsql_constraint).mod (((unsupported)).apply ("name") (((((xself).xquote_name)).apply ((xname)))) ("constraint") ((((xself).xsql_check_constraint).mod (((unsupported)).apply ("check") ((xcheck)))))))))
                x_create_check_sql.write
                  [xself xmodel xname xcheck]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xStatement)) (((xself).xsql_create_check)) ((((xTable)).apply ((((xmodel).x_meta).xdb_table)) (((xself).xquote_name)))) (((((xself).xquote_name)).apply ((xname)))) ((xcheck)))))
                x_delete_check_sql.write
                  [xself xmodel xname]
                    seq > @
                      (((unsupported)).apply (((((xself).x_delete_constraint_sql)).apply (((xself).xsql_delete_check)) ((xmodel)) ((xname)))))
                x_delete_constraint_sql.write
                  [xself xtemplate xmodel xname]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xStatement)) ((xtemplate)) ((((xTable)).apply ((((xmodel).x_meta).xdb_table)) (((xself).xquote_name)))) (((((xself).xquote_name)).apply ((xname)))))))
                x_constraint_names.write
                  [xself xmodel xcolumn_names xunique xprimary_key xindex xforeign_key xcheck xtype_ xexclude]
                    memory > xresult
                    memory > xconstraints
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((xcolumn_names)) ("None: is there a None literal in the EO language?")).if
                          xcolumn_names.write (((unsupported)).apply (((((((xself).xconnection).xintrospection).xidentifier_converter)).apply ((xname)))) ((xname)) ((xcolumn_names)))
                        (((unsupported)).apply ((((((xself).xconnection).xcursor)).apply)) ((xcursor)))
                          xconstraints.write ((((((xself).xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((((xmodel).x_meta).xdb_table)))
                        xresult.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xinfodict)))) (((((xconstraints).xitems)).apply)))
                          ((((unsupported)).apply ((xcolumn_names)) ("None: is there a None literal in the EO language?")).or ((xcolumn_names).eq (((unsupported)).apply ((xinfodict)) ("columns")))).if
                            seq
                              ((((unsupported)).apply ((xunique)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("unique")).neq (xunique))).if
                                (((unsupported)).apply)
                              ((((unsupported)).apply ((xprimary_key)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("primary_key")).neq (xprimary_key))).if
                                (((unsupported)).apply)
                              ((((unsupported)).apply ((xindex)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("index")).neq (xindex))).if
                                (((unsupported)).apply)
                              ((((unsupported)).apply ((xcheck)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("check")).neq (xcheck))).if
                                (((unsupported)).apply)
                              ((((unsupported)).apply ((xforeign_key)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("foreign_key")).not)).if
                                (((unsupported)).apply)
                              ((((unsupported)).apply ((xtype_)) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xinfodict)) ("type")).neq (xtype_))).if
                                (((unsupported)).apply)
                              (((xexclude).not).or (((unsupported)).apply ((xname)) ((xexclude)))).if
                                bogusForceDataize.write ((((xresult).xappend)).apply ((xname)))
                        (((unsupported)).apply ((xresult)))
                x_delete_primary_key.write
                  [xself xmodel xstrict]
                    memory > xconstraint_names
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_names.write (((unsupported)).apply (((xself).x_constraint_names)) ((xmodel)) (TRUE))
                        ((xstrict).and ((((xlen)).apply ((xconstraint_names))).neq 1)).if
                          (((unsupported)).apply ((((xValueError)).apply (("Found wrong number (%s) of PK constraints for %s".mod (((unsupported)).apply ((((xlen)).apply ((xconstraint_names)))) ((((xmodel).x_meta).xdb_table))))))))
                        (((unsupported)).apply ((xconstraint_name)) ((xconstraint_names)))
                          bogusForceDataize.write ((((xself).xexecute)).apply (((((xself).x_delete_primary_key_sql)).apply ((xmodel)) ((xconstraint_name)))))
                x_create_primary_key_sql.write
                  [xself xmodel xfield]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xStatement)) (((xself).xsql_create_pk)) ((((xTable)).apply ((((xmodel).x_meta).xdb_table)) (((xself).xquote_name)))) (((((xself).xquote_name)).apply ((((unsupported)).apply (((xself).x_create_index_name)) ((((xmodel).x_meta).xdb_table)) ((((unsupported)).apply (((xfield).xcolumn)))) ("_pk"))))) ((((xColumns)).apply ((((xmodel).x_meta).xdb_table)) ((((unsupported)).apply (((xfield).xcolumn)))) (((xself).xquote_name)))))))
                x_delete_primary_key_sql.write
                  [xself xmodel xname]
                    seq > @
                      (((unsupported)).apply (((((xself).x_delete_constraint_sql)).apply (((xself).xsql_delete_pk)) ((xmodel)) ((xname)))))
                x_collate_sql.write
                  [xself xcollation]
                    seq > @
                      (((unsupported)).apply (("COLLATE ".add ((((xself).xquote_name)).apply ((xcollation))))))
                xremove_procedure.write
                  [xself xprocedure_name xparam_types]
                    memory > xsql
                    seq > @
                      (((unsupported)).apply)
                        xsql.write (((xself).xsql_delete_procedure).mod (((unsupported)).apply ("procedure") (((((xself).xquote_name)).apply ((xprocedure_name)))) ("param_types") ((((",".xjoin)).apply ((xparam_types))))))
                        bogusForceDataize.write ((((xself).xexecute)).apply ((xsql)))