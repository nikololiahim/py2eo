memory > xValidationError
memory > xMaxValueValidator
memory > xPasswordInput
memory > xContext
memory > xjinja2_tests
memory > xcopy
memory > xfield
memory > xTimeField
memory > xDataForm
memory > xforms
memory > xAttributeError
memory > xEmptyIdForLabelTextInput
memory > xFrameworkForm
memory > xDateAgeForm
memory > xCustomJSONField
memory > xdatetime
memory > xFormWithImage
memory > xQuestions
memory > xFakeTime
memory > xlist
memory > xMultiValueDictLike
memory > xexpected
memory > xQueryDict
memory > xTextInputWithoutMicrosec
memory > xTextarea
memory > xSelect
memory > xuuid
memory > xBooleanField
memory > xMusician
memory > xCustomCharField
memory > xSongForm
memory > xRegexValidator
memory > xEscapingForm
memory > xPerson
memory > xPedanticField
memory > xChoicesField
memory > xPhoneWidget
memory > xMultiWidget
memory > xCustomField
memory > xValueError
memory > xPhoneForm
memory > xstr
memory > xFileInput
memory > xerror
memory > xSimpleForm
memory > xFormsTestCase
memory > xInstrument
memory > xEventForm
memory > xMultiValueDict
memory > xNameField
memory > xErrorList
memory > xSongFormHidden
memory > xFileForm
memory > xFileField
memory > xChoiceField
memory > xbf
memory > xrange
memory > xTestFormInit
memory > xCustomRenderer
memory > xPerson2
memory > xOptionalPersonForm
memory > xPhoneField
memory > xSampleForm
memory > xform
memory > xCharField
memory > xMessageForm
memory > xCommentForm
memory > xCustomIdForLabelTextInput
memory > xKeyError
memory > xImageField
memory > xNullBooleanField
memory > xTestFormRemove
memory > xIntegerField
memory > xSimpleUploadedFile
memory > xEmailField
memory > xerror_list
memory > xMultiValueField
memory > xNON_FIELD_ERRORS
memory > xMultipleChoiceField
memory > xf
memory > xDateAgeField
memory > xCustomForm
memory > xPersonNew
memory > xDateTimeForm
memory > xrepr
memory > xTestFormMissing
memory > xHiddenInput
memory > xFavoriteForm
memory > xFloatField
memory > xhasattr
memory > xTestForm
memory > xget_default_renderer
memory > xi
memory > xNameForm
memory > xBeatleForm
memory > xCodeForm
memory > xSplitHiddenDateTimeWidget
memory > xsuper
memory > xCustomFrameworkForm
memory > xbool
memory > xDateTimeField
memory > xtuple
memory > xPersonFormFieldInitial
memory > xmark_safe
memory > xUserRegistration
memory > xPriceForm
memory > xHiddenInputWithoutMicrosec
memory > xRecursionError
memory > xsorted
memory > xTestFormParent
memory > xForm
memory > xMultipleHiddenInput
memory > xMyForm
memory > xargs
memory > xFormWithoutFile
memory > xBeatle
memory > xJSONForm
memory > xitem
memory > xTemplate
memory > xDateField
memory > xHiddenForm
memory > xSomeForm
memory > xe
memory > xCheckboxSelectMultiple
memory > xUserForm
memory > xSplitDateTimeField
memory > xContactForm
memory > xFirstNameForm
memory > xDjangoTemplates
memory > xjson
memory > xPersonForm
memory > xCustomErrorList
memory > xTextInput
memory > xkwargs
memory > xisinstance
memory > xfield_name
memory > xRadioSelect
memory > xlen
memory > xdict
memory > xboundfield
memory > xSimpleTestCase
memory > xFormWithFile
memory > xTypeError
memory > xSignupForm
[] > test_forms
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xfirst_name
        memory > xtest_multivalue_field_validation
        memory > xbirthday
        memory > xtest_empty_querydict_args
        memory > xtest_multiple_checkbox_render
        memory > xtest_forms_with_multiple_choice
        memory > xtest_multipart_encoded_form
        memory > xtest_specifying_labels
        memory > xlast_name
        memory > xtest_error_html_required_html_classes
        memory > xtest_boundfield_invalid_index
        memory > xtest_checkbox_auto_id
        memory > xtest_unbound_form
        memory > xtest_changed_data
        memory > xtest_use_required_attribute_false
        memory > xtest_form_with_iterable_boundfield
        memory > xtest_custom_empty_values
        memory > xtest_widget_output
        memory > xtest_hidden_widget
        memory > xtest_boundfield_slice
        memory > xtest_datetime_clean_disabled_callable_initial_bound_field
        memory > xtest_update_error_dict
        memory > xtest_attribute_instance
        memory > xtest_boundfield_initial_called_once
        memory > xtest_boundfield_label_tag_no_id
        memory > xtest_get_initial_for_field
        memory > xtest_legend_tag
        memory > xtest_validators_independence
        memory > xtest_various_boolean_values
        memory > xtest_default
        memory > xtest_error_dict_as_json_escape_html
        memory > xtest_multivalue_optional_subfields
        memory > xtest_auto_id_false
        memory > xtest_datetime_changed_data_callable_with_microseconds
        memory > xtest_hidden_data
        memory > xtest_form_html_attributes
        memory > xtest_datetime_clean_disabled_callable_initial_microseconds
        memory > xtest_forms_with_null_boolean
        memory > xcomposers
        memory > xtest_id_on_field
        memory > xtest_boundfield_widget_type
        memory > xtest_escaping
        memory > xtest_baseform_repr
        memory > xtest_subclassing_forms
        memory > xtest_initial_datetime_values
        memory > xtest_multivalue_initial_data
        memory > xtest_custom_boundfield
        memory > xtest_multiple_choice_checkbox
        memory > xgetlist
        memory > xtest_attribute_class
        memory > xtest_html_output_with_hidden_input_field_errors
        memory > xtest_help_text
        memory > xtest_use_custom_template
        memory > xtest_extracting_hidden_and_visible
        memory > xtest_error_list_class_has_one_class_specified
        memory > xtest_label_split_datetime_not_displayed
        memory > xtest_multiple_hidden
        memory > xtest_errorlist_override
        memory > xtest_kwarg_class
        memory > xtest_has_error
        memory > xtest_form
        memory > xtest_empty_dict
        memory > xtest_changing_cleaned_data_nothing_returned
        memory > xtest_label_suffix_override
        memory > xtest_field_named_data
        memory > xtest_forms_with_radio
        memory > xtest_accessing_clean
        memory > xtest_error_dict
        memory > xtest_error_list_with_hidden_field_errors_has_correct_class
        memory > xtest_cleaned_data_only_fields
        memory > xtest_forms_with_prefixes
        memory > xtest_boundfield_id_for_label
        memory > xtest_initial_data
        memory > xtest_form_with_disabled_fields
        memory > xtest_html_safe
        memory > xtest_cyclic_context_boundfield_render
        memory > xtest_templates_with_forms
        memory > xtest_auto_id_on_form_and_field
        memory > xtest_auto_id_true
        memory > xtest_label_has_required_css_class
        memory > xtest_boundfield_id_for_label_override_by_attrs
        memory > xtest_field_order
        memory > xtest_validating_multiple_fields
        memory > xtest_field_deep_copy_error_messages
        memory > xtest_forms_with_choices
        memory > xtest_multiple_choice_list_data
        memory > xtest_error_list_with_non_field_errors_has_correct_class
        memory > xtest_boundfield_label_tag_custom_widget_id_for_label
        memory > xtest_empty_permitted
        memory > xtest_iterate_radios
        memory > xtest_label_does_not_include_new_line
        memory > xtest_error_escaping
        memory > xtest_only_hidden_fields
        memory > xtest_unicode_values
        memory > xtest_boundfield_css_classes
        memory > xtest_empty_data_files_multi_value_dict
        memory > xtest_empty_permitted_and_use_required_attribute
        memory > xtest_kwarg_instance
        memory > xtest_error_list
        memory > xlanguage
        memory > xtest_filefield_with_fileinput_required
        memory > xtest_baseform_repr_dont_trigger_validation
        memory > xtest_help_text_html_safe
        memory > xtest_multivalue_deep_copy
        memory > xtest_label_attrs_not_localized
        memory > xtest_forms_with_file_fields
        memory > xtest_changing_cleaned_data_in_clean
        memory > xtest_boundfield_value_disabled_callable_initial
        memory > xtest_boundfield_bool
        memory > xtest_dynamic_initial_data
        memory > xtest_multivalue_optional_subfields_rendering
        memory > xtest_label_suffix
        memory > xtest_hidden_initial_gets_id
        memory > xtest_dynamic_construction
        memory > xtest_attribute_override
        memory > xname
        memory > xtest_explicit_field_order
        memory > xget_datetime_form_with_callable_initial
        memory > xtest_basic_processing_in_view
        memory > xtest_iterable_boundfield_select
        memory > xtest_iterate_checkboxes
        memory > xtest_optional_data
        memory > xtest_form_with_iterable_boundfield_id
        memory > xtest_boundfield_subwidget_id_for_label
        memory > xtest_boundfield_values
        memory > xtest_error_list_class_not_specified
        memory > xtest_form_with_noniterable_boundfield
        memory > xtest_boundfield_label_tag
        memory > xtest_class_prefix
        memory > xtest_callable_initial_data
        memory > xtest_boundfield_empty_label
        memory > xtest_filefield_initial_callable
        memory > xtest_use_required_attribute_true
        memory > xtest_auto_id
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xForm)))
              seq
                xname.write (((xCharField)).apply)
                xlanguage.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))) ((xRadioSelect)))
            (((unsupported)).apply ((xForm)))
              seq
                xfirst_name.write (((xCharField)).apply)
                xlast_name.write (((xCharField)).apply)
                xbirthday.write (((xDateField)).apply)
            (((unsupported)).apply ((xForm)))
              seq
                xfirst_name.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ((xTextInput)) ((((unsupported)).apply ("id") ("first_name_id"))))))
                xlast_name.write (((xCharField)).apply)
                xbirthday.write (((xDateField)).apply)
            (((unsupported)).apply ((xForm)))
              seq
                xname.write (((xCharField)).apply)
                xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))) ((xCheckboxSelectMultiple)))
            (((unsupported)).apply ((xdict)))
              xgetlist.write
                [xself xkey]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ((xkey)))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_form.write
                  [xself]
                    memory > xp
                    memory > xmsg
                    memory > xform_output
                    seq > @
                      seq
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("1940-10-9"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xp).xis_bound)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xp).xerrors)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xp).xerrors).xas_ul)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xp).xerrors).xas_text)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("last_name"))) ("Lennon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1940) (10) (9))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("first_name"))))) ("<input type=\"text\" name=\"first_name\" value=\"John\" id=\"id_first_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("last_name"))))) ("<input type=\"text\" name=\"last_name\" value=\"Lennon\" id=\"id_last_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("birthday"))))) ("<input type=\"text\" name=\"birthday\" value=\"1940-10-9\" id=\"id_birthday\" required>"))
                        xmsg.write "Key 'nonexistentfield' not found in 'Person'. Choices are: birthday, first_name, last_name."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ((xmsg)))))
                          (((unsupported)).apply ((xp)) ("nonexistentfield"))
                        xform_output.write (((unsupported)).apply)
                        (((unsupported)).apply ((xboundfield)) ((xp)))
                          bogusForceDataize.write ((((xform_output).xappend)).apply ((((xstr)).apply ((xboundfield)))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((("n".xjoin)).apply ((xform_output)))) ((((unsupported)).apply)))
                        xform_output.write (((unsupported)).apply)
                        (((unsupported)).apply ((xboundfield)) ((xp)))
                          bogusForceDataize.write ((((xform_output).xappend)).apply ((((unsupported)).apply (((xboundfield).xlabel)) (((xboundfield).xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xform_output)) ((((unsupported)).apply ((((unsupported)).apply ("First name") ("John"))) ((((unsupported)).apply ("Last name") ("Lennon"))) ((((unsupported)).apply ("Birthday") ("1940-10-9"))))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((xp)))) ((((unsupported)).apply)))
                xtest_empty_dict.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xPerson)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xp).xis_bound)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("first_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("last_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("birthday"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xcleaned_data)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((xp)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                xtest_empty_querydict_args.write
                  [xself]
                    memory > xfiles
                    memory > xp
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xQueryDict)).apply)
                        xfiles.write (((xQueryDict)).apply)
                        xp.write (((xPerson)).apply ((xdata)) ((xfiles)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xp).xdata)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xp).xfiles)) ((xfiles)))
                xtest_unbound_form.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xp).xis_bound)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((xp)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                xtest_unicode_values.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("u0160u0110u0106u017du0107u017eu0161u0111") ("birthday") ("1940-10-9"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ("<tr><th><label for=\"id_first_name\">First name:</label></th><td><input type=\"text\" name=\"first_name\" value=\"John\" id=\"id_first_name\" required></td></tr>n<tr><th><label for=\"id_last_name\">Last name:</label></th><td><input type=\"text\" name=\"last_name\" value=\"u0160u0110u0106u017du0107u017eu0161u0111\"id=\"id_last_name\" required></td></tr>n<tr><th><label for=\"id_birthday\">Birthday:</label></th><td><input type=\"text\" name=\"birthday\" value=\"1940-10-9\" id=\"id_birthday\" required></td></tr>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ("<li><label for=\"id_first_name\">First name:</label> <input type=\"text\" name=\"first_name\" value=\"John\" id=\"id_first_name\" required></li>n<li><label for=\"id_last_name\">Last name:</label> <input type=\"text\" name=\"last_name\" value=\"u0160u0110u0106u017du0107u017eu0161u0111\" id=\"id_last_name\" required></li>n<li><label for=\"id_birthday\">Birthday:</label> <input type=\"text\" name=\"birthday\" value=\"1940-10-9\" id=\"id_birthday\" required></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ("<p><label for=\"id_first_name\">First name:</label> <input type=\"text\" name=\"first_name\" value=\"John\" id=\"id_first_name\" required></p>n<p><label for=\"id_last_name\">Last name:</label> <input type=\"text\" name=\"last_name\" value=\"u0160u0110u0106u017du0107u017eu0161u0111\" id=\"id_last_name\" required></p>n<p><label for=\"id_birthday\">Birthday:</label> <input type=\"text\" name=\"birthday\" value=\"1940-10-9\" id=\"id_birthday\" required></p>"))
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("last_name") ("Lennon"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("first_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("birthday"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xerrors)) ((((unsupported)).apply ("birthday") ((((unsupported)).apply ("This field is required."))) ("first_name") ((((unsupported)).apply ("This field is required."))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xcleaned_data)) ((((unsupported)).apply ("last_name") ("Lennon"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xp)) ("first_name")).xerrors)) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((((unsupported)).apply ((xp)) ("first_name")).xerrors).xas_ul)).apply)) ("<ul class=\"errorlist\"><li>This field is required.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((unsupported)).apply ((xp)) ("first_name")).xerrors).xas_text)).apply)) ("* This field is required."))
                        xp.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("first_name"))))) ("<input type=\"text\" name=\"first_name\" id=\"id_first_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("last_name"))))) ("<input type=\"text\" name=\"last_name\" id=\"id_last_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("birthday"))))) ("<input type=\"text\" name=\"birthday\" id=\"id_birthday\" required>"))
                xtest_cleaned_data_only_fields.write
                  [xself]
                    memory > xp
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("1940-10-9") ("extra1") ("hello") ("extra2") ("hello"))
                        xp.write (((xPerson)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("last_name"))) ("Lennon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1940) (10) (9))))
                xtest_optional_data.write
                  [xself]
                    memory > xlast_name
                    memory > xbirth_date
                    memory > xf
                    memory > xfirst_name
                    memory > xdata
                    memory > xnick_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xnick_name.write (((unsupported)).apply ((xCharField)) (FALSE))
                        xdata.write (((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon"))
                        xf.write (((xOptionalPersonForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("nick_name"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("last_name"))) ("Lennon"))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirth_date.write (((unsupported)).apply ((xDateField)) (FALSE))
                        xdata.write (((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon"))
                        xf.write (((xOptionalPersonForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("birth_date"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("last_name"))) ("Lennon"))
                xtest_auto_id.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((xPerson)) ("%s_id"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                xtest_auto_id_true.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((xPerson)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_auto_id_false.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_id_on_field.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((xPersonNew)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_auto_id_on_form_and_field.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((xPersonNew)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_various_boolean_values.write
                  [xself]
                    memory > xemail
                    memory > xget_spam
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xemail.write (((xEmailField)).apply)
                            xget_spam.write (((xBooleanField)).apply)
                        xf.write (((unsupported)).apply ((xSignupForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("email"))))) ("<input type=\"email\" name=\"email\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((unsupported)).apply ((xSignupForm)) ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") (TRUE))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("email"))))) ("<input type=\"email\" name=\"email\" value=\"test@example.com\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input checked type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((unsupported)).apply ((xSignupForm)) ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") ("True"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input checked type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((unsupported)).apply ((xSignupForm)) ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") ("true"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input checked type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((unsupported)).apply ((xSignupForm)) ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") ("False"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((unsupported)).apply ((xSignupForm)) ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") ("false"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("get_spam"))))) ("<input type=\"checkbox\" name=\"get_spam\" required>"))
                        xf.write (((xSignupForm)).apply ((((unsupported)).apply ("email") ("test@example.com") ("get_spam") ("0"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xf).xcleaned_data).xget)).apply ("get_spam"))))
                xtest_widget_output.write
                  [xself]
                    memory > xmessage
                    memory > xsubject
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xsubject.write (((xCharField)).apply)
                            xmessage.write (((unsupported)).apply ((xCharField)) ((xTextarea)))
                        xf.write (((unsupported)).apply ((xContactForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("subject"))))) ("<input type=\"text\" name=\"subject\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("message"))))) ("<textarea name=\"message\" rows=\"10\" cols=\"40\" required></textarea>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("subject")).xas_textarea)).apply)) ("<textarea name=\"subject\" rows=\"10\" cols=\"40\" required></textarea>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("message")).xas_text)).apply)) ("<input type=\"text\" name=\"message\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("message")).xas_hidden)).apply)) ("<input type=\"hidden\" name=\"message\">"))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xsubject.write (((xCharField)).apply)
                            xmessage.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ((xTextarea)) ((((unsupported)).apply ("rows") (80) ("cols") (20))))))
                        xf.write (((unsupported)).apply ((xContactForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("message"))))) ("<textarea name=\"message\" rows=\"80\" cols=\"20\" required></textarea>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("message")).xas_text)).apply)) ("<input type=\"text\" name=\"message\" required>"))
                        xf.write (((unsupported)).apply ((xContactForm)) ((((unsupported)).apply ("subject") ("Hello") ("message") ("I love you."))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("subject")).xas_textarea)).apply)) ("<textarea rows=\"10\" cols=\"40\" name=\"subject\" required>Hello</textarea>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("message")).xas_text)).apply)) ("<input type=\"text\" name=\"message\" value=\"I love you.\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("message")).xas_hidden)).apply)) ("<input type=\"hidden\" name=\"message\" value=\"I love you.\">"))
                xtest_forms_with_choices.write
                  [xself]
                    memory > xname
                    memory > xlanguage
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xlanguage.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) ((((unsupported)).apply ("name") ("Django") ("language") ("P"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xlanguage.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("") ("------"))) ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xlanguage.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))) ((((unsupported)).apply ((xSelect)) ((((unsupported)).apply ("class") ("foo"))))))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) ((((unsupported)).apply ("name") ("Django") ("language") ("P"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xlanguage.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))) ((((unsupported)).apply ((xSelect)) ((((unsupported)).apply ((((unsupported)).apply ("R") ("Ruby"))) ((((unsupported)).apply ("P") ("Perl"))))) ((((unsupported)).apply ("class") ("foo"))))))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) ((((unsupported)).apply ("name") ("Django") ("language") ("P"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xlanguage.write (((xChoiceField)).apply)
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((unsupported)).apply (((xf).xfields)) ("language")).xchoices)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                xtest_forms_with_radio.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xFrameworkForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFrameworkForm)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("language"))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ((((unsupported)).apply)))
                xtest_form_with_iterable_boundfield.write
                  [xself]
                    memory > xname
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("john") ("John"))) ((((unsupported)).apply ("paul") ("Paul"))) ((((unsupported)).apply ("george") ("George"))) ((((unsupported)).apply ("ringo") ("Ringo"))))) ((xRadioSelect)))
                        xf.write (((unsupported)).apply ((xBeatleForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((("n".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xbf)))) ((xbf)) ((((unsupported)).apply ((xf)) ("name"))))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((("n".xjoin)).apply ((((unsupported)).apply (("<div>%s</div>".mod (xbf))) ((xbf)) ((((unsupported)).apply ((xf)) ("name"))))))) ((((unsupported)).apply)))
                xtest_form_with_iterable_boundfield_id.write
                  [xself]
                    memory > xname
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("john") ("John"))) ((((unsupported)).apply ("paul") ("Paul"))) ((((unsupported)).apply ("george") ("George"))) ((((unsupported)).apply ("ringo") ("Ringo"))))) ((xRadioSelect)))
                        xfields.write (((xlist)).apply ((((unsupported)).apply ((((xBeatleForm)).apply)) ("name"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xfields)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xfields)) (0)).xid_for_label)) ("id_name_0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xfields)) (0)).xchoice_label)) ("John"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xfields)) (0)).xtag)).apply)) ("<input type=\"radio\" name=\"name\" value=\"john\" id=\"id_name_0\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xfields)) (0))))) ("<label for=\"id_name_0\"><input type=\"radio\" name=\"name\" value=\"john\" id=\"id_name_0\" required> John</label>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xfields)) (1)).xid_for_label)) ("id_name_1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xfields)) (1)).xchoice_label)) ("Paul"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xfields)) (1)).xtag)).apply)) ("<input type=\"radio\" name=\"name\" value=\"paul\" id=\"id_name_1\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xfields)) (1))))) ("<label for=\"id_name_1\"><input type=\"radio\" name=\"name\" value=\"paul\" id=\"id_name_1\" required> Paul</label>"))
                xtest_iterable_boundfield_select.write
                  [xself]
                    memory > xname
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("john") ("John"))) ((((unsupported)).apply ("paul") ("Paul"))) ((((unsupported)).apply ("george") ("George"))) ((((unsupported)).apply ("ringo") ("Ringo"))))))
                        xfields.write (((xlist)).apply ((((unsupported)).apply ((((unsupported)).apply ((xBeatleForm)) (FALSE))) ("name"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xfields)))) (4))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((unsupported)).apply ((xfields)) (0)).xid_for_label)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xfields)) (0)).xchoice_label)) ("John"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xfields)) (0)).xtag)).apply)) ("<option value=\"john\">John</option>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xfields)) (0))))) ("<option value=\"john\">John</option>"))
                xtest_form_with_noniterable_boundfield.write
                  [xself]
                    memory > xname
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((xCharField)).apply)
                        xf.write (((unsupported)).apply ((xBeatleForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((("n".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xbf)))) ((xbf)) ((((unsupported)).apply ((xf)) ("name"))))))) ("<input type=\"text\" name=\"name\" required>"))
                xtest_boundfield_slice.write
                  [xself]
                    memory > xname
                    memory > xbf
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("john") ("John"))) ((((unsupported)).apply ("paul") ("Paul"))) ((((unsupported)).apply ("george") ("George"))) ((((unsupported)).apply ("ringo") ("Ringo"))))) ((xRadioSelect)))
                        xf.write (((xBeatleForm)).apply)
                        xbf.write (((unsupported)).apply ((xf)) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xstr)).apply ((xitem)))) ((xitem)) ((((unsupported)).apply ((xbf)) ((((unsupported)).apply (1))))))) ((((unsupported)).apply ((((xstr)).apply ((((unsupported)).apply ((xbf)) (1))))) ((((xstr)).apply ((((unsupported)).apply ((xbf)) (2))))) ((((xstr)).apply ((((unsupported)).apply ((xbf)) (3))))))))
                xtest_boundfield_invalid_index.write
                  [xself]
                    memory > xname
                    memory > xfield
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply)))
                        xfield.write (((unsupported)).apply ((((xTestForm)).apply)) ("name"))
                        xmsg.write "BoundField indices must be integers or slices, not str."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xfield)) ("foo"))
                xtest_boundfield_bool.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xbool)).apply ((((unsupported)).apply ((((xTestForm)).apply)) ("name"))))) (TRUE))
                xtest_forms_with_multiple_choice.write
                  [xself]
                    memory > xname
                    memory > xcomposers
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((xMultipleChoiceField)).apply)
                        xf.write (((unsupported)).apply ((xSongForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))))
                        xf.write (((unsupported)).apply ((xSongForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("Yesterday") ("composers") ((((unsupported)).apply ("P"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("name"))))) ("<input type=\"text\" name=\"name\" value=\"Yesterday\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                        xf.write (((xSongForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th><label for=\"id_name\">Name:</label></th><td><input type=\"text\" name=\"name\" required id=\"id_name\"></td></tr><tr><th><label for=\"id_composers\">Composers:</label></th><td><select name=\"composers\" required id=\"id_composers\" multiple><option value=\"J\">John Lennon</option><option value=\"P\">Paul McCartney</option></select></td></tr>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ("<li><label for=\"id_name\">Name:</label><input type=\"text\" name=\"name\" required id=\"id_name\"></li><li><label for=\"id_composers\">Composers:</label><select name=\"composers\" required id=\"id_composers\" multiple><option value=\"J\">John Lennon</option><option value=\"P\">Paul McCartney</option></select></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<p><label for=\"id_name\">Name:</label><input type=\"text\" name=\"name\" required id=\"id_name\"></p><p><label for=\"id_composers\">Composers:</label><select name=\"composers\" required id=\"id_composers\" multiple><option value=\"J\">John Lennon</option><option value=\"P\">Paul McCartney</option></select></p>"))
                xtest_multiple_checkbox_render.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xSongForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th><label for=\"id_name\">Name:</label></th><td><input type=\"text\" name=\"name\" required id=\"id_name\"></td></tr><tr><th><label>Composers:</label></th><td><div id=\"id_composers\"><div><label for=\"id_composers_0\"><input type=\"checkbox\" name=\"composers\" value=\"J\" id=\"id_composers_0\">John Lennon</label></div><div><label for=\"id_composers_1\"><input type=\"checkbox\" name=\"composers\" value=\"P\" id=\"id_composers_1\">Paul McCartney</label></div></div></td></tr>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ("<li><label for=\"id_name\">Name:</label><input type=\"text\" name=\"name\" required id=\"id_name\"></li><li><label>Composers:</label><div id=\"id_composers\"><div><label for=\"id_composers_0\"><input type=\"checkbox\" name=\"composers\" value=\"J\" id=\"id_composers_0\">John Lennon</label></div><div><label for=\"id_composers_1\"><input type=\"checkbox\" name=\"composers\" value=\"P\" id=\"id_composers_1\">Paul McCartney</label></div></div></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<p><label for=\"id_name\">Name:</label><input type=\"text\" name=\"name\" required id=\"id_name\"></p><p><label>Composers:</label><div id=\"id_composers\"><div><label for=\"id_composers_0\"><input type=\"checkbox\" name=\"composers\" value=\"J\" id=\"id_composers_0\">John Lennon</label></div><div><label for=\"id_composers_1\"><input type=\"checkbox\" name=\"composers\" value=\"P\" id=\"id_composers_1\">Paul McCartney</label></div></div></p>"))
                xtest_form_with_disabled_fields.write
                  [xself]
                    memory > xbirthday
                    memory > xdata
                    memory > xf2
                    memory > xf1
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xbirthday.write (((unsupported)).apply ((xDateField)) (TRUE))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xbirthday.write (((unsupported)).apply ((xDateField)) (TRUE) (((((xdatetime).xdate)).apply (1974) (8) (16))))
                        xf1.write (((unsupported)).apply ((xPersonForm)) ((((unsupported)).apply ("name") ("John Doe"))) ((((unsupported)).apply ("birthday") (((((xdatetime).xdate)).apply (1974) (8) (16))))))
                        xf2.write (((xPersonFormFieldInitial)).apply ((((unsupported)).apply ("name") ("John Doe"))))
                        (((unsupported)).apply ((xform)) ((((unsupported)).apply ((xf1)) ((xf2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("birthday") (((((xdatetime).xdate)).apply (1974) (8) (16))) ("name") ("John Doe"))))
                        xdata.write (((unsupported)).apply ("name") ("John Doe") ("birthday") ("1984-11-10"))
                        xf1.write (((unsupported)).apply ((xPersonForm)) ((xdata)) ((((unsupported)).apply ("birthday") (((((xdatetime).xdate)).apply (1974) (8) (16))))))
                        xf2.write (((xPersonFormFieldInitial)).apply ((xdata)))
                        (((unsupported)).apply ((xform)) ((((unsupported)).apply ((xf1)) ((xf2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("birthday") (((((xdatetime).xdate)).apply (1974) (8) (16))) ("name") ("John Doe"))))
                        xdata.write (((unsupported)).apply)
                        xf1.write (((unsupported)).apply ((xPersonForm)) ((xdata)) ((((unsupported)).apply ("birthday") (((((xdatetime).xdate)).apply (1974) (8) (16))))))
                        xf2.write (((xPersonFormFieldInitial)).apply ((xdata)))
                        (((unsupported)).apply ((xform)) ((((unsupported)).apply ((xf1)) ((xf2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xform)) ("birthday")).xvalue)).apply)) (((((xdatetime).xdate)).apply (1974) (8) (16))))
                xtest_hidden_data.write
                  [xself]
                    memory > xname
                    memory > xwhen
                    memory > xcomposers
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("Yesterday") ("composers") ((((unsupported)).apply ("P"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("composers")).xas_hidden)).apply)) ("<input type=\"hidden\" name=\"composers\" value=\"P\">"))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("From Me To You") ("composers") ((((unsupported)).apply ("P") ("J"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("composers")).xas_hidden)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          xwhen.write (((xSplitDateTimeField)).apply)
                        xf.write (((xMessageForm)).apply ((((unsupported)).apply ("when_0") ("1992-01-01") ("when_1") ("01:01"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("when"))))) ("<input type=\"text\" name=\"when_0\" value=\"1992-01-01\" id=\"id_when_0\" required><input type=\"text\" name=\"when_1\" value=\"01:01\" id=\"id_when_1\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("when")).xas_hidden)).apply)) ("<input type=\"hidden\" name=\"when_0\" value=\"1992-01-01\" id=\"id_when_0\"><input type=\"hidden\" name=\"when_1\" value=\"01:01\" id=\"id_when_1\">"))
                xtest_multiple_choice_checkbox.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xSongForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("composers") ((((unsupported)).apply ("J"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("composers") ((((unsupported)).apply ("J") ("P"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                xtest_checkbox_auto_id.write
                  [xself]
                    memory > xname
                    memory > xcomposers
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))) ((xCheckboxSelectMultiple)))
                        xf.write (((unsupported)).apply ((xSongForm)) ("%s_id"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xf)) ("composers"))))) ((((unsupported)).apply)))
                xtest_multiple_choice_list_data.write
                  [xself]
                    memory > xname
                    memory > xdata
                    memory > xcomposers
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))) ((xCheckboxSelectMultiple)))
                        xdata.write (((unsupported)).apply ("name") ("Yesterday") ("composers") ((((unsupported)).apply ("J") ("P"))))
                        xf.write (((xSongForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        xdata.write (((xQueryDict)).apply ("name=Yesterday&composers=J&composers=P"))
                        xf.write (((xSongForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        xdata.write (((xMultiValueDict)).apply ((((unsupported)).apply ("name") ((((unsupported)).apply ("Yesterday"))) ("composers") ((((unsupported)).apply ("J") ("P"))))))
                        xf.write (((xSongForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        xf.write (((xSongForm)).apply ((((xMultiValueDictLike)).apply ((((unsupported)).apply ("name") ("Yesterday") ("composers") ("J"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("composers"))) ((((unsupported)).apply ("J"))))
                xtest_multiple_hidden.write
                  [xself]
                    memory > xname
                    memory > xcomposers
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))) ((xCheckboxSelectMultiple)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xcomposers.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John Lennon"))) ((((unsupported)).apply ("P") ("Paul McCartney"))))) ((xMultipleHiddenInput)))
                        xf.write (((unsupported)).apply ((xSongFormHidden)) ((((xMultiValueDict)).apply ((((unsupported)).apply ("name") ((((unsupported)).apply ("Yesterday"))) ("composers") ((((unsupported)).apply ("J") ("P"))))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("Yesterday"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("composers"))) ((((unsupported)).apply ("This field is required."))))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("Yesterday") ("composers") ((((unsupported)).apply ("J"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("composers"))) ((((unsupported)).apply ("J"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("name"))) ("Yesterday"))
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("name") ("Yesterday") ("composers") ((((unsupported)).apply ("J") ("P"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("composers"))) ((((unsupported)).apply ("J") ("P"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("name"))) ("Yesterday"))
                        xf.write (((xSongForm)).apply ((((xMultiValueDictLike)).apply ((((unsupported)).apply ("name") ("Yesterday") ("composers") ("J"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("composers"))) ((((unsupported)).apply ("J"))))
                xtest_escaping.write
                  [xself]
                    memory > xclean_special_safe_name
                    memory > xclean_special_name
                    memory > xf
                    memory > xspecial_safe_name
                    memory > xspecial_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xspecial_name.write (((unsupported)).apply ((xCharField)) ("<em>Special</em> Field"))
                            xspecial_safe_name.write (((unsupported)).apply ((xCharField)) ((((xmark_safe)).apply ("<em>Special</em> Field"))))
                            xclean_special_name.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xValidationError)).apply (("Something's wrong with '%s'".mod (((unsupported)).apply (((xself).xcleaned_data)) ("special_name")))))))
                            xclean_special_safe_name.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xValidationError)).apply ((((xmark_safe)).apply (("'<b>%s</b>' is a safe string".mod (((unsupported)).apply (((xself).xcleaned_data)) ("special_safe_name")))))))))
                        xf.write (((unsupported)).apply ((xEscapingForm)) ((((unsupported)).apply ("special_name") ("Nothing to escape") ("special_safe_name") ("Nothing to escape"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xEscapingForm)) ((((unsupported)).apply ("special_name") ("Should escape < & > and <script>alert('xss')</script>") ("special_safe_name") ("<i>Do not escape</i>"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td><ul class=\"errorlist\"><li>Something&#x27;s wrong with &#x27;Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&#x27;</li></ul><input type=\"text\" name=\"special_name\" value=\"Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;\" required></td></tr><tr><th><em>Special</em> Field:</th><td><ul class=\"errorlist\"><li>'<b><i>Do not escape</i></b>' is a safe string</li></ul><input type=\"text\" name=\"special_safe_name\" value=\"&lt;i&gt;Do not escape&lt;/i&gt;\" required></td></tr>"))
                xtest_validating_multiple_fields.write
                  [xself]
                    memory > xclean
                    memory > xpassword2
                    memory > xclean_password2
                    memory > xf
                    memory > xusername
                    memory > xpassword1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean_password2.write
                              [xself]
                                seq > @
                                  seq
                                    (((((((xself).xcleaned_data).xget)).apply ("password1")).and (((((xself).xcleaned_data).xget)).apply ("password2"))).and ((((unsupported)).apply (((xself).xcleaned_data)) ("password1")).neq (((unsupported)).apply (((xself).xcleaned_data)) ("password2")))).if
                                      (((unsupported)).apply ((((xValidationError)).apply ("Please make sure your passwords match."))))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xcleaned_data)) ("password2"))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("username"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password1"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password2"))) ((((unsupported)).apply ("This field is required."))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("foo") ("password2") ("bar"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password2"))) ((((unsupported)).apply ("Please make sure your passwords match."))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("foo") ("password2") ("foo"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("username"))) ("adrian"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("password1"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("password2"))) ("foo"))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                memory > xerrors
                                seq > @
                                  seq
                                    (((((((xself).xcleaned_data).xget)).apply ("password1")).and (((((xself).xcleaned_data).xget)).apply ("password2"))).and ((((unsupported)).apply (((xself).xcleaned_data)) ("password1")).neq (((unsupported)).apply (((xself).xcleaned_data)) ("password2")))).if
                                      (((unsupported)).apply ((((xValidationError)).apply ("Please make sure your passwords match."))))
                                    xerrors.write (((unsupported)).apply)
                                    ((((((xself).xcleaned_data).xget)).apply ("password1")).eq "FORBIDDEN_VALUE").if
                                      (((unsupported)).apply ((((unsupported)).apply ((xerrors)) ("password1"))) ("Forbidden value."))
                                    ((((((xself).xcleaned_data).xget)).apply ("password2")).eq "FORBIDDEN_VALUE").if
                                      (((unsupported)).apply ((((unsupported)).apply ((xerrors)) ("password2"))) ((((unsupported)).apply ("Forbidden value."))))
                                    (xerrors).if
                                      (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
                                    ((((((xself).xcleaned_data).xget)).apply ("password1")).eq "FORBIDDEN_VALUE2").if
                                      seq
                                        bogusForceDataize.write ((((xself).xadd_error)).apply ("None: is there a None literal in the EO language?") ("Non-field error 1."))
                                        bogusForceDataize.write ((((xself).xadd_error)).apply ("password1") ("Forbidden value 2."))
                                    ((((((xself).xcleaned_data).xget)).apply ("password2")).eq "FORBIDDEN_VALUE2").if
                                      seq
                                        bogusForceDataize.write ((((xself).xadd_error)).apply ("password2") ("Forbidden value 2."))
                                        (((unsupported)).apply ((((xValidationError)).apply ("Non-field error 2."))))
                                    (((unsupported)).apply (((xself).xcleaned_data)))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("username"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password1"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password2"))) ((((unsupported)).apply ("This field is required."))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("foo") ("password2") ("bar"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("__all__"))) ((((unsupported)).apply ("Please make sure your passwords match."))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("foo") ("password2") ("foo"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("username"))) ("adrian"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("password1"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("password2"))) ("foo"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("FORBIDDEN_VALUE") ("password2") ("FORBIDDEN_VALUE"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password1"))) ((((unsupported)).apply ("Forbidden value."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password2"))) ((((unsupported)).apply ("Forbidden value."))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("adrian") ("password1") ("FORBIDDEN_VALUE2") ("password2") ("FORBIDDEN_VALUE2"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("__all__"))) ((((unsupported)).apply ("Non-field error 1.") ("Non-field error 2."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password1"))) ((((unsupported)).apply ("Forbidden value 2."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xerrors)) ("password2"))) ((((unsupported)).apply ("Forbidden value 2."))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("has no field named"))))
                          bogusForceDataize.write ((((xf).xadd_error)).apply ("missing_field") ("Some error."))
                xtest_update_error_dict.write
                  [xself]
                    memory > xcode
                    memory > xform
                    memory > xclean
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xcode.write (((unsupported)).apply ((xCharField)) (10))
                            xclean.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((xValidationError)))
                                      (((unsupported)).apply ((((xValidationError)).apply ((((unsupported)).apply ("code") ((((unsupported)).apply ((((xValidationError)).apply ("Code error 1."))))))))))
                                      (((unsupported)).apply (((xself).x_errors)) (((((xe).xupdate_error_dict)).apply (((xself).x_errors)))))
                                    (((unsupported)).apply ((xValidationError)))
                                      (((unsupported)).apply ((((xValidationError)).apply ((((unsupported)).apply ("code") ((((unsupported)).apply ((((xValidationError)).apply ("Code error 2."))))))))))
                                      (((unsupported)).apply (((xself).x_errors)) (((((xe).xupdate_error_dict)).apply (((xself).x_errors)))))
                                    (((unsupported)).apply ((xValidationError)))
                                      (((unsupported)).apply ((((xValidationError)).apply ((((unsupported)).apply ("code") (((((xforms).xErrorList)).apply ((((unsupported)).apply ("Code error 3."))))))))))
                                      (((unsupported)).apply (((xself).x_errors)) (((((xe).xupdate_error_dict)).apply (((xself).x_errors)))))
                                    (((unsupported)).apply ((xValidationError)))
                                      (((unsupported)).apply ((((xValidationError)).apply ("Non-field error 1."))))
                                      (((unsupported)).apply (((xself).x_errors)) (((((xe).xupdate_error_dict)).apply (((xself).x_errors)))))
                                    (((unsupported)).apply ((xValidationError)))
                                      (((unsupported)).apply ((((xValidationError)).apply ((((unsupported)).apply ((((xValidationError)).apply ("Non-field error 2."))))))))
                                      (((unsupported)).apply (((xself).x_errors)) (((((xe).xupdate_error_dict)).apply (((xself).x_errors)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xerror_list)))) ((((((xself).x_errors).xitems)).apply)))
                                      ((((xisinstance)).apply ((xerror_list)) (((xself).xerror_class))).not).if
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_errors)) ((xfield)))) (((((xself).xerror_class)).apply ((xerror_list)))))
                        xform.write (((xCodeForm)).apply ((((unsupported)).apply ("code") ("hello"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xform).x_errors)) (((xforms).xErrorDict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply (((xform).xerrors)))) ((((unsupported)).apply ("code") ((((unsupported)).apply ("Code error 1.") ("Code error 2.") ("Code error 3."))) ((xNON_FIELD_ERRORS)) ((((unsupported)).apply ("Non-field error 1.") ("Non-field error 2."))))))
                xtest_has_error.write
                  [xself]
                    memory > xclean
                    memory > xpassword2
                    memory > xf
                    memory > xusername
                    memory > xpassword1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)) (5))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                seq > @
                                  (((((((xself).xcleaned_data).xget)).apply ("password1")).and (((((xself).xcleaned_data).xget)).apply ("password2"))).and ((((unsupported)).apply (((xself).xcleaned_data)) ("password1")).neq (((unsupported)).apply (((xself).xcleaned_data)) ("password2")))).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ("Please make sure your passwords match.") ("password_mismatch"))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ("password1"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ("password1") ("required"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password1") ("anything"))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("password1") ("Hi") ("password2") ("Hi"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ("password1"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ("password1") ("min_length"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password1") ("anything"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password2"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password2") ("anything"))))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("password1") ("Bonjour") ("password2") ("Hello"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password1"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ("password1") ("required"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ((xNON_FIELD_ERRORS)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xhas_error)).apply ((xNON_FIELD_ERRORS)) ("password_mismatch"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xhas_error)).apply ((xNON_FIELD_ERRORS)) ("anything"))))
                xtest_html_output_with_hidden_input_field_errors.write
                  [xself]
                    memory > xclean
                    memory > xf
                    memory > xerror_dict
                    memory > xhidden_input
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xhidden_input.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xclean.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xself).xadd_error)).apply ("None: is there a None literal in the EO language?") ("Form error"))
                        xf.write (((unsupported)).apply ((xTestForm)) ((((unsupported)).apply)))
                        xerror_dict.write (((unsupported)).apply ("hidden_input") ((((unsupported)).apply ("This field is required."))) ("__all__") ((((unsupported)).apply ("Form error"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((xerror_dict)))
                        bogusForceDataize.write ((((xf).xas_table)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((xerror_dict)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><td colspan=\"2\"><ul class=\"errorlist nonfield\"><li>Form error</li><li>(Hidden field hidden_input) This field is required.</li></ul><input type=\"hidden\" name=\"hidden_input\" id=\"id_hidden_input\"></td></tr>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ("<li><ul class=\"errorlist nonfield\"><li>Form error</li><li>(Hidden field hidden_input) This field is required.</li></ul><input type=\"hidden\" name=\"hidden_input\" id=\"id_hidden_input\"></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<ul class=\"errorlist nonfield\"><li>Form error</li><li>(Hidden field hidden_input) This field is required.</li></ul><p><input type=\"hidden\" name=\"hidden_input\" id=\"id_hidden_input\"></p>"))
                xtest_dynamic_construction.write
                  [xself]
                    memory > xlast_name
                    memory > xdefault_field_2
                    memory > xfield_list
                    memory > xmy_form
                    memory > xp
                    memory > xf
                    memory > xgender
                    memory > xfirst_name
                    memory > x__init__
                    memory > xdefault_field_1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xfields)) ("birthday"))) ((((xDateField)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          x__init__.write
                            [xself xdata xauto_id xfield_list]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xForm).x__init__)) ((xself)) ((xdata)) ((xauto_id)))
                                  (((unsupported)).apply ((xfield)) ((xfield_list)))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xfields)) ((((unsupported)).apply ((xfield)) (0))))) ((((unsupported)).apply ((xfield)) (1))))
                        xfield_list.write (((unsupported)).apply ((((unsupported)).apply ("field1") ((((xCharField)).apply)))) ((((unsupported)).apply ("field2") ((((xCharField)).apply)))))
                        xmy_form.write (((unsupported)).apply ((xMyForm)) ((xfield_list)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xmy_form).xas_table)).apply)) ((((unsupported)).apply)))
                        xfield_list.write (((unsupported)).apply ((((unsupported)).apply ("field3") ((((xCharField)).apply)))) ((((unsupported)).apply ("field4") ((((xCharField)).apply)))))
                        xmy_form.write (((unsupported)).apply ((xMyForm)) ((xfield_list)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xmy_form).xas_table)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xdefault_field_1.write (((xCharField)).apply)
                            xdefault_field_2.write (((xCharField)).apply)
                            x__init__.write
                              [xself xdata xauto_id xfield_list]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xForm).x__init__)) ((xself)) ((xdata)) ((xauto_id)))
                                    (((unsupported)).apply ((xfield)) ((xfield_list)))
                                      (((unsupported)).apply ((((unsupported)).apply (((xself).xfields)) ((((unsupported)).apply ((xfield)) (0))))) ((((unsupported)).apply ((xfield)) (1))))
                        xfield_list.write (((unsupported)).apply ((((unsupported)).apply ("field1") ((((xCharField)).apply)))) ((((unsupported)).apply ("field2") ((((xCharField)).apply)))))
                        xmy_form.write (((unsupported)).apply ((xMyForm)) ((xfield_list)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xmy_form).xas_table)).apply)) ((((unsupported)).apply)))
                        xfield_list.write (((unsupported)).apply ((((unsupported)).apply ("field3") ((((xCharField)).apply)))) ((((unsupported)).apply ("field4") ((((xCharField)).apply)))))
                        xmy_form.write (((unsupported)).apply ((xMyForm)) ((xfield_list)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xmy_form).xas_table)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((unsupported)).apply ((xCharField)) (FALSE))
                            xlast_name.write (((unsupported)).apply ((xCharField)) (FALSE))
                            x__init__.write
                              [xself xnames_required]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                    (xnames_required).if
                                      seq
                                        (((unsupported)).apply (((((unsupported)).apply (((xself).xfields)) ("first_name")).xrequired)) (TRUE))
                                        (((unsupported)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xself).xfields)) ("first_name")).xwidget).xattrs)) ("class"))) ("required"))
                                        (((unsupported)).apply (((((unsupported)).apply (((xself).xfields)) ("last_name")).xrequired)) (TRUE))
                                        (((unsupported)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xself).xfields)) ("last_name")).xwidget).xattrs)) ("class"))) ("required"))
                        xf.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xrequired)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xrequired)) ((((unsupported)).apply (FALSE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xf)) ("first_name")).xfield).xwidget).xattrs)) (((((((unsupported)).apply ((xf)) ("last_name")).xfield).xwidget).xattrs)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xf.write (((unsupported)).apply ((xPerson)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xrequired)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xrequired)) ((((unsupported)).apply (TRUE) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xf)) ("first_name")).xfield).xwidget).xattrs)) (((((((unsupported)).apply ((xf)) ("last_name")).xfield).xwidget).xattrs)) ((((unsupported)).apply ((((unsupported)).apply ("class") ("reuired"))) ((((unsupported)).apply ("class") ("required"))))))
                        xf.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xrequired)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xrequired)) ((((unsupported)).apply (FALSE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xf)) ("first_name")).xfield).xwidget).xattrs)) (((((((unsupported)).apply ((xf)) ("last_name")).xfield).xwidget).xattrs)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((unsupported)).apply ((xCharField)) (30))
                            xlast_name.write (((unsupported)).apply ((xCharField)) (30))
                            x__init__.write
                              [xself xname_max_length]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                    (xname_max_length).if
                                      seq
                                        (((unsupported)).apply (((((unsupported)).apply (((xself).xfields)) ("first_name")).xmax_length)) ((xname_max_length)))
                                        (((unsupported)).apply (((((unsupported)).apply (((xself).xfields)) ("last_name")).xmax_length)) ((xname_max_length)))
                        xf.write (((unsupported)).apply ((xPerson)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xmax_length)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xmax_length)) ((((unsupported)).apply (30) (30))))
                        xf.write (((unsupported)).apply ((xPerson)) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xmax_length)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xmax_length)) ((((unsupported)).apply (20) (20))))
                        xf.write (((unsupported)).apply ((xPerson)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("first_name")).xfield).xmax_length)) ((((((unsupported)).apply ((xf)) ("last_name")).xfield).xmax_length)) ((((unsupported)).apply (30) (30))))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((unsupported)).apply ((xCharField)) (FALSE))
                            xlast_name.write (((unsupported)).apply ((xCharField)) (FALSE))
                            xgender.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("Female"))) ((((unsupported)).apply ("m") ("Male"))))))
                            x__init__.write
                              [xself xallow_unspec_gender]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                    (xallow_unspec_gender).if
                                      (((unsupported)).apply (((((unsupported)).apply (((xself).xfields)) ("gender")).xchoices)) ((((unsupported)).apply ((((unsupported)).apply ("u") ("Unspecified"))))))
                        xf.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("gender")).xfield).xchoices)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("Female"))) ((((unsupported)).apply ("m") ("Male"))))))
                        xf.write (((unsupported)).apply ((xPerson)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("gender")).xfield).xchoices)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("Female"))) ((((unsupported)).apply ("m") ("Male"))) ((((unsupported)).apply ("u") ("Unspecified"))))))
                        xf.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xf)) ("gender")).xfield).xchoices)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("Female"))) ((((unsupported)).apply ("m") ("Male"))))))
                xtest_validators_independence.write
                  [xself]
                    memory > xf2
                    memory > xf1
                    memory > xmyfield
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          xmyfield.write (((unsupported)).apply ((xCharField)) (25))
                        xf1.write (((xMyForm)).apply)
                        xf2.write (((xMyForm)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xf1).xfields)) ("myfield")).xvalidators)) (0))) ((((xMaxValueValidator)).apply (12))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((xf1).xfields)) ("myfield")).xvalidators)) (0))) ((((unsupported)).apply (((((unsupported)).apply (((xf2).xfields)) ("myfield")).xvalidators)) (0))))
                xtest_hidden_widget.write
                  [xself]
                    memory > xp
                    memory > xfirst_name
                    memory > xfoo
                    memory > xbirthday
                    memory > xlast_name
                    memory > xhidden_text
                    memory > xbar
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xhidden_text.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xbirthday.write (((xDateField)).apply)
                        xp.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("1940-10-9"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfoo.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xbar.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                        xp.write (((unsupported)).apply ((xTestForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ("<input type=\"hidden\" name=\"foo\"><input type=\"hidden\" name=\"bar\">"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ("<input type=\"hidden\" name=\"foo\"><input type=\"hidden\" name=\"bar\">"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ("<input type=\"hidden\" name=\"foo\"><input type=\"hidden\" name=\"bar\">"))
                xtest_field_order.write
                  [xself]
                    memory > xfield12
                    memory > xfield9
                    memory > xfield5
                    memory > xfield2
                    memory > xp
                    memory > xfield10
                    memory > xfield7
                    memory > xfield14
                    memory > xfield6
                    memory > xfield11
                    memory > xfield1
                    memory > xfield3
                    memory > xfield8
                    memory > xfield13
                    memory > xfield4
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfield1.write (((xCharField)).apply)
                            xfield2.write (((xCharField)).apply)
                            xfield3.write (((xCharField)).apply)
                            xfield4.write (((xCharField)).apply)
                            xfield5.write (((xCharField)).apply)
                            xfield6.write (((xCharField)).apply)
                            xfield7.write (((xCharField)).apply)
                            xfield8.write (((xCharField)).apply)
                            xfield9.write (((xCharField)).apply)
                            xfield10.write (((xCharField)).apply)
                            xfield11.write (((xCharField)).apply)
                            xfield12.write (((xCharField)).apply)
                            xfield13.write (((xCharField)).apply)
                            xfield14.write (((xCharField)).apply)
                        xp.write (((unsupported)).apply ((xTestForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) (((("".xjoin)).apply ((((unsupported)).apply ("<tr><th>Field{i}:</th><td><input type=\"text\" name=\"field{i}\" required></td></tr>") ((xi)) ((((xrange)).apply (1) (15))))))))
                xtest_explicit_field_order.write
                  [xself]
                    memory > xfield5
                    memory > xfield2
                    memory > xfield_order
                    memory > xfield3
                    memory > xfield4
                    memory > xp
                    memory > xorder
                    memory > xfield1
                    memory > x__init__
                    memory > xfield6
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfield1.write (((xCharField)).apply)
                            xfield2.write (((xCharField)).apply)
                            xfield4.write (((xCharField)).apply)
                            xfield5.write (((xCharField)).apply)
                            xfield6.write (((xCharField)).apply)
                            xfield_order.write (((unsupported)).apply ("field6") ("field5") ("field4") ("field2") ("field1"))
                        (((unsupported)).apply ((xTestFormParent)))
                          seq
                            xfield3.write (((xCharField)).apply)
                            xfield_order.write (((unsupported)).apply ("field2") ("field4") ("field3") ("field5") ("field6"))
                        (((unsupported)).apply ((xTestForm)))
                          xfield1.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xTestForm)))
                          seq
                            xfield_order.write (((unsupported)).apply ("field2") ("field4") ("field3") ("field5") ("field6") ("field1"))
                            xfield1.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xTestFormParent)))
                          seq
                            xfield3.write (((xCharField)).apply)
                            xfield_order.write "None: is there a None literal in the EO language?"
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                                    (((unsupported)).apply (((xself).xorder_fields)) (((xTestForm).xfield_order)))
                        xp.write (((xTestFormParent)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) (((xTestFormParent).xfield_order)))
                        xp.write (((xTestFormRemove)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) (((xTestForm).xfield_order)))
                        xp.write (((xTestFormMissing)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) (((xTestForm).xfield_order)))
                        xp.write (((xTestForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) (((xTestFormMissing).xfield_order)))
                        xp.write (((xTestFormInit)).apply)
                        xorder.write (((unsupported)).apply ((((unsupported)).apply (((xTestForm).xfield_order)))) ("field1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) ((xorder)))
                        (((unsupported)).apply (((xTestForm).xfield_order)) ((((unsupported)).apply ("unknown"))))
                        xp.write (((xTestForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xp).xfields)))) ((((unsupported)).apply ("field1") ("field2") ("field4") ("field5") ("field6") ("field3"))))
                xtest_form_html_attributes.write
                  [xself]
                    memory > xpassword
                    memory > xp
                    memory > xrealname
                    memory > xusername
                    memory > xaddress
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) (10) ((xPasswordInput)))
                            xrealname.write (((unsupported)).apply ((xCharField)) (10) ((xTextInput)))
                            xaddress.write (((xCharField)).apply)
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ((((unsupported)).apply ((xTextInput)) ((((unsupported)).apply ("maxlength") (20))))))
                            xpassword.write (((unsupported)).apply ((xCharField)) (10) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_specifying_labels.write
                  [xself]
                    memory > xq3
                    memory > xpassword2
                    memory > xpassword
                    memory > xp
                    memory > xusername
                    memory > xq1
                    memory > xq5
                    memory > xq4
                    memory > xpassword1
                    memory > xq2
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("Your username"))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)) ("Contraseña (de nuevo)"))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xq1.write (((unsupported)).apply ((xCharField)) ("The first question"))
                            xq2.write (((unsupported)).apply ((xCharField)) ("What is your name?"))
                            xq3.write (((unsupported)).apply ((xCharField)) ("The answer to life is:"))
                            xq4.write (((unsupported)).apply ((xCharField)) ("Answer this question!"))
                            xq5.write (((unsupported)).apply ((xCharField)) ("The last question. Period."))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xQuestions)) (FALSE)).xas_p)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((xQuestions)).apply).xas_p)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) (""))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("None: is there a None literal in the EO language?"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_label_suffix.write
                  [xself]
                    memory > xcolor
                    memory > xanswer
                    memory > xf
                    memory > xanimal
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xcolor.write (((unsupported)).apply ((xCharField)) ("Favorite color?"))
                            xanimal.write (((unsupported)).apply ((xCharField)) ("Favorite animal"))
                            xanswer.write (((unsupported)).apply ((xCharField)) ("Secret answer") (" ="))
                        xf.write (((unsupported)).apply ((xFavoriteForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFavoriteForm)) (FALSE) ("?"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFavoriteForm)) (FALSE) (""))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ((((unsupported)).apply)))
                        xf.write (((unsupported)).apply ((xFavoriteForm)) (FALSE) ("u2192"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_ul)).apply)) ("<li>Favorite color? <input type=\"text\" name=\"color\" required></li>n<li>Favorite animalu2192 <input type=\"text\" name=\"animal\" required></li>n<li>Secret answer = <input type=\"text\" name=\"answer\" required></li>"))
                xtest_initial_data.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("django"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") (""))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("foo"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((xUserRegistration)).apply ((((unsupported)).apply ("password") ("secret"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("username"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                xtest_dynamic_initial_data.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("django"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("stephane"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)) ((((unsupported)).apply ("username") ("django"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") (""))) ((((unsupported)).apply ("username") ("django"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("foo"))) ((((unsupported)).apply ("username") ("django"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("password") ("secret"))) ((((unsupported)).apply ("username") ("django"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("username"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("django"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("babik"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_callable_initial_data.write
                  [xself]
                    memory > xinitial_django
                    memory > xinitial_stephane
                    memory > xpassword
                    memory > xp
                    memory > xusername
                    memory > xinitial_options
                    memory > xoptions
                    memory > xinitial_other_options
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xoptions.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("foo"))) ((((unsupported)).apply ("b") ("bar"))) ((((unsupported)).apply ("w") ("whiz"))))))
                        xinitial_django.write
                          []
                            seq > @
                              (((unsupported)).apply ("django"))
                        xinitial_stephane.write
                          []
                            seq > @
                              (((unsupported)).apply ("stephane"))
                        xinitial_options.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("f") ("b"))))
                        xinitial_other_options.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("b") ("w"))))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ((xinitial_django)) ("options") ((xinitial_options)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply)) ((((unsupported)).apply ("username") ((xinitial_django)) ("options") ((xinitial_options)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") (""))) ((((unsupported)).apply ("username") ((xinitial_django)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("foo") ("options") ((((unsupported)).apply ("f") ("b"))))) ((((unsupported)).apply ("username") ((xinitial_django)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("password") ("secret"))) ((((unsupported)).apply ("username") ((xinitial_django)) ("options") ((xinitial_options)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("username"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ((xinitial_django)))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xoptions.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("f") ("foo"))) ((((unsupported)).apply ("b") ("bar"))) ((((unsupported)).apply ("w") ("whiz"))))) ((xinitial_other_options)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ((xinitial_stephane)) ("options") ((xinitial_options)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_get_initial_for_field.write
                  [xself]
                    memory > xlast_name
                    memory > xfield
                    memory > xdt_fixed
                    memory > xform
                    memory > xactual
                    memory > xfirst_name
                    memory > xage
                    memory > xnow
                    memory > xcases
                    memory > xoccupation
                    memory > xdt_callable
                    seq > @
                      seq
                        xnow.write ((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (45) (123456))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((unsupported)).apply ((xCharField)) ("John"))
                            xlast_name.write (((unsupported)).apply ((xCharField)) ("Doe"))
                            xage.write (((xIntegerField)).apply)
                            xoccupation.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ("Unknown"))))
                            xdt_fixed.write (((unsupported)).apply ((xDateTimeField)) ((xnow)))
                            xdt_callable.write (((unsupported)).apply ((xDateTimeField)) ((((unsupported)).apply ((xnow)))))
                        xform.write (((unsupported)).apply ((xPersonForm)) ((((unsupported)).apply ("first_name") ("Jane"))))
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("age") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("last_name") ("Doe"))) ((((unsupported)).apply ("first_name") ("Jane"))) ((((unsupported)).apply ("occupation") ("Unknown"))) ((((unsupported)).apply ("dt_fixed") (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (45))))) ((((unsupported)).apply ("dt_callable") (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (45))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield_name)))))
                            seq
                              xfield.write (((unsupported)).apply (((xform).xfields)) ((xfield_name)))
                              xactual.write ((((xform).xget_initial_for_field)).apply ((xfield)) ((xfield_name)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                xtest_changed_data.write
                  [xself]
                    memory > xpedantic
                    memory > xp
                    memory > xto_python
                    memory > xfirst_name
                    memory > xbirthday
                    memory > xlast_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((unsupported)).apply ((xCharField)) ("Hans"))
                            xlast_name.write (((unsupported)).apply ((xCharField)) ("Greatel"))
                            xbirthday.write (((unsupported)).apply ((xDateField)) (((((xdatetime).xdate)).apply (1974) (8) (16))))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("first_name") ("Hans") ("last_name") ("Scrmbl") ("birthday") ("1974-08-16"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("first_name") (((xp).xchanged_data)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("last_name") (((xp).xchanged_data)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("birthday") (((xp).xchanged_data)))
                        (((unsupported)).apply (((xforms).xField)))
                          xto_python.write
                            [xself xvalue]
                              seq > @
                                (((unsupported)).apply ((((xValidationError)).apply ("Whatever"))))
                        (((unsupported)).apply ((xPerson)))
                          xpedantic.write (((unsupported)).apply ((xPedanticField)) ("whatever") (TRUE))
                        xp.write (((unsupported)).apply ((xPerson2)) ((((unsupported)).apply ("first_name") ("Hans") ("last_name") ("Scrmbl") ("birthday") ("1974-08-16") ("initial-pedantic") ("whatever"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("pedantic") (((xp).xchanged_data)))
                xtest_boundfield_values.write
                  [xself]
                    memory > xpassword
                    memory > xbound
                    memory > xusername
                    memory > xunbound
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("djangonaut"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                        xunbound.write (((xUserRegistration)).apply)
                        xbound.write (((xUserRegistration)).apply ((((unsupported)).apply ("password") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((((unsupported)).apply ((xbound)) ("username")).xvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xunbound)) ("username")).xvalue)).apply)) ("djangonaut"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xbound)) ("password")).xvalue)).apply)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((((unsupported)).apply ((xunbound)) ("password")).xvalue)).apply)))
                xtest_boundfield_initial_called_once.write
                  [xself]
                    memory > xname
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xCharField)) (10) (((xuuid).xuuid4)))
                        xform.write (((xMyForm)).apply)
                        xname.write (((unsupported)).apply ((xform)) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xname).xvalue)).apply)) (((((xname).xvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xform)) ("name"))) ((xname)))
                xtest_boundfield_value_disabled_callable_initial.write
                  [xself]
                    memory > xname
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ("John Doe"))) (TRUE))
                        xform.write (((xPersonForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xform)) ("name")).xvalue)).apply)) ("John Doe"))
                        xform.write (((xPersonForm)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xform)) ("name")).xvalue)).apply)) ("John Doe"))
                xtest_custom_boundfield.write
                  [xself]
                    memory > xname
                    memory > xget_bound_field
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xCharField)))
                          xget_bound_field.write
                            [xself xform xname]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply ((xform)) ((xname)))))
                        (((unsupported)).apply ((xForm)))
                          xname.write (((xCustomField)).apply)
                        xf.write (((xSampleForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) ("name"))) ((((unsupported)).apply ((xf)) ("name"))))
                xtest_initial_datetime_values.write
                  [xself]
                    memory > xfield
                    memory > xhi_without_microsec
                    memory > xhi_default_microsec
                    memory > xnow_no_ms
                    memory > xdelayed_now
                    memory > xti_without_microsec
                    memory > xactual
                    memory > xauto_timestamp
                    memory > xfixed
                    memory > xsupports_microseconds
                    memory > xdelayed_now_time
                    memory > xnow
                    memory > xunbound
                    memory > xauto_time_only
                    memory > xcases
                    seq > @
                      seq
                        xnow.write (((((xdatetime).xdatetime).xnow)).apply)
                        xnow_no_ms.write (((unsupported)).apply (((xnow).xreplace)) (0))
                        ((xnow).eq (xnow_no_ms)).if
                          xnow.write (((unsupported)).apply (((xnow).xreplace)) (1))
                        xdelayed_now.write
                          []
                            seq > @
                              (((unsupported)).apply ((xnow)))
                        xdelayed_now_time.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xnow).xtime)).apply)))
                        (((unsupported)).apply ((xHiddenInput)))
                          xsupports_microseconds.write FALSE
                        (((unsupported)).apply ((xTextInput)))
                          xsupports_microseconds.write FALSE
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfixed.write (((unsupported)).apply ((xDateTimeField)) ((xnow)))
                            xauto_timestamp.write (((unsupported)).apply ((xDateTimeField)) ((xdelayed_now)))
                            xauto_time_only.write (((unsupported)).apply ((xTimeField)) ((xdelayed_now_time)))
                            xsupports_microseconds.write (((unsupported)).apply ((xDateTimeField)) ((xdelayed_now)) ((xTextInput)))
                            xhi_default_microsec.write (((unsupported)).apply ((xDateTimeField)) ((xdelayed_now)) ((xHiddenInput)))
                            xhi_without_microsec.write (((unsupported)).apply ((xDateTimeField)) ((xdelayed_now)) ((xHiddenInputWithoutMicrosec)))
                            xti_without_microsec.write (((unsupported)).apply ((xDateTimeField)) ((xdelayed_now)) ((xTextInputWithoutMicrosec)))
                        xunbound.write (((xDateTimeForm)).apply)
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("fixed") ((xnow_no_ms)))) ((((unsupported)).apply ("auto_timestamp") ((xnow_no_ms)))) ((((unsupported)).apply ("auto_time_only") (((((xnow_no_ms).xtime)).apply)))) ((((unsupported)).apply ("supports_microseconds") ((xnow)))) ((((unsupported)).apply ("hi_default_microsec") ((xnow)))) ((((unsupported)).apply ("hi_without_microsec") ((xnow_no_ms)))) ((((unsupported)).apply ("ti_without_microsec") ((xnow_no_ms)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield_name)))))
                            seq
                              xactual.write ((((((unsupported)).apply ((xunbound)) ((xfield_name))).xvalue)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                              xfield.write (((unsupported)).apply (((xunbound).xfields)) ((xfield_name)))
                              xactual.write ((((xunbound).xget_initial_for_field)).apply ((xfield)) ((xfield_name)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                xget_datetime_form_with_callable_initial.write
                  [xself xdisabled xmicroseconds]
                    memory > xdt
                    memory > x__init__
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xelapsed_seconds)) (0))
                            xnow.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xelapsed_seconds)) (1))
                                    (((unsupported)).apply (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) ((45.add ((xself).xelapsed_seconds))) ((xmicroseconds)))))
                        (((unsupported)).apply (((xforms).xForm)))
                          xdt.write (((unsupported)).apply ((xDateTimeField)) (((((xFakeTime)).apply).xnow)) ((xdisabled)))
                        (((unsupported)).apply ((((xDateTimeForm)).apply ((((unsupported)).apply)))))
                xtest_datetime_clean_disabled_callable_initial_microseconds.write
                  [xself]
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xform.write (((unsupported)).apply (((xself).xget_datetime_form_with_callable_initial)) (TRUE) (123456))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("dt") (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (46))))))
                xtest_datetime_clean_disabled_callable_initial_bound_field.write
                  [xself]
                    memory > xcleaned
                    memory > xbf
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xform.write (((unsupported)).apply (((xself).xget_datetime_form_with_callable_initial)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply)))
                        xcleaned.write (((unsupported)).apply (((xform).xcleaned_data)) ("dt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcleaned)) (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (46))))
                        xbf.write (((unsupported)).apply ((xform)) ("dt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcleaned)) (((xbf).xinitial)))
                xtest_datetime_changed_data_callable_with_microseconds.write
                  [xself]
                    memory > xform
                    memory > xdt
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xdt.write (((unsupported)).apply ((xDateTimeField)) ((((unsupported)).apply (((((xdatetime).xdatetime)).apply (2006) (10) (25) (14) (30) (45) (123456))))) (TRUE))
                        xform.write (((xDateTimeForm)).apply ((((unsupported)).apply ("dt") ("2006-10-25 14:30:45"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xchanged_data)) ((((unsupported)).apply)))
                xtest_help_text.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xp
                    memory > xnext
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("e.g., user@example.com"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)) ("Wählen Sie mit Bedacht."))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("foo"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("e.g., user@example.com"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xnext.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)) ("/") ("Redirect destination"))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_help_text_html_safe.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xp
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("e.g., user@example.com"))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)) ("Help text is <strong>escaped</strong>."))
                        xp.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ("<li>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required><span class=\"helptext\">e.g., user@example.com</span></li><li>Password: <input type=\"password\" name=\"password\" required><span class=\"helptext\">Help text is <strong>escaped</strong>.</span></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ("<p>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required><span class=\"helptext\">e.g., user@example.com</span></p><p>Password: <input type=\"password\" name=\"password\" required><span class=\"helptext\">Help text is <strong>escaped</strong>.</span></p>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ("<tr><th>Username:</th><td><input type=\"text\" name=\"username\" maxlength=\"10\" required><br><span class=\"helptext\">e.g., user@example.com</span></td></tr><tr><th>Password:</th><td><input type=\"password\" name=\"password\" required><br><span class=\"helptext\">Help text is <strong>escaped</strong>.</span></td></tr>"))
                xtest_subclassing_forms.write
                  [xself]
                    memory > xhaircut_type
                    memory > xb
                    memory > xinstrument
                    memory > xp
                    memory > xfirst_name
                    memory > xm
                    memory > xbirthday
                    memory > xlast_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirthday.write (((xDateField)).apply)
                        (((unsupported)).apply ((xPerson)))
                          xinstrument.write (((xCharField)).apply)
                        xp.write (((unsupported)).apply ((xPerson)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xm.write (((unsupported)).apply ((xMusician)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xm).xas_ul)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirthday.write (((xDateField)).apply)
                        (((unsupported)).apply ((xForm)))
                          xinstrument.write (((xCharField)).apply)
                        (((unsupported)).apply ((xPerson)) ((xInstrument)))
                          xhaircut_type.write (((xCharField)).apply)
                        xb.write (((unsupported)).apply ((xBeatle)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xb).xas_ul)).apply)) ((((unsupported)).apply)))
                xtest_forms_with_prefixes.write
                  [xself]
                    memory > xdata
                    memory > xp2
                    memory > xp
                    memory > xfirst_name
                    memory > xbirthday
                    memory > xlast_name
                    memory > xp1
                    memory > xadd_prefix
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirthday.write (((xDateField)).apply)
                        xdata.write (((unsupported)).apply ("person1-first_name") ("John") ("person1-last_name") ("Lennon") ("person1-birthday") ("1940-10-9"))
                        xp.write (((unsupported)).apply ((xPerson)) ((xdata)) ("person1"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("first_name"))))) ("<input type=\"text\" name=\"person1-first_name\" value=\"John\" id=\"id_person1-first_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("last_name"))))) ("<input type=\"text\" name=\"person1-last_name\" value=\"Lennon\" id=\"id_person1-last_name\" required>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("birthday"))))) ("<input type=\"text\" name=\"person1-birthday\" value=\"1940-10-9\" id=\"id_person1-birthday\" required>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("last_name"))) ("Lennon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1940) (10) (9))))
                        xdata.write (((unsupported)).apply ("person1-first_name") ("") ("person1-last_name") ("") ("person1-birthday") (""))
                        xp.write (((unsupported)).apply ((xPerson)) ((xdata)) ("person1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("first_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("last_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("birthday"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xp)) ("first_name")).xerrors)) ((((unsupported)).apply ("This field is required."))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          unsupported
                        xdata.write (((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("1940-10-9"))
                        xp.write (((unsupported)).apply ((xPerson)) ((xdata)) ("person1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("first_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("last_name"))) ((((unsupported)).apply ("This field is required."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xerrors)) ("birthday"))) ((((unsupported)).apply ("This field is required."))))
                        xdata.write (((unsupported)).apply ("person1-first_name") ("John") ("person1-last_name") ("Lennon") ("person1-birthday") ("1940-10-9") ("person2-first_name") ("Jim") ("person2-last_name") ("Morrison") ("person2-birthday") ("1943-12-8"))
                        xp1.write (((unsupported)).apply ((xPerson)) ((xdata)) ("person1"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp1).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp1).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp1).xcleaned_data)) ("last_name"))) ("Lennon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp1).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1940) (10) (9))))
                        xp2.write (((unsupported)).apply ((xPerson)) ((xdata)) ("person2"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp2).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp2).xcleaned_data)) ("first_name"))) ("Jim"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp2).xcleaned_data)) ("last_name"))) ("Morrison"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp2).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1943) (12) (8))))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirthday.write (((xDateField)).apply)
                            xadd_prefix.write
                              [xself xfield_name]
                                seq > @
                                  (((unsupported)).apply ((((xself).xprefix).if ("%s-prefix-%s".mod (((unsupported)).apply (((xself).xprefix)) ((xfield_name)))) (xfield_name))))
                        xp.write (((unsupported)).apply ((xPerson)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        xdata.write (((unsupported)).apply ("foo-prefix-first_name") ("John") ("foo-prefix-last_name") ("Lennon") ("foo-prefix-birthday") ("1940-10-9"))
                        xp.write (((unsupported)).apply ((xPerson)) ((xdata)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("first_name"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("last_name"))) ("Lennon"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xp).xcleaned_data)) ("birthday"))) (((((xdatetime).xdate)).apply (1940) (10) (9))))
                xtest_class_prefix.write
                  [xself]
                    memory > xfirst_name
                    memory > xp
                    memory > xprefix
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xprefix.write "foo"
                        xp.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xprefix)) ("foo"))
                        xp.write (((unsupported)).apply ((xPerson)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xprefix)) ("bar"))
                xtest_forms_with_null_boolean.write
                  [xself]
                    memory > xname
                    memory > xis_cool
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xis_cool.write (((xNullBooleanField)).apply)
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("1"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("2"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("3"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") (TRUE))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") (FALSE))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("unknown"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("true"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply ((xPerson)) ((((unsupported)).apply ("name") ("Joe") ("is_cool") ("false"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xp)) ("is_cool"))))) ((((unsupported)).apply)))
                xtest_forms_with_file_fields.write
                  [xself]
                    memory > xfile1
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfile1.write (((xFileField)).apply)
                        xf.write (((unsupported)).apply ((xFileForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply)) ((((unsupported)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><ul class=\"errorlist\"><li>This field is required.</li></ul><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply)) ((((unsupported)).apply ("file1") ((((xSimpleUploadedFile)).apply ("name") (""))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><ul class=\"errorlist\"><li>The submitted file is empty.</li></ul><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply)) ((((unsupported)).apply ("file1") ("something that is not a file"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><ul class=\"errorlist\"><li>No file was submitted. Check the encoding type on the form.</li></ul><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply)) ((((unsupported)).apply ("file1") ((((xSimpleUploadedFile)).apply ("name") ("some content"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        xfile1.write (((xSimpleUploadedFile)).apply ("我隻氣墊船裝滿晒鱔.txt") (((("मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".xencode)).apply)))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply)) ((((unsupported)).apply ("file1") ((xfile1)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply ("file1") ("resume.txt"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>"))
                xtest_filefield_initial_callable.write
                  [xself]
                    memory > xfile1
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xfile1.write (((unsupported)).apply (((xforms).xFileField)) ((((unsupported)).apply ("resume.txt"))))
                        xf.write (((xFileForm)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("file1"))) ("resume.txt"))
                xtest_filefield_with_fileinput_required.write
                  [xself]
                    memory > xfile1
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfile1.write (((unsupported)).apply (((xforms).xFileField)) ((xFileInput)))
                        xf.write (((unsupported)).apply ((xFileForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>"))
                        xf.write (((unsupported)).apply ((xFileForm)) ((((unsupported)).apply ("file1") ("resume.txt"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>"))
                xtest_empty_permitted.write
                  [xself]
                    memory > xamount
                    memory > xdata
                    memory > xartist
                    memory > xname
                    memory > xform
                    memory > xqty
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xartist.write (((xCharField)).apply)
                            xname.write (((xCharField)).apply)
                        xdata.write (((unsupported)).apply ("artist") ("") ("song") (""))
                        xform.write (((unsupported)).apply ((xSongForm)) ((xdata)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("This field is required."))) ("artist") ((((unsupported)).apply ("This field is required."))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply)))
                        xform.write (((unsupported)).apply ((xSongForm)) ((xdata)) (TRUE) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply)))
                        xdata.write (((unsupported)).apply ("artist") ("The Doors") ("song") (""))
                        xform.write (((unsupported)).apply ((xSongForm)) ((xdata)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("This field is required."))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("artist") ("The Doors"))))
                        xdata.write (((unsupported)).apply ("artist") ("None: is there a None literal in the EO language?") ("song") (""))
                        xform.write (((unsupported)).apply ((xSongForm)) ((xdata)) (TRUE) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xamount.write (((xFloatField)).apply)
                            xqty.write (((xIntegerField)).apply)
                        xdata.write (((unsupported)).apply ("amount") ("0.0") ("qty") (""))
                        xform.write (((unsupported)).apply ((xPriceForm)) ((xdata)) ((((unsupported)).apply ("amount") (0.0))) (TRUE) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                xtest_empty_permitted_and_use_required_attribute.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The empty_permitted and use_required_attribute arguments may not both be True."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xPerson)) (TRUE) (TRUE))
                xtest_extracting_hidden_and_visible.write
                  [xself]
                    memory > xname
                    memory > xartist
                    memory > xform
                    memory > xtoken
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xtoken.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                            xartist.write (((xCharField)).apply)
                            xname.write (((xCharField)).apply)
                        xform.write (((xSongForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xname)) ((xf)) (((((xform).xhidden_fields)).apply)))) ((((unsupported)).apply ("token"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xname)) ((xf)) (((((xform).xvisible_fields)).apply)))) ((((unsupported)).apply ("artist") ("name"))))
                xtest_hidden_initial_gets_id.write
                  [xself]
                    memory > xfield1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfield1.write (((unsupported)).apply ((xCharField)) (50) (TRUE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((xMyForm)).apply).xas_table)).apply)) ("<tr><th><label for=\"id_field1\">Field1:</label></th><td><input id=\"id_field1\" type=\"text\" name=\"field1\" maxlength=\"50\" required><input type=\"hidden\" name=\"initial-field1\" id=\"initial-id_field1\"></td></tr>"))
                xtest_error_html_required_html_classes.write
                  [xself]
                    memory > xis_cool
                    memory > xemail
                    memory > xp
                    memory > xage
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((xCharField)).apply)
                            xis_cool.write (((xNullBooleanField)).apply)
                            xemail.write (((unsupported)).apply ((xEmailField)) (FALSE))
                            xage.write (((xIntegerField)).apply)
                        xp.write (((xPerson)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((xp).xerror_css_class)) ("error"))
                        (((unsupported)).apply (((xp).xrequired_css_class)) ("required"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                xtest_label_has_required_css_class.write
                  [xself]
                    memory > xfield
                    memory > xrequired_css_class
                    memory > xfield2
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xrequired_css_class.write "required"
                            xfield.write (((unsupported)).apply ((xCharField)) (10))
                            xfield2.write (((unsupported)).apply ((xIntegerField)) (FALSE))
                        xf.write (((xSomeForm)).apply ((((unsupported)).apply ("field") ("test"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("field")).xlabel_tag)).apply)) ("<label for=\"id_field\" class=\"required\">Field:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("field")).xlegend_tag)).apply)) ("<legend for=\"id_field\" class=\"required\">Field:</legend>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((xf)) ("field")).xlabel_tag)) ((((unsupported)).apply ("class") ("foo"))))) ("<label for=\"id_field\" class=\"foo required\">Field:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((xf)) ("field")).xlegend_tag)) ((((unsupported)).apply ("class") ("foo"))))) ("<legend for=\"id_field\" class=\"foo required\">Field:</legend>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("field2")).xlabel_tag)).apply)) ("<label for=\"id_field2\">Field2:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xf)) ("field2")).xlegend_tag)).apply)) ("<legend for=\"id_field2\">Field2:</legend>"))
                xtest_label_split_datetime_not_displayed.write
                  [xself]
                    memory > xform
                    memory > xhappened_at
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xhappened_at.write (((unsupported)).apply ((xSplitDateTimeField)) ((xSplitHiddenDateTimeWidget)))
                        xform.write (((xEventForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_ul)).apply)) ("<input type=\"hidden\" name=\"happened_at_0\" id=\"id_happened_at_0\"><input type=\"hidden\" name=\"happened_at_1\" id=\"id_happened_at_1\">"))
                xtest_multivalue_field_validation.write
                  [xself]
                    memory > xbad_names
                    memory > xform
                    memory > x__init__
                    memory > xname
                    memory > xcompress
                    seq > @
                      seq
                        xbad_names.write
                          [xvalue]
                            seq > @
                              ((xvalue).eq "bad value").if
                                (((unsupported)).apply ((((xValidationError)).apply ("bad value not allowed"))))
                        (((unsupported)).apply ((xMultiValueField)))
                          seq
                            x__init__.write
                              [xself xfields]
                                seq > @
                                  (((unsupported)).apply)
                                    xfields.write (((unsupported)).apply ((((unsupported)).apply ((xCharField)) ("First name") (10))) ((((unsupported)).apply ((xCharField)) ("Last name") (10))))
                                    (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfields)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                            xcompress.write
                              [xself xdata_list]
                                seq > @
                                  (((unsupported)).apply ((((" ".xjoin)).apply ((xdata_list)))))
                        (((unsupported)).apply ((xForm)))
                          xname.write (((unsupported)).apply ((xNameField)) ((((unsupported)).apply ((xbad_names)))))
                        xform.write (((unsupported)).apply ((xNameForm)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("bad") ("value"))))))
                        bogusForceDataize.write ((((xform).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("bad value not allowed"))))))
                        xform.write (((unsupported)).apply ((xNameForm)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("should be overly") ("long for the field names"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("Ensure this value has at most 10 characters (it has 16).") ("Ensure this value has at most 10 characters (it has 24)."))))))
                        xform.write (((unsupported)).apply ((xNameForm)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("fname") ("lname"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("name") ("fname lname"))))
                xtest_multivalue_deep_copy.write
                  [xself]
                    memory > xfield
                    memory > x__init__
                    memory > xfield2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xMultiValueField)))
                          x__init__.write
                            [xself xfields]
                              seq > @
                                (((unsupported)).apply)
                                  xfields.write (((unsupported)).apply ((((unsupported)).apply ((xChoiceField)) ("Rank") ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply ((xCharField)) ("Name") (10))))
                                  (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfields)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        xfield.write (((xChoicesField)).apply)
                        xfield2.write ((((xcopy).xdeepcopy)).apply ((xfield)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfield2)) ((xChoicesField)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xfield2).xfields)) (((xfield).xfields)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((unsupported)).apply (((xfield2).xfields)) (0)).xchoices)) (((((unsupported)).apply (((xfield).xfields)) (0)).xchoices)))
                xtest_multivalue_initial_data.write
                  [xself]
                    memory > xdate_age
                    memory > xform
                    memory > x__init__
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xMultiValueField)))
                          x__init__.write
                            [xself xfields]
                              seq > @
                                (((unsupported)).apply)
                                  xfields.write (((unsupported)).apply ((((unsupported)).apply ((xDateField)) ("Date"))) ((((unsupported)).apply ((xIntegerField)) ("Age"))))
                                  (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfields)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((xForm)))
                          xdate_age.write (((xDateAgeField)).apply)
                        xdata.write (((unsupported)).apply ("date_age") ((((unsupported)).apply ("1998-12-06") (16))))
                        xform.write (((unsupported)).apply ((xDateAgeForm)) ((xdata)) ((((unsupported)).apply ("date_age") ((((unsupported)).apply ("200-10-10") (14))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xhas_changed)).apply)))
                xtest_multivalue_optional_subfields.write
                  [xself]
                    memory > x__init__
                    memory > xcompress
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xMultiValueField)))
                          seq
                            x__init__.write
                              [xself]
                                memory > xfields
                                seq > @
                                  (((unsupported)).apply)
                                    xfields.write (((unsupported)).apply ((((unsupported)).apply ((xCharField)) ("Country Code") ((((unsupported)).apply ((((unsupported)).apply ((xRegexValidator)) ("^+[0-9]{1,2}$") ("Enter a valid country code."))))))) ((((unsupported)).apply ((xCharField)) ("Phone Number"))) ((((unsupported)).apply ((xCharField)) ("Extension") ((((unsupported)).apply ("incomplete") ("Enter an extension."))))) ((((unsupported)).apply ((xCharField)) ("Label") (FALSE) ("E.g. home, work."))))
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfields)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                            xcompress.write
                              [xself xdata_list]
                                seq > @
                                  seq
                                    (xdata_list).if
                                      (((unsupported)).apply (("%s.%s ext. %s (label: %s)".mod (((xtuple)).apply ((xdata_list))))))
                                    (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xf.write (((xPhoneField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply (""))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("+61"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61.287654321 ext. 123 (label: Home)") (((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123") ("Home"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a valid country code.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("61") ("287654321") ("123") ("Home"))))
                        xf.write (((unsupported)).apply ((xPhoneField)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61. ext.  (label: )") (((((xf).xclean)).apply ((((unsupported)).apply ("+61"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61.287654321 ext. 123 (label: )") (((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61.287654321 ext. 123 (label: Home)") (((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123") ("Home"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a valid country code.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("61") ("287654321") ("123") ("Home"))))
                        xf.write (((unsupported)).apply ((xPhoneField)) (FALSE))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply (""))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a complete value.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("+61"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61.287654321 ext. 123 (label: )") (((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a complete value.', 'Enter an extension.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("") ("") ("") ("Home"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a valid country code.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("61") ("287654321") ("123") ("Home"))))
                        xf.write (((unsupported)).apply ((xPhoneField)) (FALSE) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a complete value.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("+61"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("+61.287654321 ext. 123 (label: )") (((((xf).xclean)).apply ((((unsupported)).apply ("+61") ("287654321") ("123"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a complete value.', 'Enter an extension.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("") ("") ("") ("Home"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'Enter a valid country code.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ((((unsupported)).apply ("61") ("287654321") ("123") ("Home"))))
                xtest_multivalue_optional_subfields_rendering.write
                  [xself]
                    memory > xphone1
                    memory > x__init__
                    memory > xform
                    memory > xphone2
                    memory > xphone3
                    memory > xdecompress
                    memory > xphone4
                    seq > @
                      seq
                        (((unsupported)).apply ((xMultiWidget)))
                          seq
                            x__init__.write
                              [xself xattrs]
                                memory > xwidgets
                                seq > @
                                  (((unsupported)).apply)
                                    xwidgets.write (((unsupported)).apply ((((xTextInput)).apply)) ((((xTextInput)).apply)))
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xwidgets)) ((xattrs)))
                            xdecompress.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((xMultiValueField)))
                          x__init__.write
                            [xself]
                              memory > xfields
                              seq > @
                                (((unsupported)).apply)
                                  xfields.write (((unsupported)).apply ((((xCharField)).apply)) ((((unsupported)).apply ((xCharField)) (FALSE))))
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfields)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xphone1.write (((unsupported)).apply ((xPhoneField)) ((xPhoneWidget)))
                            xphone2.write (((unsupported)).apply ((xPhoneField)) ((xPhoneWidget)) (FALSE))
                            xphone3.write (((unsupported)).apply ((xPhoneField)) ((xPhoneWidget)) (FALSE))
                            xphone4.write (((unsupported)).apply ((xPhoneField)) ((xPhoneWidget)) (FALSE) (FALSE))
                        xform.write (((unsupported)).apply ((xPhoneForm)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ((((unsupported)).apply)))
                xtest_custom_empty_values.write
                  [xself]
                    memory > xjson
                    memory > xform
                    memory > xempty_values
                    memory > xto_python
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xCharField)))
                          seq
                            xempty_values.write (((unsupported)).apply ("None: is there a None literal in the EO language?") (""))
                            xto_python.write
                              [xself xvalue]
                                seq > @
                                  seq
                                    ((xvalue).eq "{}").if
                                      (((unsupported)).apply ((((unsupported)).apply)))
                                    (((unsupported)).apply (((((((xsuper)).apply).xto_python)).apply ((xvalue)))))
                        (((unsupported)).apply (((xforms).xForm)))
                          xjson.write (((xCustomJSONField)).apply)
                        xform.write (((unsupported)).apply ((xJSONForm)) ((((unsupported)).apply ("json") ("{}"))))
                        bogusForceDataize.write ((((xform).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("json") ((((unsupported)).apply)))))
                xtest_boundfield_label_tag.write
                  [xself]
                    memory > xfield
                    memory > xtestcases
                    memory > xboundfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((xCharField)).apply)
                        xboundfield.write (((unsupported)).apply ((((xSomeForm)).apply)) ("field"))
                        xtestcases.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("<%(tag)s for=\"id_field\">Field:</%(tag)s>"))) ((((unsupported)).apply ((((unsupported)).apply ("custom"))) ((((unsupported)).apply)) ("<%(tag)s for=\"id_field\">custom:</%(tag)s>"))) ((((unsupported)).apply ((((unsupported)).apply ("custom&"))) ((((unsupported)).apply)) ("<%(tag)s for=\"id_field\">custom&amp;:</%(tag)s>"))) ((((unsupported)).apply ((((unsupported)).apply ((((xmark_safe)).apply ("custom&"))))) ((((unsupported)).apply)) ("<%(tag)s for=\"id_field\">custom&:</%(tag)s>"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("attrs") ((((unsupported)).apply ("class") ("pretty"))))) ("<%(tag)s for=\"id_field\" class=\"pretty\">Field:</%(tag)s>"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)) ((xexpected)))) ((xtestcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xargs)) ((xkwargs)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlabel_tag)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) (((xexpected).mod (((unsupported)).apply ("tag") ("label")))))
                              bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlegend_tag)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) (((xexpected).mod (((unsupported)).apply ("tag") ("legend")))))
                xtest_boundfield_label_tag_no_id.write
                  [xself]
                    memory > xfield
                    memory > xboundfield
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((xCharField)).apply)
                        xboundfield.write (((unsupported)).apply ((((unsupported)).apply ((xSomeForm)) (""))) ("field"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlabel_tag)).apply)) ("Field:"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlegend_tag)).apply)) ("Field:"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlabel_tag)).apply ("Custom&"))) ("Custom&amp;:"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlegend_tag)).apply ("Custom&"))) ("Custom&amp;:"))
                xtest_boundfield_label_tag_custom_widget_id_for_label.write
                  [xself]
                    memory > xempty
                    memory > xform
                    memory > xid_for_label
                    memory > xcustom
                    seq > @
                      seq
                        (((unsupported)).apply ((xTextInput)))
                          xid_for_label.write
                            [xself xid]
                              seq > @
                                (((unsupported)).apply (("custom_".add (xid))))
                        (((unsupported)).apply ((xTextInput)))
                          xid_for_label.write
                            [xself xid]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xForm)))
                          seq
                            xcustom.write (((unsupported)).apply ((xCharField)) ((xCustomIdForLabelTextInput)))
                            xempty.write (((unsupported)).apply ((xCharField)) ((xEmptyIdForLabelTextInput)))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xform)) ("custom")).xlabel_tag)).apply)) ("<label for=\"custom_id_custom\">Custom:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xform)) ("custom")).xlegend_tag)).apply)) ("<legend for=\"custom_id_custom\">Custom:</legend>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xform)) ("empty")).xlabel_tag)).apply)) ("<label>Empty:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((((unsupported)).apply ((xform)) ("empty")).xlegend_tag)).apply)) ("<legend>Empty:</legend>"))
                xtest_boundfield_empty_label.write
                  [xself]
                    memory > xfield
                    memory > xboundfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((unsupported)).apply ((xCharField)) (""))
                        xboundfield.write (((unsupported)).apply ((((xSomeForm)).apply)) ("field"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlabel_tag)).apply)) ("<label for=\"id_field\"></label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xboundfield).xlegend_tag)).apply)) ("<legend for=\"id_field\"></legend>"))
                xtest_boundfield_id_for_label.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((unsupported)).apply ((xCharField)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xSomeForm)).apply)) ("field")).xid_for_label)) ("id_field"))
                xtest_boundfield_id_for_label_override_by_attrs.write
                  [xself]
                    memory > xfield
                    memory > xfield_none
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfield.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ((xTextInput)) ((((unsupported)).apply ("id") ("myCustomID"))))))
                            xfield_none.write (((unsupported)).apply ((xCharField)) ((((unsupported)).apply ((xTextInput)) ((((unsupported)).apply ("id") ("None: is there a None literal in the EO language?"))))))
                        xform.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xform)) ("field")).xid_for_label)) ("myCustomID"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xform)) ("field_none")).xid_for_label)) ("id_field_none"))
                xtest_boundfield_subwidget_id_for_label.write
                  [xself]
                    memory > xsubwidgets
                    memory > xfield
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("A"))) ((((unsupported)).apply ("b") ("B"))))) ((xCheckboxSelectMultiple)))
                        xform.write (((unsupported)).apply ((xSomeForm)) ("prefix_%s"))
                        xsubwidgets.write ((((unsupported)).apply ((xform)) ("field")).xsubwidgets)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xsubwidgets)) (0)).xid_for_label)) ("prefix_field_0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xsubwidgets)) (1)).xid_for_label)) ("prefix_field_1"))
                xtest_boundfield_widget_type.write
                  [xself]
                    memory > xfirst_name
                    memory > xbirthday
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xbirthday.write (((unsupported)).apply ((xSplitDateTimeField)) ((xSplitHiddenDateTimeWidget)))
                        xf.write (((xSomeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xf)) ("first_name")).xwidget_type)) ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xf)) ("birthday")).xwidget_type)) ("splithiddendatetime"))
                xtest_boundfield_css_classes.write
                  [xself]
                    memory > xfield
                    memory > xform
                    seq > @
                      seq
                        xform.write (((xPerson)).apply)
                        xfield.write (((unsupported)).apply ((xform)) ("first_name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcss_classes)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcss_classes)) (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcss_classes)) ("test"))) ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcss_classes)) ("test test"))) ("test"))
                xtest_label_suffix_override.write
                  [xself]
                    memory > xfield
                    memory > xboundfield
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((xCharField)).apply)
                        xboundfield.write (((unsupported)).apply ((((unsupported)).apply ((xSomeForm)) ("!"))) ("field"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((xboundfield).xlabel_tag)) ("$"))) ("<label for=\"id_field\">Field$</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((xboundfield).xlegend_tag)) ("$"))) ("<legend for=\"id_field\">Field$</legend>"))
                xtest_error_dict.write
                  [xself]
                    memory > xclean
                    memory > xerrors
                    memory > xbar
                    memory > xform
                    memory > xcontrol
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfoo.write (((xCharField)).apply)
                            xbar.write (((xCharField)).apply)
                            xclean.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ("Non-field error.") ("secret") ((((unsupported)).apply ("a") (1) ("b") (2))))))
                        xform.write (((xMyForm)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xform).xis_valid)).apply)) (FALSE))
                        xerrors.write (((((xform).xerrors).xas_text)).apply)
                        xcontrol.write (((unsupported)).apply ("* foon  * This field is required.") ("* barn  * This field is required.") ("* __all__n  * Non-field error."))
                        (((unsupported)).apply ((xerror)) ((xcontrol)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xerror)) ((xerrors)))
                        xerrors.write (((((xform).xerrors).xas_ul)).apply)
                        xcontrol.write (((unsupported)).apply ("<li>foo<ul class=\"errorlist\"><li>This field is required.</li></ul></li>") ("<li>bar<ul class=\"errorlist\"><li>This field is required.</li></ul></li>") ("<li>__all__<ul class=\"errorlist nonfield\"><li>Non-field error.</li></ul></li>"))
                        (((unsupported)).apply ((xerror)) ((xcontrol)))
                          bogusForceDataize.write ((((xself).xassertInHTML)).apply ((xerror)) ((xerrors)))
                        xerrors.write (((((xform).xerrors).xget_json_data)).apply)
                        xcontrol.write (((unsupported)).apply ("foo") ((((unsupported)).apply ((((unsupported)).apply ("code") ("required") ("message") ("This field is required."))))) ("bar") ((((unsupported)).apply ((((unsupported)).apply ("code") ("required") ("message") ("This field is required."))))) ("__all__") ((((unsupported)).apply ((((unsupported)).apply ("code") ("secret") ("message") ("Non-field error."))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((xcontrol)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xjson).xdumps)).apply ((xerrors)))) ((((((xform).xerrors).xas_json)).apply)))
                xtest_error_dict_as_json_escape_html.write
                  [xself]
                    memory > xclean
                    memory > xerrors
                    memory > xbar
                    memory > xform
                    memory > xcontrol
                    memory > xescaped_error
                    memory > xfoo
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfoo.write (((xCharField)).apply)
                            xbar.write (((xCharField)).apply)
                            xclean.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ("<p>Non-field error.</p>") ("secret") ((((unsupported)).apply ("a") (1) ("b") (2))))))
                        xcontrol.write (((unsupported)).apply ("foo") ((((unsupported)).apply ((((unsupported)).apply ("code") ("required") ("message") ("This field is required."))))) ("bar") ((((unsupported)).apply ((((unsupported)).apply ("code") ("required") ("message") ("This field is required."))))) ("__all__") ((((unsupported)).apply ((((unsupported)).apply ("code") ("secret") ("message") ("<p>Non-field error.</p>"))))))
                        xform.write (((xMyForm)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        xerrors.write ((((xjson).xloads)).apply ((((((xform).xerrors).xas_json)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((xcontrol)))
                        xescaped_error.write "&lt;p&gt;Non-field error.&lt;/p&gt;"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xform).xerrors).xget_json_data)) (TRUE))) ("__all__"))) (0))) ("message"))) ((xescaped_error)))
                        xerrors.write ((((xjson).xloads)).apply ((((unsupported)).apply ((((xform).xerrors).xas_json)) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontrol)) ("__all__"))) (0))) ("message"))) ((xescaped_error)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((xcontrol)))
                xtest_error_list.write
                  [xself]
                    memory > xe
                    memory > xerrors
                    seq > @
                      seq
                        xe.write (((xErrorList)).apply)
                        bogusForceDataize.write ((((xe).xappend)).apply ("Foo"))
                        bogusForceDataize.write ((((xe).xappend)).apply ((((unsupported)).apply ((xValidationError)) ("Foo%(bar)s") ("foobar") ((((unsupported)).apply ("bar") ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo") ((xe)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo") ((((xValidationError)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xas_text)).apply)) ("* Foon* Foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xas_ul)).apply)) ("<ul class=\"errorlist\"><li>Foo</li><li>Foobar</li></ul>"))
                        xerrors.write ((((xe).xget_json_data)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((((unsupported)).apply ((((unsupported)).apply ("message") ("Foo") ("code") (""))) ((((unsupported)).apply ("message") ("Foobar") ("code") ("foobar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xjson).xdumps)).apply ((xerrors)))) (((((xe).xas_json)).apply)))
                xtest_error_list_class_not_specified.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xErrorList)).apply)
                        bogusForceDataize.write ((((xe).xappend)).apply ("Foo"))
                        bogusForceDataize.write ((((xe).xappend)).apply ((((unsupported)).apply ((xValidationError)) ("Foo%(bar)s") ("foobar") ((((unsupported)).apply ("bar") ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xas_ul)).apply)) ("<ul class=\"errorlist\"><li>Foo</li><li>Foobar</li></ul>"))
                xtest_error_list_class_has_one_class_specified.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ((xErrorList)) ("foobar-error-class"))
                        bogusForceDataize.write ((((xe).xappend)).apply ("Foo"))
                        bogusForceDataize.write ((((xe).xappend)).apply ((((unsupported)).apply ((xValidationError)) ("Foo%(bar)s") ("foobar") ((((unsupported)).apply ("bar") ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xas_ul)).apply)) ("<ul class=\"errorlist foobar-error-class\"><li>Foo</li><li>Foobar</li></ul>"))
                xtest_error_list_with_hidden_field_errors_has_correct_class.write
                  [xself]
                    memory > xfirst_name
                    memory > xp
                    memory > xlast_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((unsupported)).apply ((xCharField)) ((xHiddenInput)))
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                xtest_error_list_with_non_field_errors_has_correct_class.write
                  [xself]
                    memory > xfirst_name
                    memory > xp
                    memory > xlast_name
                    memory > xclean
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xclean.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xValidationError)).apply ("Generic validation error"))))
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply (((((xp).xnon_field_errors)).apply)))) ("<ul class=\"errorlist nonfield\"><li>Generic validation error</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_ul)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((((xp).xnon_field_errors)).apply).xas_text)).apply)) ("* Generic validation error"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_p)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xp).xas_table)).apply)) ((((unsupported)).apply)))
                xtest_error_escaping.write
                  [xself]
                    memory > xvisible
                    memory > xclean_hidden
                    memory > xform
                    memory > xhidden
                    memory > xclean_visible
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xhidden.write (((unsupported)).apply ((xCharField)) ((((xHiddenInput)).apply)) (FALSE))
                            xvisible.write (((xCharField)).apply)
                            xclean_hidden.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xValidationError)).apply ("Foo & \"bar\"!"))))
                            xclean_visible.write (xclean_hidden)
                        xform.write (((xTestForm)).apply ((((unsupported)).apply ("hidden") ("a") ("visible") ("b"))))
                        bogusForceDataize.write ((((xform).xis_valid)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_ul)).apply)) ("<li><ul class=\"errorlist nonfield\"><li>(Hidden field hidden) Foo &amp; &quot;bar&quot;!</li></ul></li><li><ul class=\"errorlist\"><li>Foo &amp; &quot;bar&quot;!</li></ul><label for=\"id_visible\">Visible:</label> <input type=\"text\" name=\"visible\" value=\"b\" id=\"id_visible\" required><input type=\"hidden\" name=\"hidden\" value=\"a\" id=\"id_hidden\"></li>"))
                xtest_baseform_repr.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xp)))) ("<Person bound=False, valid=Unknown, fields=(first_name;last_name;birthday)>"))
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("1940-10-9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xp)))) ("<Person bound=True, valid=Unknown, fields=(first_name;last_name;birthday)>"))
                        bogusForceDataize.write ((((xp).xis_valid)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xp)))) ("<Person bound=True, valid=True, fields=(first_name;last_name;birthday)>"))
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("fakedate"))))
                        bogusForceDataize.write ((((xp).xis_valid)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xp)))) ("<Person bound=True, valid=False, fields=(first_name;last_name;birthday)>"))
                xtest_baseform_repr_dont_trigger_validation.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((xPerson)).apply ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon") ("birthday") ("fakedate"))))
                        bogusForceDataize.write (((xrepr)).apply ((xp)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xp).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xcleaned_data)) ((((unsupported)).apply ("first_name") ("John") ("last_name") ("Lennon"))))
                xtest_accessing_clean.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xclean
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                memory > xdata
                                seq > @
                                  seq
                                    xdata.write ((xself).xcleaned_data)
                                    (((xself).xerrors).not).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("username"))) (((((((unsupported)).apply ((xdata)) ("username")).xlower)).apply)))
                                    (((unsupported)).apply ((xdata)))
                        xf.write (((xUserForm)).apply ((((unsupported)).apply ("username") ("SirRobin") ("password") ("blue"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("username"))) ("sirrobin"))
                xtest_changing_cleaned_data_nothing_returned.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xclean
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xcleaned_data)) ("username"))) (((((((unsupported)).apply (((xself).xcleaned_data)) ("username")).xlower)).apply)))
                        xf.write (((xUserForm)).apply ((((unsupported)).apply ("username") ("SirRobin") ("password") ("blue"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("username"))) ("sirrobin"))
                xtest_changing_cleaned_data_in_clean.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xclean
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                memory > xdata
                                seq > @
                                  seq
                                    xdata.write ((xself).xcleaned_data)
                                    (((unsupported)).apply ((((unsupported)).apply ("username") (((((((unsupported)).apply ((xdata)) ("username")).xlower)).apply)) ("password") ("this_is_not_a_secret"))))
                        xf.write (((xUserForm)).apply ((((unsupported)).apply ("username") ("SirRobin") ("password") ("blue"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xf).xcleaned_data)) ("username"))) ("sirrobin"))
                xtest_multipart_encoded_form.write
                  [xself]
                    memory > xfile
                    memory > ximage
                    memory > xusername
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xusername.write (((xCharField)).apply)
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((xCharField)).apply)
                            xfile.write (((xFileField)).apply)
                        (((unsupported)).apply ((xForm)))
                          ximage.write (((xImageField)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((xFormWithoutFile)).apply).xis_multipart)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xFormWithFile)).apply).xis_multipart)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xFormWithImage)).apply).xis_multipart)).apply)))
                xtest_html_safe.write
                  [xself]
                    memory > xusername
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xusername.write (((xCharField)).apply)
                        xform.write (((xSimpleForm)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xSimpleForm)) ("__html__"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xform)))) (((((xform).x__html__)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((((unsupported)).apply ((xform)) ("username"))) ("__html__"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xform)) ("username"))))) (((((((unsupported)).apply ((xform)) ("username")).x__html__)).apply)))
                xtest_use_required_attribute_true.write
                  [xself]
                    memory > xf3
                    memory > xuse_required_attribute
                    memory > xform
                    memory > xf2
                    memory > xf1
                    memory > xf4
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xuse_required_attribute.write TRUE
                            xf1.write (((unsupported)).apply ((xCharField)) (30))
                            xf2.write (((unsupported)).apply ((xCharField)) (30) (FALSE))
                            xf3.write (((unsupported)).apply ((xCharField)) ((xTextarea)))
                            xf4.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))))
                        xform.write (((xMyForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p><label for=\"id_f1\">F1:</label><input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\" required></p><p><label for=\"id_f2\">F2:</label><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></p><p><label for=\"id_f3\">F3:</label><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\" required></textarea></p><p><label for=\"id_f4\">F4:</label> <select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></p>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_ul)).apply)) ("<li><label for=\"id_f1\">F1:</label> <input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\" required></li><li><label for=\"id_f2\">F2:</label><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></li><li><label for=\"id_f3\">F3:</label><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\" required></textarea></li><li><label for=\"id_f4\">F4:</label> <select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_table)).apply)) ("<tr><th><label for=\"id_f1\">F1:</label></th><td><input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\" required></td></tr><tr><th><label for=\"id_f2\">F2:</label></th><td><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></td></tr><tr><th><label for=\"id_f3\">F3:</label></th><td><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\" required></textarea></td></tr><tr><th><label for=\"id_f4\">F4:</label></th><td><select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></td></tr>"))
                xtest_use_required_attribute_false.write
                  [xself]
                    memory > xf3
                    memory > xuse_required_attribute
                    memory > xform
                    memory > xf2
                    memory > xf1
                    memory > xf4
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xuse_required_attribute.write FALSE
                            xf1.write (((unsupported)).apply ((xCharField)) (30))
                            xf2.write (((unsupported)).apply ((xCharField)) (30) (FALSE))
                            xf3.write (((unsupported)).apply ((xCharField)) ((xTextarea)))
                            xf4.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("P") ("Python"))) ((((unsupported)).apply ("J") ("Java"))))))
                        xform.write (((xMyForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_p)).apply)) ("<p><label for=\"id_f1\">F1:</label><input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\"></p><p><label for=\"id_f2\">F2:</label><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></p><p><label for=\"id_f3\">F3:</label><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\"></textarea></p><p><label for=\"id_f4\">F4:</label> <select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></p>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_ul)).apply)) ("<li><label for=\"id_f1\">F1:</label><input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\"></li><li><label for=\"id_f2\">F2:</label><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></li><li><label for=\"id_f3\">F3:</label><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\"></textarea></li><li><label for=\"id_f4\">F4:</label> <select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></li>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_table)).apply)) ("<tr><th><label for=\"id_f1\">F1:</label></th><td><input id=\"id_f1\" maxlength=\"30\" name=\"f1\" type=\"text\"></td></tr><tr><th><label for=\"id_f2\">F2:</label></th><td><input id=\"id_f2\" maxlength=\"30\" name=\"f2\" type=\"text\"></td></tr><tr><th><label for=\"id_f3\">F3:</label></th><td><textarea cols=\"40\" id=\"id_f3\" name=\"f3\" rows=\"10\"></textarea></td></tr><tr><th><label for=\"id_f4\">F4:</label></th><td><select id=\"id_f4\" name=\"f4\"><option value=\"P\">Python</option><option value=\"J\">Java</option></select></td></tr>"))
                xtest_only_hidden_fields.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xdata.write (((unsupported)).apply ((xIntegerField)) ((xHiddenInput)))
                        xf.write (((xHiddenForm)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<ul class=\"errorlist nonfield\"><li>(Hidden field data) This field is required.</li></ul>n<p> <input type=\"hidden\" name=\"data\" id=\"id_data\"></p>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_table)).apply)) ("<tr><td colspan=\"2\"><ul class=\"errorlist nonfield\"><li>(Hidden field data) This field is required.</li></ul><input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>"))
                xtest_field_named_data.write
                  [xself]
                    memory > xdata
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xdata.write (((unsupported)).apply ((xCharField)) (10))
                        xf.write (((xDataForm)).apply ((((unsupported)).apply ("data") ("xyzzy"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xcleaned_data)) ((((unsupported)).apply ("data") ("xyzzy"))))
                xtest_empty_data_files_multi_value_dict.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xPerson)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xp).xdata)) ((xMultiValueDict)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xp).xfiles)) ((xMultiValueDict)))
                xtest_field_deep_copy_error_messages.write
                  [xself]
                    memory > xfield
                    memory > x__init__
                    memory > xfield_copy
                    seq > @
                      seq
                        (((unsupported)).apply ((xCharField)))
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("error_messages"))) ((((unsupported)).apply ("invalid") ("Form custom error message."))))
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                        xfield.write (((xCustomCharField)).apply)
                        xfield_copy.write ((((xcopy).xdeepcopy)).apply ((xfield)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfield_copy)) ((xCustomCharField)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xfield_copy).xerror_messages)) (((xfield).xerror_messages)))
                xtest_label_does_not_include_new_line.write
                  [xself]
                    memory > xfield
                    memory > xform
                    seq > @
                      seq
                        xform.write (((xPerson)).apply)
                        xfield.write (((unsupported)).apply ((xform)) ("first_name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xlabel_tag)).apply)) ("<label for=\"id_first_name\">First name:</label>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xlegend_tag)).apply)) ("<legend for=\"id_first_name\">First name:</legend>"))
                xtest_label_attrs_not_localized.write
                  [xself]
                    memory > xfield
                    memory > xform
                    seq > @
                      (((unsupported)).apply)
                        xform.write (((xPerson)).apply)
                        xfield.write (((unsupported)).apply ((xform)) ("first_name"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((xfield).xlabel_tag)) ((((unsupported)).apply ("number") (9999))))) ("<label number=\"9999\" for=\"id_first_name\">First name:</label>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((unsupported)).apply (((xfield).xlegend_tag)) ((((unsupported)).apply ("number") (9999))))) ("<legend number=\"9999\" for=\"id_first_name\">First name:</legend>"))
            (((unsupported)).apply ((xFormsTestCase)) ((xjinja2_tests)))
            (((unsupported)).apply ((xDjangoTemplates)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_default.write
                  [xself]
                    memory > xform
                    seq > @
                      seq
                        xform.write (((xForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xrenderer)) ((((xget_default_renderer)).apply)))
                xtest_kwarg_instance.write
                  [xself]
                    memory > xform
                    memory > xcustom
                    seq > @
                      seq
                        xcustom.write (((xCustomRenderer)).apply)
                        xform.write (((unsupported)).apply ((xForm)) ((xcustom)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xrenderer)) ((xcustom)))
                xtest_kwarg_class.write
                  [xself]
                    memory > xform
                    memory > xcustom
                    seq > @
                      seq
                        xcustom.write (((xCustomRenderer)).apply)
                        xform.write (((unsupported)).apply ((xForm)) ((xcustom)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xrenderer)) ((xcustom)))
                xtest_attribute_instance.write
                  [xself]
                    memory > xdefault_renderer
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xdefault_renderer.write (((xDjangoTemplates)).apply)
                        xform.write (((xCustomForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xrenderer)) (((xCustomForm).xdefault_renderer)))
                xtest_attribute_class.write
                  [xself]
                    memory > xdefault_renderer
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xdefault_renderer.write (xCustomRenderer)
                        xform.write (((xCustomForm)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xform).xrenderer)) (((xCustomForm).xdefault_renderer)))
                xtest_attribute_override.write
                  [xself]
                    memory > xdefault_renderer
                    memory > xform
                    memory > xcustom
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xdefault_renderer.write (((xDjangoTemplates)).apply)
                        xcustom.write (((xCustomRenderer)).apply)
                        xform.write (((unsupported)).apply ((xCustomForm)) ((xcustom)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xrenderer)) ((xcustom)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_iterate_radios.write
                  [xself]
                    memory > xt
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xFrameworkForm)) ("id_%s"))
                        xt.write (((xTemplate)).apply ("{% for radio in form.language %}<div class=\"myradio\">{{ radio }}</div>{% endfor %}"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<div class=\"myradio\"><label for=\"id_language_0\"><input id=\"id_language_0\" name=\"language\" type=\"radio\" value=\"P\" required> Python</label></div><div class=\"myradio\"><label for=\"id_language_1\"><input id=\"id_language_1\" name=\"language\" type=\"radio\" value=\"J\" required> Java</label></div>"))
                xtest_iterate_checkboxes.write
                  [xself]
                    memory > xt
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xSongForm)) ((((unsupported)).apply ("composers") ((((unsupported)).apply ("J") ("P"))))) (FALSE))
                        xt.write (((xTemplate)).apply ("{% for checkbox in form.composers %}<div class=\"mycheckbox\">{{ checkbox }}</div>{% endfor %}"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<div class=\"mycheckbox\"><label><input checked name=\"composers\" type=\"checkbox\" value=\"J\"> John Lennon</label></div><div class=\"mycheckbox\"><label><input checked name=\"composers\" type=\"checkbox\" value=\"P\"> Paul McCartney</label></div>"))
                xtest_templates_with_forms.write
                  [xself]
                    memory > xclean
                    memory > xpassword2
                    memory > xt
                    memory > xf
                    memory > xusername
                    memory > xpassword1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10) ("Good luck picking a username that doesn't already exist."))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                seq > @
                                  seq
                                    (((((((xself).xcleaned_data).xget)).apply ("password1")).and (((((xself).xcleaned_data).xget)).apply ("password2"))).and ((((unsupported)).apply (((xself).xcleaned_data)) ("password1")).neq (((unsupported)).apply (((xself).xcleaned_data)) ("password2")))).if
                                      (((unsupported)).apply ((((xValidationError)).apply ("Please make sure your passwords match."))))
                                    (((unsupported)).apply (((xself).xcleaned_data)))
                        xt.write (((xTemplate)).apply ("<form>{{ form.username.errors.as_ul }}<p><label>Your username: {{ form.username }}</label></p>{{ form.password1.errors.as_ul }}<p><label>Password: {{ form.password1 }}</label></p>{{ form.password2.errors.as_ul }}<p><label>Password (again): {{ form.password2 }}</label></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><label>Your username: <input type=\"text\" name=\"username\" maxlength=\"10\" required></label></p><p><label>Password: <input type=\"password\" name=\"password1\" required></label></p><p><label>Password (again): <input type=\"password\" name=\"password2\" required></label></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("django"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><label>Your username: <input type=\"text\" name=\"username\" value=\"django\" maxlength=\"10\" required></label></p><ul class=\"errorlist\"><li>This field is required.</li></ul><p><label>Password: <input type=\"password\" name=\"password1\" required></label></p><ul class=\"errorlist\"><li>This field is required.</li></ul><p><label>Password (again): <input type=\"password\" name=\"password2\" required></label></p><input type=\"submit\" required></form>"))
                        xt.write (((xTemplate)).apply ("<form><p><label>{{ form.username.label }}: {{ form.username }}</label></p><p><label>{{ form.password1.label }}: {{ form.password1 }}</label></p><p><label>{{ form.password2.label }}: {{ form.password2 }}</label></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><label>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required></label></p><p><label>Password1: <input type=\"password\" name=\"password1\" required></label></p><p><label>Password2: <input type=\"password\" name=\"password2\" required></label></p><input type=\"submit\" required></form>"))
                        xt.write (((xTemplate)).apply ("<form><p>{{ form.username.label_tag }} {{ form.username }}</p><p>{{ form.password1.label_tag }} {{ form.password1 }}</p><p>{{ form.password2.label_tag }} {{ form.password2 }}</p><input type=\"submit\" required></form>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required></p><p>Password1: <input type=\"password\" name=\"password1\" required></p><p>Password2: <input type=\"password\" name=\"password2\" required></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><label for=\"id_username\">Username:</label><input id=\"id_username\" type=\"text\" name=\"username\" maxlength=\"10\" required></p><p><label for=\"id_password1\">Password1:</label><input type=\"password\" name=\"password1\" id=\"id_password1\" required></p><p><label for=\"id_password2\">Password2:</label><input type=\"password\" name=\"password2\" id=\"id_password2\" required></p><input type=\"submit\" required></form>"))
                        xt.write (((xTemplate)).apply ("<form><p>{{ form.username.legend_tag }} {{ form.username }}</p><p>{{ form.password1.legend_tag }} {{ form.password1 }}</p><p>{{ form.password2.legend_tag }} {{ form.password2 }}</p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required></p><p>Password1: <input type=\"password\" name=\"password1\" required></p><p>Password2: <input type=\"password\" name=\"password2\" required></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ("id_%s"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><legend for=\"id_username\">Username:</legend><input id=\"id_username\" type=\"text\" name=\"username\" maxlength=\"10\" required></p><p><legend for=\"id_password1\">Password1:</legend><input type=\"password\" name=\"password1\" id=\"id_password1\" required></p><p><legend for=\"id_password2\">Password2:</legend><input type=\"password\" name=\"password2\" id=\"id_password2\" required></p><input type=\"submit\" required></form>"))
                        xt.write (((xTemplate)).apply ("<form><p>{{ form.username.label_tag }} {{ form.username }}<br>{{ form.username.help_text }}</p><p>{{ form.password1.label_tag }} {{ form.password1 }}</p><p>{{ form.password2.label_tag }} {{ form.password2 }}</p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required><br>Good luck picking a username that doesn&#x27;t already exist.</p><p>Password1: <input type=\"password\" name=\"password1\" required></p><p>Password2: <input type=\"password\" name=\"password2\" required></p><input type=\"submit\" required></form>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xTemplate)).apply ("{{ form.password1.help_text }}")).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) (""))
                        xt.write (((xTemplate)).apply ("<form>{{ form.username.errors.as_ul }}<p><label>Your username: {{ form.username }}</label></p>{{ form.password1.errors.as_ul }}<p><label>Password: {{ form.password1 }}</label></p>{{ form.password2.errors.as_ul }}<p><label>Password (again): {{ form.password2 }}</label></p><input type=\"submit\" required></form>"))
                        xf.write (((unsupported)).apply ((xUserRegistration)) ((((unsupported)).apply ("username") ("django") ("password1") ("foo") ("password2") ("bar"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><p><label>Your username: <input type=\"text\" name=\"username\" value=\"django\" maxlength=\"10\" required></label></p><p><label>Password: <input type=\"password\" name=\"password1\" required></label></p><p><label>Password (again): <input type=\"password\" name=\"password2\" required></label></p><input type=\"submit\" required></form>"))
                        xt.write (((xTemplate)).apply ("<form>{{ form.non_field_errors }}{{ form.username.errors.as_ul }}<p><label>Your username: {{ form.username }}</label></p>{{ form.password1.errors.as_ul }}<p><label>Password: {{ form.password1 }}</label></p>{{ form.password2.errors.as_ul }}<p><label>Password (again): {{ form.password2 }}</label></p><input type=\"submit\" required></form>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<form><ul class=\"errorlist nonfield\"><li>Please make sure your passwords match.</li></ul><p><label>Your username: <input type=\"text\" name=\"username\" value=\"django\" maxlength=\"10\" required></label></p><p><label>Password: <input type=\"password\" name=\"password1\" required></label></p><p><label>Password (again): <input type=\"password\" name=\"password2\" required></label></p><input type=\"submit\" required></form>"))
                xtest_basic_processing_in_view.write
                  [xself]
                    memory > xclean
                    memory > xpassword2
                    memory > xmy_function
                    memory > xusername
                    memory > xpassword1
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xusername.write (((unsupported)).apply ((xCharField)) (10))
                            xpassword1.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xpassword2.write (((unsupported)).apply ((xCharField)) ((xPasswordInput)))
                            xclean.write
                              [xself]
                                seq > @
                                  seq
                                    (((((((xself).xcleaned_data).xget)).apply ("password1")).and (((((xself).xcleaned_data).xget)).apply ("password2"))).and ((((unsupported)).apply (((xself).xcleaned_data)) ("password1")).neq (((unsupported)).apply (((xself).xcleaned_data)) ("password2")))).if
                                      (((unsupported)).apply ((((xValidationError)).apply ("Please make sure your passwords match."))))
                                    (((unsupported)).apply (((xself).xcleaned_data)))
                        xmy_function.write
                          [xmethod xpost_data]
                            memory > xt
                            memory > xform
                            seq > @
                              seq
                                ((xmethod).eq "POST").if
                                  xform.write (((unsupported)).apply ((xUserRegistration)) ((xpost_data)) (FALSE))
                                  xform.write (((unsupported)).apply ((xUserRegistration)) (FALSE))
                                ((((xform).xis_valid)).apply).if
                                  (((unsupported)).apply (("VALID: %r".mod (((xsorted)).apply ((((((xform).xcleaned_data).xitems)).apply))))))
                                xt.write (((xTemplate)).apply ("<form method=\"post\"><table>{{ form }}</table><input type=\"submit\" required></form>"))
                                (((unsupported)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xform)))))))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xmy_function)).apply ("GET") ((((unsupported)).apply)))) ("<form method=\"post\"><table><tr><th>Username:</th><td><input type=\"text\" name=\"username\" maxlength=\"10\" required></td></tr><tr><th>Password1:</th><td><input type=\"password\" name=\"password1\" required></td></tr><tr><th>Password2:</th><td><input type=\"password\" name=\"password2\" required></td></tr></table><input type=\"submit\" required></form>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xmy_function)).apply ("POST") ((((unsupported)).apply ("username") ("this-is-a-long-username") ("password1") ("foo") ("password2") ("bar"))))) ("<form method=\"post\"><table><tr><td colspan=\"2\"><ul class=\"errorlist nonfield\"><li>Please make sure your passwords match.</li></ul></td></tr><tr><th>Username:</th><td><ul class=\"errorlist\"><li>Ensure this value has at most 10 characters (it has 23).</li></ul><input type=\"text\" name=\"username\" value=\"this-is-a-long-username\" maxlength=\"10\" required></td></tr><tr><th>Password1:</th><td><input type=\"password\" name=\"password1\" required></td></tr><tr><th>Password2:</th><td><input type=\"password\" name=\"password2\" required></td></tr></table><input type=\"submit\" required></form>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmy_function)).apply ("POST") ((((unsupported)).apply ("username") ("adrian") ("password1") ("secret") ("password2") ("secret"))))) ("VALID: [('password1', 'secret'), ('password2', 'secret'), ('username', 'adrian')]"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_use_custom_template.write
                  [xself]
                    memory > xexpected
                    memory > xt
                    memory > xtemplate_name
                    memory > xfirst_name
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xtemplate_name.write "forms_tests/form_snippet.html"
                        xt.write (((xTemplate)).apply ("{{ form }}"))
                        xhtml.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((((xPerson)).apply)))))))
                        xexpected.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((xhtml)) ((xexpected)))
                xtest_errorlist_override.write
                  [xself]
                    memory > xdata
                    memory > xcomment
                    memory > xemail
                    memory > xtemplate_name
                    memory > xf
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply ((xErrorList)))
                          xtemplate_name.write "forms_tests/error.html"
                        (((unsupported)).apply ((xForm)))
                          seq
                            xname.write (((unsupported)).apply ((xCharField)) (50) (FALSE))
                            xemail.write (((xEmailField)).apply)
                            xcomment.write (((xCharField)).apply)
                        xdata.write (((unsupported)).apply ("email") ("invalid"))
                        xf.write (((unsupported)).apply ((xCommentForm)) ((xdata)) (FALSE) ((xCustomErrorList)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xf).xas_p)).apply)) ("<p>Name: <input type=\"text\" name=\"name\" maxlength=\"50\"></p><div class=\"errorlist\"><div class=\"error\">Enter a valid email address.</div></div><p>Email: <input type=\"email\" name=\"email\" value=\"invalid\" required></p><div class=\"errorlist\"><div class=\"error\">This field is required.</div></div><p>Comment: <input type=\"text\" name=\"comment\" required></p>"))
                xtest_cyclic_context_boundfield_render.write
                  [xself]
                    memory > xfirst_name
                    memory > xtemplate_name_label
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xtemplate_name_label.write "forms_tests/cyclic_context_boundfield_render.html"
                        xf.write (((xFirstNameForm)).apply)
                        (((unsupported)).apply ((xRecursionError)))
                          bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<th>1</th>") (((((xf).xrender)).apply)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Cyclic reference in BoundField.render()."))
                xtest_legend_tag.write
                  [xself]
                    memory > xtemplate_name
                    memory > xrequired_css_class
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xFrameworkForm)))
                          seq
                            xtemplate_name.write "forms_tests/legend_test.html"
                            xrequired_css_class.write "required"
                        xf.write (((xCustomFrameworkForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((xf)))) ("<label for=\"id_name\" class=\"required\">Name:</label><legend class=\"required\">Language:</legend>"))