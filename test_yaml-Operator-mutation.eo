memory > xImportError
memory > xmanagement
memory > ximportlib
memory > xSerializersTestBase
memory > xstr
memory > xobj_dict
memory > xSerializersTransactionTestBase
memory > xException
memory > xTransactionTestCase
memory > xobj
memory > xyaml
memory > xTestCase
memory > xAuthor
memory > xDeserializationError
memory > xYamlImportModuleMock
memory > xsuper
memory > xserializers
memory > xStringIO
memory > xunittest
memory > xisinstance
memory > xSimpleTestCase
[] > test_yaml
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_deserializer_pyyaml_error_message
        memory > xtest_serializer_pyyaml_error_message
        memory > x_get_pk_values
        memory > ximport_module
        memory > x_validate_output
        memory > xYAML_IMPORT_ERROR_MESSAGE
        memory > xserializer_name
        memory > xsetUpClass
        memory > xtest_yaml_deserializer_exception
        memory > xfwd_ref_str
        memory > xHAS_YAML
        memory > xpkless_str
        memory > x__init__
        memory > xtest_dumpdata_pyyaml_error_message
        memory > x_get_field_values
        memory > xtearDownClass
        memory > xmapping_ordering_str
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                xHAS_YAML.write TRUE
              xHAS_YAML.write FALSE
            xYAML_IMPORT_ERROR_MESSAGE.write "No module named yaml"
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_import_module)) (((ximportlib).ximport_module)))
                ximport_module.write
                  [xself xmodule_path]
                    seq > @
                      seq
                        ((xmodule_path).eq (((unsupported)).apply (((xserializers).xBUILTIN_SERIALIZERS)) ("yaml"))).if
                          (((unsupported)).apply ((((xImportError)).apply ((xYAML_IMPORT_ERROR_MESSAGE)))))
                        (((unsupported)).apply (((((xself).x_import_module)).apply ((xmodule_path)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                        (((unsupported)).apply (((xcls).x_import_module_mock)) ((((xYamlImportModuleMock)).apply)))
                        (((unsupported)).apply (((ximportlib).ximport_module)) ((((xcls).x_import_module_mock).ximport_module)))
                        (((unsupported)).apply (((xserializers).x_serializers)) ((((unsupported)).apply)))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDownClass)).apply)
                        (((unsupported)).apply (((ximportlib).ximport_module)) ((((xcls).x_import_module_mock).x_import_module)))
                        (((unsupported)).apply (((xserializers).x_serializers)) ((((unsupported)).apply)))
                xtest_serializer_pyyaml_error_message.write
                  [xself]
                    memory > xjane
                    seq > @
                      seq
                        unsupported
                        xjane.write (((unsupported)).apply ((xAuthor)) ("Jane"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write ((((xserializers).xserialize)).apply ("yaml") ((((unsupported)).apply ((xjane)))))
                xtest_deserializer_pyyaml_error_message.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write ((((xserializers).xdeserialize)).apply ("yaml") (""))
                xtest_dumpdata_pyyaml_error_message.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xmanagement).xCommandError)) ((xYAML_IMPORT_ERROR_MESSAGE)))))
                          (((unsupported)).apply (((xmanagement).xcall_command)) ("dumpdata") ("yaml"))
            (((unsupported)).apply ((xSerializersTestBase)) ((xTestCase)) (((((xunittest).xskipUnless)).apply ((xHAS_YAML)) ("No yaml library detected"))))
              seq
                xserializer_name.write "yaml"
                xpkless_str.write (((unsupported)).apply)
                xmapping_ordering_str.write (((((unsupported)).apply).sub (((xHAS_YAML).and (((xyaml).x__version__).less "5.1")).if " [%(first_category_pk)s, %(second_category_pk)s]" "n    - %(first_category_pk)sn    - %(second_category_pk)s")).sub (((unsupported)).apply))
                x_validate_output.write
                  [xserial_str]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write ((((xyaml).xsafe_load)).apply ((((xStringIO)).apply ((xserial_str)))))
                          (((unsupported)).apply (FALSE))
                          (((unsupported)).apply (TRUE))
                x_get_pk_values.write
                  [xserial_str]
                    memory > xret_list
                    memory > xstream
                    seq > @
                      (((unsupported)).apply)
                        xret_list.write (((unsupported)).apply)
                        xstream.write (((xStringIO)).apply ((xserial_str)))
                        (((unsupported)).apply ((xobj_dict)) (((((xyaml).xsafe_load)).apply ((xstream)))))
                          bogusForceDataize.write ((((xret_list).xappend)).apply ((((unsupported)).apply ((xobj_dict)) ("pk"))))
                        (((unsupported)).apply ((xret_list)))
                x_get_field_values.write
                  [xserial_str xfield_name]
                    memory > xfield_value
                    memory > xret_list
                    memory > xstream
                    seq > @
                      (((unsupported)).apply)
                        xret_list.write (((unsupported)).apply)
                        xstream.write (((xStringIO)).apply ((xserial_str)))
                        (((unsupported)).apply ((xobj_dict)) (((((xyaml).xsafe_load)).apply ((xstream)))))
                          ((((unsupported)).apply ("fields") ((xobj_dict))).and (((unsupported)).apply ((xfield_name)) ((((unsupported)).apply ((xobj_dict)) ("fields"))))).if
                            seq
                              xfield_value.write (((unsupported)).apply ((((unsupported)).apply ((xobj_dict)) ("fields"))) ((xfield_name)))
                              (((xisinstance)).apply ((xfield_value)) ((xstr))).if
                                bogusForceDataize.write ((((xret_list).xappend)).apply ((xfield_value)))
                                bogusForceDataize.write ((((xret_list).xappend)).apply ((((xstr)).apply ((xfield_value)))))
                        (((unsupported)).apply ((xret_list)))
                xtest_yaml_deserializer_exception.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDeserializationError)))))
                        (((unsupported)).apply ((xobj)) (((((xserializers).xdeserialize)).apply ("yaml") ("{"))))
            (((unsupported)).apply ((xSerializersTransactionTestBase)) ((xTransactionTestCase)) (((((xunittest).xskipUnless)).apply ((xHAS_YAML)) ("No yaml library detected"))))
              seq
                xserializer_name.write "yaml"
                xfwd_ref_str.write (((unsupported)).apply)