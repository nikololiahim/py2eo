memory > xparsed
memory > xAttributeError
memory > xValueError
memory > xurlparse
memory > xis_same_domain
memory > xget_callable
memory > xRejectRequest
memory > xKeyError
memory > xorigin
memory > xInvalidTokenFormat
memory > xgetattr
memory > xdefaultdict
memory > xzip
memory > xImproperlyConfigured
memory > xlen
memory > x_lazy_re_compile
memory > xconstant_time_compare
memory > xlist
memory > xHttpHeaders
memory > xany
memory > xstring
memory > xget_random_string
memory > xsettings
memory > xException
memory > xhost
memory > xx
memory > xlog_response
memory > xMiddlewareMixin
memory > xexc
memory > xy
memory > xUnreadablePostError
memory > xDisallowedHost
memory > xpatch_vary_headers
memory > xlogging
[] > csrf
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlogger
        memory > xREASON_INSECURE_REFERER
        memory > xREASON_INCORRECT_LENGTH
        memory > x_origin_verified
        memory > xREASON_NO_CSRF_COOKIE
        memory > x_get_secret
        memory > xREASON_MALFORMED_REFERER
        memory > xinvalid_token_chars_re
        memory > xallowed_origin_subdomains
        memory > x_reject
        memory > x_set_csrf_cookie
        memory > x_check_token_format
        memory > x_get_failure_view
        memory > x_does_token_match
        memory > xallowed_origins_exact
        memory > xREASON_BAD_REFERER
        memory > x_bad_token_message
        memory > x_check_referer
        memory > xprocess_response
        memory > xREASON_INVALID_CHARACTERS
        memory > x_add_new_csrf_cookie
        memory > x_mask_cipher_secret
        memory > x_get_new_csrf_string
        memory > xCSRF_SESSION_KEY
        memory > x_accept
        memory > xCSRF_SECRET_LENGTH
        memory > xprocess_request
        memory > xREASON_NO_REFERER
        memory > xREASON_CSRF_TOKEN_MISSING
        memory > xcsrf_trusted_origins_hosts
        memory > x_unmask_cipher_token
        memory > xCSRF_ALLOWED_CHARS
        memory > xrotate_token
        memory > xCSRF_TOKEN_LENGTH
        memory > x__init__
        memory > xprocess_view
        memory > xREASON_BAD_ORIGIN
        memory > x_check_token
        memory > xget_token
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.security.csrf"))
            xinvalid_token_chars_re.write (((x_lazy_re_compile)).apply ("[^a-zA-Z0-9]"))
            xREASON_BAD_ORIGIN.write "Origin checking failed - %s does not match any trusted origins."
            xREASON_NO_REFERER.write "Referer checking failed - no Referer."
            xREASON_BAD_REFERER.write "Referer checking failed - %s does not match any trusted origins."
            xREASON_NO_CSRF_COOKIE.write "CSRF cookie not set."
            xREASON_CSRF_TOKEN_MISSING.write "CSRF token missing."
            xREASON_MALFORMED_REFERER.write "Referer checking failed - Referer is malformed."
            xREASON_INSECURE_REFERER.write "Referer checking failed - Referer is insecure while host is secure."
            xREASON_INCORRECT_LENGTH.write "has incorrect length"
            xREASON_INVALID_CHARACTERS.write "has invalid characters"
            xCSRF_SECRET_LENGTH.write 32
            xCSRF_TOKEN_LENGTH.write (2.mul (xCSRF_SECRET_LENGTH))
            xCSRF_ALLOWED_CHARS.write (((xstring).xascii_letters).add ((xstring).xdigits))
            xCSRF_SESSION_KEY.write "_csrftoken"
            x_get_failure_view.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xget_callable)).apply (((xsettings).xCSRF_FAILURE_VIEW)))))
            x_get_new_csrf_string.write
              []
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xget_random_string)) ((xCSRF_SECRET_LENGTH)) ((xCSRF_ALLOWED_CHARS)))))
            x_mask_cipher_secret.write
              [xsecret]
                memory > xchars
                memory > xpairs
                memory > xcipher
                memory > xmask
                seq > @
                  seq
                    (((unsupported)).apply)
                    xmask.write (((x_get_new_csrf_string)).apply)
                    xchars.write (xCSRF_ALLOWED_CHARS)
                    xpairs.write (((xzip)).apply ((((unsupported)).apply (((((xchars).xindex)).apply ((xx)))) ((xx)) ((xsecret)))) ((((unsupported)).apply (((((xchars).xindex)).apply ((xx)))) ((xx)) ((xmask)))))
                    xcipher.write ((("".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply ((xchars)) ((((xx).add (xy)).mod (((xlen)).apply ((xchars))))))) ((((unsupported)).apply ((xx)) ((xy)))) ((xpairs)))))
                    (((unsupported)).apply (((xmask).add (xcipher))))
            x_unmask_cipher_token.write
              [xtoken]
                memory > xchars
                memory > xpairs
                memory > xmask
                seq > @
                  seq
                    (((unsupported)).apply)
                    xmask.write (((unsupported)).apply ((xtoken)) ((((unsupported)).apply ((xCSRF_SECRET_LENGTH)))))
                    xtoken.write (((unsupported)).apply ((xtoken)) ((((unsupported)).apply ((xCSRF_SECRET_LENGTH)))))
                    xchars.write (xCSRF_ALLOWED_CHARS)
                    xpairs.write (((xzip)).apply ((((unsupported)).apply (((((xchars).xindex)).apply ((xx)))) ((xx)) ((xtoken)))) ((((unsupported)).apply (((((xchars).xindex)).apply ((xx)))) ((xx)) ((xmask)))))
                    (((unsupported)).apply (((("".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply ((xchars)) (((xx).sub (xy))))) ((((unsupported)).apply ((xx)) ((xy)))) ((xpairs)))))))
            x_add_new_csrf_cookie.write
              [xrequest]
                memory > xcsrf_secret
                seq > @
                  seq
                    unsupported
                    xcsrf_secret.write (((x_get_new_csrf_string)).apply)
                    bogusForceDataize.write (((((xrequest).xMETA).xupdate)).apply ((((unsupported)).apply ("CSRF_COOKIE") ((((xsettings).xCSRF_COOKIE_MASKED).if (((x_mask_cipher_secret)).apply ((xcsrf_secret))) (xcsrf_secret))) ("CSRF_COOKIE_NEEDS_UPDATE") (TRUE))))
                    (((unsupported)).apply ((xcsrf_secret)))
            xget_token.write
              [xrequest]
                memory > xcsrf_secret
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ("CSRF_COOKIE") (((xrequest).xMETA))).if
                      seq
                        xcsrf_secret.write (((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE"))
                        (((unsupported)).apply ((((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE_NEEDS_UPDATE"))) (TRUE))
                      xcsrf_secret.write (((x_add_new_csrf_cookie)).apply ((xrequest)))
                    (((unsupported)).apply ((((x_mask_cipher_secret)).apply ((xcsrf_secret)))))
            xrotate_token.write
              [xrequest]
                seq > @
                  seq
                    (((unsupported)).apply)
                    bogusForceDataize.write (((x_add_new_csrf_cookie)).apply ((xrequest)))
            (((unsupported)).apply ((xException)))
              x__init__.write
                [xself xreason]
                  seq > @
                    (((unsupported)).apply (((xself).xreason)) ((xreason)))
            x_check_token_format.write
              [xtoken]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xlen)).apply ((xtoken)))) ((((unsupported)).apply ((xCSRF_TOKEN_LENGTH)) ((xCSRF_SECRET_LENGTH))))).if
                      (((unsupported)).apply ((((xInvalidTokenFormat)).apply ((xREASON_INCORRECT_LENGTH)))))
                    ((((xinvalid_token_chars_re).xsearch)).apply ((xtoken))).if
                      (((unsupported)).apply ((((xInvalidTokenFormat)).apply ((xREASON_INVALID_CHARACTERS)))))
            x_does_token_match.write
              [xrequest_csrf_token xcsrf_secret]
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((((xlen)).apply ((xrequest_csrf_token))).eq (xCSRF_TOKEN_LENGTH)).if
                      xrequest_csrf_token.write (((x_unmask_cipher_token)).apply ((xrequest_csrf_token)))
                    (((unsupported)).apply (((((xlen)).apply ((xrequest_csrf_token))).eq (xCSRF_SECRET_LENGTH))))
                    (((unsupported)).apply ((((xconstant_time_compare)).apply ((xrequest_csrf_token)) ((xcsrf_secret)))))
            (((unsupported)).apply ((xException)))
              x__init__.write
                [xself xreason]
                  seq > @
                    (((unsupported)).apply (((xself).xreason)) ((xreason)))
            (((unsupported)).apply ((xMiddlewareMixin)))
              seq
                (((unsupported)).apply)
                xcsrf_trusted_origins_hosts.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((((((xurlparse)).apply ((xorigin))).xnetloc).xlstrip)).apply ("*"))) ((xorigin)) (((xsettings).xCSRF_TRUSTED_ORIGINS)))))
                xallowed_origins_exact.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xorigin)) ((xorigin)) (((xsettings).xCSRF_TRUSTED_ORIGINS)) ((((unsupported)).apply ("*") ((xorigin)))))))
                xallowed_origin_subdomains.write
                  [xself]
                    memory > xallowed_origin_subdomains
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xallowed_origin_subdomains.write (((xdefaultdict)).apply ((xlist)))
                        (((unsupported)).apply ((xparsed)) ((((unsupported)).apply ((((xurlparse)).apply ((xorigin)))) ((xorigin)) (((xsettings).xCSRF_TRUSTED_ORIGINS)) ((((unsupported)).apply ("*") ((xorigin)))))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xallowed_origin_subdomains)) (((xparsed).xscheme))).xappend)).apply ((((((xparsed).xnetloc).xlstrip)).apply ("*"))))
                        (((unsupported)).apply ((xallowed_origin_subdomains)))
                x_accept.write
                  [xself xrequest]
                    seq > @
                      seq
                        (((unsupported)).apply (((xrequest).xcsrf_processing_done)) (TRUE))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                x_reject.write
                  [xself xrequest xreason]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((((x_get_failure_view)).apply)) ((xrequest)) ((xreason)))
                        (((unsupported)).apply ((xlog_response)) ("Forbidden (%s): %s") ((xreason)) (((xrequest).xpath)) ((xresponse)) ((xrequest)) ((xlogger)))
                        (((unsupported)).apply ((xresponse)))
                x_get_secret.write
                  [xself xrequest]
                    memory > xcsrf_secret
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xsettings).xCSRF_USE_SESSIONS).if
                          (((unsupported)).apply ((xAttributeError)))
                            xcsrf_secret.write (((((xrequest).xsession).xget)).apply ((xCSRF_SESSION_KEY)))
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("CSRF_USE_SESSIONS is enabled, but request.session is not set. SessionMiddleware must appear before CsrfViewMiddleware in MIDDLEWARE."))))
                          (((unsupported)).apply ((xKeyError)))
                            xcsrf_secret.write (((unsupported)).apply (((xrequest).xCOOKIES)) (((xsettings).xCSRF_COOKIE_NAME)))
                            xcsrf_secret.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write (((x_check_token_format)).apply ((xcsrf_secret)))
                        (((unsupported)).apply ((xcsrf_secret)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((((xlen)).apply ((xcsrf_secret))).eq (xCSRF_TOKEN_LENGTH)).if
                          xcsrf_secret.write (((x_unmask_cipher_token)).apply ((xcsrf_secret)))
                        (((unsupported)).apply ((xcsrf_secret)))
                x_set_csrf_cookie.write
                  [xself xrequest xresponse]
                    seq > @
                      ((xsettings).xCSRF_USE_SESSIONS).if
                        ((((((xrequest).xsession).xget)).apply ((xCSRF_SESSION_KEY))).neq (((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE"))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xrequest).xsession)) ((xCSRF_SESSION_KEY)))) ((((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE"))))
                        seq
                          (((unsupported)).apply (((xresponse).xset_cookie)) (((xsettings).xCSRF_COOKIE_NAME)) ((((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE"))) (((xsettings).xCSRF_COOKIE_AGE)) (((xsettings).xCSRF_COOKIE_DOMAIN)) (((xsettings).xCSRF_COOKIE_PATH)) (((xsettings).xCSRF_COOKIE_SECURE)) (((xsettings).xCSRF_COOKIE_HTTPONLY)) (((xsettings).xCSRF_COOKIE_SAMESITE)))
                          bogusForceDataize.write (((xpatch_vary_headers)).apply ((xresponse)) ((((unsupported)).apply ("Cookie"))))
                x_origin_verified.write
                  [xself xrequest]
                    memory > xrequest_origin
                    memory > xgood_host
                    memory > xgood_origin
                    memory > xparsed_origin
                    memory > xrequest_scheme
                    memory > xrequest_netloc
                    seq > @
                      seq
                        xrequest_origin.write (((unsupported)).apply (((xrequest).xMETA)) ("HTTP_ORIGIN"))
                        (((unsupported)).apply ((xDisallowedHost)))
                          xgood_host.write ((((xrequest).xget_host)).apply)
                          seq
                            xgood_origin.write ("%s://%s".mod (((unsupported)).apply ((((((xrequest).xis_secure)).apply).if "https" "http")) ((xgood_host))))
                            ((xrequest_origin).eq (xgood_origin)).if
                              (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xrequest_origin)) (((xself).xallowed_origins_exact))).if
                          (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xValueError)))
                          xparsed_origin.write (((xurlparse)).apply ((xrequest_origin)))
                          (((unsupported)).apply (FALSE))
                        xrequest_scheme.write ((xparsed_origin).xscheme)
                        xrequest_netloc.write ((xparsed_origin).xnetloc)
                        (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply ((((xis_same_domain)).apply ((xrequest_netloc)) ((xhost)))) ((xhost)) ((((((xself).xallowed_origin_subdomains).xget)).apply ((xrequest_scheme)) ((((unsupported)).apply)))))))))
                x_check_referer.write
                  [xself xrequest]
                    memory > xreferer
                    memory > xgood_referer
                    memory > xserver_port
                    seq > @
                      seq
                        xreferer.write (((((xrequest).xMETA).xget)).apply ("HTTP_REFERER"))
                        (((unsupported)).apply ((xreferer)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_NO_REFERER)))))
                        (((unsupported)).apply ((xValueError)))
                          xreferer.write (((xurlparse)).apply ((xreferer)))
                          (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_MALFORMED_REFERER)))))
                        (((unsupported)).apply ("") ((((unsupported)).apply (((xreferer).xscheme)) (((xreferer).xnetloc))))).if
                          (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_MALFORMED_REFERER)))))
                        (((xreferer).xscheme).neq "https").if
                          (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_INSECURE_REFERER)))))
                        (((xany)).apply ((((unsupported)).apply ((((xis_same_domain)).apply (((xreferer).xnetloc)) ((xhost)))) ((xhost)) (((xself).xcsrf_trusted_origins_hosts))))).if
                          (((unsupported)).apply)
                        xgood_referer.write (((xsettings).xCSRF_USE_SESSIONS).if ((xsettings).xSESSION_COOKIE_DOMAIN) ((xsettings).xCSRF_COOKIE_DOMAIN))
                        (((unsupported)).apply ((xgood_referer)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xDisallowedHost)))
                            xgood_referer.write ((((xrequest).xget_host)).apply)
                            (((unsupported)).apply ((((xRejectRequest)).apply (((xREASON_BAD_REFERER).mod ((((xreferer).xgeturl)).apply))))))
                          seq
                            xserver_port.write ((((xrequest).xget_port)).apply)
                            (((unsupported)).apply ((xserver_port)) ((((unsupported)).apply ("443") ("80")))).if
                              xgood_referer.write ("%s:%s".mod (((unsupported)).apply ((xgood_referer)) ((xserver_port))))
                        ((((xis_same_domain)).apply (((xreferer).xnetloc)) ((xgood_referer))).not).if
                          (((unsupported)).apply ((((xRejectRequest)).apply (((xREASON_BAD_REFERER).mod ((((xreferer).xgeturl)).apply))))))
                x_bad_token_message.write
                  [xself xreason xtoken_source]
                    memory > xheader_name
                    seq > @
                      seq
                        ((xtoken_source).neq "POST").if
                          seq
                            xheader_name.write ((((xHttpHeaders).xparse_header_name)).apply ((xtoken_source)))
                            xtoken_source.write "the {header_name!r} HTTP header"
                        (((unsupported)).apply ("CSRF token from {token_source} {reason}."))
                x_check_token.write
                  [xself xrequest]
                    memory > xcsrf_secret
                    memory > xrequest_csrf_token
                    memory > xtoken_source
                    memory > xreason
                    seq > @
                      seq
                        (((unsupported)).apply ((xInvalidTokenFormat)))
                          xcsrf_secret.write ((((xself).x_get_secret)).apply ((xrequest)))
                          (((unsupported)).apply ((((xRejectRequest)).apply ("CSRF cookie {exc.reason}."))))
                        (((unsupported)).apply ((xcsrf_secret)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_NO_CSRF_COOKIE)))))
                        xrequest_csrf_token.write ""
                        (((xrequest).xmethod).eq "POST").if
                          (((unsupported)).apply ((xUnreadablePostError)))
                            xrequest_csrf_token.write (((((xrequest).xPOST).xget)).apply ("csrfmiddlewaretoken") (""))
                        ((xrequest_csrf_token).eq "").if
                          seq
                            (((unsupported)).apply ((xKeyError)))
                              xrequest_csrf_token.write (((unsupported)).apply (((xrequest).xMETA)) (((xsettings).xCSRF_HEADER_NAME)))
                              (((unsupported)).apply ((((xRejectRequest)).apply ((xREASON_CSRF_TOKEN_MISSING)))))
                            xtoken_source.write ((xsettings).xCSRF_HEADER_NAME)
                          xtoken_source.write "POST"
                        (((unsupported)).apply ((xInvalidTokenFormat)))
                          bogusForceDataize.write (((x_check_token_format)).apply ((xrequest_csrf_token)))
                          seq
                            xreason.write ((((xself).x_bad_token_message)).apply (((xexc).xreason)) ((xtoken_source)))
                            (((unsupported)).apply ((((xRejectRequest)).apply ((xreason)))))
                        ((((x_does_token_match)).apply ((xrequest_csrf_token)) ((xcsrf_secret))).not).if
                          seq
                            xreason.write ((((xself).x_bad_token_message)).apply ("incorrect") ((xtoken_source)))
                            (((unsupported)).apply ((((xRejectRequest)).apply ((xreason)))))
                xprocess_request.write
                  [xself xrequest]
                    memory > xcsrf_secret
                    seq > @
                      (((unsupported)).apply ((xInvalidTokenFormat)))
                        xcsrf_secret.write ((((xself).x_get_secret)).apply ((xrequest)))
                        bogusForceDataize.write (((x_add_new_csrf_cookie)).apply ((xrequest)))
                        (((unsupported)).apply ((xcsrf_secret)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE"))) ((xcsrf_secret)))
                xprocess_view.write
                  [xself xrequest xcallback xcallback_args xcallback_kwargs]
                    seq > @
                      seq
                        (((xgetattr)).apply ((xrequest)) ("csrf_processing_done") (FALSE)).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((xgetattr)).apply ((xcallback)) ("csrf_exempt") (FALSE)).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xrequest).xmethod)) ((((unsupported)).apply ("GET") ("HEAD") ("OPTIONS") ("TRACE")))).if
                          (((unsupported)).apply (((((xself).x_accept)).apply ((xrequest)))))
                        (((xgetattr)).apply ((xrequest)) ("_dont_enforce_csrf_checks") (FALSE)).if
                          (((unsupported)).apply (((((xself).x_accept)).apply ((xrequest)))))
                        (((unsupported)).apply ("HTTP_ORIGIN") (((xrequest).xMETA))).if
                          (((((xself).x_origin_verified)).apply ((xrequest))).not).if
                            (((unsupported)).apply (((((xself).x_reject)).apply ((xrequest)) (((xREASON_BAD_ORIGIN).mod (((unsupported)).apply (((xrequest).xMETA)) ("HTTP_ORIGIN")))))))
                          ((((xrequest).xis_secure)).apply).if
                            (((unsupported)).apply ((xRejectRequest)))
                              bogusForceDataize.write ((((xself).x_check_referer)).apply ((xrequest)))
                              (((unsupported)).apply (((((xself).x_reject)).apply ((xrequest)) (((xexc).xreason)))))
                        (((unsupported)).apply ((xRejectRequest)))
                          bogusForceDataize.write ((((xself).x_check_token)).apply ((xrequest)))
                          (((unsupported)).apply (((((xself).x_reject)).apply ((xrequest)) (((xexc).xreason)))))
                        (((unsupported)).apply (((((xself).x_accept)).apply ((xrequest)))))
                xprocess_response.write
                  [xself xrequest xresponse]
                    seq > @
                      seq
                        (((((xrequest).xMETA).xget)).apply ("CSRF_COOKIE_NEEDS_UPDATE")).if
                          seq
                            bogusForceDataize.write ((((xself).x_set_csrf_cookie)).apply ((xrequest)) ((xresponse)))
                            (((unsupported)).apply ((((unsupported)).apply (((xrequest).xMETA)) ("CSRF_COOKIE_NEEDS_UPDATE"))) (FALSE))
                        (((unsupported)).apply ((xresponse)))