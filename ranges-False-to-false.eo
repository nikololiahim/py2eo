memory > xDateTimeRangeContains
memory > xContinuousRangeField
memory > xValueError
memory > xstr
memory > xlookups
memory > xKeyError
memory > xrhs
memory > xpath
memory > xhasattr
memory > xsuper
memory > xtuple
memory > xargs
memory > xsql
memory > xname
memory > xisinstance
memory > xfalse
memory > xlhs_params
memory > xrhs_params
memory > xforms
memory > xAttributeError
memory > xDateTimeTZRange
memory > xdatetime
memory > xlist
memory > xRangeField
memory > xRangeContainedBy
memory > xRange
memory > xAttributeSetter
memory > xend
memory > xparams
memory > xNumericRange
memory > xgetattr
memory > xmodels
memory > xPostgresOperatorLookup
memory > xjson
memory > xRangeOperators
memory > xDateTimeRangeField
memory > xDateRange
memory > xkwargs
memory > xDateRangeField
memory > xTypeError
[] > ranges
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xOVERLAPS
        memory > xformfield
        memory > xNOT_GT
        memory > xFULLY_GT
        memory > xCONTAINED_BY
        memory > xlookup_name
        memory > x__init__
        memory > xget_prep_value
        memory > xmodel
        memory > xNOT_LT
        memory > xform_field
        memory > xADJACENT_TO
        memory > xbase_field
        memory > xset_attributes_from_name
        memory > xvalue_to_string
        memory > xget_prep_lookup
        memory > xas_postgresql
        memory > xCANONICAL_RANGE_BOUNDS
        memory > xEQUAL
        memory > xempty_strings_allowed
        memory > xas_sql
        memory > xtype_mapping
        memory > xto_python
        memory > xprocess_lhs
        memory > xCONTAINS
        memory > xrange_type
        memory > x__all__
        memory > xFULLY_LT
        memory > xNOT_EQUAL
        memory > xdb_type
        memory > xdeconstruct
        memory > xprocess_rhs
        memory > xoutput_field
        memory > xfunction
        memory > x_choices_is_value
        memory > xpostgres_operator
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("RangeField") ("IntegerRangeField") ("BigIntegerRangeField") ("DecimalRangeField") ("DateTimeRangeField") ("DateRangeField") ("RangeBoundary") ("RangeOperators"))
            (((unsupported)).apply (((xmodels).xExpression)))
              seq
                unsupported
                x__init__.write
                  [xself xinclusive_lower xinclusive_upper]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xlower)) (((xinclusive_lower).if "[" "(")))
                        (((unsupported)).apply (((xself).xupper)) (((xinclusive_upper).if "]" ")")))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (("'%s%s'".mod (((unsupported)).apply (((xself).xlower)) (((xself).xupper))))) ((((unsupported)).apply)))))
            (((unsupported)).apply)
              seq
                xEQUAL.write "="
                xNOT_EQUAL.write "<>"
                xCONTAINS.write "@>"
                xCONTAINED_BY.write "<@"
                xOVERLAPS.write "&&"
                xFULLY_LT.write "<<"
                xFULLY_GT.write ">>"
                xNOT_LT.write "&>"
                xNOT_GT.write "&<"
                xADJACENT_TO.write "-|-"
            (((unsupported)).apply (((xmodels).xField)))
              seq
                xempty_strings_allowed.write (xfalse)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("default_bounds") ((xkwargs))).if
                          (((unsupported)).apply ((((xTypeError)).apply ("Cannot use 'default_bounds' with {self.__class__.__name__}."))))
                        (((xhasattr)).apply ((xself)) ("base_field")).if
                          (((unsupported)).apply (((xself).xbase_field)) (((((xself).xbase_field)).apply)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xmodel.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("model"))))
                          (((unsupported)).apply ((((xAttributeError)).apply (("'%s' object has no attribute 'model'".mod (((xself).x__class__).x__name__))))))
                xmodel.write
                  [xself xmodel]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("model"))) ((xmodel)))
                        (((unsupported)).apply ((((xself).xbase_field).xmodel)) ((xmodel)))
                x_choices_is_value.write
                  [xcls xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).or ((((((xsuper)).apply).x_choices_is_value)).apply ((xvalue))))))
                xget_prep_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                          (((xisinstance)).apply ((xvalue)) ((xRange))).if
                            (((unsupported)).apply ((xvalue)))
                            (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                              (((unsupported)).apply (((((xself).xrange_type)).apply ((((unsupported)).apply ((xvalue)) (0))) ((((unsupported)).apply ((xvalue)) (1))))))
                        (((unsupported)).apply ((xvalue)))
                xto_python.write
                  [xself xvalue]
                    memory > xvals
                    seq > @
                      seq
                        (((xisinstance)).apply ((xvalue)) ((xstr))).if
                          seq
                            xvals.write ((((xjson).xloads)).apply ((xvalue)))
                            (((unsupported)).apply ((xend)) ((((unsupported)).apply ("lower") ("upper"))))
                              (((unsupported)).apply ((xend)) ((xvals))).if
                                (((unsupported)).apply ((((unsupported)).apply ((xvals)) ((xend)))) ((((((xself).xbase_field).xto_python)).apply ((((unsupported)).apply ((xvals)) ((xend)))))))
                            xvalue.write ((((xself).xrange_type)).apply ((((unsupported)).apply ((xvals)))))
                          (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                            xvalue.write ((((xself).xrange_type)).apply ((((unsupported)).apply ((xvalue)) (0))) ((((unsupported)).apply ((xvalue)) (1))))
                        (((unsupported)).apply ((xvalue)))
                xset_attributes_from_name.write
                  [xself xname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xset_attributes_from_name)).apply ((xname)))
                        bogusForceDataize.write (((((xself).xbase_field).xset_attributes_from_name)).apply ((xname)))
                xvalue_to_string.write
                  [xself xobj]
                    memory > xbase_field
                    memory > xval
                    memory > xvalue
                    memory > xresult
                    seq > @
                      seq
                        xvalue.write ((((xself).xvalue_from_object)).apply ((xobj)))
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((xvalue).xisempty).if
                          (((unsupported)).apply (((((xjson).xdumps)).apply ((((unsupported)).apply ("empty") (TRUE))))))
                        xbase_field.write ((xself).xbase_field)
                        xresult.write (((unsupported)).apply ("bounds") (((xvalue).x_bounds)))
                        (((unsupported)).apply ((xend)) ((((unsupported)).apply ("lower") ("upper"))))
                          seq
                            xval.write (((xgetattr)).apply ((xvalue)) ((xend)))
                            (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xend)))) ("None: is there a None literal in the EO language?"))
                              seq
                                xobj.write (((xAttributeSetter)).apply (((xbase_field).xattname)) ((xval)))
                                (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xend)))) (((((xbase_field).xvalue_to_string)).apply ((xobj)))))
                        (((unsupported)).apply (((((xjson).xdumps)).apply ((xresult)))))
                xformfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("form_class") (((xself).xform_field)))
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((xkwargs)))))))
            xCANONICAL_RANGE_BOUNDS.write "[)"
            (((unsupported)).apply ((xRangeField)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xdefault_bounds]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdefault_bounds)) ((((unsupported)).apply ("[)") ("(]") ("()") ("[]")))).if
                          (((unsupported)).apply ((((xValueError)).apply ("default_bounds must be one of '[)', '(]', '()', or '[]'."))))
                        (((unsupported)).apply (((xself).xdefault_bounds)) ((xdefault_bounds)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xget_prep_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                          (((unsupported)).apply (((((xself).xrange_type)).apply ((((unsupported)).apply ((xvalue)) (0))) ((((unsupported)).apply ((xvalue)) (1))) (((xself).xdefault_bounds)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_prep_value)).apply ((xvalue)))))
                xformfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("default_bounds") (((xself).xdefault_bounds)))
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((xkwargs)))))))
                xdeconstruct.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        (((xself).xdefault_bounds).and (((xself).xdefault_bounds).neq (xCANONICAL_RANGE_BOUNDS))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("default_bounds"))) (((xself).xdefault_bounds)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
            (((unsupported)).apply ((xRangeField)))
              seq
                xbase_field.write ((xmodels).xIntegerField)
                xrange_type.write (xNumericRange)
                xform_field.write ((xforms).xIntegerRangeField)
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ("int4range"))
            (((unsupported)).apply ((xRangeField)))
              seq
                xbase_field.write ((xmodels).xBigIntegerField)
                xrange_type.write (xNumericRange)
                xform_field.write ((xforms).xIntegerRangeField)
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ("int8range"))
            (((unsupported)).apply ((xContinuousRangeField)))
              seq
                xbase_field.write ((xmodels).xDecimalField)
                xrange_type.write (xNumericRange)
                xform_field.write ((xforms).xDecimalRangeField)
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ("numrange"))
            (((unsupported)).apply ((xContinuousRangeField)))
              seq
                xbase_field.write ((xmodels).xDateTimeField)
                xrange_type.write (xDateTimeTZRange)
                xform_field.write ((xforms).xDateTimeRangeField)
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ("tstzrange"))
            (((unsupported)).apply ((xRangeField)))
              seq
                xbase_field.write ((xmodels).xDateField)
                xrange_type.write (xDateRange)
                xform_field.write ((xforms).xDateRangeField)
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ("daterange"))
            bogusForceDataize.write ((((xRangeField).xregister_lookup)).apply (((xlookups).xDataContains)))
            bogusForceDataize.write ((((xRangeField).xregister_lookup)).apply (((xlookups).xContainedBy)))
            bogusForceDataize.write ((((xRangeField).xregister_lookup)).apply (((xlookups).xOverlap)))
            (((unsupported)).apply ((xPostgresOperatorLookup)))
              seq
                (((unsupported)).apply)
                xlookup_name.write "contains"
                xpostgres_operator.write ((xRangeOperators).xCONTAINS)
                xprocess_rhs.write
                  [xself xcompiler xconnection]
                    memory > xvalue
                    seq > @
                      seq
                        (((xisinstance)).apply (((xself).xrhs)) (((xdatetime).xdate))).if
                          seq
                            xvalue.write ((((xmodels).xValue)).apply (((xself).xrhs)))
                            (((unsupported)).apply (((xself).xrhs)) (((((xvalue).xresolve_expression)).apply (((xcompiler).xquery)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xprocess_rhs)).apply ((xcompiler)) ((xconnection)))))
                xas_postgresql.write
                  [xself xcompiler xconnection]
                    memory > xcast_internal_type
                    memory > xcast_sql
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((((xsuper)).apply).xas_postgresql)).apply ((xcompiler)) ((xconnection)))))
                        xcast_sql.write ""
                        (((((xisinstance)).apply (((xself).xrhs)) (((xmodels).xExpression))).and (((xself).xrhs).x_output_field_or_none)).and ((((xisinstance)).apply ((((xself).xrhs).x_output_field_or_none)) (((((xself).xlhs).xoutput_field).x__class__))).not)).if
                          seq
                            xcast_internal_type.write (((((((xself).xlhs).xoutput_field).xbase_field).xget_internal_type)).apply)
                            xcast_sql.write ((("::{}".xformat)).apply ((((((xconnection).xdata_types).xget)).apply ((xcast_internal_type)))))
                        (((unsupported)).apply ((((unsupported)).apply (("%s%s".mod (((unsupported)).apply ((xsql)) ((xcast_sql))))) ((xparams)))))
            bogusForceDataize.write ((((xDateRangeField).xregister_lookup)).apply ((xDateTimeRangeContains)))
            bogusForceDataize.write ((((xDateTimeRangeField).xregister_lookup)).apply ((xDateTimeRangeContains)))
            (((unsupported)).apply ((xPostgresOperatorLookup)))
              seq
                xlookup_name.write "contained_by"
                xtype_mapping.write (((unsupported)).apply ("smallint") ("int4range") ("integer") ("int4range") ("bigint") ("int8range") ("double precision") ("numrange") ("numeric") ("numrange") ("date") ("daterange") ("timestamp with time zone") ("tstzrange"))
                xpostgres_operator.write ((xRangeOperators).xCONTAINED_BY)
                xprocess_rhs.write
                  [xself xcompiler xconnection]
                    memory > xcast_type
                    memory > xdb_type
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrhs)) ((xrhs_params)))) (((((((xsuper)).apply).xprocess_rhs)).apply ((xcompiler)) ((xconnection)))))
                        xdb_type.write (((unsupported)).apply ((((((((((xself).xlhs).xoutput_field).xcast_db_type)).apply ((xconnection))).xsplit)).apply ("("))) (0))
                        xcast_type.write (((unsupported)).apply (((xself).xtype_mapping)) ((xdb_type)))
                        (((unsupported)).apply ((((unsupported)).apply (("%s::%s".mod (((unsupported)).apply ((xrhs)) ((xcast_type))))) ((xrhs_params)))))
                xprocess_lhs.write
                  [xself xcompiler xconnection]
                    memory > xlhs
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xlhs_params)))) (((((((xsuper)).apply).xprocess_lhs)).apply ((xcompiler)) ((xconnection)))))
                        (((xisinstance)).apply ((((xself).xlhs).xoutput_field)) (((xmodels).xFloatField))).if
                          xlhs.write ("%s::numeric".mod (xlhs))
                          (((xisinstance)).apply ((((xself).xlhs).xoutput_field)) (((xmodels).xSmallIntegerField))).if
                            xlhs.write ("%s::integer".mod (xlhs))
                        (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xlhs_params)))))
                xget_prep_lookup.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((((xRangeField)).apply).xget_prep_value)).apply (((xself).xrhs)))))
            bogusForceDataize.write (((((xmodels).xDateField).xregister_lookup)).apply ((xRangeContainedBy)))
            bogusForceDataize.write (((((xmodels).xDateTimeField).xregister_lookup)).apply ((xRangeContainedBy)))
            bogusForceDataize.write (((((xmodels).xIntegerField).xregister_lookup)).apply ((xRangeContainedBy)))
            bogusForceDataize.write (((((xmodels).xFloatField).xregister_lookup)).apply ((xRangeContainedBy)))
            bogusForceDataize.write (((((xmodels).xDecimalField).xregister_lookup)).apply ((xRangeContainedBy)))
            (((unsupported)).apply ((xPostgresOperatorLookup)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "fully_lt"
                xpostgres_operator.write ((xRangeOperators).xFULLY_LT)
            (((unsupported)).apply ((xPostgresOperatorLookup)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "fully_gt"
                xpostgres_operator.write ((xRangeOperators).xFULLY_GT)
            (((unsupported)).apply ((xPostgresOperatorLookup)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "not_lt"
                xpostgres_operator.write ((xRangeOperators).xNOT_LT)
            (((unsupported)).apply ((xPostgresOperatorLookup)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "not_gt"
                xpostgres_operator.write ((xRangeOperators).xNOT_GT)
            (((unsupported)).apply ((xPostgresOperatorLookup)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "adjacent_to"
                xpostgres_operator.write ((xRangeOperators).xADJACENT_TO)
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "startswith"
                xfunction.write "lower"
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xlhs).xoutput_field).xbase_field)))
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "endswith"
                xfunction.write "upper"
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xlhs).xoutput_field).xbase_field)))
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "isempty"
                xfunction.write "isempty"
                xoutput_field.write ((((xmodels).xBooleanField)).apply)
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "lower_inc"
                xfunction.write "LOWER_INC"
                xoutput_field.write ((((xmodels).xBooleanField)).apply)
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "lower_inf"
                xfunction.write "LOWER_INF"
                xoutput_field.write ((((xmodels).xBooleanField)).apply)
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "upper_inc"
                xfunction.write "UPPER_INC"
                xoutput_field.write ((((xmodels).xBooleanField)).apply)
            (((unsupported)).apply (((xmodels).xTransform)) (((xRangeField).xregister_lookup)))
              seq
                xlookup_name.write "upper_inf"
                xfunction.write "UPPER_INF"
                xoutput_field.write ((((xmodels).xBooleanField)).apply)