memory > xMultiPoint
memory > xstr
memory > xBaseSpatialField
memory > xMultiLineString
memory > xnamedtuple
memory > xhasattr
memory > xsuper
memory > xgetattr
memory > xGEOSException
memory > xPolygon
memory > xforms
memory > xgdal
memory > xGeometryField
memory > xValueError
memory > xGeometryCollection
memory > xNotImplementedError
memory > xalias
memory > xget_srs
memory > xField
memory > xpath
memory > xtype
memory > xRasterBandTransform
memory > xint
memory > xbytes
memory > xGDALException
memory > xargs
memory > xLineString
memory > xPoint
memory > xSpatialProxy
memory > xdefaultdict
memory > xsetattr
memory > xname
memory > xMultiPolygon
memory > xSpatialReference
memory > xImproperlyConfigured
memory > xkwargs
memory > xisinstance
memory > xGEOSGeometry
memory > xdict
[] > fields
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcontribute_to_class
        memory > xget_db_prep_value
        memory > xdescription
        memory > x_srid_cache
        memory > x__init__
        memory > xget_prep_value
        memory > xget_srid
        memory > xformfield
        memory > xgeom_class
        memory > xgeom_type
        memory > x_check_connection
        memory > xform_class
        memory > xget_internal_type
        memory > xfrom_db_value
        memory > xgeodetic
        memory > x_
        memory > xspheroid
        memory > xempty_strings_allowed
        memory > xunits_name
        memory > xselect_format
        memory > xdb_type
        memory > xdeconstruct
        memory > xget_placeholder
        memory > xgeography
        memory > xunits
        memory > xget_srid_info
        memory > xget_raster_prep_value
        memory > xget_transform
        memory > xSRIDCacheEntry
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_srid_cache.write (((xdefaultdict)).apply ((xdict)))
            xSRIDCacheEntry.write (((xnamedtuple)).apply ("SRIDCacheEntry") ((((unsupported)).apply ("units") ("units_name") ("spheroid") ("geodetic"))))
            xget_srid_info.write
              [xsrid xconnection]
                memory > xsrs
                memory > xSpatialRefSys
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xNotImplementedError)))
                      xSpatialRefSys.write (((((xconnection).xops).xspatial_ref_sys)).apply)
                      xSpatialRefSys.write "None: is there a None literal in the EO language?"
                    (((unsupported)).apply ((((unsupported)).apply ((xalias)) ((xget_srs)))) (((xSpatialRefSys).if (((unsupported)).apply (((xconnection).xalias)) ((((unsupported)).apply (((((unsupported)).apply (((((((xSpatialRefSys).xobjects).xusing)).apply (((xconnection).xalias))).xget)) ((xsrid))).xsrs))))) (((unsupported)).apply ("None: is there a None literal in the EO language?") ((xSpatialReference))))))
                    (((unsupported)).apply ((xsrid)) ((((unsupported)).apply ((x_srid_cache)) ((xalias))))).if
                      seq
                        xsrs.write (((xget_srs)).apply ((xsrid)))
                        (((unsupported)).apply ((((unsupported)).apply ((xunits)) ((xunits_name)))) (((xsrs).xunits)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_srid_cache)) ((xalias)))) ((xsrid)))) ((((unsupported)).apply ((xSRIDCacheEntry)) ((xunits)) ((xunits_name)) (("SPHEROID[\"%s\",%s,%s]".mod (((unsupported)).apply ((((unsupported)).apply ((xsrs)) ("spheroid"))) (((xsrs).xsemi_major)) (((xsrs).xinverse_flattening))))) (((xsrs).xgeographic)))))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_srid_cache)) ((xalias)))) ((xsrid)))))
            (((unsupported)).apply ((xField)))
              seq
                (((unsupported)).apply)
                xdescription.write (((x_)).apply ("The base GIS field."))
                xempty_strings_allowed.write FALSE
                x__init__.write
                  [xself xverbose_name xsrid xspatial_index]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xspatial_index)) ((xspatial_index)))
                        (((unsupported)).apply (((xself).xsrid)) ((xsrid)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("verbose_name"))) ((xverbose_name)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                xdeconstruct.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("srid"))) (((xself).xsrid)))
                        (((unsupported)).apply (((xself).xspatial_index)) (TRUE)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("spatial_index"))) (((xself).xspatial_index)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ((((((xconnection).xops).xgeo_db_type)).apply ((xself)))))
                xspheroid.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply (((((xget_srid_info)).apply (((xself).xsrid)) ((xconnection))).xspheroid)))
                xunits.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply (((((xget_srid_info)).apply (((xself).xsrid)) ((xconnection))).xunits)))
                xunits_name.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply (((((xget_srid_info)).apply (((xself).xsrid)) ((xconnection))).xunits_name)))
                xgeodetic.write
                  [xself xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xget_srid_info)).apply (((xself).xsrid)) ((xconnection))).xgeodetic)))
                xget_placeholder.write
                  [xself xvalue xcompiler xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((xconnection).xops).xget_geom_placeholder)).apply ((xself)) ((xvalue)) ((xcompiler)))))
                xget_srid.write
                  [xself xobj]
                    memory > xsrid
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsrid.write ((xobj).xsrid)
                        (((((unsupported)).apply ((xsrid)) ("None: is there a None literal in the EO language?")).or (((xself).xsrid).eq (1.neg))).or (((xsrid).eq (1.neg)).and (((xself).xsrid).neq (1.neg)))).if
                          (((unsupported)).apply (((xself).xsrid)))
                          (((unsupported)).apply ((xsrid)))
                xget_db_prep_value.write
                  [xself xvalue xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((((xconnection).xops).xAdapter)).apply (((((((xsuper)).apply).xget_db_prep_value)).apply ((xvalue)) ((xconnection)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((((unsupported)).apply (((((xself).xgeography).and (((xconnection).xfeatures).xsupports_geography)).if (((unsupported)).apply ("geography") (TRUE)) (((unsupported)).apply))))))))
                xget_raster_prep_value.write
                  [xself xvalue xis_candidate]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xvalue)) (((xgdal).xGDALRaster))).if
                          (((unsupported)).apply ((xvalue)))
                          (xis_candidate).if
                            (((unsupported)).apply ((xGDALException)))
                              (((unsupported)).apply (((((xgdal).xGDALRaster)).apply ((xvalue)))))
                            (((xisinstance)).apply ((xvalue)) ((xdict))).if
                              (((unsupported)).apply ((xGDALException)))
                                (((unsupported)).apply (((((xgdal).xGDALRaster)).apply ((xvalue)))))
                                (((unsupported)).apply ((((xValueError)).apply (("Couldn't create spatial object from lookup value '%s'.".mod (xvalue))))))
                xget_prep_value.write
                  [xself xvalue]
                    memory > xis_candidate
                    memory > xobj
                    memory > xraster
                    seq > @
                      seq
                        xobj.write ((((((xsuper)).apply).xget_prep_value)).apply ((xvalue)))
                        (((unsupported)).apply ((xobj)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((xisinstance)).apply ((xobj)) ((xGEOSGeometry))).if
                          seq
                            xis_candidate.write ((((xisinstance)).apply ((xobj)) ((((unsupported)).apply ((xbytes)) ((xstr))))).or (((xhasattr)).apply ((xobj)) ("__geo_interface__")))
                            xraster.write ((((xself).xget_raster_prep_value)).apply ((xobj)) ((xis_candidate)))
                            (xraster).if
                              xobj.write (xraster)
                              (xis_candidate).if
                                (((unsupported)).apply ((((unsupported)).apply ((xGEOSException)) ((xGDALException)))))
                                  xobj.write (((xGEOSGeometry)).apply ((xobj)))
                                  (((unsupported)).apply ((((xValueError)).apply (("Couldn't create spatial object from lookup value '%s'.".mod (xobj))))))
                                (((unsupported)).apply ((((xValueError)).apply (("Cannot use object with type %s for a spatial lookup parameter.".mod ((((xtype)).apply ((xobj))).x__name__))))))
                        (((unsupported)).apply (((xobj).xsrid)) (((((xself).xget_srid)).apply ((xobj)))))
                        (((unsupported)).apply ((xobj)))
            (((unsupported)).apply ((xBaseSpatialField)))
              seq
                (((unsupported)).apply)
                xdescription.write (((x_)).apply ("The base Geometry field — maps to the OpenGIS Specification Geometry type."))
                xform_class.write ((xforms).xGeometryField)
                xgeom_type.write "GEOMETRY"
                xgeom_class.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xverbose_name xdim xgeography xextent xtolerance]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdim)) ((xdim)))
                        (((unsupported)).apply (((xself).xgeography)) ((xgeography)))
                        (((unsupported)).apply (((xself).x_extent)) ((xextent)))
                        (((unsupported)).apply (((xself).x_tolerance)) ((xtolerance)))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xverbose_name)) ((((unsupported)).apply ((xkwargs)))))
                xdeconstruct.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        (((xself).xdim).neq 2).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("dim"))) (((xself).xdim)))
                        (((unsupported)).apply (((xself).xgeography)) (FALSE)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("geography"))) (((xself).xgeography)))
                        (((xself).x_extent).neq (((unsupported)).apply ((180.0.neg)) ((90.0.neg)) (180.0) (90.0))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("extent"))) (((xself).x_extent)))
                        (((xself).x_tolerance).neq 0.05).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("tolerance"))) (((xself).x_tolerance)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) (((xself).xattname)) ((((unsupported)).apply ((xSpatialProxy)) ((((xself).xgeom_class).or (xGEOSGeometry))) ((xself)) ((xGEOSGeometry)))))
                xformfield.write
                  [xself]
                    memory > xdefaults
                    seq > @
                      (((unsupported)).apply)
                        xdefaults.write (((unsupported)).apply ("form_class") (((xself).xform_class)) ("geom_type") (((xself).xgeom_type)) ("srid") (((xself).xsrid)) ((xkwargs)))
                        ((((xself).xdim).greater 2).and ((((xgetattr)).apply (((((unsupported)).apply ((xdefaults)) ("form_class")).xwidget)) ("supports_3d") (FALSE)).not)).if
                          bogusForceDataize.write ((((xdefaults).xsetdefault)).apply ("widget") (((xforms).xTextarea)))
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((xdefaults)))))))
                xselect_format.write
                  [xself xcompiler xsql xparams]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xcompiler).xquery).xsubquery).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((((((xcompiler).xconnection).xops).xselect).mod (xsql))) ((xparams)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "POINT"
                xgeom_class.write (xPoint)
                xform_class.write ((xforms).xPointField)
                xdescription.write (((x_)).apply ("Point"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "LINESTRING"
                xgeom_class.write (xLineString)
                xform_class.write ((xforms).xLineStringField)
                xdescription.write (((x_)).apply ("Line string"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "POLYGON"
                xgeom_class.write (xPolygon)
                xform_class.write ((xforms).xPolygonField)
                xdescription.write (((x_)).apply ("Polygon"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "MULTIPOINT"
                xgeom_class.write (xMultiPoint)
                xform_class.write ((xforms).xMultiPointField)
                xdescription.write (((x_)).apply ("Multi-point"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "MULTILINESTRING"
                xgeom_class.write (xMultiLineString)
                xform_class.write ((xforms).xMultiLineStringField)
                xdescription.write (((x_)).apply ("Multi-line string"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "MULTIPOLYGON"
                xgeom_class.write (xMultiPolygon)
                xform_class.write ((xforms).xMultiPolygonField)
                xdescription.write (((x_)).apply ("Multi polygon"))
            (((unsupported)).apply ((xGeometryField)))
              seq
                xgeom_type.write "GEOMETRYCOLLECTION"
                xgeom_class.write (xGeometryCollection)
                xform_class.write ((xforms).xGeometryCollectionField)
                xdescription.write (((x_)).apply ("Geometry collection"))
            (((unsupported)).apply ((xField)))
              seq
                unsupported
                xdescription.write (((x_)).apply ("Extent Aggregate Field"))
                xget_internal_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("ExtentField"))
                xselect_format.write
                  [xself xcompiler xsql xparams]
                    memory > xselect
                    seq > @
                      seq
                        xselect.write ((((xcompiler).xconnection).xops).xselect_extent)
                        (((unsupported)).apply ((((unsupported)).apply (((xselect).if ((xselect).mod (xsql)) (xsql))) ((xparams)))))
            (((unsupported)).apply ((xBaseSpatialField)))
              seq
                (((unsupported)).apply)
                xdescription.write (((x_)).apply ("Raster Field"))
                xgeom_type.write "RASTER"
                xgeography.write FALSE
                x_check_connection.write
                  [xself xconnection]
                    seq > @
                      (((((xconnection).xfeatures).xgis_enabled).not).or ((((xconnection).xfeatures).xsupports_raster).not)).if
                        (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Raster fields require backends with raster support."))))
                xdb_type.write
                  [xself xconnection]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_connection)).apply ((xconnection)))
                        (((unsupported)).apply (((((((xsuper)).apply).xdb_type)).apply ((xconnection)))))
                xfrom_db_value.write
                  [xself xvalue xexpression xconnection]
                    seq > @
                      (((unsupported)).apply ((((((xconnection).xops).xparse_raster)).apply ((xvalue)))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) (((xself).xattname)) ((((xSpatialProxy)).apply (((xgdal).xGDALRaster)) ((xself)))))
                xget_transform.write
                  [xself xname]
                    memory > xband_index
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xband_index.write (((xint)).apply ((xname)))
                            (((unsupported)).apply ((((xtype)).apply ("SpecificRasterBandTransform") ((((unsupported)).apply ((xRasterBandTransform)))) ((((unsupported)).apply ("band_index") ((xband_index)))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_transform)).apply ((xname)))))