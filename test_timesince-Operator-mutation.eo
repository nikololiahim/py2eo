memory > xtimezone
memory > xtranslation
memory > xValueError
memory > xTestCase
memory > xvalue
memory > xnaive
memory > xnpgettext_lazy
memory > xtimesince
memory > xtimeuntil
memory > xnow
memory > xdepth
memory > xdatetime
memory > xexpected
[] > test_timesince
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_second_before_equal_first_humanize_time_strings
        memory > xtest_depth_invalid
        memory > xtest_different_timezones
        memory > xtest_both_date_objects
        memory > xtest_leap_year
        memory > xtest_leap_year_new_years_eve
        memory > xtest_naive_datetime_with_tzinfo_attribute
        memory > xtest_other_units
        memory > xsetUp
        memory > xtest_multiple_units
        memory > xtest_ignore_microseconds_and_seconds
        memory > xtest_display_second_before_first
        memory > xtest_display_first_unit
        memory > xtest_date_objects
        memory > xtest_depth
        memory > xtest_thousand_years_ago
        memory > xtest_equal_datetimes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xt)) (((((xdatetime).xdatetime)).apply (2007) (8) (14) (13) (46) (0))))
                        (((unsupported)).apply (((xself).xonemicrosecond)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        (((unsupported)).apply (((xself).xonesecond)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        (((unsupported)).apply (((xself).xoneminute)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        (((unsupported)).apply (((xself).xonehour)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        (((unsupported)).apply (((xself).xoneday)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        (((unsupported)).apply (((xself).xoneweek)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (7))))
                        (((unsupported)).apply (((xself).xonemonth)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (30))))
                        (((unsupported)).apply (((xself).xoneyear)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (365))))
                xtest_equal_datetimes.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((xself).xt)))) ("0xa0minutes"))
                xtest_ignore_microseconds_and_seconds.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonemicrosecond))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonesecond))))) ("0xa0minutes"))
                xtest_other_units.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneminute))))) ("1xa0minute"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonehour))))) ("1xa0hour"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneday))))) ("1xa0day"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneweek))))) ("1xa0week"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonemonth))))) ("1xa0month"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneyear))))) ("1xa0year"))
                xtest_multiple_units.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (2.mul ((xself).xoneday))).sub (6.mul ((xself).xonehour)))))) ("2xa0days, 6xa0hours"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (2.mul ((xself).xoneweek))).sub (2.mul ((xself).xoneday)))))) ("2xa0weeks, 2xa0days"))
                xtest_display_first_unit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((((xself).xt).sub (2.mul ((xself).xoneweek))).sub (3.mul ((xself).xonehour))).sub (4.mul ((xself).xoneminute)))))) ("2xa0weeks"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (4.mul ((xself).xoneday))).sub (5.mul ((xself).xoneminute)))))) ("4xa0days"))
                xtest_display_second_before_first.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonemicrosecond))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonesecond))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneminute))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonehour))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneday))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneweek))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonemonth))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xoneyear))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (2.mul ((xself).xoneday))).sub (6.mul ((xself).xonehour)))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (2.mul ((xself).xoneweek))).sub (2.mul ((xself).xoneday)))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) ((((((xself).xt).sub (2.mul ((xself).xoneweek))).sub (3.mul ((xself).xonehour))).sub (4.mul ((xself).xoneminute)))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xself).xt)) (((((xself).xt).sub (4.mul ((xself).xoneday))).sub (5.mul ((xself).xoneminute)))))) ("0xa0minutes"))
                xtest_second_before_equal_first_humanize_time_strings.write
                  [xself]
                    memory > xtime_strings
                    seq > @
                      seq
                        xtime_strings.write (((unsupported)).apply ("minute") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d minute") ("%(num)d minutes") ("num"))))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("cs"))))
                          (((unsupported)).apply ((xnow)) ((((unsupported)).apply (((xself).xt)) ((((xself).xt).sub ((xself).xonemicrosecond))) ((((xself).xt).sub ((xself).xoneday))))))
                            (((unsupported)).apply (((((xself).xsubTest)).apply ((xnow)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtimesince)) (((xself).xt)) ((xnow)) ((xtime_strings)))) ("0xa0minut"))
                xtest_different_timezones.write
                  [xself]
                    memory > xnow_tz
                    memory > xnow_tz_i
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xnow.write (((((xdatetime).xdatetime).xnow)).apply)
                        xnow_tz.write ((((xtimezone).xmake_aware)).apply ((xnow)) (((((xtimezone).xget_default_timezone)).apply)))
                        xnow_tz_i.write ((((xtimezone).xlocaltime)).apply ((xnow_tz)) (((((xtimezone).xget_fixed_timezone)).apply (195))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xnow)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xnow_tz)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xnow_tz_i)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xnow_tz)) ((xnow_tz_i)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply ((xnow)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply ((xnow_tz)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply ((xnow_tz_i)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply ((xnow_tz)) ((xnow_tz_i)))) ("0xa0minutes"))
                xtest_date_objects.write
                  [xself]
                    memory > xtoday
                    seq > @
                      seq
                        unsupported
                        xtoday.write (((((xdatetime).xdate).xtoday)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xtoday).sub ((xself).xoneday))))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xtoday).sub ((xself).xoneday))))) ("0xa0minutes"))
                xtest_both_date_objects.write
                  [xself]
                    memory > xtoday
                    seq > @
                      seq
                        unsupported
                        xtoday.write (((((xdatetime).xdate).xtoday)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xtoday).sub ((xself).xoneday))) ((xtoday)))) ("1xa0day"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xtoday).sub ((xself).xoneday))) ((xtoday)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xtoday).sub ((xself).xoneweek))) ((xtoday)))) ("1xa0week"))
                xtest_leap_year.write
                  [xself]
                    memory > xstart_date
                    seq > @
                      seq
                        xstart_date.write ((((xdatetime).xdate)).apply (2016) (12) (25))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xstart_date).sub ((xself).xoneweek))) ((xstart_date)))) ("1xa0week"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xstart_date)) (((xstart_date).sub ((xself).xoneweek))))) ("1xa0week"))
                xtest_leap_year_new_years_eve.write
                  [xself]
                    memory > xt
                    memory > xnow
                    seq > @
                      seq
                        xt.write ((((xdatetime).xdate)).apply (2016) (12) (31))
                        xnow.write ((((xdatetime).xdatetime)).apply (2016) (12) (31) (18) (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply (((xt).sub ((xself).xoneday))) ((xnow)))) ("0xa0minutes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xt).sub ((xself).xoneday))) ((xnow)))) ("0xa0minutes"))
                xtest_naive_datetime_with_tzinfo_attribute.write
                  [xself]
                    memory > xpast
                    memory > xutcoffset
                    memory > xfuture
                    seq > @
                      seq
                        (((unsupported)).apply (((xdatetime).xtzinfo)))
                          xutcoffset.write
                            [xself xdt]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xfuture.write (((unsupported)).apply (((xdatetime).xdatetime)) (2080) (1) (1) ((((xnaive)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xfuture)))) ("0xa0minutes"))
                        xpast.write (((unsupported)).apply (((xdatetime).xdatetime)) (1980) (1) (1) ((((xnaive)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply ((xpast)))) ("0xa0minutes"))
                xtest_thousand_years_ago.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xdatetime).xdatetime)).apply (1007) (8) (14) (13) (46) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimesince)).apply ((xt)) (((xself).xt)))) ("1000xa0years"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtimeuntil)).apply (((xself).xt)) ((xt)))) ("1000xa0years"))
                xtest_depth.write
                  [xself]
                    memory > xt
                    memory > xtests
                    seq > @
                      seq
                        xt.write (((((((xself).xt).sub ((xself).xoneyear)).sub ((xself).xonemonth)).sub ((xself).xoneweek)).sub ((xself).xoneday)).sub ((xself).xonehour))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xt)) (1) ("1xa0year"))) ((((unsupported)).apply ((xt)) (2) ("1xa0year, 1xa0month"))) ((((unsupported)).apply ((xt)) (3) ("1xa0year, 1xa0month, 1xa0week"))) ((((unsupported)).apply ((xt)) (4) ("1xa0year, 1xa0month, 1xa0week, 1xa0day"))) ((((unsupported)).apply ((xt)) (5) ("1xa0year, 1xa0month, 1xa0week, 1xa0day, 1xa0hour"))) ((((unsupported)).apply ((xt)) (6) ("1xa0year, 1xa0month, 1xa0week, 1xa0day, 1xa0hour"))) ((((unsupported)).apply ((((xself).xt).sub ((xself).xonehour))) (5) ("1xa0hour"))) ((((unsupported)).apply ((((xself).xt).sub (4.mul ((xself).xoneminute)))) (3) ("4xa0minutes"))) ((((unsupported)).apply (((((xself).xt).sub ((xself).xonehour)).sub ((xself).xoneminute))) (1) ("1xa0hour"))) ((((unsupported)).apply (((((xself).xt).sub ((xself).xoneday)).sub ((xself).xonehour))) (1) ("1xa0day"))) ((((unsupported)).apply (((((xself).xt).sub ((xself).xoneweek)).sub ((xself).xoneday))) (1) ("1xa0week"))) ((((unsupported)).apply (((((xself).xt).sub ((xself).xonemonth)).sub ((xself).xoneweek))) (1) ("1xa0month"))) ((((unsupported)).apply (((((xself).xt).sub ((xself).xoneyear)).sub ((xself).xonemonth))) (1) ("1xa0year"))) ((((unsupported)).apply ((((((xself).xt).sub ((xself).xoneyear)).sub ((xself).xoneweek)).sub ((xself).xoneday))) (3) ("1xa0year"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xdepth)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtimesince)) (((xself).xt)) ((xvalue)) ((xdepth)))) ((xexpected)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtimeuntil)) ((xvalue)) (((xself).xt)) ((xdepth)))) ((xexpected)))
                xtest_depth_invalid.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "depth must be greater than 0."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xtimesince)) (((xself).xt)) (((xself).xt)) (0))