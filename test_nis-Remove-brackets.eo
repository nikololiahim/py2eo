memory > xk
memory > xValueError
memory > xstr
memory > xmsg
memory > xsupport
memory > xnismap
memory > xv
memory > xunittest
memory > x__name__
[] > test_nis
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_maps
        memory > xnis
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            xnis.write ((((xsupport).ximport_module)).apply ("nis"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_maps.write
                [xself]
                  memory > xdone
                  memory > xmaps
                  memory > xmapping
                  seq > @
                    seq
                      (((unsupported)).apply (((xnis).xerror)))
                        xmaps.write ((xnis).xmaps)
                        bogusForceDataize.write ((((xself).xskipTest)).apply ((((xstr)).apply ((xmsg)))))
                      (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xmaps).xremove)).apply ("passwd.adjunct.byname"))
                      xdone.write 0
                      (((unsupported)).apply ((xnismap)) ((xmaps)))
                        seq
                          xmapping.write ((((xnis).xcat)).apply ((xnismap)))
                          (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((xmapping).xitems)))
                            seq
                              ((xk).not).if
                                (((unsupported)).apply)
                              (((((xnis).xmatch)).apply ((xk)) ((xnismap))).neq (xv)).if
                                bogusForceDataize.write ((((xself).xfail)).apply (("NIS match failed for key `%s' in map `%s'".mod (((unsupported)).apply ((xk)) ((xnismap))))))
                                seq
                                  xdone.write 1
                                  (((unsupported)).apply)
                          (xdone).if
                            (((unsupported)).apply)
            ((x__name__).eq "__main__").if
              unsupported