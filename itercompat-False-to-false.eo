+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > itercompat
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > assertMe
      cage > xis_iterable
      seq > @
        stdout "itercompat\n"
        write.
          xis_iterable
          []
            [xxNotCopied] > apply
              [stackUp] > @
                cage > tmp
                xxNotCopied' > xx
                cage > e1
                cage > e0
                cage > e4
                cage > e3
                cage > e2
                seq > @
                  stdout "xis_iterable\n"
                  xx.<
                  "An implementation independent way of checking for iterables"
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          tmp.write (goto ((((xiter)).apply ((xx))).@))
                          (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                          (e0).write (tmp.result)
                          stackUp.forward raiseNothing
                  seq
                    mkCopy (xcurrent-exception.xclass) > tmp1
                    (e1).write (tmp1.copy)
                    mkCopy (e1.xid) > tmp2
                    (e2).write (tmp2.copy)
                    mkCopy (xTypeError.xid) > tmp3
                    (e3).write (tmp3.copy)
                    [] > tmp4
                      memory > dddata
                      dddata.write (((e2).eq (e3))) > @
                    (e4).write (tmp4.dddata)
                    (e4).if
                      seq
                        stackUp.forward (return (xfalse))
                        TRUE
                      seq
                        TRUE
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                        stackUp.forward (return TRUE)
                      0
                    (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                  123
        tmp.write (goto ((((xis_iterable)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        stackUp.forward (return (assertMe))
  (goto (apply.@)).result > @