memory > xforms
memory > xdatetime
memory > xChoiceField
memory > xTestForm
memory > xForm
memory > xCheckboxSelectMultiple
memory > xWidgetTest
[] > test_checkboxselectmultiple
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_render_value
        memory > xtest_doesnt_localize_input_value
        memory > xtest_use_required_attribute
        memory > xtest_separate_ids_constructor
        memory > xtest_render_none
        memory > xtest_label
        memory > xtest_value_omitted_from_data
        memory > xtest_render_value_multiple
        memory > xtest_nested_choices_without_id
        memory > xtest_fieldset
        memory > xwidget
        memory > xtest_nested_choices
        memory > xtest_separate_ids
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xWidgetTest)))
              seq
                xwidget.write (xCheckboxSelectMultiple)
                xtest_render_value.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))) ("beatles") ((((unsupported)).apply ("J"))) ((((unsupported)).apply)))
                xtest_render_value_multiple.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))) ("beatles") ((((unsupported)).apply ("J") ("P"))) ((((unsupported)).apply)))
                xtest_render_none.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((((unsupported)).apply ((((unsupported)).apply ("") ("Unknown")))).add ((xself).xbeatles))))) ("beatles") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                xtest_nested_choices.write
                  [xself]
                    memory > xnested_choices
                    memory > xhtml
                    seq > @
                      seq
                        xnested_choices.write (((unsupported)).apply ((((unsupported)).apply ("unknown") ("Unknown"))) ((((unsupported)).apply ("Audio") ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("Vinyl"))) ((((unsupported)).apply ("cd") ("CD"))))))) ((((unsupported)).apply ("Video") ((((unsupported)).apply ((((unsupported)).apply ("vhs") ("VHS"))) ((((unsupported)).apply ("dvd") ("DVD"))))))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xnested_choices)))) ("nestchoice") ((((unsupported)).apply ("vinyl") ("dvd"))) ((((unsupported)).apply ("id") ("media"))) ((xhtml)))
                xtest_nested_choices_without_id.write
                  [xself]
                    memory > xnested_choices
                    memory > xhtml
                    seq > @
                      seq
                        xnested_choices.write (((unsupported)).apply ((((unsupported)).apply ("unknown") ("Unknown"))) ((((unsupported)).apply ("Audio") ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("Vinyl"))) ((((unsupported)).apply ("cd") ("CD"))))))) ((((unsupported)).apply ("Video") ((((unsupported)).apply ((((unsupported)).apply ("vhs") ("VHS"))) ((((unsupported)).apply ("dvd") ("DVD"))))))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xnested_choices)))) ("nestchoice") ((((unsupported)).apply ("vinyl") ("dvd"))) ((xhtml)))
                xtest_separate_ids.write
                  [xself]
                    memory > xhtml
                    memory > xchoices
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("a") ("A"))) ((((unsupported)).apply ("b") ("B"))) ((((unsupported)).apply ("c") ("C"))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("letters") ((((unsupported)).apply ("a") ("c"))) ((((unsupported)).apply ("id") ("abc"))) ((xhtml)))
                xtest_separate_ids_constructor.write
                  [xself]
                    memory > xwidget
                    memory > xhtml
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwidget.write (((unsupported)).apply ((xCheckboxSelectMultiple)) ((((unsupported)).apply ("id") ("abc"))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("A"))) ((((unsupported)).apply ("b") ("B"))) ((((unsupported)).apply ("c") ("C"))))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("letters") ((((unsupported)).apply ("a") ("c"))) ((xhtml)))
                xtest_doesnt_localize_input_value.write
                  [xself]
                    memory > xhtml
                    memory > xchoices
                    seq > @
                      (((unsupported)).apply)
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply (1) ("One"))) ((((unsupported)).apply (1000) ("One thousand"))) ((((unsupported)).apply (1000000) ("One million"))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("numbers") ("None: is there a None literal in the EO language?") ((xhtml)))
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply (((((xdatetime).xtime)).apply (0) (0))) ("midnight"))) ((((unsupported)).apply (((((xdatetime).xtime)).apply (12) (0))) ("noon"))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("times") ("None: is there a None literal in the EO language?") ((xhtml)))
                xtest_use_required_attribute.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xuse_required_attribute)).apply ("None: is there a None literal in the EO language?"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xuse_required_attribute)).apply ((((unsupported)).apply)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xuse_required_attribute)).apply ((((unsupported)).apply ("J") ("P"))))) (FALSE))
                xtest_value_omitted_from_data.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("field"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field") ("value"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                xtest_label.write
                  [xself]
                    memory > xbound_field
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xforms).xForm)))
                          xf.write (((unsupported)).apply (((xforms).xMultipleChoiceField)) ((xCheckboxSelectMultiple)))
                        xbound_field.write (((unsupported)).apply ((((xTestForm)).apply)) ("f"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xbound_field).xfield).xwidget).xid_for_label)).apply ("id"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbound_field).xlabel_tag)).apply)) ("<label>F:</label>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbound_field).xlegend_tag)).apply)) ("<legend>F:</legend>"))
                xtest_fieldset.write
                  [xself]
                    memory > xfield
                    memory > xtemplate_name
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xtemplate_name.write "forms_tests/use_fieldset.html"
                            xfield.write (((unsupported)).apply ((xChoiceField)) (((xself).xwidget)) (((xself).xbeatles)))
                        xform.write (((xTestForm)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xwidget).xuse_fieldset)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xrender)).apply)) ("<div><fieldset><legend>Field:</legend><div id=\"id_field\"><div><label for=\"id_field_0\"><input type=\"checkbox\" name=\"field\" value=\"J\" id=\"id_field_0\"> John</label></div><div><label for=\"id_field_1\"><input type=\"checkbox\" name=\"field\" value=\"P\" id=\"id_field_1\">Paul</label></div><div><label for=\"id_field_2\"><input type=\"checkbox\" name=\"field\" value=\"G\" id=\"id_field_2\"> George</label></div><div><label for=\"id_field_3\"><input type=\"checkbox\" name=\"field\" value=\"R\" id=\"id_field_3\">Ringo</label></div></div></fieldset></div>"))