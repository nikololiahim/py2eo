memory > xno_name_again
memory > xz
memory > xrange
memory > xXX
memory > xobject
memory > xd
memory > xcm
memory > xk
memory > xsno
memory > xno_name
memory > xinspect
memory > x__foo
memory > xC
memory > xdoes_not_exist
memory > xDone
memory > xAttributeError
memory > xc
memory > xvar2
memory > xcount
memory > xlist
memory > xRuntimeError
memory > xKeyboardInterrupt
memory > xstr
memory > xcheck_syntax_error
memory > xD_bad_ann
memory > xmanager
memory > xSquares
memory > xsomeobj
memory > xAssertionError
memory > xwarnings
memory > xtyping
memory > xB
memory > xexec
memory > xlit
memory > xb
memory > xtest
memory > xZeroDivisionError
memory > xeval
memory > xIndexError
memory > xcount2
memory > xcase
memory > xStopIteration
memory > xKeyError
memory > xStopAsyncIteration
memory > xkeyword
memory > xSpam
memory > xst
memory > xprint
memory > xtype
memory > xUnboundLocalError
memory > xf
memory > xsname
memory > xint
memory > xkwarg
memory > xmaxsize
memory > xException
memory > xsp_pno
memory > xtime
memory > xOverflowError
memory > xINVALID_UNDERSCORE_LITERALS
memory > xsp_sno
memory > xsum
memory > xx
memory > xi
memory > xcompile
memory > xs
memory > xsys
memory > xbool
memory > xpname
memory > xM
memory > xCMeta
memory > xHam
memory > xfloat
memory > xf_bad_ann
memory > xargs
memory > xCNS
memory > xC1
memory > xno_such_name_defined
memory > xvar1
memory > xSyntaxError
memory > xvar_annot_global
memory > xann_module2
memory > xpno
memory > xe
memory > xCC
memory > xord
memory > xunittest
memory > xsetattr
memory > xAIter
memory > xEOFError
memory > xy
memory > xnext
memory > xSyntaxWarning
memory > xC2
memory > xkwargs
memory > xj
memory > xNameError
memory > xlen
memory > xg_bad_ann
memory > xEllipsis
memory > xTypeError
memory > xCNS2
memory > x__name__
memory > xa
[] > test_grammar
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_async_await
        memory > xtest_import
        memory > xtest_underscore_literals
        memory > xtest_continue_in_finally
        memory > xtest_var_annot_refleak
        memory > xtest_var_annot_rhs
        memory > xtest_break_stmt
        memory > xtest_try
        memory > xtest_yield_in_comprehensions
        memory > xtest_var_annot_basics
        memory > xtest_break_in_finally_after_return
        memory > xtest_eof_error
        memory > xtest_ellipsis
        memory > xtest_for
        memory > xtest_test
        memory > xtest_return
        memory > xtest_backslash
        memory > xtest_comparison
        memory > xtest_matrix_mul
        memory > xtest_var_annot_metaclass_semantics
        memory > xtest_genexps
        memory > xtest_nonlocal
        memory > xtest_if_else_expr
        memory > xtest_string_literals
        memory > xtest_with_statement
        memory > xtest_bad_numerical_literals
        memory > xtest_return_in_finally
        memory > xINVALID_UNDERSCORE_LITERALS2
        memory > xtest_break_in_finally
        memory > xtest_unary_ops
        memory > xtest_continue_in_finally_after_return
        memory > xtest_listcomps
        memory > xtest_expr_stmt
        memory > xtest_atoms
        memory > xtest_former_statements_refer_to_builtins
        memory > xtest_global
        memory > xtest_if
        memory > x__getitem__
        memory > xtest_var_annot_simple_exec
        memory > xtest_continue_stmt
        memory > xtest_float_exponent_tokenization
        memory > xtest_comparison_is_literal
        memory > xtest_async_with
        memory > xtest_simple_stmt
        memory > xtest_comprehension_specials
        memory > xtest_binary_mask_ops
        memory > xtest_additive_ops
        memory > xtestAssert2
        memory > xtest_warn_missed_comma
        memory > xann_module
        memory > xtest_plain_integers
        memory > xtest_assert
        memory > xtest_var_annot_custom_maps
        memory > xtest_async_for
        memory > xtest_classdef
        memory > xtest_break_continue_loop
        memory > xtest_var_annot_syntax_errors
        memory > x__setitem__
        memory > xtest_var_annot_module_semantics
        memory > xtest_del_stmt
        memory > xtest_yield
        memory > xtest_shift_ops
        memory > xtest_pass_stmt
        memory > xtest_funcdef
        memory > xtest_var_annot_basic_semantics
        memory > xtest_raise
        memory > x__init__
        memory > xVALID_UNDERSCORE_LITERALS
        memory > xtest_suite
        memory > xtest_while
        memory > xtest_floats
        memory > xtest_paren_evaluation
        memory > xtest_eval_input
        memory > xtest_var_annot_in_module
        memory > xtest_lambdef
        memory > xtest_selectors
        memory > xtest_dictcomps
        memory > xtest_long_integers
        memory > xtest_multiplicative_ops
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xVALID_UNDERSCORE_LITERALS.write (((unsupported)).apply ("0_0_0") ("4_2") ("1_0000_0000") ("0b1001_0100") ("0xffff_ffff") ("0o5_7_7") ("1_00_00.5") ("1_00_00.5e5") ("1_00_00e5_1") ("1e1_0") (".1_4") (".1_4e1") ("0b_0") ("0x_f") ("0o_5") ("1_00_00j") ("1_00_00.5j") ("1_00_00e5_1j") (".1_4j") ("(1_2.5+3_3j)") ("(.5_6j)"))
            xINVALID_UNDERSCORE_LITERALS2.write (((unsupported)).apply ("0_") ("42_") ("1.4j_") ("0x_") ("0b1_") ("0xf_") ("0o5_") ("0 if 1_Else 1") ("0_b0") ("0_xf") ("0_o5") ("0_7") ("09_99") ("4_______2") ("0.1__4") ("0.1__4j") ("0b1001__0100") ("0xffff__ffff") ("0x___") ("0o5__77") ("1e1__0") ("1e1__0j") ("1_.4") ("1_.4j") ("1._4") ("1._4j") ("._5") ("._5j") ("1.0e+_1") ("1.0e+_1j") ("1.4_j") ("1.4e5_j") ("1_e1") ("1.4_e1") ("1.4_e1j") ("1e_1") ("1.4e_1") ("1.4e_1j") ("(1+1.5_j_)") ("(1+1.5_j)"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_backslash.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (1.add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (2) ("backslash for line continuation"))
                        xx.write 0
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (0) ("backslash ending comment"))
                xtest_plain_integers.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (0))) ((((xtype)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (255) (255))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (255) (255))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2147483647) (2147483647))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (9) (9))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("0x"))
                        (((unsupported)).apply)
                        ((xmaxsize).eq 2147483647).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((2147483647.neg).sub 1)) (((((unsupported)).apply).neg)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).greater 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).greater 0)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((2147483647.greater 0)))
                            (((unsupported)).apply ((xs)) ((((unsupported)).apply ("2147483648") ("0o40000000000") ("0x100000000") ("0b10000000000000000000000000000000"))))
                              (((unsupported)).apply ((xOverflowError)))
                                xx.write (((xeval)).apply ((xs)))
                                bogusForceDataize.write ((((xself).xfail)).apply (("OverflowError on huge integer literal %r".mod (xs))))
                          ((xmaxsize).eq (((unsupported)).apply)).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply).neg).sub 1)) (((((unsupported)).apply).neg)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).greater 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).greater 0)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply).greater 0)))
                              (((unsupported)).apply ((xs)) ((((unsupported)).apply ("9223372036854775808") ("0o2000000000000000000000") ("0x10000000000000000") ("0b100000000000000000000000000000000000000000000000000000000000000"))))
                                (((unsupported)).apply ((xOverflowError)))
                                  xx.write (((xeval)).apply ((xs)))
                                  bogusForceDataize.write ((((xself).xfail)).apply (("OverflowError on huge integer literal %r".mod (xs))))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Weird maxsize value %r".mod (xmaxsize))))
                xtest_long_integers.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 0
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                xtest_floats.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 3.14
                        xx.write (((unsupported)).apply)
                        xx.write 0.314
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                xtest_float_exponent_tokenization.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if 1 0)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if 1 0)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("0 if 1Else 0"))
                xtest_underscore_literals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xlit)) ((xVALID_UNDERSCORE_LITERALS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xlit)))) ((((xeval)).apply (((((xlit).xreplace)).apply ("_") (""))))))
                        (((unsupported)).apply ((xlit)) ((xINVALID_UNDERSCORE_LITERALS)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ((xlit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNameError)) ((xeval)) ("_0"))
                xtest_bad_numerical_literals.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).xcheck_syntax_error)
                        bogusForceDataize.write (((xcheck)).apply ("0b12") ("invalid digit '2' in binary literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0b1_2") ("invalid digit '2' in binary literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0b2") ("invalid digit '2' in binary literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0b1_") ("invalid binary literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0b") ("invalid binary literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0o18") ("invalid digit '8' in octal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0o1_8") ("invalid digit '8' in octal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0o8") ("invalid digit '8' in octal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0o1_") ("invalid octal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0o") ("invalid octal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0x1_") ("invalid hexadecimal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("0x") ("invalid hexadecimal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("1_") ("invalid decimal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("012") ("leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers"))
                        bogusForceDataize.write (((xcheck)).apply ("1.2_") ("invalid decimal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("1e2_") ("invalid decimal literal"))
                        bogusForceDataize.write (((xcheck)).apply ("1e+") ("invalid decimal literal"))
                xtest_string_literals.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write ""
                        xy.write ""
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xlen)).apply ((xx))).eq 0).and ((xx).eq (xy)))))
                        xx.write "'"
                        xy.write "'"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xlen)).apply ((xx))).eq 1).and ((xx).eq (xy))).and ((((xord)).apply ((xx))).eq 39))))
                        xx.write "\""
                        xy.write "\""
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xlen)).apply ((xx))).eq 1).and ((xx).eq (xy))).and ((((xord)).apply ((xx))).eq 34))))
                        xx.write "doesn't \"shrink\" does it"
                        xy.write "doesn't \"shrink\" does it"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xlen)).apply ((xx))).eq 24).and ((xx).eq (xy)))))
                        xx.write "does \"shrink\" doesn't it"
                        xy.write "does \"shrink\" doesn't it"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xlen)).apply ((xx))).eq 24).and ((xx).eq (xy)))))
                        xx.write (((unsupported)).apply)
                        xy.write "nThe \"quick\"nbrown foxnjumps overnthe 'lazy' dog.n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                        xy.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                        xy.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                        xy.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                xtest_ellipsis.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xx)) ((xEllipsis)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) (".. ."))
                xtest_eof_error.write
                  [xself]
                    memory > xsamples
                    seq > @
                      seq
                        xsamples.write (((unsupported)).apply ("def foo(") ("ndef foo(") ("def foo(n"))
                        (((unsupported)).apply ((xs)) ((xsamples)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))) ((xcm)))
                              bogusForceDataize.write (((xcompile)).apply ((xs)) ("<test>") ("exec"))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("unexpected EOF") ((((xstr)).apply (((xcm).xexception)))))
            (((unsupported)).apply ((xvar_annot_global)) ((xint)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_dct)) ((((unsupported)).apply)))
                x__setitem__.write
                  [xself xitem xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) (((((xitem).xlower)).apply)))) ((xvalue)))
                x__getitem__.write
                  [xself xitem]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) ((xitem)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                xtest_eval_input.write
                  [xself]
                    memory > xx
                    seq > @
                      xx.write (((xeval)).apply ("1, 0 or 1"))
                xtest_var_annot_basics.write
                  [xself]
                    memory > xone
                    memory > xmy_lst
                    seq > @
                      seq
                        (((unsupported)).apply ((xvar1)) ((xint)) (5))
                        (((unsupported)).apply ((xvar2)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        xmy_lst.write (((unsupported)).apply (42))
                        xone.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        (((unsupported)).apply (((xint).xnew_attr)) ((xint)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlist)))) (0))) ((xtype)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmy_lst)) (((((xone)).apply).sub 1)))) ((xint)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmy_lst)) ((((unsupported)).apply (5))))
                xtest_var_annot_syntax_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def f: int"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("x: int: str"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def f():n    nonlocal x: intn"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("[x, 0]: intn"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("f(): intn"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("(x,): int"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def f():n    (x, y): int = (1, 2)n"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def f():n    x: intn    global xn"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def f():n    global xn    x: intn"))
                xtest_var_annot_basic_semantics.write
                  [xself]
                    memory > xfbad
                    memory > xz
                    memory > xf
                    memory > xf_OK
                    memory > xf2bad
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xno_name)) ((xdoes_not_exist)))) ((xno_name_again)) ((1.div 0)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xno_name)) ((xdoes_not_exist)))) ((1.div 0)) (0))
                        (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xst)) ((xstr)) ("Hello"))
                                (((unsupported)).apply (((xa).xb)) ((xint)) ((((unsupported)).apply (1) (2))))
                                (((unsupported)).apply ((xst)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply)))
                        xf_OK.write
                          []
                            seq > @
                              (((unsupported)).apply ((xx)) ((1.div 0)))
                        bogusForceDataize.write (((xf_OK)).apply)
                        xfbad.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xx)) ((xint)))
                                bogusForceDataize.write (((xprint)).apply ((xx)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnboundLocalError)))))
                          bogusForceDataize.write (((xfbad)).apply)
                        xf2bad.write
                          []
                            seq > @
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((x__foo)) ((xint)))
                            (((unsupported)).apply ((xs)) ((xstr)) ("attr"))
                            xz.write 2
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((xint)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__annotations__)) ((((unsupported)).apply ("_C__foo") ((xint)) ("s") ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          (((unsupported)).apply)
                            (((unsupported)).apply (((xno_such_name_defined).xattr)) ((xint)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          (((unsupported)).apply ((xC)))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              (((unsupported)).apply (((xx).xy)) ((xlist)) ((((unsupported)).apply)))
                xtest_var_annot_metaclass_semantics.write
                  [xself]
                    memory > x__prepare__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__prepare__.write
                            [xmetacls xname xbases]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ("__annotations__") ((((xCNS)).apply)))))
                        (((unsupported)).apply ((xCMeta)))
                          (((unsupported)).apply ((xXX)) ("ANNOT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xCC).x__annotations__)) ("xx"))) ("ANNOT"))
                xtest_var_annot_module_semantics.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write (((xprint)).apply (((xtest).x__annotations__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xann_module).x__annotations__)) ((((unsupported)).apply (1) (2) ("x") ((xint)) ("y") ((xstr)) ("f") ((((unsupported)).apply (((xtyping).xTuple)) ((((unsupported)).apply ((xint)) ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xann_module).xM).x__annotations__)) ((((unsupported)).apply ("123") (123) ("o") ((xtype)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xann_module2).x__annotations__)) ((((unsupported)).apply)))
                xtest_var_annot_in_module.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          bogusForceDataize.write (((xf_bad_ann)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          bogusForceDataize.write (((xg_bad_ann)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          bogusForceDataize.write (((xD_bad_ann)).apply (5))
                xtest_var_annot_simple_exec.write
                  [xself]
                    memory > xgns
                    memory > xlns
                    seq > @
                      seq
                        xgns.write (((unsupported)).apply)
                        xlns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("'docstring'n__annotations__[1] = 2nx: int = 5n") ((xgns)) ((xlns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlns)) ("__annotations__"))) ((((unsupported)).apply (1) (2) ("x") ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((xgns)) ("__annotations__"))
                xtest_var_annot_custom_maps.write
                  [xself]
                    memory > x__getitem__
                    memory > xns
                    memory > x__setitem__
                    memory > x__init__
                    memory > xnonloc_ns
                    seq > @
                      seq
                        xns.write (((unsupported)).apply ("__annotations__") ((((xCNS)).apply)))
                        bogusForceDataize.write (((xexec)).apply ("X: int; Z: str = \"Z\"; (w): complex = 1j") ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns)) ("__annotations__"))) ("x"))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns)) ("__annotations__"))) ("z"))) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xns)) ("__annotations__"))) ("w"))
                        xnonloc_ns.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).x_dct)) ((((unsupported)).apply)))
                            x__setitem__.write
                              [xself xitem xvalue]
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) ((xitem)))) ((xvalue)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xnonloc_ns)) ((xitem)))) ((xvalue)))
                            x__getitem__.write
                              [xself xitem]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) ((xitem)))))
                        bogusForceDataize.write (((xexec)).apply ("x: int = 1") ((((unsupported)).apply)) ((((xCNS2)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnonloc_ns)) ("__annotations__"))) ("x"))) ((xint)))
                xtest_var_annot_refleak.write
                  [xself]
                    memory > x__getitem__
                    memory > xcns
                    memory > x__setitem__
                    memory > x__init__
                    memory > xnonloc_ns
                    seq > @
                      seq
                        xcns.write (((xCNS)).apply)
                        xnonloc_ns.write (((unsupported)).apply ("__annotations__") ((xcns)))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).x_dct)) ((((unsupported)).apply ("__annotations__") ((xcns)))))
                            x__setitem__.write
                              [xself xitem xvalue]
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) ((xitem)))) ((xvalue)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xnonloc_ns)) ((xitem)))) ((xvalue)))
                            x__getitem__.write
                              [xself xitem]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x_dct)) ((xitem)))))
                        bogusForceDataize.write (((xexec)).apply ("X: str") ((((unsupported)).apply)) ((((xCNS2)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnonloc_ns)) ("__annotations__"))) ("x"))) ((xstr)))
                xtest_var_annot_rhs.write
                  [xself]
                    memory > xns
                    memory > xstmt
                    seq > @
                      seq
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("x: tuple = 1, 2") ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("x"))) ((((unsupported)).apply (1) (2))))
                        xstmt.write "def f():n    x: int = yield"
                        bogusForceDataize.write (((xexec)).apply ((xstmt)) ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((((unsupported)).apply ((xns)) ("f"))).apply)))) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        xns.write (((unsupported)).apply ("a") (1) ("b") ((((unsupported)).apply (2) (3) (4))) ("c") (5) ("Tuple") (((xtyping).xTuple)))
                        bogusForceDataize.write (((xexec)).apply ("x: Tuple[int, ...] = a,*b,c") ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("x"))) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                xtest_funcdef.write
                  [xself]
                    memory > xd11
                    memory > xv2
                    memory > xv1
                    memory > xd01v
                    memory > xd22v
                    memory > xd21v
                    memory > xf
                    memory > xd02
                    memory > xpos0key1
                    memory > xd22
                    memory > xpos2key2
                    memory > xf3
                    memory > xa1
                    memory > xpos2key2dict
                    memory > xd21
                    memory > xf2
                    memory > xclosure
                    memory > xa2
                    memory > xv0
                    memory > xf1
                    memory > xd02v
                    memory > xd12
                    memory > xd01
                    memory > xd12v
                    memory > xd11v
                    memory > xnull
                    seq > @
                      seq
                        xf1.write
                          []
                            seq > @
                        bogusForceDataize.write (((xf1)).apply)
                        bogusForceDataize.write (((xf1)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xf1)).apply ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        xf2.write
                          [xone_argument]
                            seq > @
                        xf3.write
                          [xtwo xarguments]
                            seq > @
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf2).x__code__).xco_varnames)) ((((unsupported)).apply ("one_argument"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf3).x__code__).xco_varnames)) ((((unsupported)).apply ("two") ("arguments"))))
                        xa1.write
                          [xone_arg]
                            seq > @
                        xa2.write
                          [xtwo xargs]
                            seq > @
                        xv0.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xv1.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        xv2.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xf1)).apply)
                        bogusForceDataize.write (((xf2)).apply (1))
                        bogusForceDataize.write (((xf2)).apply (1))
                        bogusForceDataize.write (((xf3)).apply (1) (2))
                        bogusForceDataize.write (((xf3)).apply (1) (2))
                        bogusForceDataize.write (((xv0)).apply)
                        bogusForceDataize.write (((xv0)).apply (1))
                        bogusForceDataize.write (((xv0)).apply (1))
                        bogusForceDataize.write (((xv0)).apply (1) (2))
                        bogusForceDataize.write (((xv0)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (0))
                        bogusForceDataize.write (((xv1)).apply (1))
                        bogusForceDataize.write (((xv1)).apply (1))
                        bogusForceDataize.write (((xv1)).apply (1) (2))
                        bogusForceDataize.write (((xv1)).apply (1) (2) (3))
                        bogusForceDataize.write (((xv1)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (0))
                        bogusForceDataize.write (((xv2)).apply (1) (2))
                        bogusForceDataize.write (((xv2)).apply (1) (2) (3))
                        bogusForceDataize.write (((xv2)).apply (1) (2) (3) (4))
                        bogusForceDataize.write (((xv2)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (0))
                        xd01.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd01)).apply)
                        bogusForceDataize.write (((xd01)).apply (1))
                        bogusForceDataize.write (((xd01)).apply ((((unsupported)).apply ((((unsupported)).apply (1))))))
                        bogusForceDataize.write (((xd01)).apply ((((unsupported)).apply (((((unsupported)).apply).or (((unsupported)).apply (2)))))))
                        bogusForceDataize.write (((xd01)).apply ((((unsupported)).apply (((((unsupported)).apply).or (((unsupported)).apply))))) ((((unsupported)).apply (((((unsupported)).apply).and (((unsupported)).apply))))) ((((unsupported)).apply (((((unsupported)).apply).or (((unsupported)).apply))))))
                        bogusForceDataize.write (((xd01)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (2))))))
                        bogusForceDataize.write (((xd01)).apply ((((unsupported)).apply (((((unsupported)).apply ("a") (2)).or (((unsupported)).apply))))))
                        xd11.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd11)).apply (1))
                        bogusForceDataize.write (((xd11)).apply (1) (2))
                        bogusForceDataize.write (((xd11)).apply (1) ((((unsupported)).apply ((((unsupported)).apply ("b") (2))))))
                        xd21.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd21)).apply (1) (2))
                        bogusForceDataize.write (((xd21)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd21)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write (((xd21)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2) (3))))))
                        bogusForceDataize.write (((xd21)).apply (1) (2) ((((unsupported)).apply ((((unsupported)).apply (3))))))
                        bogusForceDataize.write (((xd21)).apply (1) (2) ((((unsupported)).apply ((((unsupported)).apply ("c") (3))))))
                        xd02.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd02)).apply)
                        bogusForceDataize.write (((xd02)).apply (1))
                        bogusForceDataize.write (((xd02)).apply (1) (2))
                        bogusForceDataize.write (((xd02)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write (((xd02)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2))))))
                        bogusForceDataize.write (((xd02)).apply (1) ((((unsupported)).apply ((((unsupported)).apply ("b") (2))))))
                        bogusForceDataize.write (((xd02)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") (2))))))
                        xd12.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd12)).apply (1))
                        bogusForceDataize.write (((xd12)).apply (1) (2))
                        bogusForceDataize.write (((xd12)).apply (1) (2) (3))
                        xd22.write
                          [xa xb xc xd]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd22)).apply (1) (2))
                        bogusForceDataize.write (((xd22)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd22)).apply (1) (2) (3) (4))
                        xd01v.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd01v)).apply)
                        bogusForceDataize.write (((xd01v)).apply (1))
                        bogusForceDataize.write (((xd01v)).apply (1) (2))
                        bogusForceDataize.write (((xd01v)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))))))
                        bogusForceDataize.write (((xd01v)).apply ((((unsupported)).apply ((((unsupported)).apply (1))))))
                        bogusForceDataize.write (((xd01v)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (2))))))
                        xd11v.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd11v)).apply (1))
                        bogusForceDataize.write (((xd11v)).apply (1) (2))
                        bogusForceDataize.write (((xd11v)).apply (1) (2) (3))
                        xd21v.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd21v)).apply (1) (2))
                        bogusForceDataize.write (((xd21v)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd21v)).apply (1) (2) (3) (4))
                        bogusForceDataize.write (((xd21v)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))))))
                        bogusForceDataize.write (((xd21v)).apply (1) (2) ((((unsupported)).apply ((((unsupported)).apply ("c") (3))))))
                        xd02v.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd02v)).apply)
                        bogusForceDataize.write (((xd02v)).apply (1))
                        bogusForceDataize.write (((xd02v)).apply (1) (2))
                        bogusForceDataize.write (((xd02v)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd02v)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2) (3) (4))))))
                        bogusForceDataize.write (((xd02v)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1) ("b") (2))))))
                        xd12v.write
                          [xa xb xc]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd12v)).apply (1))
                        bogusForceDataize.write (((xd12v)).apply (1) (2))
                        bogusForceDataize.write (((xd12v)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd12v)).apply (1) (2) (3) (4))
                        bogusForceDataize.write (((xd12v)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))))))
                        bogusForceDataize.write (((xd12v)).apply (1) (2) ((((unsupported)).apply ((((unsupported)).apply (3) (4) (5))))))
                        bogusForceDataize.write (((xd12v)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2))))) ((((unsupported)).apply ((((unsupported)).apply ("c") (3))))))
                        xd22v.write
                          [xa xb xc xd]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xd22v)).apply (1) (2))
                        bogusForceDataize.write (((xd22v)).apply (1) (2) (3))
                        bogusForceDataize.write (((xd22v)).apply (1) (2) (3) (4))
                        bogusForceDataize.write (((xd22v)).apply (1) (2) (3) (4) (5))
                        bogusForceDataize.write (((xd22v)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))))))
                        bogusForceDataize.write (((xd22v)).apply (1) (2) ((((unsupported)).apply ((((unsupported)).apply (3) (4) (5))))))
                        bogusForceDataize.write (((xd22v)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2) (3))))) ((((unsupported)).apply ((((unsupported)).apply ("d") (4))))))
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((xstr)).apply ("x") ((((unsupported)).apply ((((unsupported)).apply ("foo") (1))))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Bytes should not work as keyword argument names"))
                        xpos0key1.write
                          [xkey]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xkey)))
                        (((unsupported)).apply ((xpos0key1)) (100))
                        xpos2key2.write
                          [xp1 xp2 xk1 xk2]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)) ((xk1)) ((xk2)))))
                        (((unsupported)).apply ((xpos2key2)) (1) (2) (100))
                        (((unsupported)).apply ((xpos2key2)) (1) (2) (100) (200))
                        (((unsupported)).apply ((xpos2key2)) (1) (2) (100) (200))
                        xpos2key2dict.write
                          [xp1 xp2 xk1 xk2]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)) ((xk1)) ((xk2)) ((xkwarg)))))
                        (((unsupported)).apply ((xpos2key2dict)) (1) (2) (100) (100) (200))
                        (((unsupported)).apply ((xpos2key2dict)) (1) (2) (100) (200) (100))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("def f(*): pass"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("def f(*,): pass"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("def f(*, **kwds): pass"))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (1) (2) ((((unsupported)).apply ((((unsupported)).apply (3) (4))))) (5))) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (4))) ((((unsupported)).apply ("x") (2) ("y") (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (1) ((((unsupported)).apply ((((unsupported)).apply (2) (3))))) (4))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("f(1, x=2, *(3,4), x=5)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((unsupported)).apply ((((unsupported)).apply ("eggs") ("scrambled") ("spam") ("fried"))))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("eggs") ("scrambled") ("spam") ("fried"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) ("fried") ((((unsupported)).apply ((((unsupported)).apply ("eggs") ("scrambled"))))))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("eggs") ("scrambled") ("spam") ("fried"))))))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("f(*g(1=2))"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("f(**g(1=2))"))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("return") ((xlist)))))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("x") ((xint)))))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("x") ((xint)))))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("x") ((xint)))))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("x") ((xstr)))))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("x") ((xfloat)))))
                        xf.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("y") (3))))
                        xf.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("y") (3))))
                        xf.write
                          [xa xb xc xd]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("b") (1) ("c") (2))))
                        xf.write
                          [xa xb xc xd]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("b") (1) ("c") (2))))
                        xf.write
                          [xa xb xc xd xe xf]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("b") (1) ("c") (2) ("e") (3) ("g") (6))))
                        xf.write
                          [xa xb xc xd xe xf xh xi xj]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("b") (1) ("c") (2) ("e") (3) ("g") (6) ("h") (7) ("j") (9) ("k") (11) ("return") (12))))
                        xf.write
                          [xa xb xc xd xe xf xh xi xj]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("b") (1) ("c") (2) ("e") (3) ("f") ((xint)) ("g") (6) ("h") (7) ("j") (9) ("k") (11) ("return") (12))))
                        (((unsupported)).apply)
                          xf.write
                            [xself x__kw]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((xSpam)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xSpam).xf).x__annotations__)) ((((unsupported)).apply ("_Spam__kw") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xHam).xf).x__annotations__)) ((((unsupported)).apply ("_Spam__kw") (1))))
                        xnull.write
                          [xx]
                            seq > @
                              (((unsupported)).apply ((xx)))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__annotations__)) ((((unsupported)).apply ("return") ((xlist)))))
                        xclosure.write 1
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply ((xclosure)))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xclosure)))
                        xf.write
                          [xk]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xclosure)))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xclosure)))
                        xf.write
                          [xa]
                            seq > @
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                xtest_lambdef.write
                  [xself]
                    memory > xl14
                    memory > xl6
                    memory > xl19
                    memory > xl3
                    memory > xl12
                    memory > xl13
                    memory > xl4
                    memory > xl20
                    memory > xl10
                    memory > xl24
                    memory > xl16
                    memory > xl2
                    memory > xl15
                    memory > xl21
                    memory > xl11
                    memory > xl1
                    memory > xl22
                    memory > xl5
                    memory > xl23
                    memory > xl18
                    memory > xl17
                    seq > @
                      seq
                        xl1.write (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl1)).apply)) (0))
                        xl2.write (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xd)))))
                        xl3.write (((unsupported)).apply ((((unsupported)).apply ((2.less (xx))) ((xx)) ((((unsupported)).apply ((1.neg)) (3) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl3)).apply)) ((((unsupported)).apply (0) (1) (0))))
                        xl4.write (((unsupported)).apply ((((xx)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl4)).apply)) (1))
                        xl5.write (((unsupported)).apply ((((xx).add (xy)).add (xz))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl5)).apply (1) (2))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl5)).apply (1) (2) (3))) (6))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("lambda x: x = 2"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("lambda (None,): None"))
                        xl6.write (((unsupported)).apply ((((xx).add (xy)).add (xk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xl6)).apply (1) (2))) (((1.add 2).add 20)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl6)) (1) (2) (10))) (((1.add 2).add 10)))
                        xl10.write (((unsupported)).apply (0))
                        xl11.write (((unsupported)).apply (0))
                        xl12.write (((unsupported)).apply (0))
                        xl13.write (((unsupported)).apply (0))
                        xl14.write (((unsupported)).apply (0))
                        xl15.write (((unsupported)).apply (0))
                        xl16.write (((unsupported)).apply (0))
                        xl17.write (((unsupported)).apply (0))
                        xl18.write (((unsupported)).apply (0))
                        xl19.write (((unsupported)).apply (0))
                        xl20.write (((unsupported)).apply (0))
                        xl21.write (((unsupported)).apply (0))
                        xl22.write (((unsupported)).apply (0))
                        xl23.write (((unsupported)).apply (0))
                        xl24.write (((unsupported)).apply (0))
                xtest_simple_stmt.write
                  [xself]
                    memory > xx
                    memory > xfoo
                    seq > @
                      seq
                        xx.write 1
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)))))))
                        xfoo.write
                          []
                            memory > xx
                            seq > @
                              seq
                                xx.write 1
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)))))))
                        bogusForceDataize.write (((xfoo)).apply)
                xtest_expr_stmt.write
                  [xself]
                    memory > xxyz
                    memory > xx
                    memory > xy
                    memory > xz
                    memory > xabc
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (1) (2) (3))
                        xx.write 1
                        xx.write (((unsupported)).apply (1) (2) (3))
                        (((unsupported)).apply ((xx)) ((xy)) ((xz)) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply ((xabc)) ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) ((((unsupported)).apply ((xx)) ((xy)) ((xz)))) ((xxyz)) ((((unsupported)).apply (1) (2) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("x + 1 = 1"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("a + 1 = b + 2"))
                xtest_former_statements_refer_to_builtins.write
                  [xself]
                    memory > xcases
                    memory > xsource
                    memory > xcustom_msg
                    memory > xkeywords
                    seq > @
                      seq
                        xkeywords.write (((unsupported)).apply ("print") ("exec"))
                        xcases.write (((unsupported)).apply ("{} foo") ("{} {{1:foo}}") ("if 1: {} foo") ("if 1: {} {{1:foo}}") ("if 1:n    {} foo") ("if 1:n    {} {{1:foo}}"))
                        (((unsupported)).apply ((xkeyword)) ((xkeywords)))
                          seq
                            xcustom_msg.write ((("call to '{}'".xformat)).apply ((xkeyword)))
                            (((unsupported)).apply ((xcase)) ((xcases)))
                              seq
                                xsource.write ((((xcase).xformat)).apply ((xkeyword)))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsource)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xcustom_msg)))))
                                    bogusForceDataize.write (((xexec)).apply ((xsource)))
                                xsource.write ((((xsource).xreplace)).apply ("foo") ("(foo.)"))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsource)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                                    bogusForceDataize.write (((xexec)).apply ((xsource)))
                xtest_del_stmt.write
                  [xself]
                    memory > xabc
                    memory > xxyz
                    seq > @
                      seq
                        xabc.write (((unsupported)).apply (1) (2) (3))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))) ((xabc)))
                        xxyz.write (((unsupported)).apply ((xx)) ((xy)) ((xz)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xabc)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((((unsupported)).apply ((xz)) ((xxyz)))))))))
                xtest_pass_stmt.write
                  [xself]
                    seq > @
                xtest_break_stmt.write
                  [xself]
                    seq > @
                      while.
                        1
                        [unused]
                          seq > @
                            (((unsupported)).apply)
                xtest_continue_stmt.write
                  [xself]
                    memory > xmsg
                    memory > xi
                    seq > @
                      seq
                        xi.write 1
                        while.
                          (xi)
                          [unused]
                            seq > @
                              seq
                                xi.write 0
                                (((unsupported)).apply)
                        xmsg.write ""
                        while.
                          ((xmsg).not)
                          [unused]
                            seq > @
                              seq
                                xmsg.write "ok"
                                (((unsupported)).apply)
                                  seq
                                    (((unsupported)).apply)
                                    xmsg.write "continue failed to continue inside try"
                                  xmsg.write "continue inside try called except block"
                        ((xmsg).neq "ok").if
                          bogusForceDataize.write ((((xself).xfail)).apply ((xmsg)))
                        xmsg.write ""
                        while.
                          ((xmsg).not)
                          [unused]
                            seq > @
                              seq
                                xmsg.write "finally block not called"
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  xmsg.write "ok"
                        ((xmsg).neq "ok").if
                          bogusForceDataize.write ((((xself).xfail)).apply ((xmsg)))
                xtest_break_continue_loop.write
                  [xself]
                    memory > xtest_inner
                    seq > @
                      seq
                        xtest_inner.write
                          [xextra_burning_oil xcount]
                            memory > xbig_hippo
                            seq > @
                              (((unsupported)).apply)
                                xbig_hippo.write 2
                                while.
                                  (xbig_hippo)
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xcount)) (1))
                                        (((unsupported)).apply)
                                          seq
                                            ((xextra_burning_oil).and ((xbig_hippo).eq 1)).if
                                              seq
                                                (((unsupported)).apply ((xextra_burning_oil)) (1))
                                                (((unsupported)).apply)
                                            (((unsupported)).apply ((xbig_hippo)) (1))
                                            (((unsupported)).apply)
                                          (((unsupported)).apply)
                                (((xcount).greater 2).or ((xbig_hippo).neq 1)).if
                                  bogusForceDataize.write ((((xself).xfail)).apply ("continue then break in try/except in loop broken!"))
                        bogusForceDataize.write (((xtest_inner)).apply)
                xtest_return.write
                  [xself]
                    memory > xg3
                    memory > xx
                    memory > xg2
                    memory > xy
                    memory > xg1
                    seq > @
                      seq
                        xg1.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xg2.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xg3.write
                          []
                            memory > xz
                            seq > @
                              seq
                                xz.write (((unsupported)).apply (2) (3))
                                (((unsupported)).apply ((((unsupported)).apply (1) ((((unsupported)).apply ((xz)))))))
                        bogusForceDataize.write (((xg1)).apply)
                        xx.write (((xg2)).apply)
                        xy.write (((xg3)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy)) ((((unsupported)).apply (1) (2) (3))) ("unparenthesized star expr return"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("class foo:return 1"))
                xtest_break_in_finally.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  unsupported
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                            (((unsupported)).apply)
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                            (((unsupported)).apply)
                              (((unsupported)).apply)
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                            (((unsupported)).apply)
                              unsupported
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (0))
                xtest_continue_in_finally.write
                  [xself]
                    memory > xcount
                    seq > @
                      seq
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (2))
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (2))
                        xcount.write 0
                        while.
                          ((xcount).less 2)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply)
                                  unsupported
                                  (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (2))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          seq
                            (((unsupported)).apply)
                              (((unsupported)).apply)
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          (((unsupported)).apply)
                            (((unsupported)).apply)
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                        (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                          seq
                            (((unsupported)).apply)
                              unsupported
                              (((unsupported)).apply)
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (1))
                xtest_return_in_finally.write
                  [xself]
                    memory > xg3
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        xg1.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg1)).apply)) (1))
                        xg2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (2))
                                (((unsupported)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg2)).apply)) (3))
                        xg3.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg3)).apply)) (4))
                xtest_break_in_finally_after_return.write
                  [xself]
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        xg1.write
                          [xx]
                            memory > xcount2
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                                  seq
                                    xcount2.write 0
                                    while.
                                      ((xcount2).less 20)
                                      [unused]
                                        seq > @
                                          seq
                                            (((unsupported)).apply ((xcount2)) (10))
                                            (((unsupported)).apply)
                                              (((unsupported)).apply (((xcount).add (xcount2))))
                                              (xx).if
                                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ("end") ((xcount)) ((xcount2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg1)).apply (FALSE))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg1)).apply (TRUE))) ((((unsupported)).apply ("end") (1) (10))))
                        xg2.write
                          [xx]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                                  (((unsupported)).apply ((xcount2)) ((((unsupported)).apply (10) (20))))
                                    (((unsupported)).apply)
                                      (((unsupported)).apply (((xcount).add (xcount2))))
                                      (xx).if
                                        (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ("end") ((xcount)) ((xcount2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg2)).apply (FALSE))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg2)).apply (TRUE))) ((((unsupported)).apply ("end") (1) (10))))
                xtest_continue_in_finally_after_return.write
                  [xself]
                    memory > xg2
                    memory > xg1
                    seq > @
                      seq
                        xg1.write
                          [xx]
                            memory > xcount
                            seq > @
                              seq
                                xcount.write 0
                                while.
                                  ((xcount).less 100)
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xcount)) (1))
                                        (((unsupported)).apply)
                                          (((unsupported)).apply ((xcount)))
                                          (xx).if
                                            (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ("end") ((xcount)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg1)).apply (FALSE))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg1)).apply (TRUE))) ((((unsupported)).apply ("end") (100))))
                        xg2.write
                          [xx]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcount)) ((((unsupported)).apply (0) (1))))
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xcount)))
                                    (xx).if
                                      (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ("end") ((xcount)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg2)).apply (FALSE))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg2)).apply (TRUE))) ((((unsupported)).apply ("end") (1))))
                xtest_yield.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply)))
                        xg.write
                          []
                            memory > xx
                            seq > @
                              xx.write (((unsupported)).apply (1))
                        xg.write
                          []
                            memory > xx
                            seq > @
                              xx.write (((unsupported)).apply ((((unsupported)).apply)))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (1) (1))))
                        xg.write
                          []
                            memory > xx
                            seq > @
                              xx.write (((unsupported)).apply ((((unsupported)).apply (1) (1))))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): yield from (), 1"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): x = yield from (), 1"))
                        xg.write
                          []
                            seq > @
                              unsupported
                        xg.write
                          []
                            seq > @
                              unsupported
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): 1, yield 1"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): 1, yield from ()"))
                        xg.write
                          []
                            seq > @
                              bogusForceDataize.write (((xf)).apply ((((unsupported)).apply (1))))
                        xg.write
                          []
                            seq > @
                              bogusForceDataize.write (((xf)).apply ((((unsupported)).apply (1))) (1))
                        xg.write
                          []
                            seq > @
                              bogusForceDataize.write (((xf)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                        xg.write
                          []
                            seq > @
                              bogusForceDataize.write (((xf)).apply ((((unsupported)).apply ((((unsupported)).apply)))) (1))
                        xg.write
                          []
                            memory > xrest
                            seq > @
                              seq
                                xrest.write (((unsupported)).apply (4) (5) (6))
                                (((unsupported)).apply ((((unsupported)).apply (1) (2) (3) ((((unsupported)).apply ((xrest)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xg)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): f(yield 1)"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): f(yield 1, 1)"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): f(yield from ())"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(): f(yield from (), 1)"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("yield"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("yield from"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("class foo:yield 1"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("class foo:yield from ()"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("def g(a:(yield)): pass"))
                xtest_yield_in_comprehensions.write
                  [xself]
                    memory > xcheck
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((((unsupported)).apply (1))))))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))))))
                        xcheck.write ((xself).xcheck_syntax_error)
                        bogusForceDataize.write (((xcheck)).apply ("def g(): [(yield x) for x in ()]") ("'yield' inside list comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): [x for x in () if not (yield x)]") ("'yield' inside list comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): [y for x in () for y in [(yield x)]]") ("'yield' inside list comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): {(yield x) for x in ()}") ("'yield' inside set comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): {(yield x): x for x in ()}") ("'yield' inside dict comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): {x: (yield x) for x in ()}") ("'yield' inside dict comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): ((yield x) for x in ())") ("'yield' inside generator expression"))
                        bogusForceDataize.write (((xcheck)).apply ("def g(): [(yield from x) for x in ()]") ("'yield' inside list comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("class C: [(yield x) for x in ()]") ("'yield' inside list comprehension"))
                        bogusForceDataize.write (((xcheck)).apply ("[(yield x) for x in ()]") ("'yield' inside list comprehension"))
                xtest_raise.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xRuntimeError)))
                          (((unsupported)).apply ((((xRuntimeError)).apply ("just testing"))))
                        (((unsupported)).apply ((xKeyboardInterrupt)))
                          (((unsupported)).apply ((xKeyboardInterrupt)))
                xtest_import.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                xtest_global.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                xtest_nonlocal.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xf
                    seq > @
                      seq
                        xx.write 0
                        xy.write 0
                        xf.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                xtest_assert.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (1))
                        (((unsupported)).apply (1) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        (((unsupported)).apply (1) ((((unsupported)).apply (((xx).add 1)))))
                        (((unsupported)).apply ((xAssertionError)))
                          (((unsupported)).apply (TRUE))
                          bogusForceDataize.write ((((xself).xfail)).apply ("'assert True' should not have raised an AssertionError"))
                        (((unsupported)).apply ((xAssertionError)))
                          (((unsupported)).apply (TRUE) ("this should always pass"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("'assert True, msg' should not have raised an AssertionError"))
                xtestAssert2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xAssertionError)))
                          (((unsupported)).apply (0) ("msg"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xe).xargs)) (0))) ("msg"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("AssertionError not raised by assert 0"))
                        (((unsupported)).apply ((xAssertionError)))
                          (((unsupported)).apply (FALSE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xe).xargs)))) (0))
                          bogusForceDataize.write ((((xself).xfail)).apply ("AssertionError not raised by 'assert False'"))
                        bogusForceDataize.write ((((xself).xcheck_syntax_warning)).apply ("assert(x, \"msg\")") ("assertion is always true"))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xSyntaxWarning)))
                            bogusForceDataize.write (((xcompile)).apply ("assert x, \"msg\"") ("<testcase>") ("exec"))
                xtest_if.write
                  [xself]
                    seq > @
                      seq
                        1.if
                        1.if
                        0.if
                          0.if
                        0.if
                          0.if
                            0.if
                              0.if
                xtest_while.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        while.
                          0
                          [unused]
                            seq > @
                        (((unsupported)).apply (0))
                        xx.write 0
                        (((unsupported)).apply (0))
                          xx.write 1
                          xx.write 2
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (2))
                xtest_for.write
                  [xself]
                    memory > x__getitem__
                    memory > x__init__
                    memory > x__len__
                    memory > xresult
                    memory > xn
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)) ((xk)))) ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xmax]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xmax)) ((xmax)))
                                    (((unsupported)).apply (((xself).xsofar)) ((((unsupported)).apply)))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xlen)).apply (((xself).xsofar)))))
                            x__getitem__.write
                              [xself xi]
                                memory > xn
                                seq > @
                                  seq
                                    ((((unsupported)).apply (0) ((xi)) (((xself).xmax))).not).if
                                      (((unsupported)).apply ((xIndexError)))
                                    xn.write (((xlen)).apply (((xself).xsofar)))
                                    while.
                                      ((xn).leq (xi))
                                      [unused]
                                        seq > @
                                          seq
                                            bogusForceDataize.write (((((xself).xsofar).xappend)).apply (((xn).mul (xn))))
                                            xn.write ((xn).add 1)
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xsofar)) ((xi)))))
                        xn.write 0
                        (((unsupported)).apply ((xx)) ((((xSquares)).apply (10))))
                          xn.write ((xn).add (xx))
                        ((xn).neq 285).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("for over growing sequence"))
                        xresult.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (2))) ((((unsupported)).apply (3))))))
                          bogusForceDataize.write ((((xresult).xappend)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (1) (2) (3))))
                xtest_try.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xZeroDivisionError)))
                          unsupported
                        (((unsupported)).apply ((xEOFError)) ((xTypeError)))
                          unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xEOFError)) ((xTypeError)) ((xZeroDivisionError)))))
                          unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xEOFError)) ((xTypeError)) ((xZeroDivisionError)))))
                          unsupported
                        (((unsupported)).apply)
                xtest_suite.write
                  [xself]
                    seq > @
                      seq
                        1.if
                        1.if
                        1.if
                          seq
                xtest_test.write
                  [xself]
                    seq > @
                      seq
                        (1.not).if
                        (1.and 1).if
                        (1.or 1).if
                        (((1.not).not).not).if
                        (((1.not).and 1).and 1).if
                        (((1.and 1).or ((1.and 1).and 1)).or ((1.not).and 1)).if
                xtest_comparison.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        1.if
                        xx.write (1.eq 1)
                        (1.eq 1).if
                        (1.neq 1).if
                        (1.less 1).if
                        (1.greater 1).if
                        (1.leq 1).if
                        (1.geq 1).if
                        (((unsupported)).apply ((xx)) ((xx))).if
                        (((unsupported)).apply ((xx)) ((xx))).if
                        (((unsupported)).apply (1) ((((unsupported)).apply))).if
                        (((unsupported)).apply (1) ((((unsupported)).apply))).if
                        (((unsupported)).apply (1) (1) (1) (1) (1) (1) (1) (1) ((xx)) ((xx)) ((xx))).if
                xtest_comparison_is_literal.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xtest xmsg]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xcheck_syntax_warning)).apply ((xtest)) ((xmsg)))
                        bogusForceDataize.write (((xcheck)).apply ("x is 1"))
                        bogusForceDataize.write (((xcheck)).apply ("x is \"thing\""))
                        bogusForceDataize.write (((xcheck)).apply ("1 is x"))
                        bogusForceDataize.write (((xcheck)).apply ("x is y is 1"))
                        bogusForceDataize.write (((xcheck)).apply ("x is not 1") ("\"is not\" with a literal"))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xSyntaxWarning)))
                            bogusForceDataize.write (((xcompile)).apply ("x is None") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("x is False") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("x is True") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("x is ...") ("<testcase>") ("exec"))
                xtest_warn_missed_comma.write
                  [xself]
                    memory > xmsg
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xtest]
                            seq > @
                              bogusForceDataize.write ((((xself).xcheck_syntax_warning)).apply ((xtest)) ((xmsg)))
                        xmsg.write "is not callable; perhaps you missed a comma?"
                        bogusForceDataize.write (((xcheck)).apply ("[(1, 2) (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[(x, y) (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[{1, 2} (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[{1: 2} (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[i for i in range(5)] (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[{i for i in range(5)} (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[(i for i in range(5)) (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[{i: i for i in range(5)} (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[f\"{x}\" (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[f\"x={x}\" (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[\"abc\" (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[b\"abc\" (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[123 (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[12.3 (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[12.3j (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[None (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[True (3, 4)]"))
                        bogusForceDataize.write (((xcheck)).apply ("[... (3, 4)]"))
                        xmsg.write "is not subscriptable; perhaps you missed a comma?"
                        bogusForceDataize.write (((xcheck)).apply ("[{1, 2} [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[{i for i in range(5)} [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[(i for i in range(5)) [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[(lambda x, y: x) [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[123 [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[12.3 [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[12.3j [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[None [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[True [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[... [i, j]]"))
                        xmsg.write "indices must be integers or slices, not tuple; perhaps you missed a comma?"
                        bogusForceDataize.write (((xcheck)).apply ("[(1, 2) [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[(x, y) [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[i for i in range(5)] [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[f\"{x}\" [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[f\"x={x}\" [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[\"abc\" [i, j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[b\"abc\" [i, j]]"))
                        xmsg.write "indices must be integers or slices, not tuple;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [3, 4]]"))
                        xmsg.write "indices must be integers or slices, not list;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [[3, 4]]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [[i for i in range(5)]]]"))
                        xmsg.write "indices must be integers or slices, not set;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [{3, 4}]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [{i for i in range(5)}]]"))
                        xmsg.write "indices must be integers or slices, not dict;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [{3: 4}]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [{i: i for i in range(5)}]]"))
                        xmsg.write "indices must be integers or slices, not generator;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [(i for i in range(5))]]"))
                        xmsg.write "indices must be integers or slices, not function;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [(lambda x, y: x)]]"))
                        xmsg.write "indices must be integers or slices, not str;"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [f\"{x}\"]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [f\"x={x}\"]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [\"abc\"]]"))
                        xmsg.write "indices must be integers or slices, not"
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [b\"abc\"]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [12.3]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [12.3j]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [None]]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[1, 2] [...]]"))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xSyntaxWarning)))
                            bogusForceDataize.write (((xcompile)).apply ("[(lambda x, y: x) (3, 4)]") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("[[1, 2] [i]]") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("[[1, 2] [0]]") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("[[1, 2] [True]]") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("[[1, 2] [1:2]]") ("<testcase>") ("exec"))
                            bogusForceDataize.write (((xcompile)).apply ("[{(1, 2): 3} [i, j]]") ("<testcase>") ("exec"))
                xtest_binary_mask_ops.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (1.and 1)
                        xx.write (((unsupported)).apply (1) (1))
                        xx.write (1.or 1)
                xtest_shift_ops.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((unsupported)).apply (1) (1))
                        xx.write (((unsupported)).apply (1) (1))
                        xx.write (((unsupported)).apply ((((unsupported)).apply (1) (1))) (1))
                xtest_additive_ops.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 1
                        xx.write (1.add 1)
                        xx.write ((1.sub 1).sub 1)
                        xx.write ((((1.sub 1).add 1).sub 1).add 1)
                xtest_multiplicative_ops.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (1.mul 1)
                        xx.write (1.div 1)
                        xx.write (1.mod 1)
                        xx.write (((1.div 1).mul 1).mod 1)
                xtest_unary_ops.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (1)
                        xx.write (1.neg)
                        xx.write (1.neg)
                        xx.write ((((unsupported)).apply ((1.neg)) ((1.and 1))).or (((unsupported)).apply ((1.and 1)) ((1.neg))))
                        xx.write (((((1.neg).mul 1).div 1).add (1.mul 1)).sub ((((1.neg).neg).neg).mul 1))
                xtest_selectors.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xL
                    memory > xx
                    memory > xs
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xc.write (((unsupported)).apply (((xsys).xpath)) (0))
                        xx.write ((((xtime).xtime)).apply)
                        xx.write ((((((unsupported)).apply (((xsys).xmodules)) ("time")).xtime)).apply)
                        xa.write "01234"
                        xc.write (((unsupported)).apply ((xa)) (0))
                        xc.write (((unsupported)).apply ((xa)) ((1.neg)))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply (0) (5))))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply (5))))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply (0))))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply)))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply ((5.neg)))))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))
                        xs.write (((unsupported)).apply ((xa)) ((((unsupported)).apply ((4.neg)) ((3.neg)))))
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))) (3))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))) (4))
                        xL.write (((xlist)).apply ((xd)))
                        (((unsupported)).apply (((xL).xsort)) ((((unsupported)).apply ((((unsupported)).apply (((((xtype)).apply ((xx))).x__name__)) ((xx)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xL)))) ("[1, (1,), (1, 2), (1, 2, 3)]"))
                xtest_atoms.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 1
                        xx.write ((1.or 2).or 3)
                        xx.write (((unsupported)).apply (((1.or 2).or 3)) (2) (3))
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply (1))
                        xx.write (((unsupported)).apply (((1.or 2).or 3)))
                        xx.write (((unsupported)).apply (((1.or 2).or 3)) (2) (3))
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply)
                        xx.write (((unsupported)).apply ("one") (1))
                        xx.write (((unsupported)).apply ("one") (1))
                        xx.write (((unsupported)).apply (("one".or "two")) ((1.or 2)))
                        xx.write (((unsupported)).apply ("one") (1) ("two") (2))
                        xx.write (((unsupported)).apply ("one") (1) ("two") (2))
                        xx.write (((unsupported)).apply ("one") (1) ("two") (2) ("three") (3) ("four") (4) ("five") (5) ("six") (6))
                        xx.write (((unsupported)).apply ("one"))
                        xx.write (((unsupported)).apply ("one") (1))
                        xx.write (((unsupported)).apply ("one") ("two") ("three"))
                        xx.write (((unsupported)).apply (2) (3) (4))
                        xx.write (xx)
                        xx.write "x"
                        xx.write 123
                xtest_classdef.write
                  [xself]
                    memory > xmeth1
                    memory > xmeth2
                    memory > xclass_decorator
                    memory > xmeth3
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xB)))
                        (((unsupported)).apply ((xB)))
                        (((unsupported)).apply ((xC1)) ((xC2)) ((xB)))
                        (((unsupported)).apply)
                          seq
                            xmeth1.write
                              [xself]
                                seq > @
                            xmeth2.write
                              [xself xarg]
                                seq > @
                            xmeth3.write
                              [xself xa1 xa2]
                                seq > @
                        xclass_decorator.write
                          [xx]
                            seq > @
                              (((unsupported)).apply ((xx)))
                        (((unsupported)).apply ((xclass_decorator)))
                xtest_dictcomps.write
                  [xself]
                    memory > xnums
                    seq > @
                      seq
                        xnums.write (((unsupported)).apply (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xi)) (((xi).add 1)) ((xi)) ((xnums)))) ((((unsupported)).apply (1) (2) (2) (3) (3) (4))))
                xtest_listcomps.write
                  [xself]
                    memory > xparts
                    memory > xspcs
                    memory > xsuppliers
                    memory > xnums
                    memory > xstrs
                    memory > xx
                    memory > xtest_in_func
                    memory > xsuppart
                    memory > xtest_nested_front
                    seq > @
                      seq
                        xnums.write (((unsupported)).apply (1) (2) (3) (4) (5))
                        xstrs.write (((unsupported)).apply ("Apple") ("Banana") ("Coconut"))
                        xspcs.write (((unsupported)).apply ("  Apple") (" Banana ") ("Coco  nut  "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xs).xstrip)).apply)) ((xs)) ((xspcs)))) ((((unsupported)).apply ("Apple") ("Banana") ("Coco  nut"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((3.mul (xx))) ((xx)) ((xnums)))) ((((unsupported)).apply (3) (6) (9) (12) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xx)) ((xnums)) (((xx).greater 2)))) ((((unsupported)).apply (3) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xi)) ((xs)))) ((xi)) ((xnums)) ((xs)) ((xstrs)))) ((((unsupported)).apply ((((unsupported)).apply (1) ("Apple"))) ((((unsupported)).apply (1) ("Banana"))) ((((unsupported)).apply (1) ("Coconut"))) ((((unsupported)).apply (2) ("Apple"))) ((((unsupported)).apply (2) ("Banana"))) ((((unsupported)).apply (2) ("Coconut"))) ((((unsupported)).apply (3) ("Apple"))) ((((unsupported)).apply (3) ("Banana"))) ((((unsupported)).apply (3) ("Coconut"))) ((((unsupported)).apply (4) ("Apple"))) ((((unsupported)).apply (4) ("Banana"))) ((((unsupported)).apply (4) ("Coconut"))) ((((unsupported)).apply (5) ("Apple"))) ((((unsupported)).apply (5) ("Banana"))) ((((unsupported)).apply (5) ("Coconut"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xi)) ((xs)))) ((xi)) ((xnums)) ((xs)) ((((unsupported)).apply ((xf)) ((xf)) ((xstrs)) ((((unsupported)).apply ("n") ((xf)))))))) ((((unsupported)).apply ((((unsupported)).apply (1) ("Banana"))) ((((unsupported)).apply (1) ("Coconut"))) ((((unsupported)).apply (2) ("Banana"))) ((((unsupported)).apply (2) ("Coconut"))) ((((unsupported)).apply (3) ("Banana"))) ((((unsupported)).apply (3) ("Coconut"))) ((((unsupported)).apply (4) ("Banana"))) ((((unsupported)).apply (4) ("Coconut"))) ((((unsupported)).apply (5) ("Banana"))) ((((unsupported)).apply (5) ("Coconut"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((xi)))) ((xi)) ((((xrange)).apply (((xa).add 1)))))))).apply ((xj)))) ((xj)) ((((xrange)).apply (5))))) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1) (2) (4))) ((((unsupported)).apply (1) (3) (9) (27))) ((((unsupported)).apply (1) (4) (16) (64) (256))))))
                        xtest_in_func.write
                          [xl]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) ((xx)) (3))) ((xx)) ((xl)) (((xx).greater 2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtest_in_func)).apply ((xnums)))) ((((unsupported)).apply (FALSE) (FALSE) (FALSE))))
                        xtest_nested_front.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xy)) ((xy)) ((((unsupported)).apply ((xx)) (((xx).add 1)))))) ((xx)) ((((unsupported)).apply (1) (3) (5))))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (5) (6))))))
                        bogusForceDataize.write (((xtest_nested_front)).apply)
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("[i, s for i in nums for s in strs]"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("[x if y]"))
                        xsuppliers.write (((unsupported)).apply ((((unsupported)).apply (1) ("Boeing"))) ((((unsupported)).apply (2) ("Ford"))) ((((unsupported)).apply (3) ("Macdonalds"))))
                        xparts.write (((unsupported)).apply ((((unsupported)).apply (10) ("Airliner"))) ((((unsupported)).apply (20) ("Engine"))) ((((unsupported)).apply (30) ("Cheeseburger"))))
                        xsuppart.write (((unsupported)).apply ((((unsupported)).apply (1) (10))) ((((unsupported)).apply (1) (20))) ((((unsupported)).apply (2) (20))) ((((unsupported)).apply (3) (30))))
                        xx.write (((unsupported)).apply ((((unsupported)).apply ((xsname)) ((xpname)))) ((((unsupported)).apply ((xsno)) ((xsname)))) ((xsuppliers)) ((((unsupported)).apply ((xpno)) ((xpname)))) ((xparts)) ((((unsupported)).apply ((xsp_sno)) ((xsp_pno)))) ((xsuppart)) ((((xsno).eq (xsp_sno)).and ((xpno).eq (xsp_pno)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((((unsupported)).apply ((((unsupported)).apply ("Boeing") ("Airliner"))) ((((unsupported)).apply ("Boeing") ("Engine"))) ((((unsupported)).apply ("Ford") ("Engine"))) ((((unsupported)).apply ("Macdonalds") ("Cheeseburger"))))))
                xtest_genexps.write
                  [xself]
                    memory > xa
                    memory > xb
                    memory > xg
                    seq > @
                      seq
                        xg.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))) ((xx)) ((((xrange)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))
                        (((unsupported)).apply ((xStopIteration)))
                          seq
                            bogusForceDataize.write (((xnext)).apply ((xg)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("should produce StopIteration exception"))
                        xa.write 1
                        (((unsupported)).apply ((xTypeError)))
                          seq
                            xg.write (((unsupported)).apply ((xa)) ((xd)) ((xa)))
                            bogusForceDataize.write (((xnext)).apply ((xg)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("should produce TypeError"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xx)) ("abcd") ((xy)) ("abcd"))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xx)) ("abcd") ((xy)) ("abcd"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xx)) ("ab") ((xy)) ("xy"))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xx)) ("ab") ((xy)) ("xy"))))
                        xa.write (((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))
                        xb.write (((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((xa)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((xb)))) ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) (2))) ((xx)) ((((xrange)).apply (10))))))) ((((xsum)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) (2))) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply (((xx).mul (xx))) ((xx)) ((((xrange)).apply (10))) (((xx).mod 2)))))) ((((xsum)).apply ((((unsupported)).apply (((xx).mul (xx))) ((xx)) ((((xrange)).apply (10))) (((xx).mod 2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((((xrange)).apply (10))))))))) ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((((unsupported)).apply ((xz)) ((xz)) ((((xrange)).apply (10))))))))))) ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((((unsupported)).apply ((xz)) ((xz)) ((((xrange)).apply (10))))))))))) ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((((unsupported)).apply ((xz)) ((xz)) ((((xrange)).apply (10))) (TRUE))))) (TRUE))))) ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply ((xy)) ((xy)) ((((unsupported)).apply ((xz)) ((xz)) ((((xrange)).apply (10))) (TRUE))) (FALSE))) (TRUE))))) (0))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("foo(x for x in range(10), 100)"))
                        bogusForceDataize.write (((xcheck_syntax_error)).apply ((xself)) ("foo(100, x for x in range(10))"))
                xtest_comprehension_specials.write
                  [xself]
                    memory > xt
                    memory > xx
                    memory > xg
                    seq > @
                      seq
                        xx.write 10
                        xg.write (((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply ((xx)))))
                        xx.write 5
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((xg)))))) (10))
                        xx.write 10
                        xt.write FALSE
                        xg.write (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((xi)) ((((xrange)).apply ((xx)))) ((xt)) ((xj)) ((((xrange)).apply ((xx)))))
                        xx.write 5
                        xt.write TRUE
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((xi)) ((((xrange)).apply (10))) ((xj)) ((((xrange)).apply (5))))) ((((xlist)).apply ((xg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))) (((xx).mod 2)) (((xx).mod 3)))) ((((unsupported)).apply (1) (5) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xrange)).apply (10))) (((xx).mod 2)) (((xx).mod 3)))))) ((((unsupported)).apply (1) (5) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xx)))) ((((unsupported)).apply ((((unsupported)).apply (4))) ((((unsupported)).apply (5))) ((((unsupported)).apply (6))))))) ((((unsupported)).apply (4) (5) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xx)))) ((((unsupported)).apply ((((unsupported)).apply (7))) ((((unsupported)).apply (8))) ((((unsupported)).apply (9))))))))) ((((unsupported)).apply (7) (8) (9))))
                xtest_with_statement.write
                  [xself]
                    memory > x__enter__
                    memory > x__exit__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (1) (2))))
                            x__exit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                        (((unsupported)).apply ((((xmanager)).apply)))
                        (((unsupported)).apply ((((xmanager)).apply)) ((xx)))
                        (((unsupported)).apply ((((xmanager)).apply)) ((((unsupported)).apply ((xx)) ((xy)))))
                        (((unsupported)).apply ((((xmanager)).apply)) ((((xmanager)).apply)))
                        (((unsupported)).apply ((((xmanager)).apply)) ((xx)) ((((xmanager)).apply)) ((xy)))
                        (((unsupported)).apply ((((xmanager)).apply)) ((xx)) ((((xmanager)).apply)))
                xtest_if_else_expr.write
                  [xself]
                    memory > x_checkeval
                    seq > @
                      seq
                        x_checkeval.write
                          [xmsg xret]
                            seq > @
                              seq
                                unsupported
                                bogusForceDataize.write (((xprint)).apply ((xmsg)))
                                (((unsupported)).apply ((xret)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xx)).apply)) ((xx)) ((((unsupported)).apply ((((unsupported)).apply (TRUE))) ((((unsupported)).apply (FALSE))))) ((((xx)).apply)))) ((((unsupported)).apply (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xx)).apply (FALSE))) ((xx)) ((((unsupported)).apply ((((unsupported)).apply (((xx).if FALSE TRUE)))) ((((unsupported)).apply (((xx).if TRUE FALSE)))))) ((((xx)).apply (FALSE))))) ((((unsupported)).apply (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if 5 (((x_checkeval)).apply ("check 1") (0)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (((x_checkeval)).apply ("check 2") (0)) 5)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (5.and 6) 1)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (5.and 6) 1)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (5.and 6) 1)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (0.or (((x_checkeval)).apply ("check 3") (2))) 3)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (1.or (((x_checkeval)).apply ("check 4") (2))) (((x_checkeval)).apply ("check 5") (3)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (0.or 5) (((x_checkeval)).apply ("check 6") (3)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (5.not) 1)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (5.not) 1)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (6.add 1) 2)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (6.sub 1) 2)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (6.mul 2) 4)) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.if (6.div 2) 3)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((0.if (6.less 4) 2)) (2))
                xtest_paren_evaluation.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (16) ((((unsupported)).apply (4) (2))))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (16) (4))) (2))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (16) (4))) (2))) (2))
                        xx.write 2
                        xy.write 3
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (FALSE) ((((unsupported)).apply ((xx)) ((xy)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply (FALSE) ((xx)))) ((xy)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (FALSE) ((xx)) ((xy)))))
                xtest_matrix_mul.write
                  [xself]
                    memory > x__imatmul__
                    memory > xm
                    memory > x__matmul__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__matmul__.write
                              [xself xo]
                                seq > @
                                  (((unsupported)).apply (4))
                            x__imatmul__.write
                              [xself xo]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xother)) ((xo)))
                                    (((unsupported)).apply ((xself)))
                        xm.write (((xM)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((xm)))) (4))
                        (((unsupported)).apply ((xm)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xother)) (42))
                xtest_async_await.write
                  [xself]
                    memory > xtest
                    memory > xdecorator
                    memory > xtest2
                    seq > @
                      seq
                        xtest.write
                          []
                            memory > xsum
                            seq > @
                              (((unsupported)).apply)
                                xsum.write
                                  []
                                    seq > @
                                1.if
                                  (((unsupported)).apply ((((xsomeobj)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest).x__name__)) ("test"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply (((((xtest).x__code__).xco_flags).and ((xinspect).xCO_COROUTINE))))))
                        xdecorator.write
                          [xfunc]
                            seq > @
                              seq
                                bogusForceDataize.write (((xsetattr)).apply ((xfunc)) ("_marked") (TRUE))
                                (((unsupported)).apply ((xfunc)))
                        xtest2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (22))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xtest2).x_marked)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtest2).x__name__)) ("test2"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply (((((xtest2).x__code__).xco_flags).and ((xinspect).xCO_COROUTINE))))))
                xtest_async_for.write
                  [xself]
                    memory > x__aiter__
                    memory > xfoo
                    memory > x__anext__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply)
                          seq
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xStopAsyncIteration)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAIter)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((xAIter)).apply)))
                                (((unsupported)).apply ((xi)) ((((xAIter)).apply)))
                                (((unsupported)).apply ((xDone)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDone)))))
                          bogusForceDataize.write ((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_async_with.write
                  [xself]
                    memory > x__aenter__
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (1) (2))))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (FALSE))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xmanager)).apply)))
                                (((unsupported)).apply ((((xmanager)).apply)) ((xx)))
                                (((unsupported)).apply ((((xmanager)).apply)) ((((unsupported)).apply ((xx)) ((xy)))))
                                (((unsupported)).apply ((((xmanager)).apply)) ((((xmanager)).apply)))
                                (((unsupported)).apply ((((xmanager)).apply)) ((xx)) ((((xmanager)).apply)) ((xy)))
                                (((unsupported)).apply ((((xmanager)).apply)) ((xx)) ((((xmanager)).apply)))
                                (((unsupported)).apply ((xDone)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDone)))))
                          bogusForceDataize.write ((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)