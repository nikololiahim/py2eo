+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > while-1
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > assertMe
      cage > xwhileCheck1
      seq > @
        stdout "while-1\n"
        write.
          xwhileCheck1
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > e1
                cage > e0
                cage > xi
                seq > @
                  stdout "xwhileCheck1\n"
                  (xi).write (1)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          TRUE.while
                            [unused]
                              seq > @
                                [] > tmp1
                                  memory > dddata
                                  dddata.write (((xi).leq 10)) > @
                                (e1).write (tmp1.dddata)
                                ((e1).not).if
                                  seq
                                    stackUp.forward break
                                    TRUE
                                  seq
                                    TRUE
                                [] > tmp2
                                  memory > dddata
                                  dddata.write (((xi).add 1)) > @
                                (e0).write (tmp2.dddata)
                                mkCopy (e0) > tmp3
                                (xi).write (tmp3.copy)
                                TRUE
                          stackUp.forward raiseNothing
                  if.
                    xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                    stackUp.forward xcurrent-exception
                    0
                  stackUp.forward (return TRUE)
                  123
        tmp.write (goto ((((xwhileCheck1)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        stackUp.forward (return (assertMe))
  (goto (apply.@)).result > @