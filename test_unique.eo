memory > xcm
memory > xUniqueErrorsModel
memory > xFlexibleDatePost
memory > xchecks
memory > xValidationError
memory > xApps
memory > x_
memory > xtype
memory > xCustomPKModel
memory > xunique_together
memory > xPost
memory > xmodels
memory > xdatetime
memory > xUniqueTogetherModel
memory > xTestCase
memory > xt
memory > xUniqueForDateModel
memory > xM
memory > xModelToValidate
memory > xnormalized
memory > xUniqueFuncConstraintModel
memory > xUniqueFieldsModel
memory > xsetattr
memory > xunittest
[] > test_unique
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified
        memory > xtest_func_unique_check_not_performed
        memory > xtest_unique_for_date
        memory > xtest_unique_for_date_gets_picked_up
        memory > xtest_primary_key_is_considered_unique
        memory > xtest_unique_for_date_exclusion
        memory > xtest_unique_errors
        memory > xtest_unique_fields_get_collected
        memory > xtest_func_unique_constraint_ignored
        memory > xtest_unique_together_normalization
        memory > xtest_primary_key_unique_check_performed_when_adding_and_pk_specified
        memory > xtest_unique_for_date_with_nullable_date
        memory > xtest_unique_together_gets_picked_up_and_converted_to_tuple
        memory > xtest_primary_key_unique_check_not_performed_when_not_adding
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_unique_fields_get_collected.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xUniqueFieldsModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUniqueFieldsModel)) ((((unsupported)).apply ("id"))))) ((((unsupported)).apply ((xUniqueFieldsModel)) ((((unsupported)).apply ("unique_charfield"))))) ((((unsupported)).apply ((xUniqueFieldsModel)) ((((unsupported)).apply ("unique_integerfield"))))))) ((((unsupported)).apply)))) (((((xm).x_get_unique_checks)).apply)))
                xtest_unique_together_gets_picked_up_and_converted_to_tuple.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xUniqueTogetherModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUniqueTogetherModel)) ((((unsupported)).apply ("ifield") ("cfield"))))) ((((unsupported)).apply ((xUniqueTogetherModel)) ((((unsupported)).apply ("ifield") ("efield"))))) ((((unsupported)).apply ((xUniqueTogetherModel)) ((((unsupported)).apply ("id"))))))) ((((unsupported)).apply)))) (((((xm).x_get_unique_checks)).apply)))
                xtest_unique_together_normalization.write
                  [xself]
                    memory > xdata
                    memory > xcheck
                    memory > xbar
                    memory > xbaz
                    memory > xMeta
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdata.write (((unsupported)).apply ("2-tuple") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))))))) ("list") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))))))) ("already normalized") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))) ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))))) ("set") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))) ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xunique_together)) ((xnormalized)))) (((((xdata).xvalues)).apply)))
                          seq
                            (((unsupported)).apply (((xmodels).xModel)))
                              seq
                                xfoo.write ((((xmodels).xIntegerField)).apply)
                                xbar.write ((((xmodels).xIntegerField)).apply)
                                xbaz.write ((((xmodels).xIntegerField)).apply)
                                xMeta.write (((xtype)).apply ("Meta") ((((unsupported)).apply)) ((((unsupported)).apply ("unique_together") ((xunique_together)) ("apps") ((((xApps)).apply)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xchecks)) ((x_)))) (((((((xM)).apply).x_get_unique_checks)).apply)))
                            (((unsupported)).apply ((xt)) ((xnormalized)))
                              seq
                                xcheck.write (((unsupported)).apply ((xM)) ((xt)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xcheck)) ((xchecks)))
                xtest_primary_key_is_considered_unique.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xCustomPKModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCustomPKModel)) ((((unsupported)).apply ("my_pk_field"))))))) ((((unsupported)).apply)))) (((((xm).x_get_unique_checks)).apply)))
                xtest_unique_for_date_gets_picked_up.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xUniqueForDateModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUniqueForDateModel)) ((((unsupported)).apply ("id"))))))) ((((unsupported)).apply ((((unsupported)).apply ((xUniqueForDateModel)) ("date") ("count") ("start_date"))) ((((unsupported)).apply ((xUniqueForDateModel)) ("year") ("count") ("end_date"))) ((((unsupported)).apply ((xUniqueForDateModel)) ("month") ("order") ("end_date"))))))) (((((xm).x_get_unique_checks)).apply)))
                xtest_unique_for_date_exclusion.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xUniqueForDateModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUniqueForDateModel)) ((((unsupported)).apply ("id"))))))) ((((unsupported)).apply ((((unsupported)).apply ((xUniqueForDateModel)) ("year") ("count") ("end_date"))) ((((unsupported)).apply ((xUniqueForDateModel)) ("month") ("order") ("end_date"))))))) ((((unsupported)).apply (((xm).x_get_unique_checks)) ("start_date"))))
                xtest_func_unique_constraint_ignored.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xUniqueFuncConstraintModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).x_get_unique_checks)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUniqueFuncConstraintModel)) ((((unsupported)).apply ("id"))))))) ((((unsupported)).apply)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified.write
                  [xself]
                    memory > xmtv
                    seq > @
                      (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                        seq
                          xmtv.write (((unsupported)).apply ((xModelToValidate)) (10) ("Some Name"))
                          bogusForceDataize.write (((xsetattr)).apply ((xmtv)) ("_adding") (TRUE))
                          bogusForceDataize.write ((((xmtv).xfull_clean)).apply)
                xtest_primary_key_unique_check_performed_when_adding_and_pk_specified.write
                  [xself]
                    memory > xmtv
                    seq > @
                      (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                        seq
                          xmtv.write (((unsupported)).apply ((xModelToValidate)) (10) ("Some Name") (123))
                          bogusForceDataize.write (((xsetattr)).apply ((xmtv)) ("_adding") (TRUE))
                          bogusForceDataize.write ((((xmtv).xfull_clean)).apply)
                xtest_primary_key_unique_check_not_performed_when_not_adding.write
                  [xself]
                    memory > xmtv
                    seq > @
                      (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                        seq
                          xmtv.write (((unsupported)).apply ((xModelToValidate)) (10) ("Some Name"))
                          bogusForceDataize.write ((((xmtv).xfull_clean)).apply)
                xtest_func_unique_check_not_performed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                        bogusForceDataize.write ((((((unsupported)).apply ((xUniqueFuncConstraintModel)) ("some name")).xfull_clean)).apply)
                xtest_unique_for_date.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply ((((xPost).xobjects).xcreate)) ("Django 1.0 is released") ("Django 1.0") ("Finally") (((((xdatetime).xdate)).apply (2008) (9) (3))))
                        xp.write (((unsupported)).apply ((xPost)) ("Django 1.0 is released") (((((xdatetime).xdate)).apply (2008) (9) (3))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("title") ((((unsupported)).apply ("Title must be unique for Posted date."))))))
                        xp.write (((unsupported)).apply ((xPost)) ("Work on Django 1.1 begins") (((((xdatetime).xdate)).apply (2008) (9) (3))))
                        bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        xp.write (((unsupported)).apply ((xPost)) ("Django 1.0 is released") (((((xdatetime).xdatetime)).apply (2008) (9) (4))))
                        bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        xp.write (((unsupported)).apply ((xPost)) ("Django 1.0") (((((xdatetime).xdatetime)).apply (2008) (1) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("slug") ((((unsupported)).apply ("Slug must be unique for Posted year."))))))
                        xp.write (((unsupported)).apply ((xPost)) ("Finally") (((((xdatetime).xdatetime)).apply (2008) (9) (30))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("subtitle") ((((unsupported)).apply ("Subtitle must be unique for Posted month."))))))
                        xp.write (((unsupported)).apply ((xPost)) ("Django 1.0 is released"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("posted") ((((unsupported)).apply ("This field cannot be null."))))))
                xtest_unique_for_date_with_nullable_date.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xFlexibleDatePost).xobjects).xcreate)) ("Django 1.0 is released") ("Django 1.0") ("Finally") (((((xdatetime).xdate)).apply (2008) (9) (3))))
                        xp.write (((unsupported)).apply ((xFlexibleDatePost)) ("Django 1.0 is released"))
                        bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        xp.write (((unsupported)).apply ((xFlexibleDatePost)) ("Django 1.0"))
                        bogusForceDataize.write ((((xp).xfull_clean)).apply)
                        xp.write (((unsupported)).apply ((xFlexibleDatePost)) ("Finally"))
                        bogusForceDataize.write ((((xp).xfull_clean)).apply)
                xtest_unique_errors.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)).apply ((((xUniqueErrorsModel).xobjects).xcreate)) ("Some Name") (10))
                        xm.write (((unsupported)).apply ((xUniqueErrorsModel)) ("Some Name") (11))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xm).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("name") ((((unsupported)).apply ("Custom unique name message."))))))
                        xm.write (((unsupported)).apply ((xUniqueErrorsModel)) ("Some Other Name") (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xm).xfull_clean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessage_dict)) ((((unsupported)).apply ("no") ((((unsupported)).apply ("Custom unique number message."))))))