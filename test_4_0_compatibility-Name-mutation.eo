memory > xError
memory > xcheck_csrf_trusted_origins
memory > xSimpleTestCase
[] > test_4_0_compatibility
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_valid_urls
        memory > xtest_invalid_url
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_invalid_url.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_csrf_trusted_origins)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("As of Django 4.0, the values in the CSRF_TRUSTED_ORIGINS setting must start with a scheme (usually http:// or https://) but found example.com. See the release notes for details.") ("4_0.E001"))))))
                xtest_valid_urls.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_csrf_trusted_origins)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))