memory > xtz
memory > xValueError
memory > xrepr
memory > xRemovedInDjango50Warning
memory > xoverride_settings
memory > xmock
memory > xzoneinfo
memory > xunittest
memory > xSimpleTestCase
memory > xImportError
memory > xtimezone
memory > xdatetime
memory > xexpected
[] > test_timezone
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_override_decorator
        memory > xtest_make_naive_pytz
        memory > xtest_override_string_tz
        memory > xtest_override_fixed_offset
        memory > xtest_make_aware_is_dst_deprecation_warning
        memory > xsetUp
        memory > xtest_make_aware_no_tz
        memory > xtest_override
        memory > xICT
        memory > xpytz
        memory > xtest_make_aware_zoneinfo_ambiguous
        memory > xtest_get_default_timezone
        memory > xtest_make_aware2
        memory > xtest_make_naive_zoneinfo
        memory > xtest_default_timezone_is_zoneinfo
        memory > xCET
        memory > xHAS_PYTZ
        memory > xPARIS_IMPLS
        memory > xEAT
        memory > xtest_make_aware_pytz_non_existent
        memory > xtest_make_aware_pytz_ambiguous
        memory > xtest_fixedoffset_timedelta
        memory > xtest_now
        memory > xtest_get_timezone_name
        memory > xtest_localdate
        memory > xtest_is_naive
        memory > xneeds_pytz
        memory > xtest_fixedoffset_negative_timedelta
        memory > xtest_make_naive
        memory > xtest_make_naive_no_tz
        memory > xtest_setting_allows_fallback_to_pytz
        memory > xtest_activate_invalid_timezone
        memory > xtest_is_aware
        memory > xtearDown
        memory > xUTC
        memory > xPARIS_ZI
        memory > xtest_make_aware_zoneinfo_non_existent
        memory > xtest_make_aware
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xpytz.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xPARIS_ZI.write ((((xzoneinfo).xZoneInfo)).apply ("Europe/Paris"))
            xEAT.write ((((xtimezone).xget_fixed_timezone)).apply (180))
            xICT.write ((((xtimezone).xget_fixed_timezone)).apply (420))
            xUTC.write (((xdatetime).xtimezone).xutc)
            xHAS_PYTZ.write (((unsupported)).apply ((xpytz)) ("None: is there a None literal in the EO language?"))
            ((xHAS_PYTZ).not).if
              seq
                xCET.write "None: is there a None literal in the EO language?"
                xPARIS_IMPLS.write (((unsupported)).apply ((xPARIS_ZI)))
                xneeds_pytz.write ((((xunittest).xskip)).apply ("Test requires pytz"))
              seq
                xCET.write ((((xpytz).xtimezone)).apply ("Europe/Paris"))
                xPARIS_IMPLS.write (((unsupported)).apply ((xPARIS_ZI)) ((xCET)))
                xneeds_pytz.write
                  [xf]
                    seq > @
                      (((unsupported)).apply ((xf)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xtimezone).xget_default_timezone).xcache_clear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xtimezone).xget_default_timezone).xcache_clear)).apply)
                xtest_default_timezone_is_zoneinfo.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xtimezone).xget_default_timezone)).apply)) (((xzoneinfo).xZoneInfo)))
                xtest_setting_allows_fallback_to_pytz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xtimezone).xget_default_timezone)).apply)) (((xpytz).xBaseTzInfo)))
                xtest_now.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (TRUE))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xtimezone).xis_aware)).apply (((((xtimezone).xnow)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (FALSE))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xtimezone).xis_naive)).apply (((((xtimezone).xnow)).apply)))))
                xtest_localdate.write
                  [xself]
                    memory > xaware
                    memory > xnaive
                    seq > @
                      seq
                        xnaive.write ((((xdatetime).xdatetime)).apply (2015) (1) (1) (0) (0) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("localtime() cannot be applied to a naive datetime"))))
                          bogusForceDataize.write ((((xtimezone).xlocaldate)).apply ((xnaive)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("localtime() cannot be applied to a naive datetime"))))
                          (((unsupported)).apply (((xtimezone).xlocaldate)) ((xnaive)) ((xEAT)))
                        xaware.write (((unsupported)).apply (((xdatetime).xdatetime)) (2015) (1) (1) (0) (0) (1) ((xICT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtimezone).xlocaldate)) ((xaware)) ((xEAT)))) (((((xdatetime).xdate)).apply (2014) (12) (31))))
                        (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xEAT)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xlocaldate)).apply ((xaware)))) (((((xdatetime).xdate)).apply (2014) (12) (31))))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("django.utils.timezone.now") ((xaware)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtimezone).xlocaldate)) ((xEAT)))) (((((xdatetime).xdate)).apply (2014) (12) (31))))
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xEAT)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xlocaldate)).apply)) (((((xdatetime).xdate)).apply (2014) (12) (31))))
                xtest_override.write
                  [xself]
                    memory > xdefault
                    seq > @
                      seq
                        xdefault.write ((((xtimezone).xget_default_timezone)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xtimezone).xactivate)).apply ((xICT)))
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xEAT)))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xEAT)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xICT)) (((((xtimezone).xget_current_timezone)).apply)))
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ("None: is there a None literal in the EO language?"))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xICT)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xtimezone).xdeactivate)).apply)
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xEAT)))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xEAT)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ("None: is there a None literal in the EO language?"))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                          bogusForceDataize.write ((((xtimezone).xdeactivate)).apply)
                xtest_override_decorator.write
                  [xself]
                    memory > xfunc_tz_eat
                    memory > xdefault
                    memory > xfunc_tz_none
                    seq > @
                      seq
                        xdefault.write ((((xtimezone).xget_default_timezone)).apply)
                        xfunc_tz_eat.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((xEAT)) (((((xtimezone).xget_current_timezone)).apply)))
                        xfunc_tz_none.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xtimezone).xactivate)).apply ((xICT)))
                            bogusForceDataize.write (((xfunc_tz_eat)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xICT)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write (((xfunc_tz_none)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xICT)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write ((((xtimezone).xdeactivate)).apply)
                            bogusForceDataize.write (((xfunc_tz_eat)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                            bogusForceDataize.write (((xfunc_tz_none)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xdefault)) (((((xtimezone).xget_current_timezone)).apply)))
                          bogusForceDataize.write ((((xtimezone).xdeactivate)).apply)
                xtest_override_string_tz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtimezone).xoverride)).apply ("Asia/Bangkok"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xget_current_timezone_name)).apply)) ("Asia/Bangkok"))
                xtest_override_fixed_offset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtimezone).xoverride)).apply (((((xdatetime).xtimezone)).apply (((((xdatetime).xtimedelta)).apply)) ("tzname"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xget_current_timezone_name)).apply)) ("tzname"))
                xtest_activate_invalid_timezone.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Invalid timezone: None"))))
                        bogusForceDataize.write ((((xtimezone).xactivate)).apply ("None: is there a None literal in the EO language?"))
                xtest_is_aware.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xtimezone).xis_aware)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xtimezone).xis_aware)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))))))
                xtest_is_naive.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xtimezone).xis_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xtimezone).xis_naive)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))))))
                xtest_make_aware.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_aware)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))) ((xEAT)))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtimezone).xmake_aware)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))) ((xEAT)))
                xtest_make_naive.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))) ((xEAT)))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (17) (20) (30) ((xICT)))) ((xEAT)))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("make_naive() cannot be applied to a naive datetime"))))
                          bogusForceDataize.write ((((xtimezone).xmake_naive)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))) ((xEAT)))
                xtest_make_naive_no_tz.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) ((xEAT)))))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (5) (20) (30))))
                xtest_make_aware_no_tz.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_aware)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (13) (20) (30) (((((xtimezone).xget_fixed_timezone)).apply ((300.neg)))))))
                xtest_make_aware2.write
                  [xself]
                    memory > xCEST
                    seq > @
                      seq
                        xCEST.write ((((xdatetime).xtimezone)).apply ((((unsupported)).apply (((xdatetime).xtimedelta)) (2))) ("CEST"))
                        (((unsupported)).apply ((xtz)) ((xPARIS_IMPLS)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xtz)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_aware)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))) ((xtz)))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (12) (20) (30) ((xCEST)))))
                        (xHAS_PYTZ).if
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((xtimezone).xmake_aware)).apply (((((xCET).xlocalize)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))))) ((xCET)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtimezone).xmake_aware)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (12) (20) (30) ((xPARIS_ZI)))) ((xPARIS_ZI)))
                xtest_make_naive_pytz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply (((((xCET).xlocalize)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))))) ((xCET)))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((((((xpytz).xtimezone)).apply ("Asia/Bangkok")).xlocalize)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (17) (20) (30))))) ((xCET)))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("make_naive() cannot be applied to a naive datetime"))))
                          bogusForceDataize.write ((((xtimezone).xmake_naive)).apply (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))) ((xCET)))
                xtest_make_naive_zoneinfo.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (12) (20) (30) ((xPARIS_ZI)))) ((xPARIS_ZI)))) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (12) (20) (30))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xmake_naive)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (12) (20) (30) (1) ((xPARIS_ZI)))) ((xPARIS_ZI)))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2011) (9) (1) (12) (20) (30) (1))))
                xtest_make_aware_pytz_ambiguous.write
                  [xself]
                    memory > xstd
                    memory > xambiguous
                    memory > xdst
                    seq > @
                      (((unsupported)).apply)
                        xambiguous.write ((((xdatetime).xdatetime)).apply (2015) (10) (25) (2) (30))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xpytz).xAmbiguousTimeError)))))
                          (((unsupported)).apply (((xtimezone).xmake_aware)) ((xambiguous)) ((xCET)))
                        xstd.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((xambiguous)) ((xCET)) (FALSE))
                        xdst.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((xambiguous)) ((xCET)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstd).sub (xdst))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xstd).xtzinfo).xutcoffset)).apply ((xstd)))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xdst).xtzinfo).xutcoffset)).apply ((xdst)))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (2))))
                xtest_make_aware_zoneinfo_ambiguous.write
                  [xself]
                    memory > xstd
                    memory > xambiguous
                    memory > xdst
                    seq > @
                      seq
                        xambiguous.write ((((xdatetime).xdatetime)).apply (2015) (10) (25) (2) (30))
                        xstd.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((((unsupported)).apply (((xambiguous).xreplace)) (1))) ((xPARIS_ZI)))
                        xdst.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((xambiguous)) ((xPARIS_ZI)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xstd).xastimezone)).apply ((xUTC))).sub ((((xdst).xastimezone)).apply ((xUTC))))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstd).xutcoffset)).apply)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdst).xutcoffset)).apply)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (2))))
                xtest_make_aware_pytz_non_existent.write
                  [xself]
                    memory > xnon_existent
                    memory > xstd
                    memory > xdst
                    seq > @
                      (((unsupported)).apply)
                        xnon_existent.write ((((xdatetime).xdatetime)).apply (2015) (3) (29) (2) (30))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xpytz).xNonExistentTimeError)))))
                          (((unsupported)).apply (((xtimezone).xmake_aware)) ((xnon_existent)) ((xCET)))
                        xstd.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((xnon_existent)) ((xCET)) (FALSE))
                        xdst.write (((unsupported)).apply (((xtimezone).xmake_aware)) ((xnon_existent)) ((xCET)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstd).sub (xdst))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xstd).xtzinfo).xutcoffset)).apply ((xstd)))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xdst).xtzinfo).xutcoffset)).apply ((xdst)))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (2))))
                xtest_make_aware_zoneinfo_non_existent.write
                  [xself]
                    memory > xnon_existent
                    memory > xstd
                    memory > xdst
                    seq > @
                      seq
                        xnon_existent.write ((((xdatetime).xdatetime)).apply (2015) (3) (29) (2) (30))
                        xstd.write ((((xtimezone).xmake_aware)).apply ((xnon_existent)) ((xPARIS_ZI)))
                        xdst.write ((((xtimezone).xmake_aware)).apply ((((unsupported)).apply (((xnon_existent).xreplace)) (1))) ((xPARIS_ZI)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xstd).xastimezone)).apply ((xUTC))).sub ((((xdst).xastimezone)).apply ((xUTC))))) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstd).xutcoffset)).apply)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdst).xutcoffset)).apply)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (2))))
                xtest_make_aware_is_dst_deprecation_warning.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The is_dst argument to make_aware(), used by the Trunc() database functions and QuerySet.datetimes(), is deprecated as it has no effect with zoneinfo time zones."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          (((unsupported)).apply (((xtimezone).xmake_aware)) (((((xdatetime).xdatetime)).apply (2011) (9) (1) (13) (20) (30))) ((xEAT)) (TRUE))
                xtest_get_timezone_name.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (((((xdatetime).xtimezone)).apply ((((unsupported)).apply (((xdatetime).xtimedelta)) (10))))) ("UTC+10:00"))) ((((unsupported)).apply ((((unsupported)).apply (((xdatetime).xtimezone)) ((((unsupported)).apply (((xdatetime).xtimedelta)) (10))) ("Etc/GMT-10"))) ("Etc/GMT-10"))) ((((unsupported)).apply (((((xzoneinfo).xZoneInfo)).apply ("Europe/Madrid"))) ("Europe/Madrid"))) ((((unsupported)).apply (((((xzoneinfo).xZoneInfo)).apply ("Etc/GMT-10"))) ("+10"))))
                        (xHAS_PYTZ).if
                          (((unsupported)).apply ((xtests)) ((((unsupported)).apply ((((unsupported)).apply (((((xpytz).xtimezone)).apply ("Europe/Madrid"))) ("Europe/Madrid"))) ((((unsupported)).apply (((((xpytz).xtimezone)).apply ("Etc/GMT-10"))) ("+10"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtz)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtz)) ((xexpected)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).x_get_timezone_name)).apply ((xtz)))) ((xexpected)))
                xtest_get_default_timezone.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimezone).xget_default_timezone_name)).apply)) ("America/Chicago"))
                xtest_fixedoffset_timedelta.write
                  [xself]
                    memory > xdelta
                    seq > @
                      seq
                        xdelta.write (((unsupported)).apply (((xdatetime).xtimedelta)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xtimezone).xget_fixed_timezone)).apply ((xdelta))).xutcoffset)).apply ("None: is there a None literal in the EO language?"))) ((xdelta)))
                xtest_fixedoffset_negative_timedelta.write
                  [xself]
                    memory > xdelta
                    seq > @
                      seq
                        xdelta.write (((unsupported)).apply (((xdatetime).xtimedelta)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xtimezone).xget_fixed_timezone)).apply ((xdelta))).xutcoffset)).apply ("None: is there a None literal in the EO language?"))) ((xdelta)))