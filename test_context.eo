memory > xlist
memory > xEqError
memory > xstr
memory > xrange
memory > xZeroDivisionError
memory > x_
memory > xKeyError
memory > xconcurrent
memory > xrandom
memory > xi
memory > xweakref
memory > xcontextvars
memory > xunittest
memory > xobject
memory > xkwargs
memory > xImportError
memory > xAttributeError
memory > xRuntimeError
memory > xenumerate
memory > xKeyStr
memory > xValueError
memory > xf
memory > xset
memory > xrepr
memory > xException
memory > xtime
memory > xHashKey
memory > xsuper
memory > xiter_i
memory > xNotImplemented
memory > xgc
memory > xargs
memory > xLookupError
memory > xHashingError
memory > xHaskKeyCrasher
memory > xhash
memory > xnext
memory > xisinstance
memory > xfunctools
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
[] > test_context
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_context_typerrors_1
        memory > xtest_contextvar_getitem
        memory > xtest_context_run_4
        memory > xtest_context_copy_1
        memory > xisolated_context
        memory > xtest_context_run_1
        memory > x__enter__
        memory > xtest_hamt_collision_1
        memory > xtest_context_run_5
        memory > xtest_context_threads_1
        memory > x__eq__
        memory > x__repr__
        memory > xtest_hamt_basics_3
        memory > xtest_context_get_context_1
        memory > xtest_hamt_eq_1
        memory > xtest_context_getset_2
        memory > xtest_hamt_delete_4
        memory > xtest_hamt_gc_1
        memory > xtest_hamt_items_3
        memory > xtest_hamt_stress
        memory > xtest_hashkey_helper_1
        memory > xtest_context_run_3
        memory > xtest_context_var_repr_1
        memory > xtest_hamt_basics_1
        memory > xtest_hamt_basics_4
        memory > xtest_context_getset_3
        memory > xtest_context_run_7
        memory > xtest_hamt_delete_3
        memory > xtest_hamt_eq_2
        memory > x__exit__
        memory > xtest_hamt_delete_5
        memory > xtest_hamt_items_2
        memory > xtest_hamt_getitem_1
        memory > xtest_context_subclassing_1
        memory > xtest_context_getset_4
        memory > xtest_hamt_delete_2
        memory > xhamt
        memory > xtest_context_run_6
        memory > xtest_hamt_delete_1
        memory > x__init__
        memory > xtest_context_run_2
        memory > xtest_context_getset_1
        memory > x__hash__
        memory > xtest_context_var_new_1
        memory > x_crasher
        memory > xtest_hamt_in_1
        memory > xtest_hamt_gc_2
        memory > xtest_hamt_items_1
        memory > xtest_context_new_1
        memory > xtest_hamt_keys_1
        memory > xtest_hamt_basics_2
        memory > xtest_context_getset_5
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xhamt.write "None: is there a None literal in the EO language?"
            xisolated_context.write
              [xfunc]
                memory > xwrapper
                seq > @
                  seq
                    unsupported
                    xwrapper.write
                      []
                        memory > xctx
                        seq > @
                          (((unsupported)).apply)
                            xctx.write ((((xcontextvars).xContext)).apply)
                            (((unsupported)).apply (((((xctx).xrun)).apply ((xfunc)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                    (((unsupported)).apply ((xwrapper)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_context_var_new_1.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("takes exactly 1"))))
                          bogusForceDataize.write ((((xcontextvars).xContextVar)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must be a str"))))
                          bogusForceDataize.write ((((xcontextvars).xContextVar)).apply (1))
                        xc.write ((((xcontextvars).xContextVar)).apply ("aaa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xname)) ("aaa"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xc).xname)) ("bbb"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xhash)).apply ((xc)))) ((((xhash)).apply ("aaa"))))
                xtest_context_var_repr_1.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xlst
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((xcontextvars).xContextVar)).apply ("a"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("a") ((((xrepr)).apply ((xc)))))
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("a") (123))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("123") ((((xrepr)).apply ((xc)))))
                        xlst.write (((unsupported)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("a") ((xlst)))
                        bogusForceDataize.write ((((xlst).xappend)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("...") ((((xrepr)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("...") ((((xrepr)).apply ((xlst)))))
                        xt.write ((((xc).xset)).apply (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xrepr)).apply ((xc)))) ((((xrepr)).apply ((xt)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (" used ") ((((xrepr)).apply ((xt)))))
                        bogusForceDataize.write ((((xc).xreset)).apply ((xt)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" used ") ((((xrepr)).apply ((xt)))))
                xtest_context_subclassing_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not an acceptable base type"))))
                          (((unsupported)).apply (((xcontextvars).xContextVar)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not an acceptable base type"))))
                          (((unsupported)).apply (((xcontextvars).xContext)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not an acceptable base type"))))
                          (((unsupported)).apply (((xcontextvars).xToken)))
                xtest_context_new_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("any arguments"))))
                          bogusForceDataize.write ((((xcontextvars).xContext)).apply (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("any arguments"))))
                          (((unsupported)).apply (((xcontextvars).xContext)) (1) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("any arguments"))))
                          (((unsupported)).apply (((xcontextvars).xContext)) (1))
                        bogusForceDataize.write ((((xcontextvars).xContext)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_context_typerrors_1.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("ContextVar key was expected"))))
                          (((unsupported)).apply ((xctx)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("ContextVar key was expected"))))
                          (((unsupported)).apply (1) ((xctx)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("ContextVar key was expected"))))
                          bogusForceDataize.write ((((xctx).xget)).apply (1))
                xtest_context_get_context_1.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xcopy_context)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xctx)) (((xcontextvars).xContext)))
                xtest_context_run_1.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("missing 1 required"))))
                          bogusForceDataize.write ((((xctx).xrun)).apply)
                xtest_context_run_2.write
                  [xself]
                    memory > xfunc
                    memory > xctx
                    memory > xa
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("spam"))) ("foo"))
                                (((unsupported)).apply ((xargs)) ((((unsupported)).apply ("bar"))))
                                (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xfunc)) (((((xfunctools).xpartial)).apply ((xfunc)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xrun)).apply ((xf)))) ((((unsupported)).apply ((((unsupported)).apply ("bar"))) ((((unsupported)).apply ("spam") ("foo"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xrun)).apply ((xf)) (1))) ((((unsupported)).apply ((((unsupported)).apply (1) ("bar"))) ((((unsupported)).apply ("spam") ("foo"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xctx).xrun)) ((xf)) (2))) ((((unsupported)).apply ((((unsupported)).apply ("bar"))) ((((unsupported)).apply ("a") (2) ("spam") ("foo"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xctx).xrun)) ((xf)) (11) (2))) ((((unsupported)).apply ((((unsupported)).apply (11) ("bar"))) ((((unsupported)).apply ("a") (2) ("spam") ("foo"))))))
                            xa.write (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xrun)).apply ((xf)) (11) ((((unsupported)).apply ((xa)))))) ((((unsupported)).apply ((((unsupported)).apply (11) ("bar"))) ((((unsupported)).apply ("spam") ("foo"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((unsupported)).apply)))
                xtest_context_run_3.write
                  [xself]
                    memory > xfunc
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write ((((xctx).xrun)).apply ((xfunc)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write ((((xctx).xrun)).apply ((xfunc)) (1) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          (((unsupported)).apply (((xctx).xrun)) ((xfunc)) (1) (2) (123))
                xtest_context_run_4.write
                  [xself]
                    memory > xfunc1
                    memory > xreturned_ctx
                    memory > xvar
                    memory > xctx2
                    memory > xfunc2
                    memory > xctx1
                    seq > @
                      (((unsupported)).apply)
                        xctx1.write ((((xcontextvars).xContext)).apply)
                        xctx2.write ((((xcontextvars).xContext)).apply)
                        xvar.write ((((xcontextvars).xContextVar)).apply ("var"))
                        xfunc2.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvar).xget)).apply ("None: is there a None literal in the EO language?"))))
                        xfunc1.write
                          []
                            memory > xcur
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvar).xget)).apply ("None: is there a None literal in the EO language?"))))
                                bogusForceDataize.write ((((xvar).xset)).apply ("spam"))
                                bogusForceDataize.write ((((xctx2).xrun)).apply ((xfunc2)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvar).xget)).apply ("None: is there a None literal in the EO language?"))) ("spam"))
                                xcur.write ((((xcontextvars).xcopy_context)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcur)))) (1))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcur)) ((xvar)))) ("spam"))
                                (((unsupported)).apply ((xcur)))
                        xreturned_ctx.write ((((xctx1).xrun)).apply ((xfunc1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xctx1)) ((xreturned_ctx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreturned_ctx)) ((xvar)))) ("spam"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xvar)) ((xreturned_ctx)))
                xtest_context_run_5.write
                  [xself]
                    memory > xfunc
                    memory > xctx
                    memory > xvar
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xvar.write ((((xcontextvars).xContextVar)).apply ("var"))
                        xfunc.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvar).xget)).apply ("None: is there a None literal in the EO language?"))))
                                bogusForceDataize.write ((((xvar).xset)).apply ("spam"))
                                unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write ((((xctx).xrun)).apply ((xfunc)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvar).xget)).apply ("None: is there a None literal in the EO language?"))))
                xtest_context_run_6.write
                  [xself]
                    memory > xc
                    memory > xfun
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("a") (0))
                        xfun.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (0))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xctx).xget)).apply ((xc)))))
                                bogusForceDataize.write ((((xc).xset)).apply (42))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (42))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget)).apply ((xc)))) (42))
                        bogusForceDataize.write ((((xctx).xrun)).apply ((xfun)))
                xtest_context_run_7.write
                  [xself]
                    memory > xfun
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xfun.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("is already entered"))))
                                bogusForceDataize.write ((((xctx).xrun)).apply ((xfun)))
                        bogusForceDataize.write ((((xctx).xrun)).apply ((xfun)))
                xtest_context_getset_1.write
                  [xself]
                    memory > xc
                    memory > xctx2
                    memory > xt0
                    memory > xt
                    memory > xctx1
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((xcontextvars).xContextVar)).apply ("c"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write ((((xc).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xc).xget)).apply ("None: is there a None literal in the EO language?"))))
                        xt0.write ((((xc).xset)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply ("None: is there a None literal in the EO language?"))) (42))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xt0).xold_value)) (((xt0).xMISSING)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xt0).xold_value)) ((((xcontextvars).xToken).xMISSING)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xt0).xvar)) ((xc)))
                        xt.write ((((xc).xset)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply ("None: is there a None literal in the EO language?"))) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xold_value)) (42))
                        bogusForceDataize.write ((((xc).xreset)).apply ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply ("None: is there a None literal in the EO language?"))) (42))
                        bogusForceDataize.write ((((xc).xset)).apply ("spam2"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("has already been used"))))
                          bogusForceDataize.write ((((xc).xreset)).apply ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) ("spam2"))
                        xctx1.write ((((xcontextvars).xcopy_context)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) ((xctx1)))
                        bogusForceDataize.write ((((xc).xreset)).apply ((xt0)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("has already been used"))))
                          bogusForceDataize.write ((((xc).xreset)).apply ((xt0)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xc).xget)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) ((xctx1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx1)) ((xc)))) ("spam2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx1).xget)).apply ((xc)) ("aa"))) ("spam2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xctx1)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx1).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((xc)) ("spam2"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx1).xvalues)).apply)))) ((((unsupported)).apply ("spam2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx1).xkeys)).apply)))) ((((unsupported)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xctx1)))) ((((unsupported)).apply ((xc)))))
                        xctx2.write ((((xcontextvars).xcopy_context)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) ((xctx2)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((xctx2)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx2).xget)).apply ((xc)) ("aa"))) ("aa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xctx2)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xctx2)))) ((((unsupported)).apply)))
                xtest_context_getset_2.write
                  [xself]
                    memory > xv2
                    memory > xt1
                    memory > xv1
                    seq > @
                      (((unsupported)).apply)
                        xv1.write ((((xcontextvars).xContextVar)).apply ("v1"))
                        xv2.write ((((xcontextvars).xContextVar)).apply ("v2"))
                        xt1.write ((((xv1).xset)).apply (42))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("by a different"))))
                          bogusForceDataize.write ((((xv2).xreset)).apply ((xt1)))
                xtest_context_getset_3.write
                  [xself]
                    memory > xc
                    memory > xfun
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("c") (42))
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xfun.write
                          []
                            memory > xt
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (42))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                                  (((unsupported)).apply ((xctx)) ((xc)))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xctx).xget)).apply ((xc)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget)).apply ((xc)) ("spam"))) ("spam"))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) ((xctx)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx).xkeys)).apply)))) ((((unsupported)).apply)))
                                xt.write ((((xc).xset)).apply (1))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx).xkeys)).apply)))) ((((unsupported)).apply ((xc)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx)) ((xc)))) (1))
                                bogusForceDataize.write ((((xc).xreset)).apply ((xt)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xctx).xkeys)).apply)))) ((((unsupported)).apply)))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                                  (((unsupported)).apply ((xctx)) ((xc)))
                        bogusForceDataize.write ((((xctx).xrun)).apply ((xfun)))
                xtest_context_getset_4.write
                  [xself]
                    memory > xtok
                    memory > xc
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("c") (42))
                        xctx.write ((((xcontextvars).xContext)).apply)
                        xtok.write ((((xctx).xrun)).apply (((xc).xset)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("different Context"))))
                          bogusForceDataize.write ((((xc).xreset)).apply ((xtok)))
                xtest_context_getset_5.write
                  [xself]
                    memory > xc
                    memory > xfun
                    seq > @
                      (((unsupported)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("c") (42))
                        bogusForceDataize.write ((((xc).xset)).apply ((((unsupported)).apply)))
                        xfun.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xc).xset)).apply ((((unsupported)).apply)))
                                bogusForceDataize.write (((((((xc).xget)).apply).xappend)).apply (42))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) ((((unsupported)).apply (42))))
                        bogusForceDataize.write (((((((xcontextvars).xcopy_context)).apply).xrun)).apply ((xfun)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) ((((unsupported)).apply)))
                xtest_context_copy_1.write
                  [xself]
                    memory > xc
                    memory > xctx2_fun
                    memory > xctx1
                    memory > xctx1_fun
                    seq > @
                      seq
                        xctx1.write ((((xcontextvars).xContext)).apply)
                        xc.write (((unsupported)).apply (((xcontextvars).xContextVar)) ("c") (42))
                        xctx1_fun.write
                          []
                            memory > xctx2
                            seq > @
                              seq
                                bogusForceDataize.write ((((xc).xset)).apply (10))
                                xctx2.write ((((xctx1).xcopy)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx2)) ((xc)))) (10))
                                bogusForceDataize.write ((((xc).xset)).apply (20))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx1)) ((xc)))) (20))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx2)) ((xc)))) (10))
                                bogusForceDataize.write ((((xctx2).xrun)).apply ((xctx2_fun)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx1)) ((xc)))) (20))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xctx2)) ((xc)))) (30))
                        xctx2_fun.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (10))
                                bogusForceDataize.write ((((xc).xset)).apply (30))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xget)).apply)) (30))
                        bogusForceDataize.write ((((xctx1).xrun)).apply ((xctx1_fun)))
                xtest_context_threads_1.write
                  [xself]
                    memory > xtp
                    memory > xsub
                    memory > xresults
                    memory > xcvar
                    seq > @
                      (((unsupported)).apply)
                        xcvar.write ((((xcontextvars).xContextVar)).apply ("cvar"))
                        xsub.write
                          [xnum]
                            seq > @
                              seq
                                (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                                  seq
                                    bogusForceDataize.write ((((xcvar).xset)).apply (((xnum).add (xi))))
                                    bogusForceDataize.write ((((xtime).xsleep)).apply (((((xrandom).xuniform)).apply (0.001) (0.05))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcvar).xget)).apply)) (((xnum).add (xi))))
                                (((unsupported)).apply ((xnum)))
                        xtp.write (((unsupported)).apply ((((xconcurrent).xfutures).xThreadPoolExecutor)) (10))
                        (((unsupported)).apply)
                          xresults.write (((xlist)).apply (((((xtp).xmap)).apply ((xsub)) ((((xrange)).apply (10))))))
                          bogusForceDataize.write ((((xtp).xshutdown)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresults)) ((((xlist)).apply ((((xrange)).apply (10))))))
                xtest_contextvar_getitem.write
                  [xself]
                    memory > xclss
                    seq > @
                      seq
                        xclss.write ((xcontextvars).xContextVar)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xclss)) ((xstr)))) ((xclss)))
            (((unsupported)).apply)
              seq
                x_crasher.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xhash xname xerror_on_eq_to]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xhash).neq (1.neg))))
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xhash)) ((xhash)))
                        (((unsupported)).apply (((xself).xerror_on_eq_to)) ((xerror_on_eq_to)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("<Key name:{self.name} hash:{self.hash}>"))
                x__hash__.write
                  [xself]
                    seq > @
                      seq
                        ((((unsupported)).apply (((xself).x_crasher)) ("None: is there a None literal in the EO language?")).and (((xself).x_crasher).xerror_on_hash)).if
                          (((unsupported)).apply ((xHashingError)))
                        (((unsupported)).apply (((xself).xhash)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xother)) ((xHashKey))).not).if
                          (((unsupported)).apply ((xNotImplemented)))
                        ((((unsupported)).apply (((xself).x_crasher)) ("None: is there a None literal in the EO language?")).and (((xself).x_crasher).xerror_on_eq)).if
                          (((unsupported)).apply ((xEqError)))
                        ((((unsupported)).apply (((xself).xerror_on_eq_to)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xself).xerror_on_eq_to)) ((xother)))).if
                          (((unsupported)).apply ((((xValueError)).apply ("cannot compare {self!r} to {other!r}"))))
                        ((((unsupported)).apply (((xother).xerror_on_eq_to)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xother).xerror_on_eq_to)) ((xself)))).if
                          (((unsupported)).apply ((((xValueError)).apply ("cannot compare {other!r} to {self!r}"))))
                        (((unsupported)).apply (((((unsupported)).apply (((xself).xname)) (((xself).xhash))).eq (((unsupported)).apply (((xother).xname)) (((xother).xhash))))))
            (((unsupported)).apply ((xstr)))
              seq
                x__hash__.write
                  [xself]
                    seq > @
                      seq
                        ((((unsupported)).apply (((xHashKey).x_crasher)) ("None: is there a None literal in the EO language?")).and (((xHashKey).x_crasher).xerror_on_hash)).if
                          (((unsupported)).apply ((xHashingError)))
                        (((unsupported)).apply (((((((xsuper)).apply).x__hash__)).apply)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((unsupported)).apply (((xHashKey).x_crasher)) ("None: is there a None literal in the EO language?")).and (((xHashKey).x_crasher).xerror_on_eq)).if
                          (((unsupported)).apply ((xEqError)))
                        (((unsupported)).apply (((((((xsuper)).apply).x__eq__)).apply ((xother)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xerror_on_hash xerror_on_eq]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xerror_on_hash)) ((xerror_on_hash)))
                        (((unsupported)).apply (((xself).xerror_on_eq)) ((xerror_on_eq)))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xHashKey).x_crasher)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("cannot nest crashers"))))
                        (((unsupported)).apply (((xHashKey).x_crasher)) ((xself)))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xHashKey).x_crasher)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipIf)).apply ((((unsupported)).apply ((xhamt)) ("None: is there a None literal in the EO language?"))) ("_testcapi lacks \"hamt()\" function"))))
              seq
                xtest_hashkey_helper_1.write
                  [xself]
                    memory > xd
                    memory > xk1
                    memory > xk2
                    seq > @
                      seq
                        xk1.write (((xHashKey)).apply (10) ("aaa"))
                        xk2.write (((xHashKey)).apply (10) ("bbb"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xk1)) ((xk2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xk1)))) ((((xhash)).apply ((xk2)))))
                        xd.write (((xdict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk1)))) ("a"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk2)))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xk2)))) ("b"))
                xtest_hamt_basics_1.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        xh.write "None: is there a None literal in the EO language?"
                xtest_hamt_basics_2.write
                  [xself]
                    memory > xh2
                    memory > xh
                    memory > xh3
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                        xh2.write ((((xh).xset)).apply ("a") ("b"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xh)) ((xh2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh2)))) (1))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xh).xget)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ("a") (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh2).xget)).apply ("a"))) ("b"))
                        xh3.write ((((xh2).xset)).apply ("b") (10))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xh2)) ((xh3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh2)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh3)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ("a"))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ("b"))) (10))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xh).xget)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xh2).xget)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xh).xget)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh2).xget)).apply ("a"))) ("b"))
                        (((unsupported)).apply ((xh)) ((xh2)) ((xh3)) ("None: is there a None literal in the EO language?"))
                xtest_hamt_basics_3.write
                  [xself]
                    memory > xo
                    memory > xh
                    memory > xh2
                    memory > xh1
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        xo.write (((xobject)).apply)
                        xh1.write ((((xh).xset)).apply ("1") ((xo)))
                        xh2.write ((((xh1).xset)).apply ("1") ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xh1)) ((xh2)))
                xtest_hamt_basics_4.write
                  [xself]
                    memory > xh
                    memory > xh2
                    memory > xh1
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        xh1.write ((((xh).xset)).apply ("key") ((((unsupported)).apply)))
                        xh2.write ((((xh1).xset)).apply ("key") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xh1)) ((xh2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh1)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh2)))) (1))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((xh1).xget)).apply ("key"))) (((((xh2).xget)).apply ("key"))))
                xtest_hamt_collision_1.write
                  [xself]
                    memory > xh
                    memory > xk3
                    memory > xh3
                    memory > xh2
                    memory > xh5
                    memory > xk1
                    memory > xh4
                    memory > xk2
                    seq > @
                      seq
                        xk1.write (((xHashKey)).apply (10) ("aaa"))
                        xk2.write (((xHashKey)).apply (10) ("bbb"))
                        xk3.write (((xHashKey)).apply (10) ("ccc"))
                        xh.write (((xhamt)).apply)
                        xh2.write ((((xh).xset)).apply ((xk1)) ("a"))
                        xh3.write ((((xh2).xset)).apply ((xk2)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xk1)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xk2)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh2).xget)).apply ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh2).xget)).apply ((xk2)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ((xk2)))) ("b"))
                        xh4.write ((((xh3).xset)).apply ((xk2)) ("cc"))
                        xh5.write ((((xh4).xset)).apply ((xk3)) ("aa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh3).xget)).apply ((xk2)))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh4).xget)).apply ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh4).xget)).apply ((xk2)))) ("cc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh4).xget)).apply ((xk3)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh5).xget)).apply ((xk1)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh5).xget)).apply ((xk2)))) ("cc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh5).xget)).apply ((xk2)))) ("cc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh5).xget)).apply ((xk3)))) ("aa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh2)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh3)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh4)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh5)))) (3))
                xtest_hamt_stress.write
                  [xself]
                    memory > xCRASH_EQ_EVERY
                    memory > xh
                    memory > xTEST_ITERS_EVERY
                    memory > xdm
                    memory > xCRASH_HASH_EVERY
                    memory > xkeys_to_delete
                    memory > xd
                    memory > xCOLLECTION_SIZE
                    memory > xhm
                    memory > xRUN_XTIMES
                    memory > xkey
                    seq > @
                      seq
                        xCOLLECTION_SIZE.write 7000
                        xTEST_ITERS_EVERY.write 647
                        xCRASH_HASH_EVERY.write 97
                        xCRASH_EQ_EVERY.write 11
                        xRUN_XTIMES.write 3
                        (((unsupported)).apply ((x_)) ((((xrange)).apply ((xRUN_XTIMES)))))
                          seq
                            xh.write (((xhamt)).apply)
                            xd.write (((xdict)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xCOLLECTION_SIZE)))))
                              seq
                                xkey.write (((xKeyStr)).apply ((xi)))
                                (((xi).mod (xCRASH_HASH_EVERY)).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                                    (((unsupported)).apply (((((xself).xassertRaises)).apply ((xHashingError)))))
                                      bogusForceDataize.write ((((xh).xset)).apply ((xkey)) ((xi)))
                                xh.write ((((xh).xset)).apply ((xkey)) ((xi)))
                                (((xi).mod (xCRASH_EQ_EVERY)).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                                    (((unsupported)).apply (((((xself).xassertRaises)).apply ((xEqError)))))
                                      bogusForceDataize.write ((((xh).xget)).apply ((((xKeyStr)).apply ((xi)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xkey)))) ((xi)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) ((((xlen)).apply ((xh)))))
                                (((xi).mod (xTEST_ITERS_EVERY)).not).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xh).xitems)).apply)))) ((((xset)).apply (((((xd).xitems)).apply)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xh).xitems)).apply)))) ((((xlen)).apply (((((xd).xitems)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) ((xCOLLECTION_SIZE)))
                            (((unsupported)).apply ((xkey)) ((((xrange)).apply ((xCOLLECTION_SIZE)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((((xKeyStr)).apply ((xkey)))) ("not found"))) ((xkey)))
                            xkeys_to_delete.write (((xlist)).apply ((((xrange)).apply ((xCOLLECTION_SIZE)))))
                            bogusForceDataize.write ((((xrandom).xshuffle)).apply ((xkeys_to_delete)))
                            (((unsupported)).apply ((((unsupported)).apply ((xiter_i)) ((xi)))) ((((xenumerate)).apply ((xkeys_to_delete)))))
                              seq
                                xkey.write (((xKeyStr)).apply ((xi)))
                                (((xiter_i).mod (xCRASH_HASH_EVERY)).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                                    (((unsupported)).apply (((((xself).xassertRaises)).apply ((xHashingError)))))
                                      bogusForceDataize.write ((((xh).xdelete)).apply ((xkey)))
                                (((xiter_i).mod (xCRASH_EQ_EVERY)).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                                    (((unsupported)).apply (((((xself).xassertRaises)).apply ((xEqError)))))
                                      bogusForceDataize.write ((((xh).xdelete)).apply ((((xKeyStr)).apply ((xi)))))
                                xh.write ((((xh).xdelete)).apply ((xkey)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xkey)) ("not found"))) ("not found"))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xkey)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) ((((xlen)).apply ((xh)))))
                                ((xiter_i).eq (((unsupported)).apply ((xCOLLECTION_SIZE)) (2))).if
                                  seq
                                    xhm.write (xh)
                                    xdm.write ((((xd).xcopy)).apply)
                                (((xiter_i).mod (xTEST_ITERS_EVERY)).not).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xh).xkeys)).apply)))) ((((xset)).apply (((((xd).xkeys)).apply)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xh).xkeys)).apply)))) ((((xlen)).apply (((((xd).xkeys)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                            (((unsupported)).apply ((xkey)) ((xdm)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xhm).xget)).apply ((((xstr)).apply ((xkey)))))) ((((unsupported)).apply ((xdm)) ((xkey)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdm)))) ((((xlen)).apply ((xhm)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xkey)))) ((((xenumerate)).apply ((xkeys_to_delete)))))
                              seq
                                xhm.write ((((xhm).xdelete)).apply ((((xstr)).apply ((xkey)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xhm).xget)).apply ((((xstr)).apply ((xkey)))) ("not found"))) ("not found"))
                                bogusForceDataize.write ((((xdm).xpop)).apply ((((xstr)).apply ((xkey)))) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) ((((xlen)).apply ((xh)))))
                                (((xi).mod (xTEST_ITERS_EVERY)).not).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xh).xvalues)).apply)))) ((((xset)).apply (((((xd).xvalues)).apply)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xh).xvalues)).apply)))) ((((xlen)).apply (((((xd).xvalues)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xh).xitems)).apply)))) ((((unsupported)).apply)))
                xtest_hamt_delete_1.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xZ
                    memory > xB
                    memory > xh
                    memory > xEr
                    memory > xorig_len
                    memory > xE
                    memory > xA
                    memory > xh2
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (102) ("C"))
                        xD.write (((xHashKey)).apply (103) ("D"))
                        xE.write (((xHashKey)).apply (104) ("E"))
                        xZ.write (((xHashKey)).apply ((100.neg)) ("Z"))
                        xEr.write (((unsupported)).apply ((xHashKey)) (103) ("Er") ((xD)))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xorig_len.write (((xlen)).apply ((xh)))
                        xh.write ((((xh).xdelete)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot compare"))))
                          bogusForceDataize.write ((((xh).xdelete)).apply ((xEr)))
                        xh.write ((((xh).xdelete)).apply ((xD)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 2)))
                        xh2.write ((((xh).xdelete)).apply ((xZ)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xh2)) ((xh)))
                        xh.write ((((xh).xdelete)).apply ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xA)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xB)))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xE)))) ("e"))
                xtest_hamt_delete_2.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xZ
                    memory > xB
                    memory > xh
                    memory > xEr
                    memory > xorig_len
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (201001) ("B"))
                        xC.write (((xHashKey)).apply (101001) ("C"))
                        xD.write (((xHashKey)).apply (103) ("D"))
                        xE.write (((xHashKey)).apply (104) ("E"))
                        xZ.write (((xHashKey)).apply ((100.neg)) ("Z"))
                        xEr.write (((unsupported)).apply ((xHashKey)) (201001) ("Er") ((xB)))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xorig_len.write (((xlen)).apply ((xh)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot compare"))))
                          bogusForceDataize.write ((((xh).xdelete)).apply ((xEr)))
                        xh.write ((((xh).xdelete)).apply ((xZ)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) ((xorig_len)))
                        xh.write ((((xh).xdelete)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 1)))
                        xh.write ((((xh).xdelete)).apply ((xB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 2)))
                        xh.write ((((xh).xdelete)).apply ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xD)))) ("d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xE)))) ("e"))
                        xh.write ((((xh).xdelete)).apply ((xA)))
                        xh.write ((((xh).xdelete)).apply ((xB)))
                        xh.write ((((xh).xdelete)).apply ((xD)))
                        xh.write ((((xh).xdelete)).apply ((xE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                xtest_hamt_delete_3.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh
                    memory > xorig_len
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (100100) ("C"))
                        xD.write (((xHashKey)).apply (100100) ("D"))
                        xE.write (((xHashKey)).apply (104) ("E"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xorig_len.write (((xlen)).apply ((xh)))
                        xh.write ((((xh).xdelete)).apply ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 1)))
                        xh.write ((((xh).xdelete)).apply ((xE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xC)))) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ((xB)))) ("b"))
                xtest_hamt_delete_4.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh
                    memory > xorig_len
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (100100) ("C"))
                        xD.write (((xHashKey)).apply (100100) ("D"))
                        xE.write (((xHashKey)).apply (100100) ("E"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xorig_len.write (((xlen)).apply ((xh)))
                        xh.write ((((xh).xdelete)).apply ((xD)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 1)))
                        xh.write ((((xh).xdelete)).apply ((xE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 2)))
                        xh.write ((((xh).xdelete)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 3)))
                        xh.write ((((xh).xdelete)).apply ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (((xorig_len).sub 4)))
                        xh.write ((((xh).xdelete)).apply ((xB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                xtest_hamt_delete_5.write
                  [xself]
                    memory > xkeys
                    memory > xcollision_key16
                    memory > xh
                    memory > xkey
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        xkeys.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (17))))
                          seq
                            xkey.write (((xHashKey)).apply ((xi)) ((((xstr)).apply ((xi)))))
                            bogusForceDataize.write ((((xkeys).xappend)).apply ((xkey)))
                            xh.write ((((xh).xset)).apply ((xkey)) ("val-{i}"))
                        xcollision_key16.write (((xHashKey)).apply (16) ("18"))
                        xh.write ((((xh).xset)).apply ((xcollision_key16)) ("collision"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (18))
                        xh.write ((((xh).xdelete)).apply ((((unsupported)).apply ((xkeys)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (17))
                        xh.write ((((xh).xdelete)).apply ((xcollision_key16)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (16))
                        xh.write ((((xh).xdelete)).apply ((((unsupported)).apply ((xkeys)) (16))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (15))
                        xh.write ((((xh).xdelete)).apply ((((unsupported)).apply ((xkeys)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (14))
                        xh.write ((((xh).xdelete)).apply ((((unsupported)).apply ((xkeys)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (14))
                        (((unsupported)).apply ((xkey)) ((xkeys)))
                          xh.write ((((xh).xdelete)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xh)))) (0))
                xtest_hamt_items_1.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh
                    memory > xit
                    memory > xF
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (201001) ("B"))
                        xC.write (((xHashKey)).apply (101001) ("C"))
                        xD.write (((xHashKey)).apply (103) ("D"))
                        xE.write (((xHashKey)).apply (104) ("E"))
                        xF.write (((xHashKey)).apply (110) ("F"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xh.write ((((xh).xset)).apply ((xF)) ("f"))
                        xit.write ((((xh).xitems)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xlist)).apply ((xit)))))) ((((unsupported)).apply ((((unsupported)).apply ((xA)) ("a"))) ((((unsupported)).apply ((xB)) ("b"))) ((((unsupported)).apply ((xC)) ("c"))) ((((unsupported)).apply ((xD)) ("d"))) ((((unsupported)).apply ((xE)) ("e"))) ((((unsupported)).apply ((xF)) ("f"))))))
                xtest_hamt_items_2.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh
                    memory > xit
                    memory > xF
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (100100) ("C"))
                        xD.write (((xHashKey)).apply (100100) ("D"))
                        xE.write (((xHashKey)).apply (100100) ("E"))
                        xF.write (((xHashKey)).apply (110) ("F"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xh.write ((((xh).xset)).apply ((xF)) ("f"))
                        xit.write ((((xh).xitems)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xlist)).apply ((xit)))))) ((((unsupported)).apply ((((unsupported)).apply ((xA)) ("a"))) ((((unsupported)).apply ((xB)) ("b"))) ((((unsupported)).apply ((xC)) ("c"))) ((((unsupported)).apply ((xD)) ("d"))) ((((unsupported)).apply ((xE)) ("e"))) ((((unsupported)).apply ((xF)) ("f"))))))
                xtest_hamt_keys_1.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh
                    memory > xF
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (100100) ("C"))
                        xD.write (((xHashKey)).apply (100100) ("D"))
                        xE.write (((xHashKey)).apply (100100) ("E"))
                        xF.write (((xHashKey)).apply (110) ("F"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xB)) ("b"))
                        xh.write ((((xh).xset)).apply ((xC)) ("c"))
                        xh.write ((((xh).xset)).apply ((xD)) ("d"))
                        xh.write ((((xh).xset)).apply ((xE)) ("e"))
                        xh.write ((((xh).xset)).apply ((xF)) ("f"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xlist)).apply (((((xh).xkeys)).apply)))))) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xD)) ((xE)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xlist)).apply ((xh)))))) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xD)) ((xE)) ((xF)))))
                xtest_hamt_items_3.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((xhamt)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xh).xitems)).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xh).xitems)).apply)))) ((((unsupported)).apply)))
                xtest_hamt_eq_1.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xh1
                    memory > xE
                    memory > xA
                    memory > xh2
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xC.write (((xHashKey)).apply (100100) ("C"))
                        xD.write (((xHashKey)).apply (100100) ("D"))
                        xE.write (((xHashKey)).apply (120) ("E"))
                        xh1.write (((xhamt)).apply)
                        xh1.write ((((xh1).xset)).apply ((xA)) ("a"))
                        xh1.write ((((xh1).xset)).apply ((xB)) ("b"))
                        xh1.write ((((xh1).xset)).apply ((xC)) ("c"))
                        xh1.write ((((xh1).xset)).apply ((xD)) ("d"))
                        xh2.write (((xhamt)).apply)
                        xh2.write ((((xh2).xset)).apply ((xA)) ("a"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xB)) ("b"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xC)) ("c"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xD)) ("d2"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xD)) ("d"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xE)) ("e"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xdelete)).apply ((xD)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                        xh2.write ((((xh2).xset)).apply ((xE)) ("d"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (xh2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xh1).neq (xh2))))
                xtest_hamt_eq_2.write
                  [xself]
                    memory > xh2
                    memory > xEr
                    memory > xA
                    memory > xh1
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xEr.write (((unsupported)).apply ((xHashKey)) (100) ("Er") ((xA)))
                        xh1.write (((xhamt)).apply)
                        xh1.write ((((xh1).xset)).apply ((xA)) ("a"))
                        xh2.write (((xhamt)).apply)
                        xh2.write ((((xh2).xset)).apply ((xEr)) ("a"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot compare"))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot compare"))))
                          unsupported
                xtest_hamt_gc_1.write
                  [xself]
                    memory > xref
                    memory > xA
                    memory > xa
                    memory > xh
                    memory > xb
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply (0) (0))
                        xref.write ((((xweakref).xref)).apply ((xh)))
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xa).xappend)).apply ((xa)))
                        bogusForceDataize.write ((((xa).xappend)).apply ((xh)))
                        xb.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xa).xappend)).apply ((xb)))
                        bogusForceDataize.write ((((xb).xappend)).apply ((xa)))
                        xh.write ((((xh).xset)).apply ((xA)) ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((xh)) ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref)).apply)))
                xtest_hamt_gc_2.write
                  [xself]
                    memory > xB
                    memory > xh
                    memory > xref
                    memory > xhi
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) ("a"))
                        xh.write ((((xh).xset)).apply ((xA)) ((xh)))
                        xref.write ((((xweakref).xref)).apply ((xh)))
                        xhi.write ((((xh).xitems)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xhi)))
                        (((unsupported)).apply ((((unsupported)).apply ((xh)) ((xhi)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref)).apply)))
                xtest_hamt_in_1.write
                  [xself]
                    memory > xh
                    memory > xAA
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xAA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xA)) ((xh)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xB)) ((xh)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xEqError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                            (((unsupported)).apply ((xAA)) ((xh)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xHashingError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                            (((unsupported)).apply ((xAA)) ((xh)))
                xtest_hamt_getitem_1.write
                  [xself]
                    memory > xh
                    memory > xAA
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xHashKey)).apply (100) ("A"))
                        xAA.write (((xHashKey)).apply (100) ("A"))
                        xB.write (((xHashKey)).apply (101) ("B"))
                        xh.write (((xhamt)).apply)
                        xh.write ((((xh).xset)).apply ((xA)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ((xA)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ((xAA)))) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((xh)) ((xB)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xEqError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                            (((unsupported)).apply ((xh)) ((xAA)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xHashingError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xHaskKeyCrasher)) (TRUE))))
                            (((unsupported)).apply ((xh)) ((xAA)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)