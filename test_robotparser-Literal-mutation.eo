memory > xthreading
memory > xBaseHTTPRequestHandler
memory > xCrawlDelayAndRequestRateTest
memory > xBaseRequestRateTest
memory > xurllib
memory > xtuple
memory > xos
memory > xRobotHandler
memory > xunittest
memory > xBaseRobotTest
memory > xHTTPServer
memory > xisinstance
memory > x__name__
memory > xstr
memory > xio
memory > xUserAgentOrderingTest
memory > xsupport
[] > test_robotparser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_string_formatting
        memory > xtestPasswordProtectedSite
        memory > xsite_maps
        memory > xrobots_txt
        memory > xtest_read_404
        memory > xdo_GET
        memory > xtearDown
        memory > xexpected_output
        memory > xcrawl_delay
        memory > xlog_message
        memory > xurl
        memory > xgood
        memory > xtest_site_maps
        memory > xsetUp
        memory > xsetUpClass
        memory > xbase_url
        memory > xtest_good_urls
        memory > xtest_basic
        memory > xtest_bad_urls
        memory > xagent
        memory > xrequest_rate
        memory > xget_agent_and_url
        memory > xbad
        memory > xtest_can_fetch
        memory > xtest_request_rate
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xrobots_txt.write ""
                xagent.write "test_robotparser"
                xgood.write (((unsupported)).apply)
                xbad.write (((unsupported)).apply)
                xsite_maps.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((((((xio).xStringIO)).apply (((xself).xrobots_txt))).xreadlines)).apply)
                        (((unsupported)).apply (((xself).xparser)) ((((((xurllib).xrobotparser).xRobotFileParser)).apply)))
                        bogusForceDataize.write (((((xself).xparser).xparse)).apply ((xlines)))
                xget_agent_and_url.write
                  [xself xurl]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xurl)) ((xtuple))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xagent)) ((xurl)))) ((xurl)))
                            (((unsupported)).apply ((((unsupported)).apply ((xagent)) ((xurl)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xagent)) ((xurl)))))
                xtest_good_urls.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xurl)) (((xself).xgood)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)).apply ((xurl)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)) ((xagent)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xcan_fetch)).apply ((xagent)) ((xurl)))))
                xtest_bad_urls.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xurl)) (((xself).xbad)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)).apply ((xurl)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)) ((xagent)))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcan_fetch)).apply ((xagent)) ((xurl)))))
                xtest_site_maps.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xsite_maps)).apply)) (((xself).xsite_maps)))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/") ("/test.html"))
                xbad.write (((unsupported)).apply ("/cyberworld/map/index.html") ("/tmp/xxx") ("/foo.html"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/") ("/test.html") ((((unsupported)).apply ("cybermapper") ("/cyberworld/map/index.html"))))
                xbad.write (((unsupported)).apply ("/cyberworld/map/index.html"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/") ("/test.html"))
                xbad.write (((unsupported)).apply ("/cyberworld/map/index.html"))
                xsite_maps.write (((unsupported)).apply ("http://www.gstatic.com/s2/sitemaps/profiles-sitemap.xml") ("http://www.google.com/hostednews/sitemap_index.xml"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply)
                xbad.write (((unsupported)).apply ("/cyberworld/map/index.html") ("/") ("/tmp/"))
            (((unsupported)).apply ((xBaseRobotTest)))
              seq
                xrequest_rate.write "None: is there a None literal in the EO language?"
                xcrawl_delay.write "None: is there a None literal in the EO language?"
                xtest_request_rate.write
                  [xself]
                    memory > xparsed_request_rate
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((xself).xparser)
                        (((unsupported)).apply ((xurl)) ((((xself).xgood).add ((xself).xbad))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xagent)) ((xurl)))) (((((xself).xget_agent_and_url)).apply ((xurl)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)) ((xagent)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xcrawl_delay)).apply ((xagent)))) (((xself).xcrawl_delay)))
                                xparsed_request_rate.write ((((xparser).xrequest_rate)).apply ((xagent)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_request_rate)) (((xself).xrequest_rate)))
                                (((unsupported)).apply (((xself).xrequest_rate)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xparsed_request_rate)) ((((xurllib).xrobotparser).xRequestRate)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparsed_request_rate).xrequests)) ((((xself).xrequest_rate).xrequests)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparsed_request_rate).xseconds)) ((((xself).xrequest_rate).xseconds)))
            (((unsupported)).apply ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write ""
                xgood.write (((unsupported)).apply ("/foo"))
            (((unsupported)).apply ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xagent.write "figtree"
                xrequest_rate.write (((((xurllib).xrobotparser).xRequestRate)).apply (9) (30))
                xcrawl_delay.write 3
                xgood.write (((unsupported)).apply ((((unsupported)).apply ("figtree") ("/foo.html"))))
                xbad.write (((unsupported)).apply ("/tmp") ("/tmp.html") ("/tmp/a.html") ("/a%3cd.html") ("/a%3Cd.html") ("/a%2fb.html") ("/~joe/index.html"))
            (((unsupported)).apply ((xCrawlDelayAndRequestRateTest)))
              xagent.write "FigTree Robot libwww-perl/5.04"
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/tmp"))
                xbad.write (((unsupported)).apply ("/tmp/") ("/tmp/a.html") ("/a%3cd.html") ("/a%3Cd.html") ("/a/b.html") ("/%7Ejoe/index.html"))
                xcrawl_delay.write 4
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/foo.html"))
                xbad.write (((unsupported)).apply)
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xagent.write "Googlebot"
                xgood.write (((unsupported)).apply ("/folder1/myfile.html"))
                xbad.write (((unsupported)).apply ("/folder1/anotherfile.html"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xagent.write "Googlebot"
                xbad.write (((unsupported)).apply ("/something.jpg"))
            (((unsupported)).apply ((xUserAgentOrderingTest)))
              xagent.write "Googlebot-Mobile"
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xagent.write "googlebot"
                xgood.write (((unsupported)).apply ("/folder1/myfile.html"))
                xbad.write (((unsupported)).apply ("/folder1/anotherfile.html"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/some/path"))
                xbad.write (((unsupported)).apply ("/some/path?name=value"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/another/path"))
                xbad.write (((unsupported)).apply ("/some/path"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xgood.write (((unsupported)).apply ("/some/path?"))
                xbad.write (((unsupported)).apply ("/another/path?"))
            (((unsupported)).apply ((xBaseRequestRateTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xrequest_rate.write (((((xurllib).xrobotparser).xRequestRate)).apply (3) (15))
                xcrawl_delay.write 2
                xgood.write (((unsupported)).apply ("/") ("/test.html"))
                xbad.write (((unsupported)).apply ("/cyberworld/map/index.html"))
            (((unsupported)).apply ((xBaseRobotTest)) (((xunittest).xTestCase)))
              seq
                xrobots_txt.write (((unsupported)).apply)
                xexpected_output.write (((unsupported)).apply)
                xtest_string_formatting.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xparser)))) (((xself).xexpected_output)))
            (((unsupported)).apply ((xBaseHTTPRequestHandler)))
              seq
                xdo_GET.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xsend_error)).apply (403) ("Forbidden access"))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver)) ((((xHTTPServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((xRobotHandler)))))
                        (((unsupported)).apply (((xself).xt)) ((((unsupported)).apply (((xthreading).xThread)) ("HTTPServer serving") ((((xself).xserver).xserve_forever)) ((((unsupported)).apply ("poll_interval") (0.01))))))
                        (((unsupported)).apply ((((xself).xt).xdaemon)) (TRUE))
                        bogusForceDataize.write (((((xself).xt).xstart)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xshutdown)).apply)
                        bogusForceDataize.write (((((xself).xt).xjoin)).apply)
                        bogusForceDataize.write (((((xself).xserver).xserver_close)).apply)
                xtestPasswordProtectedSite.write
                  [xself]
                    memory > xaddr
                    memory > xrobots_url
                    memory > xparser
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        xaddr.write (((xself).xserver).xserver_address)
                        xurl.write ((("http://".add ((xsupport).xHOST)).add ":").add (((xstr)).apply ((((unsupported)).apply ((xaddr)) (1)))))
                        xrobots_url.write ((xurl).add "/robots.txt")
                        xparser.write (((((xurllib).xrobotparser).xRobotFileParser)).apply)
                        bogusForceDataize.write ((((xparser).xset_url)).apply ((xurl)))
                        bogusForceDataize.write ((((xparser).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xparser).xcan_fetch)).apply ("*") ((xrobots_url)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xbase_url.write "http://www.pythontest.net/"
                xrobots_txt.write ((("{}elsewhere/robots.txt".xformat)).apply ((xbase_url)))
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply (((xcls).xbase_url)))))
                          seq
                            (((unsupported)).apply (((xcls).xparser)) ((((((xurllib).xrobotparser).xRobotFileParser)).apply (((xcls).xrobots_txt)))))
                            bogusForceDataize.write (((((xcls).xparser).xread)).apply)
                xurl.write
                  [xself xpath]
                    seq > @
                      (((unsupported)).apply (((("{}{}{}".xformat)).apply (((xself).xbase_url)) ((xpath)) ((((((unsupported)).apply ((((((xos).xpath).xsplitext)).apply ((xpath)))) (1)).not).if "/" "")))))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xparser).xdisallow_all)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xparser).xallow_all)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((((xself).xparser).xmtime)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcrawl_delay)).apply ("*"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xrequest_rate)).apply ("*"))))
                xtest_can_fetch.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xcan_fetch)).apply ("*") (((((xself).xurl)).apply ("elsewhere"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcan_fetch)).apply ("Nutch") (((xself).xbase_url)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcan_fetch)).apply ("Nutch") (((((xself).xurl)).apply ("brian"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcan_fetch)).apply ("Nutch") (((((xself).xurl)).apply ("webstats"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xcan_fetch)).apply ("*") (((((xself).xurl)).apply ("webstats"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xcan_fetch)).apply ("*") (((xself).xbase_url)))))
                xtest_read_404.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((((xurllib).xrobotparser).xRobotFileParser)).apply (((((xself).xurl)).apply ("i-robot.txt"))))
                        bogusForceDataize.write ((((xparser).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xparser).xallow_all)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xparser).xdisallow_all)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xmtime)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xparser).xcrawl_delay)).apply ("*"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xparser).xrequest_rate)).apply ("*"))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)