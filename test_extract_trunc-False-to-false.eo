memory > xconstructor
memory > xOuterRef
memory > xValueError
memory > xstr
memory > xExtractMinute
memory > xDTModel
memory > xExtractQuarter
memory > xIntegerField
memory > xDateFunctionTests
memory > xExtractIsoYear
memory > xTruncDate
memory > xzoneinfo
memory > xExtractSecond
memory > xTrunc
memory > xfalse
memory > xTruncMonth
memory > xTimeField
memory > xImportError
memory > xExtract
memory > xTruncYear
memory > xtimezone
memory > xdatetime
memory > xTruncHour
memory > xExtractDay
memory > xSubquery
memory > xlist
memory > xTestCase
memory > xt
memory > xAuthor
memory > xExtractIsoWeekDay
memory > xExtractYear
memory > xFan
memory > xTruncMinute
memory > xtimedelta
memory > xlookup
memory > xrepr
memory > xsettings
memory > xExtractWeekDay
memory > xF
memory > xTruncSecond
memory > xust_nera
memory > xoverride_settings
memory > xDateTimeField
memory > xTruncQuarter
memory > xpacific
memory > xm
memory > xTruncTime
memory > xMax
memory > xDateField
memory > xzip
memory > xunittest
memory > xmelb
memory > xTruncDay
memory > xisinstance
memory > xExtractMonth
memory > xTruncWeek
memory > xExtractWeek
memory > xTypeError
memory > xExtractHour
[] > test_extract_trunc
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_trunc_none
        memory > xtest_extract_outerref_validation
        memory > xdatetime_timezone
        memory > xtest_trunc_func_with_timezone
        memory > xtest_trunc_week
        memory > xtest_trunc_invalid_field_with_timezone
        memory > xZONE_CONSTRUCTORS
        memory > xtest_trunc_timezone_applied_before_truncation
        memory > xtest_trunc_time_none
        memory > xtest_extract_second_func
        memory > xtest_extract_year_greaterthan_lookup
        memory > xtest_extract_iso_year_func_boundaries
        memory > xtest_extract_duration_without_native_duration_field
        memory > xtest_extract_second_func_no_fractional
        memory > xtest_extract_year_func
        memory > xtest_extract_quarter_func_boundaries
        memory > xcreate_model
        memory > xtest_extract_invalid_field_with_timezone
        memory > xtest_extract_week_func_boundaries
        memory > xtest_trunc_time_func
        memory > xHAS_PYTZ
        memory > xtest_extract_hour_func
        memory > xtruncate_to
        memory > xtest_trunc_ambiguous_and_invalid_times
        memory > xtest_trunc_week_before_1000
        memory > xtest_extract_func_with_timezone
        memory > xtest_extract_week_func
        memory > xtest_extract_minute_func
        memory > xtest_trunc_time_comparison
        memory > xtest_trunc_subquery_with_parameters
        memory > xtest_extract_quarter_func
        memory > xget_timezones
        memory > xtest_extract_year_exact_lookup
        memory > xtest_trunc_second_func
        memory > xtest_trunc_week_func
        memory > xtest_extract_iso_weekday_func
        memory > xneeds_pytz
        memory > xtest_extract_duration
        memory > xtest_extract_day_func
        memory > xtest_extract_func_with_timezone_minus_no_offset
        memory > xtest_extract_iso_year_func
        memory > xtest_trunc_quarter_func
        memory > xtest_extract_none
        memory > x_test_trunc_week
        memory > xtest_extract_month_func
        memory > xtest_trunc_func
        memory > xpytz
        memory > xtest_extract_weekday_func
        memory > xtest_trunc_date_none
        memory > xtest_extract_year_lessthan_lookup
        memory > xtest_trunc_invalid_arguments
        memory > xtest_extract_outerref
        memory > xtest_extract_duration_unsupported_lookups
        memory > xtest_trunc_minute_func
        memory > xtest_extract_func_explicit_timezone_priority
        memory > xtest_trunc_month_func
        memory > xtest_trunc_day_func
        memory > xtest_trunc_hour_func
        memory > xtest_trunc_date_func
        memory > xtest_extract_func
        memory > xtest_trunc_year_func
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xpytz.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xHAS_PYTZ.write (((unsupported)).apply ((xpytz)) ("None: is there a None literal in the EO language?"))
            ((xHAS_PYTZ).not).if
              xneeds_pytz.write ((((xunittest).xskip)).apply ("Test requires pytz"))
              xneeds_pytz.write
                [xf]
                  seq > @
                    (((unsupported)).apply ((xf)))
            xZONE_CONSTRUCTORS.write (((unsupported)).apply (((xzoneinfo).xZoneInfo)))
            (xHAS_PYTZ).if
              (((unsupported)).apply ((xZONE_CONSTRUCTORS)) ((((unsupported)).apply (((xpytz).xtimezone)))))
            xtruncate_to.write
              [xvalue xkind xtzinfo]
                memory > xtruncate
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xtzinfo)) ("None: is there a None literal in the EO language?")).if
                      xvalue.write ((((xvalue).xastimezone)).apply ((xtzinfo)))
                    xtruncate.write
                      [xvalue xkind]
                        memory > xmonth_in_quarter
                        seq > @
                          seq
                            ((xkind).eq "second").if
                              (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (0))))
                            ((xkind).eq "minute").if
                              (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (0) (0))))
                            ((xkind).eq "hour").if
                              (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (0) (0) (0))))
                            ((xkind).eq "day").if
                              seq
                                (((xisinstance)).apply ((xvalue)) ((xdatetime))).if
                                  (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (0) (0) (0) (0))))
                                (((unsupported)).apply ((xvalue)))
                            ((xkind).eq "week").if
                              seq
                                (((xisinstance)).apply ((xvalue)) ((xdatetime))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((xvalue).sub (((unsupported)).apply ((xtimedelta)) (((((xvalue).xweekday)).apply)))).xreplace)) (0) (0) (0) (0))))
                                (((unsupported)).apply (((xvalue).sub (((unsupported)).apply ((xtimedelta)) (((((xvalue).xweekday)).apply))))))
                            ((xkind).eq "month").if
                              seq
                                (((xisinstance)).apply ((xvalue)) ((xdatetime))).if
                                  (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (1) (0) (0) (0) (0))))
                                (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (1))))
                            ((xkind).eq "quarter").if
                              seq
                                xmonth_in_quarter.write (((xvalue).xmonth).sub ((((xvalue).xmonth).sub 1).mod 3))
                                (((xisinstance)).apply ((xvalue)) ((xdatetime))).if
                                  (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) ((xmonth_in_quarter)) (1) (0) (0) (0) (0))))
                                (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) ((xmonth_in_quarter)) (1))))
                            (((xisinstance)).apply ((xvalue)) ((xdatetime))).if
                              (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (1) (1) (0) (0) (0) (0))))
                            (((unsupported)).apply ((((unsupported)).apply (((xvalue).xreplace)) (1) (1))))
                    xvalue.write (((xtruncate)).apply ((xvalue)) ((xkind)))
                    (((unsupported)).apply ((xtzinfo)) ("None: is there a None literal in the EO language?")).if
                      xvalue.write ((((xtimezone).xmake_aware)).apply ((((unsupported)).apply (((xvalue).xreplace)) ("None: is there a None literal in the EO language?"))) ((xtzinfo)))
                    (((unsupported)).apply ((xvalue)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((xfalse)))))
              seq
                xcreate_model.write
                  [xself xstart_datetime xend_datetime]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xcreate)) (((xstart_datetime).if ((((xstart_datetime).xisoformat)).apply) "None")) ((xstart_datetime)) ((xend_datetime)) (((xstart_datetime).if ((((xstart_datetime).xdate)).apply) "None: is there a None literal in the EO language?")) (((xend_datetime).if ((((xend_datetime).xdate)).apply) "None: is there a None literal in the EO language?")) (((xstart_datetime).if ((((xstart_datetime).xtime)).apply) "None: is there a None literal in the EO language?")) (((xend_datetime).if ((((xend_datetime).xtime)).apply) "None: is there a None literal in the EO language?")) ((((xstart_datetime).and (xend_datetime)).if ((xend_datetime).sub (xstart_datetime)) "None: is there a None literal in the EO language?")))))
                xtest_extract_year_exact_lookup.write
                  [xself]
                    memory > xqs
                    memory > xstart_datetime
                    memory > xquery_string
                    memory > xend_datetime
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (10))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply ((xlookup)) ((((unsupported)).apply ("year") ("iso_year"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlookup)))))
                            seq
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__exact".mod (xlookup))) (2015))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              xquery_string.write ((((((xstr)).apply (((xqs).xquery))).xlower)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply (" between "))) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply ("extract"))) (0))
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s".mod (xlookup))) (2015))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              xquery_string.write ((((((xstr)).apply (((xqs).xquery))).xlower)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply (" between "))) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply ("extract"))) (0))
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_date__%s".mod (xlookup))) (2015))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              xquery_string.write ((((((xstr)).apply (((xqs).xquery))).xlower)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply (" between "))) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply ("extract"))) (0))
                              xqs.write (((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractYear)).apply ("start_datetime")))).xfilter)) (((((xF)).apply ("start_year")).add 1)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              xquery_string.write ((((((xstr)).apply (((xqs).xquery))).xlower)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply (" between "))) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquery_string).xcount)).apply ("extract"))) (3))
                xtest_extract_year_greaterthan_lookup.write
                  [xself]
                    memory > xqs
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (10))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply ((xlookup)) ((((unsupported)).apply ("year") ("iso_year"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlookup)))))
                            seq
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__gt".mod (xlookup))) (2015))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((((xstr)).apply (((xqs).xquery))).xlower)).apply).xcount)).apply ("extract"))) (0))
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__gte".mod (xlookup))) (2015))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((((xstr)).apply (((xqs).xquery))).xlower)).apply).xcount)).apply ("extract"))) (0))
                              xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractYear)).apply ("start_datetime")))).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("end_datetime__%s__gte".mod (xlookup))) ((((xF)).apply ("start_year"))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((((((((xstr)).apply (((xqs).xquery))).xlower)).apply).xcount)).apply ("extract"))) (2))
                xtest_extract_year_lessthan_lookup.write
                  [xself]
                    memory > xqs
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (10))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply ((xlookup)) ((((unsupported)).apply ("year") ("iso_year"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlookup)))))
                            seq
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__lt".mod (xlookup))) (2016))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xstr)).apply (((xqs).xquery))).xcount)).apply ("extract"))) (0))
                              xqs.write (((((xDTModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__lte".mod (xlookup))) (2016))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xstr)).apply (((xqs).xquery))).xcount)).apply ("extract"))) (0))
                              xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractYear)).apply ("end_datetime")))).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("start_datetime__%s__lte".mod (xlookup))) ((((xF)).apply ("end_year"))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                              bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((((((((xstr)).apply (((xqs).xquery))).xlower)).apply).xcount)).apply ("extract"))) (2))
                xtest_extract_func.write
                  [xself]
                    memory > xend_datetime
                    memory > xmsg
                    memory > xstart_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("lookup_name must be provided"))))
                          bogusForceDataize.write (((xExtract)).apply ("start_datetime"))
                        xmsg.write "Extract input expression must be DateField, DateTimeField, TimeField, or DurationField."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("name") ("hour"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot extract time component 'second' from DateField 'start_date'."))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_date") ("second"))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("year")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xyear)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xyear)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("quarter")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (2))) ((((unsupported)).apply ((xend_datetime)) (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("month")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xmonth)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xmonth)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("day")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xday)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xday)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("week")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (25))) ((((unsupported)).apply ((xend_datetime)) (24))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("week_day")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((((xstart_datetime).xisoweekday)).apply).mod 7).add 1)))) ((((unsupported)).apply ((xend_datetime)) (((((((xend_datetime).xisoweekday)).apply).mod 7).add 1)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("iso_week_day")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xstart_datetime).xisoweekday)).apply)))) ((((unsupported)).apply ((xend_datetime)) (((((xend_datetime).xisoweekday)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("hour")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xhour)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xhour)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("minute")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xminute)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xminute)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("second")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xsecond)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xsecond)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtract)).apply ("start_datetime") ("year")))).xcount)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtract)).apply ("start_datetime") ("hour")))).xcount)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtract)).apply ("start_date") ("month")))).xcount)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtract)).apply ("start_time") ("hour")))).xcount)).apply)) (2))
                xtest_extract_none.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply ((((xExtract)).apply ("start_datetime") ("year"))) ((((xExtract)).apply ("start_date") ("year"))) ((((xExtract)).apply ("start_time") ("hour"))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xt)))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((xt))).xfirst)).apply).xextracted)))
                xtest_extract_outerref_validation.write
                  [xself]
                    memory > xinner_qs
                    memory > xmsg
                    seq > @
                      seq
                        xinner_qs.write (((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractMonth)).apply ((((xOuterRef)).apply ("name"))))))
                        xmsg.write "Extract input expression must be DateField, DateTimeField, TimeField, or DurationField."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xSubquery)).apply ((((unsupported)).apply (((((xinner_qs).xvalues)).apply ("name"))) ((((unsupported)).apply (1))))))))
                xtest_extract_duration.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      (((unsupported)).apply)
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("duration") ("second")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xend_datetime).sub (xstart_datetime)).xseconds).mod 60)))) ((((unsupported)).apply ((xend_datetime)) (((((xstart_datetime).sub (xend_datetime)).xseconds).mod 60)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("duration") ("day")))).xfilter)) (200)).xcount)).apply)) (1))
                xtest_extract_duration_without_native_duration_field.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Extract requires native DurationField database support."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("duration") ("second"))))))
                xtest_extract_duration_unsupported_lookups.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Cannot extract component '%s' from DurationField 'duration'."
                        (((unsupported)).apply ((xlookup)) ((((unsupported)).apply ("year") ("iso_year") ("month") ("week") ("week_day") ("iso_week_day") ("quarter"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlookup)))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (((xmsg).mod (xlookup))))))
                              (((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("duration") ((xlookup)))))
                xtest_extract_year_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractYear)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xyear)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xyear)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractYear)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xyear)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xyear)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractYear)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_iso_year_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractIsoYear)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xyear)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xyear)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractIsoYear)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xyear)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xyear)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractIsoYear)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_iso_year_func_boundaries.write
                  [xself]
                    memory > xqs
                    memory > xweek_52_day_2014
                    memory > xobj_1_iso_2015
                    memory > xweek_1_day_2014_2015
                    memory > xdays
                    memory > xobj_2_iso_2015
                    memory > xweek_53_day_2015
                    memory > xobj_1_iso_2014
                    memory > xend_datetime
                    seq > @
                      seq
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        xweek_52_day_2014.write (((xdatetime)).apply (2014) (12) (27) (13) (0))
                        xweek_1_day_2014_2015.write (((xdatetime)).apply (2014) (12) (31) (13) (0))
                        xweek_53_day_2015.write (((xdatetime)).apply (2015) (12) (31) (13) (0))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xweek_1_day_2014_2015.write ((((xtimezone).xmake_aware)).apply ((xweek_1_day_2014_2015)))
                            xweek_52_day_2014.write ((((xtimezone).xmake_aware)).apply ((xweek_52_day_2014)))
                            xweek_53_day_2015.write ((((xtimezone).xmake_aware)).apply ((xweek_53_day_2015)))
                        xdays.write (((unsupported)).apply ((xweek_52_day_2014)) ((xweek_1_day_2014_2015)) ((xweek_53_day_2015)))
                        xobj_1_iso_2014.write ((((xself).xcreate_model)).apply ((xweek_52_day_2014)) ((xend_datetime)))
                        xobj_1_iso_2015.write ((((xself).xcreate_model)).apply ((xweek_1_day_2014_2015)) ((xend_datetime)))
                        xobj_2_iso_2015.write ((((xself).xcreate_model)).apply ((xweek_53_day_2015)) ((xend_datetime)))
                        xqs.write ((((((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((xdays))).xannotate)) ((((xExtractIsoYear)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((xqs)) ((((unsupported)).apply ((((unsupported)).apply ((xweek_52_day_2014)) (2014))) ((((unsupported)).apply ((xweek_1_day_2014_2015)) (2015))) ((((unsupported)).apply ((xweek_53_day_2015)) (2015))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) (2015)).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply ((xobj_1_iso_2015)) ((xobj_2_iso_2015)))))
                        xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) (2014)).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply ((xobj_1_iso_2015)) ((xobj_2_iso_2015)))))
                        xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) (2014)).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply ((xobj_1_iso_2014)))))
                xtest_extract_month_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractMonth)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xmonth)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xmonth)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractMonth)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xmonth)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xmonth)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractMonth)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_day_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractDay)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xday)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xday)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractDay)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xday)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xday)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractDay)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_week_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractWeek)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (25))) ((((unsupported)).apply ((xend_datetime)) (24))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractWeek)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (25))) ((((unsupported)).apply ((xend_datetime)) (24))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractWeek)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_quarter_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (8) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractQuarter)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (2))) ((((unsupported)).apply ((xend_datetime)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractQuarter)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (2))) ((((unsupported)).apply ((xend_datetime)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractQuarter)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_quarter_func_boundaries.write
                  [xself]
                    memory > xqs
                    memory > xfirst_quarter_2015
                    memory > xend_datetime
                    memory > xlast_quarter_2014
                    memory > xdates
                    seq > @
                      seq
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        xlast_quarter_2014.write (((xdatetime)).apply (2014) (12) (31) (13) (0))
                        xfirst_quarter_2015.write (((xdatetime)).apply (2015) (1) (1) (13) (0))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xlast_quarter_2014.write ((((xtimezone).xmake_aware)).apply ((xlast_quarter_2014)))
                            xfirst_quarter_2015.write ((((xtimezone).xmake_aware)).apply ((xfirst_quarter_2015)))
                        xdates.write (((unsupported)).apply ((xlast_quarter_2014)) ((xfirst_quarter_2015)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xlast_quarter_2014)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xfirst_quarter_2015)) ((xend_datetime)))
                        xqs.write ((((((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((xdates))).xannotate)) ((((xExtractQuarter)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((xqs)) ((((unsupported)).apply ((((unsupported)).apply ((xlast_quarter_2014)) (4))) ((((unsupported)).apply ((xfirst_quarter_2015)) (1))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                xtest_extract_week_func_boundaries.write
                  [xself]
                    memory > xqs
                    memory > xweek_52_day_2014
                    memory > xweek_1_day_2014_2015
                    memory > xdays
                    memory > xweek_53_day_2015
                    memory > xend_datetime
                    seq > @
                      seq
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        xweek_52_day_2014.write (((xdatetime)).apply (2014) (12) (27) (13) (0))
                        xweek_1_day_2014_2015.write (((xdatetime)).apply (2014) (12) (31) (13) (0))
                        xweek_53_day_2015.write (((xdatetime)).apply (2015) (12) (31) (13) (0))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xweek_1_day_2014_2015.write ((((xtimezone).xmake_aware)).apply ((xweek_1_day_2014_2015)))
                            xweek_52_day_2014.write ((((xtimezone).xmake_aware)).apply ((xweek_52_day_2014)))
                            xweek_53_day_2015.write ((((xtimezone).xmake_aware)).apply ((xweek_53_day_2015)))
                        xdays.write (((unsupported)).apply ((xweek_52_day_2014)) ((xweek_1_day_2014_2015)) ((xweek_53_day_2015)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xweek_53_day_2015)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xweek_52_day_2014)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xweek_1_day_2014_2015)) ((xend_datetime)))
                        xqs.write ((((((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((xdays))).xannotate)) ((((xExtractWeek)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((xqs)) ((((unsupported)).apply ((((unsupported)).apply ((xweek_52_day_2014)) (52))) ((((unsupported)).apply ((xweek_1_day_2014_2015)) (1))) ((((unsupported)).apply ((xweek_53_day_2015)) (53))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                xtest_extract_weekday_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractWeekDay)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((((xstart_datetime).xisoweekday)).apply).mod 7).add 1)))) ((((unsupported)).apply ((xend_datetime)) (((((((xend_datetime).xisoweekday)).apply).mod 7).add 1)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractWeekDay)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((((xstart_datetime).xisoweekday)).apply).mod 7).add 1)))) ((((unsupported)).apply ((xend_datetime)) (((((((xend_datetime).xisoweekday)).apply).mod 7).add 1)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractWeekDay)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_iso_weekday_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractIsoWeekDay)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xstart_datetime).xisoweekday)).apply)))) ((((unsupported)).apply ((xend_datetime)) (((((xend_datetime).xisoweekday)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractIsoWeekDay)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xstart_datetime).xisoweekday)).apply)))) ((((unsupported)).apply ((xend_datetime)) (((((xend_datetime).xisoweekday)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractWeekDay)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_hour_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractHour)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xhour)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xhour)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractHour)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xhour)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xhour)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractHour)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_minute_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractMinute)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xminute)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xminute)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractMinute)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xminute)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xminute)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractMinute)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_second_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractSecond)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xsecond)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xsecond)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractSecond)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((xstart_datetime).xsecond)))) ((((unsupported)).apply ((xend_datetime)) (((xend_datetime).xsecond)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xExtractSecond)).apply ("start_datetime")))).xcount)).apply)) (2))
                xtest_extract_second_func_no_fractional.write
                  [xself]
                    memory > xstart_datetime
                    memory > xobj
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (30) (50) (783))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        xobj.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xF)).apply ("end_datetime__second"))))) ((((unsupported)).apply ((xobj)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xF)).apply ("end_time__second"))))) ((((unsupported)).apply ((xobj)))))
                xtest_trunc_func.write
                  [xself]
                    memory > xqs
                    memory > xstart_datetime
                    memory > xtest_time_kind
                    memory > xtest_datetime_to_time_kind
                    memory > xtest_datetime_kind
                    memory > xtest_date_kind
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (999) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        xtest_datetime_kind.write
                          [xkind]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ((xkind)) ((((xDateTimeField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                        xtest_date_kind.write
                          [xkind]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_date") ((xkind)) ((((xDateField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xdate)).apply)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xdate)).apply)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                        xtest_time_kind.write
                          [xkind]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_time") ((xkind)) ((((xTimeField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xtime)).apply)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xtime)).apply)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                        xtest_datetime_to_time_kind.write
                          [xkind]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ((xkind)) ((((xTimeField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xtime)).apply)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xtime)).apply)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                        bogusForceDataize.write (((xtest_date_kind)).apply ("year"))
                        bogusForceDataize.write (((xtest_date_kind)).apply ("quarter"))
                        bogusForceDataize.write (((xtest_date_kind)).apply ("month"))
                        bogusForceDataize.write (((xtest_date_kind)).apply ("day"))
                        bogusForceDataize.write (((xtest_time_kind)).apply ("hour"))
                        bogusForceDataize.write (((xtest_time_kind)).apply ("minute"))
                        bogusForceDataize.write (((xtest_time_kind)).apply ("second"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("year"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("quarter"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("month"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("day"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("hour"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("minute"))
                        bogusForceDataize.write (((xtest_datetime_kind)).apply ("second"))
                        bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("hour"))
                        bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("minute"))
                        bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("second"))
                        xqs.write (((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ("day") ((((xDateField)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (2))
                x_test_trunc_week.write
                  [xself xstart_datetime xend_datetime]
                    seq > @
                      seq
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ("week") ((((xDateTimeField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("week"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("week"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_date") ("week") ((((xDateField)).apply))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xdate)).apply)) ("week"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xdate)).apply)) ("week"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                xtest_trunc_week.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_trunc_week)) ((((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))) ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))))
                xtest_trunc_week_before_1000.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_test_trunc_week)) ((((xdatetime)).apply (999) (6) (15) (14) (30) (50) (321))) ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))))
                xtest_trunc_invalid_arguments.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "output_field must be either DateField, TimeField, or DateTimeField"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ("year") ((((xIntegerField)).apply)))))))
                        xmsg.write "'name' isn't a DateField, TimeField, or DateTimeField."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("name") ("year") ((((xDateTimeField)).apply)))))))
                        xmsg.write "Cannot truncate DateField 'start_date' to DateTimeField"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTrunc)).apply ("start_date") ("second"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_date") ("month") ((((xDateTimeField)).apply)))))))
                        xmsg.write "Cannot truncate TimeField 'start_time' to DateTimeField"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTrunc)).apply ("start_time") ("month"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_time") ("second") ((((xDateTimeField)).apply)))))))
                xtest_trunc_none.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply ((((xTrunc)).apply ("start_datetime") ("year"))) ((((xTrunc)).apply ("start_date") ("year"))) ((((xTrunc)).apply ("start_time") ("hour"))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xt)))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((xt))).xfirst)).apply).xtruncated)))
                xtest_trunc_year_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("year"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncYear)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("year"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("year"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncYear)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xdate)).apply)) ("year"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xdate)).apply)) ("year"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncYear)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncYear)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncYear)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_quarter_func.write
                  [xself]
                    memory > xlast_quarter_2015
                    memory > xstart_datetime
                    memory > xfirst_quarter_2016
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (10) (15) (14) (10) (50) (123))) ("quarter"))
                        xlast_quarter_2015.write (((xtruncate_to)).apply ((((xdatetime)).apply (2015) (12) (31) (14) (10) (50) (123))) ("quarter"))
                        xfirst_quarter_2016.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (1) (1) (14) (10) (50) (123))) ("quarter"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                            xlast_quarter_2015.write ((((xtimezone).xmake_aware)).apply ((xlast_quarter_2015)))
                            xfirst_quarter_2016.write ((((xtimezone).xmake_aware)).apply ((xfirst_quarter_2016)))
                        (((unsupported)).apply (((xself).xcreate_model)) ((xstart_datetime)) ((xend_datetime)))
                        (((unsupported)).apply (((xself).xcreate_model)) ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply (((xself).xcreate_model)) ((xlast_quarter_2015)) ((xend_datetime)))
                        (((unsupported)).apply (((xself).xcreate_model)) ((xfirst_quarter_2016)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncQuarter)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xdate)).apply)) ("quarter"))))) ((((unsupported)).apply ((xlast_quarter_2015)) ((((xtruncate_to)).apply (((((xlast_quarter_2015).xdate)).apply)) ("quarter"))))) ((((unsupported)).apply ((xfirst_quarter_2016)) ((((xtruncate_to)).apply (((((xfirst_quarter_2016).xdate)).apply)) ("quarter"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xdate)).apply)) ("quarter"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncQuarter)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("quarter"))))) ((((unsupported)).apply ((xlast_quarter_2015)) ((((xtruncate_to)).apply ((xlast_quarter_2015)) ("quarter"))))) ((((unsupported)).apply ((xfirst_quarter_2016)) ((((xtruncate_to)).apply ((xfirst_quarter_2016)) ("quarter"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("quarter"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncQuarter)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncQuarter)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_month_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("month"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMonth)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("month"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("month"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMonth)).apply ("start_date")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xdate)).apply)) ("month"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xdate)).apply)) ("month"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncMonth)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMonth)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncMonth)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_week_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("week"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncWeek)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("week"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("week"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncWeek)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncWeek)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncWeek)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_date_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDate)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xstart_datetime).xdate)).apply)))) ((((unsupported)).apply ((xend_datetime)) (((((xend_datetime).xdate)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncDate)).apply ("start_datetime")))).xcount)).apply)) (2))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDate)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncDate)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_date_none.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDate)).apply ("start_datetime")))).xfirst)).apply).xtruncated)))
                xtest_trunc_time_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncTime)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) (((((xstart_datetime).xtime)).apply)))) ((((unsupported)).apply ((xend_datetime)) (((((xend_datetime).xtime)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncTime)).apply ("start_datetime")))).xcount)).apply)) (2))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to TimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncTime)).apply ("start_date"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to TimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncTime)) ("start_date") ((((xDateField)).apply)))))))
                xtest_trunc_time_none.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncTime)).apply ("start_datetime")))).xfirst)).apply).xtruncated)))
                xtest_trunc_time_comparison.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (26))
                        xend_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (26) (321))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) (((((xstart_datetime).xtime)).apply)) (((((xend_datetime).xtime)).apply))).xexists)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply (((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncTime)).apply ("start_datetime"))) ((((xTruncTime)).apply ("end_datetime")))).xfilter)) (((((xstart_datetime).xtime)).apply)) (((((xend_datetime).xtime)).apply))).xexists)).apply)) (TRUE))
                xtest_trunc_day_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("day"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDay)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("day"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("day"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncDay)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDay)).apply ("start_time"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate TimeField 'start_time' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncDay)) ("start_time") ((((xTimeField)).apply)))))))
                xtest_trunc_hour_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("hour"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncHour)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("hour"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("hour"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncHour)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xtime)).apply)) ("hour"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xtime)).apply)) ("hour"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncHour)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncHour)).apply ("start_date"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncHour)) ("start_date") ((((xDateField)).apply)))))))
                xtest_trunc_minute_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("minute"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMinute)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("minute"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("minute"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMinute)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xtime)).apply)) ("minute"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xtime)).apply)) ("minute"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncMinute)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncMinute)).apply ("start_date"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncMinute)) ("start_date") ((((xDateField)).apply)))))))
                xtest_trunc_second_func.write
                  [xself]
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xtruncate_to)).apply ((((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))) ("second"))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                            xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncSecond)).apply ("start_datetime")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((xstart_datetime)) ("second"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((xend_datetime)) ("second"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncSecond)).apply ("start_time")))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xtime)).apply)) ("second"))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xtime)).apply)) ("second"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xextracted)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((xTruncSecond)).apply ("start_datetime")))).xcount)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncSecond)).apply ("start_date"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot truncate DateField 'start_date' to DateTimeField"))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncSecond)) ("start_date") ((((xDateField)).apply)))))))
                xtest_trunc_subquery_with_parameters.write
                  [xself]
                    memory > xfan_since_3
                    memory > xauthor_2
                    memory > xinner
                    memory > xauthor_1
                    memory > xfan_since_1
                    memory > xfan_since_2
                    memory > xouter
                    memory > xtz
                    seq > @
                      seq
                        xauthor_1.write (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("J. R. R. Tolkien"))
                        xauthor_2.write (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("G. R. R. Martin"))
                        xfan_since_1.write (((xdatetime)).apply (2016) (2) (3) (15) (0) (0))
                        xfan_since_2.write (((xdatetime)).apply (2015) (2) (3) (15) (0) (0))
                        xfan_since_3.write (((xdatetime)).apply (2017) (2) (3) (15) (0) (0))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xfan_since_1.write ((((xtimezone).xmake_aware)).apply ((xfan_since_1)))
                            xfan_since_2.write ((((xtimezone).xmake_aware)).apply ((xfan_since_2)))
                            xfan_since_3.write ((((xtimezone).xmake_aware)).apply ((xfan_since_3)))
                        (((unsupported)).apply ((((xFan).xobjects).xcreate)) ((xauthor_1)) ("Tom") ((xfan_since_1)))
                        (((unsupported)).apply ((((xFan).xobjects).xcreate)) ((xauthor_1)) ("Emma") ((xfan_since_2)))
                        (((unsupported)).apply ((((xFan).xobjects).xcreate)) ((xauthor_2)) ("Isabella") ((xfan_since_3)))
                        xinner.write ((((((unsupported)).apply ((((((((unsupported)).apply ((((xFan).xobjects).xfilter)) ((((xOuterRef)).apply ("pk"))) ((((unsupported)).apply ("Emma") ("Isabella") ("Tom")))).xvalues)).apply ("author")).xannotate)) ((((xMax)).apply ("fan_since")))).xvalues)).apply ("newest_fan"))
                        xouter.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xTruncYear)).apply ((((unsupported)).apply ((xSubquery)) ((xinner)) ((((xDateTimeField)).apply)))))))
                        xtz.write (((xsettings).xUSE_TZ).if ((xdatetime_timezone).xutc) "None: is there a None literal in the EO language?")
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((((xouter).xorder_by)).apply ("name")).xvalues)).apply ("name") ("newest_fan_year"))) ((((unsupported)).apply ((((unsupported)).apply ("name") ("G. R. R. Martin") ("newest_fan_year") ((((unsupported)).apply ((xdatetime)) (2017) (1) (1) (0) (0) ((xtz)))))) ((((unsupported)).apply ("name") ("J. R. R. Tolkien") ("newest_fan_year") ((((unsupported)).apply ((xdatetime)) (2016) (1) (1) (0) (0) ((xtz)))))))))
                xtest_extract_outerref.write
                  [xself]
                    memory > xqs
                    memory > xdatetime_3
                    memory > xinner_qs
                    memory > xdatetime_1
                    memory > xobj_3
                    memory > xobj_1
                    memory > xobj_2
                    memory > xdatetime_2
                    seq > @
                      seq
                        xdatetime_1.write (((xdatetime)).apply (2000) (1) (1))
                        xdatetime_2.write (((xdatetime)).apply (2001) (3) (5))
                        xdatetime_3.write (((xdatetime)).apply (2002) (1) (3))
                        ((xsettings).xUSE_TZ).if
                          seq
                            xdatetime_1.write ((((xtimezone).xmake_aware)).apply ((xdatetime_1)))
                            xdatetime_2.write ((((xtimezone).xmake_aware)).apply ((xdatetime_2)))
                            xdatetime_3.write ((((xtimezone).xmake_aware)).apply ((xdatetime_3)))
                        xobj_1.write ((((xself).xcreate_model)).apply ((xdatetime_1)) ((xdatetime_3)))
                        xobj_2.write ((((xself).xcreate_model)).apply ((xdatetime_2)) ((xdatetime_1)))
                        xobj_3.write ((((xself).xcreate_model)).apply ((xdatetime_3)) ((xdatetime_2)))
                        xinner_qs.write (((unsupported)).apply ((((xDTModel).xobjects).xfilter)) (2000) ((((xExtractMonth)).apply ((((xOuterRef)).apply ("end_datetime"))))))
                        xqs.write (((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xSubquery)).apply ((((unsupported)).apply (((((xinner_qs).xvalues)).apply ("pk"))) ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((((xqs).xorder_by)).apply ("name")).xvalues)).apply ("pk") ("related_pk"))) ((((unsupported)).apply ((((unsupported)).apply ("pk") (((xobj_1).xpk)) ("related_pk") (((xobj_1).xpk)))) ((((unsupported)).apply ("pk") (((xobj_2).xpk)) ("related_pk") (((xobj_1).xpk)))) ((((unsupported)).apply ("pk") (((xobj_3).xpk)) ("related_pk") ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply ((xDateFunctionTests)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ("UTC"))))
              seq
                xget_timezones.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply ((xconstructor)) ((xZONE_CONSTRUCTORS)))
                        (((unsupported)).apply ((((xconstructor)).apply ((xkey)))))
                xtest_extract_func_with_timezone.write
                  [xself]
                    memory > xqs
                    memory > xdelta_tzinfo_neg
                    memory > xstart_datetime
                    memory > xutc_model
                    memory > xmelb_model
                    memory > xdelta_tzinfo_pos
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (23) (30) (1) (321))
                        xend_datetime.write (((xdatetime)).apply (2015) (6) (16) (13) (11) (27) (123))
                        xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                        xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        xdelta_tzinfo_pos.write (((xdatetime_timezone)).apply ((((unsupported)).apply ((xtimedelta)) (5))))
                        xdelta_tzinfo_neg.write (((xdatetime_timezone)).apply ((((unsupported)).apply ((xtimedelta)) ((5.neg)) (17))))
                        (((unsupported)).apply ((xmelb)) (((((xself).xget_timezones)).apply ("Australia/Melbourne"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xmelb)))))))
                            seq
                              xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("day"))) ((((unsupported)).apply ((xExtract)) ("start_datetime") ("day") ((xmelb)))) ((((unsupported)).apply ((xExtract)) ("start_datetime") ("week") ((xmelb)))) ((((unsupported)).apply ((xExtractIsoYear)) ("start_datetime") ((xmelb)))) ((((xExtractWeekDay)).apply ("start_datetime"))) ((((unsupported)).apply ((xExtractWeekDay)) ("start_datetime") ((xmelb)))) ((((xExtractIsoWeekDay)).apply ("start_datetime"))) ((((unsupported)).apply ((xExtractIsoWeekDay)) ("start_datetime") ((xmelb)))) ((((unsupported)).apply ((xExtractQuarter)) ("start_datetime") ((xmelb)))) ((((xExtractHour)).apply ("start_datetime"))) ((((unsupported)).apply ((xExtractHour)) ("start_datetime") ((xmelb)))) ((((unsupported)).apply ((xExtractHour)) ("start_datetime") ((xdelta_tzinfo_pos)))) ((((unsupported)).apply ((xExtractHour)) ("start_datetime") ((xdelta_tzinfo_neg)))) ((((unsupported)).apply ((xExtractMinute)) ("start_datetime") ((xdelta_tzinfo_neg))))).xorder_by)).apply ("start_datetime"))
                              xutc_model.write ((((xqs).xget)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xday)) (15))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xday_melb)) (16))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xweek)) (25))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xisoyear)) (2015))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xweekday)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xweekday_melb)) (3))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xisoweekday)) (1))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xisoweekday_melb)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xquarter)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour)) (23))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour_melb)) (9))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour_with_delta_pos)) (4))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour_with_delta_neg)) (18))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xminute_with_delta_neg)) (47))
                              (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xmelb)))))
                                xmelb_model.write ((((xqs).xget)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xday)) (16))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xday_melb)) (16))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xweek)) (25))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xisoyear)) (2015))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xweekday)) (3))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xisoweekday)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xquarter)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xweekday_melb)) (3))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xisoweekday_melb)) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xhour)) (9))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmelb_model).xhour_melb)) (9))
                xtest_extract_func_with_timezone_minus_no_offset.write
                  [xself]
                    memory > xqs
                    memory > xstart_datetime
                    memory > xust_nera_model
                    memory > xutc_model
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (23) (30) (1) (321))
                        xend_datetime.write (((xdatetime)).apply (2015) (6) (16) (13) (11) (27) (123))
                        xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                        xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        (((unsupported)).apply ((xust_nera)) (((((xself).xget_timezones)).apply ("Asia/Ust-Nera"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xust_nera)))))))
                            seq
                              xqs.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtractHour)).apply ("start_datetime"))) ((((unsupported)).apply ((xExtractHour)) ("start_datetime") ((xust_nera))))).xorder_by)).apply ("start_datetime"))
                              xutc_model.write ((((xqs).xget)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour)) (23))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xutc_model).xhour_tz)) (9))
                              (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xust_nera)))))
                                xust_nera_model.write ((((xqs).xget)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xust_nera_model).xhour)) (9))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xust_nera_model).xhour_tz)) (9))
                xtest_extract_func_explicit_timezone_priority.write
                  [xself]
                    memory > xmodel
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (23) (30) (1) (321))
                        xend_datetime.write (((xdatetime)).apply (2015) (6) (16) (13) (11) (27) (123))
                        xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                        xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        (((unsupported)).apply ((xmelb)) (((((xself).xget_timezones)).apply ("Australia/Melbourne"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xmelb)))))))
                            (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xmelb)))))
                              seq
                                xmodel.write (((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xExtract)).apply ("start_datetime") ("day"))) ((((unsupported)).apply ((xExtract)) ("start_datetime") ("day") (((xdatetime_timezone).xutc))))).xorder_by)).apply ("start_datetime")).xget)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xday_melb)) (16))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xday_utc)) (15))
                xtest_extract_invalid_field_with_timezone.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((xmelb)) (((((xself).xget_timezones)).apply ("Australia/Melbourne"))))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xmelb)))))))
                          seq
                            xmsg.write "tzinfo can only be used with DateTimeField."
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xExtract)) ("start_date") ("day") ((xmelb))))).xget)).apply)
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xExtract)) ("start_time") ("hour") ((xmelb))))).xget)).apply)
                xtest_trunc_timezone_applied_before_truncation.write
                  [xself]
                    memory > xstart_datetime
                    memory > xpacific_start_datetime
                    memory > xmelb_start_datetime
                    memory > xmodel
                    memory > xend_datetime
                    seq > @
                      seq
                        xstart_datetime.write (((xdatetime)).apply (2016) (1) (1) (1) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                        xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmelb)) ((xpacific)))) ((((xzip)).apply (((((xself).xget_timezones)).apply ("Australia/Melbourne"))) (((((xself).xget_timezones)).apply ("America/Los_Angeles"))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((unsupported)).apply ((((xrepr)).apply ((xmelb)))) ((((xrepr)).apply ((xpacific)))))))))
                            seq
                              xmodel.write (((((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncYear)) ("start_datetime") ((xmelb)))) ((((unsupported)).apply ((xTruncYear)) ("start_datetime") ((xpacific)))) ((((unsupported)).apply ((xTruncDate)) ("start_datetime") ((xmelb)))) ((((unsupported)).apply ((xTruncDate)) ("start_datetime") ((xpacific)))) ((((unsupported)).apply ((xTruncTime)) ("start_datetime") ((xmelb)))) ((((unsupported)).apply ((xTruncTime)) ("start_datetime") ((xpacific))))).xorder_by)).apply ("start_datetime")).xget)).apply)
                              xmelb_start_datetime.write ((((xstart_datetime).xastimezone)).apply ((xmelb)))
                              xpacific_start_datetime.write ((((xstart_datetime).xastimezone)).apply ((xpacific)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xstart_datetime)) ((xstart_datetime)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xmelb_year)) ((((xtruncate_to)).apply ((xstart_datetime)) ("year") ((xmelb)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xpacific_year)) ((((xtruncate_to)).apply ((xstart_datetime)) ("year") ((xpacific)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmodel).xstart_datetime).xyear)) (2016))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmodel).xmelb_year).xyear)) (2016))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmodel).xpacific_year).xyear)) (2015))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xmelb_date)) (((((xmelb_start_datetime).xdate)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xpacific_date)) (((((xpacific_start_datetime).xdate)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xmelb_time)) (((((xmelb_start_datetime).xtime)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmodel).xpacific_time)) (((((xpacific_start_datetime).xtime)).apply)))
                xtest_trunc_ambiguous_and_invalid_times.write
                  [xself]
                    memory > xmodel
                    memory > xsao
                    memory > xstart_datetime
                    memory > xend_datetime
                    seq > @
                      (((unsupported)).apply)
                        xsao.write ((((xpytz).xtimezone)).apply ("America/Sao_Paulo"))
                        xstart_datetime.write (((unsupported)).apply ((xdatetime)) (2016) (10) (16) (13) (((xdatetime_timezone).xutc)))
                        xend_datetime.write (((unsupported)).apply ((xdatetime)) (2016) (2) (21) (1) (((xdatetime_timezone).xutc)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        (((unsupported)).apply (((((xtimezone).xoverride)).apply ((xsao)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xpytz).xNonExistentTimeError)) ("2016-10-16 00:00:00"))))
                              xmodel.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncDay)).apply ("start_datetime")))).xget)).apply)
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xpytz).xAmbiguousTimeError)) ("2016-02-20 23:00:00"))))
                              xmodel.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((xTruncHour)).apply ("end_datetime")))).xget)).apply)
                            xmodel.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncDay)) ("start_datetime") ((xfalse)))) ((((unsupported)).apply ((xTruncHour)) ("end_datetime") ((xfalse))))).xget)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmodel).xtruncated_start).xdst)).apply)) ((((xtimedelta)).apply (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmodel).xtruncated_end).xdst)).apply)) ((((xtimedelta)).apply (0))))
                            xmodel.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTruncDay)) ("start_datetime") (TRUE))) ((((unsupported)).apply ((xTruncHour)) ("end_datetime") (TRUE)))).xget)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmodel).xtruncated_start).xdst)).apply)) ((((xtimedelta)).apply (0) (3600))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmodel).xtruncated_end).xdst)).apply)) ((((xtimedelta)).apply (0) (3600))))
                xtest_trunc_func_with_timezone.write
                  [xself]
                    memory > xqs
                    memory > xtest_datetime_to_time_kind
                    memory > xtest_datetime_kind
                    memory > xend_datetime
                    memory > xtest_datetime_to_date_kind
                    memory > xstart_datetime
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstart_datetime.write (((xdatetime)).apply (2015) (6) (15) (14) (30) (50) (321))
                        xend_datetime.write (((xdatetime)).apply (2016) (6) (15) (14) (10) (50) (123))
                        xstart_datetime.write ((((xtimezone).xmake_aware)).apply ((xstart_datetime)))
                        xend_datetime.write ((((xtimezone).xmake_aware)).apply ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xstart_datetime)) ((xend_datetime)))
                        bogusForceDataize.write ((((xself).xcreate_model)).apply ((xend_datetime)) ((xstart_datetime)))
                        (((unsupported)).apply ((xmelb)) (((((xself).xget_timezones)).apply ("Australia/Melbourne"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xmelb)))))))
                            seq
                              xtest_datetime_kind.write
                                [xkind]
                                  seq > @
                                    bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ((xkind)) ((((xDateTimeField)).apply)) ((xmelb))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply (((((xstart_datetime).xastimezone)).apply ((xmelb)))) ((xkind)) ((xmelb)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply (((((xend_datetime).xastimezone)).apply ((xmelb)))) ((xkind)) ((xmelb)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                              xtest_datetime_to_date_kind.write
                                [xkind]
                                  seq > @
                                    bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ((xkind)) ((((xDateField)).apply)) ((xmelb))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((((((((xstart_datetime).xastimezone)).apply ((xmelb))).xdate)).apply)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((((((((xend_datetime).xastimezone)).apply ((xmelb))).xdate)).apply)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                              xtest_datetime_to_time_kind.write
                                [xkind]
                                  seq > @
                                    bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ((xkind)) ((((xTimeField)).apply)) ((xmelb))))).xorder_by)).apply ("start_datetime"))) ((((unsupported)).apply ((((unsupported)).apply ((xstart_datetime)) ((((xtruncate_to)).apply ((((((((xstart_datetime).xastimezone)).apply ((xmelb))).xtime)).apply)) ((xkind)))))) ((((unsupported)).apply ((xend_datetime)) ((((xtruncate_to)).apply ((((((((xend_datetime).xastimezone)).apply ((xmelb))).xtime)).apply)) ((xkind)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xm).xstart_datetime)) (((xm).xtruncated)))))))
                              bogusForceDataize.write (((xtest_datetime_to_date_kind)).apply ("year"))
                              bogusForceDataize.write (((xtest_datetime_to_date_kind)).apply ("quarter"))
                              bogusForceDataize.write (((xtest_datetime_to_date_kind)).apply ("month"))
                              bogusForceDataize.write (((xtest_datetime_to_date_kind)).apply ("week"))
                              bogusForceDataize.write (((xtest_datetime_to_date_kind)).apply ("day"))
                              bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("hour"))
                              bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("minute"))
                              bogusForceDataize.write (((xtest_datetime_to_time_kind)).apply ("second"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("year"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("quarter"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("month"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("week"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("day"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("hour"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("minute"))
                              bogusForceDataize.write (((xtest_datetime_kind)).apply ("second"))
                              xqs.write (((unsupported)).apply ((((xDTModel).xobjects).xfilter)) ((((unsupported)).apply ((xTrunc)) ("start_datetime") ("day") ((((xDateField)).apply)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (2))
                xtest_trunc_invalid_field_with_timezone.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((xmelb)) (((((xself).xget_timezones)).apply ("Australia/Melbourne"))))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xmelb)))))))
                          seq
                            xmsg.write "tzinfo can only be used with DateTimeField."
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_date") ("day") ((xmelb))))).xget)).apply)
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write ((((((unsupported)).apply ((((xDTModel).xobjects).xannotate)) ((((unsupported)).apply ((xTrunc)) ("start_time") ("hour") ((xmelb))))).xget)).apply)