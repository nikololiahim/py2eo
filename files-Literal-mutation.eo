memory > xFieldFile
memory > xdatetime
memory > xFileDescriptor
memory > xFileField
memory > xImageFile
memory > xField
memory > xcallable
memory > xImageFieldFile
memory > xsuper
memory > xgetattr
memory > xhash
memory > xisinstance
memory > xTypeError
memory > xImportError
memory > xforms
memory > xValueError
memory > xImageFileDescriptor
memory > xstr
memory > xchecks
memory > xhasattr
memory > xproperty
memory > xargs
memory > xDeferredAttribute
memory > xFile
memory > xposixpath
memory > xsetattr
memory > xname
memory > xvalidate_file_name
memory > xdefault_storage
memory > xStorage
memory > xsignals
memory > xkwargs
[] > files
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcontribute_to_class
        memory > xattr_class
        memory > xupdate_dimension_fields
        memory > xcheck
        memory > xsize
        memory > x_
        memory > xopen
        memory > x_check_upload_to
        memory > x__get__
        memory > xget_prep_value
        memory > xgenerate_filename
        memory > x_check_image_library_installed
        memory > xdelete
        memory > x__setstate__
        memory > x__eq__
        memory > xformfield
        memory > xsave
        memory > xget_internal_type
        memory > xfile
        memory > xclose
        memory > xurl
        memory > xdescription
        memory > xsave_form_data
        memory > x_require_file
        memory > xpath
        memory > x_get_file
        memory > x__getstate__
        memory > xclosed
        memory > x_del_file
        memory > x__set__
        memory > x_check_primary_key
        memory > xdeconstruct
        memory > xpre_save
        memory > x__init__
        memory > xdescriptor_class
        memory > x__hash__
        memory > x_set_file
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xFile)))
              seq
                x__init__.write
                  [xself xinstance xfield xname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ("None: is there a None literal in the EO language?") ((xname)))
                        (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                        (((unsupported)).apply (((xself).xfield)) ((xfield)))
                        (((unsupported)).apply (((xself).xstorage)) (((xfield).xstorage)))
                        (((unsupported)).apply (((xself).x_committed)) (TRUE))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xhasattr)).apply ((xother)) ("name")).if
                          (((unsupported)).apply ((((xself).xname).eq ((xother).xname))))
                        (((unsupported)).apply ((((xself).xname).eq (xother))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xname)))))
                x_require_file.write
                  [xself]
                    seq > @
                      ((xself).not).if
                        (((unsupported)).apply ((((xValueError)).apply (("The '%s' attribute has no file associated with it.".mod (((xself).xfield).xname))))))
                x_get_file.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_require_file)).apply)
                        (((unsupported)).apply ((((xgetattr)).apply ((xself)) ("_file") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).x_file)) ((((((xself).xstorage).xopen)).apply (((xself).xname)) ("rb"))))
                        (((unsupported)).apply (((xself).x_file)))
                x_set_file.write
                  [xself xfile]
                    seq > @
                      (((unsupported)).apply (((xself).x_file)) ((xfile)))
                x_del_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_file)))))))
                xfile.write (((xproperty)).apply ((x_get_file)) ((x_set_file)) ((x_del_file)))
                xpath.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_require_file)).apply)
                        (((unsupported)).apply ((((((xself).xstorage).xpath)).apply (((xself).xname)))))
                xurl.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_require_file)).apply)
                        (((unsupported)).apply ((((((xself).xstorage).xurl)).apply (((xself).xname)))))
                xsize.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_require_file)).apply)
                        (((xself).x_committed).not).if
                          (((unsupported)).apply ((((xself).xfile).xsize)))
                        (((unsupported)).apply ((((((xself).xstorage).xsize)).apply (((xself).xname)))))
                xopen.write
                  [xself xmode]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_require_file)).apply)
                        (((unsupported)).apply ((((xgetattr)).apply ((xself)) ("_file") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xfile)) ((((((xself).xstorage).xopen)).apply (((xself).xname)) ((xmode)))))
                          bogusForceDataize.write (((((xself).xfile).xopen)).apply ((xmode)))
                        (((unsupported)).apply ((xself)))
                (((unsupported)).apply (((xopen).xalters_data)) (TRUE))
                xsave.write
                  [xself xname xcontent xsave]
                    seq > @
                      (((unsupported)).apply)
                        xname.write (((((xself).xfield).xgenerate_filename)).apply (((xself).xinstance)) ((xname)))
                        (((unsupported)).apply (((xself).xname)) ((((unsupported)).apply ((((xself).xstorage).xsave)) ((xname)) ((xcontent)) ((((xself).xfield).xmax_length)))))
                        bogusForceDataize.write (((xsetattr)).apply (((xself).xinstance)) ((((xself).xfield).xattname)) (((xself).xname)))
                        (((unsupported)).apply (((xself).x_committed)) (TRUE))
                        (xsave).if
                          bogusForceDataize.write (((((xself).xinstance).xsave)).apply)
                (((unsupported)).apply (((xsave).xalters_data)) (TRUE))
                xdelete.write
                  [xself xsave]
                    seq > @
                      (((unsupported)).apply)
                        ((xself).not).if
                          (((unsupported)).apply)
                        (((xhasattr)).apply ((xself)) ("_file")).if
                          seq
                            bogusForceDataize.write ((((xself).xclose)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xfile)))))))
                        bogusForceDataize.write (((((xself).xstorage).xdelete)).apply (((xself).xname)))
                        (((unsupported)).apply (((xself).xname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xsetattr)).apply (((xself).xinstance)) ((((xself).xfield).xattname)) (((xself).xname)))
                        (((unsupported)).apply (((xself).x_committed)) (FALSE))
                        (xsave).if
                          bogusForceDataize.write (((((xself).xinstance).xsave)).apply)
                (((unsupported)).apply (((xdelete).xalters_data)) (TRUE))
                xclosed.write
                  [xself]
                    memory > xfile
                    seq > @
                      (((unsupported)).apply)
                        xfile.write (((xgetattr)).apply ((xself)) ("_file") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((unsupported)).apply ((xfile)) ("None: is there a None literal in the EO language?")).or ((xfile).xclosed))))
                xclose.write
                  [xself]
                    memory > xfile
                    seq > @
                      seq
                        xfile.write (((xgetattr)).apply ((xself)) ("_file") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfile)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xfile).xclose)).apply)
                x__getstate__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("name") (((xself).xname)) ("closed") (FALSE) ("_committed") (TRUE) ("_file") ("None: is there a None literal in the EO language?") ("instance") (((xself).xinstance)) ("field") (((xself).xfield)))))
                x__setstate__.write
                  [xself xstate]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x__dict__).xupdate)).apply ((xstate)))
                        (((unsupported)).apply (((xself).xstorage)) ((((xself).xfield).xstorage)))
            (((unsupported)).apply ((xDeferredAttribute)))
              seq
                (((unsupported)).apply)
                x__get__.write
                  [xself xinstance xcls]
                    memory > xfile
                    memory > xfile_copy
                    memory > xattr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        xfile.write ((((((xsuper)).apply).x__get__)).apply ((xinstance)) ((xcls)))
                        ((((xisinstance)).apply ((xfile)) ((xstr))).or (((unsupported)).apply ((xfile)) ("None: is there a None literal in the EO language?"))).if
                          seq
                            xattr.write (((((xself).xfield).xattr_class)).apply ((xinstance)) (((xself).xfield)) ((xfile)))
                            (((unsupported)).apply ((((unsupported)).apply (((xinstance).x__dict__)) ((((xself).xfield).xattname)))) ((xattr)))
                          ((((xisinstance)).apply ((xfile)) ((xFile))).and ((((xisinstance)).apply ((xfile)) ((xFieldFile))).not)).if
                            seq
                              xfile_copy.write (((((xself).xfield).xattr_class)).apply ((xinstance)) (((xself).xfield)) (((xfile).xname)))
                              (((unsupported)).apply (((xfile_copy).xfile)) ((xfile)))
                              (((unsupported)).apply (((xfile_copy).x_committed)) (FALSE))
                              (((unsupported)).apply ((((unsupported)).apply (((xinstance).x__dict__)) ((((xself).xfield).xattname)))) ((xfile_copy)))
                            ((((xisinstance)).apply ((xfile)) ((xFieldFile))).and ((((xhasattr)).apply ((xfile)) ("field")).not)).if
                              seq
                                (((unsupported)).apply (((xfile).xinstance)) ((xinstance)))
                                (((unsupported)).apply (((xfile).xfield)) (((xself).xfield)))
                                (((unsupported)).apply (((xfile).xstorage)) ((((xself).xfield).xstorage)))
                              ((((xisinstance)).apply ((xfile)) ((xFieldFile))).and (((unsupported)).apply ((xinstance)) (((xfile).xinstance)))).if
                                (((unsupported)).apply (((xfile).xinstance)) ((xinstance)))
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).x__dict__)) ((((xself).xfield).xattname)))))
                x__set__.write
                  [xself xinstance xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xinstance).x__dict__)) ((((xself).xfield).xattname)))) ((xvalue)))
            (((unsupported)).apply ((xField)))
              seq
                xattr_class.write (xFieldFile)
                xdescriptor_class.write (xFileDescriptor)
                xdescription.write (((x_)).apply ("File"))
                x__init__.write
                  [xself xverbose_name xname xupload_to xstorage]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_primary_key_set_explicitly)) ((((unsupported)).apply ("primary_key") ((xkwargs)))))
                        (((unsupported)).apply (((xself).xstorage)) (((xstorage).or (xdefault_storage))))
                        (((xcallable)).apply (((xself).xstorage))).if
                          seq
                            (((unsupported)).apply (((xself).x_storage_callable)) (((xself).xstorage)))
                            (((unsupported)).apply (((xself).xstorage)) (((((xself).xstorage)).apply)))
                            ((((xisinstance)).apply (((xself).xstorage)) ((xStorage))).not).if
                              (((unsupported)).apply ((((xTypeError)).apply (("%s.storage must be a subclass/instance of %s.%s".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) (((xStorage).x__module__)) (((xStorage).x__qualname__))))))))
                        (((unsupported)).apply (((xself).xupload_to)) ((xupload_to)))
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("max_length") (100))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xverbose_name)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))))) ((((unsupported)).apply (((((xself).x_check_primary_key)).apply)))) ((((unsupported)).apply (((((xself).x_check_upload_to)).apply)))))))
                x_check_primary_key.write
                  [xself]
                    seq > @
                      ((xself).x_primary_key_set_explicitly).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("'primary_key' is not a valid argument for a %s.".mod (((xself).x__class__).x__name__))) ((xself)) ("fields.E201"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_check_upload_to.write
                  [xself]
                    seq > @
                      ((((xisinstance)).apply (((xself).xupload_to)) ((xstr))).and (((((xself).xupload_to).xstartswith)).apply ("/"))).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("%s's 'upload_to' argument must be a relative path, not an absolute path.".mod (((xself).x__class__).x__name__))) ((xself)) ("fields.E202") ("Remove the leading slash."))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        (((((xkwargs).xget)).apply ("max_length")).eq 100).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("max_length"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("upload_to"))) (((xself).xupload_to)))
                        (((unsupported)).apply (((xself).xstorage)) ((xdefault_storage))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("storage"))) ((((xgetattr)).apply ((xself)) ("_storage_callable") (((xself).xstorage)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                xget_internal_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("FileField"))
                xget_prep_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        xvalue.write ((((((xsuper)).apply).xget_prep_value)).apply ((xvalue)))
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xstr)).apply ((xvalue)))))
                xpre_save.write
                  [xself xmodel_instance xadd]
                    memory > xfile
                    seq > @
                      seq
                        xfile.write ((((((xsuper)).apply).xpre_save)).apply ((xmodel_instance)) ((xadd)))
                        ((xfile).and (((xfile).x_committed).not)).if
                          (((unsupported)).apply (((xfile).xsave)) (((xfile).xname)) (((xfile).xfile)) (FALSE))
                        (((unsupported)).apply ((xfile)))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) (((xself).xattname)) (((((xself).xdescriptor_class)).apply ((xself)))))
                xgenerate_filename.write
                  [xself xinstance xfilename]
                    memory > xdirname
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xcallable)).apply (((xself).xupload_to))).if
                          xfilename.write ((((xself).xupload_to)).apply ((xinstance)) ((xfilename)))
                          seq
                            xdirname.write ((((((((xdatetime).xdatetime).xnow)).apply).xstrftime)).apply ((((xstr)).apply (((xself).xupload_to)))))
                            xfilename.write ((((xposixpath).xjoin)).apply ((xdirname)) ((xfilename)))
                        xfilename.write (((unsupported)).apply ((xvalidate_file_name)) ((xfilename)) (TRUE))
                        (((unsupported)).apply ((((((xself).xstorage).xgenerate_filename)).apply ((xfilename)))))
                xsave_form_data.write
                  [xself xinstance xdata]
                    seq > @
                      (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xself).xname)) (((xdata).or "")))
                xformfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((((unsupported)).apply ("form_class") (((xforms).xFileField)) ("max_length") (((xself).xmax_length)) ((xkwargs)))))))))
            (((unsupported)).apply ((xFileDescriptor)))
              seq
                (((unsupported)).apply)
                x__set__.write
                  [xself xinstance xvalue]
                    memory > xprevious_file
                    seq > @
                      seq
                        xprevious_file.write (((((xinstance).x__dict__).xget)).apply ((((xself).xfield).xattname)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__set__)).apply ((xinstance)) ((xvalue)))
                        (((unsupported)).apply ((xprevious_file)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xself).xfield).xupdate_dimension_fields)) ((xinstance)) (TRUE))
            (((unsupported)).apply ((xImageFile)) ((xFieldFile)))
              xdelete.write
                [xself xsave]
                  seq > @
                    (((unsupported)).apply)
                      (((xhasattr)).apply ((xself)) ("_dimensions_cache")).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_dimensions_cache)))))))
                      bogusForceDataize.write ((((((xsuper)).apply).xdelete)).apply ((xsave)))
            (((unsupported)).apply ((xFileField)))
              seq
                xattr_class.write (xImageFieldFile)
                xdescriptor_class.write (xImageFileDescriptor)
                xdescription.write (((x_)).apply ("Image"))
                x__init__.write
                  [xself xverbose_name xname xwidth_field xheight_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xwidth_field)) (((xself).xheight_field)))) ((((unsupported)).apply ((xwidth_field)) ((xheight_field)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xverbose_name)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))))) ((((unsupported)).apply (((((xself).x_check_image_library_installed)).apply)))))))
                x_check_image_library_installed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xImportError)))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) ("Cannot use ImageField because Pillow is not installed.") ("Get Pillow at https://pypi.org/project/Pillow/ or run command \"python -m pip install Pillow\".") ((xself)) ("fields.E210"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        ((xself).xwidth_field).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("width_field"))) (((xself).xwidth_field)))
                        ((xself).xheight_field).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("height_field"))) (((xself).xheight_field)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                        ((((xcls).x_meta).xabstract).not).if
                          (((unsupported)).apply ((((xsignals).xpost_init).xconnect)) (((xself).xupdate_dimension_fields)) ((xcls)))
                xupdate_dimension_fields.write
                  [xself xinstance xforce]
                    memory > xdimension_fields_filled
                    memory > xfile
                    memory > xwidth
                    memory > xhas_dimension_fields
                    memory > xheight
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xhas_dimension_fields.write (((xself).xwidth_field).or ((xself).xheight_field))
                        (((xhas_dimension_fields).not).or (((unsupported)).apply (((xself).xattname)) (((xinstance).x__dict__)))).if
                          (((unsupported)).apply)
                        xfile.write (((xgetattr)).apply ((xinstance)) (((xself).xattname)))
                        (((xfile).not).and ((xforce).not)).if
                          (((unsupported)).apply)
                        xdimension_fields_filled.write (((((xself).xwidth_field).and ((((xgetattr)).apply ((xinstance)) (((xself).xwidth_field))).not)).or (((xself).xheight_field).and ((((xgetattr)).apply ((xinstance)) (((xself).xheight_field))).not))).not)
                        ((xdimension_fields_filled).and ((xforce).not)).if
                          (((unsupported)).apply)
                        (xfile).if
                          seq
                            xwidth.write ((xfile).xwidth)
                            xheight.write ((xfile).xheight)
                          seq
                            xwidth.write "None: is there a None literal in the EO language?"
                            xheight.write "None: is there a None literal in the EO language?"
                        ((xself).xwidth_field).if
                          bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xself).xwidth_field)) ((xwidth)))
                        ((xself).xheight_field).if
                          bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xself).xheight_field)) ((xheight)))
                xformfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((((unsupported)).apply ("form_class") (((xforms).xImageField)) ((xkwargs)))))))))