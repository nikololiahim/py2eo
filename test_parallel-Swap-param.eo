memory > xImportError
memory > xpickle
memory > xValueError
memory > xstr
memory > xrepr
memory > xException
memory > xTypeError
memory > xRuntimeError
memory > xRemoteTestResult
memory > xExceptionThatFailsUnpickling
memory > xrange
memory > xSampleFailingSubtest
memory > xPY311
memory > xi
memory > xsuper
memory > xsys
memory > xlen
memory > xSimpleTestCase
[] > test_parallel
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_subtest
        memory > xdummy_test
        memory > xtest_was_successful_one_expected_failure
        memory > x_test_error_exc_info
        memory > xtest_picklable
        memory > xtblib
        memory > xtest_was_successful_one_error
        memory > xtest_was_successful_one_failure
        memory > x__init__
        memory > xtest_add_failing_subtests
        memory > xtest_was_successful_no_events
        memory > xtest_was_successful_one_skip
        memory > xtest_pickle_errors_detection
        memory > xtest_was_successful_one_success
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xtblib.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xException)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xarg]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xtest_subtest.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (2))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) ((xi)))
            (((unsupported)).apply ((xSimpleTestCase)))
              xdummy_test.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply)
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xi)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (1))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                x_test_error_exc_info.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xValueError)))
                        (((unsupported)).apply ((((xValueError)).apply ("woops"))))
                        (((unsupported)).apply (((((xsys).xexc_info)).apply)))
                xtest_was_successful_no_events.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (TRUE))
                xtest_was_successful_one_success.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).xaddSuccess)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (TRUE))
                xtest_was_successful_one_expected_failure.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).xaddExpectedFailure)).apply ("None: is there a None literal in the EO language?") (((((xself).x_test_error_exc_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (TRUE))
                xtest_was_successful_one_skip.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).xaddSkip)).apply ("None: is there a None literal in the EO language?") ("Skipped"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (TRUE))
                xtest_was_successful_one_error.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).xaddError)).apply ("None: is there a None literal in the EO language?") (((((xself).x_test_error_exc_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (FALSE))
                xtest_was_successful_one_failure.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).xaddFailure)).apply ("None: is there a None literal in the EO language?") (((((xself).x_test_error_exc_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (FALSE))
                xtest_picklable.write
                  [xself]
                    memory > xloaded_result
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xRemoteTestResult)).apply)
                        xloaded_result.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xresult)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xevents)) (((xloaded_result).xevents)))
                xtest_pickle_errors_detection.write
                  [xself]
                    memory > xresult
                    memory > xmsg
                    memory > xpicklable_error
                    memory > xnot_unpicklable_error
                    seq > @
                      seq
                        xpicklable_error.write (((xRuntimeError)).apply ("This is fine"))
                        xnot_unpicklable_error.write (((xExceptionThatFailsUnpickling)).apply ("arg"))
                        xresult.write (((xRemoteTestResult)).apply)
                        bogusForceDataize.write ((((xresult).x_confirm_picklable)).apply ((xpicklable_error)))
                        xmsg.write "__init__() missing 1 required positional argument"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write ((((xresult).x_confirm_picklable)).apply ((xnot_unpicklable_error)))
                xtest_add_failing_subtests.write
                  [xself]
                    memory > xevents
                    memory > xevent
                    memory > xsubtest_test
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xresult.write (((xRemoteTestResult)).apply)
                        xsubtest_test.write (((unsupported)).apply ((xSampleFailingSubtest)) ("dummy_test"))
                        (((unsupported)).apply (((xsubtest_test).xrun)) ((xresult)))
                        xevents.write ((xresult).xevents)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xevents)))) (4))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xresult).xwasSuccessful)).apply)) (FALSE))
                        xevent.write (((unsupported)).apply ((xevents)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xevent)) (0))) ("addSubTest"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xevent)) (2))))) (((xPY311).if ("dummy_test (test_runner.test_parallel.SampleFailingSubtest%s) (index=0)".mod ".dummy_test") "")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xevent)) (3))) (1))))) ("AssertionError('0 != 1')"))
                        xevent.write (((unsupported)).apply ((xevents)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xevent)) (3))) (1))))) ("AssertionError('2 != 1')"))