memory > xk
memory > xslen
memory > xListMixin
memory > xlist
memory > xValueError
memory > xstr
memory > xrange
memory > xListMixinTest
memory > xtype
memory > xLen
memory > xargs
memory > xunittest
memory > xn
memory > xkwargs
memory > xTypeError
memory > xUserListB
memory > xenumerate
memory > xIndexError
memory > xUserListA
memory > xrepr
memory > xint
memory > xx
memory > xi
memory > xul
memory > xsuper
memory > xpl
memory > xtuple
memory > xslice
memory > xval
memory > xv
memory > xid
memory > xj
memory > xlen
[] > test_mutable_list
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_get_single_external
        memory > xtest09_iterable_check
        memory > x_set_list
        memory > xtest06_list_methods
        memory > x_mytype2
        memory > xtest01_getslice
        memory > xnextRange
        memory > xlimits_plus
        memory > x__init__
        memory > x__len__
        memory > xtest02_setslice
        memory > xlists_of_len
        memory > x__str__
        memory > xlimit
        memory > x_mytype
        memory > xtest_11_sorting
        memory > x__repr__
        memory > xtest04_get_set_del_single
        memory > xstep_range
        memory > xtest10_checkindex
        memory > xtest03_delslice
        memory > xtest07_allowed_types
        memory > x_set_single
        memory > xtest08_min_length
        memory > xlistType
        memory > xtest05_out_of_range_exceptions
        memory > xtest_12_arithmetic
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xListMixin)))
              seq
                x_mytype2.write (xtuple)
                x__init__.write
                  [xself xi_list]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_list)) (((((xself).x_mytype)).apply ((xi_list)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xlen)).apply (((xself).x_list)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xstr)).apply (((xself).x_list)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xrepr)).apply (((xself).x_list)))))
                x_set_list.write
                  [xself xlength xitems]
                    memory > xitemList
                    seq > @
                      seq
                        xitemList.write ((((unsupported)).apply ("x")).mul (xlength))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xv)))) ((((xenumerate)).apply ((xitems)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xitemList)) ((xi)))) ((xv)))
                        (((unsupported)).apply (((xself).x_list)) (((((xself).x_mytype)).apply ((xitemList)))))
                x_get_single_external.write
                  [xself xindex]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_list)) ((xindex)))))
            (((unsupported)).apply ((xUserListA)))
              seq
                x_mytype.write (xlist)
                x_set_single.write
                  [xself xindex xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_list)) ((xindex)))) ((xvalue)))
            xnextRange.write
              [xlength]
                seq > @
                  seq
                    (((unsupported)).apply (((xnextRange).xstart)) (100))
                    (((unsupported)).apply ((((xrange)).apply (((xnextRange).xstart)) ((((xnextRange).xstart).add (xlength))))))
            (((unsupported)).apply (((xnextRange).xstart)) (0))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xlimit.write 3
                xlistType.write (xUserListA)
                xlists_of_len.write
                  [xself xlength]
                    memory > xpl
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xlength)) ("None: is there a None literal in the EO language?")).if
                          xlength.write ((xself).xlimit)
                        xpl.write (((xlist)).apply ((((xrange)).apply ((xlength)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) (((((xself).xlistType)).apply ((xpl)))))))
                xlimits_plus.write
                  [xself xb]
                    seq > @
                      (((unsupported)).apply ((((xrange)).apply (((((xself).xlimit).neg).sub (xb))) ((((xself).xlimit).add (xb))))))
                xstep_range.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (((1.neg).sub ((xself).xlimit))) (0))))) ((((unsupported)).apply ((((xrange)).apply (1) ((1.add ((xself).xlimit))))))))))
                xtest01_getslice.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (1))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))) (("slice [%d:]".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))) (("slice [:%d]".mod (xi))))
                            (((unsupported)).apply ((xj)) (((((xself).xlimits_plus)).apply (1))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)))))) (("slice [%d:%d]".mod (((unsupported)).apply ((xi)) ((xj))))))
                                (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))) (("slice [%d:%d:%d]".mod (((unsupported)).apply ((xi)) ((xj)) ((xk))))))
                            (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))) (("slice [%d::%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))) (("slice [:%d:%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                        (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xk)))))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xk)))))) (("slice [::%d]".mod (xk))))
                xtest02_setslice.write
                  [xself]
                    memory > xsliceLen
                    memory > xsetfcn
                    memory > xssl
                    seq > @
                      seq
                        unsupported
                        xsetfcn.write
                          [xx xi xj xk xL]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))) ((((xrange)).apply ((xL)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xslen)) ((((xrange)).apply ((((xself).xlimit).add 1)))))
                          seq
                            xssl.write (((xnextRange)).apply ((xslen)))
                            (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ((xssl)))
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((xssl)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("set slice [:]"))
                            (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (1))))
                              seq
                                xssl.write (((xnextRange)).apply ((xslen)))
                                (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))) ((xssl)))
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))) ((xssl)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [%d:]".mod (xi))))
                                xssl.write (((xnextRange)).apply ((xslen)))
                                (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))) ((xssl)))
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))) ((xssl)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [:%d]".mod (xi))))
                                (((unsupported)).apply ((xj)) (((((xself).xlimits_plus)).apply (1))))
                                  seq
                                    xssl.write (((xnextRange)).apply ((xslen)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)))))) ((xssl)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)))))) ((xssl)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [%d:%d]".mod (((unsupported)).apply ((xi)) ((xj))))))
                                    (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                                      seq
                                        xssl.write (((xnextRange)).apply ((((xlen)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))) ((xssl)))
                                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))) ((xssl)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [%d:%d:%d]".mod (((unsupported)).apply ((xi)) ((xj)) ((xk))))))
                                        xsliceLen.write (((xlen)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))))
                                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                                          bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((xi)) ((xj)) ((xk)) (((xsliceLen).add 1)))
                                        ((xsliceLen).greater 2).if
                                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                                            bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((xi)) ((xj)) ((xk)) (((xsliceLen).sub 1)))
                                (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                                  seq
                                    xssl.write (((xnextRange)).apply ((((xlen)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))) ((xssl)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))) ((xssl)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [%d::%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                                    xssl.write (((xnextRange)).apply ((((xlen)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))) ((xssl)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))) ((xssl)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [:%d:%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                            (((unsupported)).apply ((xk)) (((((xself).xstep_range)).apply)))
                              seq
                                xssl.write (((xnextRange)).apply ((((xlen)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xk)))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xk)))))) ((xssl)))
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xk)))))) ((xssl)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set slice [::%d]".mod (xk))))
                xtest03_delslice.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xLen)) ((((xrange)).apply (((xself).xlimit)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("del slice [:]"))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xLen).neg).sub 1)) (((xLen).add 1)))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [%d:]".mod (xi))))
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)))))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)))))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [:%d]".mod (xi))))
                                (((unsupported)).apply ((xj)) ((((xrange)).apply ((((xLen).neg).sub 1)) (((xLen).add 1)))))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)))))))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)))))))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [%d:%d]".mod (((unsupported)).apply ((xi)) ((xj))))))
                                    (((unsupported)).apply ((xk)) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply ((((xLen).neg).sub 1)) (0))))) ((((unsupported)).apply ((((xrange)).apply (1) ((xLen)))))))))
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))))))))
                                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xj)) ((xk)))))))))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [%d:%d:%d]".mod (((unsupported)).apply ((xi)) ((xj)) ((xk))))))
                                (((unsupported)).apply ((xk)) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply ((((xLen).neg).sub 1)) (0))))) ((((unsupported)).apply ((((xrange)).apply (1) ((xLen)))))))))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [:%d:%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xi)) ((xk)))))))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xi)) ((xk)))))))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [%d::%d]".mod (((unsupported)).apply ((xi)) ((xk))))))
                            (((unsupported)).apply ((xk)) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply ((((xLen).neg).sub 1)) (0))))) ((((unsupported)).apply ((((xrange)).apply (1) ((xLen)))))))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((xLen)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply ((xk)))))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply ((xk)))))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del slice [::%d]".mod (xk))))
                xtest04_get_set_del_single.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((xi)))) ((((unsupported)).apply ((xul)) ((xi)))) (("get single item [%d]".mod (xi))))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (0))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xi)))) (100))
                            (((unsupported)).apply ((((unsupported)).apply ((xul)) ((xi)))) (100))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("set single item [%d]".mod (xi))))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (0))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xi)))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("del single item [%d]".mod (xi))))
                xtest05_out_of_range_exceptions.write
                  [xself]
                    memory > xgetfcn
                    memory > xsetfcn
                    memory > xdelfcn
                    seq > @
                      seq
                        unsupported
                        xsetfcn.write
                          [xx xi]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xi)))) (20))
                        xgetfcn.write
                          [xx xi]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xi)))))
                        xdelfcn.write
                          [xx xi]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xi)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (((1.neg).sub ((xself).xlimit))) (((xself).xlimit)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                              bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((xi)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                              bogusForceDataize.write (((xgetfcn)).apply ((xul)) ((xi)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                              bogusForceDataize.write (((xdelfcn)).apply ((xul)) ((xi)))
                xtest06_list_methods.write
                  [xself]
                    memory > xremovefcn
                    memory > xindexfcn
                    memory > xpopfcn
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        bogusForceDataize.write ((((xpl).xappend)).apply (40))
                        bogusForceDataize.write ((((xul).xappend)).apply (40))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("append"))
                        bogusForceDataize.write ((((xpl).xextend)).apply ((((xrange)).apply (50) (55))))
                        bogusForceDataize.write ((((xul).xextend)).apply ((((xrange)).apply (50) (55))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("extend"))
                        bogusForceDataize.write ((((xpl).xreverse)).apply)
                        bogusForceDataize.write ((((xul).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("reverse"))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (1))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            bogusForceDataize.write ((((xpl).xinsert)).apply ((xi)) (50))
                            bogusForceDataize.write ((((xul).xinsert)).apply ((xi)) (50))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("insert at %d".mod (xi))))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (0))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpl).xpop)).apply ((xi)))) (((((xul).xpop)).apply ((xi)))) (("popped value at %d".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("after pop at %d".mod (xi))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpl).xpop)).apply)) (((((xul).xpop)).apply ((xi)))) ("popped value"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("after pop"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        xpopfcn.write
                          [xx xi]
                            seq > @
                              bogusForceDataize.write ((((xx).xpop)).apply ((xi)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          bogusForceDataize.write (((xpopfcn)).apply ((xul)) (((xself).xlimit)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          bogusForceDataize.write (((xpopfcn)).apply ((xul)) (((1.neg).sub ((xself).xlimit))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xval)) ((((xrange)).apply (((xself).xlimit)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpl).xindex)).apply ((xval)))) (((((xul).xindex)).apply ((xval)))) (("index of %d".mod (xval))))
                        (((unsupported)).apply ((xval)) (((((xself).xlimits_plus)).apply (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpl).xcount)).apply ((xval)))) (((((xul).xcount)).apply ((xval)))) (("count %d".mod (xval))))
                        (((unsupported)).apply ((xval)) ((((xrange)).apply (((xself).xlimit)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            bogusForceDataize.write ((((xpl).xremove)).apply ((xval)))
                            bogusForceDataize.write ((((xul).xremove)).apply ((xval)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("after remove val %d".mod (xval))))
                        xindexfcn.write
                          [xx xv]
                            seq > @
                              (((unsupported)).apply (((((xx).xindex)).apply ((xv)))))
                        xremovefcn.write
                          [xx xv]
                            seq > @
                              (((unsupported)).apply (((((xx).xremove)).apply ((xv)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xindexfcn)).apply ((xul)) (40))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xremovefcn)).apply ((xul)) (40))
                xtest07_allowed_types.write
                  [xself]
                    memory > xsetfcn
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply (((xul).x_allowed)) ((xint)))
                        (((unsupported)).apply ((((unsupported)).apply ((xul)) (1))) (50))
                        (((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (60) (70) (80))))
                        xsetfcn.write
                          [xx xi xv]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xi)))) ((xv)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xsetfcn)).apply ((xul)) (2) ("hello"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((((xslice)).apply (0) (3) (2))) ((((unsupported)).apply ("hello") ("goodbye"))))
                xtest08_min_length.write
                  [xself]
                    memory > xsetfcn
                    memory > xdelfcn
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply (5))))
                        (((unsupported)).apply (((xul).x_minlength)) (3))
                        xdelfcn.write
                          [xx xi]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xi)))))))))))
                        xsetfcn.write
                          [xx xi]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xi)))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((((xlen)).apply ((xul))).sub ((xul).x_minlength)).add 1)) ((((xlen)).apply ((xul)))))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write (((xdelfcn)).apply ((xul)) ((xi)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((xi)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xul)) ((((unsupported)).apply (((((xlen)).apply ((xul))).sub ((xul).x_minlength))))))))))))
                        (((unsupported)).apply (((xul).x_maxlength)) (4))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) ((((xul).x_maxlength).sub (((xlen)).apply ((xul))))))))
                          bogusForceDataize.write ((((xul).xappend)).apply ((xi)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xul).xappend)).apply (10))
                xtest09_iterable_check.write
                  [xself]
                    memory > xsetfcn
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply ((((xself).xlimit).add 1)))))
                        xsetfcn.write
                          [xx xi xv]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xi)))) ((xv)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xsetfcn)).apply ((xul)) ((((xslice)).apply (0) (3) (2))) (2))
                xtest10_checkindex.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        (((unsupported)).apply ((xi)) (((((xself).xlimits_plus)).apply (0))))
                          ((xi).less 0).if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xul).x_checkindex)).apply ((xi)))) (((xi).add ((xself).xlimit))) ("_checkindex(neg index)"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xul).x_checkindex)).apply ((xi)))) ((xi)) ("_checkindex(pos index)"))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (((((xself).xlimit).neg).sub 1)) (((xself).xlimit)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                            bogusForceDataize.write ((((xul).x_checkindex)).apply ((xi)))
                xtest_11_sorting.write
                  [xself]
                    memory > xmid
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        bogusForceDataize.write ((((xpl).xinsert)).apply (0) (((((xpl).xpop)).apply)))
                        bogusForceDataize.write ((((xul).xinsert)).apply (0) (((((xul).xpop)).apply)))
                        bogusForceDataize.write ((((xpl).xsort)).apply)
                        bogusForceDataize.write ((((xul).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("sort"))
                        xmid.write (((unsupported)).apply ((xpl)) ((((unsupported)).apply ((((xlen)).apply ((xpl)))) (2))))
                        (((unsupported)).apply (((xpl).xsort)) ((((unsupported)).apply ((((unsupported)).apply (((xmid).sub (xx))) (2))))))
                        (((unsupported)).apply (((xul).xsort)) ((((unsupported)).apply ((((unsupported)).apply (((xmid).sub (xx))) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("sort w/ key"))
                        bogusForceDataize.write ((((xpl).xinsert)).apply (0) (((((xpl).xpop)).apply)))
                        bogusForceDataize.write ((((xul).xinsert)).apply (0) (((((xul).xpop)).apply)))
                        (((unsupported)).apply (((xpl).xsort)) (TRUE))
                        (((unsupported)).apply (((xul).xsort)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("sort w/ reverse"))
                        xmid.write (((unsupported)).apply ((xpl)) ((((unsupported)).apply ((((xlen)).apply ((xpl)))) (2))))
                        (((unsupported)).apply (((xpl).xsort)) ((((unsupported)).apply ((((unsupported)).apply (((xmid).sub (xx))) (2))))))
                        (((unsupported)).apply (((xul).xsort)) ((((unsupported)).apply ((((unsupported)).apply (((xmid).sub (xx))) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("sort w/ key"))
                xtest_12_arithmetic.write
                  [xself]
                    memory > xobjid
                    memory > xal
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        xal.write (((xlist)).apply ((((xrange)).apply (10) (14))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xpl).add (xal))))) ((((xlist)).apply (((xul).add (xal))))) ("add"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xul)))) ((((xtype)).apply (((xul).add (xal))))) ("type of add result"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xal).add (xpl))))) ((((xlist)).apply (((xal).add (xul))))) ("radd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xal)))) ((((xtype)).apply (((xal).add (xul))))) ("type of radd result"))
                        xobjid.write (((xid)).apply ((xul)))
                        (((unsupported)).apply ((xpl)) ((xal)))
                        (((unsupported)).apply ((xul)) ((xal)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) ("in-place add"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobjid)) ((((xid)).apply ((xul)))) ("in-place add id"))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((1.neg)) (0) (1) (3))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xpl).mul (xn))))) ((((xlist)).apply (((xul).mul (xn))))) (("mul by %d".mod (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xul)))) ((((xtype)).apply (((xul).mul (xn))))) (("type of mul by %d result".mod (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xn).mul (xpl))))) ((((xlist)).apply (((xn).mul (xul))))) (("rmul by %d".mod (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xul)))) ((((xtype)).apply (((xn).mul (xul))))) (("type of rmul by %d result".mod (xn))))
                            xobjid.write (((xid)).apply ((xul)))
                            (((unsupported)).apply ((xpl)) ((xn)))
                            (((unsupported)).apply ((xul)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xul)) ((((unsupported)).apply)))) (("in-place mul by %d".mod (xn))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobjid)) ((((xid)).apply ((xul)))) (("in-place mul by %d id".mod (xn))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ((xul)))) (((((xself).xlists_of_len)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((xul)) ("cmp for equal"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xul)) (((xpl).add (((unsupported)).apply (2)))) ("cmp for not equal"))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xpl)) ((xul)) ("cmp for gte self"))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xpl)) ((xul)) ("cmp for lte self"))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xul)) ((xpl)) ("cmp for self gte"))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xul)) ((xpl)) ("cmp for self lte"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xpl).add (((unsupported)).apply (5)))) ((xul)) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xpl).add (((unsupported)).apply (5)))) ((xul)) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xpl)) (((xul).add (((unsupported)).apply (2)))) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xpl)) (((xul).add (((unsupported)).apply (2)))) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xul).add (((unsupported)).apply (5)))) ((xpl)) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xul).add (((unsupported)).apply (5)))) ((xpl)) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xul)) (((xpl).add (((unsupported)).apply (2)))) ("cmp"))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xul)) (((xpl).add (((unsupported)).apply (2)))) ("cmp"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) (1))) (20))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xpl)) ((xul)) ("cmp for gt self"))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xul)) ((xpl)) ("cmp for self lt"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) (1))) ((20.neg)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xpl)) ((xul)) ("cmp for lt self"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xul)) ((xpl)) ("cmp for gt self"))
            (((unsupported)).apply ((xListMixinTest)))
              xlistType.write (xUserListB)