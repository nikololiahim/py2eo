memory > xSuperBase
memory > xRuntimeError
memory > xpyvectorcall_call
memory > xstr
memory > xmax
memory > xhasattr
memory > xsum
memory > xkwargs
memory > xmin
memory > xImportError
memory > xdatetime
memory > xexpected
memory > xlist
memory > xMethodType
memory > xfunc
memory > xrange
memory > xpyobject_vectorcall
memory > x_testcapi
memory > xMethodDescriptorOverridden
memory > xcollections
memory > xdivmod
memory > xkw
memory > xprint
memory > xtype
memory > xrepr
memory > xint
memory > xcompile
memory > xstruct
memory > xsuper
memory > xbool
memory > xglobals
memory > xtuple
memory > xgc
memory > xargs
memory > xitertools
memory > xdir
memory > xIntWithDict
memory > xgetattr
memory > xid
memory > xpartial
memory > xcpython_only
memory > xinput
memory > xMethodDescriptorHeap
memory > xunittest
memory > xPythonClass
memory > xstaticmethod
memory > xnext
memory > xobject
memory > xMethodDescriptorSuper
memory > xfunctools
memory > xlen
memory > xdict
memory > xclassmethod
memory > xTypeError
memory > x__name__
[] > test_call
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xPy_TPFLAGS_HAVE_VECTORCALL
        memory > xtest_varargs9_kw
        memory > xtest_oldargs0_2_kw
        memory > xtest_varargs0_ext
        memory > xtest_vectorcall_flag
        memory > xtest_oldargs0_0_ext
        memory > xtest_oldargs0_2
        memory > xcheck_result
        memory > xtest_varargs13_kw
        memory > xtest_varargs1_kw
        memory > xCALLS_POSARGS
        memory > xtest_oldargs0_2_ext
        memory > xtest_oldargs1_2
        memory > xtest_oldargs1_2_kw
        memory > xpyfunc_noarg
        memory > xtest_oldargs1_0_ext
        memory > xtest_fastcall
        memory > xtest_varargs5_kw
        memory > xtest_vectorcall
        memory > xstatic_method
        memory > xtest_varargs3_kw
        memory > xCALLS_KWARGS
        memory > xtest_varargs15_kw
        memory > xtest_varargs4_kw
        memory > xPy_TPFLAGS_METHOD_DESCRIPTOR
        memory > xtest_varargs2
        memory > xmethod_noarg
        memory > xtest_varargs8_kw
        memory > xtest_varargs1_ext
        memory > xtest_oldargs1_0
        memory > xtest_fastcall_clearing_dict
        memory > xtest_oldargs0_1
        memory > xtest_oldargs1_2_ext
        memory > xtest_oldargs1_1_ext
        memory > xtest_varargs11_kw
        memory > xtest_oldargs1_0_kw
        memory > xtest_varargs2max
        memory > xtest_varargs6_kw
        memory > xtest_varargs14_kw
        memory > xtest_varargs2min
        memory > xtest_oldargs1_1_kw
        memory > xtest_oldargs0_0_kw
        memory > xtest_varargs16_kw
        memory > xtest_varargs1
        memory > xtest_vectorcall_dict
        memory > xpyfunc
        memory > xtest_oldargs0_0
        memory > xtestfunction_kw
        memory > xtest_oldargs0_1_ext
        memory > xclass_method
        memory > xtest_vectorcall_override
        memory > xtest_varargs3
        memory > xtest_varargs0
        memory > xtest_oldargs0_1_kw
        memory > xtestfunction
        memory > x_testcapi2
        memory > xtest_varargs12_kw
        memory > xtest_varargs10_kw
        memory > xPYTHON_INSTANCE
        memory > xtest_varargs1min
        memory > xtest_varargs7_kw
        memory > xIGNORE_RESULT
        memory > xtest_varargs2_ext
        memory > xtest_method_descriptor_flag
        memory > xtest_oldargs1_1
        memory > xtest_varargs2_kw
        memory > xtest_varargs17_kw
        memory > xmethod
        memory > xtest_varargs1max
        memory > xtest_kwargs_order
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_testcapi2.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_kwargs_order.write
                [xself]
                  memory > xexpected
                  memory > xres
                  memory > xfn
                  memory > xod
                  seq > @
                    seq
                      xod.write ((((xcollections).xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))))
                      bogusForceDataize.write ((((xod).xmove_to_end)).apply ("a"))
                      xexpected.write (((xlist)).apply (((((xod).xitems)).apply)))
                      xfn.write
                        []
                          seq > @
                            (((unsupported)).apply)
                              (((unsupported)).apply ((xkw)))
                      xres.write (((xfn)).apply ((((unsupported)).apply ((xod)))))
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xres)) ((xdict)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xres).xitems)).apply)))) ((xexpected)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_varargs0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).x__contains__)))
                xtest_varargs1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).x__contains__)).apply (0))
                xtest_varargs2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).x__contains__)) (0) (1))
                xtest_varargs0_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).x__contains__)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_varargs1_ext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).x__contains__)).apply ((((unsupported)).apply ((((unsupported)).apply (0))))))
                xtest_varargs2_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).x__contains__)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_varargs1_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).x__contains__)) (2))
                xtest_varargs2_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).x__contains__)) (2) (2))
                xtest_oldargs0_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).xkeys)).apply)
                xtest_oldargs0_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xkeys)) (0))
                xtest_oldargs0_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xkeys)) (0) (1))
                xtest_oldargs0_0_ext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).xkeys)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_oldargs0_1_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).xkeys)).apply ((((unsupported)).apply ((((unsupported)).apply (0))))))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_oldargs0_2_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).xkeys)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_oldargs0_0_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        (((unsupported)).apply (((((unsupported)).apply).xkeys)) (2))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_oldargs0_1_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).xkeys)) (2))
                xtest_oldargs0_2_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).xkeys)) (2) (2))
                xtest_oldargs1_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xcount)))
                xtest_oldargs1_1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).xcount)).apply (1))
                xtest_oldargs1_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xcount)) (1) (2))
                xtest_oldargs1_0_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).xcount)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_oldargs1_1_ext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply).xcount)).apply ((((unsupported)).apply ((((unsupported)).apply (1))))))
                xtest_oldargs1_2_ext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((((unsupported)).apply).xcount)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        (((unsupported)).apply ((xRuntimeError)))
                xtest_oldargs1_0_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).xcount)) (2))
                xtest_oldargs1_1_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).xcount)) ((((unsupported)).apply)) (2))
                xtest_oldargs1_2_kw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((((unsupported)).apply).xcount)) (2) (2))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xcpython_only)))
              seq
                xtest_varargs0.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "__contains__() takes exactly one argument (0 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).x__contains__)))
                xtest_varargs2.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "__contains__() takes exactly one argument (2 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).x__contains__)) (0) (1))
                xtest_varargs3.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^from_bytes() takes exactly 2 positional arguments (3 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((xint).xfrom_bytes)) ("a") ("little") (FALSE))
                xtest_varargs1min.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "get expected at least 1 argument, got 0"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xget)))
                        xmsg.write "expected 1 argument, got 0"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).x__delattr__)))
                xtest_varargs2min.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "getattr expected at least 2 arguments, got 0"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) ((xgetattr)))
                xtest_varargs1max.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "input expected at most 1 argument, got 2"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) ((xinput)) (1) (2))
                xtest_varargs2max.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "get expected at most 2 arguments, got 3"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xget)) (1) (2) (3))
                xtest_varargs1_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "__contains__() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).x__contains__)) (2))
                xtest_varargs2_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "__contains__() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).x__contains__)) (2) (2))
                xtest_varargs3_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "bool() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xbool)) (2))
                xtest_varargs4_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^index() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xindex)) (2))
                xtest_varargs5_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^hasattr() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xhasattr)) (2))
                xtest_varargs6_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^getattr() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xgetattr)) (2))
                xtest_varargs7_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^next() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xnext)) (2))
                xtest_varargs8_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^pack() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((xstruct).xpack)) (2))
                xtest_varargs9_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^pack_into() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((xstruct).xpack_into)) (2))
                xtest_varargs10_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^index() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((((((xcollections).xdeque)).apply).xindex)) (2))
                xtest_varargs11_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^pack() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((((xstruct).xStruct).xpack)) (((((xstruct).xStruct)).apply (""))) (2))
                xtest_varargs12_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^staticmethod() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xstaticmethod)) ((xid)))
                xtest_varargs13_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^classmethod() takes no keyword arguments$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xclassmethod)) ((xid)))
                xtest_varargs14_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^product() takes at most 1 keyword argument (2 given)$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((xitertools).xproduct)) (0) (1) (2))
                xtest_varargs15_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^ImportError() takes at most 2 keyword arguments (3 given)$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xImportError)) (0) (1) (2) (3))
                xtest_varargs16_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^min() takes at most 2 keyword arguments (3 given)$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xmin)) (0) (1) (2) (3))
                xtest_varargs17_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "^print() takes at most 4 keyword arguments (5 given)$"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) ((xprint)) (0) (1) (2) (3) (4) (5))
                xtest_oldargs0_1.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "keys() takes no arguments (1 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xkeys)) (0))
                xtest_oldargs0_2.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "keys() takes no arguments (2 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xkeys)) (0) (1))
                xtest_oldargs0_1_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "keys() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xkeys)) (2))
                xtest_oldargs0_2_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "keys() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xkeys)) (2) (2))
                xtest_oldargs1_0.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "count() takes exactly one argument (0 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xcount)))
                xtest_oldargs1_2.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "count() takes exactly one argument (2 given)"
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xcount)) (1) (2))
                xtest_oldargs1_0_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "count() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xcount)) (2))
                xtest_oldargs1_1_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "count() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xcount)) ((((unsupported)).apply)) (2))
                xtest_oldargs1_2_kw.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "count() takes no keyword arguments"
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ((xmsg)) (((((unsupported)).apply).xcount)) (2) (2))
            xpyfunc.write
              [xarg1 xarg2]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xarg1)) ((xarg2)))))
            xpyfunc_noarg.write
              []
                seq > @
                  (((unsupported)).apply ("noarg"))
            (((unsupported)).apply)
              seq
                xmethod.write
                  [xself xarg1 xarg2]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xarg1)) ((xarg2)))))
                xmethod_noarg.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("noarg"))
                xclass_method.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("classmethod"))
                xstatic_method.write
                  []
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("staticmethod"))
            xPYTHON_INSTANCE.write (((xPythonClass)).apply)
            xIGNORE_RESULT.write (((xobject)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)) ((xcpython_only)))
              seq
                xCALLS_POSARGS.write (((unsupported)).apply ((((unsupported)).apply ((xpyfunc)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xpyfunc_noarg)) ((((unsupported)).apply)) ("noarg"))) ((((unsupported)).apply (((xPythonClass).xclass_method)) ((((unsupported)).apply)) ("classmethod"))) ((((unsupported)).apply (((xPythonClass).xstatic_method)) ((((unsupported)).apply)) ("staticmethod"))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xmethod)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xmethod_noarg)) ((((unsupported)).apply)) ("noarg"))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xclass_method)) ((((unsupported)).apply)) ("classmethod"))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xstatic_method)) ((((unsupported)).apply)) ("staticmethod"))) ((((unsupported)).apply ((xglobals)) ((((unsupported)).apply)) ((xIGNORE_RESULT)))) ((((unsupported)).apply ((xid)) ((((unsupported)).apply ("hello"))) ((xIGNORE_RESULT)))) ((((unsupported)).apply ((xdir)) ((((unsupported)).apply (1))) ((xIGNORE_RESULT)))) ((((unsupported)).apply ((xmin)) ((((unsupported)).apply (5) (9))) (5))) ((((unsupported)).apply ((xdivmod)) ((((unsupported)).apply (1000) (33))) ((((unsupported)).apply (30) (10))))) ((((unsupported)).apply (((xint).xfrom_bytes)) ((((unsupported)).apply ("x01x00") ("little"))) (1))) ((((unsupported)).apply ((((xdatetime).xdatetime).xnow)) ((((unsupported)).apply)) ((xIGNORE_RESULT)))))
                xCALLS_KWARGS.write (((unsupported)).apply ((((unsupported)).apply ((xpyfunc)) ((((unsupported)).apply (1))) ((((unsupported)).apply ("arg2") (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xpyfunc)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg1") (1) ("arg2") (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xmethod)) ((((unsupported)).apply (1))) ((((unsupported)).apply ("arg2") (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((xPYTHON_INSTANCE).xmethod)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg1") (1) ("arg2") (2))) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xmax)) ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ("default") (9))) (9))) ((((unsupported)).apply (((xint).xfrom_bytes)) ((((unsupported)).apply ("x01x00"))) ((((unsupported)).apply ("byteorder") ("little"))) (1))) ((((unsupported)).apply (((xint).xfrom_bytes)) ((((unsupported)).apply)) ((((unsupported)).apply ("bytes") ("x01x00") ("byteorder") ("little"))) (1))))
                xcheck_result.write
                  [xself xresult xexpected]
                    seq > @
                      seq
                        (((unsupported)).apply ((xexpected)) ((xIGNORE_RESULT))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)))
                xtest_fastcall.write
                  [xself]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xexpected)))) (((xself).xCALLS_POSARGS)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunc)) ((xargs)))))
                          seq
                            xresult.write ((((x_testcapi).xpyobject_fastcall)).apply ((xfunc)) ((xargs)))
                            bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                            ((xargs).not).if
                              seq
                                xresult.write ((((x_testcapi).xpyobject_fastcall)).apply ((xfunc)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                xtest_vectorcall_dict.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xexpected)))) (((xself).xCALLS_POSARGS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunc)) ((xargs)))))
                            seq
                              xresult.write ((((x_testcapi).xpyobject_fastcalldict)).apply ((xfunc)) ((xargs)) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                              xresult.write ((((x_testcapi).xpyobject_fastcalldict)).apply ((xfunc)) ((xargs)) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                              ((xargs).not).if
                                seq
                                  xresult.write ((((x_testcapi).xpyobject_fastcalldict)).apply ((xfunc)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                                  bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                                  xresult.write ((((x_testcapi).xpyobject_fastcalldict)).apply ((xfunc)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xkwargs)) ((xexpected)))) (((xself).xCALLS_KWARGS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunc)) ((xargs)) ((xkwargs)))))
                            seq
                              xresult.write ((((x_testcapi).xpyobject_fastcalldict)).apply ((xfunc)) ((xargs)) ((xkwargs)))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                xtest_vectorcall.write
                  [xself]
                    memory > xresult
                    memory > xargs
                    memory > xkwnames
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xexpected)))) (((xself).xCALLS_POSARGS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunc)) ((xargs)))))
                            seq
                              xresult.write ((((x_testcapi).xpyobject_vectorcall)).apply ((xfunc)) ((xargs)) ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                              xresult.write ((((x_testcapi).xpyobject_vectorcall)).apply ((xfunc)) ((xargs)) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                              ((xargs).not).if
                                seq
                                  xresult.write ((((x_testcapi).xpyobject_vectorcall)).apply ((xfunc)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                                  bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                                  xresult.write ((((x_testcapi).xpyobject_vectorcall)).apply ((xfunc)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                                  bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xkwargs)) ((xexpected)))) (((xself).xCALLS_KWARGS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunc)) ((xargs)) ((xkwargs)))))
                            seq
                              xkwnames.write (((xtuple)).apply (((((xkwargs).xkeys)).apply)))
                              xargs.write ((xargs).add (((xtuple)).apply (((((xkwargs).xvalues)).apply))))
                              xresult.write ((((x_testcapi).xpyobject_vectorcall)).apply ((xfunc)) ((xargs)) ((xkwnames)))
                              bogusForceDataize.write ((((xself).xcheck_result)).apply ((xresult)) ((xexpected)))
                xtest_fastcall_clearing_dict.write
                  [xself]
                    memory > x__slots__
                    memory > x__init__
                    memory > xx
                    memory > x__index__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__slots__.write (((unsupported)).apply ("kwargs"))
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xkwargs)) ((xkwargs)))
                            x__index__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write (((((xself).xkwargs).xclear)).apply)
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                                    (((unsupported)).apply (0))
                        xx.write (((unsupported)).apply ((xIntWithDict)) ((((xIntWithDict)).apply)))
                        bogusForceDataize.write (((xcompile)).apply ("pass") ("") ("exec") ((xx)) ((((unsupported)).apply (((xx).xkwargs)))))
            xPy_TPFLAGS_HAVE_VECTORCALL.write (((unsupported)).apply (1) (11))
            xPy_TPFLAGS_METHOD_DESCRIPTOR.write (((unsupported)).apply (1) (17))
            xtestfunction.write
              [xself]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xself)))
            xtestfunction_kw.write
              [xself xkw]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xself)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_method_descriptor_flag.write
                  [xself]
                    memory > xcached
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcached.write ((((((xfunctools).xlru_cache)).apply (1))).apply ((xtestfunction)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xtype)).apply ((xrepr))).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xtype)).apply (((xlist).xappend))).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xtype)).apply (((xlist).x__add__))).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xtype)).apply ((xtestfunction))).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xtype)).apply ((xcached))).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xMethodDescriptorBase).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xMethodDescriptorDerived).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((x_testcapi).xMethodDescriptorNopGet).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                        (((unsupported)).apply (((x_testcapi).xMethodDescriptorBase)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xMethodDescriptorHeap).x__flags__).and (xPy_TPFLAGS_METHOD_DESCRIPTOR))))
                xtest_vectorcall_flag.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xMethodDescriptorBase).x__flags__).and (xPy_TPFLAGS_HAVE_VECTORCALL))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xMethodDescriptorDerived).x__flags__).and (xPy_TPFLAGS_HAVE_VECTORCALL))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((x_testcapi).xMethodDescriptorNopGet).x__flags__).and (xPy_TPFLAGS_HAVE_VECTORCALL))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xMethodDescriptor2).x__flags__).and (xPy_TPFLAGS_HAVE_VECTORCALL))))
                        (((unsupported)).apply (((x_testcapi).xMethodDescriptorBase)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xMethodDescriptorHeap).x__flags__).and (xPy_TPFLAGS_HAVE_VECTORCALL))))
                xtest_vectorcall_override.write
                  [xself]
                    memory > xargs
                    memory > xf
                    seq > @
                      seq
                        xargs.write (((xtuple)).apply ((((xrange)).apply (5))))
                        xf.write ((((x_testcapi).xMethodDescriptorNopGet)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xf)).apply ((((unsupported)).apply ((xargs)))))) ((xargs)))
                xtest_vectorcall.write
                  [xself]
                    memory > xargs1
                    memory > x__call__
                    memory > xmeth
                    memory > xcalls
                    memory > xwrapped
                    memory > xvectorcall
                    seq > @
                      seq
                        xcalls.write (((unsupported)).apply ((((unsupported)).apply ((xlen)) ((((unsupported)).apply ((((xrange)).apply (42))))) ((((unsupported)).apply)) (42))) ((((unsupported)).apply (((xlist).xappend)) ((((unsupported)).apply ((((unsupported)).apply)) (0))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((unsupported)).apply).xappend)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xsum)) ((((unsupported)).apply ((((unsupported)).apply (36))))) ((((unsupported)).apply ("start") (6))) (42))) ((((unsupported)).apply ((xtestfunction)) ((((unsupported)).apply (42))) ((((unsupported)).apply)) (42))) ((((unsupported)).apply ((xtestfunction_kw)) ((((unsupported)).apply (42))) ((((unsupported)).apply ("kw") ("None: is there a None literal in the EO language?"))) (42))) ((((unsupported)).apply (((((x_testcapi).xMethodDescriptorBase)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) (TRUE))) ((((unsupported)).apply (((((x_testcapi).xMethodDescriptorDerived)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) (TRUE))) ((((unsupported)).apply (((((x_testcapi).xMethodDescriptor2)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) (FALSE))))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xvectorcall.write
                          [xfunc xargs xkwargs]
                            memory > xkwnames
                            seq > @
                              seq
                                xargs.write (((unsupported)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply (((((xkwargs).xvalues)).apply)))))
                                xkwnames.write (((xtuple)).apply ((xkwargs)))
                                (((unsupported)).apply ((((xpyobject_vectorcall)).apply ((xfunc)) ((xargs)) ((xkwnames)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xkwargs)) ((xexpected)))) ((xcalls)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xstr)).apply ((xfunc)))))))
                            seq
                              ((xkwargs).not).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xpyvectorcall_call)).apply ((xfunc)) ((xargs)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xpyvectorcall_call)).apply ((xfunc)) ((xargs)) ((xkwargs)))))
                        (((unsupported)).apply (((x_testcapi).xMethodDescriptorBase)))
                        (((unsupported)).apply (((x_testcapi).xMethodDescriptorBase)))
                          x__call__.write
                            [xself xn]
                              seq > @
                                (((unsupported)).apply ("new"))
                        (((unsupported)).apply)
                          x__call__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((((((xsuper)).apply).x__call__)).apply ((((unsupported)).apply ((xargs)))))))
                        (((unsupported)).apply ((xSuperBase)) (((x_testcapi).xMethodDescriptorBase)))
                          x__call__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((((((xsuper)).apply).x__call__)).apply ((((unsupported)).apply ((xargs)))))))
                        (((unsupported)).apply ((xcalls)) ((((unsupported)).apply ((((unsupported)).apply (((xdict).xupdate)) ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ("key") (TRUE))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((((unsupported)).apply).xupdate)) ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ("key") (TRUE))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xMethodDescriptorHeap)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) (TRUE))) ((((unsupported)).apply ((((xMethodDescriptorOverridden)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) ("new"))) ((((unsupported)).apply ((((xMethodDescriptorSuper)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply)) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xargs)) ((xkwargs)) ((xexpected)))) ((xcalls)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xstr)).apply ((xfunc)))))))
                            seq
                              xargs1.write (((unsupported)).apply ((xargs)) ((((unsupported)).apply (1))))
                              xmeth.write (((xMethodType)).apply ((xfunc)) ((((unsupported)).apply ((xargs)) (0))))
                              xwrapped.write (((xpartial)).apply ((xfunc)))
                              ((xkwargs).not).if
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xfunc)).apply ((((unsupported)).apply ((xargs)))))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xpyobject_vectorcall)).apply ((xfunc)) ((xargs)) ("None: is there a None literal in the EO language?"))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xmeth)).apply ((((unsupported)).apply ((xargs1)))))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xwrapped)).apply ((((unsupported)).apply ((xargs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xvectorcall)).apply ((xfunc)) ((xargs)) ((xkwargs)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xmeth)).apply ((((unsupported)).apply ((xargs1)))) ((((unsupported)).apply ((xkwargs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xwrapped)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)