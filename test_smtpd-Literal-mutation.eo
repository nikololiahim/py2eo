memory > xValueError
memory > xsocket
memory > xchar
memory > xSMTPDChannelTest
memory > xException
memory > xDeprecationWarning
memory > xargs
memory > xunittest
memory > xasyncore
memory > xaddr
memory > xkwargs
memory > x__name__
memory > xsmtpd
memory > xio
memory > xconn
memory > xNotImplementedError
memory > xBrokenDummyServer
memory > xDummyDispatcherBroken
memory > xDummyServer
memory > xtextwrap
memory > xkw
memory > xmock_socket
memory > xs
memory > xsupport
memory > xline
memory > xmail_parameters
memory > xlen
[] > test_smtpd
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xwrite_line
        memory > xtest_HELO_RSET
        memory > xtest_unknown_command
        memory > xtest_QUIT
        memory > xtest_EHLO_bad_syntax
        memory > xtest_process_message_with_decode_data_false
        memory > xtest_MAIL_quoted_localpart
        memory > xlisten
        memory > xtest_MAIL_syntax_HELO
        memory > xtest_no_HELO_DATA
        memory > xtest_MAIL_RCPT_unknown_parameters
        memory > xtest_VRFY_syntax
        memory > xtest__all__
        memory > xtest_decode_data_and_enable_SMTPUTF8_raises
        memory > xsend_data
        memory > xtest_with_decode_data_false
        memory > xtest_with_enable_smtputf8_true
        memory > xtest_multiple_RCPT
        memory > xtest_RSET
        memory > xtest_utf8_data
        memory > xtest_MAIL_size_parameter
        memory > xtest_no_HELO_MAIL
        memory > xtest_HELO
        memory > xtest_MAIL_invalid_size_parameter
        memory > xtest_data_limit_dialog
        memory > xtest_NOOP
        memory > xtest_MAIL_command_rejects_SMTPUTF8_by_default
        memory > xtest_MAIL_quoted_localpart_with_size_no_angles
        memory > xtest_EHLO_duplicate
        memory > xtest_nothing_accepted
        memory > xtest_data_transparency_section_4_5_2
        memory > xtest_command_too_long
        memory > xtest_QUIT_arg_ignored
        memory > xtest_RCPT_syntax_HELO
        memory > xtest_broken_connect
        memory > xtest_process_SMTPUTF8_message_with_enable_SMTPUTF8_true
        memory > xtest_MAIL_command_limit_extended_with_SIZE
        memory > xtest_HELP_command_unknown
        memory > xtest_process_message_with_enable_SMTPUTF8_true
        memory > xtest_extended_MAIL_allows_space_after_colon
        memory > xtest_params_rejected
        memory > xtest_MAIL_quoted_localpart_no_angles
        memory > xtest_server_accept
        memory > xtest_with_decode_data_true
        memory > xtest_missing_data
        memory > xtest_ascii_data
        memory > xtest_MAIL_command_accepts_SMTPUTF8_when_announced
        memory > xtest_manual_status
        memory > xsetUp
        memory > xtest_HELP
        memory > xtest_HELO_bad_syntax
        memory > xtest_no_HELO_RCPT
        memory > xtest_attribute_deprecations
        memory > xtest_VRFY
        memory > xtest_process_message_unimplemented
        memory > xtest_need_RCPT
        memory > xtest_NOOP_bad_syntax
        memory > xtest_EXPN_not_implemented
        memory > xtest_nested_MAIL
        memory > xtest_MAIL_quoted_localpart_with_size
        memory > xtest_MAIL_missing_address
        memory > xtest_MAIL_size_parameter_larger_than_default_data_size_limit
        memory > xtest_data_dialog
        memory > xtest_socket_uses_IPv4
        memory > xtest_MAIL_allows_space_after_colon
        memory > xtest_data_limit_dialog_too_much_data
        memory > xtest_RCPT_lowercase_to_OK
        memory > x__init__
        memory > xtest_HELO_parameter_rejected_when_extensions_not_enabled
        memory > xtest_HELO_NOOP
        memory > xprocess_message
        memory > xtest_data_longer_than_default_data_size_limit
        memory > xtest_process_smtputf8_message
        memory > xtest_socket_uses_IPv6
        memory > xtest_process_message_with_decode_data_true
        memory > xtest_HELO_duplicate
        memory > xtest_need_MAIL
        memory > xtest_EHLO_HELO_duplicate
        memory > xerror_response
        memory > xtest_RSET_syntax
        memory > xtest_MAIL_syntax_EHLO
        memory > xtest_DATA_syntax
        memory > xtest_HELO_QUIT
        memory > xtest_MAIL_chevrons
        memory > xtest_RCPT_syntax_EHLO
        memory > xtest_MAIL_command_limit_extended_with_SIZE_and_SMTPUTF8
        memory > xtest_HELP_command
        memory > xtearDown
        memory > xtest_multiple_emails_with_extended_command_length
        memory > xtest_MAIL_empty_chevrons
        memory > xtest_bad_state
        memory > xtest_EHLO
        memory > xtest_HELO_EHLO_duplicate
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xsmtpd).xSMTPServer)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xsmtpd).xSMTPServer).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xmessages)) ((((unsupported)).apply)))
                        ((xself).x_decode_data).if
                          (((unsupported)).apply (((xself).xreturn_status)) ("return status"))
                          (((unsupported)).apply (((xself).xreturn_status)) ("return status"))
                xprocess_message.write
                  [xself xpeer xmailfrom xrcpttos xdata]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xmessages).xappend)).apply ((((unsupported)).apply ((xpeer)) ((xmailfrom)) ((xrcpttos)) ((xdata)))))
                        ((xdata).eq ((xself).xreturn_status)).if
                          (((unsupported)).apply ("250 Okish"))
                        ((((unsupported)).apply ("mail_options") ((xkw))).and (((unsupported)).apply ("SMTPUTF8") ((((unsupported)).apply ((xkw)) ("mail_options"))))).if
                          (((unsupported)).apply ("250 SMTPUTF8 message okish"))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xDummyServer)))
              xlisten.write
                [xself xnum]
                  seq > @
                    (((unsupported)).apply ((((xDummyDispatcherBroken)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xtest_process_message_unimplemented.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xwrite_line
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply (((xsmtpd).xSMTPServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        xwrite_line.write
                          [xline]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)).apply ((xline)))
                                bogusForceDataize.write ((((xchannel).xhandle_read)).apply)
                        bogusForceDataize.write (((xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write (((xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write (((xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write (((xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((xwrite_line)) ("spamrn.rn"))
                xtest_decode_data_and_enable_SMTPUTF8_raises.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xsmtpd).xSMTPServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE) (TRUE))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xsend_data.write
                  [xself xchannel xdata xenable_SMTPUTF8]
                    memory > xwrite_line
                    seq > @
                      (((unsupported)).apply)
                        xwrite_line.write
                          [xline]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)).apply ((xline)))
                                bogusForceDataize.write ((((xchannel).xhandle_read)).apply)
                        bogusForceDataize.write (((xwrite_line)).apply ("EHLO example"))
                        (xenable_SMTPUTF8).if
                          bogusForceDataize.write (((xwrite_line)).apply ("MAIL From:eggs@example BODY=8BITMIME SMTPUTF8"))
                          bogusForceDataize.write (((xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write (((xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write (((xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write (((xwrite_line)).apply ((xdata)))
                        bogusForceDataize.write (((xwrite_line)).apply ("."))
                xtest_process_message_with_decode_data_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply (((xsmtpd).xDebuggingServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)).apply ((xchannel)) ("From: testnnhellon"))
                        xstdout.write ((((xs).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                xtest_process_message_with_decode_data_false.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write ((((xsmtpd).xDebuggingServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)).apply ((xserver)) ((xconn)) ((xaddr)))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)).apply ((xchannel)) ("From: testnnhxc3xa9lloxffn"))
                        xstdout.write ((((xs).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                xtest_process_message_with_enable_SMTPUTF8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply (((xsmtpd).xDebuggingServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xs)))
                          bogusForceDataize.write ((((xself).xsend_data)).apply ((xchannel)) ("From: testnnhxc3xa9lloxffn"))
                        xstdout.write ((((xs).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                xtest_process_SMTPUTF8_message_with_enable_SMTPUTF8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    memory > xstdout
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply (((xsmtpd).xDebuggingServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xs)))
                          (((unsupported)).apply (((xself).xsend_data)) ((xchannel)) ("From: testnnhxc3xa9lloxffn") (TRUE))
                        xstdout.write ((((xs).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                xtest_socket_uses_IPv6.write
                  [xself]
                    memory > xserver
                    seq > @
                      (((unsupported)).apply)
                        xserver.write ((((xsmtpd).xSMTPServer)).apply ((((unsupported)).apply (((xsupport).xHOSTv6)) (0))) ((((unsupported)).apply (((xsupport).xHOSTv4)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xserver).xsocket).xfamily)) (((xsocket).xAF_INET6)))
                xtest_socket_uses_IPv4.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        xserver.write ((((xsmtpd).xSMTPServer)).apply ((((unsupported)).apply (((xsupport).xHOSTv4)) (0))) ((((unsupported)).apply (((xsupport).xHOSTv6)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xserver).xsocket).xfamily)) (((xsocket).xAF_INET)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xerror_response.write "555 RCPT TO parameters not recognized or not implementedrn"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xchannel xline]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write ((((xchannel).xhandle_read)).apply)
                xtest_params_rejected.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)).apply ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("RCPT to: <foo@example.com> foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                xtest_nothing_accepted.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)).apply ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("RCPT to: <foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) ("250 OKrn"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xerror_response.write "555 MAIL FROM parameters not recognized or not implementedrn"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xchannel xline]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write ((((xchannel).xhandle_read)).apply)
                xtest_with_decode_data_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("EHLO example"))
                        (((unsupported)).apply ((xline)) ((((unsupported)).apply ("MAIL from: <foo@example.com> size=20 SMTPUTF8") ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=8BITMIME") ("MAIL from: <foo@example.com> size=20 BODY=UNKNOWN") ("MAIL from: <foo@example.com> size=20 body=8bitmime"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ((xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_with_decode_data_false.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xDummyServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write ((((xsmtpd).xSMTPChannel)).apply ((xserver)) ((xconn)) ((xaddr)))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("EHLO example"))
                        (((unsupported)).apply ((xline)) ((((unsupported)).apply ("MAIL from: <foo@example.com> size=20 SMTPUTF8") ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=8BITMIME"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ((xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) (((xself).xerror_response)))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20 SMTPUTF8 BODY=UNKNOWN"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) ("501 Error: BODY can only be one of 7BIT, 8BITMIMErn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20 body=8bitmime"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_with_enable_smtputf8_true.write
                  [xself]
                    memory > xchannel
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserver).xaccept)).apply)))
                        xchannel.write (((unsupported)).apply (((xsmtpd).xSMTPChannel)) ((xserver)) ((xconn)) ((xaddr)) (TRUE))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((xchannel)) ("MAIL from: <foo@example.com> size=20 body=8bitmime smtputf8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchannel).xsocket).xlast)) ("250 OKrn"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserver)) ((((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xchannel)) ((((unsupported)).apply (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)).apply)
                xtest_broken_connect.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xDummyDispatcherBroken)) ((xBrokenDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))
                xtest_decode_data_and_enable_SMTPUTF8_raises.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((((xself).xchannel).xconn)) ((((xself).xchannel).xaddr)) (TRUE) (TRUE))
                xtest_server_accept.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xserver).xhandle_accept)).apply)
                xtest_missing_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("500 Error: bad syntaxrn"))
                xtest_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 HELPrn"))
                xtest_EHLO_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: EHLO hostnamern"))
                xtest_EHLO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_EHLO_HELO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELO.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        xname.write (((((xsmtpd).xsocket).xgetfqdn)).apply)
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ((((((("250 {}rn".xformat)).apply ((xname))).xencode)).apply ("ascii"))))
                xtest_HELO_EHLO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) (("250 Supported commands: EHLO HELO MAIL RCPT ".add "DATA RSET NOOP QUIT VRFYrn")))
                xtest_HELP_command.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELP MAIL"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 Syntax: MAIL FROM: <address>rn"))
                xtest_HELP_command_unknown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELP SPAM"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) (("501 Supported commands: EHLO HELO MAIL RCPT ".add "DATA RSET NOOP QUIT VRFYrn")))
                xtest_HELO_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: HELO hostnamern"))
                xtest_HELO_duplicate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Duplicate HELO/EHLOrn"))
                xtest_HELO_parameter_rejected_when_extensions_not_enabled.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xextended_smtp)) (FALSE))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:<foo@example.com> SIZE=1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_allows_space_after_colon.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:   <foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_extended_MAIL_allows_space_after_colon.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:   <foo@example.com> size=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_NOOP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("NOOP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_HELO_NOOP.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("NOOP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_NOOP_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("NOOP hi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: NOOPrn"))
                xtest_QUIT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("QUIT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_HELO_QUIT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("QUIT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_QUIT_arg_ignored.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("QUIT bye bye"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("221 Byern"))
                xtest_bad_state.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xchannel).xsmtp_state)) ("BAD STATE"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("451 Internal confusionrn"))
                xtest_command_too_long.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from: ".add ("a".mul (((xself).xchannel).xcommand_size_limit))).add "@example")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                xtest_MAIL_command_limit_extended_with_SIZE.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        xfill_len.write ((((xself).xchannel).xcommand_size_limit).sub (((xlen)).apply ("MAIL from:<@example>")))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ("a".mul (xfill_len))).add "@example> SIZE=1234")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ("a".mul ((xfill_len).add 26))).add "@example> SIZE=1234")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                xtest_MAIL_command_rejects_SMTPUTF8_by_default.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from: <naive@example.com> BODY=8BITMIME SMTPUTF8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (1))))) ("5"))
                xtest_data_longer_than_default_data_size_limit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xchannel).xdata_size_limit)) (1048))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("A".mul (((xself).xchannel).xdata_size_limit)).add "Arn.")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("552 Error: Too much mail datarn"))
                xtest_MAIL_size_parameter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL FROM:<eggs@example> SIZE=512"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_invalid_size_parameter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL FROM:<eggs@example> SIZE=invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address> [SP <mail-parameters>]rn"))
                xtest_MAIL_RCPT_unknown_parameters.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL FROM:<eggs@example> ham=green"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("555 MAIL FROM parameters not recognized or not implementedrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL FROM:<eggs@example>"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT TO:<eggs@example> ham=green"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("555 RCPT TO parameters not recognized or not implementedrn"))
                xtest_MAIL_size_parameter_larger_than_default_data_size_limit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xchannel).xdata_size_limit)) (1049))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL FROM:<eggs@example> SIZE=2096"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("552 Error: message size exceeds fixed maximum message sizern"))
                xtest_need_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT to:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: need MAIL commandrn"))
                xtest_MAIL_syntax_HELO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_syntax_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address> [SP <mail-parameters>]rn"))
                xtest_MAIL_missing_address.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: MAIL FROM: <address>rn"))
                xtest_MAIL_chevrons.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:<eggs@example>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_empty_chevrons.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:<>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_MAIL_quoted_localpart.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from: <\"Fred Blogs\"@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_no_angles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from: \"Fred Blogs\"@example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_with_size.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from: <\"Fred Blogs\"@example.com> SIZE=1000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_MAIL_quoted_localpart_with_size_no_angles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from: \"Fred Blogs\"@example.com SIZE=1000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xmailfrom)) ("\"Fred Blogs\"@example.com"))
                xtest_nested_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: nested MAIL commandrn"))
                xtest_VRFY.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("VRFY eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) (("252 Cannot VRFY user, but will accept message and attempt ".add "deliveryrn")))
                xtest_VRFY_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("VRFY"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: VRFY <address>rn"))
                xtest_EXPN_not_implemented.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EXPN"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("502 EXPN not implementedrn"))
                xtest_no_HELO_MAIL.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL from:<foo@example.com>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_need_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: need RCPT commandrn"))
                xtest_RCPT_syntax_HELO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RCPT TO: <address>rn"))
                xtest_RCPT_syntax_EHLO.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RCPT TO: <address> [SP <mail-parameters>]rn"))
                xtest_RCPT_lowercase_to_OK.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From: eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT to: <eggs@example>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_no_HELO_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT to eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_data_dialog.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("datarnmorern."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserver).xmessages)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)).apply ("spam@example"))) ("datanmore"))))))
                xtest_DATA_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: DATArn"))
                xtest_no_HELO_DATA.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("503 Error: send HELO firstrn"))
                xtest_data_transparency_section_4_5_2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("..rn.rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("."))
                xtest_multiple_RCPT.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:ham@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("datarn."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserver).xmessages)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)).apply ("spam@example") ("ham@example"))) ("data"))))))
                xtest_manual_status.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("return statusrn."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 Okishrn"))
                xtest_RSET.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RSET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:foo@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("datarn."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserver).xmessages)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("peer-address") ("peer-port"))) ("foo@example") ((((unsupported)).apply ("eggs@example"))) ("data"))))))
                xtest_HELO_RSET.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RSET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_RSET_syntax.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RSET hi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("501 Syntax: RSETrn"))
                xtest_unknown_command.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("UNKNOWN_CMD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) (("500 Error: command \"UNKNOWN_CMD\" not ".add "recognizedrn")))
                xtest_attribute_deprecations.write
                  [xself]
                    memory > xspam
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__server)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__server)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__line)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__line)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__state)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__state)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__greeting)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__greeting)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__mailfrom)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__mailfrom)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__rcpttos)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__rcpttos)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__data)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__data)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__fqdn)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__fqdn)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__peer)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__peer)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__conn)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__conn)) ("spam"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xspam.write (((xself).xchannel).x_SMTPChannel__addr)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply ((((xself).xchannel).x_SMTPChannel__addr)) ("spam"))
            (((unsupported)).apply ((xSMTPDChannelTest)) (((((xunittest).xskipUnless)).apply (((xsupport).xIPV6_ENABLED)) ("IPv6 not enabled"))))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                      (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                      (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                      (((unsupported)).apply (((xself).xserver)) ((((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOSTv6)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))))
                      (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                      (((unsupported)).apply (((xself).xchannel)) ((((unsupported)).apply (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserver)) ((((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xchannel)) ((((unsupported)).apply (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (32) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)).apply)
                xtest_data_limit_dialog.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("datarnmorern."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserver).xmessages)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("peer-address") ("peer-port"))) ("eggs@example") ((((unsupported)).apply ("spam@example"))) ("datanmore"))))))
                xtest_data_limit_dialog_too_much_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("354 End data with <CR><LF>.<CR><LF>rn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("This message is longer than 32 bytesrn."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("552 Error: Too much mail datarn"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserver)) ((((xDummyServer)).apply ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xchannel)) (((((xsmtpd).xSMTPChannel)).apply (((xself).xserver)) ((xconn)) ((xaddr)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)).apply)
                xtest_ascii_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("plain ascii text"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("plain ascii text"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("and some plain ascii"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87nand some plain ascii"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserver)) ((((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xchannel)) ((((unsupported)).apply (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)).apply)
                xtest_ascii_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("plain ascii text"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("plain ascii text"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("HELO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("MAIL From:eggs@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("RCPT To:spam@example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("and some plain ascii"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: żźćnand some plain ascii"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtpd).xsocket)) (((xasyncore).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xold_debugstream)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xself).xdebug)) (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserver)) ((((unsupported)).apply ((xDummyServer)) ((((unsupported)).apply (((xsupport).xHOST)) (0))) ((((unsupported)).apply ("b") (0))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) ((((((xself).xserver).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xchannel)) ((((unsupported)).apply (((xsmtpd).xSMTPChannel)) (((xself).xserver)) ((xconn)) ((xaddr)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        (((unsupported)).apply (((xasyncore).xsocket)) (((xsmtpd).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_debugstream)))
                xwrite_line.write
                  [xself xline]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xself).xchannel).xsocket).xqueue_recv)).apply ((xline)))
                        bogusForceDataize.write (((((xself).xchannel).xhandle_read)).apply)
                xtest_MAIL_command_accepts_SMTPUTF8_when_announced.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply (((("MAIL from: <naïve@example.com> BODY=8BITMIME SMTPUTF8".xencode)).apply ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_process_smtputf8_message.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        (((unsupported)).apply ((xmail_parameters)) ((((unsupported)).apply ("") ("BODY=8BITMIME SMTPUTF8"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)).apply (("MAIL from: <a@example> ".add (xmail_parameters))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("rcpt to:<b@example.com>"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("data"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("354"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("crn."))
                            ((xmail_parameters).eq "").if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 SMTPUTF8 message okishrn"))
                xtest_utf8_data.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("EHLO example"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply (((("MAIL From: naïve@examplé BODY=8BITMIME SMTPUTF8".xencode)).apply ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply (((("RCPT To:späm@examplé".xencode)).apply ("utf-8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("DATA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("354"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xchannel).xreceived_data)) ("utf8 enriched text: xc5xbcxc5xbaxc4x87"))
                xtest_MAIL_command_limit_extended_with_SIZE_and_SMTPUTF8.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("ehlo example"))
                        xfill_len.write (((512.add 26).add 10).sub (((xlen)).apply ("mail from:<@example>")))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ("a".mul ((xfill_len).add 1))).add "@example>")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("500 Error: line too longrn"))
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ("a".mul (xfill_len))).add "@example>")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xchannel).xsocket).xlast)) ("250 OKrn"))
                xtest_multiple_emails_with_extended_command_length.write
                  [xself]
                    memory > xfill_len
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xwrite_line)).apply ("ehlo example"))
                        xfill_len.write (((512.add 26).add 10).sub (((xlen)).apply ("mail from:<@example>")))
                        (((unsupported)).apply ((xchar)) ((((unsupported)).apply ("a") ("b") ("c"))))
                          seq
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ((xchar).mul (xfill_len))).add "a@example>")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("500"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ((("MAIL from:<".add ((xchar).mul (xfill_len))).add "@example>")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("rcpt to:<hans@example.com>"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("data"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("354"))
                            bogusForceDataize.write ((((xself).xwrite_line)).apply ("testrn."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xself).xchannel).xsocket).xlast)) ((((unsupported)).apply (0) (3))))) ("250"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("program") ("Devnull") ("DEBUGSTREAM") ("NEWLINE") ("COMMASPACE") ("DATA_SIZE_DEFAULT") ("usage") ("Options") ("parseargs"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xsmtpd)) ((xblacklist)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)