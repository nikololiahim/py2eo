memory > xk
memory > xAttributeError
memory > xArea
memory > xstr
memory > xtype
memory > xDistance
memory > xfloat
memory > xhash
memory > xMeasureBase
memory > xkwargs
memory > xisinstance
memory > xTypeError
memory > xtotal_ordering
memory > xvalue
memory > xint
memory > xunit
memory > xException
memory > xproperty
memory > xbool
memory > xNotImplemented
memory > xgetattr
memory > xv
memory > xsetattr
memory > xNUMERIC_TYPES
memory > xDecimal
[] > measure
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xD
        memory > xSTANDARD_UNIT
        memory > x__imul__
        memory > xNUMERIC_TYPES2
        memory > xALIAS
        memory > xstandard
        memory > x__all__
        memory > x__init__
        memory > xA
        memory > x__bool__
        memory > x__str__
        memory > x_set_standard
        memory > x__eq__
        memory > x__repr__
        memory > x__truediv__
        memory > x__sub__
        memory > xpretty_name
        memory > x__getattr__
        memory > x__rmul__
        memory > xAREA_PREFIX
        memory > x__isub__
        memory > xLALIAS
        memory > x__itruediv__
        memory > x__lt__
        memory > x__add__
        memory > xunit_attname
        memory > x__hash__
        memory > xUNITS
        memory > x_get_standard
        memory > x__iadd__
        memory > x__mul__
        memory > xdefault_units
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("A") ("Area") ("D") ("Distance"))
            xNUMERIC_TYPES2.write (((unsupported)).apply ((xint)) ((xfloat)) ((xDecimal)))
            xAREA_PREFIX.write "sq_"
            xpretty_name.write
              [xobj]
                seq > @
                  (((unsupported)).apply (((((xobj).x__class__).eq (xtype)).if ((xobj).x__name__) (((xobj).x__class__).x__name__))))
            (((unsupported)).apply ((xtotal_ordering)))
              seq
                xSTANDARD_UNIT.write "None: is there a None literal in the EO language?"
                xALIAS.write (((unsupported)).apply)
                xUNITS.write (((unsupported)).apply)
                xLALIAS.write (((unsupported)).apply)
                x__init__.write
                  [xself xdefault_unit]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) (((xself).x_default_unit)))) (((((xself).xdefault_units)).apply ((xkwargs)))))
                        bogusForceDataize.write (((xsetattr)).apply ((xself)) (((xself).xSTANDARD_UNIT)) ((xvalue)))
                        ((xdefault_unit).and (((xisinstance)).apply ((xdefault_unit)) ((xstr)))).if
                          (((unsupported)).apply (((xself).x_default_unit)) ((xdefault_unit)))
                x_get_standard.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xgetattr)).apply ((xself)) (((xself).xSTANDARD_UNIT)))))
                x_set_standard.write
                  [xself xvalue]
                    seq > @
                      bogusForceDataize.write (((xsetattr)).apply ((xself)) (((xself).xSTANDARD_UNIT)) ((xvalue)))
                xstandard.write (((xproperty)).apply ((x_get_standard)) ((x_set_standard)))
                x__getattr__.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply ((xname)) (((xself).xUNITS))).if
                        (((unsupported)).apply ((((xself).xstandard).div (((unsupported)).apply (((xself).xUNITS)) ((xname))))))
                        (((unsupported)).apply ((((xAttributeError)).apply (("Unknown unit type: %s".mod (xname))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("%s(%s=%s)".mod (((unsupported)).apply ((((xpretty_name)).apply ((xself)))) (((xself).x_default_unit)) ((((xgetattr)).apply ((xself)) (((xself).x_default_unit))))))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("%s %s".mod (((unsupported)).apply ((((xgetattr)).apply ((xself)) (((xself).x_default_unit)))) (((xself).x_default_unit))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        (((unsupported)).apply ((((xself).xstandard).eq ((xother).xstandard))))
                        (((unsupported)).apply ((xNotImplemented)))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xstandard)))))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        (((unsupported)).apply ((((xself).xstandard).less ((xother).xstandard))))
                        (((unsupported)).apply ((xNotImplemented)))
                x__add__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).add ((xother).xstandard))))))))))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be added with %(class)s".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__iadd__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        seq
                          (((unsupported)).apply (((xself).xstandard)) (((xother).xstandard)))
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be added with %(class)s".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__sub__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).sub ((xother).xstandard))))))))))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be subtracted from %(class)s".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__isub__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        seq
                          (((unsupported)).apply (((xself).xstandard)) (((xother).xstandard)))
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be subtracted from %(class)s".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__mul__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).mul (xother))))))))))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be multiplied with number".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__imul__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                        seq
                          (((unsupported)).apply (((xself).xstandard)) ((((xfloat)).apply ((xother)))))
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be multiplied with number".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__rmul__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((xself).mul (xother))))
                x__truediv__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                          (((unsupported)).apply ((((xself).xstandard).div ((xother).xstandard))))
                        (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).div (xother))))))))))
                          (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be divided with number or %(class)s".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__itruediv__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                        seq
                          (((unsupported)).apply (((xself).xstandard)) ((((xfloat)).apply ((xother)))))
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be divided with number".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
                x__bool__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xbool)).apply (((xself).xstandard)))))
                xdefault_units.write
                  [xself xkwargs]
                    memory > xu
                    memory > xdefault_unit
                    memory > xvalue
                    memory > xval
                    memory > xlower
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xval.write 0.0
                        xdefault_unit.write ((xself).xSTANDARD_UNIT)
                        (((unsupported)).apply ((((unsupported)).apply ((xunit)) ((xvalue)))) (((((xkwargs).xitems)).apply)))
                          seq
                            ((((xisinstance)).apply ((xvalue)) ((xfloat))).not).if
                              xvalue.write (((xfloat)).apply ((xvalue)))
                            (((unsupported)).apply ((xunit)) (((xself).xUNITS))).if
                              seq
                                (((unsupported)).apply ((xval)) (((((unsupported)).apply (((xself).xUNITS)) ((xunit))).mul (xvalue))))
                                xdefault_unit.write (xunit)
                              (((unsupported)).apply ((xunit)) (((xself).xALIAS))).if
                                seq
                                  xu.write (((unsupported)).apply (((xself).xALIAS)) ((xunit)))
                                  (((unsupported)).apply ((xval)) (((((unsupported)).apply (((xself).xUNITS)) ((xu))).mul (xvalue))))
                                  xdefault_unit.write (xu)
                                seq
                                  xlower.write ((((xunit).xlower)).apply)
                                  (((unsupported)).apply ((xlower)) (((xself).xUNITS))).if
                                    seq
                                      (((unsupported)).apply ((xval)) (((((unsupported)).apply (((xself).xUNITS)) ((xlower))).mul (xvalue))))
                                      xdefault_unit.write (xlower)
                                    (((unsupported)).apply ((xlower)) (((xself).xLALIAS))).if
                                      seq
                                        xu.write (((unsupported)).apply (((xself).xLALIAS)) ((xlower)))
                                        (((unsupported)).apply ((xval)) (((((unsupported)).apply (((xself).xUNITS)) ((xu))).mul (xvalue))))
                                        xdefault_unit.write (xu)
                                      (((unsupported)).apply ((((xAttributeError)).apply (("Unknown unit type: %s".mod (xunit))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xval)) ((xdefault_unit)))))
                xunit_attname.write
                  [xcls xunit_str]
                    memory > xlower
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xlower.write ((((xunit_str).xlower)).apply)
                        (((unsupported)).apply ((xunit_str)) (((xcls).xUNITS))).if
                          (((unsupported)).apply ((xunit_str)))
                          (((unsupported)).apply ((xlower)) (((xcls).xUNITS))).if
                            (((unsupported)).apply ((xlower)))
                            (((unsupported)).apply ((xlower)) (((xcls).xLALIAS))).if
                              (((unsupported)).apply ((((unsupported)).apply (((xcls).xLALIAS)) ((xlower)))))
                              (((unsupported)).apply ((((xException)).apply (("Could not find a unit keyword associated with \"%s\"".mod (xunit_str))))))
            (((unsupported)).apply ((xMeasureBase)))
              seq
                xSTANDARD_UNIT.write "m"
                xUNITS.write (((unsupported)).apply ("chain") (20.1168) ("chain_benoit") (20.116782) ("chain_sears") (20.1167645) ("british_chain_benoit") (20.1167824944) ("british_chain_sears") (20.1167651216) ("british_chain_sears_truncated") (20.116756) ("cm") (0.01) ("british_ft") (0.304799471539) ("british_yd") (0.914398414616) ("clarke_ft") (0.3047972654) ("clarke_link") (0.201166195164) ("fathom") (1.8288) ("ft") (0.3048) ("furlong") (201.168) ("german_m") (1.0000135965) ("gold_coast_ft") (0.304799710181508) ("indian_yd") (0.914398530744) ("inch") (0.0254) ("km") (1000.0) ("link") (0.201168) ("link_benoit") (0.20116782) ("link_sears") (0.20116765) ("m") (1.0) ("mi") (1609.344) ("mm") (0.001) ("nm") (1852.0) ("nm_uk") (1853.184) ("rod") (5.0292) ("sears_yd") (0.91439841) ("survey_ft") (0.304800609601) ("um") (0.000001) ("yd") (0.9144))
                xALIAS.write (((unsupported)).apply ("centimeter") ("cm") ("foot") ("ft") ("inches") ("inch") ("kilometer") ("km") ("kilometre") ("km") ("meter") ("m") ("metre") ("m") ("micrometer") ("um") ("micrometre") ("um") ("millimeter") ("mm") ("millimetre") ("mm") ("mile") ("mi") ("yard") ("yd") ("British chain (Benoit 1895 B)") ("british_chain_benoit") ("British chain (Sears 1922)") ("british_chain_sears") ("British chain (Sears 1922 truncated)") ("british_chain_sears_truncated") ("British foot (Sears 1922)") ("british_ft") ("British foot") ("british_ft") ("British yard (Sears 1922)") ("british_yd") ("British yard") ("british_yd") ("Clarke's Foot") ("clarke_ft") ("Clarke's link") ("clarke_link") ("Chain (Benoit)") ("chain_benoit") ("Chain (Sears)") ("chain_sears") ("Foot (International)") ("ft") ("Furrow Long") ("furlong") ("German legal metre") ("german_m") ("Gold Coast foot") ("gold_coast_ft") ("Indian yard") ("indian_yd") ("Link (Benoit)") ("link_benoit") ("Link (Sears)") ("link_sears") ("Nautical Mile") ("nm") ("Nautical Mile (UK)") ("nm_uk") ("US survey foot") ("survey_ft") ("U.S. Foot") ("survey_ft") ("Yard (Indian)") ("indian_yd") ("Yard (Sears)") ("sears_yd"))
                xLALIAS.write (((unsupported)).apply (((((xk).xlower)).apply)) ((xv)) ((((unsupported)).apply ((xk)) ((xv)))) (((((xALIAS).xitems)).apply)))
                x__mul__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xArea)) (((xAREA_PREFIX).add ((xself).x_default_unit))) ((((unsupported)).apply ((((unsupported)).apply (((xAREA_PREFIX).add ((xself).xSTANDARD_UNIT))) ((((xself).xstandard).mul ((xother).xstandard))))))))))
                        (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).mul (xother))))))))))
                          (((unsupported)).apply ((((xTypeError)).apply (("%(distance)s must be multiplied with number or %(distance)s".mod (((unsupported)).apply ("distance") ((((xpretty_name)).apply (((xself).x__class__))))))))))
            (((unsupported)).apply ((xMeasureBase)))
              seq
                xSTANDARD_UNIT.write ((xAREA_PREFIX).add ((xDistance).xSTANDARD_UNIT))
                xUNITS.write (((unsupported)).apply (("%s%s".mod (((unsupported)).apply ((xAREA_PREFIX)) ((xk))))) ((((unsupported)).apply ((xv)) (2))) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xDistance).xUNITS).xitems)).apply)))
                xALIAS.write (((unsupported)).apply ((xk)) (("%s%s".mod (((unsupported)).apply ((xAREA_PREFIX)) ((xv))))) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xDistance).xALIAS).xitems)).apply)))
                xLALIAS.write (((unsupported)).apply (((((xk).xlower)).apply)) ((xv)) ((((unsupported)).apply ((xk)) ((xv)))) (((((xALIAS).xitems)).apply)))
                x__truediv__.write
                  [xself xother]
                    seq > @
                      (((xisinstance)).apply ((xother)) ((xNUMERIC_TYPES))).if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).x_default_unit)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xSTANDARD_UNIT)) ((((xself).xstandard).div (xother))))))))))
                        (((unsupported)).apply ((((xTypeError)).apply (("%(class)s must be divided by a number".mod (((unsupported)).apply ("class") ((((xpretty_name)).apply ((xself))))))))))
            xD.write (xDistance)
            xA.write (xArea)