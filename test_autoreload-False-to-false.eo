memory > xfunc
memory > xIntegrationTests
memory > xWatchmanUnavailable
memory > xtempfile
memory > xint
memory > xcm
memory > xTestException
memory > xthreading
memory > xtypes
memory > xextend_sys_path
memory > xfalse
memory > xfilename
memory > xImportError
memory > xReloaderTests
memory > xexpected
memory > xall
memory > xdjango
memory > xlist
memory > xcontextlib
memory > xRuntimeError
memory > xtick
memory > xKeyboardInterrupt
memory > ximport_module
memory > xtmpdir
memory > xfrozenset
memory > xstr
memory > xmocked_server_status
memory > xFileNotFoundError
memory > xApps
memory > xMyException
memory > xp
memory > xCompletedProcess
memory > xzipf
memory > xtemp_dir
memory > xpath
memory > xPath
memory > xException
memory > xmocked_query
memory > xtime
memory > xsuper
memory > xmodule
memory > xsys
memory > xmocked_subscribe
memory > xmocked
memory > xon_macos_with_hfs
memory > xmock
memory > xos
memory > xautoreload
memory > xweakref
memory > xSyntaxError
memory > xzoneinfo
memory > xskipIf
memory > xpy_compile
memory > xe
memory > xmocked_watches
memory > x__file__
memory > xshutil
memory > xSystemExit
memory > xexc
memory > xnext
memory > xmocked_error_files
memory > xlen
memory > xdict
memory > xSimpleTestCase
memory > xzipfile
memory > xskip
[] > test_autoreload
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_check_server_status
        memory > xtest_python_m_django
        memory > xtest_check_server_status_raises_error
        memory > xtest_watchman_available
        memory > xtest_run_loop_catches_stopiteration
        memory > xpatch_autoreload
        memory > xtest_main_module_without_file_is_not_resolved
        memory > xtest_bytecode_conversion_to_source
        memory > xtest_tick_does_not_trigger_twice
        memory > xtest_watched_roots_contains_directory_globs
        memory > xtest_raises_runtimeerror
        memory > xtest_mutates_error_files
        memory > xtest_xoptions
        memory > xtest_nested_glob_recursive
        memory > xtest_main_module
        memory > xtest_check_errors
        memory > xtest_watch_glob_multiple_patterns
        memory > xtest_entrypoint_fallback
        memory > xtest_overlapping_globs
        memory > xtest_update_watches_raises_exceptions
        memory > xensure_file
        memory > xtest_snapshot_files_updates
        memory > xtest_glob
        memory > xtest_snapshot_files_ignores_missing_files
        memory > xtest_paths_are_pathlib_instances
        memory > xtest_run_as_non_django_module_non_package
        memory > xtest_watchman_unavailable
        memory > xtest_zip_reload
        memory > xtest_weakref_in_sys_module
        memory > xtest_module_without_spec
        memory > xtest_file_added
        memory > xtest_overlapping_glob_recursive
        memory > xtest_check_errors_catches_all_exceptions
        memory > xtest_exe_fallback
        memory > xtest_snapshot_files_with_duplicates
        memory > xtest_sys_paths_with_directories
        memory > xtest_main
        memory > xtest_common_roots
        memory > xtest_path_with_embedded_null_bytes
        memory > xsetUp
        memory > xtest_echo_on_called
        memory > xtest_setting_timeout_from_environment_variable
        memory > xtest_run_loop_stop_and_return
        memory > xexecutable
        memory > xassertFileNotFound
        memory > xtest_main_module_is_resolved
        memory > xRELOADER_CLS
        memory > xassertFileFound
        memory > xtest_watched_roots_contains_files
        memory > xtest_raises_exception
        memory > xtest_wait_for_apps_ready_without_exception
        memory > xtest_is_django_path
        memory > xskip_unless_watchman_available
        memory > xset_mtime
        memory > xtick_twice
        memory > xtest_watch_glob_ignores_non_existing_directories_two_levels
        memory > xtest_watched_roots_contains_sys_path
        memory > xtest_multiple_globs
        memory > xtest_wait_for_apps_ready_checks_for_exception
        memory > xtest_watch_dir_with_unresolvable_path
        memory > xtest_calls_sys_exit
        memory > xtest_check_availability_lower_version
        memory > xtest_glob_recursive
        memory > xclear_autoreload_caches
        memory > xtest_sys_paths_directories
        memory > xtest_calls_start_django
        memory > xtest_swallows_keyboard_interrupt
        memory > xtest_module_no_spec
        memory > xtest_no_exception
        memory > xtest_watch_with_glob
        memory > xtemporary_file
        memory > xtest_run_as_module
        memory > xtest_warnoptions
        memory > xtest_watch_files_with_recursive_glob
        memory > xtest_raises_exception_with_context
        memory > xtest_manage_py
        memory > xtest_check_errors_called
        memory > ximport_and_cleanup
        memory > xtest_starts_thread_with_args
        memory > xtest_sys_paths_absolute
        memory > xtest_run_as_non_django_module
        memory > xtest_sys_paths_non_existing
        memory > xtest_pywatchman_not_available
        memory > xincrement_mtime
        memory > xtearDown
        memory > xtest_is_django_module
        memory > xtest_multiple_recursive_globs
        memory > xtest_raises_custom_exception
        memory > xtest_watch_glob_uses_existing_parent_directories
        memory > xtest_check_availability
        memory > xtest_watchman_becomes_unavailable
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                ximport_and_cleanup.write
                  [xself xname]
                    seq > @
                      seq
                        bogusForceDataize.write (((ximport_module)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((unsupported)).apply ((((((xsys).xpath_importer_cache).xclear)).apply)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((unsupported)).apply ((((((xsys).xmodules).xpop)).apply ((xname)) ("None: is there a None literal in the EO language?"))))))
                xclear_autoreload_caches.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xautoreload).xiter_modules_and_files).xcache_clear)).apply)
                xassertFileFound.write
                  [xself xfilename]
                    memory > xresolved_filename
                    seq > @
                      seq
                        xresolved_filename.write (((unsupported)).apply (((xfilename).xresolve)) (TRUE))
                        bogusForceDataize.write ((((xself).xclear_autoreload_caches)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xresolved_filename)) ((((xlist)).apply (((((xautoreload).xiter_all_python_module_files)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xresolved_filename)) ((((xlist)).apply (((((xautoreload).xiter_all_python_module_files)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xautoreload).xiter_modules_and_files).xcache_info)).apply).xhits)) (1))
                xassertFileNotFound.write
                  [xself xfilename]
                    memory > xresolved_filename
                    seq > @
                      seq
                        xresolved_filename.write (((unsupported)).apply (((xfilename).xresolve)) (TRUE))
                        bogusForceDataize.write ((((xself).xclear_autoreload_caches)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xresolved_filename)) ((((xlist)).apply (((((xautoreload).xiter_all_python_module_files)).apply)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xresolved_filename)) ((((xlist)).apply (((((xautoreload).xiter_all_python_module_files)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xautoreload).xiter_modules_and_files).xcache_info)).apply).xhits)) (1))
                xtemporary_file.write
                  [xself xfilename]
                    memory > xdirname
                    seq > @
                      seq
                        xdirname.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) ((xdirname)))
                        (((unsupported)).apply (((((xPath)).apply ((xdirname))).div (xfilename))))
                xtest_paths_are_pathlib_instances.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfilename)) (((((xautoreload).xiter_all_python_module_files)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfilename)) ((xPath)))
                xtest_file_added.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilename.write ((((xself).xtemporary_file)).apply ("test_deleted_removed_module.py"))
                        bogusForceDataize.write ((((xfilename).xtouch)).apply)
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xfilename).xparent)))))))
                          bogusForceDataize.write ((((xself).ximport_and_cleanup)).apply ("test_deleted_removed_module"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply (((((xfilename).xabsolute)).apply)))
                xtest_check_errors.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilename.write ((((xself).xtemporary_file)).apply ("test_syntax_error.py"))
                        bogusForceDataize.write ((((xfilename).xwrite_text)).apply ("Ceci n'est pas du Python."))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xfilename).xparent)))))))
                          (((unsupported)).apply)
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                              bogusForceDataize.write ((((((xautoreload).xcheck_errors)).apply ((ximport_module)))).apply ("test_syntax_error"))
                            (((unsupported)).apply (((xautoreload).x_exception)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply ((xfilename)))
                xtest_check_errors_catches_all_exceptions.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilename.write ((((xself).xtemporary_file)).apply ("test_exception.py"))
                        bogusForceDataize.write ((((xfilename).xwrite_text)).apply ("raise Exception"))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xfilename).xparent)))))))
                          (((unsupported)).apply)
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                              bogusForceDataize.write ((((((xautoreload).xcheck_errors)).apply ((ximport_module)))).apply ("test_exception"))
                            (((unsupported)).apply (((xautoreload).x_exception)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply ((xfilename)))
                xtest_zip_reload.write
                  [xself]
                    memory > xzip_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xzip_file.write ((((xself).xtemporary_file)).apply ("zip_import.zip"))
                        (((unsupported)).apply (((((xzipfile).xZipFile)).apply ((((xstr)).apply ((xzip_file)))) ("w") (((xzipfile).xZIP_DEFLATED)))) ((xzipf)))
                          bogusForceDataize.write ((((xzipf).xwritestr)).apply ("test_zipped_file.py") (""))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply ((xzip_file)))))))
                          bogusForceDataize.write ((((xself).ximport_and_cleanup)).apply ("test_zipped_file"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply ((xzip_file)))
                xtest_bytecode_conversion_to_source.write
                  [xself]
                    memory > xcompiled_file
                    memory > xfilename
                    seq > @
                      seq
                        unsupported
                        xfilename.write ((((xself).xtemporary_file)).apply ("test_compiled.py"))
                        bogusForceDataize.write ((((xfilename).xtouch)).apply)
                        xcompiled_file.write (((xPath)).apply (((((xpy_compile).xcompile)).apply ((((xstr)).apply ((xfilename)))) ((((xstr)).apply (((((xfilename).xwith_suffix)).apply (".pyc"))))))))
                        bogusForceDataize.write ((((xfilename).xunlink)).apply)
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xcompiled_file).xparent)))))))
                          bogusForceDataize.write ((((xself).ximport_and_cleanup)).apply ("test_compiled"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply ((xcompiled_file)))
                xtest_weakref_in_sys_module.write
                  [xself]
                    memory > xtime_proxy
                    seq > @
                      seq
                        unsupported
                        xtime_proxy.write ((((xweakref).xproxy)).apply ((xtime)))
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("time_proxy"))) ((xtime_proxy)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((unsupported)).apply ((((((xsys).xmodules).xpop)).apply ("time_proxy") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write (((xlist)).apply (((((xautoreload).xiter_all_python_module_files)).apply)))
                xtest_module_without_spec.write
                  [xself]
                    memory > xmodule
                    seq > @
                      seq
                        xmodule.write ((((xtypes).xModuleType)).apply ("test_module"))
                        (((unsupported)).apply ((((unsupported)).apply (((xmodule).x__spec__)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xiter_modules_and_files)).apply ((((unsupported)).apply ((xmodule)))) ((((xfrozenset)).apply)))) ((((xfrozenset)).apply)))
                xtest_main_module_is_resolved.write
                  [xself]
                    memory > xmain_module
                    seq > @
                      seq
                        xmain_module.write (((unsupported)).apply (((xsys).xmodules)) ("__main__"))
                        bogusForceDataize.write ((((xself).xassertFileFound)).apply ((((xPath)).apply (((xmain_module).x__file__)))))
                xtest_main_module_without_file_is_not_resolved.write
                  [xself]
                    memory > xfake_main
                    seq > @
                      seq
                        xfake_main.write ((((xtypes).xModuleType)).apply ("__main__"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xiter_modules_and_files)).apply ((((unsupported)).apply ((xfake_main)))) ((((xfrozenset)).apply)))) ((((xfrozenset)).apply)))
                xtest_path_with_embedded_null_bytes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("embedded_null_bytex00.py") ("dix00rectory/embedded_null_byte.py"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpath)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xiter_modules_and_files)).apply ((((unsupported)).apply)) ((((xfrozenset)).apply ((((unsupported)).apply ((xpath)))))))) ((((xfrozenset)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_run_as_module.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ("-m") ("django") ("runserver"))))
                xtest_run_as_non_django_module.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ("-m") ("utils_tests.test_module") ("runserver"))))
                xtest_run_as_non_django_module_non_package.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ("-m") ("utils_tests.test_module.main_module") ("runserver"))))
                xtest_warnoptions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ("-Werror") ((x__file__)) ("runserver"))))
                xtest_xoptions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ("-Xutf8") ("-Xa=b") ((x__file__)) ("runserver"))))
                xtest_exe_fallback.write
                  [xself]
                    memory > xexe_path
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmpdir)))
                          seq
                            xexe_path.write ((((xPath)).apply ((xtmpdir))).div "django-admin.exe")
                            bogusForceDataize.write ((((xexe_path).xtouch)).apply)
                            (((unsupported)).apply (((((xmock).xpatch)).apply ("sys.argv") ((((unsupported)).apply (((((xexe_path).xwith_suffix)).apply (""))) ("runserver"))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply ((xexe_path)) ("runserver"))))
                xtest_entrypoint_fallback.write
                  [xself]
                    memory > xscript_path
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmpdir)))
                          seq
                            xscript_path.write ((((xPath)).apply ((xtmpdir))).div "django-admin-script.py")
                            bogusForceDataize.write ((((xscript_path).xtouch)).apply)
                            (((unsupported)).apply (((((xmock).xpatch)).apply ("sys.argv") ((((unsupported)).apply (((((xscript_path).xwith_name)).apply ("django-admin"))) ("runserver"))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ((xscript_path)) ("runserver"))))
                xtest_raises_runtimeerror.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Script does-not-exist does not exist."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ((xmsg)))))
                          bogusForceDataize.write ((((xautoreload).xget_child_arguments)).apply)
                xtest_module_no_spec.write
                  [xself]
                    memory > xmodule
                    seq > @
                      (((unsupported)).apply)
                        xmodule.write ((((xtypes).xModuleType)).apply ("test_module"))
                        (((unsupported)).apply ((((unsupported)).apply (((xmodule).x__spec__)))))
                        (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xsys).xmodules)) ((((unsupported)).apply ("__main__") ((xmodule)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xautoreload).xget_child_arguments)).apply)) ((((unsupported)).apply (((xsys).xexecutable)) ((x__file__)) ("runserver"))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_is_django_module.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xmodule)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ((xzoneinfo)) ((xfalse)))) ((((unsupported)).apply ((xsys)) ((xfalse)))) ((((unsupported)).apply ((xautoreload)) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmodule)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply (((((xautoreload).xis_django_module)).apply ((xmodule)))) ((xexpected)))
                xtest_is_django_path.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xmodule)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply (((xzoneinfo).x__file__)) ((xfalse)))) ((((unsupported)).apply (((xcontextlib).x__file__)) ((xfalse)))) ((((unsupported)).apply (((xautoreload).x__file__)) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmodule)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply (((((xautoreload).xis_django_path)).apply ((xmodule)))) ((xexpected)))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_common_roots.write
                [xself]
                  memory > xpaths
                  memory > xresults
                  seq > @
                    seq
                      xpaths.write (((unsupported)).apply ((((xPath)).apply ("/first/second"))) ((((xPath)).apply ("/first/second/third"))) ((((xPath)).apply ("/first/"))) ((((xPath)).apply ("/root/first/"))))
                      xresults.write ((((xautoreload).xcommon_roots)).apply ((xpaths)))
                      bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xresults)) ((((unsupported)).apply ((((xPath)).apply ("/first/"))) ((((xPath)).apply ("/root/first/"))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_directory)) (((((xtempfile).xTemporaryDirectory)).apply)))
                        (((unsupported)).apply (((xself).xdirectory)) (((((((unsupported)).apply (((((xPath)).apply ((((xself).x_directory).xname))).xresolve)) (TRUE)).xabsolute)).apply)))
                        (((unsupported)).apply (((xself).xfile)) ((((xself).xdirectory).div "test")))
                        bogusForceDataize.write (((((xself).xfile).xtouch)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_directory).xcleanup)).apply)
                xtest_sys_paths_with_directories.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xself).xfile)))))))
                          xpaths.write (((xlist)).apply (((((xautoreload).xsys_path_directories)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xself).xfile).xparent)) ((xpaths)))
                xtest_sys_paths_non_existing.write
                  [xself]
                    memory > xpaths
                    memory > xnonexistent_file
                    seq > @
                      seq
                        xnonexistent_file.write ((((xPath)).apply ((((xself).xdirectory).xname))).div "does_not_exist")
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply ((xnonexistent_file)))))))
                          xpaths.write (((xlist)).apply (((((xautoreload).xsys_path_directories)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xnonexistent_file)) ((xpaths)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xnonexistent_file).xparent)) ((xpaths)))
                xtest_sys_paths_absolute.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        xpaths.write (((xlist)).apply (((((xautoreload).xsys_path_directories)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply (((((xp).xis_absolute)).apply)) ((xp)) ((xpaths)))))))
                xtest_sys_paths_directories.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xself).xdirectory)))))))
                          xpaths.write (((xlist)).apply (((((xautoreload).xsys_path_directories)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xdirectory)) ((xpaths)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_watchman_unavailable.write
                  [xself xmocked_watchman]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xmocked_watchman).xcheck_availability).xside_effect)) ((xWatchmanUnavailable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xautoreload).xget_reloader)).apply)) (((xautoreload).xStatReloader)))
                xtest_watchman_available.write
                  [xself xmocked_available]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_available).xreturn_value)) ("None: is there a None literal in the EO language?"))
                        xresult.write ((((xautoreload).xget_reloader)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xresult)) (((xautoreload).xWatchmanReloader)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_swallows_keyboard_interrupt.write
                  [xself xmocked_get_reloader]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_get_reloader).xside_effect)) ((((xKeyboardInterrupt)).apply)))
                        bogusForceDataize.write ((((xautoreload).xrun_with_reloader)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                xtest_calls_sys_exit.write
                  [xself xmocked_restart_reloader]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_restart_reloader).xreturn_value)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))) ((xexc)))
                          bogusForceDataize.write ((((xautoreload).xrun_with_reloader)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexc).xexception).xcode)) (1))
                xtest_calls_start_django.write
                  [xself xmocked_reloader xmocked_start_django]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_reloader).xreturn_value)) ((((xmock).xsentinel).xRELOADER)))
                        bogusForceDataize.write ((((xautoreload).xrun_with_reloader)).apply ((((xmock).xsentinel).xMETHOD)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_start_django).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((xmocked_start_django).xcall_args)) (0))) ((((unsupported)).apply ((((xmock).xsentinel).xRELOADER)) ((((xmock).xsentinel).xMETHOD)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_watchman_becomes_unavailable.write
                  [xself xmocked_stat]
                    memory > xfake_reloader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xmocked_stat).xshould_stop).xreturn_value)) (TRUE))
                        xfake_reloader.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply (((xfake_reloader).xshould_stop)) ((xfalse)))
                        (((unsupported)).apply ((((xfake_reloader).xrun).xside_effect)) (((((xautoreload).xWatchmanUnavailable)).apply)))
                        bogusForceDataize.write ((((xautoreload).xstart_django)).apply ((xfake_reloader)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_stat).xcall_count)) (1))
                xtest_echo_on_called.write
                  [xself xmocked_echo]
                    memory > xfake_reloader
                    seq > @
                      (((unsupported)).apply)
                        xfake_reloader.write ((((xmock).xMagicMock)).apply)
                        bogusForceDataize.write ((((xautoreload).xstart_django)).apply ((xfake_reloader)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_echo).xcall_count)) (1))
                xtest_check_errors_called.write
                  [xself xmocked_check_errors]
                    memory > xfake_reloader
                    memory > xfake_method
                    seq > @
                      (((unsupported)).apply)
                        xfake_method.write (((unsupported)).apply (((xmock).xMagicMock)) ("None: is there a None literal in the EO language?"))
                        xfake_reloader.write ((((xmock).xMagicMock)).apply)
                        bogusForceDataize.write ((((xautoreload).xstart_django)).apply ((xfake_reloader)) ((xfake_method)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xmocked_check_errors).xcall_args)) (0))) ((((unsupported)).apply ((xfake_method)))))
                xtest_starts_thread_with_args.write
                  [xself xmocked_check_errors xmocked_thread]
                    memory > xfake_reloader
                    memory > xfake_thread
                    memory > xfake_main_func
                    seq > @
                      (((unsupported)).apply)
                        xfake_reloader.write ((((xmock).xMagicMock)).apply)
                        xfake_main_func.write ((((xmock).xMagicMock)).apply)
                        xfake_thread.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply (((xmocked_check_errors).xreturn_value)) ((xfake_main_func)))
                        (((unsupported)).apply (((xmocked_thread).xreturn_value)) ((xfake_thread)))
                        (((unsupported)).apply (((xautoreload).xstart_django)) ((xfake_reloader)) ((xfake_main_func)) (123) (123))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_thread).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmocked_thread).xcall_args)) (1))) ((((unsupported)).apply ("target") ((xfake_main_func)) ("args") ((((unsupported)).apply (123))) ("kwargs") ((((unsupported)).apply ("abc") (123))) ("name") ("django-main-thread"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfake_thread).xdaemon)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfake_thread).xstart).xcalled)))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_mutates_error_files.write
                [xself]
                  memory > xfake_method
                  memory > xwrapped
                  seq > @
                    seq
                      xfake_method.write (((unsupported)).apply (((xmock).xMagicMock)) ((((xRuntimeError)).apply)))
                      xwrapped.write ((((xautoreload).xcheck_errors)).apply ((xfake_method)))
                      (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xautoreload)) ("_error_files"))) ((xmocked_error_files)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                            bogusForceDataize.write (((xwrapped)).apply)
                          (((unsupported)).apply (((xautoreload).x_exception)) ("None: is there a None literal in the EO language?"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmocked_error_files).xappend).xcall_count)) (1))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_exception.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xautoreload).xraise_last_exception)).apply)
                xtest_raises_exception.write
                  [xself]
                    memory > xexc_info
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xMyException)))
                          (((unsupported)).apply ((((xMyException)).apply ("Test Message"))))
                          xexc_info.write ((((xsys).xexc_info)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.utils.autoreload._exception") ((xexc_info)))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xMyException)) ("Test Message"))))
                            bogusForceDataize.write ((((xautoreload).xraise_last_exception)).apply)
                xtest_raises_custom_exception.write
                  [xself]
                    memory > xexc_info
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          x__init__.write
                            [xself xmsg xextra_context]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xmsg)))
                                  (((unsupported)).apply (((xself).xextra_context)) ((xextra_context)))
                        (((unsupported)).apply ((xMyException)))
                          (((unsupported)).apply ((((xMyException)).apply ("Test Message") ("extra context"))))
                          xexc_info.write ((((xsys).xexc_info)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.utils.autoreload._exception") ((xexc_info)))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xMyException)) ("Test Message"))))
                            bogusForceDataize.write ((((xautoreload).xraise_last_exception)).apply)
                xtest_raises_exception_with_context.write
                  [xself]
                    memory > xexc_info
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((((xException)).apply (2))))
                          (((unsupported)).apply ((xException)))
                            (((unsupported)).apply ((((xException)).apply (1))) ((xe)))
                            xexc_info.write ((((xsys).xexc_info)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.utils.autoreload._exception") ((xexc_info)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))) ((xcm)))
                              bogusForceDataize.write ((((xautoreload).xraise_last_exception)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (0))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcm).xexception).x__cause__).xargs)) (0))) (2))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xexecutable.write "/usr/bin/python"
                xpatch_autoreload.write
                  [xself xargv]
                    memory > xmock_call
                    memory > xpatch_call
                    memory > xpatches
                    seq > @
                      seq
                        xpatch_call.write (((unsupported)).apply (((xmock).xpatch)) ("django.utils.autoreload.subprocess.run") ((((xCompletedProcess)).apply ((xargv)) (0))))
                        xpatches.write (((unsupported)).apply (((((xmock).xpatch)).apply ("django.utils.autoreload.sys.argv") ((xargv)))) (((((xmock).xpatch)).apply ("django.utils.autoreload.sys.executable") (((xself).xexecutable)))) (((((xmock).xpatch)).apply ("django.utils.autoreload.sys.warnoptions") ((((unsupported)).apply ("all"))))) (((((xmock).xpatch)).apply ("django.utils.autoreload.sys._xoptions") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xp)) ((xpatches)))
                          seq
                            bogusForceDataize.write ((((xp).xstart)).apply)
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xp).xstop)))
                        xmock_call.write ((((xpatch_call).xstart)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xpatch_call).xstop)))
                        (((unsupported)).apply ((xmock_call)))
                xtest_manage_py.write
                  [xself]
                    memory > xargv
                    memory > xmock_call
                    memory > xscript
                    seq > @
                      (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtemp_dir)))
                        seq
                          xscript.write ((((xPath)).apply ((xtemp_dir))).div "manage.py")
                          bogusForceDataize.write ((((xscript).xtouch)).apply)
                          xargv.write (((unsupported)).apply ((((xstr)).apply ((xscript)))) ("runserver"))
                          xmock_call.write ((((xself).xpatch_autoreload)).apply ((xargv)))
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("__main__.__spec__") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xautoreload).xrestart_with_reloader)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_call).xcall_count)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xmock_call).xcall_args)) (0))) (0))) (((((unsupported)).apply (((xself).xexecutable)) ("-Wall")).add (xargv))))
                xtest_python_m_django.write
                  [xself]
                    memory > xmock_call
                    memory > xmain
                    memory > xargv
                    seq > @
                      seq
                        xmain.write "/usr/lib/pythonX.Y/site-packages/django/__main__.py"
                        xargv.write (((unsupported)).apply ((xmain)) ("runserver"))
                        xmock_call.write ((((xself).xpatch_autoreload)).apply ((xargv)))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.__main__.__file__") ((xmain)))))
                          seq
                            (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xsys).xmodules)) ((((unsupported)).apply ("__main__") (((xdjango).x__main__)))))))
                              bogusForceDataize.write ((((xautoreload).xrestart_with_reloader)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_call).xcall_count)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xmock_call).xcall_args)) (0))) (0))) (((((unsupported)).apply (((xself).xexecutable)) ("-Wall") ("-m") ("django")).add (((unsupported)).apply ((xargv)) ((((unsupported)).apply (1)))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xRELOADER_CLS.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_tempdir)) (((((xtempfile).xTemporaryDirectory)).apply)))
                        (((unsupported)).apply (((xself).xtempdir)) (((((((unsupported)).apply (((((xPath)).apply ((((xself).x_tempdir).xname))).xresolve)) (TRUE)).xabsolute)).apply)))
                        (((unsupported)).apply (((xself).xexisting_file)) (((((xself).xensure_file)).apply ((((xself).xtempdir).div "test.py")))))
                        (((unsupported)).apply (((xself).xnonexistent_file)) (((((((xself).xtempdir).div "does_not_exist.py").xabsolute)).apply)))
                        (((unsupported)).apply (((xself).xreloader)) (((((xself).xRELOADER_CLS)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_tempdir).xcleanup)).apply)
                        bogusForceDataize.write (((((xself).xreloader).xstop)).apply)
                xensure_file.write
                  [xself xpath]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xpath).xparent).xmkdir)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xpath).xtouch)).apply)
                        bogusForceDataize.write ((((xself).xset_mtime)).apply ((xpath)) (((((xtime).xtime)).apply)))
                        (((unsupported)).apply (((((xpath).xabsolute)).apply)))
                xset_mtime.write
                  [xself xfp xvalue]
                    seq > @
                      bogusForceDataize.write ((((xos).xutime)).apply ((((xstr)).apply ((xfp)))) ((((unsupported)).apply ((xvalue)) ((xvalue)))))
                xincrement_mtime.write
                  [xself xfp xby]
                    memory > xcurrent_time
                    seq > @
                      (((unsupported)).apply)
                        xcurrent_time.write ((((xtime).xtime)).apply)
                        bogusForceDataize.write ((((xself).xset_mtime)).apply ((xfp)) (((xcurrent_time).add (xby))))
                xtick_twice.write
                  [xself]
                    memory > xticker
                    seq > @
                      (((unsupported)).apply)
                        xticker.write (((((xself).xreloader).xtick)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xticker)))
                        (((unsupported)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xticker)))
            (((unsupported)).apply)
              seq
                xtest_glob.write
                  [xself xmocked_modules xnotify_mock]
                    memory > xnon_py_file
                    seq > @
                      (((unsupported)).apply)
                        xnon_py_file.write ((((xself).xensure_file)).apply ((((xself).xtempdir).div "non_py_file")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.py"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xnon_py_file)))
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply (((xself).xexisting_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply (((xself).xexisting_file)))))
                xtest_multiple_globs.write
                  [xself xmocked_modules xnotify_mock]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xensure_file)).apply ((((xself).xtempdir).div "x.test")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.py"))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.test"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          bogusForceDataize.write ((((xself).xincrement_mtime)).apply (((xself).xexisting_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply (((xself).xexisting_file)))))
                xtest_overlapping_globs.write
                  [xself xmocked_modules xnotify_mock]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.py"))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.p*"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          bogusForceDataize.write ((((xself).xincrement_mtime)).apply (((xself).xexisting_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply (((xself).xexisting_file)))))
                xtest_glob_recursive.write
                  [xself xmocked_modules xnotify_mock]
                    memory > xnon_py_file
                    memory > xpy_file
                    seq > @
                      (((unsupported)).apply)
                        xnon_py_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "non_py_file")))
                        xpy_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "file.py")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.py"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xnon_py_file)))
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xpy_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply ((xpy_file)))))
                xtest_multiple_recursive_globs.write
                  [xself xmocked_modules xnotify_mock]
                    memory > xnon_py_file
                    memory > xpy_file
                    seq > @
                      (((unsupported)).apply)
                        xnon_py_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "test.txt")))
                        xpy_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "file.py")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.txt"))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.py"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xnon_py_file)))
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xpy_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (2))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((xnotify_mock).xcall_args_list)) ((((unsupported)).apply (((((xmock).xcall)).apply ((xpy_file)))) (((((xmock).xcall)).apply ((xnon_py_file)))))))
                xtest_nested_glob_recursive.write
                  [xself xmocked_modules xnotify_mock]
                    memory > xinner_py_file
                    seq > @
                      (((unsupported)).apply)
                        xinner_py_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "file.py")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.py"))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xinner_py_file).xparent)) ("**/*.py"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xinner_py_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply ((xinner_py_file)))))
                xtest_overlapping_glob_recursive.write
                  [xself xmocked_modules xnotify_mock]
                    memory > xpy_file
                    seq > @
                      (((unsupported)).apply)
                        xpy_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "dir").div "file.py")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.p*"))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.py*"))
                        (((unsupported)).apply (((((xself).xtick_twice)).apply)))
                          bogusForceDataize.write ((((xself).xincrement_mtime)).apply ((xpy_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnotify_mock).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xnotify_mock).xcall_args)) (0))) ((((unsupported)).apply ((xpy_file)))))
            (((unsupported)).apply ((xReloaderTests)))
              seq
                xRELOADER_CLS.write ((xautoreload).xBaseReloader)
                xtest_watch_dir_with_unresolvable_path.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((xPath)).apply ("unresolvable_directory"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xPath)) ("absolute") ((xFileNotFoundError)))))
                          bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply ((xpath)) ("**/*.mo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xself).xreloader).xdirectory_globs)))) ((((unsupported)).apply)))
                xtest_watch_with_glob.write
                  [xself]
                    memory > xwatched_files
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.py"))
                        xwatched_files.write (((xlist)).apply ((((((xself).xreloader).xwatched_files)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xexisting_file)) ((xwatched_files)))
                xtest_watch_files_with_recursive_glob.write
                  [xself]
                    memory > xwatched_files
                    memory > xinner_file
                    seq > @
                      seq
                        xinner_file.write ((((xself).xensure_file)).apply (((((xself).xtempdir).div "test").div "test.py")))
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("**/*.py"))
                        xwatched_files.write (((xlist)).apply ((((((xself).xreloader).xwatched_files)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xexisting_file)) ((xwatched_files)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xinner_file)) ((xwatched_files)))
                xtest_run_loop_catches_stopiteration.write
                  [xself]
                    memory > xmocked_tick
                    seq > @
                      seq
                        xmocked_tick.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("tick") ((xmocked_tick)))) ((xtick)))
                          bogusForceDataize.write (((((xself).xreloader).xrun_loop)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtick).xcall_count)) (1))
                xtest_run_loop_stop_and_return.write
                  [xself]
                    memory > xmocked_tick
                    seq > @
                      seq
                        xmocked_tick.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                bogusForceDataize.write (((((xself).xreloader).xstop)).apply)
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("tick") ((xmocked_tick)))) ((xtick)))
                          bogusForceDataize.write (((((xself).xreloader).xrun_loop)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtick).xcall_count)) (1))
                xtest_wait_for_apps_ready_checks_for_exception.write
                  [xself]
                    memory > xdead_thread
                    memory > xapp_reg
                    seq > @
                      seq
                        xapp_reg.write (((xApps)).apply)
                        bogusForceDataize.write (((((xapp_reg).xready_event).xset)).apply)
                        xdead_thread.write ((((xthreading).xThread)).apply)
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xself).xreloader).xwait_for_apps_ready)).apply ((xapp_reg)) ((xdead_thread)))))
                xtest_wait_for_apps_ready_without_exception.write
                  [xself]
                    memory > xthread
                    memory > xapp_reg
                    seq > @
                      seq
                        xapp_reg.write (((xApps)).apply)
                        bogusForceDataize.write (((((xapp_reg).xready_event).xset)).apply)
                        xthread.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply ((((xthread).xis_alive).xreturn_value)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xreloader).xwait_for_apps_ready)).apply ((xapp_reg)) ((xthread)))))
            xskip_unless_watchman_available.write
              []
                seq > @
                  seq
                    (((unsupported)).apply ((xWatchmanUnavailable)))
                      bogusForceDataize.write (((((xautoreload).xWatchmanReloader).xcheck_availability)).apply)
                      (((unsupported)).apply ((((xskip)).apply (("Watchman unavailable: %s".mod (xe))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xfunc)))))
            (((unsupported)).apply ((xReloaderTests)) ((xIntegrationTests)) ((((xskip_unless_watchman_available)).apply)))
              seq
                xRELOADER_CLS.write ((xautoreload).xWatchmanReloader)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply ((((xself).xreloader).xclient_timeout)) ((((xint)).apply ((((((xos).xenviron).xget)).apply ("DJANGO_WATCHMAN_TIMEOUT") (2))))))
                xtest_watch_glob_ignores_non_existing_directories_two_levels.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xreloader)) ("_subscribe"))) ((xmocked_subscribe)))
                          bogusForceDataize.write (((((xself).xreloader).x_watch_glob)).apply (((((xself).xtempdir).div "does_not_exist").div "more")) ((((unsupported)).apply ("*"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xmocked_subscribe).xcalled)))
                xtest_watch_glob_uses_existing_parent_directories.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xreloader)) ("_subscribe"))) ((xmocked_subscribe)))
                          bogusForceDataize.write (((((xself).xreloader).x_watch_glob)).apply ((((xself).xtempdir).div "does_not_exist")) ((((unsupported)).apply ("*"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((xmocked_subscribe).xcall_args)) (0))) ((((unsupported)).apply (((xself).xtempdir)) (("glob-parent-does_not_exist:%s".mod ((xself).xtempdir))) ((((unsupported)).apply ("anyof") ((((unsupported)).apply ("match") ("does_not_exist/*") ("wholename"))))))))
                xtest_watch_glob_multiple_patterns.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xreloader)) ("_subscribe"))) ((xmocked_subscribe)))
                          bogusForceDataize.write (((((xself).xreloader).x_watch_glob)).apply (((xself).xtempdir)) ((((unsupported)).apply ("*") ("*.py"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((xmocked_subscribe).xcall_args)) (0))) ((((unsupported)).apply (((xself).xtempdir)) (("glob:%s".mod ((xself).xtempdir))) ((((unsupported)).apply ("anyof") ((((unsupported)).apply ("match") ("*") ("wholename"))) ((((unsupported)).apply ("match") ("*.py") ("wholename"))))))))
                xtest_watched_roots_contains_files.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        xpaths.write (((((xself).xreloader).xwatched_roots)).apply ((((unsupported)).apply (((xself).xexisting_file)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xself).xexisting_file).xparent)) ((xpaths)))
                xtest_watched_roots_contains_directory_globs.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xreloader).xwatch_dir)).apply (((xself).xtempdir)) ("*.py"))
                        xpaths.write (((((xself).xreloader).xwatched_roots)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xtempdir)) ((xpaths)))
                xtest_watched_roots_contains_sys_path.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((((xstr)).apply (((xself).xtempdir)))))))
                          xpaths.write (((((xself).xreloader).xwatched_roots)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xtempdir)) ((xpaths)))
                xtest_check_server_status.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xreloader).xcheck_server_status)).apply)))
                xtest_check_server_status_raises_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((((xself).xreloader).xclient)) ("query"))) ((xmocked_query)))
                        seq
                          (((unsupported)).apply (((xmocked_query).xside_effect)) ((((xException)).apply)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply (((xautoreload).xWatchmanUnavailable)))))
                            bogusForceDataize.write (((((xself).xreloader).xcheck_server_status)).apply)
                xtest_check_availability.write
                  [xself xmocked_client]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xmocked_client)).apply).xcapabilityCheck).xside_effect)) ((((xException)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xWatchmanUnavailable)) ("Cannot connect to the watchman service"))))
                          bogusForceDataize.write (((((xself).xRELOADER_CLS).xcheck_availability)).apply)
                xtest_check_availability_lower_version.write
                  [xself xmocked_client]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xmocked_client)).apply).xcapabilityCheck).xreturn_value)) ((((unsupported)).apply ("version") ("4.8.10"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xWatchmanUnavailable)) ("Watchman 4.9 or later is required."))))
                          bogusForceDataize.write (((((xself).xRELOADER_CLS).xcheck_availability)).apply)
                xtest_pywatchman_not_available.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xautoreload)) ("pywatchman"))) ((xmocked)))
                        seq
                          (((unsupported)).apply ((((xmocked).x__bool__).xreturn_value)) ((xfalse)))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xWatchmanUnavailable)) ("pywatchman not installed."))))
                            bogusForceDataize.write (((((xself).xRELOADER_CLS).xcheck_availability)).apply)
                xtest_update_watches_raises_exceptions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xreloader)) ("_update_watches"))) ((xmocked_watches)))
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xreloader)) ("check_server_status"))) ((xmocked_server_status)))
                            seq
                              (((unsupported)).apply (((xmocked_watches).xside_effect)) ((((xTestException)).apply)))
                              (((unsupported)).apply (((xmocked_server_status).xreturn_value)) (TRUE))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTestException)))))
                                bogusForceDataize.write (((((xself).xreloader).xupdate_watches)).apply)
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((((unsupported)).apply (((xmocked_server_status).xcall_args)) (0))) (0))) ((xTestException)))
                xtest_setting_timeout_from_environment_variable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xRELOADER_CLS)).apply).xclient_timeout)) (10))
            (((unsupported)).apply ((xReloaderTests)) ((xIntegrationTests)) ((((xskipIf)).apply ((((xon_macos_with_hfs)).apply)) ("These tests do not work with HFS+ as a filesystem"))))
              seq
                xRELOADER_CLS.write ((xautoreload).xStatReloader)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply ((((xself).xreloader).xSLEEP_TIME)) (0.01))
                xtest_tick_does_not_trigger_twice.write
                  [xself xmock_notify_file_changed]
                    memory > xticker
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("watched_files") ((((unsupported)).apply (((xself).xexisting_file)))))))
                          seq
                            xticker.write (((((xself).xreloader).xtick)).apply)
                            bogusForceDataize.write (((xnext)).apply ((xticker)))
                            bogusForceDataize.write ((((xself).xincrement_mtime)).apply (((xself).xexisting_file)))
                            bogusForceDataize.write (((xnext)).apply ((xticker)))
                            bogusForceDataize.write (((xnext)).apply ((xticker)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_notify_file_changed).xcall_count)) (1))
                xtest_snapshot_files_ignores_missing_files.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("watched_files") ((((unsupported)).apply (((xself).xnonexistent_file)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((((((xself).xreloader).xsnapshot_files)).apply)))) ((((unsupported)).apply)))
                xtest_snapshot_files_updates.write
                  [xself]
                    memory > xsnapshot2
                    memory > xsnapshot1
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("watched_files") ((((unsupported)).apply (((xself).xexisting_file)))))))
                        seq
                          xsnapshot1.write (((xdict)).apply ((((((xself).xreloader).xsnapshot_files)).apply)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xexisting_file)) ((xsnapshot1)))
                          bogusForceDataize.write ((((xself).xincrement_mtime)).apply (((xself).xexisting_file)))
                          xsnapshot2.write (((xdict)).apply ((((((xself).xreloader).xsnapshot_files)).apply)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xsnapshot1)) (((xself).xexisting_file)))) ((((unsupported)).apply ((xsnapshot2)) (((xself).xexisting_file)))))
                xtest_snapshot_files_with_duplicates.write
                  [xself]
                    memory > xsnapshot
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xreloader)) ("watched_files") ((((unsupported)).apply (((xself).xexisting_file)) (((xself).xexisting_file)))))))
                        seq
                          xsnapshot.write (((xlist)).apply ((((((xself).xreloader).xsnapshot_files)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xsnapshot)))) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsnapshot)) (0))) (0))) (((xself).xexisting_file)))