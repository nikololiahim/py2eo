memory > xPerson
memory > xTestCase
memory > xconnection
memory > xoutput
memory > xPY311
memory > xException
memory > xDiscoverRunner
memory > xStringIO
memory > xunittest
[] > test_debug_sql
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_class_path
        memory > xsetUpTestData
        memory > xverbose_expected_outputs
        memory > xtest_output_verbose
        memory > xmethod_name
        memory > xexpected_outputs
        memory > xtest_setupclass_exception
        memory > x_test_output
        memory > xrunTest
        memory > xtest_output_normal
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xconnection).xvendor).eq "sqlite")) ("Only run on sqlite so we can check output SQL."))))
              seq
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("pass")).xcount)).apply)
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        seq
                          bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("fail")).xcount)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply)
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        seq
                          bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("error")).xcount)).apply)
                          (((unsupported)).apply ((xException)))
                (((unsupported)).apply ((xTestCase)))
                  seq
                    xsetUpTestData.write
                      [xcls]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xException)))
                    xrunTest.write
                      [xself]
                        seq > @
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        (((unsupported)).apply (((((xself).xsubTest)).apply)))
                          bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("subtest-pass")).xcount)).apply)
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        (((unsupported)).apply (((((xself).xsubTest)).apply)))
                          seq
                            bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("subtest-fail")).xcount)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply)
                (((unsupported)).apply ((xTestCase)))
                  xrunTest.write
                    [xself]
                      seq > @
                        (((unsupported)).apply (((((xself).xsubTest)).apply)))
                          seq
                            bogusForceDataize.write ((((((unsupported)).apply ((((xPerson).xobjects).xfilter)) ("subtest-error")).xcount)).apply)
                            (((unsupported)).apply ((xException)))
                x_test_output.write
                  [xself xverbosity]
                    memory > xold_config
                    memory > xstream
                    memory > xresultclass
                    memory > xrunner
                    memory > xsuite
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (0))
                        xsuite.write ((((xrunner).xtest_suite)).apply)
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xFailingTest)).apply)))
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xErrorTest)).apply)))
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xPassingTest)).apply)))
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xPassingSubTest)).apply)))
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xFailingSubTest)).apply)))
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xErrorSubTest)).apply)))
                        xold_config.write ((((xrunner).xsetup_databases)).apply)
                        xstream.write (((xStringIO)).apply)
                        xresultclass.write ((((xrunner).xget_resultclass)).apply)
                        bogusForceDataize.write ((((((unsupported)).apply (((xrunner).xtest_runner)) ((xverbosity)) ((xstream)) ((xresultclass))).xrun)).apply ((xsuite)))
                        bogusForceDataize.write ((((xrunner).xteardown_databases)).apply ((xold_config)))
                        (((unsupported)).apply (((((xstream).xgetvalue)).apply)))
                xtest_output_normal.write
                  [xself]
                    memory > xfull_output
                    seq > @
                      seq
                        xfull_output.write ((((xself).x_test_output)).apply (1))
                        (((unsupported)).apply ((xoutput)) (((xself).xexpected_outputs)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xoutput)) ((xfull_output)))
                        (((unsupported)).apply ((xoutput)) (((xself).xverbose_expected_outputs)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xoutput)) ((xfull_output)))
                xtest_output_verbose.write
                  [xself]
                    memory > xfull_output
                    seq > @
                      seq
                        xfull_output.write ((((xself).x_test_output)).apply (2))
                        (((unsupported)).apply ((xoutput)) (((xself).xexpected_outputs)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xoutput)) ((xfull_output)))
                        (((unsupported)).apply ((xoutput)) (((xself).xverbose_expected_outputs)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xoutput)) ((xfull_output)))
                xexpected_outputs.write (((unsupported)).apply ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'error';") ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'fail';") ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'subtest-error';") ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'subtest-fail';"))
                xmethod_name.write ((xPY311).if ".runTest" "")
                xtest_class_path.write "test_runner.test_debug_sql.TestDebugSQL"
                xverbose_expected_outputs.write (((unsupported)).apply ("runTest ({test_class_path}.FailingTest{method_name}) ... FAIL") ("runTest ({test_class_path}.ErrorTest{method_name}) ... ERROR") ("runTest ({test_class_path}.PassingTest{method_name}) ... ok") ("runTest ({test_class_path}.FailingSubTest{method_name}) ...") ("runTest ({test_class_path}.ErrorSubTest{method_name}) ...") ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'pass';") ("SELECT COUNT(*) AS \"__count\" FROM \"test_runner_person\" WHERE \"test_runner_person\".\"first_name\" = 'subtest-pass';"))
                xtest_setupclass_exception.write
                  [xself]
                    memory > xold_config
                    memory > xstream
                    memory > xoutput
                    memory > xrunner
                    memory > xsuite
                    seq > @
                      seq
                        xrunner.write (((unsupported)).apply ((xDiscoverRunner)) (TRUE) (0))
                        xsuite.write ((((xrunner).xtest_suite)).apply)
                        bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xself).xErrorSetUpTestDataTest)).apply)))
                        xold_config.write ((((xrunner).xsetup_databases)).apply)
                        xstream.write (((xStringIO)).apply)
                        bogusForceDataize.write ((((((unsupported)).apply (((xrunner).xtest_runner)) (0) ((xstream)) (((((xrunner).xget_resultclass)).apply))).xrun)).apply ((xsuite)))
                        bogusForceDataize.write ((((xrunner).xteardown_databases)).apply ((xold_config)))
                        xoutput.write ((((xstream).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ERROR: setUpClass (test_runner.test_debug_sql.TestDebugSQL.ErrorSetUpTestDataTest)") ((xoutput)))