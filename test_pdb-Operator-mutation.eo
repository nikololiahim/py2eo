memory > xstdout
memory > xpdb
memory > xall
memory > xstr
memory > x_FakeInput
memory > x_
memory > xl
memory > xcwd
memory > xf
memory > xx
memory > xbytes
memory > xstderr
memory > xobject
memory > xproc
memory > x__name__
memory > xresources
memory > xtypes
memory > xexec
memory > xBreakpoint
memory > xPdbTestCase
memory > xtest_pdb
memory > xpatch
memory > xopen
memory > xtextwrap
memory > xtemp_dir
memory > xprint
memory > xany
memory > xhasattr
memory > xcodecs
memory > xdoctest
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xos
memory > xgetattr
memory > xExitStack
memory > xStringIO
memory > xunittest
[] > test_pdb
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_find_function_found
        memory > xtest_pdb_next_command_for_generator
        memory > xtest_pdb_continue_in_bottomframe
        memory > xrun_pdb_script
        memory > xtest_issue7964
        memory > xtest_find_function_found_with_bom
        memory > xtest_pdb_breakpoint_commands
        memory > xtest_header
        memory > xtest_module_without_a_main
        memory > xtest_pdb_next_command_for_asyncgen
        memory > xpdb_invoke
        memory > xtest_issue13183
        memory > xtest_pdb_return_command_for_coroutine
        memory > xreset_Breakpoint
        memory > xdo_nothing
        memory > xtest_next_until_return_at_return_event
        memory > xtest_module_is_run_as_main
        memory > xtest_issue42383
        memory > xtest_relative_imports
        memory > xtest_issue36250
        memory > xtest_readrc_homedir
        memory > xdo_something
        memory > xtest_pdb_next_command_subiterator
        memory > xtest_post_mortem
        memory > xtest_pdb_basic_commands
        memory > xtest_pdb_until_command_for_coroutine
        memory > xtest_issue42384_symlink
        memory > xtest_pdb_next_command_for_coroutine
        memory > xtest_find_function_empty_file
        memory > xtest_issue42384
        memory > x__exit__
        memory > xtest_pdb_until_command_for_generator
        memory > xtest_run_pdb_with_pdb
        memory > xtest_pdb_whatis_command
        memory > xtest_breakpoint
        memory > x_assert_find_function
        memory > xtest_run_module
        memory > x__enter__
        memory > xload_tests
        memory > xtest_issue16180
        memory > xtest_relative_imports_on_plain_module
        memory > xtest_pdb_issue_20766
        memory > xtest_issue26053
        memory > xtest_blocks_at_first_code_line
        memory > xtest_readrc_kwarg
        memory > xtest_errors_in_command
        memory > xtest_pdb_skip_modules_with_callback
        memory > xtest_pdb_displayhook
        memory > xrun_pdb_module
        memory > x__init__
        memory > xtest_pdb_skip_modules
        memory > xmod
        memory > xtest_pdb_run_with_incorrect_argument
        memory > xtest_pdb_next_command_in_generator_for_loop
        memory > xtearDown
        memory > xtest_find_function_found_with_encoding_cookie
        memory > xtest_pdb_run_with_code_object
        memory > xtest_pdb_return_command_for_generator
        memory > xtest_issue13120
        memory > x_run_pdb
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xreset_Breakpoint.write
              []
                seq > @
                  seq
                    (((unsupported)).apply (((xBreakpoint).xnext)) (1))
                    (((unsupported)).apply (((xBreakpoint).xbplist)) ((((unsupported)).apply)))
                    (((unsupported)).apply (((xBreakpoint).xbpbynumber)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xobject)))
              seq
                unsupported
                x__init__.write
                  [xself xinput]
                    seq > @
                      (((unsupported)).apply (((xself).xinput)) ((xinput)))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xreal_stdin)) (((xsys).xstdin)))
                        (((unsupported)).apply (((xsys).xstdin)) ((((x_FakeInput)).apply (((xself).xinput)))))
                        (((unsupported)).apply (((xself).xorig_trace)) (((((xhasattr)).apply ((xsys)) ("gettrace")).if ((((xsys).xgettrace)).apply) "None: is there a None literal in the EO language?")))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xsys).xstdin)) (((xself).xreal_stdin)))
                        ((xself).xorig_trace).if
                          bogusForceDataize.write ((((xsys).xsettrace)).apply (((xself).xorig_trace)))
            xtest_pdb_displayhook.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_basic_commands.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_breakpoint_commands.write
              []
                seq > @
                  (((unsupported)).apply)
            xdo_nothing.write
              []
                seq > @
            xdo_something.write
              []
                seq > @
                  bogusForceDataize.write (((xprint)).apply (42))
            xtest_pdb_whatis_command.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_post_mortem.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_skip_modules.write
              []
                seq > @
                  (((unsupported)).apply)
            xmod.write ((((xtypes).xModuleType)).apply ("module_to_skip"))
            bogusForceDataize.write (((xexec)).apply ("def foo_pony(callback): x = 1; callback(); return None") (((xmod).x__dict__)))
            xtest_pdb_skip_modules_with_callback.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_continue_in_bottomframe.write
              []
                seq > @
                  (((unsupported)).apply)
            xpdb_invoke.write
              [xmethod xarg]
                seq > @
                  seq
                    unsupported
                    bogusForceDataize.write (((((xgetattr)).apply ((((unsupported)).apply (((xpdb).xPdb)) (TRUE) (FALSE))) ((xmethod)))).apply ((xarg)))
            xtest_pdb_run_with_incorrect_argument.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_run_with_code_object.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_next_until_return_at_return_event.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_next_command_for_generator.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_next_command_for_coroutine.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_next_command_for_asyncgen.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_return_command_for_generator.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_return_command_for_coroutine.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_until_command_for_generator.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_until_command_for_coroutine.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_next_command_in_generator_for_loop.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_next_command_subiterator.write
              []
                seq > @
                  (((unsupported)).apply)
            xtest_pdb_issue_20766.write
              []
                seq > @
                  (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                x_run_pdb.write
                  [xself xpdb_args xcommands]
                    memory > xcmd
                    memory > xstdout
                    memory > xstderr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ("__pycache__"))
                        xcmd.write ((((unsupported)).apply (((xsys).xexecutable)) ("-m") ("pdb")).sub (xpdb_args))
                        (((unsupported)).apply ((((unsupported)).apply (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xSTDOUT)))) ((xproc)))
                          (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xproc).xcommunicate)).apply (((((xstr).xencode)).apply ((xcommands)))))))
                        xstdout.write ((xstdout).and ((((xbytes).xdecode)).apply ((xstdout))))
                        xstderr.write ((xstderr).and ((((xbytes).xdecode)).apply ((xstderr))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))))
                xrun_pdb_script.write
                  [xself xscript xcommands]
                    memory > xfilename
                    seq > @
                      seq
                        unsupported
                        xfilename.write "main.py"
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((xscript)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)).apply (((((xself).x_run_pdb)).apply ((((unsupported)).apply ((xfilename)))) ((xcommands)))))
                xrun_pdb_module.write
                  [xself xscript xcommands]
                    memory > xmain_file
                    memory > xinit_file
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xmodule_name)) ("t_main"))
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply (((xself).xmodule_name)))
                        xmain_file.write (((xself).xmodule_name).sub "/__main__.py")
                        xinit_file.write (((xself).xmodule_name).sub "/__init__.py")
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xmodule_name)))
                        (((unsupported)).apply ((((xopen)).apply ((xinit_file)) ("w"))) ((xf)))
                        (((unsupported)).apply ((((xopen)).apply ((xmain_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((xscript)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) (((xself).xmodule_name)))
                        (((unsupported)).apply (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("-m") (((xself).xmodule_name)))) ((xcommands)))))
                x_assert_find_function.write
                  [xself xfile_content xfunc_name xexpected]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((xfile_content)))
                        xexpected.write (((xexpected).not).if "None: is there a None literal in the EO language?" (((unsupported)).apply ((((unsupported)).apply ((xexpected)) (0))) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xexpected)) (1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((((xpdb).xfind_function)).apply ((xfunc_name)) (((xsupport).xTESTFN)))))
                xtest_find_function_empty_file.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_find_function)).apply ("") ("foo") ("None: is there a None literal in the EO language?"))
                xtest_find_function_found.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_find_function)).apply (((((((unsupported)).apply).xencode)).apply)) ("bœr") ((((unsupported)).apply ("bœr") (4))))
                xtest_find_function_found_with_encoding_cookie.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_find_function)).apply (((((((unsupported)).apply).xencode)).apply ("iso-8859-15"))) ("bœr") ((((unsupported)).apply ("bœr") (5))))
                xtest_find_function_found_with_bom.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_find_function)).apply ((((xcodecs).xBOM_UTF8).sub ((((((unsupported)).apply).xencode)).apply))) ("bœr") ((((unsupported)).apply ("bœr") (1))))
                xtest_issue7964.write
                  [xself]
                    memory > xproc
                    memory > xcmd
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("print(\"testing my pdb\")rn"))
                        xcmd.write (((unsupported)).apply (((xsys).xexecutable)) ("-m") ("pdb") (((xsupport).xTESTFN)))
                        xproc.write (((unsupported)).apply (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xSTDOUT)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xproc).xstdout).xclose)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xproc).xcommunicate)).apply ("quitn"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("SyntaxError") ((xstdout)) ("Got a syntax error running test script under PDB"))
                xtest_issue13183.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    memory > xbar
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        xcommands.write (((unsupported)).apply)
                        xbar.write (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply ("bar.py") ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((xbar)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ("bar.py"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_script)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("main.py(5)foo()->None") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ("Fail to step into the caller after a return"))
                xtest_issue13120.write
                  [xself]
                    memory > xproc
                    memory > xcmd
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xencode)).apply ("ascii"))))
                        xcmd.write (((unsupported)).apply (((xsys).xexecutable)) ("-u") (((xsupport).xTESTFN)))
                        xproc.write (((unsupported)).apply (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xSTDOUT)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xproc).xstdout).xclose)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xproc).xcommunicate)).apply ("contn"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Error") (((((xstdout).xdecode)).apply)) ("Got an error running test script under PDB"))
                xtest_issue36250.write
                  [xself]
                    memory > xproc
                    memory > xcmd
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xencode)).apply ("ascii"))))
                        xcmd.write (((unsupported)).apply (((xsys).xexecutable)) ("-u") (((xsupport).xTESTFN)))
                        xproc.write (((unsupported)).apply (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xSTDOUT)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xproc).xstdout).xclose)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xproc).xcommunicate)).apply ("contncontn"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Error") (((((xstdout).xdecode)).apply)) ("Got an error running test script under PDB"))
                xtest_issue16180.write
                  [xself]
                    memory > xscript
                    memory > xcommands
                    memory > xexpected
                    seq > @
                      seq
                        xscript.write "def f: passn"
                        xcommands.write ""
                        xexpected.write "SyntaxError:"
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_script)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xexpected)) ((xstdout)) (((("nnExpected:n{}nGot:n{}nFail to handle a syntax error in the debuggee.".xformat)).apply ((xexpected)) ((xstdout)))))
                xtest_issue26053.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    memory > xres
                    seq > @
                      seq
                        xscript.write "print('hello')"
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_script)).apply ((xscript)) ((xcommands)))))
                        xres.write ((("n".xjoin)).apply ((((unsupported)).apply (((((xx).xstrip)).apply)) ((xx)) (((((xstdout).xsplitlines)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xres)) ("Restarting .* with arguments:na b c"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xres)) ("Restarting .* with arguments:nd e f"))
                xtest_readrc_kwarg.write
                  [xself]
                    memory > xproc
                    memory > xscript
                    memory > xsave_home
                    memory > xcmd
                    seq > @
                      seq
                        xscript.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xsave_home.write (((((xos).xenviron).xpop)).apply ("HOME") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply)))
                            seq
                              (((unsupported)).apply ((((xopen)).apply (".pdbrc") ("w"))) ((xf)))
                                bogusForceDataize.write ((((xf).xwrite)).apply ("invalidn"))
                              (((unsupported)).apply ((((xopen)).apply ("main.py") ("w"))) ((xf)))
                                bogusForceDataize.write ((((xf).xwrite)).apply ((xscript)))
                              xcmd.write (((unsupported)).apply (((xsys).xexecutable)) ("main.py"))
                              xproc.write (((unsupported)).apply (((xsubprocess).xPopen)) ((xcmd)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                              (((unsupported)).apply ((xproc)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xproc).xcommunicate)).apply ("qn"))))
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("NameError: name 'invalid' is not defined") (((((xstdout).xdecode)).apply)))
                          (((unsupported)).apply ((xsave_home)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("HOME"))) ((xsave_home)))
                xtest_readrc_homedir.write
                  [xself]
                    memory > xsave_home
                    memory > xrc_path
                    seq > @
                      seq
                        xsave_home.write (((((xos).xenviron).xpop)).apply ("HOME") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xtemp_dir)) ((((xpatch)).apply ("os.path.expanduser"))))
                          seq
                            xrc_path.write (((((xos).xpath).xjoin)).apply ((xtemp_dir)) (".pdbrc"))
                            (((unsupported)).apply (((((xos).xpath).xexpanduser).xreturn_value)) ((xrc_path)))
                            (((unsupported)).apply)
                              seq
                                (((unsupported)).apply ((((xopen)).apply ((xrc_path)) ("w"))) ((xf)))
                                  bogusForceDataize.write ((((xf).xwrite)).apply ("invalid"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((xpdb).xPdb)).apply).xrcLines)) (0))) ("invalid"))
                              (((unsupported)).apply ((xsave_home)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("HOME"))) ((xsave_home)))
                xtest_header.write
                  [xself]
                    memory > xstdout
                    memory > xheader
                    seq > @
                      seq
                        xstdout.write (((xStringIO)).apply)
                        xheader.write "Nobody expects... blah, blah, blah"
                        (((unsupported)).apply ((((xExitStack)).apply)) ((xresources)))
                          seq
                            bogusForceDataize.write ((((xresources).xenter_context)).apply ((((xpatch)).apply ("sys.stdout") ((xstdout)))))
                            bogusForceDataize.write ((((xresources).xenter_context)).apply (((((xpatch).xobject)).apply (((xpdb).xPdb)) ("set_trace"))))
                            (((unsupported)).apply (((xpdb).xset_trace)) ((xheader)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xgetvalue)).apply)) (((xheader).sub "n")))
                xtest_run_module.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    seq > @
                      seq
                        xscript.write "print(\"SUCCESS\")"
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_module)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("SUCCESS") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                xtest_module_is_run_as_main.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_module)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("SUCCESS") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                xtest_breakpoint.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_module)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("Breakpoint 1 at") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ("SUCCESS") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                xtest_run_pdb_with_pdb.write
                  [xself]
                    memory > xcommands
                    seq > @
                      seq
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("-m") ("pdb"))) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xpdb).x_usage)) (((((xstdout).xreplace)).apply ("r") (""))))
                xtest_module_without_a_main.write
                  [xself]
                    memory > xmodule_name
                    memory > xinit_file
                    seq > @
                      seq
                        xmodule_name.write "t_main"
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xmodule_name)))
                        xinit_file.write ((xmodule_name).sub "/__init__.py")
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xmodule_name)))
                        (((unsupported)).apply ((((xopen)).apply ((xinit_file)) ("w"))) ((xf)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ((xmodule_name)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("-m") ((xmodule_name)))) (""))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ImportError: No module named t_main.__main__") (((((xstdout).xsplitlines)).apply)))
                xtest_blocks_at_first_code_line.write
                  [xself]
                    memory > xcommands
                    memory > xscript
                    seq > @
                      seq
                        xscript.write (((unsupported)).apply)
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_module)).apply ((xscript)) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("__main__.py(4)<module>()") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                xtest_relative_imports.write
                  [xself]
                    memory > xcommands
                    memory > xmain_file
                    memory > xinit_file
                    memory > xmodule_file
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodule_name)) ("t_main"))
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply (((xself).xmodule_name)))
                        xmain_file.write (((xself).xmodule_name).sub "/__main__.py")
                        xinit_file.write (((xself).xmodule_name).sub "/__init__.py")
                        xmodule_file.write (((xself).xmodule_name).sub "/module.py")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) (((xself).xmodule_name)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xmodule_name)))
                        (((unsupported)).apply ((((xopen)).apply ((xinit_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xmain_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xmodule_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((x_)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("-m") (((xself).xmodule_name)))) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("VAR from module") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("VAR from top") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("second var") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))))
                xtest_relative_imports_on_plain_module.write
                  [xself]
                    memory > xcommands
                    memory > xmain_file
                    memory > xinit_file
                    memory > xmodule_file
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodule_name)) ("t_main"))
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply (((xself).xmodule_name)))
                        xmain_file.write (((xself).xmodule_name).sub "/runme.py")
                        xinit_file.write (((xself).xmodule_name).sub "/__init__.py")
                        xmodule_file.write (((xself).xmodule_name).sub "/module.py")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) (((xself).xmodule_name)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xmodule_name)))
                        (((unsupported)).apply ((((xopen)).apply ((xinit_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xmain_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xmodule_file)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))))
                        xcommands.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((x_)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("-m") ((((xself).xmodule_name).sub ".runme")))) ((xcommands)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ("VAR from module") ((xl)))) ((xl)) (((((xstdout).xsplitlines)).apply)))))) ((xstdout)))
                xtest_errors_in_command.write
                  [xself]
                    memory > xcommands
                    seq > @
                      seq
                        xcommands.write ((("n".xjoin)).apply ((((unsupported)).apply ("print(") ("debug print(") ("debug doesnotexist") ("c"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((x_)))) (((((xself).xrun_pdb_script)).apply ("") (((xcommands).sub "n")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xstdout).xsplitlines)).apply)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ("(Pdb) *** SyntaxError: unexpected EOF while parsing") ("(Pdb) ENTERING RECURSIVE DEBUGGER") ("*** SyntaxError: unexpected EOF while parsing") ("LEAVING RECURSIVE DEBUGGER") ("(Pdb) ENTERING RECURSIVE DEBUGGER") ("> <string>(1)<module>()") ("((Pdb)) *** NameError: name 'doesnotexist' is not defined") ("LEAVING RECURSIVE DEBUGGER") ("(Pdb) "))))
                xtest_issue42384.write
                  [xself]
                    memory > xscript
                    memory > xcommands
                    memory > xexpected
                    seq > @
                      seq
                        unsupported
                        xscript.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xcommands.write "cnq"
                        (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply)) ((xcwd)))
                          seq
                            xexpected.write "(Pdb) sys.path[0] is {os.path.realpath(cwd)}"
                            (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).xrun_pdb_script)).apply ((xscript)) ((xcommands)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((((xstdout).xsplit)).apply ("n"))) (2)).xrstrip)).apply ("r"))) ((xexpected)))
                xtest_issue42384_symlink.write
                  [xself]
                    memory > xdir_one
                    memory > xexpected
                    memory > xscript
                    memory > xcwd
                    memory > xdir_two
                    memory > xcommands
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xscript.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xcommands.write "cnq"
                        (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply)) ((xcwd)))
                          seq
                            xcwd.write (((((xos).xpath).xrealpath)).apply ((xcwd)))
                            xdir_one.write (((((xos).xpath).xjoin)).apply ((xcwd)) ("dir_one"))
                            xdir_two.write (((((xos).xpath).xjoin)).apply ((xcwd)) ("dir_two"))
                            xexpected.write "(Pdb) sys.path[0] is {dir_one}"
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xdir_one)))
                            (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xdir_one)) ("foo.py"))) ("w"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ((xscript)))
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xdir_two)))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((((((xos).xpath).xjoin)).apply ((xdir_one)) ("foo.py"))) ((((((xos).xpath).xjoin)).apply ((xdir_two)) ("foo.py"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ((((((xos).xpath).xjoin)).apply ("dir_two") ("foo.py"))))) ((xcommands)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((((xstdout).xsplit)).apply ("n"))) (2)).xrstrip)).apply ("r"))) ((xexpected)))
                xtest_issue42383.write
                  [xself]
                    memory > xwrong_file
                    memory > xs
                    memory > xexpected
                    memory > xsubdir
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply)) ((xcwd)))
                        seq
                          (((unsupported)).apply ((((xopen)).apply ("foo.py") ("w"))) ((xf)))
                            seq
                              xs.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ((xs)))
                          xsubdir.write (((((xos).xpath).xjoin)).apply ((xcwd)) ("subdir"))
                          bogusForceDataize.write ((((xos).xmkdir)).apply ((xsubdir)))
                          bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply ((xsubdir)) ("subdir"))))
                          xwrong_file.write (((((xos).xpath).xjoin)).apply ((xsubdir)) ("foo.py"))
                          (((unsupported)).apply ((((xopen)).apply ((xwrong_file)) ("w"))) ((xf)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("print(\"The wrong file was executed\")"))
                          (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xself).x_run_pdb)).apply ((((unsupported)).apply ("foo.py"))) ("cncnq"))))
                          xexpected.write "(Pdb) The correct file was executed"
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((((xstdout).xsplit)).apply ("n"))) (6)).xrstrip)).apply ("r"))) ((xexpected)))
            xload_tests.write
              []
                memory > xsuites
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xsuites.write (((unsupported)).apply (((((xunittest).xmakeSuite)).apply ((xPdbTestCase)))) (((((xdoctest).xDocTestSuite)).apply ((xtest_pdb)))))
                    (((unsupported)).apply (((((xunittest).xTestSuite)).apply ((xsuites)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)