memory > xfield
memory > xunique_for
memory > xChoiceField
memory > xModelFormOptions
memory > xTypeError
memory > xd
memory > xk
memory > xopt
memory > xformfield
memory > xlist
memory > xModelChoiceIteratorValue
memory > xForeignKey
memory > xmessage
memory > xInlineForeignKeyField
memory > xBaseModelForm
memory > xOuterRef
memory > xget_text_list
memory > xSelectMultiple
memory > xunique_checks
memory > xValueError
memory > xo
memory > xfrozenset
memory > xstr
memory > xQ
memory > xFieldError
memory > xValidationError
memory > xmessages
memory > xb
memory > xvalue
memory > xform
memory > xIndexError
memory > xKeyError
memory > xBaseForm
memory > xModelChoiceIterator
memory > xField
memory > xformset_factory
memory > xuclass
memory > xpk
memory > xdate_check
memory > xcallable
memory > xNON_FIELD_ERRORS
memory > xtype
memory > xf
memory > xset
memory > xgettext
memory > xlookup
memory > xHiddenInput
memory > xhasattr
memory > xproperty
memory > xdate_checks
memory > xExists
memory > xModelFormMetaclass
memory > xsuper
memory > xchain
memory > xtuple
memory > xcapfirst
memory > xsorted
memory > xMultipleHiddenInput
memory > xargs
memory > xobj
memory > xunique_check
memory > xDeclarativeFieldsMetaclass
memory > xval
memory > xgetattr
memory > xOneToOneField
memory > xv
memory > xBaseModelFormSet
memory > xModelChoiceField
memory > xe
memory > xsetattr
memory > xname
memory > xAutoField
memory > xstaticmethod
memory > xmodels
memory > xhash
memory > xImproperlyConfigured
memory > xBaseFormSet
memory > xkwargs
memory > xisinstance
memory > xRadioSelect
memory > xlen
[] > models
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_get_choices
        memory > x__iter__
        memory > x_existing_object
        memory > x_get_queryset
        memory > xmodelformset_factory
        memory > xprepare_value
        memory > x__all__
        memory > xqueryset
        memory > xconstruct_instance
        memory > x_get_validation_exclusions
        memory > xvalidate_unique
        memory > xclean
        memory > x__str__
        memory > x__deepcopy__
        memory > xmodelform_factory
        memory > xwidget
        memory > xALL_FIELDS
        memory > x__eq__
        memory > xhidden_widget
        memory > x_post_clean
        memory > x_update_errors
        memory > xadd_fields
        memory > xmodel_to_dict
        memory > xmodelform_defines_fields
        memory > x_set_queryset
        memory > xsave
        memory > xget_queryset
        memory > xapply_limit_choices_to_to_formfield
        memory > x_
        memory > xchoice
        memory > xget_default_prefix
        memory > xhas_changed
        memory > x_get_foreign_key
        memory > xdelete_existing
        memory > xsave_new_objects
        memory > x_check_values
        memory > xget_form_error
        memory > xsave_existing_objects
        memory > x_construct_form
        memory > xto_python
        memory > x_save_m2m
        memory > xvalidate
        memory > xget_unique_error_message
        memory > xunique_fields
        memory > xfields_for_model
        memory > xiterator
        memory > x_get_to_python
        memory > xget_limit_choices_to
        memory > xget_date_error_message
        memory > x__init__
        memory > xchoices
        memory > x__len__
        memory > xlabel_from_instance
        memory > x__hash__
        memory > xsave_existing
        memory > xinlineformset_factory
        memory > xsave_new
        memory > x__bool__
        memory > xmodel
        memory > xdefault_error_messages
        memory > xinitial_form_count
        memory > x__new__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("ModelForm") ("BaseModelForm") ("model_to_dict") ("fields_for_model") ("ModelChoiceField") ("ModelMultipleChoiceField") ("ALL_FIELDS") ("BaseModelFormSet") ("modelformset_factory") ("BaseInlineFormSet") ("inlineformset_factory") ("modelform_factory"))
            xALL_FIELDS.write "__all__"
            xconstruct_instance.write
              [xform xinstance xfields xexclude]
                memory > xfile_field_list
                memory > xopts
                memory > xcleaned_data
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    xopts.write ((xinstance).x_meta)
                    xcleaned_data.write ((xform).xcleaned_data)
                    xfile_field_list.write (((unsupported)).apply)
                    (((unsupported)).apply ((xf)) (((xopts).xfields)))
                      seq
                        (((((xf).xeditable).not).or (((xisinstance)).apply ((xf)) (((xmodels).xAutoField)))).or (((unsupported)).apply (((xf).xname)) ((xcleaned_data)))).if
                          (((unsupported)).apply)
                        ((((unsupported)).apply ((xfields)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xf).xname)) ((xfields)))).if
                          (((unsupported)).apply)
                        ((xexclude).and (((unsupported)).apply (((xf).xname)) ((xexclude)))).if
                          (((unsupported)).apply)
                        ((((((xf).xhas_default)).apply).and ((((((((unsupported)).apply ((xform)) (((xf).xname))).xfield).xwidget).xvalue_omitted_from_data)).apply (((xform).xdata)) (((xform).xfiles)) (((((xform).xadd_prefix)).apply (((xf).xname)))))).and (((unsupported)).apply (((((xcleaned_data).xget)).apply (((xf).xname)))) ((((((unsupported)).apply ((xform)) (((xf).xname))).xfield).xempty_values)))).if
                          (((unsupported)).apply)
                        (((xisinstance)).apply ((xf)) (((xmodels).xFileField))).if
                          bogusForceDataize.write ((((xfile_field_list).xappend)).apply ((xf)))
                          bogusForceDataize.write ((((xf).xsave_form_data)).apply ((xinstance)) ((((unsupported)).apply ((xcleaned_data)) (((xf).xname)))))
                    (((unsupported)).apply ((xf)) ((xfile_field_list)))
                      bogusForceDataize.write ((((xf).xsave_form_data)).apply ((xinstance)) ((((unsupported)).apply ((xcleaned_data)) (((xf).xname)))))
                    (((unsupported)).apply ((xinstance)))
            xmodel_to_dict.write
              [xinstance xfields xexclude]
                memory > xopts
                memory > xdata
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xopts.write ((xinstance).x_meta)
                    xdata.write (((unsupported)).apply)
                    (((unsupported)).apply ((xf)) ((((xchain)).apply (((xopts).xconcrete_fields)) (((xopts).xprivate_fields)) (((xopts).xmany_to_many)))))
                      seq
                        ((((xgetattr)).apply ((xf)) ("editable") (FALSE)).not).if
                          (((unsupported)).apply)
                        ((((unsupported)).apply ((xfields)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xf).xname)) ((xfields)))).if
                          (((unsupported)).apply)
                        ((xexclude).and (((unsupported)).apply (((xf).xname)) ((xexclude)))).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((xf).xname)))) (((((xf).xvalue_from_object)).apply ((xinstance)))))
                    (((unsupported)).apply ((xdata)))
            xapply_limit_choices_to_to_formfield.write
              [xformfield]
                memory > xlimit_choices_to
                memory > xcomplex_filter
                seq > @
                  seq
                    unsupported
                    seq
                      (((unsupported)).apply)
                      (((unsupported)).apply)
                      (((unsupported)).apply)
                    ((((xhasattr)).apply ((xformfield)) ("queryset")).and (((xhasattr)).apply ((xformfield)) ("get_limit_choices_to"))).if
                      seq
                        xlimit_choices_to.write ((((xformfield).xget_limit_choices_to)).apply)
                        (xlimit_choices_to).if
                          seq
                            xcomplex_filter.write (xlimit_choices_to)
                            ((((xisinstance)).apply ((xcomplex_filter)) ((xQ))).not).if
                              xcomplex_filter.write (((xQ)).apply ((((unsupported)).apply ((xlimit_choices_to)))))
                            (((unsupported)).apply ((xcomplex_filter)) ((((unsupported)).apply ((xQ)) ((((xOuterRef)).apply ("pk"))))))
                            (((unsupported)).apply (((xformfield).xqueryset)) ((((((xformfield).xqueryset).xfilter)).apply ((((xExists)).apply ((((((((xformfield).xqueryset).xmodel).x_base_manager).xfilter)).apply ((xcomplex_filter)))))))))
            xfields_for_model.write
              [xmodel xfields xexclude xwidgets xformfield_callback xlocalized_fields xlabels xhelp_texts xerror_messages xfield_classes xapply_limit_choices_to]
                memory > xformfield
                memory > xfield_dict
                memory > xopts
                memory > xsortable_private_fields
                memory > xModelField
                memory > xkwargs
                memory > xignored
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xfield_dict.write (((unsupported)).apply)
                    xignored.write (((unsupported)).apply)
                    xopts.write ((xmodel).x_meta)
                    (((unsupported)).apply)
                    xsortable_private_fields.write (((unsupported)).apply ((xf)) ((xf)) (((xopts).xprivate_fields)) ((((xisinstance)).apply ((xf)) ((xModelField)))))
                    (((unsupported)).apply ((xf)) ((((xsorted)).apply ((((xchain)).apply (((xopts).xconcrete_fields)) ((xsortable_private_fields)) (((xopts).xmany_to_many)))))))
                      seq
                        ((((xgetattr)).apply ((xf)) ("editable") (FALSE)).not).if
                          seq
                            (((((unsupported)).apply ((xfields)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xf).xname)) ((xfields)))).and ((((unsupported)).apply ((xexclude)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply (((xf).xname)) ((xexclude))))).if
                              (((unsupported)).apply ((((xFieldError)).apply (("'%s' cannot be specified for %s model form as it is a non-editable field".mod (((unsupported)).apply (((xf).xname)) (((xmodel).x__name__))))))))
                            (((unsupported)).apply)
                        ((((unsupported)).apply ((xfields)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xf).xname)) ((xfields)))).if
                          (((unsupported)).apply)
                        ((xexclude).and (((unsupported)).apply (((xf).xname)) ((xexclude)))).if
                          (((unsupported)).apply)
                        xkwargs.write (((unsupported)).apply)
                        ((xwidgets).and (((unsupported)).apply (((xf).xname)) ((xwidgets)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("widget"))) ((((unsupported)).apply ((xwidgets)) (((xf).xname)))))
                        (((xlocalized_fields).eq (xALL_FIELDS)).or ((xlocalized_fields).and (((unsupported)).apply (((xf).xname)) ((xlocalized_fields))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("localize"))) (TRUE))
                        ((xlabels).and (((unsupported)).apply (((xf).xname)) ((xlabels)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("label"))) ((((unsupported)).apply ((xlabels)) (((xf).xname)))))
                        ((xhelp_texts).and (((unsupported)).apply (((xf).xname)) ((xhelp_texts)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("help_text"))) ((((unsupported)).apply ((xhelp_texts)) (((xf).xname)))))
                        ((xerror_messages).and (((unsupported)).apply (((xf).xname)) ((xerror_messages)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("error_messages"))) ((((unsupported)).apply ((xerror_messages)) (((xf).xname)))))
                        ((xfield_classes).and (((unsupported)).apply (((xf).xname)) ((xfield_classes)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("form_class"))) ((((unsupported)).apply ((xfield_classes)) (((xf).xname)))))
                        (((unsupported)).apply ((xformfield_callback)) ("None: is there a None literal in the EO language?")).if
                          xformfield.write ((((xf).xformfield)).apply ((((unsupported)).apply ((xkwargs)))))
                          ((((xcallable)).apply ((xformfield_callback))).not).if
                            (((unsupported)).apply ((((xTypeError)).apply ("formfield_callback must be a function or callable"))))
                            xformfield.write (((xformfield_callback)).apply ((xf)) ((((unsupported)).apply ((xkwargs)))))
                        (xformfield).if
                          seq
                            (xapply_limit_choices_to).if
                              bogusForceDataize.write (((xapply_limit_choices_to_to_formfield)).apply ((xformfield)))
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_dict)) (((xf).xname)))) ((xformfield)))
                          bogusForceDataize.write ((((xignored).xappend)).apply (((xf).xname)))
                    (xfields).if
                      xfield_dict.write (((unsupported)).apply ((xf)) (((((xfield_dict).xget)).apply ((xf)))) ((xf)) ((xfields)) (((((xexclude).not).or (((unsupported)).apply ((xf)) ((xexclude)))).and (((unsupported)).apply ((xf)) ((xignored))))))
                    (((unsupported)).apply ((xfield_dict)))
            (((unsupported)).apply)
              x__init__.write
                [xself xoptions]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((xself).xmodel)) ((((xgetattr)).apply ((xoptions)) ("model") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xfields)) ((((xgetattr)).apply ((xoptions)) ("fields") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xexclude)) ((((xgetattr)).apply ((xoptions)) ("exclude") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xwidgets)) ((((xgetattr)).apply ((xoptions)) ("widgets") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xlocalized_fields)) ((((xgetattr)).apply ((xoptions)) ("localized_fields") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xlabels)) ((((xgetattr)).apply ((xoptions)) ("labels") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xhelp_texts)) ((((xgetattr)).apply ((xoptions)) ("help_texts") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xerror_messages)) ((((xgetattr)).apply ((xoptions)) ("error_messages") ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xself).xfield_classes)) ((((xgetattr)).apply ((xoptions)) ("field_classes") ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xDeclarativeFieldsMetaclass)))
              x__new__.write
                [xmcs xname xbases xattrs]
                  memory > xbase_formfield_callback
                  memory > xmessage
                  memory > xvalue
                  memory > xmsg
                  memory > xnew_class
                  memory > xnone_model_fields
                  memory > xformfield_callback
                  memory > xmissing_fields
                  memory > xopts
                  memory > xfields
                  seq > @
                    seq
                      xbase_formfield_callback.write "None: is there a None literal in the EO language?"
                      (((unsupported)).apply ((xb)) ((xbases)))
                        ((((xhasattr)).apply ((xb)) ("Meta")).and (((xhasattr)).apply (((xb).xMeta)) ("formfield_callback"))).if
                          seq
                            xbase_formfield_callback.write (((xb).xMeta).xformfield_callback)
                            (((unsupported)).apply)
                      xformfield_callback.write ((((xattrs).xpop)).apply ("formfield_callback") ((xbase_formfield_callback)))
                      xnew_class.write ((((((xsuper)).apply).x__new__)).apply ((xmcs)) ((xname)) ((xbases)) ((xattrs)))
                      ((xbases).eq (((unsupported)).apply ((xBaseModelForm)))).if
                        (((unsupported)).apply ((xnew_class)))
                      (((unsupported)).apply ((xopts)) (((xnew_class).x_meta)) ((((xModelFormOptions)).apply ((((xgetattr)).apply ((xnew_class)) ("Meta") ("None: is there a None literal in the EO language?"))))))
                      (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("fields") ("exclude") ("localized_fields"))))
                        seq
                          xvalue.write (((xgetattr)).apply ((xopts)) ((xopt)))
                          ((((xisinstance)).apply ((xvalue)) ((xstr))).and ((xvalue).neq (xALL_FIELDS))).if
                            seq
                              xmsg.write ("%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?".mod (((unsupported)).apply ("model") (((xnew_class).x__name__)) ("opt") ((xopt)) ("value") ((xvalue))))
                              (((unsupported)).apply ((((xTypeError)).apply ((xmsg)))))
                      ((xopts).xmodel).if
                        seq
                          ((((unsupported)).apply (((xopts).xfields)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((xopts).xexclude)) ("None: is there a None literal in the EO language?"))).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Creating a ModelForm without either the 'fields' attribute or the 'exclude' attribute is prohibited; form %s needs updating.".mod (xname))))))
                          (((xopts).xfields).eq (xALL_FIELDS)).if
                            (((unsupported)).apply (((xopts).xfields)) ("None: is there a None literal in the EO language?"))
                          xfields.write (((unsupported)).apply ((xfields_for_model)) (((xopts).xmodel)) (((xopts).xfields)) (((xopts).xexclude)) (((xopts).xwidgets)) ((xformfield_callback)) (((xopts).xlocalized_fields)) (((xopts).xlabels)) (((xopts).xhelp_texts)) (((xopts).xerror_messages)) (((xopts).xfield_classes)) (FALSE))
                          xnone_model_fields.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xv)))) (((((xfields).xitems)).apply)) (((xv).not)))
                          xmissing_fields.write ((((xnone_model_fields).xdifference)).apply (((xnew_class).xdeclared_fields)))
                          (xmissing_fields).if
                            seq
                              xmessage.write "Unknown field(s) (%s) specified for %s"
                              xmessage.write ((xmessage).mod (((unsupported)).apply ((((", ".xjoin)).apply ((xmissing_fields)))) ((((xopts).xmodel).x__name__))))
                              (((unsupported)).apply ((((xFieldError)).apply ((xmessage)))))
                          bogusForceDataize.write ((((xfields).xupdate)).apply (((xnew_class).xdeclared_fields)))
                        xfields.write ((xnew_class).xdeclared_fields)
                      (((unsupported)).apply (((xnew_class).xbase_fields)) ((xfields)))
                      (((unsupported)).apply ((xnew_class)))
            (((unsupported)).apply ((xBaseForm)))
              seq
                x__init__.write
                  [xself xdata xfiles xauto_id xprefix xinitial xerror_class xlabel_suffix xempty_permitted xinstance xuse_required_attribute xrenderer]
                    memory > xobject_data
                    memory > xopts
                    seq > @
                      (((unsupported)).apply)
                        xopts.write ((xself).x_meta)
                        (((unsupported)).apply (((xopts).xmodel)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xValueError)).apply ("ModelForm has no model class specified."))))
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xself).xinstance)) (((((xopts).xmodel)).apply)))
                            xobject_data.write (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                            xobject_data.write (((xmodel_to_dict)).apply ((xinstance)) (((xopts).xfields)) (((xopts).xexclude)))
                        (((unsupported)).apply ((xinitial)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xobject_data).xupdate)).apply ((xinitial)))
                        (((unsupported)).apply (((xself).x_validate_unique)) (FALSE))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xdata)) ((xfiles)) ((xauto_id)) ((xprefix)) ((xobject_data)) ((xerror_class)) ((xlabel_suffix)) ((xempty_permitted)) ((xuse_required_attribute)) ((xrenderer)))
                        (((unsupported)).apply ((xformfield)) ((((((xself).xfields).xvalues)).apply)))
                          bogusForceDataize.write (((xapply_limit_choices_to_to_formfield)).apply ((xformfield)))
                x_get_validation_exclusions.write
                  [xself]
                    memory > xfield_value
                    memory > xfield
                    memory > xform_field
                    memory > xexclude
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xexclude.write (((xset)).apply)
                        (((unsupported)).apply ((xf)) (((((xself).xinstance).x_meta).xfields)))
                          seq
                            xfield.write ((xf).xname)
                            (((unsupported)).apply ((xfield)) (((xself).xfields))).if
                              bogusForceDataize.write ((((xexclude).xadd)).apply (((xf).xname)))
                              ((((xself).x_meta).xfields).and (((unsupported)).apply ((xfield)) ((((xself).x_meta).xfields)))).if
                                bogusForceDataize.write ((((xexclude).xadd)).apply (((xf).xname)))
                                ((((xself).x_meta).xexclude).and (((unsupported)).apply ((xfield)) ((((xself).x_meta).xexclude)))).if
                                  bogusForceDataize.write ((((xexclude).xadd)).apply (((xf).xname)))
                                  (((unsupported)).apply ((xfield)) (((xself).x_errors))).if
                                    bogusForceDataize.write ((((xexclude).xadd)).apply (((xf).xname)))
                                    seq
                                      xform_field.write (((unsupported)).apply (((xself).xfields)) ((xfield)))
                                      xfield_value.write (((((xself).xcleaned_data).xget)).apply ((xfield)))
                                      (((((xf).xblank).not).and (((xform_field).xrequired).not)).and (((unsupported)).apply ((xfield_value)) (((xform_field).xempty_values)))).if
                                        bogusForceDataize.write ((((xexclude).xadd)).apply (((xf).xname)))
                        (((unsupported)).apply ((xexclude)))
                xclean.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_validate_unique)) (TRUE))
                        (((unsupported)).apply (((xself).xcleaned_data)))
                x_update_errors.write
                  [xself xerrors]
                    memory > xerror_dict
                    memory > xopts
                    memory > xerror_messages
                    seq > @
                      seq
                        xopts.write ((xself).x_meta)
                        (((xhasattr)).apply ((xerrors)) ("error_dict")).if
                          xerror_dict.write ((xerrors).xerror_dict)
                          xerror_dict.write (((unsupported)).apply ((xNON_FIELD_ERRORS)) ((xerrors)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xmessages)))) (((((xerror_dict).xitems)).apply)))
                          seq
                            ((((xfield).eq (xNON_FIELD_ERRORS)).and ((xopts).xerror_messages)).and (((unsupported)).apply ((xNON_FIELD_ERRORS)) (((xopts).xerror_messages)))).if
                              xerror_messages.write (((unsupported)).apply (((xopts).xerror_messages)) ((xNON_FIELD_ERRORS)))
                              (((unsupported)).apply ((xfield)) (((xself).xfields))).if
                                xerror_messages.write ((((unsupported)).apply (((xself).xfields)) ((xfield))).xerror_messages)
                                (((unsupported)).apply)
                            (((unsupported)).apply ((xmessage)) ((xmessages)))
                              ((((xisinstance)).apply ((xmessage)) ((xValidationError))).and (((unsupported)).apply (((xmessage).xcode)) ((xerror_messages)))).if
                                (((unsupported)).apply (((xmessage).xmessage)) ((((unsupported)).apply ((xerror_messages)) (((xmessage).xcode)))))
                        bogusForceDataize.write ((((xself).xadd_error)).apply ("None: is there a None literal in the EO language?") ((xerrors)))
                x_post_clean.write
                  [xself]
                    memory > xopts
                    memory > xexclude
                    seq > @
                      seq
                        xopts.write ((xself).x_meta)
                        xexclude.write ((((xself).x_get_validation_exclusions)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfield)))) ((((((xself).xfields).xitems)).apply)))
                          (((xisinstance)).apply ((xfield)) ((xInlineForeignKeyField))).if
                            bogusForceDataize.write ((((xexclude).xadd)).apply ((xname)))
                        (((unsupported)).apply ((xValidationError)))
                          (((unsupported)).apply (((xself).xinstance)) ((((xconstruct_instance)).apply ((xself)) (((xself).xinstance)) (((xopts).xfields)) (((xopts).xexclude)))))
                          bogusForceDataize.write ((((xself).x_update_errors)).apply ((xe)))
                        (((unsupported)).apply ((xValidationError)))
                          (((unsupported)).apply ((((xself).xinstance).xfull_clean)) ((xexclude)) (FALSE))
                          bogusForceDataize.write ((((xself).x_update_errors)).apply ((xe)))
                        ((xself).x_validate_unique).if
                          bogusForceDataize.write ((((xself).xvalidate_unique)).apply)
                xvalidate_unique.write
                  [xself]
                    memory > xexclude
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xexclude.write ((((xself).x_get_validation_exclusions)).apply)
                        (((unsupported)).apply ((xValidationError)))
                          (((unsupported)).apply ((((xself).xinstance).xvalidate_unique)) ((xexclude)))
                          bogusForceDataize.write ((((xself).x_update_errors)).apply ((xe)))
                x_save_m2m.write
                  [xself]
                    memory > xopts
                    memory > xcleaned_data
                    memory > xfields
                    memory > xexclude
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcleaned_data.write ((xself).xcleaned_data)
                        xexclude.write (((xself).x_meta).xexclude)
                        xfields.write (((xself).x_meta).xfields)
                        xopts.write (((xself).xinstance).x_meta)
                        (((unsupported)).apply ((xf)) ((((xchain)).apply (((xopts).xmany_to_many)) (((xopts).xprivate_fields)))))
                          seq
                            ((((xhasattr)).apply ((xf)) ("save_form_data")).not).if
                              (((unsupported)).apply)
                            ((xfields).and (((unsupported)).apply (((xf).xname)) ((xfields)))).if
                              (((unsupported)).apply)
                            ((xexclude).and (((unsupported)).apply (((xf).xname)) ((xexclude)))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply (((xf).xname)) ((xcleaned_data))).if
                              bogusForceDataize.write ((((xf).xsave_form_data)).apply (((xself).xinstance)) ((((unsupported)).apply ((xcleaned_data)) (((xf).xname)))))
                xsave.write
                  [xself xcommit]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xself).xerrors).if
                          (((unsupported)).apply ((((xValueError)).apply (("The %s could not be %s because the data didn't validate.".mod (((unsupported)).apply (((((xself).xinstance).x_meta).xobject_name)) ((((((xself).xinstance).x_state).xadding).if "created" "changed"))))))))
                        (xcommit).if
                          seq
                            bogusForceDataize.write (((((xself).xinstance).xsave)).apply)
                            bogusForceDataize.write ((((xself).x_save_m2m)).apply)
                          (((unsupported)).apply (((xself).xsave_m2m)) (((xself).x_save_m2m)))
                        (((unsupported)).apply (((xself).xinstance)))
                (((unsupported)).apply (((xsave).xalters_data)) (TRUE))
            (((unsupported)).apply ((xBaseModelForm)) ((xModelFormMetaclass)))
            xmodelform_factory.write
              [xmodel xform xfields xexclude xformfield_callback xwidgets xlocalized_fields xlabels xhelp_texts xerror_messages xfield_classes]
                memory > xattrs
                memory > xbases
                memory > xMeta
                memory > xclass_name
                memory > xform_class_attrs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xattrs.write (((unsupported)).apply ("model") ((xmodel)))
                    (((unsupported)).apply ((xfields)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("fields"))) ((xfields)))
                    (((unsupported)).apply ((xexclude)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("exclude"))) ((xexclude)))
                    (((unsupported)).apply ((xwidgets)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("widgets"))) ((xwidgets)))
                    (((unsupported)).apply ((xlocalized_fields)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("localized_fields"))) ((xlocalized_fields)))
                    (((unsupported)).apply ((xlabels)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("labels"))) ((xlabels)))
                    (((unsupported)).apply ((xhelp_texts)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("help_texts"))) ((xhelp_texts)))
                    (((unsupported)).apply ((xerror_messages)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("error_messages"))) ((xerror_messages)))
                    (((unsupported)).apply ((xfield_classes)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("field_classes"))) ((xfield_classes)))
                    xbases.write ((((xhasattr)).apply ((xform)) ("Meta")).if (((unsupported)).apply (((xform).xMeta))) (((unsupported)).apply))
                    xMeta.write (((xtype)).apply ("Meta") ((xbases)) ((xattrs)))
                    (xformfield_callback).if
                      (((unsupported)).apply (((xMeta).xformfield_callback)) ((((xstaticmethod)).apply ((xformfield_callback)))))
                    xclass_name.write (((xmodel).x__name__).add "Form")
                    xform_class_attrs.write (((unsupported)).apply ("Meta") ((xMeta)) ("formfield_callback") ((xformfield_callback)))
                    ((((unsupported)).apply ((((xgetattr)).apply ((xMeta)) ("fields") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((xgetattr)).apply ((xMeta)) ("exclude") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."))))
                    (((unsupported)).apply ((((((xtype)).apply ((xform)))).apply ((xclass_name)) ((((unsupported)).apply ((xform)))) ((xform_class_attrs)))))
            (((unsupported)).apply ((xBaseFormSet)))
              seq
                (((unsupported)).apply)
                xmodel.write "None: is there a None literal in the EO language?"
                xunique_fields.write (((xset)).apply)
                x__init__.write
                  [xself xdata xfiles xauto_id xprefix xqueryset xinitial]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xqueryset)) ((xqueryset)))
                        (((unsupported)).apply (((xself).xinitial_extra)) ((xinitial)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((((unsupported)).apply ("data") ((xdata)) ("files") ((xfiles)) ("auto_id") ((xauto_id)) ("prefix") ((xprefix)) ((xkwargs)))))))
                xinitial_form_count.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).xis_bound).not).if
                          (((unsupported)).apply ((((xlen)).apply (((((xself).xget_queryset)).apply)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xinitial_form_count)).apply)))
                x_existing_object.write
                  [xself xpk]
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("_object_dict")).not).if
                          (((unsupported)).apply (((xself).x_object_dict)) ((((unsupported)).apply (((xo).xpk)) ((xo)) ((xo)) (((((xself).xget_queryset)).apply)))))
                        (((unsupported)).apply ((((((xself).x_object_dict).xget)).apply ((xpk)))))
                x_get_to_python.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        while.
                          (((unsupported)).apply (((xfield).xremote_field)) ("None: is there a None literal in the EO language?"))
                          [unused]
                            seq > @
                              xfield.write (((((xfield).xremote_field).xget_related_field)).apply)
                        (((unsupported)).apply (((xfield).xto_python)))
                x_construct_form.write
                  [xself xi]
                    memory > xpk_key
                    memory > xform
                    memory > xpk
                    memory > xto_python
                    memory > xpk_required
                    seq > @
                      (((unsupported)).apply)
                        xpk_required.write ((xi).less ((((xself).xinitial_form_count)).apply))
                        (xpk_required).if
                          ((xself).xis_bound).if
                            seq
                              xpk_key.write ("%s-%s".mod (((unsupported)).apply (((((xself).xadd_prefix)).apply ((xi)))) ((((((xself).xmodel).x_meta).xpk).xname))))
                              (((unsupported)).apply ((xKeyError)))
                                xpk.write (((unsupported)).apply (((xself).xdata)) ((xpk_key)))
                                seq
                                  xto_python.write ((((xself).x_get_to_python)).apply (((((xself).xmodel).x_meta).xpk)))
                                  (((unsupported)).apply ((xValidationError)))
                                    xpk.write (((xto_python)).apply ((xpk)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("instance"))) (((((xself).x_existing_object)).apply ((xpk)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("instance"))) ((((unsupported)).apply (((((xself).xget_queryset)).apply)) ((xi)))))
                          ((xself).xinitial_extra).if
                            (((unsupported)).apply ((xIndexError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("initial"))) ((((unsupported)).apply (((xself).xinitial_extra)) (((xi).sub ((((xself).xinitial_form_count)).apply))))))
                        xform.write ((((((xsuper)).apply).x_construct_form)).apply ((xi)) ((((unsupported)).apply ((xkwargs)))))
                        (xpk_required).if
                          (((unsupported)).apply (((((unsupported)).apply (((xform).xfields)) ((((((xself).xmodel).x_meta).xpk).xname))).xrequired)) (TRUE))
                        (((unsupported)).apply ((xform)))
                xget_queryset.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("_queryset")).not).if
                          seq
                            (((unsupported)).apply (((xself).xqueryset)) ("None: is there a None literal in the EO language?")).if
                              xqs.write ((xself).xqueryset)
                              xqs.write ((((((xself).xmodel).x_default_manager).xget_queryset)).apply)
                            (((xqs).xordered).not).if
                              xqs.write ((((xqs).xorder_by)).apply ((((((xself).xmodel).x_meta).xpk).xname)))
                            (((unsupported)).apply (((xself).x_queryset)) ((xqs)))
                        (((unsupported)).apply (((xself).x_queryset)))
                xsave_new.write
                  [xself xform xcommit]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xform).xsave)) ((xcommit)))))
                xsave_existing.write
                  [xself xform xinstance xcommit]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xform).xsave)) ((xcommit)))))
                xdelete_existing.write
                  [xself xobj xcommit]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (xcommit).if
                          bogusForceDataize.write ((((xobj).xdelete)).apply)
                xsave.write
                  [xself xcommit]
                    memory > xsave_m2m
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xcommit).not).if
                          seq
                            (((unsupported)).apply (((xself).xsaved_forms)) ((((unsupported)).apply)))
                            xsave_m2m.write
                              []
                                seq > @
                                  (((unsupported)).apply ((xform)) (((xself).xsaved_forms)))
                                    bogusForceDataize.write ((((xform).xsave_m2m)).apply)
                            (((unsupported)).apply (((xself).xsave_m2m)) ((xsave_m2m)))
                        ((xself).xedit_only).if
                          (((unsupported)).apply (((((xself).xsave_existing_objects)).apply ((xcommit)))))
                          (((unsupported)).apply ((((((xself).xsave_existing_objects)).apply ((xcommit))).add ((((xself).xsave_new_objects)).apply ((xcommit))))))
                (((unsupported)).apply (((xsave).xalters_data)) (TRUE))
                xclean.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xvalidate_unique)).apply)
                xvalidate_unique.write
                  [xself]
                    memory > xvalid_forms
                    memory > xdata
                    memory > xexclude
                    memory > xerrors
                    memory > xrow_data
                    memory > xall_date_checks
                    memory > xall_unique_checks
                    memory > xseen_data
                    memory > xdate_data
                    memory > xforms_to_delete
                    memory > xdate
                    seq > @
                      seq
                        xall_unique_checks.write (((xset)).apply)
                        xall_date_checks.write (((xset)).apply)
                        xforms_to_delete.write ((xself).xdeleted_forms)
                        xvalid_forms.write (((unsupported)).apply ((xform)) ((xform)) (((xself).xforms)) ((((((xform).xis_valid)).apply).and (((unsupported)).apply ((xform)) ((xforms_to_delete))))))
                        (((unsupported)).apply ((xform)) ((xvalid_forms)))
                          seq
                            xexclude.write ((((xform).x_get_validation_exclusions)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xunique_checks)) ((xdate_checks)))) ((((unsupported)).apply ((((xform).xinstance).x_get_unique_checks)) ((xexclude)))))
                            bogusForceDataize.write ((((xall_unique_checks).xupdate)).apply ((xunique_checks)))
                            bogusForceDataize.write ((((xall_date_checks).xupdate)).apply ((xdate_checks)))
                        xerrors.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xuclass)) ((xunique_check)))) ((xall_unique_checks)))
                          seq
                            xseen_data.write (((xset)).apply)
                            (((unsupported)).apply ((xform)) ((xvalid_forms)))
                              seq
                                xrow_data.write (((unsupported)).apply (((((unsupported)).apply ((xfield)) (((xself).xunique_fields))).if (xfield) (((unsupported)).apply (((xform).xcleaned_data)) ((xfield))))) ((xfield)) ((xunique_check)) ((((unsupported)).apply ((xfield)) (((xform).xcleaned_data)))))
                                xrow_data.write (((xtuple)).apply ((((unsupported)).apply (((((xhasattr)).apply ((xd)) ("_get_pk_val")).if ((((xd).x_get_pk_val)).apply) ((((xisinstance)).apply ((xd)) ((xlist))).if (((xtuple)).apply ((xd))) (xd)))) ((xd)) ((xrow_data)))))
                                ((xrow_data).and (((unsupported)).apply ("None: is there a None literal in the EO language?") ((xrow_data)))).if
                                  seq
                                    (((unsupported)).apply ((xrow_data)) ((xseen_data))).if
                                      seq
                                        bogusForceDataize.write ((((xerrors).xappend)).apply (((((xself).xget_unique_error_message)).apply ((xunique_check)))))
                                        (((unsupported)).apply ((((unsupported)).apply (((xform).x_errors)) ((xNON_FIELD_ERRORS)))) ((((unsupported)).apply (((xself).xerror_class)) ((((unsupported)).apply (((((xself).xget_form_error)).apply)))) (((xself).xrenderer)))))
                                        (((unsupported)).apply ((xfield)) ((xunique_check)))
                                          (((unsupported)).apply ((xfield)) (((xform).xcleaned_data))).if
                                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xfield)))))))
                                    bogusForceDataize.write ((((xseen_data).xadd)).apply ((xrow_data)))
                        (((unsupported)).apply ((xdate_check)) ((xall_date_checks)))
                          seq
                            xseen_data.write (((xset)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xuclass)) ((xlookup)) ((xfield)) ((xunique_for)))) ((xdate_check)))
                            (((unsupported)).apply ((xform)) ((xvalid_forms)))
                              ((((xform).xcleaned_data).and (((unsupported)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xfield)))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xunique_for)))) ("None: is there a None literal in the EO language?"))).if
                                seq
                                  ((xlookup).eq "date").if
                                    seq
                                      xdate.write (((unsupported)).apply (((xform).xcleaned_data)) ((xunique_for)))
                                      xdate_data.write (((unsupported)).apply (((xdate).xyear)) (((xdate).xmonth)) (((xdate).xday)))
                                    xdate_data.write (((unsupported)).apply ((((xgetattr)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xunique_for)))) ((xlookup)))))
                                  xdata.write ((((unsupported)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xfield))))).add (xdate_data))
                                  (((unsupported)).apply ((xdata)) ((xseen_data))).if
                                    seq
                                      bogusForceDataize.write ((((xerrors).xappend)).apply (((((xself).xget_date_error_message)).apply ((xdate_check)))))
                                      (((unsupported)).apply ((((unsupported)).apply (((xform).x_errors)) ((xNON_FIELD_ERRORS)))) ((((unsupported)).apply (((xself).xerror_class)) ((((unsupported)).apply (((((xself).xget_form_error)).apply)))) (((xself).xrenderer)))))
                                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ((xfield)))))))
                                  bogusForceDataize.write ((((xseen_data).xadd)).apply ((xdata)))
                        (xerrors).if
                          (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
                xget_unique_error_message.write
                  [xself xunique_check]
                    seq > @
                      ((((xlen)).apply ((xunique_check))).eq 1).if
                        (((unsupported)).apply (((((xgettext)).apply ("Please correct the duplicate data for %(field)s.")).mod (((unsupported)).apply ("field") ((((unsupported)).apply ((xunique_check)) (0)))))))
                        (((unsupported)).apply (((((xgettext)).apply ("Please correct the duplicate data for %(field)s, which must be unique.")).mod (((unsupported)).apply ("field") ((((xget_text_list)).apply ((xunique_check)) ((((x_)).apply ("and")))))))))
                xget_date_error_message.write
                  [xself xdate_check]
                    seq > @
                      (((unsupported)).apply (((((xgettext)).apply ("Please correct the duplicate data for %(field_name)s which must be unique for the %(lookup)s in %(date_field)s.")).mod (((unsupported)).apply ("field_name") ((((unsupported)).apply ((xdate_check)) (2))) ("date_field") ((((unsupported)).apply ((xdate_check)) (3))) ("lookup") ((((xstr)).apply ((((unsupported)).apply ((xdate_check)) (1)))))))))
                xget_form_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xgettext)).apply ("Please correct the duplicate values below."))))
                xsave_existing_objects.write
                  [xself xcommit]
                    memory > xforms_to_delete
                    memory > xsaved_instances
                    memory > xobj
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xchanged_objects)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xdeleted_objects)) ((((unsupported)).apply)))
                        (((xself).xinitial_forms).not).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        xsaved_instances.write (((unsupported)).apply)
                        xforms_to_delete.write ((xself).xdeleted_forms)
                        (((unsupported)).apply ((xform)) (((xself).xinitial_forms)))
                          seq
                            xobj.write ((xform).xinstance)
                            (((unsupported)).apply (((xobj).xpk)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xform)) ((xforms_to_delete))).if
                              seq
                                bogusForceDataize.write (((((xself).xdeleted_objects).xappend)).apply ((xobj)))
                                (((unsupported)).apply (((xself).xdelete_existing)) ((xobj)) ((xcommit)))
                              ((((xform).xhas_changed)).apply).if
                                seq
                                  bogusForceDataize.write (((((xself).xchanged_objects).xappend)).apply ((((unsupported)).apply ((xobj)) (((xform).xchanged_data)))))
                                  bogusForceDataize.write ((((xsaved_instances).xappend)).apply ((((unsupported)).apply (((xself).xsave_existing)) ((xform)) ((xobj)) ((xcommit)))))
                                  ((xcommit).not).if
                                    bogusForceDataize.write (((((xself).xsaved_forms).xappend)).apply ((xform)))
                        (((unsupported)).apply ((xsaved_instances)))
                xsave_new_objects.write
                  [xself xcommit]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xnew_objects)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xform)) (((xself).xextra_forms)))
                          seq
                            (((((xform).xhas_changed)).apply).not).if
                              (((unsupported)).apply)
                            (((xself).xcan_delete).and ((((xself).x_should_delete_form)).apply ((xform)))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xnew_objects).xappend)).apply ((((unsupported)).apply (((xself).xsave_new)) ((xform)) ((xcommit)))))
                            ((xcommit).not).if
                              bogusForceDataize.write (((((xself).xsaved_forms).xappend)).apply ((xform)))
                        (((unsupported)).apply (((xself).xnew_objects)))
                xadd_fields.write
                  [xself xform xindex]
                    memory > xpk_value
                    memory > xpk
                    memory > xpk_is_not_editable
                    memory > xqs
                    memory > xwidget
                    seq > @
                      seq
                        unsupported
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_pk_field)) ((xpk)) (((((xself).xmodel).x_meta).xpk)))
                        xpk_is_not_editable.write
                          [xpk]
                            seq > @
                              (((unsupported)).apply ((((((xpk).xeditable).not).or (((xpk).xauto_created).or (((xisinstance)).apply ((xpk)) ((xAutoField))))).or ((((xpk).xremote_field).and (((xpk).xremote_field).xparent_link)).and (((xpk_is_not_editable)).apply ((((((xpk).xremote_field).xmodel).x_meta).xpk)))))))
                        ((((xpk_is_not_editable)).apply ((xpk))).or (((unsupported)).apply (((xpk).xname)) (((xform).xfields)))).if
                          seq
                            ((xform).xis_bound).if
                              xpk_value.write (((((xform).xinstance).x_state).xadding).if "None: is there a None literal in the EO language?" (((xform).xinstance).xpk))
                              (((unsupported)).apply ((xIndexError)))
                                (((unsupported)).apply ((xindex)) ("None: is there a None literal in the EO language?")).if
                                  xpk_value.write ((((unsupported)).apply (((((xself).xget_queryset)).apply)) ((xindex))).xpk)
                                  xpk_value.write "None: is there a None literal in the EO language?"
                                xpk_value.write "None: is there a None literal in the EO language?"
                            (((xisinstance)).apply ((xpk)) ((((unsupported)).apply ((xForeignKey)) ((xOneToOneField))))).if
                              xqs.write (((((((xpk).xremote_field).xmodel).x_default_manager).xget_queryset)).apply)
                              xqs.write ((((((xself).xmodel).x_default_manager).xget_queryset)).apply)
                            xqs.write ((((xqs).xusing)).apply (((((xform).xinstance).x_state).xdb)))
                            (((xform).x_meta).xwidgets).if
                              xwidget.write ((((((xform).x_meta).xwidgets).xget)).apply ((((xself).x_pk_field).xname)) ((xHiddenInput)))
                              xwidget.write (xHiddenInput)
                            (((unsupported)).apply ((((unsupported)).apply (((xform).xfields)) ((((xself).x_pk_field).xname)))) ((((unsupported)).apply ((xModelChoiceField)) ((xqs)) ((xpk_value)) (FALSE) ((xwidget)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xadd_fields)).apply ((xform)) ((xindex)))
            xmodelformset_factory.write
              [xmodel xform xformfield_callback xformset xextra xcan_delete xcan_order xmax_num xfields xexclude xwidgets xvalidate_max xlocalized_fields xlabels xhelp_texts xerror_messages xmin_num xvalidate_min xfield_classes xabsolute_max xcan_delete_extra xrenderer xedit_only]
                memory > xFormSet
                memory > xmeta
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xmeta.write (((xgetattr)).apply ((xform)) ("Meta") ("None: is there a None literal in the EO language?"))
                    ((((unsupported)).apply ((((xgetattr)).apply ((xmeta)) ("fields") ((xfields)))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((xgetattr)).apply ((xmeta)) ("exclude") ((xexclude)))) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ((((xImproperlyConfigured)).apply ("Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited."))))
                    xform.write (((unsupported)).apply ((xmodelform_factory)) ((xmodel)) ((xform)) ((xfields)) ((xexclude)) ((xformfield_callback)) ((xwidgets)) ((xlocalized_fields)) ((xlabels)) ((xhelp_texts)) ((xerror_messages)) ((xfield_classes)))
                    xFormSet.write (((unsupported)).apply ((xformset_factory)) ((xform)) ((xformset)) ((xextra)) ((xmin_num)) ((xmax_num)) ((xcan_order)) ((xcan_delete)) ((xvalidate_min)) ((xvalidate_max)) ((xabsolute_max)) ((xcan_delete_extra)) ((xrenderer)))
                    (((unsupported)).apply (((xFormSet).xmodel)) ((xmodel)))
                    (((unsupported)).apply (((xFormSet).xedit_only)) ((xedit_only)))
                    (((unsupported)).apply ((xFormSet)))
            (((unsupported)).apply ((xBaseModelFormSet)))
              seq
                unsupported
                x__init__.write
                  [xself xdata xfiles xinstance xsave_as_new xprefix xqueryset]
                    memory > xqs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xinstance)) (((((((xself).xfk).xremote_field).xmodel)).apply)))
                          (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                        (((unsupported)).apply (((xself).xsave_as_new)) ((xsave_as_new)))
                        (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                          xqueryset.write (((xself).xmodel).x_default_manager)
                        (((unsupported)).apply ((((xself).xinstance).xpk)) ("None: is there a None literal in the EO language?")).if
                          xqs.write ((((xqueryset).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xfk).xname)) (((xself).xinstance)))))))
                          xqs.write ((((xqueryset).xnone)).apply)
                        (((unsupported)).apply (((xself).xunique_fields)) ((((unsupported)).apply ((((xself).xfk).xname)))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xdata)) ((xfiles)) ((xprefix)) ((xqs)) ((((unsupported)).apply ((xkwargs)))))
                        (((((xself).xform).x_meta).xfields).and (((unsupported)).apply ((((xself).xfk).xname)) (((((xself).xform).x_meta).xfields)))).if
                          seq
                            (((xisinstance)).apply (((((xself).xform).x_meta).xfields)) ((xtuple))).if
                              (((unsupported)).apply (((((xself).xform).x_meta).xfields)) ((((xlist)).apply (((((xself).xform).x_meta).xfields)))))
                            bogusForceDataize.write (((((((xself).xform).x_meta).xfields).xappend)).apply ((((xself).xfk).xname)))
                xinitial_form_count.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xsave_as_new).if
                          (((unsupported)).apply (0))
                        (((unsupported)).apply (((((((xsuper)).apply).xinitial_form_count)).apply)))
                x_construct_form.write
                  [xself xi]
                    memory > xfk_value
                    memory > xmutable
                    memory > xform
                    seq > @
                      (((unsupported)).apply)
                        xform.write ((((((xsuper)).apply).x_construct_form)).apply ((xi)) ((((unsupported)).apply ((xkwargs)))))
                        ((xself).xsave_as_new).if
                          seq
                            xmutable.write (((xgetattr)).apply (((xform).xdata)) ("_mutable") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xmutable)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((xform).xdata).x_mutable)) (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply (((xform).xdata)) (((((xform).xadd_prefix)).apply ((((xself).x_pk_field).xname)))))) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((unsupported)).apply (((xform).xdata)) (((((xform).xadd_prefix)).apply ((((xself).xfk).xname)))))) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xmutable)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((xform).xdata).x_mutable)) ((xmutable)))
                        xfk_value.write (((xself).xinstance).xpk)
                        (((((xself).xfk).xremote_field).xfield_name).neq (((((((xself).xfk).xremote_field).xmodel).x_meta).xpk).xname)).if
                          seq
                            xfk_value.write (((xgetattr)).apply (((xself).xinstance)) (((((xself).xfk).xremote_field).xfield_name)))
                            xfk_value.write (((xgetattr)).apply ((xfk_value)) ("pk") ((xfk_value)))
                        bogusForceDataize.write (((xsetattr)).apply (((xform).xinstance)) ((((((xself).xfk).xget_attname)).apply)) ((xfk_value)))
                        (((unsupported)).apply ((xform)))
                xget_default_prefix.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((unsupported)).apply (((((xcls).xfk).xremote_field).xget_accessor_name)) (((xcls).xmodel))).xreplace)).apply ("+") (""))))
                xsave_new.write
                  [xself xform xcommit]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xsetattr)).apply (((xform).xinstance)) ((((xself).xfk).xname)) (((xself).xinstance)))
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xsave_new)) ((xform)) ((xcommit)))))
                xadd_fields.write
                  [xself xform xindex]
                    memory > xname
                    memory > xto_field
                    memory > xkwargs
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xadd_fields)).apply ((xform)) ((xindex)))
                        (((xself).x_pk_field).eq ((xself).xfk)).if
                          seq
                            xname.write (((xself).x_pk_field).xname)
                            xkwargs.write (((unsupported)).apply ("pk_field") (TRUE))
                          seq
                            xname.write (((xself).xfk).xname)
                            xkwargs.write (((unsupported)).apply ("label") ((((xgetattr)).apply ((((((xform).xfields).xget)).apply ((xname)))) ("label") ((((xcapfirst)).apply ((((xself).xfk).xverbose_name)))))))
                        (((((xself).xfk).xremote_field).xfield_name).neq (((((((xself).xfk).xremote_field).xmodel).x_meta).xpk).xname)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("to_field"))) (((((xself).xfk).xremote_field).xfield_name)))
                        ((((xself).xinstance).x_state).xadding).if
                          seq
                            (((unsupported)).apply (((((xkwargs).xget)).apply ("to_field"))) ("None: is there a None literal in the EO language?")).if
                              xto_field.write ((((((xself).xinstance).x_meta).xget_field)).apply ((((unsupported)).apply ((xkwargs)) ("to_field"))))
                              xto_field.write ((((xself).xinstance).x_meta).xpk)
                            ((((xto_field).xhas_default)).apply).if
                              bogusForceDataize.write (((xsetattr)).apply (((xself).xinstance)) (((xto_field).xattname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply (((xform).xfields)) ((xname)))) ((((xInlineForeignKeyField)).apply (((xself).xinstance)) ((((unsupported)).apply ((xkwargs)))))))
                xget_unique_error_message.write
                  [xself xunique_check]
                    seq > @
                      seq
                        xunique_check.write (((unsupported)).apply ((xfield)) ((xfield)) ((xunique_check)) (((xfield).neq (((xself).xfk).xname))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_unique_error_message)).apply ((xunique_check)))))
            x_get_foreign_key.write
              [xparent_model xmodel xfk_name xcan_fail]
                memory > xparent_list
                memory > xopts
                memory > xfk
                memory > xfks_to_parent
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    xopts.write ((xmodel).x_meta)
                    (xfk_name).if
                      seq
                        xfks_to_parent.write (((unsupported)).apply ((xf)) ((xf)) (((xopts).xfields)) ((((xf).xname).eq (xfk_name))))
                        ((((xlen)).apply ((xfks_to_parent))).eq 1).if
                          seq
                            xfk.write (((unsupported)).apply ((xfks_to_parent)) (0))
                            xparent_list.write (((((xparent_model).x_meta).xget_parent_list)).apply)
                            ((((((xisinstance)).apply ((xfk)) ((xForeignKey))).not).or ((((((xfk).xremote_field).xmodel).x_meta).xproxy).and (((unsupported)).apply ((((((xfk).xremote_field).xmodel).x_meta).xproxy_for_model)) ((xparent_list))))).or ((((((((xfk).xremote_field).xmodel).x_meta).xproxy).not).and ((((xfk).xremote_field).xmodel).neq (xparent_model))).and (((unsupported)).apply ((((xfk).xremote_field).xmodel)) ((xparent_list))))).if
                              (((unsupported)).apply ((((xValueError)).apply (("fk_name '%s' is not a ForeignKey to '%s'.".mod (((unsupported)).apply ((xfk_name)) ((((xparent_model).x_meta).xlabel))))))))
                          ((xfks_to_parent).not).if
                            (((unsupported)).apply ((((xValueError)).apply (("'%s' has no field named '%s'.".mod (((unsupported)).apply ((((xmodel).x_meta).xlabel)) ((xfk_name))))))))
                      seq
                        xparent_list.write (((((xparent_model).x_meta).xget_parent_list)).apply)
                        xfks_to_parent.write (((unsupported)).apply ((xf)) ((xf)) (((xopts).xfields)) (((((xisinstance)).apply ((xf)) ((xForeignKey))).and ((((((xf).xremote_field).xmodel).eq (xparent_model)).or (((unsupported)).apply ((((xf).xremote_field).xmodel)) ((xparent_list)))).or ((((((xf).xremote_field).xmodel).x_meta).xproxy).and (((unsupported)).apply ((((((xf).xremote_field).xmodel).x_meta).xproxy_for_model)) ((xparent_list))))))))
                        ((((xlen)).apply ((xfks_to_parent))).eq 1).if
                          xfk.write (((unsupported)).apply ((xfks_to_parent)) (0))
                          ((xfks_to_parent).not).if
                            seq
                              (xcan_fail).if
                                (((unsupported)).apply)
                              (((unsupported)).apply ((((xValueError)).apply (("'%s' has no ForeignKey to '%s'.".mod (((unsupported)).apply ((((xmodel).x_meta).xlabel)) ((((xparent_model).x_meta).xlabel))))))))
                            (((unsupported)).apply ((((xValueError)).apply (("'%s' has more than one ForeignKey to '%s'. You must specify a 'fk_name' attribute.".mod (((unsupported)).apply ((((xmodel).x_meta).xlabel)) ((((xparent_model).x_meta).xlabel))))))))
                    (((unsupported)).apply ((xfk)))
            xinlineformset_factory.write
              [xparent_model xmodel xform xformset xfk_name xfields xexclude xextra xcan_order xcan_delete xmax_num xformfield_callback xwidgets xvalidate_max xlocalized_fields xlabels xhelp_texts xerror_messages xmin_num xvalidate_min xfield_classes xabsolute_max xcan_delete_extra xrenderer xedit_only]
                memory > xFormSet
                memory > xkwargs
                memory > xfk
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xfk.write (((unsupported)).apply ((x_get_foreign_key)) ((xparent_model)) ((xmodel)) ((xfk_name)))
                    ((xfk).xunique).if
                      xmax_num.write 1
                    xkwargs.write (((unsupported)).apply ("form") ((xform)) ("formfield_callback") ((xformfield_callback)) ("formset") ((xformset)) ("extra") ((xextra)) ("can_delete") ((xcan_delete)) ("can_order") ((xcan_order)) ("fields") ((xfields)) ("exclude") ((xexclude)) ("min_num") ((xmin_num)) ("max_num") ((xmax_num)) ("widgets") ((xwidgets)) ("validate_min") ((xvalidate_min)) ("validate_max") ((xvalidate_max)) ("localized_fields") ((xlocalized_fields)) ("labels") ((xlabels)) ("help_texts") ((xhelp_texts)) ("error_messages") ((xerror_messages)) ("field_classes") ((xfield_classes)) ("absolute_max") ((xabsolute_max)) ("can_delete_extra") ((xcan_delete_extra)) ("renderer") ((xrenderer)) ("edit_only") ((xedit_only)))
                    xFormSet.write (((xmodelformset_factory)).apply ((xmodel)) ((((unsupported)).apply ((xkwargs)))))
                    (((unsupported)).apply (((xFormSet).xfk)) ((xfk)))
                    (((unsupported)).apply ((xFormSet)))
            (((unsupported)).apply ((xField)))
              seq
                (((unsupported)).apply)
                xwidget.write (xHiddenInput)
                xdefault_error_messages.write (((unsupported)).apply ("invalid_choice") ((((x_)).apply ("The inline value did not match the parent instance."))))
                x__init__.write
                  [xself xparent_instance xpk_field xto_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xparent_instance)) ((xparent_instance)))
                        (((unsupported)).apply (((xself).xpk_field)) ((xpk_field)))
                        (((unsupported)).apply (((xself).xto_field)) ((xto_field)))
                        (((unsupported)).apply (((xself).xparent_instance)) ("None: is there a None literal in the EO language?")).if
                          ((xself).xto_field).if
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("initial"))) ((((xgetattr)).apply (((xself).xparent_instance)) (((xself).xto_field)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("initial"))) ((((xself).xparent_instance).xpk)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("required"))) (FALSE))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xclean.write
                  [xself xvalue]
                    memory > xorig
                    seq > @
                      seq
                        (((unsupported)).apply ((xvalue)) (((xself).xempty_values))).if
                          seq
                            ((xself).xpk_field).if
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((xself).xparent_instance)))
                        ((xself).xto_field).if
                          xorig.write (((xgetattr)).apply (((xself).xparent_instance)) (((xself).xto_field)))
                          xorig.write (((xself).xparent_instance).xpk)
                        ((((xstr)).apply ((xvalue))).neq (((xstr)).apply ((xorig)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_choice"))) ("invalid_choice"))))
                        (((unsupported)).apply (((xself).xparent_instance)))
                xhas_changed.write
                  [xself xinitial xdata]
                    seq > @
                      (((unsupported)).apply (FALSE))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xvalue xinstance]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                        (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xstr)).apply (((xself).xvalue)))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xvalue)))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xother)) ((xModelChoiceIteratorValue))).if
                          xother.write ((xother).xvalue)
                        (((unsupported)).apply ((((xself).xvalue).eq (xother))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfield)) ((xfield)))
                        (((unsupported)).apply (((xself).xqueryset)) (((xfield).xqueryset)))
                x__iter__.write
                  [xself]
                    memory > xqueryset
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xfield).xempty_label)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ("") ((((xself).xfield).xempty_label)))))
                        xqueryset.write ((xself).xqueryset)
                        (((xqueryset).x_prefetch_related_lookups).not).if
                          xqueryset.write ((((xqueryset).xiterator)).apply)
                        (((unsupported)).apply ((xobj)) ((xqueryset)))
                          (((unsupported)).apply (((((xself).xchoice)).apply ((xobj)))))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((((xself).xqueryset).xcount)).apply).add ((((unsupported)).apply ((((xself).xfield).xempty_label)) ("None: is there a None literal in the EO language?")).if 1 0))))
                x__bool__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((unsupported)).apply ((((xself).xfield).xempty_label)) ("None: is there a None literal in the EO language?")).or (((((xself).xqueryset).xexists)).apply))))
                xchoice.write
                  [xself xobj]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xModelChoiceIteratorValue)).apply ((((((xself).xfield).xprepare_value)).apply ((xobj)))) ((xobj)))) ((((((xself).xfield).xlabel_from_instance)).apply ((xobj)))))))
            (((unsupported)).apply ((xChoiceField)))
              seq
                unsupported
                xdefault_error_messages.write (((unsupported)).apply ("invalid_choice") ((((x_)).apply ("Select a valid choice. That choice is not one of the available choices."))))
                xiterator.write (xModelChoiceIterator)
                x__init__.write
                  [xself xqueryset xempty_label xrequired xwidget xlabel xinitial xhelp_text xto_field_name xlimit_choices_to xblank]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xField).x__init__)) ((xself)) ((xrequired)) ((xwidget)) ((xlabel)) ((xinitial)) ((xhelp_text)) ((((unsupported)).apply ((xkwargs)))))
                        (((xrequired).and (((unsupported)).apply ((xinitial)) ("None: is there a None literal in the EO language?"))).or ((((xisinstance)).apply (((xself).xwidget)) ((xRadioSelect))).and ((xblank).not))).if
                          (((unsupported)).apply (((xself).xempty_label)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply (((xself).xempty_label)) ((xempty_label)))
                        (((unsupported)).apply (((xself).xqueryset)) ((xqueryset)))
                        (((unsupported)).apply (((xself).xlimit_choices_to)) ((xlimit_choices_to)))
                        (((unsupported)).apply (((xself).xto_field_name)) ((xto_field_name)))
                xget_limit_choices_to.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xcallable)).apply (((xself).xlimit_choices_to))).if
                          (((unsupported)).apply (((((xself).xlimit_choices_to)).apply)))
                        (((unsupported)).apply (((xself).xlimit_choices_to)))
                x__deepcopy__.write
                  [xself xmemo]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((((xsuper)).apply ((xChoiceField)) ((xself))).x__deepcopy__)).apply ((xmemo)))
                        (((unsupported)).apply (((xself).xqueryset)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xresult).xqueryset)) ((((((xself).xqueryset).xall)).apply)))
                        (((unsupported)).apply ((xresult)))
                x_get_queryset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_queryset)))
                x_set_queryset.write
                  [xself xqueryset]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_queryset)) (((((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" ((((xqueryset).xall)).apply))))
                        (((unsupported)).apply ((((xself).xwidget).xchoices)) (((xself).xchoices)))
                xqueryset.write (((xproperty)).apply ((x_get_queryset)) ((x_set_queryset)))
                xlabel_from_instance.write
                  [xself xobj]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xstr)).apply ((xobj)))))
                x_get_choices.write
                  [xself]
                    seq > @
                      seq
                        (((xhasattr)).apply ((xself)) ("_choices")).if
                          (((unsupported)).apply (((xself).x_choices)))
                        (((unsupported)).apply (((((xself).xiterator)).apply ((xself)))))
                xchoices.write (((xproperty)).apply ((x_get_choices)) (((xChoiceField).x_set_choices)))
                xprepare_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((xhasattr)).apply ((xvalue)) ("_meta")).if
                          ((xself).xto_field_name).if
                            (((unsupported)).apply (((((xvalue).xserializable_value)).apply (((xself).xto_field_name)))))
                            (((unsupported)).apply (((xvalue).xpk)))
                        (((unsupported)).apply (((((((xsuper)).apply).xprepare_value)).apply ((xvalue)))))
                xto_python.write
                  [xself xvalue]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply ((xvalue)) (((xself).xempty_values))).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)) (((((xself).xqueryset).xmodel).xDoesNotExist)))))
                          seq
                            xkey.write (((xself).xto_field_name).or "pk")
                            (((xisinstance)).apply ((xvalue)) ((((xself).xqueryset).xmodel))).if
                              xvalue.write (((xgetattr)).apply ((xvalue)) ((xkey)))
                            xvalue.write (((((xself).xqueryset).xget)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_choice"))) ("invalid_choice") ((((unsupported)).apply ("value") ((xvalue)))))))
                        (((unsupported)).apply ((xvalue)))
                xvalidate.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((((xField).xvalidate)).apply ((xself)) ((xvalue)))))
                xhas_changed.write
                  [xself xinitial xdata]
                    memory > xdata_value
                    memory > xinitial_value
                    seq > @
                      seq
                        ((xself).xdisabled).if
                          (((unsupported)).apply (FALSE))
                        xinitial_value.write ((((unsupported)).apply ((xinitial)) ("None: is there a None literal in the EO language?")).if (xinitial) "")
                        xdata_value.write ((((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if (xdata) "")
                        (((unsupported)).apply (((((xstr)).apply (((((xself).xprepare_value)).apply ((xinitial_value))))).neq (((xstr)).apply ((xdata_value))))))
            (((unsupported)).apply ((xModelChoiceField)))
              seq
                unsupported
                xwidget.write (xSelectMultiple)
                xhidden_widget.write (xMultipleHiddenInput)
                xdefault_error_messages.write (((unsupported)).apply ("invalid_list") ((((x_)).apply ("Enter a list of values."))) ("invalid_choice") ((((x_)).apply ("Select a valid choice. %(value)s is not one of the available choices."))) ("invalid_pk_value") ((((x_)).apply ("“%(pk)s” is not a valid value."))))
                x__init__.write
                  [xself xqueryset]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xqueryset)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xkwargs)))))
                xto_python.write
                  [xself xvalue]
                    seq > @
                      seq
                        ((xvalue).not).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((((xlist)).apply (((((xself).x_check_values)).apply ((xvalue)))))))
                xclean.write
                  [xself xvalue]
                    memory > xqs
                    seq > @
                      seq
                        xvalue.write ((((xself).xprepare_value)).apply ((xvalue)))
                        (((xself).xrequired).and ((xvalue).not)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("required"))) ("required"))))
                          ((((xself).xrequired).not).and ((xvalue).not)).if
                            (((unsupported)).apply ((((((xself).xqueryset).xnone)).apply)))
                        ((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_list"))) ("invalid_list"))))
                        xqs.write ((((xself).x_check_values)).apply ((xvalue)))
                        bogusForceDataize.write ((((xself).xrun_validators)).apply ((xvalue)))
                        (((unsupported)).apply ((xqs)))
                x_check_values.write
                  [xself xvalue]
                    memory > xpks
                    memory > xqs
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xkey.write (((xself).xto_field_name).or "pk")
                        (((unsupported)).apply ((xTypeError)))
                          xvalue.write (((xfrozenset)).apply ((xvalue)))
                          (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_list"))) ("invalid_list"))))
                        (((unsupported)).apply ((xpk)) ((xvalue)))
                          (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                            bogusForceDataize.write (((((xself).xqueryset).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xpk)))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_pk_value"))) ("invalid_pk_value") ((((unsupported)).apply ("pk") ((xpk)))))))
                        xqs.write (((((xself).xqueryset).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__in".mod (xkey))) ((xvalue)))))))
                        xpks.write (((unsupported)).apply ((((xstr)).apply ((((xgetattr)).apply ((xo)) ((xkey)))))) ((xo)) ((xqs)))
                        (((unsupported)).apply ((xval)) ((xvalue)))
                          (((unsupported)).apply ((((xstr)).apply ((xval)))) ((xpks))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("invalid_choice"))) ("invalid_choice") ((((unsupported)).apply ("value") ((xval)))))))
                        (((unsupported)).apply ((xqs)))
                xprepare_value.write
                  [xself xvalue]
                    memory > xprepare_value
                    seq > @
                      seq
                        (((((xhasattr)).apply ((xvalue)) ("__iter__")).and ((((xisinstance)).apply ((xvalue)) ((xstr))).not)).and ((((xhasattr)).apply ((xvalue)) ("_meta")).not)).if
                          seq
                            xprepare_value.write ((((xsuper)).apply).xprepare_value)
                            (((unsupported)).apply ((((unsupported)).apply ((((xprepare_value)).apply ((xv)))) ((xv)) ((xvalue)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xprepare_value)).apply ((xvalue)))))
                xhas_changed.write
                  [xself xinitial xdata]
                    memory > xdata_set
                    memory > xinitial_set
                    seq > @
                      seq
                        ((xself).xdisabled).if
                          (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xinitial)) ("None: is there a None literal in the EO language?")).if
                          xinitial.write (((unsupported)).apply)
                        (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if
                          xdata.write (((unsupported)).apply)
                        ((((xlen)).apply ((xinitial))).neq (((xlen)).apply ((xdata)))).if
                          (((unsupported)).apply (TRUE))
                        xinitial_set.write (((unsupported)).apply ((((xstr)).apply ((xvalue)))) ((xvalue)) (((((xself).xprepare_value)).apply ((xinitial)))))
                        xdata_set.write (((unsupported)).apply ((((xstr)).apply ((xvalue)))) ((xvalue)) ((xdata)))
                        (((unsupported)).apply (((xdata_set).neq (xinitial_set))))
            xmodelform_defines_fields.write
              [xform_class]
                seq > @
                  (((unsupported)).apply (((((xhasattr)).apply ((xform_class)) ("_meta")).and ((((unsupported)).apply ((((xform_class).x_meta).xfields)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((((xform_class).x_meta).xexclude)) ("None: is there a None literal in the EO language?"))))))