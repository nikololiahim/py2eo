memory > xValueError
memory > xstr
memory > xint
memory > xx
memory > xsys
memory > xitem
memory > x__file__
memory > xlen
memory > x_lazy_re_compile
memory > xdatetime
memory > xglobals
memory > xtuple
memory > xsubprocess
memory > xos
[] > version
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_main_version
        memory > xget_version
        memory > xPY39
        memory > xget_complete_version
        memory > xPY36
        memory > xPY311
        memory > xPY37
        memory > xPY310
        memory > xget_git_changeset
        memory > xget_docs_version
        memory > xPY38
        memory > xversion_component_re
        memory > xget_version_tuple
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xPY36.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (6)))
            xPY37.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (7)))
            xPY38.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (8)))
            xPY39.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (9)))
            xPY310.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (10)))
            xPY311.write (((xsys).xversion_info).geq (((unsupported)).apply (3) (11)))
            xget_version.write
              [xversion]
                memory > xsub
                memory > xmain
                memory > xmapping
                memory > xgit_changeset
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xversion.write (((xget_complete_version)).apply ((xversion)))
                    xmain.write (((xget_main_version)).apply ((xversion)))
                    xsub.write ""
                    (((((unsupported)).apply ((xversion)) (3)).eq "alpha").and ((((unsupported)).apply ((xversion)) (4)).eq 0)).if
                      seq
                        xgit_changeset.write (((xget_git_changeset)).apply)
                        (xgit_changeset).if
                          xsub.write (".dev%s".mod (xgit_changeset))
                      ((((unsupported)).apply ((xversion)) (3)).neq "final").if
                        seq
                          xmapping.write (((unsupported)).apply ("alpha") ("a") ("beta") ("b") ("rc") ("rc"))
                          xsub.write ((((unsupported)).apply ((xmapping)) ((((unsupported)).apply ((xversion)) (3)))).sub (((xstr)).apply ((((unsupported)).apply ((xversion)) (4)))))
                    (((unsupported)).apply (((xmain).sub (xsub))))
            xget_main_version.write
              [xversion]
                memory > xparts
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xversion.write (((xget_complete_version)).apply ((xversion)))
                    xparts.write (((((unsupported)).apply ((xversion)) (2)).eq 0).if 2 3)
                    (((unsupported)).apply ((((".".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xx)))) ((xx)) ((((unsupported)).apply ((xversion)) ((((unsupported)).apply ((xparts)))))))))))
            xget_complete_version.write
              [xversion]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xversion)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply)
                      seq
                        (((unsupported)).apply (((((xlen)).apply ((xversion))).eq 5)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xversion)) (3))) ((((unsupported)).apply ("alpha") ("beta") ("rc") ("final"))))))
                    (((unsupported)).apply ((xversion)))
            xget_docs_version.write
              [xversion]
                seq > @
                  (((unsupported)).apply)
                    xversion.write (((xget_complete_version)).apply ((xversion)))
                    ((((unsupported)).apply ((xversion)) (3)).neq "final").if
                      (((unsupported)).apply ("dev"))
                      (((unsupported)).apply (("%d.%d".mod (((unsupported)).apply ((xversion)) ((((unsupported)).apply (2)))))))
            xget_git_changeset.write
              []
                memory > xtimestamp
                memory > xgit_log
                memory > xrepo_dir
                memory > xtz
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ("__file__") ((((xglobals)).apply))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xrepo_dir.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xdirname)).apply ((((((xos).xpath).xabspath)).apply ((x__file__)))))))
                    xgit_log.write (((unsupported)).apply (((xsubprocess).xrun)) ("git log --pretty=format:%ct --quiet -1 HEAD") (TRUE) (TRUE) ((xrepo_dir)) (TRUE))
                    xtimestamp.write ((xgit_log).xstdout)
                    xtz.write (((xdatetime).xtimezone).xutc)
                    (((unsupported)).apply ((xValueError)))
                      xtimestamp.write (((unsupported)).apply ((((xdatetime).xdatetime).xfromtimestamp)) ((((xint)).apply ((xtimestamp)))) ((xtz)))
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((xtimestamp).xstrftime)).apply ("%Y%m%d%H%M%S"))))
            xversion_component_re.write (((x_lazy_re_compile)).apply ("(d-|[a-z]-|.)"))
            xget_version_tuple.write
              [xversion]
                memory > xcomponent
                memory > xversion_numbers
                seq > @
                  seq
                    (((unsupported)).apply)
                    xversion_numbers.write (((unsupported)).apply)
                    (((unsupported)).apply ((xitem)) (((((xversion_component_re).xsplit)).apply ((xversion)))))
                      ((xitem).and ((xitem).neq ".")).if
                        (((unsupported)).apply ((xValueError)))
                          xcomponent.write (((xint)).apply ((xitem)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xversion_numbers).xappend)).apply ((xcomponent)))
                    (((unsupported)).apply ((((xtuple)).apply ((xversion_numbers)))))