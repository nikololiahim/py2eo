memory > xfilename
memory > xFakePath
memory > xlist
memory > xRuntimeError
memory > xValueError
memory > xexec
memory > xtempfile
memory > xtype
memory > xcode
memory > xnext
memory > xscript_helper
memory > x__debug__
memory > xtypes
memory > xD
memory > xfrozenset
memory > xstr
memory > xio
memory > xfunc
memory > xrange
memory > xmath
memory > xdis
memory > xeval
memory > xbytearray
memory > xKeyError
memory > xf2
memory > xopen
memory > xvariable
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xx
memory > xstmt
memory > xi
memory > xcompile
memory > xarg
memory > xbuiltins
memory > xsys
memory > xglobals
memory > xM
memory > xbytes
memory > xRecursionError
memory > xDeprecationWarning
memory > xf1
memory > xobj
memory > xos
memory > xslice
memory > xid
memory > xSyntaxError
memory > xtmpd
memory > x_ast
memory > xiter
memory > x__file__
memory > xstr_map
memory > xsetattr
memory > xunittest
memory > xobject
memory > xA
memory > xmemoryview
memory > xNameError
memory > xconst
memory > xlen
memory > xdict
memory > xj
memory > xisinstance
memory > xfp
memory > xEllipsis
memory > xTypeError
memory > x__name__
[] > test_compile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_return_inside_try_finally_block
        memory > xtest_literals_with_leading_zeroes
        memory > xtest_binop
        memory > xtest_none_keyword_arg
        memory > xassertInvalidSingle
        memory > xtest_and
        memory > xtest_for_break_continue_inside_except_block
        memory > xtest_for
        memory > xtest_null_terminated
        memory > xtest_exec_with_general_mapping_for_locals
        memory > xtest_func_and
        memory > xtest_try_except_as
        memory > xtest_duplicate_global_local
        memory > xtest_annotation_limit
        memory > xtest_32_63_bit_values
        memory > xtest_for_break_continue_inside_finally_block
        memory > xtest_for_break_continue_inside_try_finally_block
        memory > xtest_unary_minus
        memory > xtest_return_inside_with_block
        memory > xtest_dict_evaluation_order
        memory > xtest_for_distinct_code_objects
        memory > xtest_lambda_doc
        memory > xtest_import
        memory > xtest_for_break_continue_inside_async_with_block
        memory > xtest_while_else
        memory > xtest_argument_order
        memory > xtest_float_literals
        memory > xtest_bad_single_statement
        memory > xtest_no_ending_newline
        memory > xtest_if
        memory > xcompile_single
        memory > xtest_for_break_continue
        memory > xtest_extended_arg
        memory > xtest_try_finally
        memory > xtest_single_statement
        memory > xtest_async_with
        memory > xtest_yet_more_evil_still_undecodable
        memory > xtest_syntax_error
        memory > xtest_mangling
        memory > xtest_other_newlines
        memory > xtest_for_break_continue_inside_with_block
        memory > xtest_and_or
        memory > xtest_compile_ast
        memory > xtest_argument_handling
        memory > xtest_try_except_bare
        memory > xtest_return_inside_finally_block
        memory > xtest_return_inside_except_block
        memory > xtest_none_assignment
        memory > xtest_or
        memory > xtest_peephole_opt_unreachable_code_array_access_in_bounds
        memory > xtest_indentation
        memory > xtest_async_for
        memory > xtest_async_for_else
        memory > xtest_for_else
        memory > xtest_encoding
        memory > xtest_false_while_loop
        memory > xtest_subscripts
        memory > xtest_chained_comparison
        memory > xtest_debug_assignment
        memory > xtest_with
        memory > xtest_merge_constants
        memory > xtest_if_else
        memory > xtest_return_inside_async_with_block
        memory > xtest_empty
        memory > xtest_compiler_recursion_limit
        memory > xtest_stack_overflow
        memory > xtest_sequence_unpacking_error
        memory > xtest_dont_merge_constants
        memory > xN
        memory > xtest_leading_newlines
        memory > xtest_dead_blocks_do_not_generate_bytecode
        memory > xtest_particularly_evil_undecodable
        memory > xtest_compile_filename
        memory > xtest_path_like_objects
        memory > xcheck_constant
        memory > xcheck_stack_size
        memory > xtest_try_except_qualified
        memory > xtest_same_filename_used
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcompile_single.write
                  [xself xsource]
                    seq > @
                      bogusForceDataize.write (((xcompile)).apply ((xsource)) ("<single>") ("single"))
                xassertInvalidSingle.write
                  [xself xsource]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) (((xself).xcompile_single)) ((xsource)))
                xtest_no_ending_newline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcompile)).apply ("hi") ("<test>") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("hir") ("<test>") ("exec"))
                xtest_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xcompile)).apply ("") ("<test>") ("exec"))
                xtest_other_newlines.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcompile)).apply ("rn") ("<test>") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("r") ("<test>") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("hirnstuffrndef f():n    passr") ("<test>") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("this_isrreally_old_macrdef f():n    pass") ("<test>") ("exec"))
                xtest_debug_assignment.write
                  [xself]
                    memory > xprev
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ("__debug__ = 1") ("?") ("single"))
                        (((unsupported)).apply)
                        xprev.write ((xbuiltins).x__debug__)
                        bogusForceDataize.write (((xsetattr)).apply ((xbuiltins)) ("__debug__") ("sure"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((x__debug__)) ((xprev)))
                        bogusForceDataize.write (((xsetattr)).apply ((xbuiltins)) ("__debug__") ((xprev)))
                xtest_argument_handling.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("lambda a,a:0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("lambda a,a=1:0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("lambda a=1,a=1:0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xexec)) ("def f(a, a): pass"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xexec)) ("def f(a = 0, a = 1): pass"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xexec)) ("def f(a): global a; a = 1"))
                xtest_syntax_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ("1+*3") ("filename") ("exec"))
                xtest_none_keyword_arg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ("f(None=1)") ("<string>") ("exec"))
                xtest_duplicate_global_local.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xexec)) ("def f(a): global a; a = 1"))
                xtest_exec_with_general_mapping_for_locals.write
                  [xself]
                    memory > xd
                    memory > x__getitem__
                    memory > xg
                    memory > xkeys
                    memory > xm
                    memory > x__setitem__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            unsupported
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  seq
                                    ((xkey).eq "a").if
                                      (((unsupported)).apply (12))
                                    (((unsupported)).apply ((xKeyError)))
                            x__setitem__.write
                              [xself xkey xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xresults)) ((((unsupported)).apply ((xkey)) ((xvalue)))))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xlist)).apply ("xyz"))))
                        xm.write (((xM)).apply)
                        xg.write (((xglobals)).apply)
                        bogusForceDataize.write (((xexec)).apply ("z = a") ((xg)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xresults)) ((((unsupported)).apply ("z") (12))))
                        (((unsupported)).apply ((xNameError)))
                          bogusForceDataize.write (((xexec)).apply ("z = b") ((xg)) ((xm)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Did not detect a KeyError"))
                        bogusForceDataize.write (((xexec)).apply ("z = dir()") ((xg)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xresults)) ((((unsupported)).apply ("z") ((((xlist)).apply ("xyz"))))))
                        bogusForceDataize.write (((xexec)).apply ("z = globals()") ((xg)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xresults)) ((((unsupported)).apply ("z") ((xg)))))
                        bogusForceDataize.write (((xexec)).apply ("z = locals()") ((xg)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xresults)) ((((unsupported)).apply ("z") ((xm)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xexec)) ("z = b") ((xm)))
                        (((unsupported)).apply)
                          seq
                            unsupported
                        xm.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xexec)) ("z = a") ((xg)) ((xm)))
                        (((unsupported)).apply ((xdict)))
                          x__getitem__.write
                            [xself xkey]
                              seq > @
                                seq
                                  ((xkey).eq "a").if
                                    (((unsupported)).apply (12))
                                  (((unsupported)).apply (((((xdict).x__getitem__)).apply ((xself)) ((xkey)))))
                        xd.write (((xD)).apply)
                        bogusForceDataize.write (((xexec)).apply ("z = a") ((xg)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("z"))) (12))
                xtest_extended_arg.write
                  [xself]
                    memory > xcode
                    memory > xlongexpr
                    memory > xg
                    seq > @
                      seq
                        xlongexpr.write ("x = x or ".add ("-x".mul 2500))
                        xg.write (((unsupported)).apply)
                        xcode.write ((((unsupported)).apply).mod ((((unsupported)).apply ((xlongexpr))).mul 10))
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xg)) ("f"))).apply (5))) (0))
                xtest_argument_order.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xexec)) ("def f(a=1, b): pass"))
                xtest_float_literals.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("2e"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("2.0e+"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("1e-"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("3-4e/21"))
                xtest_indentation.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write (((xcompile)).apply ((xs)) ("<string>") ("exec"))
                xtest_leading_newlines.write
                  [xself]
                    memory > xs256
                    memory > xco
                    seq > @
                      seq
                        xs256.write ((("".xjoin)).apply ((((((unsupported)).apply ("n")).mul 256).add (((unsupported)).apply ("spam")))))
                        xco.write (((xcompile)).apply ((xs256)) ("fn") ("exec"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco).xco_firstlineno)) (257))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco).xco_lnotab)) ((((xbytes)).apply)))
                xtest_literals_with_leading_zeroes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xarg)) ((((unsupported)).apply ("077787") ("0xj") ("0x.") ("0e") ("090000000000000") ("080000000000000") ("000000000000009") ("000000000000008") ("0b42") ("0BADCAFE") ("0o123456789") ("0b1.1") ("0o4.2") ("0b101j2") ("0o153j2") ("0b100e1") ("0o777e1") ("0777") ("000777") ("000000000000007"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ((xarg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0xff"))) (255))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0777."))) (777))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0777.0"))) (777))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("000000000000000000000000000000000000000000000000000777e0"))) (777))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0777e1"))) (7770))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0e0"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0000e-012"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("09.5"))) (9.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0777j"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("000"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("00j"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("00.0"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0e3"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("090000000000000."))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("090000000000000.0000000000000000000000"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("090000000000000e0"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("090000000000000e-0"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("090000000000000j"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("000000000000008."))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("000000000000009."))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0b101010"))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("-0b000000000010"))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("0o777"))) (511))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ("-0o0000010"))) ((8.neg)))
                xtest_unary_minus.write
                  [xself]
                    memory > xall_one_bits
                    seq > @
                      seq
                        (((xsys).xmaxsize).eq 2147483647).if
                          seq
                            xall_one_bits.write "0xffffffff"
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xall_one_bits)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply (("-".add (xall_one_bits))))) (((((unsupported)).apply).neg)))
                          (((xsys).xmaxsize).eq (((unsupported)).apply)).if
                            seq
                              xall_one_bits.write "0xffffffffffffffff"
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xall_one_bits)))) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply (("-".add (xall_one_bits))))) (((((unsupported)).apply).neg)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("How many bits *does* this machine have???"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xeval)).apply (("%s".mod ((((xsys).xmaxsize).neg).sub 1))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xeval)).apply (("%s".mod ((((xsys).xmaxsize).neg).sub 2))))) ((xint)))
                (((xsys).xmaxsize).eq (((unsupported)).apply)).if
                  xtest_32_63_bit_values.write
                    [xself]
                      memory > xd
                      memory > xc
                      memory > xg
                      memory > xf
                      memory > xe
                      memory > xa
                      memory > xh
                      memory > xb
                      seq > @
                        seq
                          xa.write ((((unsupported)).apply))
                          xb.write ((((unsupported)).apply).neg)
                          xc.write ((((unsupported)).apply))
                          xd.write ((((unsupported)).apply).neg)
                          xe.write ((((unsupported)).apply))
                          xf.write ((((unsupported)).apply).neg)
                          xg.write ((((unsupported)).apply))
                          xh.write ((((unsupported)).apply).neg)
                          (((unsupported)).apply ((xvariable)) (((((xself).xtest_32_63_bit_values).x__code__).xco_consts)))
                            (((unsupported)).apply ((xvariable)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xvariable)) ((xint)))
                xtest_sequence_unpacking_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) (((((unsupported)).apply (1) ((1.neg))).or (((unsupported)).apply ((1.neg)) (1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xj)) ((1.neg)))
                xtest_none_assignment.write
                  [xself]
                    memory > xstmts
                    seq > @
                      seq
                        xstmts.write (((unsupported)).apply ("None = 0") ("None += 0") ("__builtins__.None = 0") ("def None(): pass") ("class None: pass") ("(a, None) = 0, 0") ("for None in range(10): pass") ("def f(None): pass") ("import None") ("import x as None") ("from x import None") ("from x import y as None"))
                        (((unsupported)).apply ((xstmt)) ((xstmts)))
                          seq
                            (((unsupported)).apply ((xstmt)) ("n"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ((xstmt)) ("tmp") ("single"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ((xstmt)) ("tmp") ("exec"))
                xtest_import.write
                  [xself]
                    memory > xfail
                    memory > xsucceed
                    seq > @
                      seq
                        xsucceed.write (((unsupported)).apply ("import sys") ("import os, sys") ("import os as bar") ("import os.path as bar") ("from __future__ import nested_scopes, generators") ("from __future__ import (nested_scopes,ngenerators)") ("from __future__ import (nested_scopes,ngenerators,)") ("from sys import stdin, stderr, stdout") ("from sys import (stdin, stderr,nstdout)") ("from sys import (stdin, stderr,nstdout,)") ("from sys import (stdinn, stderr, stdout)") ("from sys import (stdinn, stderr, stdout,)") ("from sys import stdin as si, stdout as so, stderr as se") ("from sys import (stdin as si, stdout as so, stderr as se)") ("from sys import (stdin as si, stdout as so, stderr as se,)"))
                        xfail.write (((unsupported)).apply ("import (os, sys)") ("import (os), (sys)") ("import ((os), (sys))") ("import (sys") ("import sys)") ("import (os,)") ("import os As bar") ("import os.path a bar") ("from sys import stdin As stdout") ("from sys import stdin a stdout") ("from (sys) import stdin") ("from __future__ import (nested_scopes") ("from __future__ import nested_scopes)") ("from __future__ import nested_scopes,ngenerators") ("from sys import (stdin") ("from sys import stdin)") ("from sys import stdin, stdout,nstderr") ("from sys import stdin si") ("from sys import stdin,") ("from sys import (*)") ("from sys import (stdin,, stdout, stderr)") ("from sys import (stdin, stdout),"))
                        (((unsupported)).apply ((xstmt)) ((xsucceed)))
                          bogusForceDataize.write (((xcompile)).apply ((xstmt)) ("tmp") ("exec"))
                        (((unsupported)).apply ((xstmt)) ((xfail)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ((xstmt)) ("tmp") ("exec"))
                xtest_for_distinct_code_objects.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            memory > xf2
                            memory > xf1
                            seq > @
                              seq
                                xf1.write (((unsupported)).apply ((xx)))
                                xf2.write (((unsupported)).apply ((xx)))
                                (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((xf)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply (((xf1).x__code__)))) ((((xid)).apply (((xf2).x__code__)))))
                xtest_lambda_doc.write
                  [xself]
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xl).x__doc__)))
                xtest_encoding.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "# -*- coding: badencoding -*-npassn"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ((xcode)) ("tmp") ("exec"))
                        xcode.write "# -*- coding: badencoding -*-n\"xc2xa4\"n"
                        bogusForceDataize.write (((xcompile)).apply ((xcode)) ("tmp") ("exec"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xc2xa4"))
                        xcode.write "\"xc2xa4\"n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xc2xa4"))
                        xcode.write "\"xc2xa4\"n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xa4"))
                        xcode.write "# -*- coding: latin1 -*-n\"xc2xa4\"n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xc2xa4"))
                        xcode.write "# -*- coding: utf-8 -*-n\"xc2xa4\"n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xa4"))
                        xcode.write "# -*- coding: iso8859-15 -*-n\"xc2xa4\"n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("xc2u20ac"))
                        xcode.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("# -*- coding: iso8859-15 -*-nxc2xa4"))
                        xcode.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) ("# -*- coding: iso8859-15 -*-nxa4"))
                xtest_subscripts.write
                  [xself]
                    memory > xd
                    memory > x__contains__
                    memory > x__getitem__
                    memory > x__delitem__
                    memory > x__setitem__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xdata)) ((((unsupported)).apply)))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xdata)) ((((xstr)).apply ((xkey)))))))
                            x__setitem__.write
                              [xself xkey xvalue]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xdata)) ((((xstr)).apply ((xkey)))))) ((xvalue)))
                            x__delitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xdata)) ((((xstr)).apply ((xkey)))))))))
                            x__contains__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((((xstr)).apply ((xkey)))) (((xself).xdata)))))
                        xd.write (((xstr_map)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (1))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) (1))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (1))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (1))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (1))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (1))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (1))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply (1) (1))) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xslice)).apply (1) (2))) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ((((xslice)).apply (1) (2))) ((((xslice)).apply (1) (2))))) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply (1) (2) (3))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xslice)).apply (1) (2) (3))) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ((((xslice)).apply (1) (2) (3))) ((((xslice)).apply (1) (2) (3))))) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply)))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xEllipsis)) ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ((xEllipsis)) ((xEllipsis)))) ((xd)))
                xtest_annotation_limit.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write "def f(%s): pass"
                        (((unsupported)).apply ((xs)) ((((", ".xjoin)).apply ((((unsupported)).apply (("a%d:%d".mod (((unsupported)).apply ((xi)) ((xi))))) ((xi)) ((((xrange)).apply (300))))))))
                        bogusForceDataize.write (((xcompile)).apply ((xs)) ("?") ("exec"))
                xtest_mangling.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xf.write
                            []
                              memory > x__not_mangled__
                              memory > x__mangled
                              seq > @
                                seq
                                  x__mangled.write 1
                                  x__not_mangled__.write 2
                                  (((unsupported)).apply)
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("_A__mangled") (((((xA).xf).x__code__).xco_varnames)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__not_mangled__") (((((xA).xf).x__code__).xco_varnames)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("_A__mangled_mod") (((((xA).xf).x__code__).xco_varnames)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__package__") (((((xA).xf).x__code__).xco_varnames)))
                xtest_compile_ast.write
                  [xself]
                    memory > xco1
                    memory > xfname
                    memory > xast
                    memory > xsample_code
                    memory > xfcontents
                    memory > xco2
                    seq > @
                      seq
                        xfname.write (x__file__)
                        (((((((xfname).xlower)).apply).xendswith)).apply ("pyc")).if
                          xfname.write (((unsupported)).apply ((xfname)) ((((unsupported)).apply ((1.neg)))))
                        (((unsupported)).apply ((((xopen)).apply ((xfname)) ("r"))) ((xf)))
                          xfcontents.write ((((xf).xread)).apply)
                        xsample_code.write (((unsupported)).apply ((((unsupported)).apply ("<assign>") ("x = 5"))) ((((unsupported)).apply ("<ifblock>") ("if True:n    passn"))) ((((unsupported)).apply ("<forblock>") ("for n in [1, 2, 3]:n    print(n)n"))) ((((unsupported)).apply ("<deffunc>") ("def foo():n    passnfoo()n"))) ((((unsupported)).apply ((xfname)) ((xfcontents)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfname)) ((xcode)))) ((xsample_code)))
                          seq
                            xco1.write (((xcompile)).apply ((xcode)) (("%s1".mod (xfname))) ("exec"))
                            xast.write (((xcompile)).apply ((xcode)) (("%s2".mod (xfname))) ("exec") (((x_ast).xPyCF_ONLY_AST)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xtype)).apply ((xast))).eq ((x_ast).xModule))))
                            xco2.write (((xcompile)).apply ((xast)) (("%s3".mod (xfname))) ("exec"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xco1)) ((xco2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco2).xco_filename)) (("%s3".mod (xfname))))
                        xco1.write (((xcompile)).apply ("print(1)") ("<string>") ("exec") (((x_ast).xPyCF_ONLY_AST)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompile)) ((xco1)) ("<ast>") ("eval"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompile)) (((((x_ast).xIf)).apply)) ("<ast>") ("exec"))
                        xast.write ((((x_ast).xModule)).apply)
                        (((unsupported)).apply (((xast).xbody)) ((((unsupported)).apply (((((x_ast).xBoolOp)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompile)) ((xast)) ("<ast>") ("exec"))
                xtest_dict_evaluation_order.write
                  [xself]
                    memory > xd
                    memory > xi
                    memory > xf
                    seq > @
                      seq
                        xi.write 0
                        xf.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) (1))
                                (((unsupported)).apply ((xi)))
                        xd.write (((unsupported)).apply ((((xf)).apply)) ((((xf)).apply)) ((((xf)).apply)) ((((xf)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply (1) (2) (3) (4))))
                xtest_compile_filename.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        (((unsupported)).apply ((xfilename)) ((((unsupported)).apply ("file.py") ("file.py"))))
                          seq
                            xcode.write (((xcompile)).apply ("pass") ((xfilename)) ("exec"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcode).xco_filename)) ("file.py"))
                        (((unsupported)).apply ((xfilename)) ((((unsupported)).apply ((((xbytearray)).apply ("file.py"))) ((((xmemoryview)).apply ("file.py"))))))
                          seq
                            (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                              xcode.write (((xcompile)).apply ("pass") ((xfilename)) ("exec"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcode).xco_filename)) ("file.py"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompile)) ("pass") ((((xlist)).apply ("file.py"))) ("exec"))
                xtest_same_filename_used.write
                  [xself]
                    memory > xs
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        xs.write "def f(): passndef g(): pass"
                        xc.write (((xcompile)).apply ((xs)) ("myfile") ("exec"))
                        (((unsupported)).apply ((xobj)) (((xc).xco_consts)))
                          (((xisinstance)).apply ((xobj)) (((xtypes).xCodeType))).if
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xobj).xco_filename)) (((xc).xco_filename)))
                xtest_single_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("n1 + 2"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2n"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2nn"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2ttn"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2ttn        "))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1 + 2 # one plus two"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("1; 2"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("import sys; sys"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("def f():n   pass"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("while False:n   pass"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("if x:n   f(x)"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("if x:n   f(x)nelse:n   g(x)"))
                        bogusForceDataize.write ((((xself).xcompile_single)).apply ("class T:n   pass"))
                xtest_bad_single_statement.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("1n2"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("def f(): pass"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("a = 13nb = 187"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("del xndel y"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("f()ng()"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("f()n# blahnblah()"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("f()nxy # blahnblah()"))
                        bogusForceDataize.write ((((xself).xassertInvalidSingle)).apply ("x = 5 # commentnx = 6n"))
                xtest_particularly_evil_undecodable.write
                  [xself]
                    memory > xsrc
                    memory > xres
                    memory > xfn
                    seq > @
                      seq
                        xsrc.write "0000x00n00000000000nx00nx9en"
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmpd)))
                          seq
                            xfn.write (((((xos).xpath).xjoin)).apply ((xtmpd)) ("bad.py"))
                            (((unsupported)).apply ((((xopen)).apply ((xfn)) ("wb"))) ((xfp)))
                              bogusForceDataize.write ((((xfp).xwrite)).apply ((xsrc)))
                            xres.write (((unsupported)).apply (((((xscript_helper).xrun_python_until_end)).apply ((xfn)))) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Non-UTF-8") (((xres).xerr)))
                xtest_yet_more_evil_still_undecodable.write
                  [xself]
                    memory > xsrc
                    memory > xres
                    memory > xfn
                    seq > @
                      seq
                        xsrc.write "#x00n#xfdn"
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmpd)))
                          seq
                            xfn.write (((((xos).xpath).xjoin)).apply ((xtmpd)) ("bad.py"))
                            (((unsupported)).apply ((((xopen)).apply ((xfn)) ("wb"))) ((xfp)))
                              bogusForceDataize.write ((((xfp).xwrite)).apply ((xsrc)))
                            xres.write (((unsupported)).apply (((((xscript_helper).xrun_python_until_end)).apply ((xfn)))) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Non-UTF-8") (((xres).xerr)))
                xtest_compiler_recursion_limit.write
                  [xself]
                    memory > xfail_depth
                    memory > xcheck_limit
                    memory > xsuccess_depth
                    seq > @
                      (((unsupported)).apply)
                        xfail_depth.write (((((xsys).xgetrecursionlimit)).apply).mul 3)
                        xsuccess_depth.write (((xint)).apply (((xfail_depth).mul 0.75)))
                        xcheck_limit.write
                          [xprefix xrepeated]
                            memory > xexpect_ok
                            memory > xdetails
                            memory > xbroken
                            seq > @
                              seq
                                xexpect_ok.write ((xprefix).add ((xrepeated).mul (xsuccess_depth)))
                                bogusForceDataize.write ((((xself).xcompile_single)).apply ((xexpect_ok)))
                                xbroken.write ((xprefix).add ((xrepeated).mul (xfail_depth)))
                                xdetails.write ((("Compiling ({!r} + {!r} * {})".xformat)).apply ((xprefix)) ((xrepeated)) ((xfail_depth)))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xRecursionError)) ((xdetails)))))
                                  bogusForceDataize.write ((((xself).xcompile_single)).apply ((xbroken)))
                        bogusForceDataize.write (((xcheck_limit)).apply ("a") ("()"))
                        bogusForceDataize.write (((xcheck_limit)).apply ("a") (".b"))
                        bogusForceDataize.write (((xcheck_limit)).apply ("a") ("[0]"))
                        bogusForceDataize.write (((xcheck_limit)).apply ("a") ("*a"))
                xtest_null_terminated.write
                  [xself]
                    memory > xcode
                    memory > xnamespace
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot contain null"))))
                          bogusForceDataize.write (((xcompile)).apply ("123x00") ("<dummy>") ("eval"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot contain null"))))
                          bogusForceDataize.write (((xcompile)).apply ((((xmemoryview)).apply ("123x00"))) ("<dummy>") ("eval"))
                        xcode.write (((xcompile)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("123x00"))) ((((unsupported)).apply (1) ((1.neg)))))) ("<dummy>") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) (23))
                        xcode.write (((xcompile)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("1234"))) ((((unsupported)).apply (1) ((1.neg)))))) ("<dummy>") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) (23))
                        xcode.write (((xcompile)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("$23$"))) ((((unsupported)).apply (1) ((1.neg)))))) ("<dummy>") ("eval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xcode)))) (23))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("1234"))) ((((unsupported)).apply (1) ((1.neg)))))))) (23))
                        xnamespace.write (((xdict)).apply)
                        bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("ax = 123"))) ((((unsupported)).apply (1) ((1.neg)))))) ((xnamespace)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnamespace)) ("x"))) (12))
                xcheck_constant.write
                  [xself xfunc xexpected]
                    seq > @
                      (((unsupported)).apply ((xconst)) ((((xfunc).x__code__).xco_consts)))
                        ((((xrepr)).apply ((xconst))).eq (((xrepr)).apply ((xexpected)))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xfail)).apply (("unable to find constant %r in %r".mod (((unsupported)).apply ((xexpected)) ((((xfunc).x__code__).xco_consts))))))
                xtest_merge_constants.write
                  [xself]
                    memory > xf3
                    memory > xcheck_same_constant
                    seq > @
                      (((unsupported)).apply)
                        xcheck_same_constant.write
                          [xconst]
                            memory > xns
                            memory > xcode
                            memory > xf2
                            memory > xf1
                            seq > @
                              seq
                                xns.write (((unsupported)).apply)
                                xcode.write ("f1, f2 = lambda: %r, lambda: %r".mod (((unsupported)).apply ((xconst)) ((xconst))))
                                bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)))
                                xf1.write (((unsupported)).apply ((xns)) ("f1"))
                                xf2.write (((unsupported)).apply ((xns)) ("f2"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                                bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) ((xconst)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf1)).apply)))) ((((xrepr)).apply ((xconst)))))
                        bogusForceDataize.write (((xcheck_same_constant)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xcheck_same_constant)).apply (0))
                        bogusForceDataize.write (((xcheck_same_constant)).apply (0.0))
                        bogusForceDataize.write (((xcheck_same_constant)).apply ("abc"))
                        bogusForceDataize.write (((xcheck_same_constant)).apply ("abc"))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) ((xEllipsis)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf1)).apply)))) ((((xrepr)).apply ((xEllipsis)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ((((unsupported)).apply ("not a name"))) ((((unsupported)).apply ((((unsupported)).apply ("not a name"))))))))
                        xf3.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((((unsupported)).apply ("not a name"))))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((xf1).x__code__).xco_consts)) (1))) ((((unsupported)).apply ((((unsupported)).apply ((((xf2).x__code__).xco_consts)) (1))) (0))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xnext)).apply ((((xiter)).apply ((((unsupported)).apply ((((xf3).x__code__).xco_consts)) (1))))))) ((((unsupported)).apply ((((xf2).x__code__).xco_consts)) (1))))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply (0))))))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) ((((xfrozenset)).apply ((((unsupported)).apply (0))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xf1)).apply (0))))
                xtest_peephole_opt_unreachable_code_array_access_in_bounds.write
                  [xself]
                    memory > xunused_code_at_end
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xunused_code_at_end.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply (3))
                                (((unsupported)).apply ((((xRuntimeError)).apply ("unreachable"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("RETURN_VALUE") (((((unsupported)).apply ((((xlist)).apply (((((xdis).xget_instructions)).apply ((xunused_code_at_end)))))) ((1.neg))).xopname)))
                xtest_dont_merge_constants.write
                  [xself]
                    memory > xcheck_different_constants
                    seq > @
                      seq
                        xcheck_different_constants.write
                          [xconst1 xconst2]
                            memory > xns
                            memory > xf2
                            memory > xf1
                            seq > @
                              seq
                                xns.write (((unsupported)).apply)
                                bogusForceDataize.write (((xexec)).apply (("f1, f2 = lambda: %r, lambda: %r".mod (((unsupported)).apply ((xconst1)) ((xconst2))))) ((xns)))
                                xf1.write (((unsupported)).apply ((xns)) ("f1"))
                                xf2.write (((unsupported)).apply ((xns)) ("f2"))
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                                bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                                bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) ((xconst1)))
                                bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf2)) ((xconst2)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf1)).apply)))) ((((xrepr)).apply ((xconst1)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf2)).apply)))) ((((xrepr)).apply ((xconst2)))))
                        bogusForceDataize.write (((xcheck_different_constants)).apply (0) (0.0))
                        bogusForceDataize.write (((xcheck_different_constants)).apply ((0.0)) ((0.0.neg)))
                        bogusForceDataize.write (((xcheck_different_constants)).apply ((((unsupported)).apply (0))) ((((unsupported)).apply (0.0))))
                        bogusForceDataize.write (((xcheck_different_constants)).apply ("a") ("a"))
                        bogusForceDataize.write (((xcheck_different_constants)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("a"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply))))) ((((unsupported)).apply (((((unsupported)).apply).neg)))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) (((((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf2)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf1)).apply)))) ((((xrepr)).apply (((((unsupported)).apply))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xf2)).apply)))) ((((xrepr)).apply (((((unsupported)).apply).neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf2)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply (0.0))))))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf1).x__code__)) (((xf2).x__code__)))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf1)) ((((xfrozenset)).apply ((((unsupported)).apply (0))))))
                        bogusForceDataize.write ((((xself).xcheck_constant)).apply ((xf2)) ((((xfrozenset)).apply ((((unsupported)).apply (0.0))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xf1)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xf2)).apply (0.0))))
                xtest_path_like_objects.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xcompile)).apply ("42") ((((xFakePath)).apply ("test_compile_pathlike"))) ("single"))
                xtest_stack_overflow.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xcompile)).apply (("if a: bn".mul 200000)) ("<dummy>") ("exec"))
                xtest_dead_blocks_do_not_generate_bytecode.write
                  [xself]
                    memory > xunused_block_if
                    memory > xopcodes
                    memory > xunused_block_while_else
                    memory > xunused_block_while
                    memory > xfuncs
                    memory > xunused_block_if_else
                    seq > @
                      (((unsupported)).apply)
                        xunused_block_if.write
                          []
                            seq > @
                              0.if
                                (((unsupported)).apply (42))
                        xunused_block_while.write
                          []
                            seq > @
                              while.
                                0
                                [unused]
                                  seq > @
                                    (((unsupported)).apply (42))
                        xunused_block_if_else.write
                          []
                            seq > @
                              1.if
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply (42))
                        xunused_block_while_else.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply (42))
                        xfuncs.write (((unsupported)).apply ((xunused_block_if)) ((xunused_block_while)) ((xunused_block_if_else)) ((xunused_block_while_else)))
                        (((unsupported)).apply ((xfunc)) ((xfuncs)))
                          seq
                            xopcodes.write (((xlist)).apply (((((xdis).xget_instructions)).apply ((xfunc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (2) ((((xlen)).apply ((xopcodes)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("LOAD_CONST") (((((unsupported)).apply ((xopcodes)) (0)).xopname)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((unsupported)).apply ((xopcodes)) (0)).xargval)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("RETURN_VALUE") (((((unsupported)).apply ((xopcodes)) (1)).xopname)))
                xtest_false_while_loop.write
                  [xself]
                    memory > xfuncs
                    memory > xcontinue_in_while
                    memory > xopcodes
                    memory > xbreak_in_while
                    seq > @
                      seq
                        xbreak_in_while.write
                          []
                            seq > @
                              while.
                                FALSE
                                [unused]
                                  seq > @
                                    (((unsupported)).apply)
                        xcontinue_in_while.write
                          []
                            seq > @
                              while.
                                FALSE
                                [unused]
                                  seq > @
                                    (((unsupported)).apply)
                        xfuncs.write (((unsupported)).apply ((xbreak_in_while)) ((xcontinue_in_while)))
                        (((unsupported)).apply ((xfunc)) ((xfuncs)))
                          seq
                            xopcodes.write (((xlist)).apply (((((xdis).xget_instructions)).apply ((xfunc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (2) ((((xlen)).apply ((xopcodes)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("LOAD_CONST") (((((unsupported)).apply ((xopcodes)) (0)).xopname)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((unsupported)).apply ((xopcodes)) (0)).xargval)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("RETURN_VALUE") (((((unsupported)).apply ((xopcodes)) (1)).xopname)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xN.write 100
                xcheck_stack_size.write
                  [xself xcode]
                    memory > xmax_size
                    seq > @
                      seq
                        (((xisinstance)).apply ((xcode)) ((xstr))).if
                          xcode.write (((xcompile)).apply ((xcode)) ("<foo>") ("single"))
                        xmax_size.write ((((xmath).xceil)).apply (((((xmath).xlog)).apply ((((xlen)).apply (((xcode).xco_code)))))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((xcode).xco_stacksize)) ((xmax_size)))
                xtest_and.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x and ".mul ((xself).xN)).add "x")))
                xtest_or.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x or ".mul ((xself).xN)).add "x")))
                xtest_and_or.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x and x or ".mul ((xself).xN)).add "x")))
                xtest_chained_comparison.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x < ".mul ((xself).xN)).add "x")))
                xtest_if_else.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x if x else ".mul ((xself).xN)).add "x")))
                xtest_binop.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((("x + ".mul ((xself).xN)).add "x")))
                xtest_func_and.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "def f(x):n"
                        (((unsupported)).apply ((xcode)) (("   x and xn".mul ((xself).xN))))
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xcode)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_stack_size.write
                  [xself xsnippet xasync_]
                    memory > xsizes
                    memory > xout
                    memory > xcompile_snippet
                    seq > @
                      (((unsupported)).apply)
                        xcompile_snippet.write
                          [xi]
                            memory > xns
                            memory > xcode
                            memory > xscript
                            seq > @
                              seq
                                xns.write (((unsupported)).apply)
                                xscript.write ("def func():n".add ((xi).mul (xsnippet)))
                                (xasync_).if
                                  xscript.write ("async ".add (xscript))
                                xcode.write (((xcompile)).apply ((xscript)) ("<script>") ("exec"))
                                bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)) ((xns)))
                                (((unsupported)).apply (((((unsupported)).apply ((xns)) ("func")).x__code__)))
                        xsizes.write (((unsupported)).apply (((((xcompile_snippet)).apply ((xi))).xco_stacksize)) ((xi)) ((((xrange)).apply (2) (5))))
                        ((((xlen)).apply ((((xset)).apply ((xsizes))))).neq 1).if
                          seq
                            seq
                              (((unsupported)).apply)
                              (((unsupported)).apply)
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply (((xdis).xdis)) ((((xcompile_snippet)).apply (1))) ((xout)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("stack sizes diverge with # of consecutive snippets: %sn%sn%s".mod (((unsupported)).apply ((xsizes)) ((xsnippet)) (((((xout).xgetvalue)).apply))))))
                xtest_if.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_if_else.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_try_except_bare.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_try_except_qualified.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_try_except_as.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_try_finally.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_with.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_while_else.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_else.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_break_continue.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_break_continue_inside_try_finally_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_break_continue_inside_finally_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_break_continue_inside_except_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_for_break_continue_inside_with_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_return_inside_try_finally_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_return_inside_finally_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_return_inside_except_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_return_inside_with_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_stack_size)).apply ((xsnippet)))
                xtest_async_with.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_stack_size)) ((xsnippet)) (TRUE))
                xtest_async_for.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_stack_size)) ((xsnippet)) (TRUE))
                xtest_async_for_else.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_stack_size)) ((xsnippet)) (TRUE))
                xtest_for_break_continue_inside_async_with_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_stack_size)) ((xsnippet)) (TRUE))
                xtest_return_inside_async_with_block.write
                  [xself]
                    memory > xsnippet
                    seq > @
                      seq
                        xsnippet.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_stack_size)) ((xsnippet)) (TRUE))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)