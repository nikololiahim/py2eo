memory > xerr
memory > xi
memory > xobject
memory > xscript_helper
memory > xcm
memory > xUnicodeError
memory > xContext
memory > xTestException
memory > xC
memory > xcopy
memory > xcheck_warnings
memory > xMainError
memory > xImportError
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xrc
memory > xc
memory > xDerivedException
memory > xexpected
memory > xpickle
memory > xRuntimeError
memory > xKeyboardInterrupt
memory > xdelattr
memory > xBadException
memory > xlocals
memory > xcheckArgName
memory > xValueError
memory > ximport_module
memory > xerrno
memory > xklass
memory > xstr
memory > xout
memory > xdummy
memory > xMyObject
memory > xBytesWarning
memory > xexec
memory > xTabError
memory > xrange
memory > x_testcapi
memory > xraise_memoryerror
memory > xZeroDivisionError
memory > xMyException
memory > x_
memory > xIndexError
memory > xbytearray
memory > xMyObj
memory > xStopIteration
memory > xMemoryError
memory > xKeyError
memory > xSubError
memory > xStopAsyncIteration
memory > xproto
memory > xInvalidException
memory > xp
memory > xopen
memory > xundefined_variable
memory > xprint
memory > xtype
memory > xcheck_impl_detail
memory > xWindowsError
memory > xrepr
memory > xException
memory > xtb
memory > xOverflowError
memory > xcompile
memory > xsupport
memory > xsys
memory > xissubclass
memory > xBaseException
memory > xRecursionError
memory > xgc_collect
memory > xchr
memory > xunlink
memory > xNaiveException
memory > xstderr
memory > xMeta
memory > xSlottedNaiveException
memory > xexc_type
memory > xBrokenDel
memory > xargs
memory > xOSError
memory > xTESTFN
memory > xos
memory > xtraceback
memory > xSystemError
memory > xweakref
memory > xgetattr
memory > xv
memory > xprotocol
memory > xSyntaxError
memory > xUnicodeEncodeError
memory > xe
memory > x__file__
memory > xsetattr
memory > xunittest
memory > xSystemExit
memory > xexc
memory > xEOFError
memory > xnext
memory > x__import__
memory > xkwargs
memory > xBrokenStrException
memory > xisinstance
memory > xNameError
memory > xcaptured_stderr
memory > xmarshal
memory > xdict
memory > xUnicodeTranslateError
memory > xSuppressCrashReport
memory > xTypeError
memory > xsomething
memory > x__name__
memory > xIndentationError
[] > test_exceptions
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_generator_doesnt_retain_old_exc2
        memory > xtestChainingAttrs
        memory > xtest_unraisable
        memory > xtestInvalidAttrs
        memory > xtest_attributes
        memory > x__str__
        memory > xtestSettingException
        memory > xtestInvalidTraceback
        memory > xtest_memory_error_subclasses
        memory > xtest_recursion_normalizing_exception
        memory > xtestAttributes
        memory > xtest_3114
        memory > xtest_errno_ENOTDIR
        memory > xtest_generator_next_cleanup_exc_state
        memory > xtestSyntaxErrorOffset
        memory > xtest_recursion_normalizing_infinite_exception
        memory > xtest_unhandled
        memory > xtest_generator_leaking4
        memory > x_check_generator_cleanup_exc_state
        memory > xtest_unicode_errors_no_object
        memory > xtestExceptionCleanupNames
        memory > xtest_recursion_normalizing_with_no_memory
        memory > xraise_catch
        memory > xtestExceptionCleanupState
        memory > xtest_memory_error_cleanup
        memory > xtest_exception_with_doc
        memory > xtest_non_str_argument
        memory > xtest_windows_message
        memory > xtest_generator_doesnt_retain_old_exc
        memory > xtest_badisinstance
        memory > xtestKeywordArgs
        memory > xtestChainingDescriptors
        memory > xtest_generator_close_cleanup_exc_state
        memory > x__slots__
        memory > xtestWithTraceback
        memory > xtest_str
        memory > xtest_generator_throw_cleanup_exc_state
        memory > xtest_generator_leaking
        memory > xtestInfiniteRecursion
        memory > xtestNoneClearsTracebackAttr
        memory > xtest_generator_send_cleanup_exc_state
        memory > xtest_memory_error_in_PyErr_PrintEx
        memory > xtest_generator_finalizing_and_exc_info
        memory > x__init__
        memory > xtest_recursion_error_cleanup
        memory > xtest_generator_leaking2
        memory > xtestRaising
        memory > xtest_unicode_change_attributes
        memory > xtest_yield_in_nested_try_excepts
        memory > xtest_MemoryError
        memory > xtest_raise_in_generator
        memory > xtest_generator_del_cleanup_exc_state
        memory > xtest_generator_leaking3
        memory > xtest_reset_attributes
        memory > xtestSyntaxErrorMissingParens
        memory > xtest_WindowsError
        memory > xtest_exception_target_in_nested_scope
        memory > xtestSyntaxErrorMessage
        memory > xtest_copy_pickle
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
              x__init__.write
                [xself xx]
                  seq > @
                    (((unsupported)).apply (((xself).xx)) ((xx)))
            (((unsupported)).apply ((xException)))
              seq
                x__slots__.write (((unsupported)).apply ("x"))
                x__init__.write
                  [xself xx]
                    seq > @
                      (((unsupported)).apply (((xself).xx)) ((xx)))
            (((unsupported)).apply ((xException)))
              x__str__.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((xException)).apply ("str() is broken"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xraise_catch.write
                  [xself xexc xexcname]
                    memory > xbuf2
                    memory > xbuf1
                    seq > @
                      seq
                        (((unsupported)).apply ((xexc)))
                          (((unsupported)).apply ((((xexc)).apply ("spam"))))
                          xbuf1.write (((xstr)).apply ((xerr)))
                        (((unsupported)).apply ((xexc)))
                          (((unsupported)).apply ((((xexc)).apply ("spam"))))
                          xbuf2.write (((xstr)).apply ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuf1)) ((xbuf2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).x__name__)) ((xexcname)))
                xtestRaising.write
                  [xself]
                    memory > xx
                    memory > xfp
                    memory > xsavestdin
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xAttributeError)) ("AttributeError"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xgetattr)) ((xsys)) ("undefined_attribute"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xEOFError)) ("EOFError"))
                        xfp.write (((xopen)).apply ((xTESTFN)) ("w"))
                        bogusForceDataize.write ((((xfp).xclose)).apply)
                        xfp.write (((xopen)).apply ((xTESTFN)) ("r"))
                        xsavestdin.write ((xsys).xstdin)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xEOFError)))
                            seq
                              (((unsupported)).apply)
                              bogusForceDataize.write ((((xmarshal).xloads)).apply (""))
                          seq
                            (((unsupported)).apply (((xsys).xstdin)) ((xsavestdin)))
                            bogusForceDataize.write ((((xfp).xclose)).apply)
                            bogusForceDataize.write (((xunlink)).apply ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xOSError)) ("OSError"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) ((xopen)) ("this file does not exist") ("r"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xImportError)) ("ImportError"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xImportError)) ((x__import__)) ("undefined_module"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xIndexError)) ("IndexError"))
                        xx.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xx).x__getitem__)) (10))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xKeyError)) ("KeyError"))
                        xx.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xx).x__getitem__)) ("key"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xKeyboardInterrupt)) ("KeyboardInterrupt"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xMemoryError)) ("MemoryError"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xNameError)) ("NameError"))
                        (((unsupported)).apply ((xNameError)))
                          xx.write (xundefined_variable)
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xOverflowError)) ("OverflowError"))
                        xx.write 1
                        (((unsupported)).apply ((xdummy)) ((((xrange)).apply (128))))
                          (((unsupported)).apply ((xx)) ((xx)))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xRuntimeError)) ("RuntimeError"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xRecursionError)) ("RecursionError"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xSyntaxError)) ("SyntaxError"))
                        (((unsupported)).apply ((xSyntaxError)))
                          bogusForceDataize.write (((xexec)).apply ("/n"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xIndentationError)) ("IndentationError"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xTabError)) ("TabError"))
                        (((unsupported)).apply ((xTabError)))
                          bogusForceDataize.write (((xcompile)).apply ("try:nt1/0n    t1/0nfinally:n passn") ("<string>") ("exec"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("TabError not raised"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xSystemError)) ("SystemError"))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xSystemExit)) ("SystemExit"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSystemExit)) (((xsys).xexit)) (0))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xTypeError)) ("TypeError"))
                        (((unsupported)).apply ((xTypeError)))
                          unsupported
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xValueError)) ("ValueError"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xchr)) ((((unsupported)).apply (17) (16))))
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xZeroDivisionError)) ("ZeroDivisionError"))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          xx.write (1.div 0)
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xException)) ("Exception"))
                        (((unsupported)).apply ((xException)))
                          xx.write (1.div 0)
                        bogusForceDataize.write ((((xself).xraise_catch)).apply ((xStopAsyncIteration)) ("StopAsyncIteration"))
                xtestSyntaxErrorMessage.write
                  [xself]
                    memory > xs
                    memory > xckmsg
                    seq > @
                      seq
                        xckmsg.write
                          [xsrc xmsg]
                            seq > @
                              (((unsupported)).apply ((xSyntaxError)))
                                bogusForceDataize.write (((xcompile)).apply ((xsrc)) ("<fragment>") ("exec"))
                                (((xe).xmsg).neq (xmsg)).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("expected %s, got %s".mod (((unsupported)).apply ((xmsg)) (((xe).xmsg))))))
                                bogusForceDataize.write ((((xself).xfail)).apply ("failed to get expected SyntaxError"))
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("'continue' not properly in loop"))
                        bogusForceDataize.write (((xckmsg)).apply ("continuen") ("'continue' not properly in loop"))
                xtestSyntaxErrorMissingParens.write
                  [xself]
                    memory > xs
                    memory > xckmsg
                    seq > @
                      seq
                        xckmsg.write
                          [xsrc xmsg xexception]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xexception)))
                                  bogusForceDataize.write (((xcompile)).apply ((xsrc)) ("<fragment>") ("exec"))
                                  (((xe).xmsg).neq (xmsg)).if
                                    bogusForceDataize.write ((((xself).xfail)).apply (("expected %s, got %s".mod (((unsupported)).apply ((xmsg)) (((xe).xmsg))))))
                                  bogusForceDataize.write ((((xself).xfail)).apply ("failed to get expected SyntaxError"))
                        xs.write "print \"old style\""
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("Missing parentheses in call to 'print'. Did you mean print(\"old style\")?"))
                        xs.write "print \"old style\","
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("Missing parentheses in call to 'print'. Did you mean print(\"old style\", end=\" \")?"))
                        xs.write "exec \"old style\""
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("Missing parentheses in call to 'exec'"))
                        xs.write "if True:nprint \"No indent\""
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("expected an indented block") ((xIndentationError)))
                        xs.write "if True:n        print()ntexec \"mixed tabs and spaces\""
                        bogusForceDataize.write (((xckmsg)).apply ((xs)) ("inconsistent use of tabs and spaces in indentation") ((xTabError)))
                xtestSyntaxErrorOffset.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xsrc xlineno xoffset xencoding]
                            memory > xline
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))) ((xcm)))
                                  bogusForceDataize.write (((xcompile)).apply ((xsrc)) ("<fragment>") ("exec"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xlineno)) ((xlineno)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xoffset)) ((xoffset)))
                                (((unsupported)).apply ((((xcm).xexception).xtext)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    ((((xisinstance)).apply ((xsrc)) ((xstr))).not).if
                                      xsrc.write ((((xsrc).xdecode)).apply ((xencoding)) ("replace"))
                                    xline.write (((unsupported)).apply (((((xsrc).xsplit)).apply ("n"))) (((xlineno).sub 1)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xcm).xexception).xtext).xrstrip)).apply ("n"))) ((xline)))
                        bogusForceDataize.write (((xcheck)).apply ("def fact(x):ntreturn x!n") (2) (10))
                        bogusForceDataize.write (((xcheck)).apply ("1 +n") (1) (4))
                        bogusForceDataize.write (((xcheck)).apply ("def spam():n  print(1)n print(2)") (3) (10))
                        bogusForceDataize.write (((xcheck)).apply ("Python = \"Python\" +") (1) (20))
                        bogusForceDataize.write (((xcheck)).apply ("Python = \"u1e54xfdu0163u0125xf2xf1\" +") (1) (20))
                        (((unsupported)).apply ((xcheck)) ("# -*- coding: cp1251 -*-nPython = \"xcfxb3xf2xeexed\" +") (2) (19) ("cp1251"))
                        bogusForceDataize.write (((xcheck)).apply ("Python = \"xcfxb3xf2xeexed\" +") (1) (18))
                        bogusForceDataize.write (((xcheck)).apply ("x = \"a") (1) (7))
                        bogusForceDataize.write (((xcheck)).apply ("lambda x: x = 2") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("class foo:return 1") (1) (11))
                        bogusForceDataize.write (((xcheck)).apply ("def f():n  continue") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("def f():n  continue") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("try:n  passnexcept:n  passnexcept ValueError:n  pass") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("(0x+1)") (1) (3))
                        bogusForceDataize.write (((xcheck)).apply ("x = 0xI") (1) (6))
                        bogusForceDataize.write (((xcheck)).apply ("0010 + 2") (1) (4))
                        bogusForceDataize.write (((xcheck)).apply ("x = 32e-+4") (1) (8))
                        bogusForceDataize.write (((xcheck)).apply ("x = 0o9") (1) (6))
                        bogusForceDataize.write (((xcheck)).apply ("u03b1 = 0xI") (1) (6))
                        bogusForceDataize.write (((xcheck)).apply ("xcexb1 = 0xI") (1) (6))
                        (((unsupported)).apply ((xcheck)) ("# -*- coding: iso8859-7 -*-nxe1 = 0xI") (2) (6) ("iso8859-7"))
                        bogusForceDataize.write (((xcheck)).apply ("x = [(yield i) for i in range(3)]") (1) (5))
                        bogusForceDataize.write (((xcheck)).apply ("def f():n  from _ import *") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("def f(x, x):n  pass") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("def f(x):n  nonlocal x") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("def f(x):n  x = 1n  global x") (3) (3))
                        bogusForceDataize.write (((xcheck)).apply ("nonlocal x") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("def f():n  global xn  nonlocal x") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("for 1 in []: pass") (1) (5))
                        bogusForceDataize.write (((xcheck)).apply ("def f(*):n  pass") (1) (7))
                        bogusForceDataize.write (((xcheck)).apply ("[*x for x in xs]") (1) (2))
                        bogusForceDataize.write (((xcheck)).apply ("def f():n  x, y: int") (2) (3))
                        bogusForceDataize.write (((xcheck)).apply ("(yield i) = 2") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("foo(x for x in range(10), 100)") (1) (5))
                        bogusForceDataize.write (((xcheck)).apply ("foo(1=2)") (1) (5))
                        bogusForceDataize.write (((xcheck)).apply ("from __future__ import doesnt_exist") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("from __future__ import braces") (1) (1))
                        bogusForceDataize.write (((xcheck)).apply ("x=1nfrom __future__ import division") (2) (1))
                xtestSettingException.write
                  [xself]
                    memory > xtest_capi1
                    memory > xtest_capi3
                    memory > xtest_capi2
                    memory > x__init__
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          x__init__.write
                            [xself_]
                              seq > @
                                (((unsupported)).apply ((((xRuntimeError)).apply ("can't instantiate BadException"))))
                        (((unsupported)).apply)
                        xtest_capi1.write
                          []
                            memory > xco
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xTypeError)))
                                  bogusForceDataize.write ((((x_testcapi).xraise_exception)).apply ((xBadException)) (1))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xexc)) ((xerr)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                                    xco.write (((xtb).xtb_frame).xf_code)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco).xco_name)) ("test_capi1"))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xco).xco_filename).xendswith)).apply ("test_exceptions.py"))))
                                  bogusForceDataize.write ((((xself).xfail)).apply ("Expected exception"))
                        xtest_capi2.write
                          []
                            memory > xco2
                            memory > xco
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xRuntimeError)))
                                  bogusForceDataize.write ((((x_testcapi).xraise_exception)).apply ((xBadException)) (0))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xexc)) ((xerr)) ((xtb)))) (((((xsys).xexc_info)).apply)))
                                    xco.write (((xtb).xtb_frame).xf_code)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco).xco_name)) ("__init__"))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xco).xco_filename).xendswith)).apply ("test_exceptions.py"))))
                                    xco2.write ((((xtb).xtb_frame).xf_back).xf_code)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xco2).xco_name)) ("test_capi2"))
                                  bogusForceDataize.write ((((xself).xfail)).apply ("Expected exception"))
                        xtest_capi3.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSystemError)) (((x_testcapi).xraise_exception)) ((xInvalidException)) (1))
                        ((((((xsys).xplatform).xstartswith)).apply ("java")).not).if
                          seq
                            bogusForceDataize.write (((xtest_capi1)).apply)
                            bogusForceDataize.write (((xtest_capi2)).apply)
                            bogusForceDataize.write (((xtest_capi3)).apply)
                xtest_WindowsError.write
                  [xself]
                    memory > xw
                    seq > @
                      (((unsupported)).apply ((xNameError)))
                        unsupported
                        seq
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((xWindowsError)) ((xOSError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOSError)).apply (1001))))) ("1001"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xOSError)).apply (1001) ("message"))))) ("[Errno 1001] message"))
                          xw.write (((xOSError)).apply (9) ("foo") ("bar"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xerrno)) (9))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwinerror)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xw)))) ("[Errno 9] foo: 'bar'"))
                          xw.write (((xOSError)).apply (0) ("foo") ("bar") (3))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xerrno)) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwinerror)) (3))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xstrerror)) ("foo"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename)) ("bar"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename2)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xw)))) ("[WinError 3] foo: 'bar'"))
                          xw.write (((xOSError)).apply (0) ("foo") ("None: is there a None literal in the EO language?") (1001))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xerrno)) (22))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwinerror)) (1001))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xstrerror)) ("foo"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename2)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xw)))) ("[WinError 1001] foo"))
                          xw.write (((xOSError)).apply ("bar") ("foo"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xerrno)) ("bar"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwinerror)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xstrerror)) ("foo"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xfilename2)) ("None: is there a None literal in the EO language?"))
                xtest_windows_message.write
                  [xself]
                    memory > xcode
                    memory > xctypes
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xctypes.write (((ximport_module)).apply ("ctypes"))
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xOSError)) (("Windows Error 0x%x".mod (xcode))))))
                          bogusForceDataize.write (((((xctypes).xpythonapi).xPyErr_SetFromWindowsErr)).apply ((xcode)))
                xtestAttributes.write
                  [xself]
                    memory > xwant
                    memory > xnew
                    memory > xvalue
                    memory > xs
                    memory > xe
                    memory > xexceptionList
                    memory > xgot
                    seq > @
                      seq
                        xexceptionList.write (((unsupported)).apply ((((unsupported)).apply ((xBaseException)) ((((unsupported)).apply)) ((((unsupported)).apply ("args") ((((unsupported)).apply)))))) ((((unsupported)).apply ((xBaseException)) ((((unsupported)).apply (1))) ((((unsupported)).apply ("args") ((((unsupported)).apply (1))))))) ((((unsupported)).apply ((xBaseException)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo"))))))) ((((unsupported)).apply ((xBaseException)) ((((unsupported)).apply ("foo") (1))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo") (1))))))) ((((unsupported)).apply ((xSystemExit)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo"))) ("code") ("foo"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo"))) ("filename") ("None: is there a None literal in the EO language?") ("filename2") ("None: is there a None literal in the EO language?") ("errno") ("None: is there a None literal in the EO language?") ("strerror") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo") ("bar"))) ("filename") ("None: is there a None literal in the EO language?") ("filename2") ("None: is there a None literal in the EO language?") ("errno") ("foo") ("strerror") ("bar"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply ("foo") ("bar") ("baz"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo") ("bar"))) ("filename") ("baz") ("filename2") ("None: is there a None literal in the EO language?") ("errno") ("foo") ("strerror") ("bar"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply ("foo") ("bar") ("baz") ("None: is there a None literal in the EO language?") ("quux"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo") ("bar"))) ("filename") ("baz") ("filename2") ("quux"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply ("errnoStr") ("strErrorStr") ("filenameStr"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("errnoStr") ("strErrorStr"))) ("strerror") ("strErrorStr") ("errno") ("errnoStr") ("filename") ("filenameStr"))))) ((((unsupported)).apply ((xOSError)) ((((unsupported)).apply (1) ("strErrorStr") ("filenameStr"))) ((((unsupported)).apply ("args") ((((unsupported)).apply (1) ("strErrorStr"))) ("errno") (1) ("strerror") ("strErrorStr") ("filename") ("filenameStr") ("filename2") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xSyntaxError)) ((((unsupported)).apply)) ((((unsupported)).apply ("msg") ("None: is there a None literal in the EO language?") ("text") ("None: is there a None literal in the EO language?") ("filename") ("None: is there a None literal in the EO language?") ("lineno") ("None: is there a None literal in the EO language?") ("offset") ("None: is there a None literal in the EO language?") ("print_file_and_line") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xSyntaxError)) ((((unsupported)).apply ("msgStr"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("msgStr"))) ("text") ("None: is there a None literal in the EO language?") ("print_file_and_line") ("None: is there a None literal in the EO language?") ("msg") ("msgStr") ("filename") ("None: is there a None literal in the EO language?") ("lineno") ("None: is there a None literal in the EO language?") ("offset") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xSyntaxError)) ((((unsupported)).apply ("msgStr") ((((unsupported)).apply ("filenameStr") ("linenoStr") ("offsetStr") ("textStr"))))) ((((unsupported)).apply ("offset") ("offsetStr") ("text") ("textStr") ("args") ((((unsupported)).apply ("msgStr") ((((unsupported)).apply ("filenameStr") ("linenoStr") ("offsetStr") ("textStr"))))) ("print_file_and_line") ("None: is there a None literal in the EO language?") ("msg") ("msgStr") ("filename") ("filenameStr") ("lineno") ("linenoStr"))))) ((((unsupported)).apply ((xSyntaxError)) ((((unsupported)).apply ("msgStr") ("filenameStr") ("linenoStr") ("offsetStr") ("textStr") ("print_file_and_lineStr"))) ((((unsupported)).apply ("text") ("None: is there a None literal in the EO language?") ("args") ((((unsupported)).apply ("msgStr") ("filenameStr") ("linenoStr") ("offsetStr") ("textStr") ("print_file_and_lineStr"))) ("print_file_and_line") ("None: is there a None literal in the EO language?") ("msg") ("msgStr") ("filename") ("None: is there a None literal in the EO language?") ("lineno") ("None: is there a None literal in the EO language?") ("offset") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xUnicodeError)) ((((unsupported)).apply)) ((((unsupported)).apply ("args") ((((unsupported)).apply)))))) ((((unsupported)).apply ((xUnicodeEncodeError)) ((((unsupported)).apply ("ascii") ("a") (0) (1) ("ordinal not in range"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("ascii") ("a") (0) (1) ("ordinal not in range"))) ("encoding") ("ascii") ("object") ("a") ("start") (0) ("reason") ("ordinal not in range"))))) ((((unsupported)).apply ((xUnicodeDecodeError)) ((((unsupported)).apply ("ascii") ((((xbytearray)).apply ("xff"))) (0) (1) ("ordinal not in range"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("ascii") ((((xbytearray)).apply ("xff"))) (0) (1) ("ordinal not in range"))) ("encoding") ("ascii") ("object") ("xff") ("start") (0) ("reason") ("ordinal not in range"))))) ((((unsupported)).apply ((xUnicodeDecodeError)) ((((unsupported)).apply ("ascii") ("xff") (0) (1) ("ordinal not in range"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("ascii") ("xff") (0) (1) ("ordinal not in range"))) ("encoding") ("ascii") ("object") ("xff") ("start") (0) ("reason") ("ordinal not in range"))))) ((((unsupported)).apply ((xUnicodeTranslateError)) ((((unsupported)).apply ("u3042") (0) (1) ("ouch"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("u3042") (0) (1) ("ouch"))) ("object") ("u3042") ("reason") ("ouch") ("start") (0) ("end") (1))))) ((((unsupported)).apply ((xNaiveException)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo"))) ("x") ("foo"))))) ((((unsupported)).apply ((xSlottedNaiveException)) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("args") ((((unsupported)).apply ("foo"))) ("x") ("foo"))))))
                        (((unsupported)).apply ((xNameError)))
                          bogusForceDataize.write ((((xexceptionList).xappend)).apply ((((unsupported)).apply ((xWindowsError)) ((((unsupported)).apply (1) ("strErrorStr") ("filenameStr"))) ((((unsupported)).apply ("args") ((((unsupported)).apply (1) ("strErrorStr"))) ("strerror") ("strErrorStr") ("winerror") ("None: is there a None literal in the EO language?") ("errno") (1) ("filename") ("filenameStr") ("filename2") ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xexc)) ((xargs)) ((xexpected)))) ((xexceptionList)))
                          (((unsupported)).apply)
                            xe.write (((xexc)).apply ((((unsupported)).apply ((xargs)))))
                            seq
                              (((unsupported)).apply ((xprint)) (("nexc=%r, args=%r".mod (((unsupported)).apply ((xexc)) ((xargs))))) (((xsys).xstderr)))
                              (((unsupported)).apply)
                            seq
                              ((((((((xtype)).apply ((xe))).x__name__).xendswith)).apply ("NaiveException")).not).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtype)).apply ((xe))).x__module__)) ("builtins"))
                              xs.write (((xstr)).apply ((xe)))
                              (((unsupported)).apply ((xcheckArgName)) ((xexpected)))
                                seq
                                  xvalue.write (((xgetattr)).apply ((xe)) ((xcheckArgName)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xvalue)))) ((((xrepr)).apply ((((unsupported)).apply ((xexpected)) ((xcheckArgName)))))) (("%r.%s == %r, expected %r".mod (((unsupported)).apply ((xe)) ((xcheckArgName)) ((xvalue)) ((((unsupported)).apply ((xexpected)) ((xcheckArgName))))))))
                              (((unsupported)).apply ((xp)) ((((unsupported)).apply ((xpickle)))))
                                (((unsupported)).apply ((xprotocol)) ((((xrange)).apply ((((xp).xHIGHEST_PROTOCOL).add 1)))))
                                  seq
                                    xs.write ((((xp).xdumps)).apply ((xe)) ((xprotocol)))
                                    xnew.write ((((xp).xloads)).apply ((xs)))
                                    (((unsupported)).apply ((xcheckArgName)) ((xexpected)))
                                      seq
                                        xgot.write (((xrepr)).apply ((((xgetattr)).apply ((xnew)) ((xcheckArgName)))))
                                        xwant.write (((xrepr)).apply ((((unsupported)).apply ((xexpected)) ((xcheckArgName)))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xwant)) (("pickled \"%r\", attribute \"%s".mod (((unsupported)).apply ((xe)) ((xcheckArgName))))))
                xtestWithTraceback.write
                  [xself]
                    memory > xe
                    memory > xtb
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((xIndexError)).apply (4))))
                          xtb.write (((unsupported)).apply (((((xsys).xexc_info)).apply)) (2))
                        xe.write ((((((xBaseException)).apply).xwith_traceback)).apply ((xtb)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xBaseException)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).x__traceback__)) ((xtb)))
                        xe.write ((((((xIndexError)).apply (5)).xwith_traceback)).apply ((xtb)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xIndexError)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).x__traceback__)) ((xtb)))
                        (((unsupported)).apply ((xException)))
                        xe.write ((((((xMyException)).apply).xwith_traceback)).apply ((xtb)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xMyException)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).x__traceback__)) ((xtb)))
                xtestInvalidTraceback.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xTypeError)))
                        (((unsupported)).apply (((((xException)).apply).x__traceback__)) (5))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__traceback__ must be a traceback") ((((xstr)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xfail)).apply ("No exception raised"))
                xtestInvalidAttrs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetattr)) ((((xException)).apply)) ("__cause__") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdelattr)) ((((xException)).apply)) ("__cause__"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetattr)) ((((xException)).apply)) ("__context__") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdelattr)) ((((xException)).apply)) ("__context__"))
                xtestNoneClearsTracebackAttr.write
                  [xself]
                    memory > xe
                    memory > xtb
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((xIndexError)).apply (4))))
                          xtb.write (((unsupported)).apply (((((xsys).xexc_info)).apply)) (2))
                        xe.write (((xException)).apply)
                        (((unsupported)).apply (((xe).x__traceback__)) ((xtb)))
                        (((unsupported)).apply (((xe).x__traceback__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).x__traceback__)) ("None: is there a None literal in the EO language?"))
                xtestChainingAttrs.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xException)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__context__)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__cause__)))
                        xe.write (((xTypeError)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__context__)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__cause__)))
                        (((unsupported)).apply ((xOSError)))
                        xe.write (((xMyException)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__context__)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__cause__)))
                xtestChainingDescriptors.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((((xException)).apply)))
                          xe.write (xexc)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__context__)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__cause__)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xe).x__suppress_context__)))
                        (((unsupported)).apply (((xe).x__context__)) ((((xNameError)).apply)))
                        (((unsupported)).apply (((xe).x__cause__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xe).x__context__)) ((xNameError)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xe).x__cause__)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xe).x__suppress_context__)))
                        (((unsupported)).apply (((xe).x__suppress_context__)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xe).x__suppress_context__)))
                xtestKeywordArgs.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xBaseException)) (1))
                        (((unsupported)).apply ((xBaseException)))
                          x__init__.write
                            [xself xfancy_arg]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xBaseException).x__init__)).apply ((xself)))
                                  (((unsupported)).apply (((xself).xfancy_arg)) ((xfancy_arg)))
                        xx.write (((unsupported)).apply ((xDerivedException)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfancy_arg)) (42))
                xtestInfiniteRecursion.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xf)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xf)))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xValueError)))
                                (((unsupported)).apply ((((xg)).apply)))
                                (((unsupported)).apply ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xg)))
                xtest_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xstr)).apply ((xException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xstr)).apply ((((xException)).apply ("a"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xstr)).apply ((((xException)).apply ("a") ("b"))))))
                xtestExceptionCleanupNames.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((((xException)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xe)))
                            (((unsupported)).apply ((((unsupported)).apply ((xe)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("e") ((((xlocals)).apply)))
                xtestExceptionCleanupState.write
                  [xself]
                    memory > xwr
                    memory > xinner_raising_func
                    memory > x__exit__
                    memory > x__enter__
                    memory > xobj
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          x__init__.write
                            [xself xobj]
                              seq > @
                                (((unsupported)).apply (((xself).xobj)) ((xobj)))
                        (((unsupported)).apply)
                        xinner_raising_func.write
                          []
                            memory > xlocal_ref
                            seq > @
                              seq
                                xlocal_ref.write (xobj)
                                (((unsupported)).apply ((((xMyException)).apply ((xobj)))))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((xMyException)))
                          bogusForceDataize.write (((xinner_raising_func)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((xMyException)))
                          bogusForceDataize.write (((xinner_raising_func)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply)
                          bogusForceDataize.write (((xinner_raising_func)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0))))
                          (((unsupported)).apply)
                            bogusForceDataize.write (((xinner_raising_func)).apply)
                            (((unsupported)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply)
                            bogusForceDataize.write (((xinner_raising_func)).apply)
                            (((unsupported)).apply ((xKeyError)))
                          seq
                            (((unsupported)).apply (((xe).x__context__)) ("None: is there a None literal in the EO language?"))
                            xobj.write "None: is there a None literal in the EO language?"
                            xobj.write (((xwr)).apply)
                            (((unsupported)).apply ((xcheck_impl_detail)) (FALSE)).if
                              bogusForceDataize.write (((xgc_collect)).apply)
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((xMyException)))
                          bogusForceDataize.write (((xinner_raising_func)).apply)
                          (((unsupported)).apply ((xMyException)))
                            (((unsupported)).apply)
                              (((unsupported)).apply)
                              (((unsupported)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xcheck_impl_detail)) (FALSE)).if
                          bogusForceDataize.write (((xgc_collect)).apply)
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                        (((unsupported)).apply)
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__exit__.write
                              [xself xexc_type xexc_value xexc_tb]
                                seq > @
                                  (((unsupported)).apply (TRUE))
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        (((unsupported)).apply ((((xContext)).apply)))
                          bogusForceDataize.write (((xinner_raising_func)).apply)
                        xobj.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xcheck_impl_detail)) (FALSE)).if
                          bogusForceDataize.write (((xgc_collect)).apply)
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                xtest_exception_target_in_nested_scope.write
                  [xself]
                    memory > xprint_error
                    seq > @
                      seq
                        xprint_error.write
                          []
                            seq > @
                              unsupported
                        (((unsupported)).apply ((xException)))
                          unsupported
                          bogusForceDataize.write (((xprint_error)).apply)
                xtest_generator_leaking.write
                  [xself]
                    memory > xg
                    memory > xyield_raise
                    seq > @
                      seq
                        xyield_raise.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xKeyError)))
                                  (((unsupported)).apply ((((xKeyError)).apply ("caught"))))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                                    (((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                                (((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                        xg.write (((xyield_raise)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((xKeyError)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((xKeyError)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((((xTypeError)).apply ("foo"))))
                          seq
                            xg.write (((xyield_raise)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((xKeyError)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xTypeError)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((xKeyError)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xTypeError)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) ((xTypeError)))
                            (((unsupported)).apply ((((unsupported)).apply ((xg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))) ((xTypeError)))
                xtest_generator_leaking2.write
                  [xself]
                    memory > xit
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xRuntimeError)))
                          (((unsupported)).apply ((xRuntimeError)))
                          seq
                            xit.write (((xg)).apply)
                            bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply ((xStopIteration)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_generator_leaking3.write
                  [xself]
                    memory > xgen_exc
                    memory > xit
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xZeroDivisionError)))
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (1))))
                        xit.write (((xg)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          unsupported
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (1))) ((xe)))
                            xgen_exc.write ((((xit).xthrow)).apply ((xe)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (1))) ((xe)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xgen_exc)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_generator_leaking4.write
                  [xself]
                    memory > xtp
                    memory > xit
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xZeroDivisionError)))
                                unsupported
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (0))))
                                  (((unsupported)).apply)
                        xit.write (((xg)).apply)
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((xTypeError)))
                          xtp.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xtp)) ((xZeroDivisionError)))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (1))) ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_generator_doesnt_retain_old_exc.write
                  [xself]
                    memory > xit
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)) (1))) ((xRuntimeError)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        xit.write (((xg)).apply)
                        (((unsupported)).apply ((xRuntimeError)))
                          (((unsupported)).apply ((xRuntimeError)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                xtest_generator_finalizing_and_exc_info.write
                  [xself]
                    memory > xrun_gen
                    memory > xsimple_gen
                    seq > @
                      seq
                        xsimple_gen.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        xrun_gen.write
                          []
                            memory > xgen
                            seq > @
                              seq
                                xgen.write (((xsimple_gen)).apply)
                                (((unsupported)).apply ((xRuntimeError)))
                                  (((unsupported)).apply ((xRuntimeError)))
                                  (((unsupported)).apply ((((xnext)).apply ((xgen)))))
                        bogusForceDataize.write (((xrun_gen)).apply)
                        bogusForceDataize.write (((xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                x_check_generator_cleanup_exc_state.write
                  [xself xtestfunc]
                    memory > xraising_gen
                    memory > xwr
                    memory > xg
                    memory > xobj
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                          x__init__.write
                            [xself xobj]
                              seq > @
                                (((unsupported)).apply (((xself).xobj)) ((xobj)))
                        (((unsupported)).apply)
                        xraising_gen.write
                          []
                            seq > @
                              (((unsupported)).apply ((xMyException)))
                                (((unsupported)).apply ((((xMyException)).apply ((xobj)))))
                                (((unsupported)).apply)
                        xobj.write (((xMyObj)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xobj)))
                        xg.write (((xraising_gen)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xg)))
                        bogusForceDataize.write (((xtestfunc)).apply ((xg)))
                        (((unsupported)).apply ((xg)) ((xobj)) ("None: is there a None literal in the EO language?"))
                        xobj.write (((xwr)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xobj)))
                xtest_generator_throw_cleanup_exc_state.write
                  [xself]
                    memory > xdo_throw
                    seq > @
                      seq
                        xdo_throw.write
                          [xg]
                            seq > @
                              (((unsupported)).apply ((xRuntimeError)))
                                bogusForceDataize.write ((((xg).xthrow)).apply ((((xRuntimeError)).apply)))
                        bogusForceDataize.write ((((xself).x_check_generator_cleanup_exc_state)).apply ((xdo_throw)))
                xtest_generator_close_cleanup_exc_state.write
                  [xself]
                    memory > xdo_close
                    seq > @
                      seq
                        xdo_close.write
                          [xg]
                            seq > @
                              bogusForceDataize.write ((((xg).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_check_generator_cleanup_exc_state)).apply ((xdo_close)))
                xtest_generator_del_cleanup_exc_state.write
                  [xself]
                    memory > xdo_del
                    seq > @
                      seq
                        xdo_del.write
                          [xg]
                            seq > @
                              xg.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).x_check_generator_cleanup_exc_state)).apply ((xdo_del)))
                xtest_generator_next_cleanup_exc_state.write
                  [xself]
                    memory > xdo_next
                    seq > @
                      seq
                        xdo_next.write
                          [xg]
                            seq > @
                              (((unsupported)).apply ((xStopIteration)))
                                bogusForceDataize.write (((xnext)).apply ((xg)))
                                bogusForceDataize.write ((((xself).xfail)).apply ("should have raised StopIteration"))
                        bogusForceDataize.write ((((xself).x_check_generator_cleanup_exc_state)).apply ((xdo_next)))
                xtest_generator_send_cleanup_exc_state.write
                  [xself]
                    memory > xdo_send
                    seq > @
                      seq
                        xdo_send.write
                          [xg]
                            seq > @
                              (((unsupported)).apply ((xStopIteration)))
                                bogusForceDataize.write ((((xg).xsend)).apply ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xfail)).apply ("should have raised StopIteration"))
                        bogusForceDataize.write ((((xself).x_check_generator_cleanup_exc_state)).apply ((xdo_send)))
                xtest_3114.write
                  [xself]
                    memory > xe
                    memory > x__del__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__del__.write
                            [xself]
                              memory > xe
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xe.write ((((xsys).xexc_info)).apply)
                        xe.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((xException)).apply ((((xMyObject)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_unicode_change_attributes.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write (((xUnicodeEncodeError)).apply ("baz") ("xxxxx") (1) (5) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'baz' codec can't encode characters in position 1-4: foo"))
                        (((unsupported)).apply (((xu).xend)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xu).xend)) (5))
                        (((unsupported)).apply (((xu).xreason)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'baz' codec can't encode characters in position 1-4: 965230951443685724997"))
                        (((unsupported)).apply (((xu).xencoding)) (4000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'4000' codec can't encode characters in position 1-4: 965230951443685724997"))
                        (((unsupported)).apply (((xu).xstart)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'4000' codec can't encode characters in position 1000-4: 965230951443685724997"))
                        xu.write (((xUnicodeDecodeError)).apply ("baz") ("xxxxx") (1) (5) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'baz' codec can't decode bytes in position 1-4: foo"))
                        (((unsupported)).apply (((xu).xend)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'baz' codec can't decode byte 0x78 in position 1: foo"))
                        (((unsupported)).apply (((xu).xend)) (5))
                        (((unsupported)).apply (((xu).xreason)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'baz' codec can't decode bytes in position 1-4: 965230951443685724997"))
                        (((unsupported)).apply (((xu).xencoding)) (4000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'4000' codec can't decode bytes in position 1-4: 965230951443685724997"))
                        (((unsupported)).apply (((xu).xstart)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("'4000' codec can't decode bytes in position 1000-4: 965230951443685724997"))
                        xu.write (((xUnicodeTranslateError)).apply ("xxxx") (1) (5) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("can't translate characters in position 1-4: foo"))
                        (((unsupported)).apply (((xu).xend)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xu).xend)) (5))
                        (((unsupported)).apply (((xu).xreason)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("can't translate characters in position 1-4: 965230951443685724997"))
                        (((unsupported)).apply (((xu).xstart)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xu)))) ("can't translate characters in position 1000-4: 965230951443685724997"))
                xtest_unicode_errors_no_object.write
                  [xself]
                    memory > xklasses
                    seq > @
                      seq
                        xklasses.write (((unsupported)).apply ((xUnicodeEncodeError)) ((xUnicodeDecodeError)) ((xUnicodeTranslateError)))
                        (((unsupported)).apply ((xklass)) ((xklasses)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((((xklass).x__new__)).apply ((xklass)))))) (""))
                xtest_badisinstance.write
                  [xself]
                    memory > x__subclasscheck__
                    memory > xg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xtype)))
                          x__subclasscheck__.write
                            [xcls xsubclass]
                              seq > @
                                (((unsupported)).apply ((((xValueError)).apply)))
                        (((unsupported)).apply ((xException)) ((xMeta)))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xstderr)))
                          (((unsupported)).apply ((xMyException)) ((xKeyError)))
                            (((unsupported)).apply ((((xKeyError)).apply)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("exception should not be a MyException"))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Should have raised KeyError"))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Should have raised KeyError"))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply ((xRecursionError)))
                                (((unsupported)).apply ((((xg)).apply)))
                                (((unsupported)).apply (((((xsys).xexc_info)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xe)) ((xv)) ((xtb)))) ((((xg)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xv)) ((xRecursionError)) ((((xtype)).apply ((xv)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("maximum recursion depth exceeded") ((((xstr)).apply ((xv)))))
                xtest_recursion_normalizing_exception.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write ((((unsupported)).apply).mod (x__file__))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_failure)).apply ("-Wd") ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("RecursionError") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ResourceWarning") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Done.") ((xout)))
                xtest_recursion_normalizing_infinite_exception.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_failure)).apply ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("RecursionError: maximum recursion depth exceeded while normalizing an exception") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Done.") ((xout)))
                xtest_recursion_normalizing_with_no_memory.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((xSuppressCrashReport)).apply)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_failure)).apply ("-c") ((xcode)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Fatal Python error: Cannot recover from MemoryErrors while normalizing exceptions.") ((xerr)))
                xtest_MemoryError.write
                  [xself]
                    memory > xraiseMemError
                    memory > xtb1
                    memory > xtb2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xraiseMemError.write
                          []
                            memory > xtb
                            seq > @
                              seq
                                (((unsupported)).apply ((xMemoryError)))
                                  bogusForceDataize.write (((xraise_memoryerror)).apply)
                                  xtb.write ((xe).x__traceback__)
                                  bogusForceDataize.write ((((xself).xfail)).apply ("Should have raises a MemoryError"))
                                (((unsupported)).apply (((((xtraceback).xformat_tb)).apply ((xtb)))))
                        xtb1.write (((xraiseMemError)).apply)
                        xtb2.write (((xraiseMemError)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtb1)) ((xtb2)))
                xtest_exception_with_doc.write
                  [xself]
                    memory > xdoc2
                    memory > xerror4
                    memory > xdoc4
                    memory > xerror2
                    memory > xerror3
                    memory > xerror5
                    memory > xerror1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdoc2.write "This is a test docstring."
                        xdoc4.write "This is another test docstring."
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSystemError)) (((x_testcapi).xmake_exception_with_doc)) ("error1"))
                        xerror1.write ((((x_testcapi).xmake_exception_with_doc)).apply ("_testcapi.error1"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xerror1)))) ((xtype)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xerror1)) ((xException)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xerror1).x__doc__)))
                        xerror2.write ((((x_testcapi).xmake_exception_with_doc)).apply ("_testcapi.error2") ((xdoc2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror2).x__doc__)) ((xdoc2)))
                        xerror3.write (((unsupported)).apply (((x_testcapi).xmake_exception_with_doc)) ("_testcapi.error3") ((xerror2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xerror3)) ((xerror2)))))
                        (((unsupported)).apply ((xobject)))
                        xerror4.write ((((x_testcapi).xmake_exception_with_doc)).apply ("_testcapi.error4") ((xdoc4)) ((((unsupported)).apply ((xerror3)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xerror4)) ((xerror3)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xerror4)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror4).x__doc__)) ((xdoc4)))
                        xerror5.write ((((x_testcapi).xmake_exception_with_doc)).apply ("_testcapi.error5") ("") ((xerror4)) ((((unsupported)).apply ("a") (1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xerror5)) ((xerror4)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror5).xa)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror5).x__doc__)) (""))
                xtest_memory_error_cleanup.write
                  [xself]
                    memory > xinner
                    memory > xwr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xwr.write "None: is there a None literal in the EO language?"
                        xinner.write
                          []
                            memory > xc
                            memory > xwr
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xc.write (((xC)).apply)
                                xwr.write ((((xweakref).xref)).apply ((xc)))
                                bogusForceDataize.write (((xraise_memoryerror)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          bogusForceDataize.write (((xinner)).apply)
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("MemoryError not raised"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_recursion_error_cleanup.write
                  [xself]
                    memory > xinner
                    memory > xwr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xwr.write "None: is there a None literal in the EO language?"
                        xinner.write
                          []
                            memory > xc
                            memory > xwr
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xc.write (((xC)).apply)
                                xwr.write ((((xweakref).xref)).apply ((xc)))
                                bogusForceDataize.write (((xinner)).apply)
                        (((unsupported)).apply ((xRecursionError)))
                          bogusForceDataize.write (((xinner)).apply)
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("RecursionError not raised"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_errno_ENOTDIR.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xos).xlistdir)).apply ((x__file__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOTDIR)) (((xcm).xexception)))
                xtest_unraisable.write
                  [xself]
                    memory > x__del__
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__del__.write
                            [xself]
                              memory > xexc
                              seq > @
                                seq
                                  xexc.write (((xValueError)).apply ("del is broken"))
                                  (((unsupported)).apply ((xexc)))
                        xobj.write (((xBrokenDel)).apply)
                        (((unsupported)).apply (((((xsupport).xcatch_unraisable_exception)).apply)) ((xcm)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xobj)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xunraisable).xobject)) (((xBrokenDel).x__del__)))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xcm).xunraisable).xexc_traceback)))
                xtest_unhandled.write
                  [xself]
                    memory > xreport
                    memory > xexc
                    seq > @
                      (((unsupported)).apply ((xexc_type)) ((((unsupported)).apply ((xValueError)) ((xBrokenStrException)))))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((xexc_type)))))
                          seq
                            (((unsupported)).apply ((xexc_type)))
                              seq
                                xexc.write (((xexc_type)).apply ("test message"))
                                (((unsupported)).apply ((xexc)))
                              (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xstderr)))
                                bogusForceDataize.write ((((xsys).x__excepthook__)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)))))
                            xreport.write ((((xstderr).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("test_exceptions.py") ((xreport)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xexc_type).x__name__)) ((xreport)))
                            (((unsupported)).apply ((xexc_type)) ((xBrokenStrException))).if
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("<exception str() failed>") ((xreport)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("test message") ((xreport)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreport).xendswith)).apply ("n"))))
                xtest_memory_error_in_PyErr_PrintEx.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (20))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_failure)).apply ("-c") (((xcode).mod (xi))))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xrc)) ((((unsupported)).apply (1) (120))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("MemoryError") ((xerr)))
                xtest_yield_in_nested_try_excepts.write
                  [xself]
                    memory > xmain
                    memory > xcoro
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xException)))
                        xmain.write
                          []
                            seq > @
                              (((unsupported)).apply ((xMainError)))
                                (((unsupported)).apply ((((xMainError)).apply)))
                                seq
                                  (((unsupported)).apply ((xSubError)))
                                    (((unsupported)).apply)
                                  (((unsupported)).apply)
                        xcoro.write (((xmain)).apply)
                        bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xMainError)))))
                          bogusForceDataize.write ((((xcoro).xthrow)).apply ((((xSubError)).apply)))
                xtest_generator_doesnt_retain_old_exc2.write
                  [xself]
                    memory > xgen
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xValueError)))
                                  (((unsupported)).apply ((xValueError)))
                                  (((unsupported)).apply (1))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xexc_info)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                                (((unsupported)).apply (2))
                        xgen.write (((xg)).apply)
                        (((unsupported)).apply ((xIndexError)))
                          (((unsupported)).apply ((xIndexError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xgen)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xgen)))) (2))
                xtest_raise_in_generator.write
                  [xself]
                    memory > xg
                    memory > xi
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply (1))
                                (((unsupported)).apply)
                                (((unsupported)).apply (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          seq
                            xi.write (((xg)).apply)
                            (((unsupported)).apply)
                              unsupported
                              seq
                                bogusForceDataize.write (((xnext)).apply ((xi)))
                                bogusForceDataize.write (((xnext)).apply ((xi)))
                xtest_memory_error_subclasses.write
                  [xself]
                    memory > xinst
                    seq > @
                      seq
                        (((unsupported)).apply ((xMemoryError)))
                        (((unsupported)).apply ((xMemoryError)))
                          (((unsupported)).apply ((xMemoryError)))
                          xinst.write (xexc)
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xTestException)))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (10))))
                          seq
                            (((unsupported)).apply ((xMemoryError)))
                              (((unsupported)).apply ((xMemoryError)))
                            bogusForceDataize.write (((xgc_collect)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_attributes.write
                  [xself]
                    memory > xmsg
                    memory > xexc
                    seq > @
                      seq
                        xexc.write (((xImportError)).apply ("test"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xexc).xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xexc).xpath)))
                        xexc.write (((unsupported)).apply ((xImportError)) ("test") ("somemodule"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) ("somemodule"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xexc).xpath)))
                        xexc.write (((unsupported)).apply ((xImportError)) ("test") ("somepath"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) ("somepath"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xexc).xname)))
                        xexc.write (((unsupported)).apply ((xImportError)) ("test") ("somepath") ("somename"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) ("somename"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) ("somepath"))
                        xmsg.write "'invalid' is an invalid keyword argument for ImportError"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xImportError)) ("test") ("keyword"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xImportError)) ("test") ("name") ("keyword"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xImportError)) ("test") ("path") ("keyword"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xImportError)) ("keyword"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xImportError)) ("test") ("keyword") (TRUE))
                xtest_reset_attributes.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        xexc.write (((unsupported)).apply ((xImportError)) ("test") ("name") ("path"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xargs)) ((((unsupported)).apply ("test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xmsg)) ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) ("path"))
                        bogusForceDataize.write ((((xexc).x__init__)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xmsg)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) ("None: is there a None literal in the EO language?"))
                xtest_non_str_argument.write
                  [xself]
                    memory > xexc
                    memory > xarg
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xcheck_warnings)) ((((unsupported)).apply ("") ((xBytesWarning)))) (TRUE))))
                        seq
                          xarg.write "abc"
                          xexc.write (((xImportError)).apply ((xarg)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xarg)))) ((((xstr)).apply ((xexc)))))
                xtest_copy_pickle.write
                  [xself]
                    memory > xorig
                    memory > xexc
                    seq > @
                      (((unsupported)).apply ((xkwargs)) ((((unsupported)).apply ((((xdict)).apply)) ((((unsupported)).apply ((xdict)) ("somename"))) ((((unsupported)).apply ((xdict)) ("somepath"))) ((((unsupported)).apply ((xdict)) ("somename") ("somepath"))))))
                        seq
                          xorig.write (((xImportError)).apply ("test") ((((unsupported)).apply ((xkwargs)))))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            seq
                              xexc.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xorig)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xargs)) ((((unsupported)).apply ("test"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xmsg)) ("test"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) (((xorig).xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) (((xorig).xpath)))
                          (((unsupported)).apply ((xc)) ((((unsupported)).apply (((xcopy).xcopy)) (((xcopy).xdeepcopy)))))
                            seq
                              xexc.write (((xc)).apply ((xorig)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xargs)) ((((unsupported)).apply ("test"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xmsg)) ("test"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xname)) (((xorig).xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xpath)) (((xorig).xpath)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)