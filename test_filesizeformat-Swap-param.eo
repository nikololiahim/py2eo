memory > xcomplex
memory > xexpected
memory > xtranslation
memory > xvalue
memory > xfilesizeformat
memory > xSimpleTestCase
[] > test_filesizeformat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_formats
        memory > xtest_negative_numbers
        memory > xtest_localized_formats
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_formats.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (0) ("0xa0bytes"))) ((((unsupported)).apply (1) ("1xa0byte"))) ((((unsupported)).apply (1023) ("1023xa0bytes"))) ((((unsupported)).apply (1024) ("1.0xa0KB"))) ((((unsupported)).apply ((10.mul 1024)) ("10.0xa0KB"))) ((((unsupported)).apply (((1024.mul 1024).sub 1)) ("1024.0xa0KB"))) ((((unsupported)).apply ((1024.mul 1024)) ("1.0xa0MB"))) ((((unsupported)).apply (((1024.mul 1024).mul 50)) ("50.0xa0MB"))) ((((unsupported)).apply ((((1024.mul 1024).mul 1024).sub 1)) ("1024.0xa0MB"))) ((((unsupported)).apply (((1024.mul 1024).mul 1024)) ("1.0xa0GB"))) ((((unsupported)).apply ((((1024.mul 1024).mul 1024).mul 1024)) ("1.0xa0TB"))) ((((unsupported)).apply (((((1024.mul 1024).mul 1024).mul 1024).mul 1024)) ("1.0xa0PB"))) ((((unsupported)).apply ((((((1024.mul 1024).mul 1024).mul 1024).mul 1024).mul 2000)) ("2000.0xa0PB"))) ((((unsupported)).apply ((((xcomplex)).apply (1) ((1.neg)))) ("0xa0bytes"))) ((((unsupported)).apply ("") ("0xa0bytes"))) ((((unsupported)).apply ("N{GREEK SMALL LETTER ALPHA}") ("0xa0bytes"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((((xfilesizeformat)).apply ((xvalue)))))
                xtest_localized_formats.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (0) ("0xa0Bytes"))) ((((unsupported)).apply (1) ("1xa0Byte"))) ((((unsupported)).apply (1023) ("1023xa0Bytes"))) ((((unsupported)).apply (1024) ("1,0xa0KB"))) ((((unsupported)).apply ((10.mul 1024)) ("10,0xa0KB"))) ((((unsupported)).apply (((1024.mul 1024).sub 1)) ("1024,0xa0KB"))) ((((unsupported)).apply ((1024.mul 1024)) ("1,0xa0MB"))) ((((unsupported)).apply (((1024.mul 1024).mul 50)) ("50,0xa0MB"))) ((((unsupported)).apply ((((1024.mul 1024).mul 1024).sub 1)) ("1024,0xa0MB"))) ((((unsupported)).apply (((1024.mul 1024).mul 1024)) ("1,0xa0GB"))) ((((unsupported)).apply ((((1024.mul 1024).mul 1024).mul 1024)) ("1,0xa0TB"))) ((((unsupported)).apply (((((1024.mul 1024).mul 1024).mul 1024).mul 1024)) ("1,0xa0PB"))) ((((unsupported)).apply ((((((1024.mul 1024).mul 1024).mul 1024).mul 1024).mul 2000)) ("2000,0xa0PB"))) ((((unsupported)).apply ((((xcomplex)).apply (1) ((1.neg)))) ("0xa0Bytes"))) ((((unsupported)).apply ("") ("0xa0Bytes"))) ((((unsupported)).apply ("N{GREEK SMALL LETTER ALPHA}") ("0xa0Bytes"))))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilesizeformat)).apply ((xvalue)))) ((xexpected)))
                xtest_negative_numbers.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((1.neg)) ("-1xa0byte"))) ((((unsupported)).apply ((100.neg)) ("-100xa0bytes"))) ((((unsupported)).apply ((((1024.neg).mul 1024).mul 50)) ("-50.0xa0MB"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilesizeformat)).apply ((xvalue)))) ((xexpected)))