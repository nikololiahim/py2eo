memory > xBytesIO
memory > xValueError
memory > xout
memory > xopen
memory > xbase64
memory > xi
memory > xsupport
memory > xDeprecationWarning
memory > xbstr
memory > xmemoryview
memory > xscript_helper
memory > xarray
memory > xmap01
memory > xc
memory > xdata
memory > xlist
memory > xfunc
memory > xrange
memory > xbytearray
memory > xprefix
memory > xbinascii
memory > xerr
memory > xf
memory > xset
memory > xissubclass
memory > xbytes
memory > xargs
memory > xos
memory > xres
memory > xaltchars
memory > xStringIO
memory > xunittest
memory > xproc
memory > xlen
memory > xfp
memory > xTypeError
memory > x__name__
[] > test_base64
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_a85encode
        memory > xcheck_type_errors
        memory > xtest_a85decode_errors
        memory > xtest_b64decode_padding_error
        memory > xtest_b64encode
        memory > xcheck_decode_type_errors
        memory > xget_output
        memory > xtest_decodebytes
        memory > xtest_b85decode
        memory > xtest_encode_from_stdin
        memory > xtest_a85_padding
        memory > xcheck_encode_type_errors
        memory > xtest_b85decode_errors
        memory > xtest_b16encode
        memory > xtest_b32decode
        memory > xtest_encode_decode
        memory > xtest_b64decode
        memory > xtest_decode
        memory > xtest_a85decode
        memory > xtest_decode_nonascii_str
        memory > xtest_encode_file
        memory > xcheck_nonbyte_element_format
        memory > xtest_encodestring_warns
        memory > xtest_ErrorHeritage
        memory > xtest_b32decode_casefold
        memory > xtest_b85_padding
        memory > xcheck_other_types
        memory > xtest_b16decode
        memory > xtest_decodestring_warns
        memory > xtest_b64decode_invalid_chars
        memory > xtest_b32encode
        memory > xtest_b32decode_error
        memory > xtearDown
        memory > xcheck_multidimensional
        memory > xtest_encode
        memory > xtest_encodebytes
        memory > xtest_b85encode
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_type_errors.write
                  [xself xf]
                    memory > xint_data
                    memory > xmultidimensional
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((unsupported)).apply)))
                        xmultidimensional.write ((((((xmemoryview)).apply ("1234")).xcast)).apply ("B") ((((unsupported)).apply (2) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((xmultidimensional)))
                        xint_data.write ((((((xmemoryview)).apply ("1234")).xcast)).apply ("I"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((xint_data)))
                xtest_encodestring_warns.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                        bogusForceDataize.write ((((xbase64).xencodestring)).apply ("www.python.org"))
                xtest_decodestring_warns.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                        bogusForceDataize.write ((((xbase64).xdecodestring)).apply ("d3d3LnB5dGhvbi5vcmc=n"))
                xtest_encodebytes.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ("www.python.org"))) ("d3d3LnB5dGhvbi5vcmc=n"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ("a"))) ("YQ==n"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ("ab"))) ("YWI=n"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ("abc"))) ("YWJjn"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply (""))) (""))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}"))) ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0nNTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==n"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ((((xbytearray)).apply ("abc"))))) ("YWJjn"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ((((xmemoryview)).apply ("abc"))))) ("YWJjn"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xencodebytes)).apply ((((xarray)).apply ("B") ("abc"))))) ("YWJjn"))
                        bogusForceDataize.write ((((xself).xcheck_type_errors)).apply (((xbase64).xencodebytes)))
                xtest_decodebytes.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ("d3d3LnB5dGhvbi5vcmc=n"))) ("www.python.org"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ("YQ==n"))) ("a"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ("YWI=n"))) ("ab"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ("YWJjn"))) ("abc"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0nNTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==n"))) ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply (""))) (""))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ((((xbytearray)).apply ("YWJjn"))))) ("abc"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ((((xmemoryview)).apply ("YWJjn"))))) ("abc"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xdecodebytes)).apply ((((xarray)).apply ("B") ("YWJjn"))))) ("abc"))
                        bogusForceDataize.write ((((xself).xcheck_type_errors)).apply (((xbase64).xdecodebytes)))
                xtest_encode.write
                  [xself]
                    memory > xeq
                    memory > xinfp
                    memory > xoutfp
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xinfp.write (((xBytesIO)).apply ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}"))
                        xoutfp.write (((xBytesIO)).apply)
                        bogusForceDataize.write ((((xbase64).xencode)).apply ((xinfp)) ((xoutfp)))
                        bogusForceDataize.write (((xeq)).apply (((((xoutfp).xgetvalue)).apply)) ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0nNTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==n"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xStringIO)).apply ("abc"))) ((((xBytesIO)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xBytesIO)).apply ("abc"))) ((((xStringIO)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xStringIO)).apply ("abc"))) ((((xStringIO)).apply)))
                xtest_decode.write
                  [xself]
                    memory > xinfp
                    memory > xoutfp
                    seq > @
                      seq
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xinfp.write (((xBytesIO)).apply ("d3d3LnB5dGhvbi5vcmc="))
                        xoutfp.write (((xBytesIO)).apply)
                        bogusForceDataize.write ((((xbase64).xdecode)).apply ((xinfp)) ((xoutfp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutfp).xgetvalue)).apply)) ("www.python.org"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xStringIO)).apply ("YWJjn"))) ((((xBytesIO)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xBytesIO)).apply ("YWJjn"))) ((((xStringIO)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xencode)) ((((xStringIO)).apply ("YWJjn"))) ((((xStringIO)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_encode_type_errors.write
                  [xself xf]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((unsupported)).apply)))
                xcheck_decode_type_errors.write
                  [xself xf]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xf)) ((((unsupported)).apply)))
                xcheck_other_types.write
                  [xself xf xbytes_data xexpected]
                    memory > xeq
                    memory > xb
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xb.write (((xbytearray)).apply ((xbytes_data)))
                        bogusForceDataize.write (((xeq)).apply ((((xf)).apply ((xb)))) ((xexpected)))
                        bogusForceDataize.write (((xeq)).apply ((xb)) ((xbytes_data)))
                        bogusForceDataize.write (((xeq)).apply ((((xf)).apply ((((xmemoryview)).apply ((xbytes_data)))))) ((xexpected)))
                        bogusForceDataize.write (((xeq)).apply ((((xf)).apply ((((xarray)).apply ("B") ((xbytes_data)))))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xcheck_nonbyte_element_format)).apply (((xbase64).xb64encode)) ((xbytes_data)))
                        bogusForceDataize.write ((((xself).xcheck_multidimensional)).apply (((xbase64).xb64encode)) ((xbytes_data)))
                xcheck_multidimensional.write
                  [xself xf xdata]
                    memory > xshape
                    memory > xbytes_data
                    memory > xpadding
                    memory > xmultidimensional
                    seq > @
                      seq
                        xpadding.write (((((xlen)).apply ((xdata))).mod 2).if "x00" "")
                        xbytes_data.write ((xdata).add (xpadding))
                        xshape.write (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply ((xbytes_data)))) (2))) (2))
                        xmultidimensional.write ((((((xmemoryview)).apply ((xbytes_data))).xcast)).apply ("B") ((xshape)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xmultidimensional)))) ((((xf)).apply ((xbytes_data)))))
                xcheck_nonbyte_element_format.write
                  [xself xf xdata]
                    memory > xpadding
                    memory > xint_data
                    memory > xbytes_data
                    seq > @
                      seq
                        xpadding.write ("x00".mul ((4.sub (((xlen)).apply ((xdata)))).mod 4))
                        xbytes_data.write ((xdata).add (xpadding))
                        xint_data.write ((((((xmemoryview)).apply ((xbytes_data))).xcast)).apply ("I"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xint_data)))) ((((xf)).apply ((xbytes_data)))))
                xtest_b64encode.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("www.python.org"))) ("d3d3LnB5dGhvbi5vcmc="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("x00"))) ("AA=="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("a"))) ("YQ=="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("ab"))) ("YWI="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("abc"))) ("YWJj"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply (""))) (""))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64encode)).apply ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}"))) ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64encode)) ("xd3Vxbeoxf7x1d") ("*$"))) ("01a*b$cd"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64encode)) ("xd3Vxbeoxf7x1d") ((((xbytearray)).apply ("*$"))))) ("01a*b$cd"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64encode)) ("xd3Vxbeoxf7x1d") ((((xmemoryview)).apply ("*$"))))) ("01a*b$cd"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64encode)) ("xd3Vxbeoxf7x1d") ((((xarray)).apply ("B") ("*$"))))) ("01a*b$cd"))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb64encode)) ("abcd") ("YWJjZA=="))
                        bogusForceDataize.write ((((xself).xcheck_encode_type_errors)).apply (((xbase64).xb64encode)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xbase64).xb64encode)) ("") ("*$"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply ("www.python.org"))) ("d3d3LnB5dGhvbi5vcmc="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply ("a"))) ("YQ=="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply ("ab"))) ("YWI="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply ("abc"))) ("YWJj"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply (""))) (""))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64encode)).apply ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}"))) ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xstandard_b64encode)) ("abcd") ("YWJjZA=="))
                        bogusForceDataize.write ((((xself).xcheck_encode_type_errors)).apply (((xbase64).xstandard_b64encode)))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xurlsafe_b64encode)).apply ("xd3Vxbeoxf7x1d"))) ("01a-b_cd"))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xurlsafe_b64encode)) ("xd3Vxbeoxf7x1d") ("01a-b_cd"))
                        bogusForceDataize.write ((((xself).xcheck_encode_type_errors)).apply (((xbase64).xurlsafe_b64encode)))
                xtest_b64decode.write
                  [xself]
                    memory > xtests_altchars
                    memory > xtests_urlsafe
                    memory > xdata_str
                    memory > xtests
                    memory > xeq
                    memory > xaltchars_str
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("d3d3LnB5dGhvbi5vcmc=") ("www.python.org") ("AA==") ("x00") ("YQ==") ("a") ("YWI=") ("ab") ("YWJj") ("abc") ("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0nNTY3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==") ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}") ("") (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64decode)).apply ((xdata)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb64decode)).apply (((((xdata).xdecode)).apply ("ascii"))))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb64decode)) ("YWJj") ("abc"))
                        bogusForceDataize.write ((((xself).xcheck_decode_type_errors)).apply (((xbase64).xb64decode)))
                        xtests_altchars.write (((unsupported)).apply ((((unsupported)).apply ("01a*b$cd") ("*$"))) ("xd3Vxbeoxf7x1d"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xaltchars)))) ((xres)))) (((((xtests_altchars).xitems)).apply)))
                          seq
                            xdata_str.write ((((xdata).xdecode)).apply ("ascii"))
                            xaltchars_str.write ((((xaltchars).xdecode)).apply ("ascii"))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64decode)) ((xdata)) ((xaltchars)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64decode)) ((xdata_str)) ((xaltchars)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64decode)) ((xdata)) ((xaltchars_str)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb64decode)) ((xdata_str)) ((xaltchars_str)))) ((xres)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64decode)).apply ((xdata)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xstandard_b64decode)).apply (((((xdata).xdecode)).apply ("ascii"))))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xstandard_b64decode)) ("YWJj") ("abc"))
                        bogusForceDataize.write ((((xself).xcheck_decode_type_errors)).apply (((xbase64).xstandard_b64decode)))
                        xtests_urlsafe.write (((unsupported)).apply ("01a-b_cd") ("xd3Vxbeoxf7x1d") ("") (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests_urlsafe).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xurlsafe_b64decode)).apply ((xdata)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xurlsafe_b64decode)).apply (((((xdata).xdecode)).apply ("ascii"))))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xurlsafe_b64decode)) ("01a-b_cd") ("xd3Vxbeoxf7x1d"))
                        bogusForceDataize.write ((((xself).xcheck_decode_type_errors)).apply (((xbase64).xurlsafe_b64decode)))
                xtest_b64decode_padding_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb64decode)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb64decode)) ("abc"))
                xtest_b64decode_invalid_chars.write
                  [xself]
                    memory > xfuncs
                    memory > xtests
                    memory > xres
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("%3d==") ("xdd"))) ((((unsupported)).apply ("$3d==") ("xdd"))) ((((unsupported)).apply ("[==") (""))) ((((unsupported)).apply ("YW]3=") ("am"))) ((((unsupported)).apply ("3{d==") ("xdd"))) ((((unsupported)).apply ("3d}==") ("xdd"))) ((((unsupported)).apply ("@@") (""))) ((((unsupported)).apply ("!") (""))) ((((unsupported)).apply ("YWJjn") ("abc"))) ((((unsupported)).apply ("YWJjnYWI=") ("abcab"))))
                        xfuncs.write (((unsupported)).apply (((xbase64).xb64decode)) (((xbase64).xstandard_b64decode)) (((xbase64).xurlsafe_b64decode)))
                        (((unsupported)).apply ((((unsupported)).apply ((xbstr)) ((xres)))) ((xtests)))
                          seq
                            (((unsupported)).apply ((xfunc)) ((xfuncs)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbstr)) ((xfunc)))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply ((xbstr)))) ((xres)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (((((xbstr).xdecode)).apply ("ascii"))))) ((xres)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xbinascii).xError)))))
                              (((unsupported)).apply (((xbase64).xb64decode)) ((xbstr)) (TRUE))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xbinascii).xError)))))
                              (((unsupported)).apply (((xbase64).xb64decode)) (((((xbstr).xdecode)).apply ("ascii"))) (TRUE))
                        xres.write "xFBxEFxBExFFxFFxFF"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase64).xb64decode)).apply ("++[[//]]") ("[]"))) ((xres)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase64).xurlsafe_b64decode)).apply ("++--//__"))) ((xres)))
                xtest_b32encode.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply (""))) (""))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("x00"))) ("AA======"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("a"))) ("ME======"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("ab"))) ("MFRA===="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("abc"))) ("MFRGG==="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("abcd"))) ("MFRGGZA="))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32encode)).apply ("abcde"))) ("MFRGGZDF"))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb32encode)) ("abcd") ("MFRGGZA="))
                        bogusForceDataize.write ((((xself).xcheck_encode_type_errors)).apply (((xbase64).xb32encode)))
                xtest_b32decode.write
                  [xself]
                    memory > xeq
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ("AA======") ("x00") ("ME======") ("a") ("MFRA====") ("ab") ("MFRGG===") ("abc") ("MFRGGZA=") ("abcd") ("MFRGGZDF") ("abcde"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply ((xdata)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply (((((xdata).xdecode)).apply ("ascii"))))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb32decode)) ("MFRGG===") ("abc"))
                        bogusForceDataize.write ((((xself).xcheck_decode_type_errors)).apply (((xbase64).xb32decode)))
                xtest_b32decode_casefold.write
                  [xself]
                    memory > xdata_str
                    memory > xmap01_str
                    memory > xeq
                    memory > xmap_tests
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ("ME======") ("a") ("MFRA====") ("ab") ("MFRGG===") ("abc") ("MFRGGZA=") ("abcd") ("MFRGGZDF") ("abcde") ("me======") ("a") ("mfra====") ("ab") ("mfrgg===") ("abc") ("mfrggza=") ("abcd") ("mfrggzdf") ("abcde"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply ((xdata)) (TRUE))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply (((((xdata).xdecode)).apply ("ascii"))) (TRUE))) ((xres)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb32decode)) ("me======"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb32decode)) ("me======"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply ("MLO23456"))) ("bxddxadxf3xbe"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb32decode)).apply ("MLO23456"))) ("bxddxadxf3xbe"))
                        xmap_tests.write (((unsupported)).apply ((((unsupported)).apply ("M1023456") ("L"))) ("bxddxadxf3xbe") ((((unsupported)).apply ("M1023456") ("I"))) ("bx1dxadxf3xbe"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xmap01)))) ((xres)))) (((((xmap_tests).xitems)).apply)))
                          seq
                            xdata_str.write ((((xdata).xdecode)).apply ("ascii"))
                            xmap01_str.write ((((xmap01).xdecode)).apply ("ascii"))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb32decode)) ((xdata)) ((xmap01)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb32decode)) ((xdata_str)) ((xmap01)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb32decode)) ((xdata)) ((xmap01_str)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb32decode)) ((xdata_str)) ((xmap01_str)))) ((xres)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb32decode)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb32decode)) ((xdata_str)))
                xtest_b32decode_error.write
                  [xself]
                    memory > xprefixes
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ("abc") ("ABCDEF==") ("==ABCDEF"))
                        xprefixes.write (((unsupported)).apply ("M") ("ME") ("MFRA") ("MFRGG") ("MFRGGZA") ("MFRGGZDF"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) (17))))
                          seq
                            (xi).if
                              bogusForceDataize.write ((((xtests).xappend)).apply (("=".mul (xi))))
                            (((unsupported)).apply ((xprefix)) ((xprefixes)))
                              (((((xlen)).apply ((xprefix))).add (xi)).neq 8).if
                                bogusForceDataize.write ((((xtests).xappend)).apply (((xprefix).add ("=".mul (xi)))))
                        (((unsupported)).apply ((xdata)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdata)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertRaises)).apply (((xbinascii).xError)))))
                                bogusForceDataize.write ((((xbase64).xb32decode)).apply ((xdata)))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply (((xbinascii).xError)))))
                                bogusForceDataize.write ((((xbase64).xb32decode)).apply (((((xdata).xdecode)).apply ("ascii"))))
                xtest_b16encode.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16encode)).apply ("x01x02xabxcdxef"))) ("0102ABCDEF"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16encode)).apply ("x00"))) ("00"))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb16encode)) ("x01x02xabxcdxef") ("0102ABCDEF"))
                        bogusForceDataize.write ((((xself).xcheck_encode_type_errors)).apply (((xbase64).xb16encode)))
                xtest_b16decode.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("0102ABCDEF"))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("0102ABCDEF"))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("00"))) ("x00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("00"))) ("x00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb16decode)) ("0102abcdef"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb16decode)) ("0102abcdef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("0102abcdef") (TRUE))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ("0102abcdef") (TRUE))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb16decode)) ("0102ABCDEF") ("x01x02xabxcdxef"))
                        bogusForceDataize.write ((((xself).xcheck_decode_type_errors)).apply (((xbase64).xb16decode)))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ((((xbytearray)).apply ("0102abcdef"))) (TRUE))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ((((xmemoryview)).apply ("0102abcdef"))) (TRUE))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb16decode)).apply ((((xarray)).apply ("B") ("0102abcdef"))) (TRUE))) ("x01x02xabxcdxef"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb16decode)) ("0102AG"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbase64).xb16decode)) ("010"))
                xtest_a85encode.write
                  [xself]
                    memory > xeq
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ("www.python.org") ((((unsupported)).apply)) ((((xbytes)).apply ((((xrange)).apply (255))))) ((((unsupported)).apply)) ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}") ("@:E_WAS,RgBkhF\"D/O92EH6,BF`qtRH$VbC6UX@47n?3D92&&T:Jand;cHat='/U/0JP==1c70M3&r-I,;<FN.OZ`-3]oSW/g+A(H[P") ("no padding..") ("DJpY:@:Wn_DJ(RS") ("zero compression0000") ("H=_,8+Cf>,E,oN2F(oQ1z") ("zero compression000") ("H=_,8+Cf>,E,oN2F(oQ1!!!!") ("Boundary:0000") ("6>q!aA79M(3WK-[!!") ("Space compr:    ") (";fH/TAKYK$D/aMV+<VdL") ("xff") ("rr") (("xff".mul 2)) ("s8N") (("xff".mul 3)) ("s8W*") (("xff".mul 4)) ("s8W-!"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85encode)).apply ((xdata)))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((xdata)) (FALSE))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((xdata)) (TRUE))) ((("<~".add (xres)).add "~>")) ((xdata)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xa85encode)) ("www.python.org") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbase64).xa85encode)) (""))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("www.python.org") (7) (FALSE))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("0000www.python.org") (7) (FALSE))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("www.python.org") (7) (TRUE))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((" ".mul 8)) (TRUE) (FALSE))) ("yy"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((" ".mul 7)) (TRUE) (FALSE))) ("y+<Vd"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((" ".mul 6)) (TRUE) (FALSE))) ("y+<U"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ((" ".mul 5)) (TRUE) (FALSE))) ("y+9"))
                xtest_b85encode.write
                  [xself]
                    memory > xeq
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ("www.python.org") ("cXxL#aCvlSZ*DGca%T") ((((xbytes)).apply ((((xrange)).apply (255))))) ("009C61O)~M2nh-c3=Iws5D^j+6crX17#SKH9337XAR!_nBqb&%C@Cr{EG;fCFflSSG&MFiI5|2yJUu=?KtV!7L`6nNNJ&adOifNtP*GA-R8>}2SXo+ITwPvYU}0ioWMyV&XlZI|Y;A6DaB*^Tbai%jczJqze0_d@fPsR8goTEOh>41ejE#<ukdcy;l$Dm3n3<ZJoSmMZprN9pq@|{(sHv)}tgWuEu(7hUw6(UkxVgH!yuH4^z`?@9#Kp$P$jQpf%+1cv(9zP<)YaD4*xB0K+}+;a;Njxq<mKk)=;`X~?CtLF@bU8V^!4`l`1$(#{Qdp") ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}") ("VPa!sWoBn+X=-b1ZEkOHadLBXb#`}nd3r%YLqtVJM@UIZOH55pPf$@(Q&d$}S6EqEFflSSG&MFiI5{CeBQRbjDkv#CIy^osE+AW7dwl") ("no padding..") ("Zf_uPVPs@!Zf7no") ("zero compressionx00x00x00x00") ("dS!BNAY*TBaB^jHb7^mG00000") ("zero compressionx00x00x00") ("dS!BNAY*TBaB^jHb7^mG0000") ("Boundary:x00x00x00x00") ("LT`0$WMOi7IsgCw00") ("Space compr:    ") ("Q*dEpWgug3ZE$irARr(h") ("xff") ("{{") (("xff".mul 2)) ("|Nj") (("xff".mul 3)) ("|Ns9") (("xff".mul 4)) ("|NsC0"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85encode)).apply ((xdata)))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb85encode)) ("www.python.org") ("cXxL#aCvlSZ*DGca%T"))
                xtest_a85decode.write
                  [xself]
                    memory > xeq
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ((((unsupported)).apply)) ("www.python.org") ((((unsupported)).apply)) ((((xbytes)).apply ((((xrange)).apply (255))))) ("@:E_WAS,RgBkhF\"D/O92EH6,BF`qtRH$VbC6UX@47n?3D92&&T:Jand;cHat='/U/0JP==1c70M3&r-I,;<FN.OZ`-3]oSW/g+A(H[P") ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}") ("DJpY:@:Wn_DJ(RS") ("no padding..") ("H=_,8+Cf>,E,oN2F(oQ1z") ("zero compressionx00x00x00x00") ("H=_,8+Cf>,E,oN2F(oQ1!!!!") ("zero compressionx00x00x00") ("6>q!aA79M(3WK-[!!") ("Boundary:x00x00x00x00") (";fH/TAKYK$D/aMV+<VdL") ("Space compr:    ") ("rr") ("xff") ("s8N") (("xff".mul 2)) ("s8W*") (("xff".mul 3)) ("s8W-!") (("xff".mul 4)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ((xdata)))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ((xdata)) (FALSE))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) (((((xdata).xdecode)).apply ("ascii"))) (FALSE))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ((("<~".add (xdata)).add "~>")) (TRUE))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) (((xdata).add "~>")) (TRUE))) ((xres)) ((xdata)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) (("<~%s~>".mod ((((xdata).xdecode)).apply ("ascii")))) (TRUE))) ((xres)) ((xdata)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ("yy") (TRUE) (FALSE))) ((" ".mul 8)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ("y+<Vd") (TRUE) (FALSE))) ((" ".mul 7)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ("y+<U") (TRUE) (FALSE))) ((" ".mul 6)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85decode)) ("y+9") (TRUE) (FALSE))) ((" ".mul 5)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xa85decode)) ((((unsupported)).apply)) ("www.python.org"))
                xtest_b85decode.write
                  [xself]
                    memory > xeq
                    memory > xtests
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xtests.write (((unsupported)).apply ("") ("") ("cXxL#aCvlSZ*DGca%T") ("www.python.org") ("009C61O)~M2nh-c3=Iws5D^j+6crX17#SKH9337XAR!_nBqb&%C@Cr{EG;fCFflSSG&MFiI5|2yJUu=?KtV!7L`6nNNJ&adOifNtP*GA-R8>}2SXo+ITwPvYU}0ioWMyV&XlZI|Y;A6DaB*^Tbai%jczJqze0_d@fPsR8goTEOh>41ejE#<ukdcy;l$Dm3n3<ZJoSmMZprN9pq@|{(sHv)}tgWuEu(7hUw6(UkxVgH!yuH4^z`?@9#Kp$P$jQpf%+1cv(9zP<)YaD4*xB0K+}+;a;Njxq<mKk)=;`X~?CtLF@bU8V^!4`l`1$(#{Qdp") ((((xbytes)).apply ((((xrange)).apply (255))))) ("VPa!sWoBn+X=-b1ZEkOHadLBXb#`}nd3r%YLqtVJM@UIZOH55pPf$@(Q&d$}S6EqEFflSSG&MFiI5{CeBQRbjDkv#CIy^osE+AW7dwl") ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#0^&*();:<>,. []{}") ("Zf_uPVPs@!Zf7no") ("no padding..") ("dS!BNAY*TBaB^jHb7^mG00000") ("zero compressionx00x00x00x00") ("dS!BNAY*TBaB^jHb7^mG0000") ("zero compressionx00x00x00") ("LT`0$WMOi7IsgCw00") ("Boundary:x00x00x00x00") ("Q*dEpWgug3ZE$irARr(h") ("Space compr:    ") ("{{") ("xff") ("|Nj") (("xff".mul 2)) ("|Ns9") (("xff".mul 3)) ("|NsC0") (("xff".mul 4)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xres)))) (((((xtests).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ((xdata)))) ((xres)))
                            bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply (((((xdata).xdecode)).apply ("ascii"))))) ((xres)))
                        bogusForceDataize.write ((((xself).xcheck_other_types)).apply (((xbase64).xb85decode)) ("cXxL#aCvlSZ*DGca%T") ("www.python.org"))
                xtest_a85_padding.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("x") (TRUE))) ("GQ7^D"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("xx") (TRUE))) ("G^'2g"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("xxx") (TRUE))) ("G^+H5"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("xxxx") (TRUE))) ("G^+IX"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xa85encode)) ("xxxxx") (TRUE))) ("G^+IXGQ7^D"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ("GQ7^D"))) ("xx00x00x00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ("G^'2g"))) ("xxx00x00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ("G^+H5"))) ("xxxx00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ("G^+IX"))) ("xxxx"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xa85decode)).apply ("G^+IXGQ7^D"))) ("xxxxxx00x00x00"))
                xtest_b85_padding.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb85encode)) ("x") (TRUE))) ("cmMzZ"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb85encode)) ("xx") (TRUE))) ("cz6H+"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb85encode)) ("xxx") (TRUE))) ("czAdK"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb85encode)) ("xxxx") (TRUE))) ("czAet"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xbase64).xb85encode)) ("xxxxx") (TRUE))) ("czAetcmMzZ"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ("cmMzZ"))) ("xx00x00x00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ("cz6H+"))) ("xxx00x00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ("czAdK"))) ("xxxx00"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ("czAet"))) ("xxxx"))
                        bogusForceDataize.write (((xeq)).apply (((((xbase64).xb85decode)).apply ("czAetcmMzZ"))) ("xxxxxx00x00x00"))
                xtest_a85decode_errors.write
                  [xself]
                    memory > xillegal
                    seq > @
                      seq
                        xillegal.write (((((xset)).apply ((((xrange)).apply (32)))).or (((xset)).apply ((((xrange)).apply (118) (256))))).sub (((xset)).apply (" tnrv")))
                        (((unsupported)).apply ((xc)) ((xillegal)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((((xbytes)).apply ((((unsupported)).apply ((xc)))))))))
                              bogusForceDataize.write ((((xbase64).xa85decode)).apply (("!!!!".add (((xbytes)).apply ((((unsupported)).apply ((xc))))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((((xbytes)).apply ((((unsupported)).apply ((xc)))))))))
                              (((unsupported)).apply (((xbase64).xa85decode)) (("!!!!".add (((xbytes)).apply ((((unsupported)).apply ((xc))))))) (FALSE))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((((xbytes)).apply ((((unsupported)).apply ((xc)))))))))
                              (((unsupported)).apply (((xbase64).xa85decode)) ((("<~!!!!".add (((xbytes)).apply ((((unsupported)).apply ((xc)))))).add "~>")) (TRUE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("malformed") (TRUE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("<~still malformed") (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xa85decode)) ("<~~>"))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("<~~>") (FALSE))
                        (((unsupported)).apply (((xbase64).xa85decode)) ("<~~>") (TRUE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("abcx") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("abcdey") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("a bnc") (FALSE) (""))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("s") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("s8") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("s8W") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("s8W-") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xbase64).xa85decode)) ("s8W-\"") (FALSE))
                xtest_b85decode_errors.write
                  [xself]
                    memory > xillegal
                    seq > @
                      seq
                        xillegal.write (((((xlist)).apply ((((xrange)).apply (33)))).add (((xlist)).apply ((((unsupported)).apply)))).add (((xlist)).apply ((((xrange)).apply (128) (256)))))
                        (((unsupported)).apply ((xc)) ((xillegal)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((((xbytes)).apply ((((unsupported)).apply ((xc)))))))))
                            bogusForceDataize.write ((((xbase64).xb85decode)).apply (("0000".add (((xbytes)).apply ((((unsupported)).apply ((xc))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xb85decode)) ("|"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xb85decode)) ("|N"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xb85decode)) ("|Ns"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xb85decode)) ("|NsC"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xbase64).xb85decode)) ("|NsC1"))
                xtest_decode_nonascii_str.write
                  [xself]
                    memory > xdecode_funcs
                    seq > @
                      seq
                        xdecode_funcs.write (((unsupported)).apply (((xbase64).xb64decode)) (((xbase64).xstandard_b64decode)) (((xbase64).xurlsafe_b64decode)) (((xbase64).xb32decode)) (((xbase64).xb16decode)) (((xbase64).xb85decode)) (((xbase64).xa85decode)))
                        (((unsupported)).apply ((xf)) ((xdecode_funcs)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xf)) ("with non-ascii xcb"))
                xtest_ErrorHeritage.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xbinascii).xError)) ((xValueError)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      (((((xos).xpath).xexists)).apply (((xsupport).xTESTFN))).if
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                xget_output.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xscript_helper).xassert_python_ok)).apply ("-m") ("base64") ((((unsupported)).apply ((xargs))))).xout)))
                xtest_encode_decode.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write ((((xself).xget_output)).apply ("-t"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((xoutput).xsplitlines)).apply)) ((((unsupported)).apply ("b'Aladdin:open sesame'") ("b'QWxhZGRpbjpvcGVuIHNlc2FtZQ==n'") ("b'Aladdin:open sesame'"))))
                xtest_encode_file.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply ("axffbn"))
                        xoutput.write ((((xself).xget_output)).apply ("-e") (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("Yf9iCg=="))
                xtest_encode_from_stdin.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xscript_helper).xspawn_python)).apply ("-m") ("base64") ("-e"))) ((xproc)))
                          (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) (((((xproc).xcommunicate)).apply ("axffbn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xrstrip)).apply)) ("Yf9iCg=="))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xerr)))
                xtest_decode.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply ("Yf9iCg=="))
                        xoutput.write ((((xself).xget_output)).apply ("-d") (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("axffb"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)