memory > xDeleteModel
memory > xresolve_relation
memory > xValueError
memory > xfields
memory > xnew_field
memory > xbase
memory > xkey
memory > xOperation
memory > xfalse
memory > xfield
memory > xAlterOrderWithRespectTo
memory > xlist
memory > xstr
memory > xFieldOperation
memory > xModelOptionOperation
memory > xfield_references
memory > x_
memory > x_name
memory > xIndexOperation
memory > xany
memory > xtype
memory > xCreateModel
memory > xf
memory > xset
memory > xnormalize_together
memory > xhasattr
memory > xAddField
memory > xModelOperation
memory > xAlterField
memory > xModelState
memory > xRemoveField
memory > xsuper
memory > xbool
memory > xtuple
memory > xAlterModelManagers
memory > xAlterModelOptions
memory > xRenameField
memory > xval
memory > xgetattr
memory > xv
memory > xAlterTogetherOptionOperation
memory > xexpression
memory > xsetattr
memory > xzip
memory > xRenameModel
memory > xmodels
memory > xn
memory > xrelated_object
memory > xfilter
memory > xold_field
memory > xisinstance
memory > xlen
memory > xdict
[] > models
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdatabase_backwards
        memory > xold_name_lower
        memory > xmigration_name_fragment
        memory > xdescribe
        memory > xserialization_expand_args
        memory > xALTER_OPTION_KEYS
        memory > xname_lower
        memory > xreduce
        memory > xreferences_model
        memory > xoption_name
        memory > x_check_for_duplicates
        memory > xdatabase_forwards
        memory > xdeconstruct
        memory > xstate_forwards
        memory > x__init__
        memory > xoption_value
        memory > xcan_reduce_through
        memory > xreferences_field
        memory > xnew_name_lower
        memory > xmodel_name_lower
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            x_check_for_duplicates.write
              [xarg_name xobjs]
                memory > xused_vals
                seq > @
                  seq
                    xused_vals.write (((xset)).apply)
                    (((unsupported)).apply ((xval)) ((xobjs)))
                      seq
                        (((unsupported)).apply ((xval)) ((xused_vals))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Found duplicate value %s in CreateModel %s argument.".mod (((unsupported)).apply ((xval)) ((xarg_name))))))))
                        bogusForceDataize.write ((((xused_vals).xadd)).apply ((xval)))
            (((unsupported)).apply ((xOperation)))
              seq
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply (((xself).xname)) ((xname)))
                xname_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xname).xlower)).apply)))
                xreferences_model.write
                  [xself xname xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((xname).xlower)).apply).eq ((xself).xname_lower))))
                xreduce.write
                  [xself xoperation xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((((xsuper)).apply).xreduce)).apply ((xoperation)) ((xapp_label))).or ((((xself).xcan_reduce_through)).apply ((xoperation)) ((xapp_label))))))
                xcan_reduce_through.write
                  [xself xoperation xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((xoperation).xreferences_model)).apply (((xself).xname)) ((xapp_label))).not)))
            (((unsupported)).apply ((xModelOperation)))
              seq
                unsupported
                xserialization_expand_args.write (((unsupported)).apply ("fields") ("options") ("managers"))
                x__init__.write
                  [xself xname xfields xoptions xbases xmanagers]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfields)) ((xfields)))
                        (((unsupported)).apply (((xself).xoptions)) (((xoptions).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xself).xbases)) (((xbases).or (((unsupported)).apply (((xmodels).xModel))))))
                        (((unsupported)).apply (((xself).xmanagers)) (((xmanagers).or (((unsupported)).apply))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                        bogusForceDataize.write (((x_check_for_duplicates)).apply ("fields") ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((x_)))) (((xself).xfields)))))
                        bogusForceDataize.write (((x_check_for_duplicates)).apply ("bases") ((((unsupported)).apply (((((xhasattr)).apply ((xbase)) ("_meta")).if (((xbase).x_meta).xlabel_lower) ((((xisinstance)).apply ((xbase)) ((xstr))).if ((((xbase).xlower)).apply) (xbase)))) ((xbase)) (((xself).xbases)))))
                        bogusForceDataize.write (((x_check_for_duplicates)).apply ("managers") ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((x_)))) (((xself).xmanagers)))))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)) ("fields") (((xself).xfields)))
                        ((xself).xoptions).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("options"))) (((xself).xoptions)))
                        (((xself).xbases).and (((xself).xbases).neq (((unsupported)).apply (((xmodels).xModel))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("bases"))) (((xself).xbases)))
                        (((xself).xmanagers).and (((xself).xmanagers).neq (((unsupported)).apply ((((unsupported)).apply ("objects") (((((xmodels).xManager)).apply))))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("managers"))) (((xself).xmanagers)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xadd_model)).apply ((((xModelState)).apply ((xapp_label)) (((xself).xname)) ((((xlist)).apply (((xself).xfields)))) ((((xdict)).apply (((xself).xoptions)))) ((((xtuple)).apply (((xself).xbases)))) ((((xlist)).apply (((xself).xmanagers)))))))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xcreate_model)).apply ((xmodel)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xdelete_model)).apply ((xmodel)))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Create %smodel %s".mod (((unsupported)).apply (((((((xself).xoptions).xget)).apply ("proxy") ((xfalse))).if "proxy " "")) (((xself).xname))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xname_lower)))
                xreferences_model.write
                  [xself xname xapp_label]
                    memory > xreference_model_tuple
                    memory > xname_lower
                    seq > @
                      seq
                        xname_lower.write ((((xname).xlower)).apply)
                        ((xname_lower).eq ((xself).xname_lower)).if
                          (((unsupported)).apply (TRUE))
                        xreference_model_tuple.write (((unsupported)).apply ((xapp_label)) ((xname_lower)))
                        (((unsupported)).apply ((xbase)) (((xself).xbases)))
                          (((((unsupported)).apply ((xbase)) (((xmodels).xModel))).and (((xisinstance)).apply ((xbase)) ((((unsupported)).apply ((((xmodels).xbase).xModelBase)) ((xstr)))))).and ((((xresolve_relation)).apply ((xbase)) ((xapp_label))).eq (xreference_model_tuple))).if
                            (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((x_name)) ((xfield)))) (((xself).xfields)))
                          (((xfield_references)).apply ((((unsupported)).apply ((xapp_label)) (((xself).xname_lower)))) ((xfield)) ((xreference_model_tuple))).if
                            (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xfalse)))
                xreduce.write
                  [xself xoperation xapp_label]
                    memory > xorder_with_respect_to
                    memory > xoptions
                    memory > xoption
                    seq > @
                      seq
                        (((((xisinstance)).apply ((xoperation)) ((xDeleteModel))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).and ((((((xself).xoptions).xget)).apply ("proxy") ((xfalse))).not)).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                          ((((xisinstance)).apply ((xoperation)) ((xRenameModel))).and (((xself).xname_lower).eq ((xoperation).xold_name_lower))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xoperation).xnew_name)) (((xself).xfields)) (((xself).xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                            ((((xisinstance)).apply ((xoperation)) ((xAlterModelOptions))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).if
                              seq
                                xoptions.write (((unsupported)).apply (((xself).xoptions)) (((xoperation).xoptions)))
                                (((unsupported)).apply ((xkey)) (((xoperation).xALTER_OPTION_KEYS)))
                                  (((unsupported)).apply ((xkey)) (((xoperation).xoptions))).if
                                    bogusForceDataize.write ((((xoptions).xpop)).apply ((xkey)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) (((xself).xfields)) ((xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                              ((((xisinstance)).apply ((xoperation)) ((xAlterModelManagers))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) (((xself).xfields)) (((xself).xoptions)) (((xself).xbases)) (((xoperation).xmanagers)))))))
                                ((((xisinstance)).apply ((xoperation)) ((xAlterTogetherOptionOperation))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) (((xself).xfields)) ((((unsupported)).apply (((xself).xoptions)) ((((unsupported)).apply (((xoperation).xoption_name)) (((xoperation).xoption_value)))))) (((xself).xbases)) (((xself).xmanagers)))))))
                                  ((((xisinstance)).apply ((xoperation)) ((xAlterOrderWithRespectTo))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).if
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) (((xself).xfields)) ((((unsupported)).apply (((xself).xoptions)) ("order_with_respect_to") (((xoperation).xorder_with_respect_to)))) (((xself).xbases)) (((xself).xmanagers)))))))
                                    ((((xisinstance)).apply ((xoperation)) ((xFieldOperation))).and (((xself).xname_lower).eq ((xoperation).xmodel_name_lower))).if
                                      (((xisinstance)).apply ((xoperation)) ((xAddField))).if
                                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) ((((xself).xfields).add (((unsupported)).apply ((((unsupported)).apply (((xoperation).xname)) (((xoperation).xfield))))))) (((xself).xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                                        (((xisinstance)).apply ((xoperation)) ((xAlterField))).if
                                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) ((((unsupported)).apply ((((unsupported)).apply ((xn)) ((((xn).eq ((xoperation).xname)).if ((xoperation).xfield) (xv))))) ((((unsupported)).apply ((xn)) ((xv)))) (((xself).xfields)))) (((xself).xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                                          (((xisinstance)).apply ((xoperation)) ((xRemoveField))).if
                                            seq
                                              xoptions.write (((((xself).xoptions).xcopy)).apply)
                                              (((unsupported)).apply ((xoption_name)) ((((unsupported)).apply ("unique_together") ("index_together"))))
                                                seq
                                                  xoption.write ((((xoptions).xpop)).apply ((xoption_name)) ("None: is there a None literal in the EO language?"))
                                                  (xoption).if
                                                    seq
                                                      xoption.write (((xset)).apply ((((xfilter)).apply ((xbool)) ((((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((xf)) ((xf)) ((xfields)) (((xf).neq ((xoperation).xname_lower))))))) ((xfields)) ((xoption)))))))
                                                      (xoption).if
                                                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xoption_name)))) ((xoption)))
                                              xorder_with_respect_to.write ((((xoptions).xget)).apply ("order_with_respect_to"))
                                              ((xorder_with_respect_to).eq ((xoperation).xname_lower)).if
                                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("order_with_respect_to"))))))
                                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) ((((unsupported)).apply ((((unsupported)).apply ((xn)) ((xv)))) ((((unsupported)).apply ((xn)) ((xv)))) (((xself).xfields)) ((((((xn).xlower)).apply).neq ((xoperation).xname_lower))))) ((xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                                            (((xisinstance)).apply ((xoperation)) ((xRenameField))).if
                                              seq
                                                xoptions.write (((((xself).xoptions).xcopy)).apply)
                                                (((unsupported)).apply ((xoption_name)) ((((unsupported)).apply ("unique_together") ("index_together"))))
                                                  seq
                                                    xoption.write ((((xoptions).xget)).apply ((xoption_name)))
                                                    (xoption).if
                                                      (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xoption_name)))) ((((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xf).eq ((xoperation).xold_name)).if ((xoperation).xnew_name) (xf))) ((xf)) ((xfields)))))) ((xfields)) ((xoption)))))
                                                xorder_with_respect_to.write ((((xoptions).xget)).apply ("order_with_respect_to"))
                                                ((xorder_with_respect_to).eq ((xoperation).xold_name)).if
                                                  (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("order_with_respect_to"))) (((xoperation).xnew_name)))
                                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCreateModel)) (((xself).xname)) ((((unsupported)).apply ((((unsupported)).apply ((((xn).eq ((xoperation).xold_name)).if ((xoperation).xnew_name) (xn))) ((xv)))) ((((unsupported)).apply ((xn)) ((xv)))) (((xself).xfields)))) ((xoptions)) (((xself).xbases)) (((xself).xmanagers)))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xreduce)).apply ((xoperation)) ((xapp_label)))))
            (((unsupported)).apply ((xModelOperation)))
              seq
                unsupported
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xremove_model)).apply ((xapp_label)) (((xself).xname_lower)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xdelete_model)).apply ((xmodel)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xcreate_model)).apply ((xmodel)))
                xreferences_model.write
                  [xself xname xapp_label]
                    seq > @
                      (((unsupported)).apply (TRUE))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Delete model %s".mod ((xself).xname))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("delete_%s".mod ((xself).xname_lower))))
            (((unsupported)).apply ((xModelOperation)))
              seq
                unsupported
                x__init__.write
                  [xself xold_name xnew_name]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xold_name)) ((xold_name)))
                        (((unsupported)).apply (((xself).xnew_name)) ((xnew_name)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xold_name)))
                xold_name_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xold_name).xlower)).apply)))
                xnew_name_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xnew_name).xlower)).apply)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("old_name") (((xself).xold_name)) ("new_name") (((xself).xnew_name)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xrename_model)).apply ((xapp_label)) (((xself).xold_name)) (((xself).xnew_name)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xnew_db_table
                    memory > xto_field
                    memory > xrelated_key
                    memory > xnew_m2m_model
                    memory > xold_db_table
                    memory > xold_model
                    memory > xold_m2m_model
                    memory > xfields
                    memory > xnew_model
                    memory > xmodel
                    seq > @
                      seq
                        xnew_model.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xnew_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xnew_model))).if
                          seq
                            xold_model.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xold_name)))
                            xold_db_table.write (((xold_model).x_meta).xdb_table)
                            xnew_db_table.write (((xnew_model).x_meta).xdb_table)
                            ((xold_db_table).eq (xnew_db_table)).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xschema_editor).xalter_db_table)).apply ((xnew_model)) ((xold_db_table)) ((xnew_db_table)))
                            (((unsupported)).apply ((xrelated_object)) ((((xold_model).x_meta).xrelated_objects)))
                              seq
                                (((xrelated_object).xrelated_model).eq (xold_model)).if
                                  seq
                                    xmodel.write (xnew_model)
                                    xrelated_key.write (((unsupported)).apply ((xapp_label)) (((xself).xnew_name_lower)))
                                  seq
                                    xmodel.write ((xrelated_object).xrelated_model)
                                    xrelated_key.write (((unsupported)).apply (((((xrelated_object).xrelated_model).x_meta).xapp_label)) (((((xrelated_object).xrelated_model).x_meta).xmodel_name)))
                                xto_field.write (((((((((xto_state).xapps).xget_model)).apply ((((unsupported)).apply ((xrelated_key))))).x_meta).xget_field)).apply ((((xrelated_object).xfield).xname)))
                                bogusForceDataize.write ((((xschema_editor).xalter_field)).apply ((xmodel)) (((xrelated_object).xfield)) ((xto_field)))
                            xfields.write (((xzip)).apply ((((xold_model).x_meta).xlocal_many_to_many)) ((((xnew_model).x_meta).xlocal_many_to_many)))
                            (((unsupported)).apply ((((unsupported)).apply ((xold_field)) ((xnew_field)))) ((xfields)))
                              seq
                                ((((xnew_field).xmodel).eq ((xnew_field).xrelated_model)).or ((((((xnew_field).xremote_field).xthrough).x_meta).xauto_created).not)).if
                                  (((unsupported)).apply)
                                xold_m2m_model.write (((xold_field).xremote_field).xthrough)
                                xnew_m2m_model.write (((xnew_field).xremote_field).xthrough)
                                bogusForceDataize.write ((((xschema_editor).xalter_db_table)).apply ((xnew_m2m_model)) ((((xold_m2m_model).x_meta).xdb_table)) ((((xnew_m2m_model).x_meta).xdb_table)))
                                bogusForceDataize.write ((((xschema_editor).xalter_field)).apply ((xnew_m2m_model)) ((((((xold_m2m_model).x_meta).xget_field)).apply ((((xold_model).x_meta).xmodel_name)))) ((((((xnew_m2m_model).x_meta).xget_field)).apply ((((xnew_model).x_meta).xmodel_name)))))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnew_name_lower)) (((xself).xold_name_lower)))) ((((unsupported)).apply (((xself).xold_name_lower)) (((xself).xnew_name_lower)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnew_name)) (((xself).xold_name)))) ((((unsupported)).apply (((xself).xold_name)) (((xself).xnew_name)))))
                        bogusForceDataize.write ((((xself).xdatabase_forwards)).apply ((xapp_label)) ((xschema_editor)) ((xfrom_state)) ((xto_state)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnew_name_lower)) (((xself).xold_name_lower)))) ((((unsupported)).apply (((xself).xold_name_lower)) (((xself).xnew_name_lower)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnew_name)) (((xself).xold_name)))) ((((unsupported)).apply (((xself).xold_name)) (((xself).xnew_name)))))
                xreferences_model.write
                  [xself xname xapp_label]
                    seq > @
                      (((unsupported)).apply (((((((xname).xlower)).apply).eq ((xself).xold_name_lower)).or (((((xname).xlower)).apply).eq ((xself).xnew_name_lower)))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Rename model %s to %s".mod (((unsupported)).apply (((xself).xold_name)) (((xself).xnew_name))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("rename_%s_%s".mod (((unsupported)).apply (((xself).xold_name_lower)) (((xself).xnew_name_lower))))))
                xreduce.write
                  [xself xoperation xapp_label]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xoperation)) ((xRenameModel))).and (((xself).xnew_name_lower).eq ((xoperation).xold_name_lower))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((xRenameModel)).apply (((xself).xold_name)) (((xoperation).xnew_name)))))))
                        (((unsupported)).apply ((((((((xsuper)).apply ((xModelOperation)) ((xself))).xreduce)).apply ((xoperation)) ((xapp_label))).or (((((xoperation).xreferences_model)).apply (((xself).xnew_name)) ((xapp_label))).not))))
            (((unsupported)).apply ((xModelOperation)))
              xreduce.write
                [xself xoperation xapp_label]
                  seq > @
                    seq
                      ((((xisinstance)).apply ((xoperation)) ((((unsupported)).apply (((xself).x__class__)) ((xDeleteModel))))).and (((xself).xname_lower).eq ((xoperation).xname_lower))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xoperation)))))
                      (((unsupported)).apply (((((((xsuper)).apply).xreduce)).apply ((xoperation)) ((xapp_label)))))
            (((unsupported)).apply ((xModelOptionOperation)))
              seq
                unsupported
                x__init__.write
                  [xself xname xtable]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtable)) ((xtable)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)) ("table") (((xself).xtable)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xalter_model_options)).apply ((xapp_label)) (((xself).xname_lower)) ((((unsupported)).apply ("db_table") (((xself).xtable)))))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xold_model
                    memory > xnew_model
                    seq > @
                      seq
                        xnew_model.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xnew_model))).if
                          seq
                            xold_model.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                            bogusForceDataize.write ((((xschema_editor).xalter_db_table)).apply ((xnew_model)) ((((xold_model).x_meta).xdb_table)) ((((xnew_model).x_meta).xdb_table)))
                            (((unsupported)).apply ((((unsupported)).apply ((xold_field)) ((xnew_field)))) ((((xzip)).apply ((((xold_model).x_meta).xlocal_many_to_many)) ((((xnew_model).x_meta).xlocal_many_to_many)))))
                              (((((xnew_field).xremote_field).xthrough).x_meta).xauto_created).if
                                bogusForceDataize.write ((((xschema_editor).xalter_db_table)).apply ((((xnew_field).xremote_field).xthrough)) ((((((xold_field).xremote_field).xthrough).x_meta).xdb_table)) ((((((xnew_field).xremote_field).xthrough).x_meta).xdb_table)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                      (((unsupported)).apply (((((xself).xdatabase_forwards)).apply ((xapp_label)) ((xschema_editor)) ((xfrom_state)) ((xto_state)))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Rename table for %s to %s".mod (((unsupported)).apply (((xself).xname)) (((((unsupported)).apply (((xself).xtable)) ("None: is there a None literal in the EO language?")).if ((xself).xtable) "(default)"))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("alter_%s_table".mod ((xself).xname_lower))))
            (((unsupported)).apply ((xModelOptionOperation)))
              seq
                xoption_name.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xname xoption_value]
                    seq > @
                      seq
                        (xoption_value).if
                          xoption_value.write (((xset)).apply ((((xnormalize_together)).apply ((xoption_value)))))
                        bogusForceDataize.write (((xsetattr)).apply ((xself)) (((xself).xoption_name)) ((xoption_value)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                xoption_value.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xgetattr)).apply ((xself)) (((xself).xoption_name)))))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)) (((xself).xoption_name)) (((xself).xoption_value)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xalter_model_options)).apply ((xapp_label)) (((xself).xname_lower)) ((((unsupported)).apply (((xself).xoption_name)) (((xself).xoption_value)))))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xold_model
                    memory > xalter_together
                    memory > xnew_model
                    seq > @
                      seq
                        xnew_model.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xnew_model))).if
                          seq
                            xold_model.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                            xalter_together.write (((xgetattr)).apply ((xschema_editor)) (("alter_%s".mod ((xself).xoption_name))))
                            bogusForceDataize.write (((xalter_together)).apply ((xnew_model)) ((((xgetattr)).apply (((xold_model).x_meta)) (((xself).xoption_name)) ((((xset)).apply)))) ((((xgetattr)).apply (((xnew_model).x_meta)) (((xself).xoption_name)) ((((xset)).apply)))))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                      (((unsupported)).apply (((((xself).xdatabase_forwards)).apply ((xapp_label)) ((xschema_editor)) ((xfrom_state)) ((xto_state)))))
                xreferences_field.write
                  [xself xmodel_name xname xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((xself).xreferences_model)).apply ((xmodel_name)) ((xapp_label))).and ((((xself).xoption_value).not).or (((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfields)))) ((xfields)) (((xself).xoption_value)))))))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Alter %s for %s (%s constraint(s))".mod (((unsupported)).apply (((xself).xoption_name)) (((xself).xname)) ((((xlen)).apply ((((xself).xoption_value).or ""))))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("alter_%s_%s".mod (((unsupported)).apply (((xself).xname_lower)) (((xself).xoption_name))))))
                xcan_reduce_through.write
                  [xself xoperation xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((((xsuper)).apply).xcan_reduce_through)).apply ((xoperation)) ((xapp_label))).or ((((xisinstance)).apply ((xoperation)) ((xAlterTogetherOptionOperation))).and (((unsupported)).apply ((((xtype)).apply ((xoperation)))) ((((xtype)).apply ((xself)))))))))
            (((unsupported)).apply ((xAlterTogetherOptionOperation)))
              seq
                (((unsupported)).apply)
                xoption_name.write "unique_together"
                x__init__.write
                  [xself xname xunique_together]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)) ((xunique_together)))
            (((unsupported)).apply ((xAlterTogetherOptionOperation)))
              seq
                (((unsupported)).apply)
                xoption_name.write "index_together"
                x__init__.write
                  [xself xname xindex_together]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)) ((xindex_together)))
            (((unsupported)).apply ((xModelOptionOperation)))
              seq
                unsupported
                xoption_name.write "order_with_respect_to"
                x__init__.write
                  [xself xname xorder_with_respect_to]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xorder_with_respect_to)) ((xorder_with_respect_to)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)) ("order_with_respect_to") (((xself).xorder_with_respect_to)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xalter_model_options)).apply ((xapp_label)) (((xself).xname_lower)) ((((unsupported)).apply (((xself).xoption_name)) (((xself).xorder_with_respect_to)))))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xfrom_model
                    memory > xfield
                    memory > xto_model
                    seq > @
                      seq
                        xto_model.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xto_model))).if
                          seq
                            xfrom_model.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xname)))
                            ((((xfrom_model).x_meta).xorder_with_respect_to).and ((((xto_model).x_meta).xorder_with_respect_to).not)).if
                              bogusForceDataize.write ((((xschema_editor).xremove_field)).apply ((xfrom_model)) ((((((xfrom_model).x_meta).xget_field)).apply ("_order"))))
                              ((((xto_model).x_meta).xorder_with_respect_to).and ((((xfrom_model).x_meta).xorder_with_respect_to).not)).if
                                seq
                                  xfield.write (((((xto_model).x_meta).xget_field)).apply ("_order"))
                                  (((((xfield).xhas_default)).apply).not).if
                                    (((unsupported)).apply (((xfield).xdefault)) (0))
                                  bogusForceDataize.write ((((xschema_editor).xadd_field)).apply ((xfrom_model)) ((xfield)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                      bogusForceDataize.write ((((xself).xdatabase_forwards)).apply ((xapp_label)) ((xschema_editor)) ((xfrom_state)) ((xto_state)))
                xreferences_field.write
                  [xself xmodel_name xname xapp_label]
                    seq > @
                      (((unsupported)).apply ((((((xself).xreferences_model)).apply ((xmodel_name)) ((xapp_label))).and ((((unsupported)).apply (((xself).xorder_with_respect_to)) ("None: is there a None literal in the EO language?")).or ((xname).eq ((xself).xorder_with_respect_to))))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Set order_with_respect_to on %s to %s".mod (((unsupported)).apply (((xself).xname)) (((xself).xorder_with_respect_to))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("alter_%s_order_with_respect_to".mod ((xself).xname_lower))))
            (((unsupported)).apply ((xModelOptionOperation)))
              seq
                (((unsupported)).apply)
                xALTER_OPTION_KEYS.write (((unsupported)).apply ("base_manager_name") ("default_manager_name") ("default_related_name") ("get_latest_by") ("managed") ("ordering") ("permissions") ("default_permissions") ("select_on_save") ("verbose_name") ("verbose_name_plural"))
                x__init__.write
                  [xself xname xoptions]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xoptions)) ((xoptions)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("name") (((xself).xname)) ("options") (((xself).xoptions)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xalter_model_options)).apply ((xapp_label)) (((xself).xname_lower)) (((xself).xoptions)) (((xself).xALTER_OPTION_KEYS)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Change Meta options on %s".mod ((xself).xname))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("alter_%s_options".mod ((xself).xname_lower))))
            (((unsupported)).apply ((xModelOptionOperation)))
              seq
                unsupported
                xserialization_expand_args.write (((unsupported)).apply ("managers"))
                x__init__.write
                  [xself xname xmanagers]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmanagers)) ((xmanagers)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xname)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply (((xself).xname)) (((xself).xmanagers)))) ((((unsupported)).apply)))))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xalter_model_managers)).apply ((xapp_label)) (((xself).xname_lower)) (((xself).xmanagers)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    seq > @
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Change managers on %s".mod ((xself).xname))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("alter_%s_managers".mod ((xself).xname_lower))))
            (((unsupported)).apply ((xOperation)))
              seq
                xoption_name.write "indexes"
                xmodel_name_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xmodel_name).xlower)).apply)))
            (((unsupported)).apply ((xIndexOperation)))
              seq
                unsupported
                x__init__.write
                  [xself xmodel_name xindex]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodel_name)) ((xmodel_name)))
                        (((xindex).xname).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("Indexes passed to AddIndex operations require a name argument. %r doesn't have one.".mod (xindex))))))
                        (((unsupported)).apply (((xself).xindex)) ((xindex)))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xadd_index)).apply ((xapp_label)) (((xself).xmodel_name_lower)) (((xself).xindex)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xadd_index)).apply ((xmodel)) (((xself).xindex)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xremove_index)).apply ((xmodel)) (((xself).xindex)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("model_name") (((xself).xmodel_name)) ("index") (((xself).xindex)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xdescribe.write
                  [xself]
                    seq > @
                      seq
                        (((xself).xindex).xexpressions).if
                          (((unsupported)).apply (("Create index %s on %s on model %s".mod (((unsupported)).apply ((((xself).xindex).xname)) ((((", ".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xexpression)))) ((xexpression)) ((((xself).xindex).xexpressions)))))) (((xself).xmodel_name))))))
                        (((unsupported)).apply (("Create index %s on field(s) %s of model %s".mod (((unsupported)).apply ((((xself).xindex).xname)) ((((", ".xjoin)).apply ((((xself).xindex).xfields)))) (((xself).xmodel_name))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s_%s".mod (((unsupported)).apply (((xself).xmodel_name_lower)) (((((((xself).xindex).xname).xlower)).apply))))))
            (((unsupported)).apply ((xIndexOperation)))
              seq
                unsupported
                x__init__.write
                  [xself xmodel_name xname]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodel_name)) ((xmodel_name)))
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xremove_index)).apply ((xapp_label)) (((xself).xmodel_name_lower)) (((xself).xname)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    memory > xfrom_model_state
                    memory > xindex
                    seq > @
                      seq
                        xmodel.write (((((xfrom_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          seq
                            xfrom_model_state.write (((unsupported)).apply (((xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) (((xself).xmodel_name_lower)))))
                            xindex.write ((((xfrom_model_state).xget_index_by_name)).apply (((xself).xname)))
                            bogusForceDataize.write ((((xschema_editor).xremove_index)).apply ((xmodel)) ((xindex)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xindex
                    memory > xmodel
                    memory > xto_model_state
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          seq
                            xto_model_state.write (((unsupported)).apply (((xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) (((xself).xmodel_name_lower)))))
                            xindex.write ((((xto_model_state).xget_index_by_name)).apply (((xself).xname)))
                            bogusForceDataize.write ((((xschema_editor).xadd_index)).apply ((xmodel)) ((xindex)))
                xdeconstruct.write
                  [xself]
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("model_name") (((xself).xmodel_name)) ("name") (((xself).xname)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((unsupported)).apply)) ((xkwargs)))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Remove index %s from %s".mod (((unsupported)).apply (((xself).xname)) (((xself).xmodel_name))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("remove_%s_%s".mod (((unsupported)).apply (((xself).xmodel_name_lower)) ((((((xself).xname).xlower)).apply))))))
            (((unsupported)).apply ((xIndexOperation)))
              seq
                xoption_name.write "constraints"
                x__init__.write
                  [xself xmodel_name xconstraint]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodel_name)) ((xmodel_name)))
                        (((unsupported)).apply (((xself).xconstraint)) ((xconstraint)))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xadd_constraint)).apply ((xapp_label)) (((xself).xmodel_name_lower)) (((xself).xconstraint)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xadd_constraint)).apply ((xmodel)) (((xself).xconstraint)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          bogusForceDataize.write ((((xschema_editor).xremove_constraint)).apply ((xmodel)) (((xself).xconstraint)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__name__)) ((((unsupported)).apply)) ((((unsupported)).apply ("model_name") (((xself).xmodel_name)) ("constraint") (((xself).xconstraint)))))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Create constraint %s on model %s".mod (((unsupported)).apply ((((xself).xconstraint).xname)) (((xself).xmodel_name))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s_%s".mod (((unsupported)).apply (((xself).xmodel_name_lower)) (((((((xself).xconstraint).xname).xlower)).apply))))))
            (((unsupported)).apply ((xIndexOperation)))
              seq
                xoption_name.write "constraints"
                x__init__.write
                  [xself xmodel_name xname]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodel_name)) ((xmodel_name)))
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                xstate_forwards.write
                  [xself xapp_label xstate]
                    seq > @
                      bogusForceDataize.write ((((xstate).xremove_constraint)).apply ((xapp_label)) (((xself).xmodel_name_lower)) (((xself).xname)))
                xdatabase_forwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xfrom_model_state
                    memory > xmodel
                    memory > xconstraint
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          seq
                            xfrom_model_state.write (((unsupported)).apply (((xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) (((xself).xmodel_name_lower)))))
                            xconstraint.write ((((xfrom_model_state).xget_constraint_by_name)).apply (((xself).xname)))
                            bogusForceDataize.write ((((xschema_editor).xremove_constraint)).apply ((xmodel)) ((xconstraint)))
                xdatabase_backwards.write
                  [xself xapp_label xschema_editor xfrom_state xto_state]
                    memory > xmodel
                    memory > xconstraint
                    memory > xto_model_state
                    seq > @
                      seq
                        xmodel.write (((((xto_state).xapps).xget_model)).apply ((xapp_label)) (((xself).xmodel_name)))
                        ((((xself).xallow_migrate_model)).apply ((((xschema_editor).xconnection).xalias)) ((xmodel))).if
                          seq
                            xto_model_state.write (((unsupported)).apply (((xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) (((xself).xmodel_name_lower)))))
                            xconstraint.write ((((xto_model_state).xget_constraint_by_name)).apply (((xself).xname)))
                            bogusForceDataize.write ((((xschema_editor).xadd_constraint)).apply ((xmodel)) ((xconstraint)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).x__class__).x__name__)) ((((unsupported)).apply)) ((((unsupported)).apply ("model_name") (((xself).xmodel_name)) ("name") (((xself).xname)))))))
                xdescribe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("Remove constraint %s from model %s".mod (((unsupported)).apply (((xself).xname)) (((xself).xmodel_name))))))
                xmigration_name_fragment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("remove_%s_%s".mod (((unsupported)).apply (((xself).xmodel_name_lower)) ((((((xself).xname).xlower)).apply))))))