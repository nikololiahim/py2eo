memory > xfalse
memory > xconnection
memory > xValue
memory > xRPad
memory > xfunction
memory > xa
memory > xLength
memory > xValueError
memory > xTestCase
memory > xAuthor
memory > xpadded_name
memory > xLPad
[] > test_pad
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_pad_negative_length
        memory > xtest_pad
        memory > xtest_combined_with_length
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_pad.write
                  [xself]
                    memory > xauthors
                    memory > xtests
                    memory > xnone_value
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John") ("j"))
                        xnone_value.write ((((xconnection).xfeatures).xinterprets_empty_strings_as_nulls).if "" "None: is there a None literal in the EO language?")
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((xLPad)).apply ("name") (7) ((((xValue)).apply ("xy"))))) ("xyxJohn"))) ((((unsupported)).apply ((((xRPad)).apply ("name") (7) ((((xValue)).apply ("xy"))))) ("Johnxyx"))) ((((unsupported)).apply ((((xLPad)).apply ("name") (6) ((((xValue)).apply ("x"))))) ("xxJohn"))) ((((unsupported)).apply ((((xRPad)).apply ("name") (6) ((((xValue)).apply ("x"))))) ("Johnxx"))) ((((unsupported)).apply ((((xLPad)).apply ("name") (6))) ("  John"))) ((((unsupported)).apply ((((xRPad)).apply ("name") (6))) ("John  "))) ((((unsupported)).apply ((((xLPad)).apply ("name") (2))) ("Jo"))) ((((unsupported)).apply ((((xRPad)).apply ("name") (2))) ("Jo"))) ((((unsupported)).apply ((((xLPad)).apply ("name") (0))) (""))) ((((unsupported)).apply ((((xRPad)).apply ("name") (0))) (""))) ((((unsupported)).apply ((((xLPad)).apply ("name") ("None: is there a None literal in the EO language?"))) ((xnone_value)))) ((((unsupported)).apply ((((xRPad)).apply ("name") ("None: is there a None literal in the EO language?"))) ((xnone_value)))) ((((unsupported)).apply ((((xLPad)).apply ((((xValue)).apply ("None: is there a None literal in the EO language?"))) (1))) ((xnone_value)))) ((((unsupported)).apply ((((xRPad)).apply ((((xValue)).apply ("None: is there a None literal in the EO language?"))) (1))) ((xnone_value)))) ((((unsupported)).apply ((((xLPad)).apply ("goes_by") (1))) ((xnone_value)))) ((((unsupported)).apply ((((xRPad)).apply ("goes_by") (1))) ((xnone_value)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunction)) ((xpadded_name)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunction)))))
                            seq
                              xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((xfunction)))
                              (((unsupported)).apply (((xself).xassertQuerysetEqual)) ((xauthors)) ((((unsupported)).apply ((xpadded_name)))) ((((unsupported)).apply (((xa).xpadded_name)))) ((xfalse)))
                xtest_pad_negative_length.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfunction)) ((((unsupported)).apply ((xLPad)) ((xRPad)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunction)))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("'length' must be greater or equal to 0."))))
                            bogusForceDataize.write (((xfunction)).apply ("name") ((1.neg)))
                xtest_combined_with_length.write
                  [xself]
                    memory > xauthors
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Rhonda") ("john_smith"))
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("♥♣♠") ("bytes"))
                        xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xLPad)).apply ("name") ((((xLength)).apply ("alias"))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((xauthors).xorder_by)).apply ("alias"))) ((((unsupported)).apply ("  ♥♣♠") ("    Rhonda"))) ((((unsupported)).apply (((xa).xfilled)))))