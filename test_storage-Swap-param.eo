memory > xCustomManifestStorage
memory > xfilename
memory > xRuntimeError
memory > xcall_command
memory > xTestHashedFiles
memory > xtempfile
memory > xopen
memory > xException
memory > xoverride_settings
memory > xmanifest_file
memory > xjson
memory > xstorage
memory > xcached_file
memory > xValueError
memory > xPath
memory > xrelfile
memory > xf
memory > xfinders
memory > xset
memory > xsettings
memory > xsuper
memory > xsys
memory > xargs
memory > xmock
memory > xos
memory > xCollectionTestCase
memory > xPermissionError
memory > xStringIO
memory > xshutil
memory > xunittest
memory > xdirectory
memory > xkwargs
memory > xlen
memory > xSimpleTestCase
[] > test_storage
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_missing_entry
        memory > xcommand_params
        memory > xtest_template_tag_absolute
        memory > xtest_read_manifest
        memory > xtest_collect_static_files_subclass_of_static_storage
        memory > xtest_parse_cache
        memory > xassertPostCondition
        memory > xtest_template_tag_return
        memory > xtest_manifest_does_not_exist
        memory > xtearDown
        memory > xtest_post_processing
        memory > x_get_filename_path
        memory > xtest_js_source_map
        memory > xtest_template_tag_relative
        memory > xtest_template_tag_absolute_root
        memory > xtest_path_ignored_completely
        memory > xtest_css_source_map
        memory > xtest_save_manifest_override
        memory > xtest_import_loop
        memory > xtest_collect_static_files_permissions
        memory > xtest_manifest_does_not_ignore_permission_error
        memory > xCollectstaticCommand
        memory > xtest_css_source_map_sensitive
        memory > xtest_multi_extension_patterns
        memory > xtest_path_with_fragment
        memory > xtest_manifest_exists
        memory > xtest_js_source_map_sensitive
        memory > xsetUp
        memory > xtest_intermediate_files
        memory > xtest_clear_empties_manifest
        memory > xtest_loaded_cache
        memory > xcached_file_path
        memory > xtest_path_with_querystring_and_fragment
        memory > xrun_collectstatic
        memory > xtest_hashed_name
        memory > xtest_read_manifest_nonexistent
        memory > xtest_template_tag_url
        memory > xtest_css_import_case_insensitive
        memory > xtest_save_manifest_create
        memory > xhashed_file_path
        memory > xtest_template_tag_simple_content
        memory > xrun_collectstatic_in_setUp
        memory > x__init__
        memory > xtest_post_processing_failure
        memory > xtest_collect_static_files_default_permissions
        memory > xtest_collectstatistic_no_post_process_replaced_paths
        memory > xtest_css_source_map_tabs
        memory > xtest_file_change_after_collectstatic
        memory > xtest_template_tag_deep_relative
        memory > xtest_path_with_querystring
        memory > xtest_import_replacement
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xhashed_file_path.write
              [xtest xpath]
                memory > xfullpath
                seq > @
                  seq
                    xfullpath.write ((((xtest).xrender_template)).apply (((((xtest).xstatic_template_snippet)).apply ((xpath)))))
                    (((unsupported)).apply (((((xfullpath).xreplace)).apply ("") (((xsettings).xSTATIC_URL)))))
            (((unsupported)).apply)
              seq
                xhashed_file_path.write (xhashed_file_path)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((xstorage).xstaticfiles_storage).xhashed_files).xclear)).apply)
                xassertPostCondition.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                xtest_template_tag_return.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertStaticRaises)).apply ((xValueError)) ("does/not/exist.png") ("/static/does/not/exist.png"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("test/file.txt") ("/static/test/file.dad0999e4f8f.txt"))
                        (((unsupported)).apply (((xself).xassertStaticRenders)) ("test/file.txt") ("/static/test/file.dad0999e4f8f.txt") (TRUE))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("cached/styles.css") ("/static/cached/styles.5e0040571e1a.css"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("path/") ("/static/path/"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("path/?query") ("/static/path/?query"))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_simple_content.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles.5e0040571e1a.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cached/other.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("other.d41d8cd98f00.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_path_ignored_completely.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/css/ignored.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/css/ignored.554da52152af.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#foobar") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("http:foobar") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("https:foobar") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("data:foobar") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("chrome:foobar") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("//foobar") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_path_with_querystring.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles.css?spam=eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles.5e0040571e1a.css?spam=eggs"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ("cached/styles.5e0040571e1a.css"))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cached/other.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("other.d41d8cd98f00.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_path_with_fragment.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles.css#eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles.5e0040571e1a.css#eggs"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ("cached/styles.5e0040571e1a.css"))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cached/other.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("other.d41d8cd98f00.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_path_with_querystring_and_fragment.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/css/fragments.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/css/fragments.a60c0e74834f.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("fonts/font.b9b105392eb8.eot?#iefix") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("fonts/font.b8d603e42714.svg#webfontIyfZbseF") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("fonts/font.b8d603e42714.svg#path/to/../../fonts/font.svg") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("data:font/woff;charset=utf-8;base64,d09GRgABAAAAADJoAA0AAAAAR2QAAQAAAAAAAAAAAAA") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("#default#VML") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_absolute.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/absolute.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/absolute.eb04def9f9a4.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/static/cached/styles.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/static/cached/styles.5e0040571e1a.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/static/styles_root.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/static/styles_root.401f2509a628.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/static/cached/img/relative.acae32e4532b.png") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_absolute_root.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("absolute_root.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("absolute_root.f821df1b64f7.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/static/styles_root.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/static/styles_root.401f2509a628.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_relative.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/relative.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/relative.c3e9e1ea6f2e.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("../cached/styles.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("@import \"styles.css\"") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("url(img/relative.png)") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("url(\"img/relative.acae32e4532b.png\")") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("../cached/styles.5e0040571e1a.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_import_replacement.write
                  [xself]
                    memory > xrelpath
                    seq > @
                      seq
                        unsupported
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/import.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/import.f53576679e5a.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("import url(\"styles.5e0040571e1a.css\")") (((((xrelfile).xread)).apply)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_deep_relative.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/css/window.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/css/window.5d5c10836967.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("url(img/window.png)") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("url(\"img/window.acae32e4532b.png\")") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_template_tag_url.write
                  [xself]
                    memory > xrelpath
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/url.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/url.902310b73412.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("https://") (((((xrelfile).xread)).apply)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_import_loop.write
                  [xself]
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xfinders).xget_finder).xcache_clear)).apply)
                        xerr.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ("Max post-process passes exceeded"))))
                          (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (0) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Post-processing 'All' failed!nn") (((((xerr).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_post_processing.write
                  [xself]
                    memory > xcollectstatic_args
                    memory > xstats
                    memory > xcollectstatic_cmd
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcollectstatic_args.write (((unsupported)).apply ("interactive") (FALSE) ("verbosity") (0) ("link") (FALSE) ("clear") (FALSE) ("dry_run") (FALSE) ("post_process") (TRUE) ("use_default_ignore_patterns") (TRUE) ("ignore_patterns") ((((unsupported)).apply ("*.ignoreme"))))
                        xcollectstatic_cmd.write (((xCollectstaticCommand)).apply)
                        bogusForceDataize.write ((((xcollectstatic_cmd).xset_options)).apply ((((unsupported)).apply ((xcollectstatic_args)))))
                        xstats.write ((((xcollectstatic_cmd).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("cached") ("css") ("window.css"))) ((((unsupported)).apply ((xstats)) ("post_processed"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("cached") ("css") ("img") ("window.png"))) ((((unsupported)).apply ((xstats)) ("unmodified"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ("test") ("nonascii.css"))) ((((unsupported)).apply ((xstats)) ("post_processed"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((xstats)) ("post_processed"))) ((((xset)).apply ((((unsupported)).apply ((xstats)) ("post_processed"))))))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_css_import_case_insensitive.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles_insensitive.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles_insensitive.3fa427592a53.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cached/other.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("other.d41d8cd98f00.css") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_css_source_map.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/source_map.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/source_map.b2fceaf426aa.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/*# sourceMappingURL=source_map.css.map*/") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/*# sourceMappingURL=source_map.css.99914b932bd3.map */") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_css_source_map_tabs.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/source_map_tabs.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/source_map_tabs.b2fceaf426aa.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/*#tsourceMappingURL=source_map.css.mapt*/") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/*# sourceMappingURL=source_map.css.99914b932bd3.map */") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_css_source_map_sensitive.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/source_map_sensitive.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/source_map_sensitive.456683f2106f.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("/*# sOuRcEMaPpInGURL=source_map.css.map */") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("/*# sourceMappingURL=source_map.css.99914b932bd3.map */") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_js_source_map.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/source_map.js"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/source_map.cd45b8534a87.js"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("//# sourceMappingURL=source_map.js.map") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("//# sourceMappingURL=source_map.js.99914b932bd3.map") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_js_source_map_sensitive.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/source_map_sensitive.js"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/source_map_sensitive.5da96fdd3cb3.js"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("//# sOuRcEMaPpInGURL=source_map.js.map") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("//# sourceMappingURL=source_map.js.99914b932bd3.map") ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
                xtest_post_processing_failure.write
                  [xself]
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xfinders).xget_finder).xcache_clear)).apply)
                        xerr.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                          (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (0) ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Post-processing 'faulty.css' failed!nn") (((((xerr).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertPostCondition)).apply)
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("staticfiles_tests.storage.ExtraPatternsStorage"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xstorage).xstaticfiles_storage).xhashed_files).xclear)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xcached_file_path.write
                  [xself xpath]
                    memory > xfullpath
                    seq > @
                      seq
                        xfullpath.write ((((xself).xrender_template)).apply (((((xself).xstatic_template_snippet)).apply ((xpath)))))
                        (((unsupported)).apply (((((xfullpath).xreplace)).apply (((xsettings).xSTATIC_URL)) (""))))
                xtest_multi_extension_patterns.write
                  [xself]
                    memory > xrelpath
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrelpath.write ((((xself).xcached_file_path)).apply ("cached/import.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/import.f53576679e5a.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("import url(\"styles.5e0040571e1a.css\")") (((((xrelfile).xread)).apply)))
                        xrelpath.write ((((xself).xcached_file_path)).apply ("cached/test.js"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/test.388d7a790d46.js"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("JS_URL(\"import.f53576679e5a.css\")") (((((xrelfile).xread)).apply)))
            (((unsupported)).apply ((xTestHashedFiles)) ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("django.contrib.staticfiles.storage.ManifestStaticFilesStorage"))))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    memory > xtemp_dir
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        xtemp_dir.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write ((((xos).xmakedirs)).apply ((((((xos).xpath).xjoin)).apply ((xtemp_dir)) ("test"))))
                        (((unsupported)).apply (((xself).x_clear_filename)) ((((((xos).xpath).xjoin)).apply ((xtemp_dir)) ("test") ("cleared.txt"))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).x_clear_filename)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("to be deleted in one test"))
                        (((unsupported)).apply (((xself).xpatched_settings)) ((((unsupported)).apply (((xself).xsettings)) ((((xsettings).xSTATICFILES_DIRS).add (((unsupported)).apply ((xtemp_dir))))))))
                        bogusForceDataize.write (((((xself).xpatched_settings).xenable)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) ((xtemp_dir)))
                        (((unsupported)).apply (((xself).x_manifest_strict)) ((((xstorage).xstaticfiles_storage).xmanifest_strict)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xpatched_settings).xdisable)).apply)
                        (((((xos).xpath).xexists)).apply (((xself).x_clear_filename))).if
                          bogusForceDataize.write ((((xos).xunlink)).apply (((xself).x_clear_filename)))
                        (((unsupported)).apply ((((xstorage).xstaticfiles_storage).xmanifest_strict)) (((xself).x_manifest_strict)))
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xassertPostCondition.write
                  [xself]
                    memory > xmanifest
                    memory > xhashed_files
                    seq > @
                      seq
                        xhashed_files.write (((xstorage).xstaticfiles_storage).xhashed_files)
                        (xhashed_files).if
                          seq
                            xmanifest.write (((((xstorage).xstaticfiles_storage).xload_manifest)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhashed_files)) ((xmanifest)))
                xtest_manifest_exists.write
                  [xself]
                    memory > xpath
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xstorage).xstaticfiles_storage).xmanifest_name)
                        xpath.write (((((xstorage).xstaticfiles_storage).xpath)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xpath)))))
                xtest_manifest_does_not_exist.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xstorage).xstaticfiles_storage).xmanifest_name)) ("does.not.exist.json"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xstorage).xstaticfiles_storage).xread_manifest)).apply)))
                xtest_manifest_does_not_ignore_permission_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.open") ((xPermissionError)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xPermissionError)))))
                          bogusForceDataize.write (((((xstorage).xstaticfiles_storage).xread_manifest)).apply)
                xtest_loaded_cache.write
                  [xself]
                    memory > xmanifest_content
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xstorage).xstaticfiles_storage).xhashed_files)) ((((unsupported)).apply)))
                        xmanifest_content.write (((((xstorage).xstaticfiles_storage).xread_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("\"version\": \"%s\"".mod (((xstorage).xstaticfiles_storage).xmanifest_version))) ((xmanifest_content)))
                xtest_parse_cache.write
                  [xself]
                    memory > xmanifest
                    memory > xhashed_files
                    seq > @
                      seq
                        xhashed_files.write (((xstorage).xstaticfiles_storage).xhashed_files)
                        xmanifest.write (((((xstorage).xstaticfiles_storage).xload_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhashed_files)) ((xmanifest)))
                xtest_clear_empties_manifest.write
                  [xself]
                    memory > xhashed_files
                    memory > xcleared_file_name
                    memory > xmanifest_content
                    memory > xoriginal_path
                    seq > @
                      seq
                        xcleared_file_name.write (((((xstorage).xstaticfiles_storage).xclean_name)).apply ((((((xos).xpath).xjoin)).apply ("test") ("cleared.txt"))))
                        bogusForceDataize.write ((((xself).xrun_collectstatic)).apply)
                        xhashed_files.write (((xstorage).xstaticfiles_storage).xhashed_files)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xcleared_file_name)) ((xhashed_files)))
                        xmanifest_content.write (((((xstorage).xstaticfiles_storage).xload_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xcleared_file_name)) ((xmanifest_content)))
                        xoriginal_path.write (((((xstorage).xstaticfiles_storage).xpath)).apply ((xcleared_file_name)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xoriginal_path)))))
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xself).x_clear_filename)))
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFileNotFound)).apply ((xoriginal_path)))
                        xhashed_files.write (((xstorage).xstaticfiles_storage).xhashed_files)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xcleared_file_name)) ((xhashed_files)))
                        xmanifest_content.write (((((xstorage).xstaticfiles_storage).xload_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xcleared_file_name)) ((xmanifest_content)))
                xtest_missing_entry.write
                  [xself]
                    memory > xconfigured_storage
                    memory > xcontent
                    memory > xerr_msg
                    memory > xmissing_file_name
                    seq > @
                      seq
                        xmissing_file_name.write "cached/missing.css"
                        xconfigured_storage.write ((xstorage).xstaticfiles_storage)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xmissing_file_name)) (((xconfigured_storage).xhashed_files)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (("Missing staticfiles manifest entry for '%s'".mod (xmissing_file_name))))))
                          bogusForceDataize.write ((((xself).xhashed_file_path)).apply ((xmissing_file_name)))
                        (((unsupported)).apply (((xconfigured_storage).xmanifest_strict)) (FALSE))
                        xerr_msg.write ("The file '%s' could not be found with %r.".mod (((unsupported)).apply ((xmissing_file_name)) (((xconfigured_storage).x_wrapped))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xerr_msg)))))
                          bogusForceDataize.write ((((xself).xhashed_file_path)).apply ((xmissing_file_name)))
                        xcontent.write (((xStringIO)).apply)
                        bogusForceDataize.write ((((xcontent).xwrite)).apply ("Found"))
                        bogusForceDataize.write ((((xconfigured_storage).xsave)).apply ((xmissing_file_name)) ((xcontent)))
                        bogusForceDataize.write ((((xself).xhashed_file_path)).apply ((xmissing_file_name)))
                xtest_intermediate_files.write
                  [xself]
                    memory > xcached_files
                    seq > @
                      seq
                        xcached_files.write ((((xos).xlistdir)).apply ((((((xos).xpath).xjoin)).apply (((xsettings).xSTATIC_ROOT)) ("cached"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xcached_file)) ((xcached_file)) ((xcached_files)) (((((xcached_file).xstartswith)).apply ("relative."))))))) (2))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("staticfiles_tests.storage.NoneHashStorage"))))
              seq
                xhashed_file_path.write (xhashed_file_path)
                xtest_hashed_name.write
                  [xself]
                    memory > xrelpath
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles.css"))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("staticfiles_tests.storage.NoPostProcessReplacedPathStorage"))))
              seq
                xrun_collectstatic_in_setUp.write FALSE
                xtest_collectstatistic_no_post_process_replaced_paths.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write (((xStringIO)).apply)
                        (((unsupported)).apply (((xself).xrun_collectstatic)) (1) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("post-processed") (((((xstdout).xgetvalue)).apply)))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("staticfiles_tests.storage.SimpleStorage"))))
              seq
                xhashed_file_path.write (xhashed_file_path)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xstorage).xstaticfiles_storage).xhashed_files).xclear)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xtest_template_tag_return.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertStaticRaises)).apply ((xValueError)) ("does/not/exist.png") ("/static/does/not/exist.png"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("test/file.txt") ("/static/test/file.deploy12345.txt"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("cached/styles.css") ("/static/cached/styles.deploy12345.css"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("path/") ("/static/path/"))
                        bogusForceDataize.write ((((xself).xassertStaticRenders)).apply ("path/?query") ("/static/path/?query"))
                xtest_template_tag_simple_content.write
                  [xself]
                    memory > xrelpath
                    memory > xcontent
                    seq > @
                      seq
                        xrelpath.write ((((xself).xhashed_file_path)).apply ("cached/styles.css"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelpath)) ("cached/styles.deploy12345.css"))
                        (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                          seq
                            xcontent.write ((((xrelfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("cached/other.css") ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("other.deploy12345.css") ((xcontent)))
            (((unsupported)).apply (((xstorage).xManifestStaticFilesStorage)))
              x__init__.write
                [xself xmanifest_storage]
                  seq > @
                    (((unsupported)).apply)
                      xmanifest_storage.write (((unsupported)).apply (((xstorage).xStaticFilesStorage)) (((((xkwargs).xpop)).apply ("manifest_location"))))
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ((xargs)))) ((xmanifest_storage)) ((((unsupported)).apply ((xkwargs)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmanifest_path)) ((((xPath)).apply (((((xtempfile).xmkdtemp)).apply)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) (((xself).xmanifest_path)))
                        (((unsupported)).apply (((xself).xstaticfiles_storage)) ((((unsupported)).apply ((xCustomManifestStorage)) (((xself).xmanifest_path)))))
                        (((unsupported)).apply (((xself).xmanifest_file)) ((((xself).xmanifest_path).div (((xself).xstaticfiles_storage).xmanifest_name))))
                        (((unsupported)).apply (((xself).xmanifest)) ((((unsupported)).apply ("version") ((((xself).xstaticfiles_storage).xmanifest_version)))))
                        (((unsupported)).apply ((((((xself).xmanifest_file).xopen)).apply ("w"))) ((xmanifest_file)))
                          bogusForceDataize.write ((((xjson).xdump)).apply (((xself).xmanifest)) ((xmanifest_file)))
                xtest_read_manifest.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstaticfiles_storage).xread_manifest)).apply)) (((((xjson).xdumps)).apply (((xself).xmanifest)))))
                xtest_read_manifest_nonexistent.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xremove)).apply (((xself).xmanifest_file)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xstaticfiles_storage).xread_manifest)).apply)))
                xtest_save_manifest_override.write
                  [xself]
                    memory > xnew_manifest
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xmanifest_file).xexists)).apply)) (TRUE))
                        bogusForceDataize.write (((((xself).xstaticfiles_storage).xsave_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xmanifest_file).xexists)).apply)) (TRUE))
                        xnew_manifest.write ((((xjson).xloads)).apply ((((((xself).xstaticfiles_storage).xread_manifest)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("paths") ((xnew_manifest)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnew_manifest)) (((xself).xmanifest)))
                xtest_save_manifest_create.write
                  [xself]
                    memory > xnew_manifest
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xremove)).apply (((xself).xmanifest_file)))
                        bogusForceDataize.write (((((xself).xstaticfiles_storage).xsave_manifest)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xmanifest_file).xexists)).apply)) (TRUE))
                        xnew_manifest.write ((((xjson).xloads)).apply ((((((xself).xstaticfiles_storage).xread_manifest)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("paths") ((xnew_manifest)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnew_manifest)) (((xself).xmanifest)))
            (((unsupported)).apply (((xstorage).xStaticFilesStorage)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("file_permissions_mode"))) (416))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("directory_permissions_mode"))) (480))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
            (((unsupported)).apply ((xCollectionTestCase)) (((((xunittest).xskipIf)).apply ((((xsys).xplatform).eq "win32")) ("Windows only partially supports chmod."))))
              seq
                xcommand_params.write (((unsupported)).apply ("interactive") (FALSE) ("verbosity") (0) ("ignore_patterns") ((((unsupported)).apply ("*.ignoreme"))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xumask)) (23))
                        (((unsupported)).apply (((xself).xold_umask)) (((((xos).xumask)).apply (((xself).xumask)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xumask)).apply (((xself).xold_umask)))
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xrun_collectstatic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xtest_collect_static_files_permissions.write
                  [xself]
                    memory > xdir_mode
                    memory > xfile_mode
                    memory > xtest_file
                    memory > xstatic_root
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xcall_command)).apply ("collectstatic") ((((unsupported)).apply (((xself).xcommand_params)))))
                        xstatic_root.write (((xPath)).apply (((xsettings).xSTATIC_ROOT)))
                        xtest_file.write ((xstatic_root).div "test.txt")
                        xfile_mode.write ((((((xtest_file).xstat)).apply).xst_mode).and 511)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfile_mode)) (429))
                        xtests.write (((unsupported)).apply (((xstatic_root).div "subdir")) (((xstatic_root).div "nested")) ((((xstatic_root).div "nested").div "css")))
                        (((unsupported)).apply ((xdirectory)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdirectory)))))
                            seq
                              xdir_mode.write ((((((xdirectory).xstat)).apply).xst_mode).and 511)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdir_mode)) (501))
                xtest_collect_static_files_default_permissions.write
                  [xself]
                    memory > xdir_mode
                    memory > xfile_mode
                    memory > xtest_file
                    memory > xstatic_root
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xcall_command)).apply ("collectstatic") ((((unsupported)).apply (((xself).xcommand_params)))))
                        xstatic_root.write (((xPath)).apply (((xsettings).xSTATIC_ROOT)))
                        xtest_file.write ((xstatic_root).div "test.txt")
                        xfile_mode.write ((((((xtest_file).xstat)).apply).xst_mode).and 511)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfile_mode)) ((438.and (((xself).xumask).neg))))
                        xtests.write (((unsupported)).apply (((xstatic_root).div "subdir")) (((xstatic_root).div "nested")) ((((xstatic_root).div "nested").div "css")))
                        (((unsupported)).apply ((xdirectory)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdirectory)))))
                            seq
                              xdir_mode.write ((((((xdirectory).xstat)).apply).xst_mode).and 511)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdir_mode)) ((511.and (((xself).xumask).neg))))
                xtest_collect_static_files_subclass_of_static_storage.write
                  [xself]
                    memory > xdir_mode
                    memory > xfile_mode
                    memory > xtest_file
                    memory > xstatic_root
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xcall_command)).apply ("collectstatic") ((((unsupported)).apply (((xself).xcommand_params)))))
                        xstatic_root.write (((xPath)).apply (((xsettings).xSTATIC_ROOT)))
                        xtest_file.write ((xstatic_root).div "test.txt")
                        xfile_mode.write ((((((xtest_file).xstat)).apply).xst_mode).and 511)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfile_mode)) (416))
                        xtests.write (((unsupported)).apply (((xstatic_root).div "subdir")) (((xstatic_root).div "nested")) ((((xstatic_root).div "nested").div "css")))
                        (((unsupported)).apply ((xdirectory)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdirectory)))))
                            seq
                              xdir_mode.write ((((((xdirectory).xstat)).apply).xst_mode).and 511)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdir_mode)) (480))
            (((unsupported)).apply ((xCollectionTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("django.contrib.staticfiles.storage.ManifestStaticFilesStorage"))))
              seq
                (((unsupported)).apply)
                xhashed_file_path.write (xhashed_file_path)
                xsetUp.write
                  [xself]
                    memory > xtemp_dir
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).x_temp_dir)) ((xtemp_dir)) (((((xtempfile).xmkdtemp)).apply)))
                        bogusForceDataize.write ((((xos).xmakedirs)).apply ((((((xos).xpath).xjoin)).apply ((xtemp_dir)) ("test"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) ((xtemp_dir)))
                x_get_filename_path.write
                  [xself xfilename]
                    seq > @
                      (((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_temp_dir)) ("test") ((xfilename)))))
                xtest_file_change_after_collectstatic.write
                  [xself]
                    memory > xfile_contents
                    memory > xrelpath
                    memory > xerr
                    memory > xcontent
                    seq > @
                      seq
                        xfile_contents.write (((unsupported)).apply ((((unsupported)).apply ("foo.png") ("foo"))) ((((unsupported)).apply ("bar.css") ("url(\"foo.png\")nurl(\"xyz.png\")"))) ((((unsupported)).apply ("xyz.png") ("xyz"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xcontent)))) ((xfile_contents)))
                          (((unsupported)).apply ((((xopen)).apply (((((xself).x_get_filename_path)).apply ((xfilename)))) ("w"))) ((xf)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ((xcontent)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("append") (((xself).x_temp_dir)))))))
                          seq
                            bogusForceDataize.write (((((xfinders).xget_finder).xcache_clear)).apply)
                            xerr.write (((xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (0) ((xerr)))
                            xrelpath.write ((((xself).xhashed_file_path)).apply ("test/bar.css"))
                            (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                              seq
                                xcontent.write ((((xrelfile).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("foo.acbd18db4cc2.png") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("xyz.d16fb36f0911.png") ((xcontent)))
                            (((unsupported)).apply ((xfilename)) ((((unsupported)).apply ("foo.png") ("xyz.png"))))
                              (((unsupported)).apply ((((xopen)).apply (((((xself).x_get_filename_path)).apply ((xfilename)))) ("w+b"))) ((xf)))
                                bogusForceDataize.write ((((xf).xwrite)).apply ("new content of file to change its hash"))
                            (((unsupported)).apply ((xcall_command)) ("collectstatic") (FALSE) (0) ((xerr)))
                            xrelpath.write ((((xself).xhashed_file_path)).apply ("test/bar.css"))
                            (((unsupported)).apply ((((((xstorage).xstaticfiles_storage).xopen)).apply ((xrelpath)))) ((xrelfile)))
                              seq
                                xcontent.write ((((xrelfile).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("foo.57a5cb9ba68d.png") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("xyz.57a5cb9ba68d.png") ((xcontent)))