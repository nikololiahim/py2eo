memory > xmissing
memory > xlist
memory > xmode
memory > ximportlib
memory > xerrno
memory > xfile
memory > xrange
memory > xtempfile
memory > xopen
memory > xtype
memory > xset
memory > xmodulefinder
memory > xsuffix
memory > x__name__
memory > ximport_this
memory > xTEST_PATH
memory > xsuper
memory > xmaybe_missing
memory > xCheckLoadModuleApi
memory > xsupport
memory > xkwds
memory > xmaybe
memory > xbytes
memory > xsorted
memory > xbad
memory > xargs
memory > xOSError
memory > xos
memory > xpy_compile
memory > xe
memory > xsource
memory > xshutil
memory > xunittest
[] > test_modulefinder
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsame_name_as_bad_test
        memory > xtest_coding_explicit_cp1252
        memory > xTEST_DIR
        memory > xtest_replace_paths
        memory > xtest_bytecode
        memory > xcoding_default_utf8_test
        memory > xmaybe_test_new
        memory > xrelative_import_test_3
        memory > xtest_coding_default_utf8
        memory > xcoding_explicit_cp1252_test
        memory > xmaybe_test
        memory > xtest_relative_imports_2
        memory > xopen_file
        memory > xtest_absolute_imports
        memory > xpackage_test
        memory > xsyntax_error_test
        memory > xtest_relative_imports
        memory > xtest_relative_imports_4
        memory > xtest_extended_opargs
        memory > xtest_maybe
        memory > xbytecode_test
        memory > xrelative_import_test_4
        memory > xtest_package
        memory > xtest_maybe_new
        memory > xcreate_package
        memory > xtest_syntax_error
        memory > x_do_test
        memory > xtest_relative_imports_3
        memory > xtest_coding_explicit_utf8
        memory > xrelative_import_test_2
        memory > xtest_same_name_as_bad
        memory > xTEST_PATH2
        memory > xcoding_explicit_utf8_test
        memory > xabsolute_import_test
        memory > xtest_load_module_api
        memory > xrelative_import_test
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xTEST_DIR.write ((((xtempfile).xmkdtemp)).apply)
            xTEST_PATH2.write (((unsupported)).apply ((xTEST_DIR)) ((((((xos).xpath).xdirname)).apply (((xtempfile).x__file__)))))
            xmaybe_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("sys") ("b"))) ((((unsupported)).apply ("c"))) ((((unsupported)).apply ("b.something"))) ((((unsupported)).apply)))
            xmaybe_test_new.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("sys") ("b") ("__future__"))) ((((unsupported)).apply ("c"))) ((((unsupported)).apply ("b.something"))) ((((unsupported)).apply)))
            xpackage_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.b") ("a.c") ("a.module") ("mymodule") ("sys"))) ((((unsupported)).apply ("blahblah") ("c"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xabsolute_import_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("b") ("b.x") ("b.y") ("b.z") ("__future__") ("sys") ("gc"))) ((((unsupported)).apply ("blahblah") ("z"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xrelative_import_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("__future__") ("a") ("a.module") ("a.b") ("a.b.y") ("a.b.z") ("a.b.c") ("a.b.c.moduleC") ("a.b.c.d") ("a.b.c.e") ("a.b.x") ("gc"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xrelative_import_test_2.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("a.sys") ("a.b") ("a.b.y") ("a.b.z") ("a.b.c") ("a.b.c.d") ("a.b.c.e") ("a.b.c.moduleC") ("a.b.c.f") ("a.b.x") ("a.another"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xrelative_import_test_3.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module"))) ((((unsupported)).apply ("a.bar"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xrelative_import_test_4.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xbytecode_test.write (((unsupported)).apply ("a") ((((unsupported)).apply ("a"))) ((((unsupported)).apply)) ((((unsupported)).apply)) (""))
            xsyntax_error_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("b"))) ((((unsupported)).apply ("b.module"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xsame_name_as_bad_test.write (((unsupported)).apply ("a.module") ((((unsupported)).apply ("a") ("a.module") ("b") ("b.c"))) ((((unsupported)).apply ("c"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xcoding_default_utf8_test.write (((unsupported)).apply ("a_utf8") ((((unsupported)).apply ("a_utf8") ("b_utf8"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xcoding_explicit_utf8_test.write (((unsupported)).apply ("a_utf8") ((((unsupported)).apply ("a_utf8") ("b_utf8"))) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xcoding_explicit_cp1252_test.write (((unsupported)).apply ("a_cp1252") ((((unsupported)).apply ("a_cp1252") ("b_utf8"))) ((((unsupported)).apply)) ((((unsupported)).apply)) (((((unsupported)).apply).add ((((((unsupported)).apply).xencode)).apply ("utf-8")))))
            xopen_file.write
              [xpath]
                memory > xdirname
                seq > @
                  seq
                    xdirname.write (((((xos).xpath).xdirname)).apply ((xpath)))
                    (((unsupported)).apply ((xOSError)))
                      bogusForceDataize.write ((((xos).xmakedirs)).apply ((xdirname)))
                      (((xe).xerrno).neq ((xerrno).xEEXIST)).if
                        (((unsupported)).apply)
                    (((unsupported)).apply ((((xopen)).apply ((xpath)) ("wb"))))
            xcreate_package.write
              [xsource]
                memory > xofi
                memory > xline
                seq > @
                  seq
                    xofi.write "None: is there a None literal in the EO language?"
                    (((unsupported)).apply)
                      (((unsupported)).apply ((xline)) (((((xsource).xsplitlines)).apply)))
                        seq
                          ((((xtype)).apply ((xline))).neq (xbytes)).if
                            xline.write ((((xline).xencode)).apply ("utf-8"))
                          (((((xline).xstartswith)).apply (" ")).or ((((xline).xstartswith)).apply ("t"))).if
                            bogusForceDataize.write ((((xofi).xwrite)).apply ((((((xline).xstrip)).apply).add "n")))
                            seq
                              (xofi).if
                                bogusForceDataize.write ((((xofi).xclose)).apply)
                              ((((xtype)).apply ((xline))).eq (xbytes)).if
                                xline.write ((((xline).xdecode)).apply ("utf-8"))
                              xofi.write (((xopen_file)).apply ((((((xos).xpath).xjoin)).apply ((xTEST_DIR)) (((((xline).xstrip)).apply)))))
                      (xofi).if
                        bogusForceDataize.write ((((xofi).xclose)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_do_test.write
                  [xself xinfo xreport xdebug xreplace_paths xmodulefinder_class]
                    memory > xmf
                    memory > xmodules
                    memory > xfound
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((ximport_this)) ((xmodules)) ((xmissing)) ((xmaybe_missing)) ((xsource)))) ((xinfo)))
                        bogusForceDataize.write (((xcreate_package)).apply ((xsource)))
                        (((unsupported)).apply)
                          seq
                            xmf.write (((unsupported)).apply ((xmodulefinder_class)) ((xTEST_PATH)) ((xdebug)) ((xreplace_paths)))
                            bogusForceDataize.write ((((xmf).ximport_hook)).apply ((ximport_this)))
                            (xreport).if
                              bogusForceDataize.write ((((xmf).xreport)).apply)
                            xmodules.write (((xsorted)).apply ((((xset)).apply ((xmodules)))))
                            xfound.write (((xsorted)).apply (((xmf).xmodules)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfound)) ((xmodules)))
                            (((unsupported)).apply ((((unsupported)).apply ((xbad)) ((xmaybe)))) (((((xmf).xany_missing_maybe)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbad)) ((xmissing)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmaybe)) ((xmaybe_missing)))
                          bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xTEST_DIR)))
                xtest_package.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xpackage_test)))
                xtest_maybe.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xmaybe_test)))
                xtest_maybe_new.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xmaybe_test_new)))
                xtest_absolute_imports.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xabsolute_import_test)))
                xtest_relative_imports.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xrelative_import_test)))
                xtest_relative_imports_2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xrelative_import_test_2)))
                xtest_relative_imports_3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xrelative_import_test_3)))
                xtest_relative_imports_4.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xrelative_import_test_4)))
                xtest_syntax_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xsyntax_error_test)))
                xtest_same_name_as_bad.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xsame_name_as_bad_test)))
                xtest_bytecode.write
                  [xself]
                    memory > xbytecode_path
                    memory > xbase_path
                    memory > xsource_path
                    seq > @
                      seq
                        xbase_path.write (((((xos).xpath).xjoin)).apply ((xTEST_DIR)) ("a"))
                        xsource_path.write ((xbase_path).add (((unsupported)).apply ((((ximportlib).xmachinery).xSOURCE_SUFFIXES)) (0)))
                        xbytecode_path.write ((xbase_path).add (((unsupported)).apply ((((ximportlib).xmachinery).xBYTECODE_SUFFIXES)) (0)))
                        (((unsupported)).apply ((((xopen_file)).apply ((xsource_path)))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)).apply (((("testing_modulefinder = Truen".xencode)).apply ("utf-8"))))
                        (((unsupported)).apply (((xpy_compile).xcompile)) ((xsource_path)) ((xbytecode_path)))
                        bogusForceDataize.write ((((xos).xremove)).apply ((xsource_path)))
                        bogusForceDataize.write ((((xself).x_do_test)).apply ((xbytecode_test)))
                xtest_replace_paths.write
                  [xself]
                    memory > xexpected
                    memory > xnew_path
                    memory > xold_path
                    memory > xoutput
                    seq > @
                      seq
                        xold_path.write (((((xos).xpath).xjoin)).apply ((xTEST_DIR)) ("a") ("module.py"))
                        xnew_path.write (((((xos).xpath).xjoin)).apply ((xTEST_DIR)) ("a") ("spam.py"))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xoutput)))
                          (((unsupported)).apply (((xself).x_do_test)) ((xmaybe_test)) (2) ((((unsupported)).apply ((((unsupported)).apply ((xold_path)) ((xnew_path)))))))
                        xoutput.write ((((xoutput).xgetvalue)).apply)
                        xexpected.write ("co_filename %r changed to %r".mod (((unsupported)).apply ((xold_path)) ((xnew_path))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xexpected)) ((xoutput)))
                xtest_extended_opargs.write
                  [xself]
                    memory > xextended_opargs_test
                    seq > @
                      seq
                        xextended_opargs_test.write (((unsupported)).apply ("a") ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply)) ((((unsupported)).apply)) (((((unsupported)).apply).mod (((xlist)).apply ((((xrange)).apply ((((unsupported)).apply (2) (16)))))))))
                        bogusForceDataize.write ((((xself).x_do_test)).apply ((xextended_opargs_test)))
                xtest_coding_default_utf8.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xcoding_default_utf8_test)))
                xtest_coding_explicit_utf8.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xcoding_explicit_utf8_test)))
                xtest_coding_explicit_cp1252.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_do_test)).apply ((xcoding_explicit_cp1252_test)))
                xtest_load_module_api.write
                  [xself]
                    memory > xload_module
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodulefinder).xModuleFinder)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwds)))))
                            xload_module.write
                              [xself xfqname xfp xpathname xfile_info]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xsuffix)) ((xmode)) ((xtype)))) ((xfile_info)))
                                    (((unsupported)).apply (((((((xsuper)).apply).xload_module)).apply ((xfqname)) ((xfp)) ((xpathname)) ((xfile_info)))))
                        (((unsupported)).apply (((xself).x_do_test)) ((xabsolute_import_test)) ((xCheckLoadModuleApi)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)