memory > xWithWeakref
memory > xValueError
memory > x___
memory > xfunc
memory > xWithoutSlots
memory > xint
memory > xcode
memory > x_WithLeadingUnderscoreAndPrivate
memory > xmod
memory > xunittest
memory > xExtensionSaver
memory > xobject
memory > xC
memory > xcopy
memory > xWithPrivate
memory > xWithSingleString
memory > xtype
memory > xcopyreg
memory > xWithInherited
memory > xTypeError
memory > x__name__
[] > test_copyreg
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_extension_registry
        memory > xtest_class
        memory > x__slots__
        memory > xtest_slotnames
        memory > xtest_noncallable_constructor
        memory > xtest_bool
        memory > xtest_noncallable_reduce
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xobject)))
            (((unsupported)).apply ((xobject)))
              x__slots__.write (((unsupported)).apply ("__weakref__"))
            (((unsupported)).apply ((xobject)))
              x__slots__.write (((unsupported)).apply ("__spam"))
            (((unsupported)).apply ((xobject)))
              x__slots__.write (((unsupported)).apply ("__spam"))
            (((unsupported)).apply ((xobject)))
              x__slots__.write (((unsupported)).apply ("__spam"))
            (((unsupported)).apply ((xobject)))
              x__slots__.write "spam"
            (((unsupported)).apply ((xWithSingleString)))
              x__slots__.write (((unsupported)).apply ("eggs"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_class.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcopyreg).xpickle)) ((xC)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_noncallable_reduce.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcopyreg).xpickle)) ((((xtype)).apply (1))) ("not a callable"))
                xtest_noncallable_constructor.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcopyreg).xpickle)) ((((xtype)).apply (1))) ((xint)) ("not a callable"))
                xtest_bool.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xcopy).xcopy)).apply (TRUE))))
                xtest_extension_registry.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmod)) ((xfunc)) ((xcode)))) ((((unsupported)).apply ("junk1 ") (" junk2") (43981))))
                        xe.write (((xExtensionSaver)).apply ((xcode)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xremove_extension)) ((xmod)) ((xfunc)) ((xcode)))
                            bogusForceDataize.write ((((xcopyreg).xadd_extension)).apply ((xmod)) ((xfunc)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply (((xcopyreg).x_extension_registry)) ((((unsupported)).apply ((xmod)) ((xfunc))))).eq (xcode))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply (((xcopyreg).x_inverted_registry)) ((xcode))).eq (((unsupported)).apply ((xmod)) ((xfunc))))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xcode)) (((xcopyreg).x_extension_cache)))
                            bogusForceDataize.write ((((xcopyreg).xadd_extension)).apply ((xmod)) ((xfunc)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xadd_extension)) ((xmod)) ((xfunc)) (((xcode).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xremove_extension)) ((xmod)) ((xfunc)) (((xcode).add 1)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xadd_extension)) ((((unsupported)).apply ((xmod)) ((((unsupported)).apply (1))))) ((xfunc)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xremove_extension)) ((((unsupported)).apply ((xmod)) ((((unsupported)).apply (1))))) ((xfunc)) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xadd_extension)) ((xmod)) ((((unsupported)).apply ((xfunc)) ((((unsupported)).apply (1))))) ((xcode)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xremove_extension)) ((xmod)) ((((unsupported)).apply ((xfunc)) ((((unsupported)).apply (1))))) ((xcode)))
                            (((unsupported)).apply (((xcode).add 1)) (((xcopyreg).x_inverted_registry))).if
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xremove_extension)) ((((unsupported)).apply ((xmod)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xfunc)) ((((unsupported)).apply (1))))) (((xcode).add 1)))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ((xmod)) ((xfunc)))) (((xcopyreg).x_extension_registry)))
                        (((unsupported)).apply ((xcode)) ((((unsupported)).apply (1) (2147483647))))
                          seq
                            xe.write (((xExtensionSaver)).apply ((xcode)))
                            (((unsupported)).apply)
                              seq
                                bogusForceDataize.write ((((xcopyreg).xadd_extension)).apply ((xmod)) ((xfunc)) ((xcode)))
                                bogusForceDataize.write ((((xcopyreg).xremove_extension)).apply ((xmod)) ((xfunc)) ((xcode)))
                              unsupported
                        (((unsupported)).apply ((xcode)) ((((unsupported)).apply ((1.neg)) (0) ((((unsupported)).apply)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcopyreg).xadd_extension)) ((xmod)) ((xfunc)) ((xcode)))
                xtest_slotnames.write
                  [xself]
                    memory > xexpected
                    memory > xresult
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((xWithoutSlots)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((xWithWeakref)))) ((((unsupported)).apply)))
                        xexpected.write (((unsupported)).apply ("_WithPrivate__spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((xWithPrivate)))) ((xexpected)))
                        xexpected.write (((unsupported)).apply ("_WithLeadingUnderscoreAndPrivate__spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((x_WithLeadingUnderscoreAndPrivate)))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((x___)))) ((((unsupported)).apply ("__spam"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopyreg).x_slotnames)).apply ((xWithSingleString)))) ((((unsupported)).apply ("spam"))))
                        xexpected.write (((unsupported)).apply ("eggs") ("spam"))
                        unsupported
                        xresult.write ((((xcopyreg).x_slotnames)).apply ((xWithInherited)))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)))
            ((x__name__).eq "__main__").if
              unsupported