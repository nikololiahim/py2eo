memory > xescape_leading_slashes
memory > xValueError
memory > xurl
memory > xbytearray
memory > xparse_etags
memory > xurlsafe_base64_encode
memory > xgood_url
memory > xurlsafe_base64_decode
memory > xmock
memory > xunittest
memory > xn
memory > xSimpleTestCase
memory > xb36
memory > xhttp_date
memory > xquote_etag
memory > xtimezone
memory > xdatetime
memory > xexpected
memory > xIterableWithStr
memory > xurl_has_allowed_host_and_scheme
memory > xrfc850str
memory > xparse_http_date
memory > xurlencode
memory > xis_same_domain
memory > xMultiValueDict
memory > xint_to_base36
memory > xpair
memory > xrange
memory > xexpected_date
memory > xnow
memory > xbase36_to_int
memory > xTypeError
memory > xbad_url
[] > test_http
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_basic_auth
        memory > xtest_none
        memory > xcannot_encode_none_msg
        memory > xtest_secure_param_https_urls
        memory > xtest
        memory > xtest_tuples
        memory > xtest_dict_containing_sequence_doseq
        memory > xtest_bad
        memory > xtest_to_int_errors
        memory > xtest_dict
        memory > xtest_parsing
        memory > xtest_values
        memory > xtest_dict_with_bytes_values
        memory > xtest_multivaluedict
        memory > xtest_good
        memory > xtest_dict_containing_empty_sequence_doseq
        memory > xtest_to_base36_errors
        memory > xtest_parsing_asctime_nonascii_digits
        memory > xtest_roundtrip
        memory > xtest_generator
        memory > xtest_invalid_literal
        memory > xtest_dict_containing_tuple_not_doseq
        memory > xtest_none_in_sequence
        memory > xtest_parsing_rfc1123
        memory > xtest_parsing_rfc850
        memory > xtest_good_urls
        memory > xtest_bad_urls
        memory > xtest_none_in_generator
        memory > xtest_http_date
        memory > xtest_dict_with_sequence_of_bytes
        memory > xtest_no_allowed_hosts
        memory > xtest_dict_containing_sequence_not_doseq
        memory > xtest_secure_param_non_https_urls
        memory > xtest_quoting
        memory > xtest_negative_input
        memory > xtest_custom_iterable_not_doseq
        memory > xtest_input_too_large
        memory > xtest_dict_with_bytearray
        memory > xtest_parsing_year_less_than_70
        memory > xtest_allowed_hosts_str
        memory > xtest_parsing_asctime
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xcannot_encode_none_msg.write "Cannot encode None for key 'a' in a query string. Did you mean to pass an empty string or omit the value?"
                xtest_tuples.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xurlencode)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))) ((((unsupported)).apply ("c") (3))))))) ("a=1&b=2&c=3"))
                xtest_dict.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xurlencode)).apply ((((unsupported)).apply ("a") (1) ("b") (2) ("c") (3))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xresult)) ((((unsupported)).apply ("a=1&b=2&c=3") ("a=1&c=3&b=2") ("b=2&a=1&c=3") ("b=2&c=3&a=1") ("c=3&a=1&b=2") ("c=3&b=2&a=1"))))
                xtest_dict_containing_sequence_not_doseq.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))) (FALSE))) ("a=%5B1%2C-2%5D"))
                xtest_dict_containing_tuple_not_doseq.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))) (FALSE))) ("a=%281%2C-2%29"))
                xtest_custom_iterable_not_doseq.write
                  [xself]
                    memory > x__str__
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("custom"))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xrange)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((xIterableWithStr)).apply)))) (FALSE))) ("a=custom"))
                xtest_dict_containing_sequence_doseq.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2))))) (TRUE))) ("a=1&a=2"))
                xtest_dict_containing_empty_sequence_doseq.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply)))) (TRUE))) (""))
                xtest_multivaluedict.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((unsupported)).apply ((xurlencode)) ((((xMultiValueDict)).apply ((((unsupported)).apply ("name") ((((unsupported)).apply ("Adrian") ("Simon"))) ("position") ((((unsupported)).apply ("Developer"))))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xresult)) ((((unsupported)).apply ("name=Adrian&name=Simon&position=Developer") ("position=Developer&name=Adrian&name=Simon"))))
                xtest_dict_with_bytes_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ("abc"))) (TRUE))) ("a=abc"))
                xtest_dict_with_sequence_of_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply ("spam") ("eggs") ("bacon"))))) (TRUE))) ("a=spam&a=eggs&a=bacon"))
                xtest_dict_with_bytearray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((xbytearray)).apply ((((xrange)).apply (2))))))) (TRUE))) ("a=0&a=1"))
                xtest_generator.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((xrange)).apply (2))))) (TRUE))) ("a=0&a=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((xrange)).apply (2))))) (FALSE))) ("a=range%280%2C-2%29"))
                xtest_none.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xself).xcannot_encode_none_msg)))))
                        bogusForceDataize.write (((xurlencode)).apply ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                xtest_none_in_sequence.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xself).xcannot_encode_none_msg)))))
                        (((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))) (TRUE))
                xtest_none_in_generator.write
                  [xself]
                    memory > xgen
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xself).xcannot_encode_none_msg)))))
                          (((unsupported)).apply ((xurlencode)) ((((unsupported)).apply ("a") ((((xgen)).apply)))) (TRUE))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_roundtrip.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply (0) (1) (1000) (1000000))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((((xbase36_to_int)).apply ((((xint_to_base36)).apply ((xn)))))))
                xtest_negative_input.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Negative base36 conversion input."))))
                        bogusForceDataize.write (((xint_to_base36)).apply ((1.neg)))
                xtest_to_base36_errors.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply ("1") ("foo") ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2) (3))) (3.141))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xint_to_base36)).apply ((xn)))
                xtest_invalid_literal.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply ("#") (" "))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (("invalid literal for int() with base 36: '%s'".mod (xn))))))
                          bogusForceDataize.write (((xbase36_to_int)).apply ((xn)))
                xtest_input_too_large.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Base36 input too large"))))
                        bogusForceDataize.write (((xbase36_to_int)).apply (("1".mul 14)))
                xtest_to_int_errors.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply (123) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2) (3))) (3.141))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xbase36_to_int)).apply ((xn)))
                xtest_values.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xb36)))) ((((unsupported)).apply ((((unsupported)).apply (0) ("0"))) ((((unsupported)).apply (1) ("1"))) ((((unsupported)).apply (42) ("16"))) ((((unsupported)).apply (818469960) ("django"))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint_to_base36)).apply ((xn)))) ((xb36)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbase36_to_int)).apply ((xb36)))) ((xn)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_bad_urls.write
                  [xself]
                    memory > xbad_urls
                    seq > @
                      seq
                        xbad_urls.write (((unsupported)).apply ("http://example.com") ("http:///example.com") ("https://example.com") ("ftp://example.com") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("//example.com") ("/example.com") ("/example.com") ("http:///example.com") ("http:///example.com") ("http:/example.com") ("http:/example.com") ("javascript:alert(\"XSS\")") ("njavascript:alert(x)") ("x08//example.com") ("http://otherserver@example.com") ((((unsupported)).apply)) ("http://testserverme:pass@example.com") ("http://testserver@example.com") ((((unsupported)).apply)) ("http:999999999") ("ftp:9999999999") ("n") ("http://[2001:cdba:0000:0000:0000:0000:3257:9652/") ("http://2001:cdba:0000:0000:0000:0000:3257:9652]/"))
                        (((unsupported)).apply ((xbad_url)) ((xbad_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_url)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ((xbad_url)) ((((unsupported)).apply ("testserver") ("testserver2"))))) (FALSE))
                xtest_good_urls.write
                  [xself]
                    memory > xgood_urls
                    seq > @
                      seq
                        xgood_urls.write (((unsupported)).apply ("/view/?param=http://example.com") ("/view/?param=https://example.com") ("/view?param=ftp://example.com") ("view/?param=//example.com") ("https://testserver/") ("HTTPS://testserver/") ("//testserver/") ("http://testserver/confirm?email=me@example.com") ("/url%20with%20spaces/") ("path/http:2222222222"))
                        (((unsupported)).apply ((xgood_url)) ((xgood_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xgood_url)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ((xgood_url)) ((((unsupported)).apply ("otherserver") ("testserver"))))) (TRUE))
                xtest_basic_auth.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ("http://user:pass@testserver/") ((((unsupported)).apply ("user:pass@testserver"))))) (TRUE))
                xtest_no_allowed_hosts.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ("/confirm/me@example.com") ("None: is there a None literal in the EO language?"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ("http://testserver@example.com") ("None: is there a None literal in the EO language?"))) (FALSE))
                xtest_allowed_hosts_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ("http://good.com/good") ("good.com"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ("http://good.co/evil") ("good.com"))) (FALSE))
                xtest_secure_param_https_urls.write
                  [xself]
                    memory > xsecure_urls
                    seq > @
                      seq
                        xsecure_urls.write (((unsupported)).apply ("https://example.com/p") ("HTTPS://example.com/p") ("/view/?param=http://example.com"))
                        (((unsupported)).apply ((xurl)) ((xsecure_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ((xurl)) ((((unsupported)).apply ("example.com"))) (TRUE))) (TRUE))
                xtest_secure_param_non_https_urls.write
                  [xself]
                    memory > xinsecure_urls
                    seq > @
                      seq
                        xinsecure_urls.write (((unsupported)).apply ("http://example.com/p") ("ftp://example.com/p") ("//example.com/p"))
                        (((unsupported)).apply ((xurl)) ((xinsecure_urls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xurl_has_allowed_host_and_scheme)) ((xurl)) ((((unsupported)).apply ("example.com"))) (TRUE))) (FALSE))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_roundtrip.write
                [xself]
                  memory > xbytestring
                  memory > xencoded
                  memory > xdecoded
                  seq > @
                    seq
                      xbytestring.write "foo"
                      xencoded.write (((xurlsafe_base64_encode)).apply ((xbytestring)))
                      xdecoded.write (((xurlsafe_base64_decode)).apply ((xencoded)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbytestring)) ((xdecoded)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_good.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpair)) ((((unsupported)).apply ((((unsupported)).apply ("example.com") ("example.com"))) ((((unsupported)).apply ("example.com") (".example.com"))) ((((unsupported)).apply ("foo.example.com") (".example.com"))) ((((unsupported)).apply ("example.com:8888") ("example.com:8888"))) ((((unsupported)).apply ("example.com:8888") (".example.com:8888"))) ((((unsupported)).apply ("foo.example.com:8888") (".example.com:8888"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_same_domain)).apply ((((unsupported)).apply ((xpair)))))) (TRUE))
                xtest_bad.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpair)) ((((unsupported)).apply ((((unsupported)).apply ("example2.com") ("example.com"))) ((((unsupported)).apply ("foo.example.com") ("example.com"))) ((((unsupported)).apply ("example.com:9999") ("example.com:8888"))) ((((unsupported)).apply ("foo.example.com:8888") (""))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_same_domain)).apply ((((unsupported)).apply ((xpair)))))) (FALSE))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_parsing.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_etags)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ("\"\"") ("\"etag\"") ((((unsupported)).apply)) ("W/\"weak\""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_etags)).apply ("*"))) ((((unsupported)).apply ("*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_etags)).apply ("\"etag\", \"e\"t\"ag\""))) ((((unsupported)).apply ("\"etag\""))))
                xtest_quoting.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquote_etag)).apply ("etag"))) ("\"etag\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquote_etag)).apply ("\"etag\""))) ("\"etag\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xquote_etag)).apply ("W/\"etag\""))) ("W/\"etag\""))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_http_date.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write 1167616461.0
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhttp_date)).apply ((xt)))) ("Mon, 01 Jan 2007 01:54:21 GMT"))
                xtest_parsing_rfc1123.write
                  [xself]
                    memory > xparsed
                    seq > @
                      seq
                        xparsed.write (((xparse_http_date)).apply ("Sun, 06 Nov 1994 08:49:37 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xfromtimestamp)).apply ((xparsed)) (((xtimezone).xutc)))) ((((unsupported)).apply ((xdatetime)) (1994) (11) (6) (8) (49) (37) (((xtimezone).xutc)))))
                xtest_parsing_rfc850.write
                  [xself xmocked_datetime]
                    memory > xparsed
                    memory > xnow_1
                    memory > xnow_2
                    memory > xnow_3
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmocked_datetime).xside_effect)) ((xdatetime)))
                        (((unsupported)).apply (((xmocked_datetime).xnow)) (((((xmock).xMock)).apply)))
                        xnow_1.write (((unsupported)).apply ((xdatetime)) (2019) (11) (6) (8) (49) (37) (((xtimezone).xutc)))
                        xnow_2.write (((unsupported)).apply ((xdatetime)) (2020) (11) (6) (8) (49) (37) (((xtimezone).xutc)))
                        xnow_3.write (((unsupported)).apply ((xdatetime)) (2048) (11) (6) (8) (49) (37) (((xtimezone).xutc)))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xnow_1)) ("Tuesday, 31-Dec-69 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (2069) (12) (31) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_1)) ("Tuesday, 10-Nov-70 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (1970) (11) (10) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_1)) ("Sunday, 06-Nov-94 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (1994) (11) (6) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_2)) ("Wednesday, 31-Dec-70 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (2070) (12) (31) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_2)) ("Friday, 31-Dec-71 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (1971) (12) (31) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_3)) ("Sunday, 31-Dec-00 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (2000) (12) (31) (8) (49) (37) (((xtimezone).xutc)))))) ((((unsupported)).apply ((xnow_3)) ("Friday, 31-Dec-99 08:49:37 GMT") ((((unsupported)).apply ((xdatetime)) (1999) (12) (31) (8) (49) (37) (((xtimezone).xutc)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xnow)) ((xrfc850str)) ((xexpected_date)))) ((xtests)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xrfc850str)))))
                              seq
                                (((unsupported)).apply ((((xmocked_datetime).xnow).xreturn_value)) ((xnow)))
                                xparsed.write (((xparse_http_date)).apply ((xrfc850str)))
                                (((unsupported)).apply ((((xmocked_datetime).xnow).xassert_called_once_with)) (((xtimezone).xutc)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xfromtimestamp)).apply ((xparsed)) (((xtimezone).xutc)))) ((xexpected_date)))
                            bogusForceDataize.write ((((xmocked_datetime).xreset_mock)).apply)
                xtest_parsing_asctime.write
                  [xself]
                    memory > xparsed
                    seq > @
                      seq
                        xparsed.write (((xparse_http_date)).apply ("Sun Nov  6 08:49:37 1994"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xfromtimestamp)).apply ((xparsed)) (((xtimezone).xutc)))) ((((unsupported)).apply ((xdatetime)) (1994) (11) (6) (8) (49) (37) (((xtimezone).xutc)))))
                xtest_parsing_asctime_nonascii_digits.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xparse_http_date)).apply ("Sun Nov  6 08:49:37 １９９４"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xparse_http_date)).apply ("Sun Nov １２ 08:49:37 1994"))
                xtest_parsing_year_less_than_70.write
                  [xself]
                    memory > xparsed
                    seq > @
                      seq
                        xparsed.write (((xparse_http_date)).apply ("Sun Nov  6 08:49:37 0037"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xfromtimestamp)).apply ((xparsed)) (((xtimezone).xutc)))) ((((unsupported)).apply ((xdatetime)) (2037) (11) (6) (8) (49) (37) (((xtimezone).xutc)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest.write
                [xself]
                  memory > xtests
                  seq > @
                    seq
                      xtests.write (((unsupported)).apply ((((unsupported)).apply ("//example.com") ("/%2Fexample.com"))) ((((unsupported)).apply ("//") ("/%2F"))))
                      (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xexpected)))) ((xtests)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape_leading_slashes)).apply ((xurl)))) ((xexpected)))