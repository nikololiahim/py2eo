memory > xseq
memory > xstr
memory > xRuntimeWarning
memory > xnested_lineno
memory > xdir
memory > xiter
memory > xd
memory > xcm
memory > xinspect
memory > xtypes
memory > xcopy
memory > xnested_fname
memory > xDone
memory > xAttributeError
memory > xc
memory > xGeneratorExit
memory > xpickle
memory > xlist
memory > xcontextlib
memory > xRuntimeError
memory > xel
memory > xenumerate
memory > xassert_python_ok
memory > xValueError
memory > xwarnings
memory > xg
memory > xAssertionError
memory > xAI
memory > xexec
memory > xlineno
memory > xpair
memory > xrange
memory > xManager
memory > xBadTarget
memory > xb
memory > xZeroDivisionError
memory > xcoro
memory > xWrapper
memory > xAsyncYield
memory > xMyException
memory > xNotImplementedError
memory > xyielded
memory > x_
memory > xStopIteration
memory > xKeyError
memory > xi1
memory > xStopAsyncIteration
memory > xproto
memory > xCM
memory > xprint
memory > xDB
memory > xrepr
memory > xException
memory > xBadIterable
memory > xhasattr
memory > xcode
memory > xsum
memory > xx
memory > xI
memory > xi
memory > xMarker
memory > xIterable
memory > xAsyncYieldFrom
memory > xF
memory > xcompile
memory > xs
memory > xsys
memory > xi2
memory > xfname
memory > xsupport
memory > xbool
memory > xtuple
memory > xAsyncIter
memory > xSyntaxError
memory > xAwaitable
memory > xAIter
memory > xunittest
memory > xex
memory > xresult
memory > xexc
memory > xnext
memory > xfoo
memory > xlen
memory > xj
memory > xisinstance
memory > xTypeError
memory > xFutureLike
memory > x__name__
memory > xa
[] > test_coroutines
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_with_8
        memory > xtest_coro_wrapper_send_stop_iterator
        memory > xtest_with_6
        memory > xtest_func_14
        memory > xtest_with_11
        memory > xtest_func_7
        memory > xtest_asyncio_1
        memory > xtest_await_7
        memory > xtest_comp_6
        memory > xtest_for_assign_raising_stop_async_iteration_2
        memory > xtest_coro_wrapper_send_tuple
        memory > xtest_origin_tracking
        memory > xtest_func_15
        memory > xtest_badsyntax_2
        memory > xtest_func_4
        memory > xtest_for_7
        memory > xtest_await_3
        memory > xtest_await_10
        memory > xtest_comp_2
        memory > xtest_pickle
        memory > xtest_for_4
        memory > xtest_for_11
        memory > xtest_for_assign_raising_stop_async_iteration
        memory > xtest_await_13
        memory > xtest_with_13
        memory > xtest_with_2
        memory > xtest_with_12
        memory > xtest_fatal_coro_warning
        memory > xtest_comp_5
        memory > xtest_func_19
        memory > xtest_await_2
        memory > xtest_await_16
        memory > xtest_await_11
        memory > xtest_func_6
        memory > xtest_unawaited_warning_when_module_broken
        memory > xtest_with_4
        memory > xtest_badsyntax_3
        memory > xtest_for_8
        memory > xtest_tp_await_3
        memory > xtest_func_16
        memory > xtest_for_stop_iteration
        memory > xrun_async__await__
        memory > xhere
        memory > xtest_for_3
        memory > xtest_func_1
        memory > xtest_func_12
        memory > xtest_for_tuple
        memory > xtest_cr_await
        memory > xtest_comp_9
        memory > xtest_await_6
        memory > xtest_with_9
        memory > xsilence_coro_gc
        memory > xtest_func_5
        memory > xtest_unawaited_warning_during_shutdown
        memory > xtest_await_9
        memory > xtest_func_9
        memory > xtest_with_1
        memory > xtest_func_17
        memory > xtest_await_8
        memory > xtest_badsyntax_4
        memory > xtest_await_1
        memory > xtest_oneline_defs
        memory > xtest_await_12
        memory > xtest_corotype_1
        memory > xtest_badsyntax_1
        memory > xtest_func_2
        memory > xtest_with_5
        memory > xtest_tp_await_2
        memory > xtest_with_10
        memory > xtest_copy
        memory > xtest_await_5
        memory > xtest_func_11
        memory > xtest_comp_8
        memory > x__await__
        memory > xtest_comp_4
        memory > xtest_await_15
        memory > xtest_for_2
        memory > xtest_func_18
        memory > xtest_comp_4_2
        memory > x__init__
        memory > xtest_comp_10
        memory > xtest_with_7
        memory > xrun_async
        memory > xtest_func_3
        memory > xtest_for_1
        memory > xtest_for_6
        memory > xtest_gen_1
        memory > xtest_tp_await_1
        memory > xtest_with_3
        memory > xtest_func_10
        memory > xtest_comp_3
        memory > xtest_func_8
        memory > xtest_comp_7
        memory > xtest_await_14
        memory > xtest_comp_1
        memory > xtest_func_13
        memory > xtest_await_4
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xobj]
                    seq > @
                      (((unsupported)).apply (((xself).xobj)) ((xobj)))
                x__await__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xobj)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                x__await__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)))
            xrun_async.write
              [xcoro]
                memory > xresult
                memory > xbuffer
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply (((xcoro).x__class__)) ((((unsupported)).apply (((xtypes).xGeneratorType)) (((xtypes).xCoroutineType)))))))
                    xbuffer.write (((unsupported)).apply)
                    xresult.write "None: is there a None literal in the EO language?"
                    while.
                      TRUE
                      [unused]
                        seq > @
                          (((unsupported)).apply ((xStopIteration)))
                            bogusForceDataize.write ((((xbuffer).xappend)).apply (((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))))
                            seq
                              xresult.write (((xex).xargs).if (((unsupported)).apply (((xex).xargs)) (0)) "None: is there a None literal in the EO language?")
                              (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xbuffer)) ((xresult)))))
            xrun_async__await__.write
              [xcoro]
                memory > xresult
                memory > xaw
                memory > xi
                memory > xbuffer
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply (((xcoro).x__class__)) (((xtypes).xCoroutineType)))))
                    xaw.write ((((xcoro).x__await__)).apply)
                    xbuffer.write (((unsupported)).apply)
                    xresult.write "None: is there a None literal in the EO language?"
                    xi.write 0
                    while.
                      TRUE
                      [unused]
                        seq > @
                          (((unsupported)).apply ((xStopIteration)))
                            seq
                              ((xi).mod 2).if
                                bogusForceDataize.write ((((xbuffer).xappend)).apply ((((xnext)).apply ((xaw)))))
                                bogusForceDataize.write ((((xbuffer).xappend)).apply (((((xaw).xsend)).apply ("None: is there a None literal in the EO language?"))))
                              (((unsupported)).apply ((xi)) (1))
                            seq
                              xresult.write (((xex).xargs).if (((unsupported)).apply (((xex).xargs)) (0)) "None: is there a None literal in the EO language?")
                              (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xbuffer)) ((xresult)))))
            xsilence_coro_gc.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                      seq
                        bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore"))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_badsyntax_1.write
                  [xself]
                    memory > xsamples
                    seq > @
                      seq
                        xsamples.write (((unsupported)).apply ((((unsupported)).apply)) ("await something()") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("await a()") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xcode)) ((xsamples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcode)))) (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                            bogusForceDataize.write (((xcompile)).apply ((xcode)) ("<test>") ("exec"))
                xtest_badsyntax_2.write
                  [xself]
                    memory > xsamples
                    seq > @
                      seq
                        xsamples.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("import math as await") ((((unsupported)).apply)) ((((unsupported)).apply)) ("print(await=1)"))
                        (((unsupported)).apply ((xcode)) ((xsamples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcode)))) (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                            bogusForceDataize.write (((xcompile)).apply ((xcode)) ("<test>") ("exec"))
                xtest_badsyntax_3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                        bogusForceDataize.write (((xcompile)).apply ("async = 1") ("<test>") ("exec"))
                xtest_badsyntax_4.write
                  [xself]
                    memory > xsamples
                    seq > @
                      seq
                        xsamples.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xcode)) ((xsamples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcode)))) (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                            bogusForceDataize.write (((xcompile)).apply ((xcode)) ("<test>") ("exec"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_oneline_defs.write
                [xself]
                  memory > xns
                  memory > xbuf
                  seq > @
                    seq
                      xbuf.write (((unsupported)).apply)
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (500))))
                        bogusForceDataize.write ((((xbuf).xappend)).apply ((((unsupported)).apply (("def i{i}(): return {i}".xformat)) ((xi)))))
                      xbuf.write ((("n".xjoin)).apply ((xbuf)))
                      xns.write (((unsupported)).apply)
                      bogusForceDataize.write (((xexec)).apply ((xbuf)) ((xns)) ((xns)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xns)) ("i499"))).apply)) (499))
                      (((unsupported)).apply ((xbuf)) ("nasync def foo():n    return"))
                      xns.write (((unsupported)).apply)
                      bogusForceDataize.write (((xexec)).apply ((xbuf)) ((xns)) ((xns)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((xns)) ("i499"))).apply)) (499))
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xinspect).xiscoroutinefunction)).apply ((((unsupported)).apply ((xns)) ("foo"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_gen_1.write
                  [xself]
                    memory > xgen
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xgen)) ("__await__"))))
                xtest_func_1.write
                  [xself]
                    memory > xfoo
                    memory > xf
                    memory > xbar
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (10))
                        xf.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xf)) (((xtypes).xCoroutineType)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply (((((xfoo).x__code__).xco_flags).and ((xinspect).xCO_COROUTINE))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xbool)).apply (((((xfoo).x__code__).xco_flags).and ((xinspect).xCO_GENERATOR))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xbool)).apply (((((xf).xcr_code).xco_flags).and ((xinspect).xCO_COROUTINE))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xbool)).apply (((((xf).xcr_code).xco_flags).and ((xinspect).xCO_GENERATOR))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((xf)))) ((((unsupported)).apply ((((unsupported)).apply)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async__await__)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) (10))))
                        xbar.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xbool)).apply (((((xbar).x__code__).xco_flags).and ((xinspect).xCO_COROUTINE))))))
                xtest_func_2.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xStopIteration)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("coroutine raised StopIteration"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_func_3.write
                  [xself]
                    memory > xcoro
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xStopIteration)))
                        xcoro.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xcoro)))) ("^<coroutine object.* at 0x.*>$"))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_4.write
                  [xself]
                    memory > xcheck
                    memory > xcoro
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xStopIteration)))
                        xcoro.write (((xfoo)).apply)
                        xcheck.write (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'coroutine' object is not iterable"))))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          bogusForceDataize.write (((xlist)).apply ((xcoro)))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          bogusForceDataize.write (((xtuple)).apply ((xcoro)))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          bogusForceDataize.write (((xsum)).apply ((xcoro)))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          bogusForceDataize.write (((xiter)).apply ((xcoro)))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          (((unsupported)).apply ((xi)) ((xcoro)))
                        (((unsupported)).apply ((((xcheck)).apply)))
                          (((unsupported)).apply ((xi)) ((xi)) ((xcoro)))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_5.write
                  [xself]
                    memory > xcheck
                    memory > xcoro
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xbar)).apply)))
                        xcheck.write (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'coroutine' object is not iterable"))))
                        xcoro.write (((xfoo)).apply)
                        (((unsupported)).apply ((((xcheck)).apply)))
                          (((unsupported)).apply ((xel)) ((xcoro)))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                        (((unsupported)).apply ((xel)) ((((xbar)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xel)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xel)) ((xel)) ((((xbar)).apply)))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtuple)).apply ((((xbar)).apply)))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((((xiter)).apply ((((xbar)).apply)))))) (1))
                xtest_func_6.write
                  [xself]
                    memory > xfoo
                    memory > xf
                    memory > xbar
                    seq > @
                      seq
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                                (((unsupported)).apply (2))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xbar)).apply)))
                        xf.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xsend)).apply ("None: is there a None literal in the EO language?"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xsend)).apply ("None: is there a None literal in the EO language?"))) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))))
                          bogusForceDataize.write ((((xf).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_func_7.write
                  [xself]
                    memory > xcoro
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (10))
                        xcoro.write (((xbar)).apply)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply ((xcoro)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot 'yield from' a coroutine object in a non-coroutine generator"))))
                          bogusForceDataize.write (((xlist)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_8.write
                  [xself]
                    memory > xcoro
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xcoro)))))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xcoro.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xbar)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("spam"))))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_9.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xRuntimeWarning)) ("coroutine '.*test_func_9.*foo' was never awaited"))))
                          seq
                            bogusForceDataize.write (((xfoo)).apply)
                            bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xRuntimeWarning)) ("coroutine '.*test_func_9.*foo' was never awaited"))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              (((unsupported)).apply ((x_)) ((((xfoo)).apply)))
                            bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                xtest_func_10.write
                  [xself]
                    memory > xcoro
                    memory > xaw
                    memory > xN
                    memory > xgen
                    memory > xfoo
                    seq > @
                      seq
                        xN.write 0
                        xgen.write
                          []
                            memory > xa
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xZeroDivisionError)))
                                  seq
                                    xa.write (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xa)) (2))))
                                  seq
                                    (((unsupported)).apply ((xN)) (100))
                                    (((unsupported)).apply)
                                  (((unsupported)).apply ((xN)) (1))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xgen)).apply)))
                        xcoro.write (((xfoo)).apply)
                        xaw.write ((((xcoro).x__await__)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xaw)) ((((xiter)).apply ((xaw)))))
                        bogusForceDataize.write (((xnext)).apply ((xaw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xaw).xsend)).apply (10))) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xN)) (0))
                        bogusForceDataize.write ((((xaw).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xN)) (1))
                        xcoro.write (((xfoo)).apply)
                        xaw.write ((((xcoro).x__await__)).apply)
                        bogusForceDataize.write (((xnext)).apply ((xaw)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write ((((xaw).xthrow)).apply ((xZeroDivisionError)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xN)) (102))
                xtest_func_11.write
                  [xself]
                    memory > xfunc
                    memory > xcoro
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xcoro.write (((xfunc)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__await__") ((((xdir)).apply ((xcoro)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__iter__") ((((xdir)).apply (((((xcoro).x__await__)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("coroutine_wrapper") ((((xrepr)).apply (((((xcoro).x__await__)).apply)))))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_12.write
                  [xself]
                    memory > xme
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          []
                            memory > xi
                            seq > @
                              (((unsupported)).apply)
                                xi.write ((((xme).xsend)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xfoo)))
                        xme.write (((xg)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("coroutine already executing"))))
                          bogusForceDataize.write ((((xme).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_func_13.write
                  [xself]
                    memory > xg
                    memory > xcoro
                    seq > @
                      seq
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xcoro.write (((xg)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("can't send non-None value to a just-started coroutine"))))
                          bogusForceDataize.write ((((xcoro).xsend)).apply ("spam"))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_14.write
                  [xself]
                    memory > xgen
                    memory > xc
                    memory > xcoro
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xcoro.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xGeneratorExit)))
                                  (((unsupported)).apply ((((xgen)).apply)))
                                  (((unsupported)).apply ((((xgen)).apply)))
                        xc.write (((xcoro)).apply)
                        bogusForceDataize.write ((((xc).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("coroutine ignored GeneratorExit"))))
                          bogusForceDataize.write ((((xc).xclose)).apply)
                xtest_func_15.write
                  [xself]
                    memory > xspammer
                    memory > xreader
                    memory > xspammer_coro
                    seq > @
                      seq
                        xspammer.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xreader.write
                          [xcoro]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xcoro)))))
                        xspammer_coro.write (((xspammer)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("spam"))))
                          bogusForceDataize.write ((((((xreader)).apply ((xspammer_coro))).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((((xreader)).apply ((xspammer_coro))).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_func_16.write
                  [xself]
                    memory > xspammer
                    memory > xreader
                    memory > xsend
                    memory > xread
                    memory > xnop
                    seq > @
                      seq
                        xnop.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xsend.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xnop)).apply)))
                                (((unsupported)).apply ("spam"))
                        xread.write
                          [xcoro]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xnop)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xcoro)))))
                        xspammer.write (((xsend)).apply)
                        xreader.write (((xread)).apply ((xspammer)))
                        bogusForceDataize.write ((((xreader).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xreader).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xException)) ("ham"))))
                          bogusForceDataize.write ((((xreader).xthrow)).apply ((((xException)).apply ("ham"))))
                        xreader.write (((xread)).apply ((xspammer)))
                        bogusForceDataize.write ((((xreader).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xreader).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xreader).xthrow)).apply ((((xException)).apply ("wat"))))
                xtest_func_17.write
                  [xself]
                    memory > xcoroutine
                    memory > xcoro
                    seq > @
                      seq
                        xcoroutine.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xcoro.write (((xcoroutine)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("spam"))))
                          bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xcoro).xthrow)).apply ((((xException)).apply ("wat"))))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                xtest_func_18.write
                  [xself]
                    memory > xcoroutine
                    memory > xawait_iter
                    memory > xit
                    memory > xcoro
                    seq > @
                      seq
                        xcoroutine.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xcoro.write (((xcoroutine)).apply)
                        xawait_iter.write ((((xcoro).x__await__)).apply)
                        xit.write (((xiter)).apply ((xawait_iter)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("spam"))))
                          bogusForceDataize.write ((((xit).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xit).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xit).xthrow)).apply ((((xException)).apply ("wat"))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("cannot reuse already awaited coroutine"))))
                          bogusForceDataize.write ((((xit).xthrow)).apply ((((xException)).apply ("wat"))))
                        bogusForceDataize.write ((((xit).xclose)).apply)
                        bogusForceDataize.write ((((xit).xclose)).apply)
                xtest_func_19.write
                  [xself]
                    memory > xcoroutine
                    memory > xCHK
                    memory > xcoro
                    memory > xfoo
                    seq > @
                      seq
                        xCHK.write 0
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xGeneratorExit)))
                                  (((unsupported)).apply)
                                  (((unsupported)).apply ((xCHK)) (1))
                        xcoroutine.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xfoo)).apply)))
                        xcoro.write (((xcoroutine)).apply)
                        bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCHK)) (0))
                        bogusForceDataize.write ((((xcoro).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCHK)) (1))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (3))))
                          seq
                            bogusForceDataize.write ((((xcoro).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCHK)) (1))
                xtest_coro_wrapper_send_tuple.write
                  [xself]
                    memory > xresult
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (10))))
                        xresult.write (((xrun_async__await__)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (10))))))
                xtest_coro_wrapper_send_stop_iterator.write
                  [xself]
                    memory > xresult
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xStopIteration)).apply (10))))
                        xresult.write (((xrun_async__await__)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xresult)) (1))) ((xStopIteration)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xresult)) (1)).xvalue)) (10))
                xtest_cr_await.write
                  [xself]
                    memory > xc
                    memory > xcoro_b
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetcoroutinestate)).apply ((xcoro_b)))) (((xinspect).xCORO_RUNNING)))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetcoroutinestate)).apply ((xcoro_b)))) (((xinspect).xCORO_RUNNING)))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                        xc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xa)).apply)))
                        xb.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                                (((unsupported)).apply ((((xc)).apply)))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                        xcoro_b.write (((xb)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetcoroutinestate)).apply ((xcoro_b)))) (((xinspect).xCORO_CREATED)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                        bogusForceDataize.write ((((xcoro_b).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetcoroutinestate)).apply ((xcoro_b)))) (((xinspect).xCORO_SUSPENDED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xcoro_b).xcr_await).xcr_await).xgi_code).xco_name)) ("a"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))))
                          bogusForceDataize.write ((((xcoro_b).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinspect).xgetcoroutinestate)).apply ((xcoro_b)))) (((xinspect).xCORO_CLOSED)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro_b).xcr_await)))
                xtest_corotype_1.write
                  [xself]
                    memory > xc
                    memory > xct
                    memory > xf
                    seq > @
                      seq
                        xct.write ((xtypes).xCoroutineType)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("into coroutine") ((((xct).xsend).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("inside coroutine") ((((xct).xclose).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("in coroutine") ((((xct).xthrow).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("of the coroutine") (((((unsupported)).apply (((xct).x__dict__)) ("__name__")).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("of the coroutine") (((((unsupported)).apply (((xct).x__dict__)) ("__qualname__")).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xct).x__name__)) ("coroutine"))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xc.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("coroutine object") ((((xrepr)).apply ((xc)))))
                        bogusForceDataize.write ((((xc).xclose)).apply)
                xtest_await_1.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("object int can.t.*await"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_await_2.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("object list can.t.*await"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_await_3.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xAsyncYieldFrom)).apply ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async__await__)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ("None: is there a None literal in the EO language?"))))
                xtest_await_4.write
                  [xself]
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (42))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xbar)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) (42))))
                xtest_await_5.write
                  [xself]
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__await__.*returned non-iterator of type"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_await_6.write
                  [xself]
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply (52))))))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (52))) ("None: is there a None literal in the EO language?"))))
                xtest_await_7.write
                  [xself]
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply (42))
                                  (((unsupported)).apply (100))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (42))) (100))))
                xtest_await_8.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("object Awaitable can't be used in 'await' expression"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_await_9.write
                  [xself]
                    memory > xwrap
                    memory > xfoo2
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xwrap.write
                          []
                            seq > @
                              (((unsupported)).apply ((xbar)))
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (42))
                        xfoo.write
                          []
                            memory > xdb
                            memory > xb
                            seq > @
                              (((unsupported)).apply)
                                xdb.write (((unsupported)).apply ("b") ((((unsupported)).apply ((xwrap)))))
                                (((unsupported)).apply)
                                  xb.write (xwrap)
                                (((unsupported)).apply ((((((((unsupported)).apply ((((xbar)).apply))).add (((unsupported)).apply ((((((xwrap)).apply)).apply)))).add (((unsupported)).apply ((((((((((unsupported)).apply ((xdb)) ("b"))).apply)).apply)).apply)))).add ((((unsupported)).apply ((((xbar)).apply))).mul 1000)).add (((unsupported)).apply (((((((xDB).xb)).apply)).apply))))))
                        xfoo2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((unsupported)).apply ((((xbar)).apply))).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) (42168))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo2)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((42.neg)))))
                xtest_await_10.write
                  [xself]
                    memory > xbaz
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xbaz.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (42))
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xbaz)).apply)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xbar)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) (42))))
                xtest_await_11.write
                  [xself]
                    memory > xident
                    memory > xfoo2
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        xident.write
                          [xval]
                            seq > @
                              (((unsupported)).apply ((xval)))
                        xbar.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xident)) ((((unsupported)).apply ((((xbar)).apply)))))))
                        xfoo2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xbar)).apply)))) ("ham"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xfoo2)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("spam") ("ham"))))))
                xtest_await_12.write
                  [xself]
                    memory > x__await__
                    memory > xc
                    memory > xcoro
                    memory > xfoo
                    seq > @
                      seq
                        xcoro.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("spam"))
                        xc.write (((xcoro)).apply)
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xc)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__await__() returned a coroutine"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xc).xclose)).apply)
                xtest_await_13.write
                  [xself]
                    memory > x__await__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xself)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xAwaitable)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__await__.*returned non-iterator of type"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_await_14.write
                  [xself]
                    memory > xc
                    memory > x__await__
                    memory > xcoro1
                    memory > x__init__
                    memory > xcoro2
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xcoro]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply (((xcoro).x__class__)) (((xtypes).xCoroutineType)))))
                                    (((unsupported)).apply (((xself).xcoro)) ((xcoro)))
                            x__await__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((((xself).xcoro).x__await__)).apply)))
                        (((unsupported)).apply)
                          x__await__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xException)))
                        xcoro1.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xZeroDivisionError)))
                                  (((unsupported)).apply ((((unsupported)).apply ((((xFutureLike)).apply)))))
                                  (((unsupported)).apply ((xMarker)))
                        xcoro2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xWrapper)).apply ((((xcoro1)).apply)))))))
                        xc.write (((xcoro2)).apply)
                        bogusForceDataize.write ((((xc).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("spam"))))
                          bogusForceDataize.write ((((xc).xsend)).apply ("spam"))
                        xc.write (((xcoro2)).apply)
                        bogusForceDataize.write ((((xc).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xMarker)))))
                          bogusForceDataize.write ((((xc).xthrow)).apply ((xZeroDivisionError)))
                xtest_await_15.write
                  [xself]
                    memory > xcoroutine
                    memory > xnop
                    memory > xcoro
                    memory > xwaiter
                    seq > @
                      seq
                        xnop.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xcoroutine.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xnop)).apply)))
                        xwaiter.write
                          [xcoro]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcoro)))
                        xcoro.write (((xcoroutine)).apply)
                        bogusForceDataize.write ((((xcoro).xsend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("coroutine is being awaited already"))))
                          bogusForceDataize.write ((((((xwaiter)).apply ((xcoro))).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_await_16.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xValueError)).apply)))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((xKeyError)))
                                  (((unsupported)).apply ((((unsupported)).apply ((((xf)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xresult)))) ((((xrun_async)).apply ((((xg)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xresult).x__context__)))
                xtest_with_1.write
                  [xself]
                    memory > x__aenter__
                    memory > x__aexit__
                    memory > xf
                    memory > x__init__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xname]
                                seq > @
                                  (((unsupported)).apply (((xself).xname)) ((xname)))
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xAsyncYieldFrom)).apply ((((unsupported)).apply (("enter-1-".add ((xself).xname))) (("enter-2-".add ((xself).xname))))))))
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xAsyncYieldFrom)).apply ((((unsupported)).apply (("exit-1-".add ((xself).xname))) (("exit-2-".add ((xself).xname))))))))
                                    (((xself).xname).eq "B").if
                                      (((unsupported)).apply (TRUE))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xManager)).apply ("A"))) ((xa)) ((((xManager)).apply ("B"))) ((xb)))
                                  seq
                                    (((unsupported)).apply ((((xAsyncYieldFrom)).apply ((((unsupported)).apply ((((unsupported)).apply ("managers") (((xa).xname)) (((xb).xname)))))))))
                                    unsupported
                        xf.write (((xfoo)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((x_)))) ((((xrun_async)).apply ((xf)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply ("enter-1-A") ("enter-2-A") ("enter-1-B") ("enter-2-B") ((((unsupported)).apply ("managers") ("A") ("B"))) ("exit-1-B") ("exit-2-B") ("exit-1-A") ("exit-2-A"))))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xManager)).apply ("A"))) ((xa)) ((((xManager)).apply ("C"))) ((xc)))
                                  seq
                                    (((unsupported)).apply ((((xAsyncYieldFrom)).apply ((((unsupported)).apply ((((unsupported)).apply ("managers") (((xa).xname)) (((xc).xname)))))))))
                                    unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_2.write
                  [xself]
                    memory > x__aenter__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__aenter__.write
                            [xself]
                              seq > @
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__aexit__"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_3.write
                  [xself]
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__aexit__.write
                            [xself]
                              seq > @
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__aenter__"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_4.write
                  [xself]
                    memory > x__enter__
                    memory > x__exit__
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                            x__exit__.write
                              [xself]
                                seq > @
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__aexit__"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_5.write
                  [xself]
                    memory > x__aenter__
                    memory > xfunc
                    memory > x__aexit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply (((((unsupported)).apply (1)).eq 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAssertionError)))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfunc)).apply)))
                xtest_with_6.write
                  [xself]
                    memory > x__aenter__
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (123))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (456))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'async with' received an object from __aenter__ that does not implement __await__: int"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_7.write
                  [xself]
                    memory > x__aenter__
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (444))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  unsupported
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((((unsupported)).apply (((xexc).xargs)) (0))) ("'async with' received an object from __aexit__ that does not implement __await__: int"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xexc).x__context__)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xexc).x__context__)) ((xZeroDivisionError)))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("invalid asynchronous context manager did not fail"))
                xtest_with_8.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (456))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply ((xCNT)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'async with' received an object from __aexit__ that does not implement __await__: int"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (1))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xrange)).apply (2))))
                                  (((unsupported)).apply ((((xCM)).apply)))
                                    seq
                                      (((unsupported)).apply ((xCNT)) (1))
                                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'async with' received an object from __aexit__ that does not implement __await__: int"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (2))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xrange)).apply (2))))
                                  (((unsupported)).apply ((((xCM)).apply)))
                                    seq
                                      (((unsupported)).apply ((xCNT)) (1))
                                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'async with' received an object from __aexit__ that does not implement __await__: int"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (3))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  seq
                                    (((unsupported)).apply ((xCNT)) (1))
                                    (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'async with' received an object from __aexit__ that does not implement __await__: int"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (4))
                xtest_with_9.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply ((xCNT)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (1))
                xtest_with_10.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply ((((xCM)).apply)))
                                    (((unsupported)).apply ((xRuntimeError)))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xexc).x__context__)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply (((xexc).x__context__)) ((xZeroDivisionError)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((((xexc).x__context__).x__context__)) ((xRuntimeError)))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("exception from __aexit__ did not propagate"))
                xtest_with_11.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xNotImplementedError)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply ((xRuntimeError)))
                        (((unsupported)).apply ((xNotImplementedError)))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xexc).x__context__)) ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("exception from __aenter__ did not propagate"))
                xtest_with_12.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xself)))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (TRUE))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xCM)).apply)) ((xcm)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIs)).apply (((xcm).x__class__)) ((xCM)))
                                    (((unsupported)).apply ((xRuntimeError)))
                        bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                xtest_with_13.write
                  [xself]
                    memory > x__aenter__
                    memory > xCNT
                    memory > xfoo
                    memory > x__aexit__
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (TRUE))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xCNT)) (1))
                                (((unsupported)).apply ((((xCM)).apply)))
                                  (((unsupported)).apply ((xCNT)) (1000))
                                (((unsupported)).apply ((xCNT)) (10000))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (1))
                xtest_for_1.write
                  [xself]
                    memory > xaiter_calls
                    memory > xtest2
                    memory > xtest1
                    memory > xtest3
                    memory > xbuffer
                    memory > x__anext__
                    memory > x__init__
                    memory > x__aiter__
                    seq > @
                      seq
                        xaiter_calls.write 0
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xi)) (0))
                            x__aiter__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((xaiter_calls)) (1))
                                    (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xi)) (1))
                                    ((((xself).xi).mod 10).not).if
                                      (((unsupported)).apply ((((xAsyncYield)).apply ((((xself).xi).mul 10)))))
                                    (((xself).xi).greater 100).if
                                      (((unsupported)).apply ((xStopAsyncIteration)))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xi)) (((xself).xi)))))
                        xbuffer.write (((unsupported)).apply)
                        xtest1.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi1)) ((xi2)))) ((((xAsyncIter)).apply)))
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply (((xi1).add (xi2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xyielded)) ((x_)))) ((((xrun_async)).apply ((((xtest1)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaiter_calls)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xyielded)) ((((unsupported)).apply (((xi).mul 100)) ((xi)) ((((xrange)).apply (1) (11))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuffer)) ((((unsupported)).apply (((xi).mul 2)) ((xi)) ((((xrange)).apply (1) (101))))))
                        xbuffer.write (((unsupported)).apply)
                        xtest2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAsyncIter)).apply)))
                                  seq
                                    bogusForceDataize.write ((((xbuffer).xappend)).apply ((((unsupported)).apply ((xi)) (0))))
                                    ((((unsupported)).apply ((xi)) (0)).eq 20).if
                                      (((unsupported)).apply)
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply ("what?"))
                                bogusForceDataize.write ((((xbuffer).xappend)).apply ("end"))
                        (((unsupported)).apply ((((unsupported)).apply ((xyielded)) ((x_)))) ((((xrun_async)).apply ((((xtest2)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaiter_calls)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xyielded)) ((((unsupported)).apply (100) (200))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuffer)) (((((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply (1) (21)))).add (((unsupported)).apply ("end")))))
                        xbuffer.write (((unsupported)).apply)
                        xtest3.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAsyncIter)).apply)))
                                  seq
                                    ((((unsupported)).apply ((xi)) (0)).greater 20).if
                                      (((unsupported)).apply)
                                    bogusForceDataize.write ((((xbuffer).xappend)).apply ((((unsupported)).apply ((xi)) (0))))
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply ("what?"))
                                bogusForceDataize.write ((((xbuffer).xappend)).apply ("end"))
                        (((unsupported)).apply ((((unsupported)).apply ((xyielded)) ((x_)))) ((((xrun_async)).apply ((((xtest3)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaiter_calls)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xyielded)) ((((unsupported)).apply (((xi).mul 100)) ((xi)) ((((xrange)).apply (1) (11))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuffer)) (((((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply (1) (21)))).add (((unsupported)).apply ("what?") ("end")))))
                xtest_for_2.write
                  [xself]
                    memory > xtup
                    memory > xfoo
                    memory > xrefs_before
                    seq > @
                      seq
                        xtup.write (((unsupported)).apply (1) (2) (3))
                        xrefs_before.write ((((xsys).xgetrefcount)).apply ((xtup)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xtup)))
                                  bogusForceDataize.write (((xprint)).apply ("never going to happen"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("async for' requires an object.*__aiter__.*tuple"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xtup)))) ((xrefs_before)))
                xtest_for_3.write
                  [xself]
                    memory > xaiter
                    memory > x__aiter__
                    memory > xfoo
                    memory > xrefs_before
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__aiter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xself)))
                        xaiter.write (((xI)).apply)
                        xrefs_before.write ((((xsys).xgetrefcount)).apply ((xaiter)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xaiter)))
                                  bogusForceDataize.write (((xprint)).apply ("never going to happen"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("that does not implement __anext__"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xaiter)))) ((xrefs_before)))
                xtest_for_4.write
                  [xself]
                    memory > xrefs_before
                    memory > x__anext__
                    memory > x__aiter__
                    memory > xaiter
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply)))
                        xaiter.write (((xI)).apply)
                        xrefs_before.write ((((xsys).xgetrefcount)).apply ((xaiter)))
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xaiter)))
                                  bogusForceDataize.write (((xprint)).apply ("never going to happen"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("async for' received an invalid object.*__anext__.*tuple"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xaiter)))) ((xrefs_before)))
                xtest_for_6.write
                  [xself]
                    memory > xmanager
                    memory > x__aenter__
                    memory > xirefs_before
                    memory > xmain
                    memory > x__anext__
                    memory > xI
                    memory > xiterable
                    memory > xmrefs_before
                    memory > x__aexit__
                    memory > x__init__
                    memory > x__aiter__
                    seq > @
                      seq
                        xI.write 0
                        (((unsupported)).apply)
                          seq
                            x__aenter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((xI)) (10000))
                            x__aexit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((xI)) (100000))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xi)) (0))
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((xself).xi).greater 10).if
                                      (((unsupported)).apply ((xStopAsyncIteration)))
                                    (((unsupported)).apply (((xself).xi)) (1))
                                    (((unsupported)).apply (((xself).xi)))
                        xmanager.write (((xManager)).apply)
                        xiterable.write (((xIterable)).apply)
                        xmrefs_before.write ((((xsys).xgetrefcount)).apply ((xmanager)))
                        xirefs_before.write ((((xsys).xgetrefcount)).apply ((xiterable)))
                        xmain.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xmanager)))
                                  (((unsupported)).apply ((xi)) ((xiterable)))
                                    (((unsupported)).apply ((xI)) (1))
                                (((unsupported)).apply ((xI)) (1000))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error"))
                            bogusForceDataize.write (((xrun_async)).apply ((((xmain)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xI)) (111011))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xmanager)))) ((xmrefs_before)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xgetrefcount)).apply ((xiterable)))) ((xirefs_before)))
                        xmain.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xManager)).apply)))
                                  (((unsupported)).apply ((xi)) ((((xIterable)).apply)))
                                    (((unsupported)).apply ((xI)) (1))
                                (((unsupported)).apply ((xI)) (1000))
                                (((unsupported)).apply ((((xManager)).apply)))
                                  (((unsupported)).apply ((xi)) ((((xIterable)).apply)))
                                    (((unsupported)).apply ((xI)) (1))
                                (((unsupported)).apply ((xI)) (1000))
                        bogusForceDataize.write (((xrun_async)).apply ((((xmain)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xI)) (333033))
                        xmain.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((xManager)).apply)))
                                  seq
                                    (((unsupported)).apply ((xI)) (100))
                                    (((unsupported)).apply ((xi)) ((((xIterable)).apply)))
                                      (((unsupported)).apply ((xI)) (1))
                                      (((unsupported)).apply ((xI)) (10000000))
                                (((unsupported)).apply ((xI)) (1000))
                                (((unsupported)).apply ((((xManager)).apply)))
                                  seq
                                    (((unsupported)).apply ((xI)) (100))
                                    (((unsupported)).apply ((xi)) ((((xIterable)).apply)))
                                      (((unsupported)).apply ((xI)) (1))
                                      (((unsupported)).apply ((xI)) (10000000))
                                (((unsupported)).apply ((xI)) (1000))
                        bogusForceDataize.write (((xrun_async)).apply ((((xmain)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xI)) (20555255))
                xtest_for_7.write
                  [xself]
                    memory > x__aiter__
                    memory > xCNT
                    memory > xfoo
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          x__aiter__.write
                            [xself]
                              seq > @
                                unsupported
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAI)).apply)))
                                  (((unsupported)).apply ((xCNT)) (1))
                                (((unsupported)).apply ((xCNT)) (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (0))
                xtest_for_8.write
                  [xself]
                    memory > x__aiter__
                    memory > xCNT
                    memory > xfoo
                    seq > @
                      seq
                        xCNT.write 0
                        (((unsupported)).apply)
                          x__aiter__.write
                            [xself]
                              seq > @
                                unsupported
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAI)).apply)))
                                  (((unsupported)).apply ((xCNT)) (1))
                                (((unsupported)).apply ((xCNT)) (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                            seq
                              bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error"))
                              bogusForceDataize.write (((xrun_async)).apply ((((xfoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xCNT)) (0))
                xtest_for_11.write
                  [xself]
                    memory > xerr
                    memory > xmain
                    memory > x__anext__
                    memory > x__await__
                    memory > x__aiter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__await__.write
                              [xself]
                                seq > @
                                  unsupported
                        xmain.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((x_)) ((((xF)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("an invalid object from __anext__"))) ((xc)))
                          bogusForceDataize.write ((((((xmain)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))
                        xerr.write ((xc).xexception)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xerr).x__cause__)) ((xZeroDivisionError)))
                xtest_for_tuple.write
                  [xself]
                    memory > x__anext__
                    memory > xi
                    memory > x__aiter__
                    memory > xresult
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xtuple)))
                          seq
                            xi.write 0
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((xself).xi).geq (((xlen)).apply ((xself)))).if
                                      (((unsupported)).apply ((xStopAsyncIteration)))
                                    (((unsupported)).apply (((xself).xi)) (1))
                                    (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((xself).xi).sub 1)))))
                        xresult.write (((unsupported)).apply)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAIter)).apply ((((unsupported)).apply (42))))))
                                  bogusForceDataize.write ((((xresult).xappend)).apply ((xi)))
                                (((unsupported)).apply ((xDone)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDone)))))
                          bogusForceDataize.write ((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (42))))
                xtest_for_stop_iteration.write
                  [xself]
                    memory > x__anext__
                    memory > xi
                    memory > x__aiter__
                    memory > xresult
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xStopIteration)))
                          seq
                            xi.write 0
                            x__aiter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__anext__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    ((xself).xi).if
                                      (((unsupported)).apply ((xStopAsyncIteration)))
                                    (((unsupported)).apply (((xself).xi)) (1))
                                    (((unsupported)).apply (((xself).xvalue)))
                        xresult.write (((unsupported)).apply)
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xAIter)).apply (42))))
                                  bogusForceDataize.write ((((xresult).xappend)).apply ((xi)))
                                (((unsupported)).apply ((xDone)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDone)))))
                          bogusForceDataize.write ((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (42))))
                xtest_comp_1.write
                  [xself]
                    memory > xrun_list
                    memory > xrun_dict1
                    memory > xrun_dict2
                    memory > xf
                    memory > xrun_set
                    seq > @
                      seq
                        xf.write
                          [xi]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xc)))) ((xc)) ((((unsupported)).apply ((((xf)).apply (1))) ((((xf)).apply (41))))))))
                        xrun_set.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xc)))) ((xc)) ((((unsupported)).apply ((((xf)).apply (1))) ((((xf)).apply (41))))))))
                        xrun_dict1.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xc)))) ("a") ((xc)) ((((unsupported)).apply ((((xf)).apply (1))) ((((xf)).apply (41))))))))
                        xrun_dict2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((((unsupported)).apply ((xc)))) ((((unsupported)).apply ((xi)) ((xc)))) ((((xenumerate)).apply ((((unsupported)).apply ((((xf)).apply (1))) ((((xf)).apply (41))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (41))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (41))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_dict1)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) ("a") (41) ("a"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_dict2)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (0) (1) (1) (41))))))
                xtest_comp_2.write
                  [xself]
                    memory > xrun_set
                    memory > xrun_list
                    memory > xrun_set2
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xi]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xc)) ((((unsupported)).apply ((((xf)).apply (""))) ((((xf)).apply ("abc"))) ((((xf)).apply (""))) ((((xf)).apply ((((unsupported)).apply ("de") ("fg"))))))) ((xs)) ((((unsupported)).apply ((xc)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") ("b") ("c") ("de") ("fg"))))))
                        xrun_set.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xc)) ((((unsupported)).apply ((((xf)).apply ((((unsupported)).apply ((((xf)).apply ((((unsupported)).apply (10) (30))))) ((((xf)).apply ((((unsupported)).apply (20))))))))))) ((xs)) ((((unsupported)).apply ((xc)))) ((xd)) ((((unsupported)).apply ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (10) (20) (30))))))
                        xrun_set2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xs)))) ((xc)) ((((unsupported)).apply ((((xf)).apply ((((unsupported)).apply ((((xf)).apply (10))) ((((xf)).apply (20))))))))) ((xs)) ((((unsupported)).apply ((xc)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set2)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (10) (20))))))
                xtest_comp_3.write
                  [xself]
                    memory > xrun_dict
                    memory > xrun_gen
                    memory > xrun_list
                    memory > xf
                    memory > xrun_set
                    seq > @
                      seq
                        xf.write
                          [xit]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xit)))
                                  (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (21))))))
                        xrun_set.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (21))))))
                        xrun_dict.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) (((xi).add 2)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_dict)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (12) (21) (22))))))
                        xrun_gen.write
                          []
                            memory > xgen
                            seq > @
                              (((unsupported)).apply)
                                xgen.write (((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xg).add 100)) ((xg)) ((xgen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_gen)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (111) (121))))))
                xtest_comp_4.write
                  [xself]
                    memory > xrun_dict
                    memory > xrun_gen
                    memory > xrun_list
                    memory > xf
                    memory > xrun_set
                    seq > @
                      seq
                        xf.write
                          [xit]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xit)))
                                  (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))) (((xi).greater 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (21))))))
                        xrun_set.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))) (((xi).greater 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (21))))))
                        xrun_dict.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) (((xi).add 2)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))) (((xi).greater 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_dict)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (21) (22))))))
                        xrun_gen.write
                          []
                            memory > xgen
                            seq > @
                              (((unsupported)).apply)
                                xgen.write (((unsupported)).apply (((xi).add 1)) ((xi)) ((((xf)).apply ((((unsupported)).apply (10) (20))))) (((xi).greater 10)))
                                (((unsupported)).apply ((((unsupported)).apply (((xg).add 100)) ((xg)) ((xgen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_gen)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (121))))))
                xtest_comp_4_2.write
                  [xself]
                    memory > xrun_dict
                    memory > xrun_gen
                    memory > xrun_list
                    memory > xf
                    memory > xrun_set
                    seq > @
                      seq
                        xf.write
                          [xit]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xit)))
                                  (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 10)) ((xi)) ((((xf)).apply ((((xrange)).apply (5))))) ((((unsupported)).apply (0) ((xi)) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (12) (13))))))
                        xrun_set.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 10)) ((xi)) ((((xf)).apply ((((xrange)).apply (5))))) ((((unsupported)).apply (0) ((xi)) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_set)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (12) (13))))))
                        xrun_dict.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 10)) (((xi).add 100)) ((xi)) ((((xf)).apply ((((xrange)).apply (5))))) ((((unsupported)).apply (0) ((xi)) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_dict)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (101) (12) (102) (13) (103))))))
                        xrun_gen.write
                          []
                            memory > xgen
                            seq > @
                              (((unsupported)).apply)
                                xgen.write (((unsupported)).apply (((xi).add 10)) ((xi)) ((((xf)).apply ((((xrange)).apply (5))))) ((((unsupported)).apply (0) ((xi)) (4))))
                                (((unsupported)).apply ((((unsupported)).apply (((xg).add 100)) ((xg)) ((xgen)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_gen)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (111) (112) (113))))))
                xtest_comp_5.write
                  [xself]
                    memory > xrun_list
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xit]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xit)))
                                  (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xpair)) ((((unsupported)).apply ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (30) (40))))) (((((unsupported)).apply ((xpair)) (0)).greater 10)) ((xi)) ((((xf)).apply ((xpair)))) (((xi).greater 30)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (41))))))
                xtest_comp_6.write
                  [xself]
                    memory > xrun_list
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xit]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((xit)))
                                  (((unsupported)).apply ((xi)))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xi).add 1)) ((xseq)) ((((xf)).apply ((((unsupported)).apply ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (30))))))) ((xi)) ((xseq)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (11) (21) (31))))))
                xtest_comp_7.write
                  [xself]
                    memory > xrun_list
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                                (((unsupported)).apply (2))
                                (((unsupported)).apply ((((xException)).apply ("aaa"))))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xi)) ((((xf)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xException)) ("aaa"))))
                          bogusForceDataize.write (((xrun_async)).apply ((((xrun_list)).apply)))
                xtest_comp_8.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xi)) ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xf)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (2) (3))))))
                xtest_comp_9.write
                  [xself]
                    memory > xgen
                    memory > xf
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (1))
                                (((unsupported)).apply (2))
                        xf.write
                          []
                            memory > xl
                            seq > @
                              (((unsupported)).apply)
                                xl.write (((unsupported)).apply ((xi)) ((xi)) ((((xgen)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xi)) ((xl)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xf)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (2))))))
                xtest_comp_10.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            memory > xxx
                            seq > @
                              (((unsupported)).apply)
                                xxx.write (((unsupported)).apply ((xi)) ((xi)) ((((unsupported)).apply (1) (2) (3))))
                                (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xx)) ((xx)) ((xxx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xf)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))))
                xtest_copy.write
                  [xself]
                    memory > xfunc
                    memory > xaw
                    memory > xcoro
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xcoro.write (((xfunc)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xcopy).xcopy)).apply ((xcoro)))
                        xaw.write ((((xcoro).x__await__)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write ((((xcopy).xcopy)).apply ((xaw)))
                          bogusForceDataize.write ((((xaw).xclose)).apply)
                xtest_pickle.write
                  [xself]
                    memory > xfunc
                    memory > xaw
                    memory > xcoro
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xcoro.write (((xfunc)).apply)
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xpickle).xPicklingError)))))))
                            bogusForceDataize.write ((((xpickle).xdumps)).apply ((xcoro)) ((xproto)))
                        xaw.write ((((xcoro).x__await__)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xpickle).xPicklingError)))))))
                              bogusForceDataize.write ((((xpickle).xdumps)).apply ((xaw)) ((xproto)))
                          bogusForceDataize.write ((((xaw).xclose)).apply)
                xtest_fatal_coro_warning.write
                  [xself]
                    memory > xfunc
                    memory > xcoro_repr
                    memory > xcoro
                    seq > @
                      seq
                        xfunc.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)) (((((xsupport).xcatch_unraisable_exception)).apply)) ((xcm)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xfilterwarnings)).apply ("error"))
                            xcoro.write (((xfunc)).apply)
                            xcoro_repr.write (((xrepr)).apply ((xcoro)))
                            xcoro.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("was never awaited") ((((xstr)).apply ((((xcm).xunraisable).xexc_value)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcm).xunraisable).xobject)))) ((xcoro_repr)))
                xtest_for_assign_raising_stop_async_iteration.write
                  [xself]
                    memory > xrun_gen
                    memory > xrun_list
                    memory > xtgt
                    memory > x__setitem__
                    memory > xrun_for
                    memory > xsource
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__setitem__.write
                            [xself xkey xvalue]
                              seq > @
                                (((unsupported)).apply ((((xStopAsyncIteration)).apply (42))))
                        xtgt.write (((xBadTarget)).apply)
                        xsource.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (10))
                        xrun_for.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopAsyncIteration)))) ((xcm)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xtgt)) (0))) ((((xsource)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_for)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopAsyncIteration)))) ((xcm)))
                                  (((unsupported)).apply ((((unsupported)).apply (0) ((((unsupported)).apply ((xtgt)) (0))) ((((xsource)).apply)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
                        xrun_gen.write
                          []
                            memory > xgen
                            memory > xa
                            seq > @
                              (((unsupported)).apply)
                                xgen.write (((unsupported)).apply (0) ((((unsupported)).apply ((xtgt)) (0))) ((((xsource)).apply)))
                                xa.write ((((xgen).xasend)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                                  (((unsupported)).apply ((xa)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xcm).xexception).x__cause__)) ((xStopAsyncIteration)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcm).xexception).x__cause__).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_gen)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
                xtest_for_assign_raising_stop_async_iteration_2.write
                  [xself]
                    memory > xbadpairs
                    memory > xrun_gen
                    memory > xrun_for
                    memory > xrun_list
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xStopAsyncIteration)).apply (42))))
                        xbadpairs.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xBadIterable)).apply)))
                        xrun_for.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopAsyncIteration)))) ((xcm)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((xbadpairs)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_for)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
                        xrun_list.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopAsyncIteration)))) ((xcm)))
                                  (((unsupported)).apply ((((unsupported)).apply (0) ((((unsupported)).apply ((xi)) ((xj)))) ((((xbadpairs)).apply)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_list)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
                        xrun_gen.write
                          []
                            memory > xgen
                            memory > xa
                            seq > @
                              (((unsupported)).apply)
                                xgen.write (((unsupported)).apply (0) ((((unsupported)).apply ((xi)) ((xj)))) ((((xbadpairs)).apply)))
                                xa.write ((((xgen).xasend)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                                  (((unsupported)).apply ((xa)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xcm).xexception).x__cause__)) ((xStopAsyncIteration)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcm).xexception).x__cause__).xargs)) ((((unsupported)).apply (42))))
                                (((unsupported)).apply ("end"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun_async)).apply ((((xrun_gen)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("end"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_asyncio_1.write
                [xself]
                  memory > xbuffer
                  memory > x__aenter__
                  memory > x__aexit__
                  memory > xf
                  memory > xloop
                  memory > xasyncio
                  seq > @
                    seq
                      xasyncio.write ((((xsupport).ximport_module)).apply ("asyncio"))
                      (((unsupported)).apply ((xException)))
                      xbuffer.write (((unsupported)).apply)
                      (((unsupported)).apply)
                        seq
                          x__aenter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply (1))
                                  (((unsupported)).apply (((((xasyncio).xsleep)).apply (0.01))))
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply (2))
                                  (((unsupported)).apply ((xself)))
                          x__aexit__.write
                            [xself xexc_type xexc_val xexc_tb]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((((xasyncio).xsleep)).apply (0.01))))
                                  bogusForceDataize.write ((((xbuffer).xappend)).apply (((xexc_type).x__name__)))
                      xf.write
                        []
                          seq > @
                            (((unsupported)).apply)
                              (((unsupported)).apply ((((xCM)).apply)) ((xc)))
                                seq
                                  (((unsupported)).apply (((((xasyncio).xsleep)).apply (0.01))))
                                  (((unsupported)).apply ((xMyException)))
                              bogusForceDataize.write ((((xbuffer).xappend)).apply ("unreachable"))
                      xloop.write ((((xasyncio).xnew_event_loop)).apply)
                      bogusForceDataize.write ((((xasyncio).xset_event_loop)).apply ((xloop)))
                      (((unsupported)).apply ((xMyException)))
                        bogusForceDataize.write ((((xloop).xrun_until_complete)).apply ((((xf)).apply)))
                        seq
                          bogusForceDataize.write ((((xloop).xclose)).apply)
                          bogusForceDataize.write ((((xasyncio).xset_event_loop_policy)).apply ("None: is there a None literal in the EO language?"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuffer)) ((((unsupported)).apply (1) (2) ("MyException"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xhere.write
                  [xself]
                    memory > xinfo
                    seq > @
                      seq
                        xinfo.write ((((xinspect).xgetframeinfo)).apply ((((((xinspect).xcurrentframe)).apply).xf_back)))
                        (((unsupported)).apply ((((unsupported)).apply (((xinfo).xfilename)) (((xinfo).xlineno)))))
                xtest_origin_tracking.write
                  [xself]
                    memory > xorig_depth
                    memory > xnested
                    memory > xcorofn
                    seq > @
                      seq
                        xorig_depth.write ((((xsys).xget_coroutine_origin_tracking_depth)).apply)
                        (((unsupported)).apply)
                          seq
                            xcorofn.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                            bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xget_coroutine_origin_tracking_depth)).apply)) (0))
                            (((unsupported)).apply (((((xcontextlib).xclosing)).apply ((((xcorofn)).apply)))) ((xcoro)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcoro).xcr_origin)))
                            bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xget_coroutine_origin_tracking_depth)).apply)) (1))
                            (((unsupported)).apply ((((unsupported)).apply ((xfname)) ((xlineno)))) (((((xself).xhere)).apply)))
                            (((unsupported)).apply (((((xcontextlib).xclosing)).apply ((((xcorofn)).apply)))) ((xcoro)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcoro).xcr_origin)) ((((unsupported)).apply ((((unsupported)).apply ((xfname)) (((xlineno).add 1)) ("test_origin_tracking"))))))
                            bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xget_coroutine_origin_tracking_depth)).apply)) (2))
                            xnested.write
                              []
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((((xself).xhere)).apply)) ((((xcorofn)).apply)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xfname)) ((xlineno)))) (((((xself).xhere)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnested_fname)) ((xnested_lineno)))) ((xcoro)))) ((((xnested)).apply)))
                            (((unsupported)).apply (((((xcontextlib).xclosing)).apply ((xcoro)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcoro).xcr_origin)) ((((unsupported)).apply ((((unsupported)).apply ((xnested_fname)) ((xnested_lineno)) ("nested"))) ((((unsupported)).apply ((xfname)) (((xlineno).add 1)) ("test_origin_tracking"))))))
                            bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply (1000))
                            (((unsupported)).apply (((((xcontextlib).xclosing)).apply ((((xcorofn)).apply)))) ((xcoro)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (2) ((((xlen)).apply (((xcoro).xcr_origin)))) (1000))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xget_coroutine_origin_tracking_depth)).apply)) (1000))
                          bogusForceDataize.write ((((xsys).xset_coroutine_origin_tracking_depth)).apply ((xorig_depth)))
                xtest_unawaited_warning_when_module_broken.write
                  [xself]
                    memory > xcorofn
                    memory > xcoro_repr
                    memory > xcoro
                    memory > xorig_wuc
                    seq > @
                      seq
                        xcorofn.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xorig_wuc.write ((xwarnings).x_warn_unawaited_coroutine)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xwarnings).x_warn_unawaited_coroutine)) ((((unsupported)).apply ((1.div 0)))))
                            (((unsupported)).apply (((((xsupport).xcatch_unraisable_exception)).apply)) ((xcm)) (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("coroutine .* was never awaited") ((xRuntimeWarning)))))))
                              seq
                                xcoro.write (((xcorofn)).apply)
                                xcoro_repr.write (((xrepr)).apply ((xcoro)))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcoro)))))))
                                bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcm).xunraisable).xobject)))) ((xcoro_repr)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xunraisable).xexc_type)) ((xZeroDivisionError)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xwarnings).x_warn_unawaited_coroutine)))))))
                            (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("coroutine .* was never awaited") ((xRuntimeWarning)))))))
                              seq
                                bogusForceDataize.write (((xcorofn)).apply)
                                bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                          (((unsupported)).apply (((xwarnings).x_warn_unawaited_coroutine)) ((xorig_wuc)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_unawaited_warning_during_shutdown.write
                [xself]
                  memory > xcode
                  seq > @
                    seq
                      xcode.write "import asyncionasync def f(): passnasyncio.gather(f())n"
                      bogusForceDataize.write (((xassert_python_ok)).apply ("-c") ((xcode)))
                      xcode.write "import sysnasync def f(): passnsys.coro = f()n"
                      bogusForceDataize.write (((xassert_python_ok)).apply ("-c") ((xcode)))
                      xcode.write "import sysnasync def f(): passnsys.corocycle = [f()]nsys.corocycle.append(sys.corocycle)n"
                      bogusForceDataize.write (((xassert_python_ok)).apply ("-c") ((xcode)))
            (((unsupported)).apply (((xunittest).xTestCase)) (((xsupport).xcpython_only)))
              seq
                xtest_tp_await_1.write
                  [xself]
                    memory > xat
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfoo.write
                          []
                            memory > xfuture
                            seq > @
                              (((unsupported)).apply)
                                xfuture.write (((xat)).apply ((((xiter)).apply ((((unsupported)).apply (1))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xfuture)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))) (1))
                xtest_tp_await_2.write
                  [xself]
                    memory > xat
                    memory > xfuture
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfuture.write (((xat)).apply ((((xiter)).apply ((((unsupported)).apply (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply (((((xfuture).x__await__)).apply)))) (1))
                xtest_tp_await_3.write
                  [xself]
                    memory > xat
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfoo.write
                          []
                            memory > xfuture
                            seq > @
                              (((unsupported)).apply)
                                xfuture.write (((xat)).apply (1))
                                (((unsupported)).apply ((((unsupported)).apply ((xfuture)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__await__.*returned non-iterator of type 'int'"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xfoo)).apply).xsend)).apply ("None: is there a None literal in the EO language?"))) (1))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)