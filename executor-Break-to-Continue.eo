memory > xall
memory > xmig
memory > xapplied
memory > x_
memory > xProjectState
memory > xmigrations
memory > xany
memory > xset
memory > xbackwards
memory > xm
memory > xsorted
memory > xcolumn
memory > xkey
memory > xapp
memory > xMigrationRecorder
memory > xindex
memory > xenumerate
memory > xrouter
memory > xapp_label
memory > xcursor
memory > xmigration
memory > xnode
memory > xInvalidMigrationPlan
memory > xoperation
memory > xtarget
memory > xname
memory > xn
memory > xschema_editor
memory > xisinstance
memory > xMigrationLoader
memory > xdict
memory > xroot
[] > executor
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmigrate
        memory > x_migrate_all_forwards
        memory > xrecord_migration
        memory > x_migrate_all_backwards
        memory > x__init__
        memory > xglobal_apps
        memory > xcheck_replacements
        memory > x_create_project_state
        memory > xdetect_soft_applied
        memory > xunapply_migration
        memory > xmigration_plan
        memory > xapply_migration
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xconnection xprogress_callback]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ((xconnection)))
                        (((unsupported)).apply (((xself).xloader)) ((((xMigrationLoader)).apply (((xself).xconnection)))))
                        (((unsupported)).apply (((xself).xrecorder)) ((((xMigrationRecorder)).apply (((xself).xconnection)))))
                        (((unsupported)).apply (((xself).xprogress_callback)) ((xprogress_callback)))
                xmigration_plan.write
                  [xself xtargets xclean_start]
                    memory > xnext_in_app
                    memory > xplan
                    memory > xapplied
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xplan.write (((unsupported)).apply)
                        (xclean_start).if
                          xapplied.write (((unsupported)).apply)
                          xapplied.write (((xdict)).apply ((((xself).xloader).xapplied_migrations)))
                        (((unsupported)).apply ((xtarget)) ((xtargets)))
                          (((unsupported)).apply ((((unsupported)).apply ((xtarget)) (1))) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((xroot)) (((((((xself).xloader).xgraph).xroot_nodes)).apply)))
                              ((((unsupported)).apply ((xroot)) (0)).eq (((unsupported)).apply ((xtarget)) (0))).if
                                (((unsupported)).apply ((xmigration)) (((((((xself).xloader).xgraph).xbackwards_plan)).apply ((xroot)))))
                                  (((unsupported)).apply ((xmigration)) ((xapplied))).if
                                    seq
                                      bogusForceDataize.write ((((xplan).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xmigration)))) (TRUE))))
                                      bogusForceDataize.write ((((xapplied).xpop)).apply ((xmigration)))
                            (((unsupported)).apply ((xtarget)) ((xapplied))).if
                              seq
                                ((((xself).xloader).xreplace_migrations).and (((unsupported)).apply ((xtarget)) (((((xself).xloader).xgraph).xnode_map)))).if
                                  seq
                                    (((unsupported)).apply ((((xself).xloader).xreplace_migrations)) (FALSE))
                                    bogusForceDataize.write (((((xself).xloader).xbuild_graph)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xmigration_plan)) ((xtargets)) ((xclean_start)))))
                                xnext_in_app.write (((xsorted)).apply ((((unsupported)).apply ((xn)) ((xn)) (((((unsupported)).apply (((((xself).xloader).xgraph).xnode_map)) ((xtarget))).xchildren)) (((((unsupported)).apply ((xn)) (0)).eq (((unsupported)).apply ((xtarget)) (0)))))))
                                (((unsupported)).apply ((xnode)) ((xnext_in_app)))
                                  (((unsupported)).apply ((xmigration)) (((((((xself).xloader).xgraph).xbackwards_plan)).apply ((xnode)))))
                                    (((unsupported)).apply ((xmigration)) ((xapplied))).if
                                      seq
                                        bogusForceDataize.write ((((xplan).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xmigration)))) (TRUE))))
                                        bogusForceDataize.write ((((xapplied).xpop)).apply ((xmigration)))
                              (((unsupported)).apply ((xmigration)) (((((((xself).xloader).xgraph).xforwards_plan)).apply ((xtarget)))))
                                (((unsupported)).apply ((xmigration)) ((xapplied))).if
                                  seq
                                    bogusForceDataize.write ((((xplan).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xmigration)))) (FALSE))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xapplied)) ((xmigration)))) ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xmigration)))))
                        (((unsupported)).apply ((xplan)))
                x_create_project_state.write
                  [xself xwith_applied_migrations]
                    memory > xstate
                    memory > xfull_plan
                    memory > xapplied_migrations
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xstate.write (((unsupported)).apply ((xProjectState)) ((((xself).xloader).xunmigrated_apps)))
                        (xwith_applied_migrations).if
                          seq
                            xfull_plan.write (((unsupported)).apply (((xself).xmigration_plan)) (((((((xself).xloader).xgraph).xleaf_nodes)).apply)) (TRUE))
                            xapplied_migrations.write (((unsupported)).apply ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xkey)))) ((xkey)) ((((xself).xloader).xapplied_migrations)) ((((unsupported)).apply ((xkey)) (((((xself).xloader).xgraph).xnodes)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((x_)))) ((xfull_plan)))
                              (((unsupported)).apply ((xmigration)) ((xapplied_migrations))).if
                                (((unsupported)).apply (((xmigration).xmutate_state)) ((xstate)) (FALSE))
                        (((unsupported)).apply ((xstate)))
                xmigrate.write
                  [xself xtargets xplan xstate xfake xfake_initial]
                    memory > xall_forwards
                    memory > xall_backwards
                    memory > xfull_plan
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xplan).eq (((unsupported)).apply)).if
                          ((((((xself).xrecorder).xhas_table)).apply).not).if
                            (((unsupported)).apply ((((unsupported)).apply (((xself).x_create_project_state)) (FALSE))))
                          bogusForceDataize.write (((((xself).xrecorder).xensure_schema)).apply)
                        (((unsupported)).apply ((xplan)) ("None: is there a None literal in the EO language?")).if
                          xplan.write ((((xself).xmigration_plan)).apply ((xtargets)))
                        xfull_plan.write (((unsupported)).apply (((xself).xmigration_plan)) (((((((xself).xloader).xgraph).xleaf_nodes)).apply)) (TRUE))
                        xall_forwards.write (((xall)).apply ((((unsupported)).apply (((xbackwards).not)) ((((unsupported)).apply ((xmig)) ((xbackwards)))) ((xplan)))))
                        xall_backwards.write (((xall)).apply ((((unsupported)).apply ((xbackwards)) ((((unsupported)).apply ((xmig)) ((xbackwards)))) ((xplan)))))
                        ((xplan).not).if
                          (((unsupported)).apply ((xstate)) ("None: is there a None literal in the EO language?")).if
                            xstate.write (((unsupported)).apply (((xself).x_create_project_state)) (TRUE))
                          ((xall_forwards).eq (xall_backwards)).if
                            (((unsupported)).apply ((((xInvalidMigrationPlan)).apply ("Migration plans with both forwards and backwards migrations are not supported. Please split your migration process into separate plans of only forwards OR backwards migrations.") ((xplan)))))
                            (xall_forwards).if
                              seq
                                (((unsupported)).apply ((xstate)) ("None: is there a None literal in the EO language?")).if
                                  xstate.write (((unsupported)).apply (((xself).x_create_project_state)) (TRUE))
                                xstate.write (((unsupported)).apply (((xself).x_migrate_all_forwards)) ((xstate)) ((xplan)) ((xfull_plan)) ((xfake)) ((xfake_initial)))
                              xstate.write (((unsupported)).apply (((xself).x_migrate_all_backwards)) ((xplan)) ((xfull_plan)) ((xfake)))
                        bogusForceDataize.write ((((xself).xcheck_replacements)).apply)
                        (((unsupported)).apply ((xstate)))
                x_migrate_all_forwards.write
                  [xself xstate xplan xfull_plan xfake xfake_initial]
                    memory > xmigrations_to_run
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmigrations_to_run.write (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((xm)) ((xplan)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((x_)))) ((xfull_plan)))
                          seq
                            ((xmigrations_to_run).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xmigration)) ((xmigrations_to_run))).if
                              seq
                                (((unsupported)).apply ("apps") (((xstate).x__dict__))).if
                                  seq
                                    ((xself).xprogress_callback).if
                                      bogusForceDataize.write ((((xself).xprogress_callback)).apply ("render_start"))
                                    unsupported
                                    ((xself).xprogress_callback).if
                                      bogusForceDataize.write ((((xself).xprogress_callback)).apply ("render_success"))
                                xstate.write (((unsupported)).apply (((xself).xapply_migration)) ((xstate)) ((xmigration)) ((xfake)) ((xfake_initial)))
                                bogusForceDataize.write ((((xmigrations_to_run).xremove)).apply ((xmigration)))
                        (((unsupported)).apply ((xstate)))
                x_migrate_all_backwards.write
                  [xself xplan xfull_plan xfake]
                    memory > xmigrations_to_run
                    memory > xstates
                    memory > xapplied_migrations
                    memory > xlast_unapplied_migration
                    memory > xstate
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmigrations_to_run.write (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((xm)) ((xplan)))
                        xstates.write (((unsupported)).apply)
                        xstate.write ((((xself).x_create_project_state)).apply)
                        xapplied_migrations.write (((unsupported)).apply ((((unsupported)).apply (((((xself).xloader).xgraph).xnodes)) ((xkey)))) ((xkey)) ((((xself).xloader).xapplied_migrations)) ((((unsupported)).apply ((xkey)) (((((xself).xloader).xgraph).xnodes)))))
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("render_start"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((x_)))) ((xfull_plan)))
                          seq
                            ((xmigrations_to_run).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xmigration)) ((xmigrations_to_run))).if
                              seq
                                (((unsupported)).apply ("apps") (((xstate).x__dict__))).if
                                  unsupported
                                (((unsupported)).apply ((((unsupported)).apply ((xstates)) ((xmigration)))) ((xstate)))
                                xstate.write (((unsupported)).apply (((xmigration).xmutate_state)) ((xstate)) (TRUE))
                                bogusForceDataize.write ((((xmigrations_to_run).xremove)).apply ((xmigration)))
                              (((unsupported)).apply ((xmigration)) ((xapplied_migrations))).if
                                (((unsupported)).apply (((xmigration).xmutate_state)) ((xstate)) (FALSE))
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("render_success"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((x_)))) ((xplan)))
                          seq
                            (((unsupported)).apply (((xself).xunapply_migration)) ((((unsupported)).apply ((xstates)) ((xmigration)))) ((xmigration)) ((xfake)))
                            bogusForceDataize.write ((((xapplied_migrations).xremove)).apply ((xmigration)))
                        xlast_unapplied_migration.write (((unsupported)).apply ((((unsupported)).apply ((xplan)) ((1.neg)))) (0))
                        xstate.write (((unsupported)).apply ((xstates)) ((xlast_unapplied_migration)))
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((((unsupported)).apply ((xmigration)) ((x_)))))) ((((xenumerate)).apply ((xfull_plan)))))
                          ((xmigration).eq (xlast_unapplied_migration)).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((x_)))) ((((unsupported)).apply ((xfull_plan)) ((((unsupported)).apply ((xindex)))))))
                                (((unsupported)).apply ((xmigration)) ((xapplied_migrations))).if
                                  (((unsupported)).apply (((xmigration).xmutate_state)) ((xstate)) (FALSE))
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xstate)))
                xapply_migration.write
                  [xself xstate xmigration xfake xfake_initial]
                    memory > xmigration_recorded
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xmigration_recorded.write FALSE
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("apply_start") ((xmigration)) ((xfake)))
                        ((xfake).not).if
                          seq
                            (xfake_initial).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xapplied)) ((xstate)))) (((((xself).xdetect_soft_applied)).apply ((xstate)) ((xmigration)))))
                                (xapplied).if
                                  xfake.write TRUE
                            ((xfake).not).if
                              (((unsupported)).apply ((((unsupported)).apply ((((xself).xconnection).xschema_editor)) (((xmigration).xatomic)))) ((xschema_editor)))
                                seq
                                  xstate.write ((((xmigration).xapply)).apply ((xstate)) ((xschema_editor)))
                                  (((xschema_editor).xdeferred_sql).not).if
                                    seq
                                      bogusForceDataize.write ((((xself).xrecord_migration)).apply ((xmigration)))
                                      xmigration_recorded.write TRUE
                        ((xmigration_recorded).not).if
                          bogusForceDataize.write ((((xself).xrecord_migration)).apply ((xmigration)))
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("apply_success") ((xmigration)) ((xfake)))
                        (((unsupported)).apply ((xstate)))
                xrecord_migration.write
                  [xself xmigration]
                    seq > @
                      ((xmigration).xreplaces).if
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xname)))) (((xmigration).xreplaces)))
                          bogusForceDataize.write (((((xself).xrecorder).xrecord_applied)).apply ((xapp_label)) ((xname)))
                        bogusForceDataize.write (((((xself).xrecorder).xrecord_applied)).apply (((xmigration).xapp_label)) (((xmigration).xname)))
                xunapply_migration.write
                  [xself xstate xmigration xfake]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("unapply_start") ((xmigration)) ((xfake)))
                        ((xfake).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((((xself).xconnection).xschema_editor)) (((xmigration).xatomic)))) ((xschema_editor)))
                            xstate.write ((((xmigration).xunapply)).apply ((xstate)) ((xschema_editor)))
                        ((xmigration).xreplaces).if
                          (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xname)))) (((xmigration).xreplaces)))
                            bogusForceDataize.write (((((xself).xrecorder).xrecord_unapplied)).apply ((xapp_label)) ((xname)))
                        bogusForceDataize.write (((((xself).xrecorder).xrecord_unapplied)).apply (((xmigration).xapp_label)) (((xmigration).xname)))
                        ((xself).xprogress_callback).if
                          bogusForceDataize.write ((((xself).xprogress_callback)).apply ("unapply_success") ((xmigration)) ((xfake)))
                        (((unsupported)).apply ((xstate)))
                xcheck_replacements.write
                  [xself]
                    memory > xapplied
                    memory > xall_applied
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xapplied.write (((((xself).xrecorder).xapplied_migrations)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) (((((((xself).xloader).xreplacements).xitems)).apply)))
                          seq
                            xall_applied.write (((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((xapplied)))) ((xm)) (((xmigration).xreplaces)))))
                            ((xall_applied).and (((unsupported)).apply ((xkey)) ((xapplied)))).if
                              bogusForceDataize.write (((((xself).xrecorder).xrecord_applied)).apply ((((unsupported)).apply ((xkey)))))
                xdetect_soft_applied.write
                  [xself xproject_state xmigration]
                    memory > xfield
                    memory > xdb_table
                    memory > xtable
                    memory > xafter_state
                    memory > xapps
                    memory > xcolumn_name
                    memory > xfold_identifier_case
                    memory > xfield_column
                    memory > xthrough_db_table
                    memory > xshould_skip_detecting_model
                    memory > xfound_create_model_migration
                    memory > xexisting_table_names
                    memory > xmodel
                    memory > xcolumns
                    memory > xfound_add_field_migration
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xshould_skip_detecting_model.write
                          [xmigration xmodel]
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((((xmodel).x_meta).xproxy).or ((((xmodel).x_meta).xmanaged).not)).or ((((unsupported)).apply (((xrouter).xallow_migrate)) ((((xself).xconnection).xalias)) (((xmigration).xapp_label)) ((((xmodel).x_meta).xmodel_name))).not))))
                        (((unsupported)).apply (((xmigration).xinitial)) ("None: is there a None literal in the EO language?")).if
                          (((xany)).apply ((((unsupported)).apply (((xapp).eq ((xmigration).xapp_label))) ((((unsupported)).apply ((xapp)) ((xname)))) (((xmigration).xdependencies))))).if
                            (((unsupported)).apply ((((unsupported)).apply (FALSE) ((xproject_state)))))
                          (((unsupported)).apply (((xmigration).xinitial)) (FALSE)).if
                            (((unsupported)).apply ((((unsupported)).apply (FALSE) ((xproject_state)))))
                        (((unsupported)).apply ((xproject_state)) ("None: is there a None literal in the EO language?")).if
                          xafter_state.write (((unsupported)).apply ((((xself).xloader).xproject_state)) ((((unsupported)).apply (((xmigration).xapp_label)) (((xmigration).xname)))) (TRUE))
                          xafter_state.write ((((xmigration).xmutate_state)).apply ((xproject_state)))
                        xapps.write ((xafter_state).xapps)
                        xfound_create_model_migration.write FALSE
                        xfound_add_field_migration.write FALSE
                        xfold_identifier_case.write ((((xself).xconnection).xfeatures).xignores_table_name_case)
                        (((unsupported)).apply ((((((xself).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            xexisting_table_names.write (((xset)).apply (((((((xself).xconnection).xintrospection).xtable_names)).apply ((xcursor)))))
                            (xfold_identifier_case).if
                              xexisting_table_names.write (((unsupported)).apply (((((xname).xcasefold)).apply)) ((xname)) ((xexisting_table_names)))
                        (((unsupported)).apply ((xoperation)) (((xmigration).xoperations)))
                          (((xisinstance)).apply ((xoperation)) (((xmigrations).xCreateModel))).if
                            seq
                              xmodel.write ((((xapps).xget_model)).apply (((xmigration).xapp_label)) (((xoperation).xname)))
                              (((xmodel).x_meta).xswapped).if
                                xmodel.write ((((xglobal_apps).xget_model)).apply ((((xmodel).x_meta).xswapped)))
                              (((xshould_skip_detecting_model)).apply ((xmigration)) ((xmodel))).if
                                (((unsupported)).apply)
                              xdb_table.write (((xmodel).x_meta).xdb_table)
                              (xfold_identifier_case).if
                                xdb_table.write ((((xdb_table).xcasefold)).apply)
                              (((unsupported)).apply ((xdb_table)) ((xexisting_table_names))).if
                                (((unsupported)).apply ((((unsupported)).apply (FALSE) ((xproject_state)))))
                              xfound_create_model_migration.write TRUE
                            (((xisinstance)).apply ((xoperation)) (((xmigrations).xAddField))).if
                              seq
                                xmodel.write ((((xapps).xget_model)).apply (((xmigration).xapp_label)) (((xoperation).xmodel_name)))
                                (((xmodel).x_meta).xswapped).if
                                  xmodel.write ((((xglobal_apps).xget_model)).apply ((((xmodel).x_meta).xswapped)))
                                (((xshould_skip_detecting_model)).apply ((xmigration)) ((xmodel))).if
                                  (((unsupported)).apply)
                                xtable.write (((xmodel).x_meta).xdb_table)
                                xfield.write (((((xmodel).x_meta).xget_field)).apply (((xoperation).xname)))
                                ((xfield).xmany_to_many).if
                                  seq
                                    xthrough_db_table.write (((((xfield).xremote_field).xthrough).x_meta).xdb_table)
                                    (xfold_identifier_case).if
                                      xthrough_db_table.write ((((xthrough_db_table).xcasefold)).apply)
                                    (((unsupported)).apply ((xthrough_db_table)) ((xexisting_table_names))).if
                                      (((unsupported)).apply ((((unsupported)).apply (FALSE) ((xproject_state)))))
                                      seq
                                        xfound_add_field_migration.write TRUE
                                        (((unsupported)).apply)
                                (((unsupported)).apply ((((((xself).xconnection).xcursor)).apply)) ((xcursor)))
                                  xcolumns.write ((((((xself).xconnection).xintrospection).xget_table_description)).apply ((xcursor)) ((xtable)))
                                (((unsupported)).apply ((xcolumn)) ((xcolumns)))
                                  seq
                                    xfield_column.write ((xfield).xcolumn)
                                    xcolumn_name.write ((xcolumn).xname)
                                    (xfold_identifier_case).if
                                      seq
                                        xcolumn_name.write ((((xcolumn_name).xcasefold)).apply)
                                        xfield_column.write ((((xfield_column).xcasefold)).apply)
                                    ((xcolumn_name).eq (xfield_column)).if
                                      seq
                                        xfound_add_field_migration.write TRUE
                                        (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply (FALSE) ((xproject_state)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xfound_create_model_migration).or (xfound_add_field_migration))) ((xafter_state)))))