memory > xfileobj
memory > xlist
memory > xResourceWarning
memory > xrange
memory > xref
memory > xhasattr
memory > xfiles
memory > xiter
memory > xenv
memory > xd
memory > xcm
memory > xscript_helper
memory > xAttributeError
memory > xfd
memory > xrc
memory > xc
memory > xmode
memory > xfd1
memory > xenumerate
memory > xfd2
memory > xValueError
memory > xsignal
memory > xerrno
memory > xTestBadTempdir
memory > xstr
memory > xio
memory > xout
memory > xNotADirectoryError
memory > xstat
memory > xwarnings
memory > xname1
memory > xfile
memory > xFileNotFoundError
memory > xour_temp_directory
memory > xnbase
memory > xl
memory > xdirs
memory > x_tempdir
memory > xtempfile
memory > xRuntimeWarning
memory > xread_fd
memory > xndir
memory > xopen
memory > xmodules
memory > xpathlib
memory > xtype
memory > xf
memory > xre
memory > xname2
memory > xnonexistent
memory > xi
memory > xsuper
memory > xs
memory > xsupport
memory > xsys
memory > xbytes
memory > xnames
memory > xargs
memory > xOSError
memory > xmock
memory > xos
memory > xdir
memory > xwrite_fd
memory > xenvname
memory > xweakref
memory > xmod
memory > xPermissionError
memory > xformat
memory > x__file__
memory > xname
memory > xzip
memory > xunittest
memory > xnext
memory > xorig_open
memory > xBaseTestCase
memory > xkwargs
memory > xisinstance
memory > xNameError
memory > xlen
memory > xroot
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_tempfile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_multiple_close_before_rollover
        memory > xtest_exports
        memory > xtest_infer_return_type_pathlib
        memory > xtest_mode_and_encoding
        memory > xtest_no_files_left_behind
        memory > xtest_fileno
        memory > x_inside_empty_temp_dir
        memory > xtest_cleanup_with_symlink_to_a_directory
        memory > xtest_iter
        memory > xtest_collision_with_existing_directory
        memory > x_mock_candidate_names
        memory > xtest_del_on_close
        memory > xtest_textmode
        memory > xtest_bad_mode
        memory > xtest_rewrite_small
        memory > xtest_file_mode
        memory > xdo_create2
        memory > xtest_context_manager_during_rollover
        memory > xtest_writelines
        memory > xhas_spawnl
        memory > x_tflags
        memory > xtest_flags
        memory > xtest_nonexisting_directory
        memory > xtest_writelines_sequential
        memory > xtest_nonempty_list
        memory > xtest_context_manager_after_rollover
        memory > xtest_no_leak_fd
        memory > xmake_temp
        memory > xtest_noinherit
        memory > xtest_basic_with_bytes_names
        memory > xtest_directory_exists
        memory > xtest_method_lookup
        memory > xnameCheck
        memory > xstr_check
        memory > xtest_mkdtemp_failure
        memory > xtest_infer_return_type_singles
        memory > xtest_basic_many
        memory > xtest_context_manager_before_rollover
        memory > x_close
        memory > xsetUp
        memory > xtest_mode
        memory > xTEST_FILES
        memory > xhas_textmode
        memory > xtest_write_sequential
        memory > xsupports_iter
        memory > xtest_infer_return_type_multiples
        memory > x__exit__
        memory > x_unlink
        memory > x_bflags
        memory > xtest_dis_del_on_close
        memory > xtest_case_sensitive
        memory > xtest_wanted_dirs
        memory > xtest_basic
        memory > xtest_collision_with_existing_file
        memory > x__enter__
        memory > xtest_text_newline_and_encoding
        memory > xtest_exit_on_shutdown
        memory > xtest_del_on_shutdown
        memory > xtest_multiple_close
        memory > xb_check
        memory > xtest_usable_template
        memory > xtest_sparse
        memory > xtest_bound_methods
        memory > xtest_creates_named
        memory > xtest_directory_writable
        memory > xtest_context_manager
        memory > xtest_has_no_name
        memory > xtest_non_directory
        memory > x__init__
        memory > xtest_multiple_close_after_rollover
        memory > xtest_same_thing
        memory > xtest_explicit_cleanup
        memory > xtest_text_mode
        memory > xtest_warnings_on_cleanup
        memory > xdo_create
        memory > xtest_process_awareness
        memory > xtest_properties
        memory > xwrite
        memory > x__del__
        memory > xtest_del_on_collection
        memory > xtest_infer_return_type_multiples_and_none
        memory > xtest_retval
        memory > xtest_read_only_directory
        memory > xtest_sane_template
        memory > xtearDown
        memory > xtest_truncate_with_size_parameter
        memory > xtest_many
        memory > xtest_get_six_char_str
        memory > xtest_choose_directory
        memory > xtest_modes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xhas_textmode.write (((xtempfile).x_text_openflags).neq ((xtempfile).x_bin_openflags))
            xhas_spawnl.write (((xhasattr)).apply ((xos)) ("spawnl"))
            (((((xsys).xplatform).xstartswith)).apply ("openbsd")).if
              xTEST_FILES.write 48
              xTEST_FILES.write 101
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_infer_return_type_singles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xbytes)) (((((xtempfile).x_infer_return_type)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply ("None: is there a None literal in the EO language?"))))
                xtest_infer_return_type_multiples.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xbytes)) (((((xtempfile).x_infer_return_type)).apply ("") (""))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtempfile).x_infer_return_type)).apply ("") (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtempfile).x_infer_return_type)).apply ("") (""))
                xtest_infer_return_type_multiples_and_none.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply ("None: is there a None literal in the EO language?") (""))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply ("") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xbytes)) (((((xtempfile).x_infer_return_type)).apply ("") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xbytes)) (((((xtempfile).x_infer_return_type)).apply ("None: is there a None literal in the EO language?") (""))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtempfile).x_infer_return_type)).apply ("") ("None: is there a None literal in the EO language?") (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtempfile).x_infer_return_type)).apply ("") ("None: is there a None literal in the EO language?") (""))
                xtest_infer_return_type_pathlib.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply ((xstr)) (((((xtempfile).x_infer_return_type)).apply (((((xpathlib).xPath)).apply ("/"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xstr_check.write ((((xre).xcompile)).apply ("^[a-z0-9_-]{8}$"))
                xb_check.write ((((xre).xcompile)).apply ("^[a-z0-9_-]{8}$"))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_warnings_manager)) (((((xsupport).xcheck_warnings)).apply)))
                        bogusForceDataize.write (((((xself).x_warnings_manager).x__enter__)).apply)
                        (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("ignore") ((xRuntimeWarning)) ("mktemp") ((x__name__)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_warnings_manager).x__exit__)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xnameCheck.write
                  [xself xname xdir xpre xsuf]
                    memory > xnbase
                    memory > xnpre
                    memory > xnsuf
                    memory > xcheck
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xndir)) ((xnbase)))) ((((((xos).xpath).xsplit)).apply ((xname)))))
                        xnpre.write (((unsupported)).apply ((xnbase)) ((((unsupported)).apply ((((xlen)).apply ((xpre)))))))
                        xnsuf.write (((unsupported)).apply ((xnbase)) ((((unsupported)).apply (((((xlen)).apply ((xnbase))).sub (((xlen)).apply ((xsuf))))))))
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xname)))) ((((((unsupported)).apply ((((xtype)).apply ((xdir)))) ((xstr))).or (((xisinstance)).apply ((xdir)) (((xos).xPathLike)))).if (xstr) (xbytes))) ("unexpected return type"))
                        (((unsupported)).apply ((xpre)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xname)))) (((((unsupported)).apply ((((xtype)).apply ((xpre)))) ((xstr))).if (xstr) (xbytes))) ("unexpected return type"))
                        (((unsupported)).apply ((xsuf)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xname)))) (((((unsupported)).apply ((((xtype)).apply ((xsuf)))) ((xstr))).if (xstr) (xbytes))) ("unexpected return type"))
                        ((((unsupported)).apply ((xdir)) ((xpre)) ((xsuf))).eq (((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xname)))) ((xstr)) ("default return type must be str"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xabspath)).apply ((xndir)))) ((((((xos).xpath).xabspath)).apply ((xdir)))) (("file %r not in directory %r".mod (((unsupported)).apply ((xname)) ((xdir))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnpre)) ((xpre)) (("file %r does not begin with %r".mod (((unsupported)).apply ((xnbase)) ((xpre))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnsuf)) ((xsuf)) (("file %r does not end with %r".mod (((unsupported)).apply ((xnbase)) ((xsuf))))))
                        xnbase.write (((unsupported)).apply ((xnbase)) ((((unsupported)).apply ((((xlen)).apply ((xpre)))) (((((xlen)).apply ((xnbase))).sub (((xlen)).apply ((xsuf))))))))
                        xcheck.write ((((xisinstance)).apply ((xnbase)) ((xstr))).if ((xself).xstr_check) ((xself).xb_check))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcheck).xmatch)).apply ((xnbase)))) (("random characters %r do not match %r".mod (((unsupported)).apply ((xnbase)) (((xcheck).xpattern))))))
            (((unsupported)).apply ((xBaseTestCase)))
              xtest_exports.write
                [xself]
                  memory > xdict
                  memory > xexpected
                  memory > xunexp
                  seq > @
                    seq
                      xdict.write ((xtempfile).x__dict__)
                      xexpected.write (((unsupported)).apply ("NamedTemporaryFile") (1) ("TemporaryFile") (1) ("mkstemp") (1) ("mkdtemp") (1) ("mktemp") (1) ("TMP_MAX") (1) ("gettempprefix") (1) ("gettempprefixb") (1) ("gettempdir") (1) ("gettempdirb") (1) ("tempdir") (1) ("template") (1) ("SpooledTemporaryFile") (1) ("TemporaryDirectory") (1))
                      xunexp.write (((unsupported)).apply)
                      (((unsupported)).apply ((xkey)) ((xdict)))
                        (((((unsupported)).apply ((xkey)) (0)).neq "_").and (((unsupported)).apply ((xkey)) ((xexpected)))).if
                          bogusForceDataize.write ((((xunexp).xappend)).apply ((xkey)))
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply ((xunexp))).eq 0)) (("unexpected keys: %s".mod (xunexp))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xr)) (((((xtempfile).x_RandomNameSequence)).apply)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xtest_get_six_char_str.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xnext)).apply (((xself).xr)))
                        bogusForceDataize.write ((((xself).xnameCheck)).apply ((xs)) ("") ("") (""))
                xtest_many.write
                  [xself]
                    memory > xdict
                    memory > xs
                    memory > xr
                    seq > @
                      seq
                        xdict.write (((unsupported)).apply)
                        xr.write ((xself).xr)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xTEST_FILES)))))
                          seq
                            xs.write (((xnext)).apply ((xr)))
                            bogusForceDataize.write ((((xself).xnameCheck)).apply ((xs)) ("") ("") (""))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xs)) ((xdict)))
                            (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xs)))) (2))
                xsupports_iter.write
                  [xself]
                    memory > xr
                    memory > xi
                    seq > @
                      seq
                        xi.write 1
                        xr.write ((xself).xr)
                        (((unsupported)).apply ((xs)) ((xr)))
                          seq
                            (((unsupported)).apply ((xi)) (2))
                            ((xi).eq 20).if
                              (((unsupported)).apply)
                xtest_process_awareness.write
                  [xself]
                    memory > xparent_value
                    memory > xpid
                    memory > xchild_value
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xread_fd)) ((xwrite_fd)))) (((((xos).xpipe)).apply)))
                        xpid.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          seq
                            xpid.write ((((xos).xfork)).apply)
                            ((xpid).not).if
                              seq
                                bogusForceDataize.write ((((xos).xclose)).apply ((xread_fd)))
                                bogusForceDataize.write ((((xos).xwrite)).apply ((xwrite_fd)) (((((((xnext)).apply (((xself).xr))).xencode)).apply ("ascii"))))
                                bogusForceDataize.write ((((xos).xclose)).apply ((xwrite_fd)))
                                bogusForceDataize.write ((((xos).x_exit)).apply (0))
                            xparent_value.write (((xnext)).apply (((xself).xr)))
                            xchild_value.write (((((((xos).xread)).apply ((xread_fd)) ((((xlen)).apply ((xparent_value))))).xdecode)).apply ("ascii"))
                          seq
                            (xpid).if
                              seq
                                (((unsupported)).apply ((xOSError)))
                                  bogusForceDataize.write ((((xos).xkill)).apply ((xpid)) (((xsignal).xSIGKILL)))
                                bogusForceDataize.write ((((xos).xwaitpid)).apply ((xpid)) (0))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xread_fd)))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xwrite_fd)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xchild_value)) ((xparent_value)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_nonempty_list.write
                  [xself]
                    memory > xcand
                    seq > @
                      seq
                        xcand.write ((((xtempfile).x_candidate_tempdir_list)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xlen)).apply ((xcand))).eq 0)))
                        (((unsupported)).apply ((xc)) ((xcand)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xstr)))
                xtest_wanted_dirs.write
                  [xself]
                    memory > xcand
                    memory > xdirname
                    seq > @
                      (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                        seq
                          (((unsupported)).apply ((xenvname)) ((((unsupported)).apply ("TMPDIR") ("TEMP") ("TMP"))))
                            seq
                              xdirname.write ((((xos).xgetenv)).apply ((xenvname)))
                              ((xdirname).not).if
                                (((unsupported)).apply ((((unsupported)).apply ((xenv)) ((xenvname)))) ((((((xos).xpath).xabspath)).apply ((xenvname)))))
                          xcand.write ((((xtempfile).x_candidate_tempdir_list)).apply)
                          (((unsupported)).apply ((xenvname)) ((((unsupported)).apply ("TMPDIR") ("TEMP") ("TMP"))))
                            seq
                              xdirname.write ((((xos).xgetenv)).apply ((xenvname)))
                              ((xdirname).not).if
                                (((unsupported)).apply ((xValueError)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((xdirname)) ((xcand)))
                          (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xOSError)))))
                            xdirname.write ((((xos).xgetcwd)).apply)
                            xdirname.write ((xos).xcurdir)
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xdirname)) ((xcand)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_no_files_left_behind.write
                  [xself]
                    memory > xour_candidate_list
                    memory > xbad_writer
                    memory > xraise_OSError
                    seq > @
                      (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xour_temp_directory)))
                        seq
                          xour_candidate_list.write
                            []
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply ((xour_temp_directory)))))
                          (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtempfile)) ("_candidate_tempdir_list") ((xour_candidate_list)))))
                            seq
                              bogusForceDataize.write ((((xtempfile).x_get_default_tempdir)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply ((xour_temp_directory)))) ((((unsupported)).apply)))
                              xraise_OSError.write
                                []
                                  seq > @
                                    (((unsupported)).apply)
                                      (((unsupported)).apply ((((xOSError)).apply)))
                              (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xio)) ("open") ((xraise_OSError)))))
                                seq
                                  (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))))
                                    bogusForceDataize.write ((((xtempfile).x_get_default_tempdir)).apply)
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply ((xour_temp_directory)))) ((((unsupported)).apply)))
                              xbad_writer.write
                                []
                                  memory > xfp
                                  seq > @
                                    (((unsupported)).apply)
                                      xfp.write (((xorig_open)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                      (((unsupported)).apply (((xfp).xwrite)) ((xraise_OSError)))
                                      (((unsupported)).apply ((xfp)))
                              (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xio)) ("open") ((xbad_writer)))) ((xorig_open)))
                                seq
                                  (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))))
                                    bogusForceDataize.write ((((xtempfile).x_get_default_tempdir)).apply)
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply ((xour_temp_directory)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_retval.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((((xtempfile).x_get_candidate_names)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xobj)) (((xtempfile).x_RandomNameSequence)))
                xtest_same_thing.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xtempfile).x_get_candidate_names)).apply)
                        xb.write ((((xtempfile).x_get_candidate_names)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xa)) ((xb)))))
            x_inside_empty_temp_dir.write
              []
                memory > xdir
                seq > @
                  (((unsupported)).apply)
                    xdir.write ((((xtempfile).xmkdtemp)).apply)
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtempfile)) ("tempdir") ((xdir)))))
                        (((unsupported)).apply)
                      bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xdir)))
            x_mock_candidate_names.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtempfile)) ("_get_candidate_names") ((((unsupported)).apply ((((xiter)).apply ((xnames)))))))))
            (((unsupported)).apply)
              seq
                xtest_read_only_directory.write
                  [xself]
                    memory > xoldmode
                    memory > xmode
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)))
                        seq
                          (((unsupported)).apply ((xoldmode)) ((xmode)) ((((((xos).xstat)).apply (((xtempfile).xtempdir))).xst_mode)))
                          (((unsupported)).apply ((xmode)) ((((((xstat).xS_IWUSR).or ((xstat).xS_IWGRP)).or ((xstat).xS_IWOTH)).neg)))
                          bogusForceDataize.write ((((xos).xchmod)).apply (((xtempfile).xtempdir)) ((xmode)))
                          (((unsupported)).apply)
                            seq
                              ((((xos).xaccess)).apply (((xtempfile).xtempdir)) (((xos).xW_OK))).if
                                bogusForceDataize.write ((((xself).xskipTest)).apply ("can't set the directory read-only"))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xPermissionError)))))
                                bogusForceDataize.write ((((xself).xmake_temp)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply (((xtempfile).xtempdir)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xos).xchmod)).apply (((xtempfile).xtempdir)) ((xoldmode)))
                xtest_nonexisting_directory.write
                  [xself]
                    memory > xtempdir
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)))
                        seq
                          xtempdir.write (((((xos).xpath).xjoin)).apply (((xtempfile).xtempdir)) ("nonexistent"))
                          (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtempfile)) ("tempdir") ((xtempdir)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))))
                              bogusForceDataize.write ((((xself).xmake_temp)).apply)
                xtest_non_directory.write
                  [xself]
                    memory > xtempdir
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)))
                        seq
                          xtempdir.write (((((xos).xpath).xjoin)).apply (((xtempfile).xtempdir)) ("file"))
                          bogusForceDataize.write ((((((xopen)).apply ((xtempdir)) ("wb")).xclose)).apply)
                          (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtempfile)) ("tempdir") ((xtempdir)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xNotADirectoryError)) ((xFileNotFoundError)))))))
                              bogusForceDataize.write ((((xself).xmake_temp)).apply)
            (((unsupported)).apply ((xTestBadTempdir)) ((xBaseTestCase)))
              seq
                unsupported
                (((unsupported)).apply)
                  seq
                    x_bflags.write ((xtempfile).x_bin_openflags)
                    x_tflags.write ((xtempfile).x_text_openflags)
                    x_close.write ((xos).xclose)
                    x_unlink.write ((xos).xunlink)
                    x__init__.write
                      [xself xdir xpre xsuf xbin]
                        memory > xoutput_type
                        memory > xflags
                        seq > @
                          seq
                            (xbin).if
                              xflags.write ((xself).x_bflags)
                              xflags.write ((xself).x_tflags)
                            xoutput_type.write ((((xtempfile).x_infer_return_type)).apply ((xdir)) ((xpre)) ((xsuf)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xfd)) (((xself).xname)))) (((((xtempfile).x_mkstemp_inner)).apply ((xdir)) ((xpre)) ((xsuf)) ((xflags)) ((xoutput_type)))))
                    xwrite.write
                      [xself xstr]
                        seq > @
                          bogusForceDataize.write ((((xos).xwrite)).apply (((xself).xfd)) ((xstr)))
                    x__del__.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).x_close)).apply (((xself).xfd)))
                            bogusForceDataize.write ((((xself).x_unlink)).apply (((xself).xname)))
                xdo_create.write
                  [xself xdir xpre xsuf xbin]
                    memory > xfile
                    memory > xoutput_type
                    seq > @
                      (((unsupported)).apply)
                        xoutput_type.write ((((xtempfile).x_infer_return_type)).apply ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xoutput_type)) ((xstr))).if
                            xdir.write ((((xtempfile).xgettempdir)).apply)
                            xdir.write ((((xtempfile).xgettempdirb)).apply)
                        (((unsupported)).apply ((xpre)) ("None: is there a None literal in the EO language?")).if
                          xpre.write (((xoutput_type)).apply)
                        (((unsupported)).apply ((xsuf)) ("None: is there a None literal in the EO language?")).if
                          xsuf.write (((xoutput_type)).apply)
                        xfile.write ((((xself).xmkstemped)).apply ((xdir)) ((xpre)) ((xsuf)) ((xbin)))
                        bogusForceDataize.write ((((xself).xnameCheck)).apply (((xfile).xname)) ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xfile)))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((((xself).xdo_create)).apply).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ("a")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ("b")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ("a") ("b")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ("aa") (".txt")).xwrite)).apply ("blat"))
                xtest_basic_with_bytes_names.write
                  [xself]
                    memory > xdir_b
                    seq > @
                      seq
                        xdir_b.write ((((xtempfile).xgettempdirb)).apply)
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("a")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("b")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("a") ("b")).xwrite)).apply ("blat"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("aa") (".txt")).xwrite)).apply ("blat"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ("") ("")).xwrite)).apply ("blat"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("")).xwrite)).apply ("blat"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir_b)) ("") ("")).xwrite)).apply ("blat"))
                xtest_basic_many.write
                  [xself]
                    memory > xextant
                    seq > @
                      seq
                        xextant.write (((xlist)).apply ((((xrange)).apply ((xTEST_FILES)))))
                        (((unsupported)).apply ((xi)) ((xextant)))
                          (((unsupported)).apply ((((unsupported)).apply ((xextant)) ((xi)))) ((((unsupported)).apply (((xself).xdo_create)) ("aa"))))
                xtest_choose_directory.write
                  [xself]
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) ((xdir))).xwrite)).apply ("blat"))
                            bogusForceDataize.write ((((((unsupported)).apply (((xself).xdo_create)) (((((xpathlib).xPath)).apply ((xdir))))).xwrite)).apply ("blat"))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_file_mode.write
                  [xself]
                    memory > xfile
                    memory > xexpected
                    memory > xuser
                    memory > xmode
                    seq > @
                      seq
                        xfile.write ((((xself).xdo_create)).apply)
                        xmode.write ((((xstat).xS_IMODE)).apply ((((((xos).xstat)).apply (((xfile).xname))).xst_mode)))
                        xexpected.write 385
                        (((xsys).xplatform).eq "win32").if
                          seq
                            xuser.write (((unsupported)).apply ((xexpected)) (6))
                            xexpected.write ((xuser).mul ((1.add 8).add 64))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmode)) ((xexpected)))
                xtest_noinherit.write
                  [xself]
                    memory > xdecorated
                    memory > xtester
                    memory > xfd
                    memory > xfile
                    memory > xme
                    memory > xretval
                    memory > xv
                    seq > @
                      (((unsupported)).apply)
                        ((xsupport).xverbose).if
                          xv.write "v"
                          xv.write "q"
                        xfile.write ((((xself).xdo_create)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xget_inheritable)).apply (((xfile).xfd)))) (FALSE))
                        xfd.write ("%d".mod ((xfile).xfd))
                        (((unsupported)).apply ((xNameError)))
                          xme.write (x__file__)
                          xme.write (((unsupported)).apply (((xsys).xargv)) (0))
                        xtester.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((((((xos).xpath).xabspath)).apply ((xme)))))) ("tf_inherit_check.py"))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            xdecorated.write ("\"%s\"".mod ((xsys).xexecutable))
                            xtester.write ("\"%s\"".mod (xtester))
                          xdecorated.write ((xsys).xexecutable)
                        xretval.write ((((xos).xspawnl)).apply (((xos).xP_WAIT)) (((xsys).xexecutable)) ((xdecorated)) ((xtester)) ((xv)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xretval).less 0)) (("child process caught fatal signal %d".mod ((xretval).neg))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xretval).greater 0)) (("child process reports failure %d".mod (xretval))))
                xtest_textmode.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (0))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("blatx1a"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("extran"))
                        bogusForceDataize.write ((((xos).xlseek)).apply (((xf).xfd)) (0) (((xos).xSEEK_SET)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xread)).apply (((xf).xfd)) (20))) ("blat"))
                xmake_temp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtempfile).x_mkstemp_inner)).apply (((((xtempfile).xgettempdir)).apply)) (((((xtempfile).xgettempprefix)).apply)) ("") (((xtempfile).x_bin_openflags)) ((xstr)))))
                xtest_collision_with_existing_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)) ((((x_mock_candidate_names)).apply ("aaa") ("aaa") ("bbb"))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xfd1)) ((xname1)))) (((((xself).xmake_temp)).apply)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd1)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xname1).xendswith)).apply ("aaa"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xfd2)) ((xname2)))) (((((xself).xmake_temp)).apply)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd2)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xname2).xendswith)).apply ("bbb"))))
                xtest_collision_with_existing_directory.write
                  [xself]
                    memory > xdir
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)) ((((x_mock_candidate_names)).apply ("aaa") ("aaa") ("bbb"))))
                        seq
                          xdir.write ((((xtempfile).xmkdtemp)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xdir).xendswith)).apply ("aaa"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xfd)) ((xname)))) (((((xself).xmake_temp)).apply)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xname).xendswith)).apply ("bbb"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_sane_template.write
                  [xself]
                    memory > xpb
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xtempfile).xgettempprefix)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xp)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xp)))) (0))
                        xpb.write ((((xtempfile).xgettempprefixb)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpb)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xpb)))) (0))
                xtest_usable_template.write
                  [xself]
                    memory > xd
                    memory > xp
                    memory > xfd
                    seq > @
                      seq
                        xp.write (((((xtempfile).xgettempprefix)).apply).add "xxxxxx.xxx")
                        xd.write (((unsupported)).apply (((xtempfile).xmkdtemp)) (""))
                        (((unsupported)).apply)
                          seq
                            xp.write (((((xos).xpath).xjoin)).apply ((xd)) ((xp)))
                            xfd.write ((((xos).xopen)).apply ((xp)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xp)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xd)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_directory_exists.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xd)) ((((unsupported)).apply (((((xtempfile).xgettempdir)).apply)) (((((xtempfile).xgettempdirb)).apply)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xos).xpath).xisabs)).apply ((xd))).or ((xd).eq ((xos).xcurdir)))) (("%r is not an absolute path".mod (xd))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisdir)).apply ((xd)))) (("%r is not a directory".mod (xd))))
                xtest_directory_writable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtempfile).xNamedTemporaryFile)).apply)) ((xfile)))
                        bogusForceDataize.write ((((xfile).xwrite)).apply ("blat"))
                xtest_same_thing.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xtempfile).xgettempdir)).apply)
                        xb.write ((((xtempfile).xgettempdir)).apply)
                        xc.write ((((xtempfile).xgettempdirb)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xos).xfsdecode)).apply ((xc)))))
                xtest_case_sensitive.write
                  [xself]
                    memory > xcase_sensitive_tempdir
                    seq > @
                      seq
                        xcase_sensitive_tempdir.write ((((xtempfile).xmkdtemp)).apply ("-Temp"))
                        (((unsupported)).apply ((((unsupported)).apply ((x_tempdir)) (((xtempfile).xtempdir)))) ((((unsupported)).apply (((xtempfile).xtempdir)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("TMPDIR"))) ((xcase_sensitive_tempdir)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtempfile).xgettempdir)).apply)) ((xcase_sensitive_tempdir)))
                          seq
                            (((unsupported)).apply (((xtempfile).xtempdir)) ((x_tempdir)))
                            bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xcase_sensitive_tempdir)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xdo_create.write
                  [xself xdir xpre xsuf]
                    memory > xoutput_type
                    memory > xadir
                    seq > @
                      (((unsupported)).apply)
                        xoutput_type.write ((((xtempfile).x_infer_return_type)).apply ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xoutput_type)) ((xstr))).if
                            xdir.write ((((xtempfile).xgettempdir)).apply)
                            xdir.write ((((xtempfile).xgettempdirb)).apply)
                        (((unsupported)).apply ((xpre)) ("None: is there a None literal in the EO language?")).if
                          xpre.write (((xoutput_type)).apply)
                        (((unsupported)).apply ((xsuf)) ("None: is there a None literal in the EO language?")).if
                          xsuf.write (((xoutput_type)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfd)) ((xname)))) ((((unsupported)).apply (((xtempfile).xmkstemp)) ((xdir)) ((xpre)) ((xsuf)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xndir)) ((xnbase)))) ((((((xos).xpath).xsplit)).apply ((xname)))))
                        xadir.write (((((xos).xpath).xabspath)).apply ((xdir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xadir)) ((xndir)) (("Directory '%s' incorrectly returned as '%s'".mod (((unsupported)).apply ((xadir)) ((xndir))))))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xnameCheck)).apply ((xname)) ((xdir)) ((xpre)) ((xsuf)))
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xname)))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_create)).apply)
                        (((unsupported)).apply (((xself).xdo_create)) ("a"))
                        (((unsupported)).apply (((xself).xdo_create)) ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("a") ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("aa") (".txt"))
                        (((unsupported)).apply (((xself).xdo_create)) ("."))
                xtest_basic_with_bytes_names.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xtempfile).xgettempdirb)).apply)
                        (((unsupported)).apply (((xself).xdo_create)) ((xd)) (""))
                        (((unsupported)).apply (((xself).xdo_create)) ((xd)) ("a"))
                        (((unsupported)).apply (((xself).xdo_create)) ((xd)) ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ((xd)) ("a") ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ((xd)) ("aa") (".txt"))
                        (((unsupported)).apply (((xself).xdo_create)) ("."))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xdo_create)) (".") ("aa") (".txt"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xdo_create)) (".") ("aa") (".txt"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xdo_create)) (".") ("aa") (".txt"))
                xtest_choose_directory.write
                  [xself]
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xself).xdo_create)) ((xdir)))
                            (((unsupported)).apply (((xself).xdo_create)) (((((xpathlib).xPath)).apply ((xdir)))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
            (((unsupported)).apply ((xTestBadTempdir)) ((xBaseTestCase)))
              seq
                unsupported
                xmake_temp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtempfile).xmkdtemp)).apply)))
                xdo_create.write
                  [xself xdir xpre xsuf]
                    memory > xname
                    memory > xoutput_type
                    seq > @
                      (((unsupported)).apply)
                        xoutput_type.write ((((xtempfile).x_infer_return_type)).apply ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xoutput_type)) ((xstr))).if
                            xdir.write ((((xtempfile).xgettempdir)).apply)
                            xdir.write ((((xtempfile).xgettempdirb)).apply)
                        (((unsupported)).apply ((xpre)) ("None: is there a None literal in the EO language?")).if
                          xpre.write (((xoutput_type)).apply)
                        (((unsupported)).apply ((xsuf)) ("None: is there a None literal in the EO language?")).if
                          xsuf.write (((xoutput_type)).apply)
                        xname.write (((unsupported)).apply (((xtempfile).xmkdtemp)) ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xnameCheck)).apply ((xname)) ((xdir)) ((xpre)) ((xsuf)))
                            (((unsupported)).apply ((xname)))
                          seq
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((xname)))
                            (((unsupported)).apply)
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xrmdir)).apply (((((xself).xdo_create)).apply)))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ("a"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ("b"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ("a") ("b"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ("aa") (".txt"))))
                xtest_basic_with_bytes_names.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xtempfile).xgettempdirb)).apply)
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("a"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("b"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("a") ("b"))))
                        bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("aa") (".txt"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("aa") (".txt"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xd)) ("aa") (".txt"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ("") ("aa") (".txt"))))
                xtest_basic_many.write
                  [xself]
                    memory > xextant
                    seq > @
                      seq
                        xextant.write (((xlist)).apply ((((xrange)).apply ((xTEST_FILES)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xi)) ((xextant)))
                            (((unsupported)).apply ((((unsupported)).apply ((xextant)) ((xi)))) ((((unsupported)).apply (((xself).xdo_create)) ("aa"))))
                          (((unsupported)).apply ((xi)) ((xextant)))
                            (((xisinstance)).apply ((xi)) ((xstr))).if
                              bogusForceDataize.write ((((xos).xrmdir)).apply ((xi)))
                xtest_choose_directory.write
                  [xself]
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) ((xdir)))))
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((((unsupported)).apply (((xself).xdo_create)) (((((xpathlib).xPath)).apply ((xdir)))))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_mode.write
                  [xself]
                    memory > xexpected
                    memory > xuser
                    memory > xdir
                    memory > xmode
                    seq > @
                      seq
                        xdir.write ((((xself).xdo_create)).apply)
                        (((unsupported)).apply)
                          seq
                            xmode.write ((((xstat).xS_IMODE)).apply ((((((xos).xstat)).apply ((xdir))).xst_mode)))
                            (((unsupported)).apply ((xmode)) (512))
                            xexpected.write 449
                            (((xsys).xplatform).eq "win32").if
                              seq
                                xuser.write (((unsupported)).apply ((xexpected)) (6))
                                xexpected.write ((xuser).mul ((1.add 8).add 64))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmode)) ((xexpected)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_collision_with_existing_file.write
                  [xself]
                    memory > xfile
                    memory > xdir
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)) ((((x_mock_candidate_names)).apply ("aaa") ("aaa") ("bbb"))))
                        seq
                          xfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (FALSE))
                          bogusForceDataize.write ((((xfile).xclose)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xfile).xname).xendswith)).apply ("aaa"))))
                          xdir.write ((((xtempfile).xmkdtemp)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xdir).xendswith)).apply ("bbb"))))
                xtest_collision_with_existing_directory.write
                  [xself]
                    memory > xdir2
                    memory > xdir1
                    seq > @
                      (((unsupported)).apply ((((x_inside_empty_temp_dir)).apply)) ((((x_mock_candidate_names)).apply ("aaa") ("aaa") ("bbb"))))
                        seq
                          xdir1.write ((((xtempfile).xmkdtemp)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xdir1).xendswith)).apply ("aaa"))))
                          xdir2.write ((((xtempfile).xmkdtemp)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xdir2).xendswith)).apply ("bbb"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdir)) (((((xtempfile).xmkdtemp)).apply)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xdir).if
                          seq
                            bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xdir)))
                            (((unsupported)).apply (((xself).xdir)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                (((unsupported)).apply)
                  seq
                    x_unlink.write ((xos).xunlink)
                    x_bflags.write ((xtempfile).x_bin_openflags)
                    x__init__.write
                      [xself xdir xpre xsuf]
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).xname)) ((((unsupported)).apply (((xtempfile).xmktemp)) ((xdir)) ((xpre)) ((xsuf)))))
                            bogusForceDataize.write ((((xos).xclose)).apply (((((xos).xopen)).apply (((xself).xname)) (((xself).x_bflags)) (384))))
                    x__del__.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).x_unlink)).apply (((xself).xname)))
                xdo_create.write
                  [xself xpre xsuf]
                    memory > xfile
                    seq > @
                      (((unsupported)).apply)
                        xfile.write ((((xself).xmktemped)).apply (((xself).xdir)) ((xpre)) ((xsuf)))
                        bogusForceDataize.write ((((xself).xnameCheck)).apply (((xfile).xname)) (((xself).xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xfile)))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_create)).apply)
                        (((unsupported)).apply (((xself).xdo_create)) ("a"))
                        (((unsupported)).apply (((xself).xdo_create)) ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("a") ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("aa") (".txt"))
                xtest_many.write
                  [xself]
                    memory > xextant
                    seq > @
                      seq
                        xextant.write (((xlist)).apply ((((xrange)).apply ((xTEST_FILES)))))
                        (((unsupported)).apply ((xi)) ((xextant)))
                          (((unsupported)).apply ((((unsupported)).apply ((xextant)) ((xi)))) ((((unsupported)).apply (((xself).xdo_create)) ("aa"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xdo_create.write
                  [xself xdir xpre xsuf xdelete]
                    memory > xfile
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          xdir.write ((((xtempfile).xgettempdir)).apply)
                        xfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((xdir)) ((xpre)) ((xsuf)) ((xdelete)))
                        bogusForceDataize.write ((((xself).xnameCheck)).apply (((xfile).xname)) ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xfile)))
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xdo_create)).apply)
                        (((unsupported)).apply (((xself).xdo_create)) ("a"))
                        (((unsupported)).apply (((xself).xdo_create)) ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("a") ("b"))
                        (((unsupported)).apply (((xself).xdo_create)) ("aa") (".txt"))
                xtest_method_lookup.write
                  [xself]
                    memory > xwr
                    memory > xwrite2
                    memory > xf
                    memory > xwrite
                    seq > @
                      seq
                        xf.write ((((xself).xdo_create)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xf)))
                        xwrite.write ((xf).xwrite)
                        xwrite2.write ((xf).xwrite)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xf)))))))
                        bogusForceDataize.write (((xwrite)).apply ("foo"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xwrite)))))))
                        bogusForceDataize.write (((xwrite2)).apply ("bar"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xwrite2)))))))
                        (((unsupported)).apply (((xsupport).xcheck_impl_detail)) (TRUE)).if
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr)).apply)))
                xtest_iter.write
                  [xself]
                    memory > xmake_file
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("spamn") ("eggsn") ("beansn"))
                        xmake_file.write
                          []
                            memory > xf
                            seq > @
                              seq
                                xf.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ("w+b"))
                                bogusForceDataize.write ((((xf).xwrite)).apply (((("".xjoin)).apply ((xlines)))))
                                bogusForceDataize.write ((((xf).xseek)).apply (0))
                                (((unsupported)).apply ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xl)))) ((((xenumerate)).apply ((((xmake_file)).apply)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply ((xlines)) ((xi)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (((((xlen)).apply ((xlines))).sub 1)))
                xtest_creates_named.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xtempfile).xNamedTemporaryFile)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xf).xname)))) (("NamedTemporaryFile %s does not exist".mod ((xf).xname))))
                xtest_del_on_close.write
                  [xself]
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((xdir)))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ("blat"))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xf).xname)))) (("NamedTemporaryFile %s exists after close".mod ((xf).xname))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_dis_del_on_close.write
                  [xself]
                    memory > xdir
                    memory > xf
                    memory > xtmp
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        xtmp.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          seq
                            xf.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((xdir)) (FALSE))
                            xtmp.write ((xf).xname)
                            bogusForceDataize.write ((((xf).xwrite)).apply ("blat"))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xf).xname)))) (("NamedTemporaryFile %s missing after close".mod ((xf).xname))))
                          seq
                            (((unsupported)).apply ((xtmp)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xos).xunlink)).apply ((xtmp)))
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_multiple_close.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xtempfile).xNamedTemporaryFile)).apply)
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtest_context_manager.write
                  [xself]
                    memory > xuse_closed
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtempfile).xNamedTemporaryFile)).apply)) ((xf)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xf).xname)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xf).xname)))))
                        xuse_closed.write
                          []
                            seq > @
                              (((unsupported)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xuse_closed)))
                xtest_no_leak_fd.write
                  [xself]
                    memory > xclosed
                    memory > xos_close
                    memory > xclose
                    seq > @
                      seq
                        xclosed.write (((unsupported)).apply)
                        xos_close.write ((xos).xclose)
                        xclose.write
                          [xfd]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xclosed).xappend)).apply ((xfd)))
                                bogusForceDataize.write (((xos_close)).apply ((xfd)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("os.close") ((xclose)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("io.open") ((xValueError)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtempfile).xNamedTemporaryFile)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xclosed)))) (1))
                xtest_bad_mode.write
                  [xself]
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ((xdir)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ("wr") ((xdir)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (2) ((xdir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply ((xdir)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xdo_create.write
                  [xself xmax_size xdir xpre xsuf]
                    memory > xfile
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          xdir.write ((((xtempfile).xgettempdir)).apply)
                        xfile.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) ((xmax_size)) ((xdir)) ((xpre)) ((xsuf)))
                        (((unsupported)).apply ((xfile)))
                xtest_basic.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xdo_create)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (100) ("a") (".txt"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                xtest_del_on_close.write
                  [xself]
                    memory > xdir
                    memory > xf
                    memory > xfilename
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (10) ((xdir)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                            bogusForceDataize.write ((((xf).xwrite)).apply (("blat ".mul 5)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                            xfilename.write ((xf).xname)
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xisinstance)).apply ((xfilename)) ((xstr))).and (((((xos).xpath).xexists)).apply ((xfilename))))) (("SpooledTemporaryFile %s exists after close".mod (xfilename))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_rewrite_small.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (30))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          seq
                            bogusForceDataize.write ((((xf).xseek)).apply (0) (0))
                            bogusForceDataize.write ((((xf).xwrite)).apply (("x".mul 20)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                xtest_write_sequential.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (30))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xwrite)).apply (("x".mul 20)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xwrite)).apply (("x".mul 10)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                xtest_writelines.write
                  [xself]
                    memory > xpos
                    memory > xbuf
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xdo_create)).apply)
                        bogusForceDataize.write ((((xf).xwritelines)).apply ((((unsupported)).apply ("x") ("y") ("z"))))
                        xpos.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpos)) (0))
                        xbuf.write ((((xf).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuf)) ("xyz"))
                xtest_writelines_sequential.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (35))
                        bogusForceDataize.write ((((xf).xwritelines)).apply ((((unsupported)).apply (("x".mul 20)) (("x".mul 10)) (("x".mul 5)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                xtest_sparse.write
                  [xself]
                    memory > xpos
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (30))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        xpos.write ((((xf).xseek)).apply (100) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpos)) (100))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                xtest_fileno.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (30))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xf).xfileno)).apply).greater 0)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                xtest_multiple_close_before_rollover.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xtempfile).xSpooledTemporaryFile)).apply)
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtest_multiple_close_after_rollover.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (1))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtest_bound_methods.write
                  [xself]
                    memory > xseek
                    memory > xread
                    memory > xf
                    memory > xwrite
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xdo_create)) (30))
                        xread.write ((xf).xread)
                        xwrite.write ((xf).xwrite)
                        xseek.write ((xf).xseek)
                        bogusForceDataize.write (((xwrite)).apply (("a".mul 35)))
                        bogusForceDataize.write (((xwrite)).apply (("b".mul 35)))
                        bogusForceDataize.write (((xseek)).apply (0) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xread)).apply (70))) ((("a".mul 35).add ("b".mul 35))))
                xtest_properties.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (10))
                        bogusForceDataize.write ((((xf).xwrite)).apply (("x".mul 10)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("w+b"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xf).xname)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        bogusForceDataize.write ((((xf).xwrite)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("rb+"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xf).xname)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                xtest_text_mode.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) ("w+") (10) ("utf-8"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abcn"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("defn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abcndefn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xf).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xnewlines)) (((xos).xlinesep)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ("strict"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("xyzzyn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abcndefnxyzzyn"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("foox1abarn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abcndefnxyzzynfoox1abarn"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xf).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xnewlines)) (((xos).xlinesep)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ("strict"))
                xtest_text_newline_and_encoding.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) ("w+") (10) ("") ("utf-8") ("ignore"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("u039Brn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("u039Brn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xf).xname)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xf).xnewlines)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ("ignore"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ((("u039C".mul 10).add "rn")))
                        bogusForceDataize.write ((((xf).xwrite)).apply (("u039D".mul 20)))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) (((("u039Brn".add ("u039C".mul 10)).add "rn").add ("u039D".mul 20))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("w+"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xf).xname)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xf).xnewlines)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xerrors)) ("ignore"))
                xtest_context_manager_before_rollover.write
                  [xself]
                    memory > xuse_closed
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (1))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).xclosed)))
                        xuse_closed.write
                          []
                            seq > @
                              (((unsupported)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xuse_closed)))
                xtest_context_manager_during_rollover.write
                  [xself]
                    memory > xuse_closed
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (1))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                            bogusForceDataize.write ((((xf).xflush)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).xclosed)))
                        xuse_closed.write
                          []
                            seq > @
                              (((unsupported)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xuse_closed)))
                xtest_context_manager_after_rollover.write
                  [xself]
                    memory > xuse_closed
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (1))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                        bogusForceDataize.write ((((xf).xflush)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        (((unsupported)).apply ((xf)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).xclosed)))
                        xuse_closed.write
                          []
                            seq > @
                              (((unsupported)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xuse_closed)))
                xtest_truncate_with_size_parameter.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (10))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcdefgn"))
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xf).xtruncate)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).x_file).xgetvalue)).apply)) (""))
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (10))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcdefgn"))
                        bogusForceDataize.write ((((xf).xtruncate)).apply (4))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).x_file).xgetvalue)).apply)) ("abcd"))
                        xf.write (((unsupported)).apply (((xtempfile).xSpooledTemporaryFile)) (10))
                        bogusForceDataize.write ((((xf).xwrite)).apply ("abcdefgn"))
                        bogusForceDataize.write ((((xf).xtruncate)).apply (20))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).x_rolled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xfstat)).apply (((((xf).xfileno)).apply))).xst_size)) (20))
            (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (((xtempfile).xTemporaryFile))).if
              (((unsupported)).apply ((xBaseTestCase)))
                seq
                  unsupported
                  xtest_basic.write
                    [xself]
                      seq > @
                        bogusForceDataize.write ((((xtempfile).xTemporaryFile)).apply)
                  xtest_has_no_name.write
                    [xself]
                      memory > xdir
                      memory > xf
                      seq > @
                        seq
                          xdir.write ((((xtempfile).xmkdtemp)).apply)
                          xf.write (((unsupported)).apply (((xtempfile).xTemporaryFile)) ((xdir)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("blat"))
                          (((unsupported)).apply)
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                            seq
                              bogusForceDataize.write ((((xf).xclose)).apply)
                              bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                              (((unsupported)).apply)
                  xtest_multiple_close.write
                    [xself]
                      memory > xf
                      seq > @
                        seq
                          xf.write ((((xtempfile).xTemporaryFile)).apply)
                          bogusForceDataize.write ((((xf).xwrite)).apply ("abcn"))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          bogusForceDataize.write ((((xf).xclose)).apply)
                  xtest_mode_and_encoding.write
                    [xself]
                      memory > xroundtrip
                      seq > @
                        seq
                          xroundtrip.write
                            [xinput]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xfileobj)))
                                    seq
                                      bogusForceDataize.write ((((xfileobj).xwrite)).apply ((xinput)))
                                      bogusForceDataize.write ((((xfileobj).xseek)).apply (0))
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xinput)) (((((xfileobj).xread)).apply)))
                          bogusForceDataize.write (((xroundtrip)).apply ("1234") ("w+b"))
                          bogusForceDataize.write (((xroundtrip)).apply ("abdcn") ("w+"))
                          (((unsupported)).apply ((xroundtrip)) ("u039B") ("w+") ("utf-16"))
                          (((unsupported)).apply ((xroundtrip)) ("foorn") ("w+") (""))
                  xtest_no_leak_fd.write
                    [xself]
                      memory > xclosed
                      memory > xos_close
                      memory > xclose
                      seq > @
                        seq
                          xclosed.write (((unsupported)).apply)
                          xos_close.write ((xos).xclose)
                          xclose.write
                            [xfd]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xclosed).xappend)).apply ((xfd)))
                                  bogusForceDataize.write (((xos_close)).apply ((xfd)))
                          (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("os.close") ((xclose)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("io.open") ((xValueError)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtempfile).xTemporaryFile)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xclosed)))) (1))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xrefs)) ((((unsupported)).apply (((xmod).x__dict__)) ((xmod)) ((xmodules)))))
                        (((unsupported)).apply (((xself).xcontents)) ((((unsupported)).apply (((((xref).xcopy)).apply)) ((xref)) (((xself).xrefs)))))
                x__enter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xd)) (((xself).xrefs)))
                        (((unsupported)).apply ((xkey)) ((xd)))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xkey)))) ("None: is there a None literal in the EO language?"))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xc)))) ((((xzip)).apply (((xself).xrefs)) (((xself).xcontents)))))
                          seq
                            bogusForceDataize.write ((((xd).xclear)).apply)
                            bogusForceDataize.write ((((xd).xupdate)).apply ((xc)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xdo_create.write
                  [xself xdir xpre xsuf xrecurse xdirs xfiles]
                    memory > xtmp
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdir)) ("None: is there a None literal in the EO language?")).if
                          xdir.write ((((xtempfile).xgettempdir)).apply)
                        xtmp.write (((unsupported)).apply (((xtempfile).xTemporaryDirectory)) ((xdir)) ((xpre)) ((xsuf)))
                        bogusForceDataize.write ((((xself).xnameCheck)).apply (((xtmp).xname)) ((xdir)) ((xpre)) ((xsuf)))
                        bogusForceDataize.write ((((xself).xdo_create2)).apply (((xtmp).xname)) ((xrecurse)) ((xdirs)) ((xfiles)))
                        (((unsupported)).apply ((xtmp)))
                xdo_create2.write
                  [xself xpath xrecurse xdirs xfiles]
                    memory > xname
                    seq > @
                      (((unsupported)).apply)
                        (xrecurse).if
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xdirs)))))
                            seq
                              xname.write (((((xos).xpath).xjoin)).apply ((xpath)) (("dir%d".mod (xi))))
                              bogusForceDataize.write ((((xos).xmkdir)).apply ((xname)))
                              bogusForceDataize.write ((((xself).xdo_create2)).apply ((xname)) (((xrecurse).sub 1)) ((xdirs)) ((xfiles)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xfiles)))))
                          (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpath)) (("test%d.txt".mod (xi))))) ("wb"))) ((xf)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("Hello world!"))
                xtest_mkdtemp_failure.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xnonexistent)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))) ((xcm)))
                          (((unsupported)).apply (((xtempfile).xTemporaryDirectory)) ((xnonexistent)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                xtest_explicit_cleanup.write
                  [xself]
                    memory > xd
                    memory > xdir
                    seq > @
                      seq
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            xd.write (((unsupported)).apply (((xself).xdo_create)) ((xdir)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xd).xname)))) (("TemporaryDirectory %s does not exist".mod ((xd).xname))))
                            bogusForceDataize.write ((((xd).xcleanup)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xd).xname)))) (("TemporaryDirectory %s exists after cleanup".mod ((xd).xname))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_cleanup_with_symlink_to_a_directory.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    seq > @
                      (((unsupported)).apply)
                        xd1.write ((((xself).xdo_create)).apply)
                        xd2.write (((unsupported)).apply (((xself).xdo_create)) (0))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xd2).xname)) ((((((xos).xpath).xjoin)).apply (((xd1).xname)) ("foo"))))
                        bogusForceDataize.write ((((xd1).xcleanup)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xd1).xname)))) (("TemporaryDirectory %s exists after cleanup".mod ((xd1).xname))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((xd2).xname)))) ("Directory pointed to by a symlink was deleted"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply (((xd2).xname)))) ((((unsupported)).apply ("test0.txt"))) ("Contents of the directory pointed to by a symlink were deleted"))
                        bogusForceDataize.write ((((xd2).xcleanup)).apply)
                xtest_del_on_collection.write
                  [xself]
                    memory > xname
                    memory > xd
                    memory > xdir
                    seq > @
                      (((unsupported)).apply)
                        xdir.write ((((xtempfile).xmkdtemp)).apply)
                        (((unsupported)).apply)
                          seq
                            xd.write (((unsupported)).apply (((xself).xdo_create)) ((xdir)))
                            xname.write ((xd).xname)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)))))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xname)))) (("TemporaryDirectory %s exists after __del__".mod (xname))))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xdir)))
                xtest_del_on_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xerr
                    memory > xtmp_name
                    seq > @
                      (((unsupported)).apply (((((xself).xdo_create)).apply)) ((xdir)))
                        (((unsupported)).apply ((xmod)) ((((unsupported)).apply ("builtins") ("os") ("shutil") ("sys") ("tempfile") ("warnings"))))
                          seq
                            xcode.write (((unsupported)).apply (((((unsupported)).apply).xformat)) ((xdir)) ((xmod)))
                            (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_ok)).apply ("-c") ((xcode)))))
                            xtmp_name.write (((((((xout).xdecode)).apply).xstrip)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xtmp_name)))) (("TemporaryDirectory %s exists after cleanup".mod (xtmp_name))))
                            xerr.write ((((xerr).xdecode)).apply ("utf-8") ("backslashreplace"))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Exception ") ((xerr)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("ResourceWarning: Implicitly cleaning up") ((xerr)))
                xtest_exit_on_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xerr
                    memory > xtmp_name
                    seq > @
                      (((unsupported)).apply (((((xself).xdo_create)).apply)) ((xdir)))
                        seq
                          xcode.write (((unsupported)).apply (((((unsupported)).apply).xformat)) ((xdir)))
                          (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_ok)).apply ("-c") ((xcode)))))
                          xtmp_name.write (((((((xout).xdecode)).apply).xstrip)).apply)
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xtmp_name)))) (("TemporaryDirectory %s exists after cleanup".mod (xtmp_name))))
                          xerr.write ((((xerr).xdecode)).apply ("utf-8") ("backslashreplace"))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Exception ") ((xerr)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("ResourceWarning: Implicitly cleaning up") ((xerr)))
                xtest_warnings_on_cleanup.write
                  [xself]
                    memory > xname
                    memory > xd
                    seq > @
                      (((unsupported)).apply (((((xself).xdo_create)).apply)) ((xdir)))
                        seq
                          xd.write (((unsupported)).apply (((xself).xdo_create)) ((xdir)) (3))
                          xname.write ((xd).xname)
                          (((unsupported)).apply ((((unsupported)).apply (((xsupport).xcheck_warnings)) ((((unsupported)).apply ("Implicitly") ((xResourceWarning)))) (FALSE))))
                            seq
                              (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("always") ((xResourceWarning)))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)))))))
                              bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xname)))) (("TemporaryDirectory %s exists after __del__".mod (xname))))
                xtest_multiple_close.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xself).xdo_create)).apply)
                        bogusForceDataize.write ((((xd).xcleanup)).apply)
                        bogusForceDataize.write ((((xd).xcleanup)).apply)
                        bogusForceDataize.write ((((xd).xcleanup)).apply)
                xtest_context_manager.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xself).xdo_create)).apply)
                        (((unsupported)).apply ((xd)) ((xname)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xname)) (((xd).xname)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xname)))))
                xtest_modes.write
                  [xself]
                    memory > xd
                    seq > @
                      (((unsupported)).apply ((xmode)) ((((xrange)).apply (8))))
                        seq
                          (((unsupported)).apply ((xmode)) (7))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((((xformat)).apply ((xmode)) ("03o"))))))
                            seq
                              xd.write (((unsupported)).apply (((xself).xdo_create)) (3) (2) (2))
                              (((unsupported)).apply ((xd)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xroot)) ((xdirs)) ((xfiles)))) ((((unsupported)).apply (((xos).xwalk)) (((xd).xname)) (FALSE))))
                                    seq
                                      (((unsupported)).apply ((xname)) ((xfiles)))
                                        bogusForceDataize.write ((((xos).xchmod)).apply ((((((xos).xpath).xjoin)).apply ((xroot)) ((xname)))) ((xmode)))
                                      bogusForceDataize.write ((((xos).xchmod)).apply ((xroot)) ((xmode)))
                                  bogusForceDataize.write ((((xd).xcleanup)).apply)
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xd).xname)))))
                xtest_flags.write
                  [xself]
                    memory > xd
                    memory > xflags
                    seq > @
                      (((unsupported)).apply)
                        xflags.write (((xstat).xUF_IMMUTABLE).or ((xstat).xUF_NOUNLINK))
                        xd.write (((unsupported)).apply (((xself).xdo_create)) (3) (2) (2))
                        (((unsupported)).apply ((xd)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xroot)) ((xdirs)) ((xfiles)))) ((((unsupported)).apply (((xos).xwalk)) (((xd).xname)) (FALSE))))
                              seq
                                (((unsupported)).apply ((xname)) ((xfiles)))
                                  bogusForceDataize.write ((((xos).xchflags)).apply ((((((xos).xpath).xjoin)).apply ((xroot)) ((xname)))) ((xflags)))
                                bogusForceDataize.write ((((xos).xchflags)).apply ((xroot)) ((xflags)))
                            bogusForceDataize.write ((((xd).xcleanup)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xd).xname)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)