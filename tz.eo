memory > xNode
memory > xdatetime
memory > xUnknownTimezoneException
memory > xstr
memory > xGetCurrentTimezoneNode
memory > xdatetimeobject
memory > xsettings
memory > xException
memory > xzoneinfo
memory > xTimezoneNode
memory > xTemplateSyntaxError
memory > xLocalTimeNode
memory > xImportError
memory > xtimezone
memory > xBaseException
memory > xpytz
memory > xLibrary
memory > xtzinfo
memory > xisinstance
memory > xlen
[] > tz
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtimezone_constructor
        memory > xdo_timezone
        memory > xtimezone_tag
        memory > xdatetime_timezone
        memory > xregister
        memory > xrender
        memory > x__init__
        memory > xget_current_timezone_tag
        memory > xlocaltime_tag
        memory > xlocaltime
        memory > xutc
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xregister.write (((xLibrary)).apply)
            (((unsupported)).apply ((xBaseException)))
            xtimezone_constructor.write
              [xtzname]
                seq > @
                  seq
                    ((xsettings).xUSE_DEPRECATED_PYTZ).if
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xpytz).xUnknownTimeZoneError)))
                          (((unsupported)).apply (((((xpytz).xtimezone)).apply ((xtzname)))))
                          (((unsupported)).apply ((xUnknownTimezoneException)))
                    (((unsupported)).apply (((xzoneinfo).xZoneInfoNotFoundError)))
                      (((unsupported)).apply (((((xzoneinfo).xZoneInfo)).apply ((xtzname)))))
                      (((unsupported)).apply ((xUnknownTimezoneException)))
            (((unsupported)).apply ((xdatetime)))
            xlocaltime.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xdo_timezone)).apply ((xvalue)) (((((xtimezone).xget_current_timezone)).apply)))))
            xutc.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xdo_timezone)).apply ((xvalue)) (((xdatetime_timezone).xutc)))))
            xdo_timezone.write
              [xvalue xarg]
                memory > xresult
                memory > xdefault_timezone
                memory > xtz
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((((xisinstance)).apply ((xvalue)) ((xdatetime))).not).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((xException)))
                      ((((xtimezone).xis_naive)).apply ((xvalue))).if
                        seq
                          xdefault_timezone.write ((((xtimezone).xget_default_timezone)).apply)
                          xvalue.write ((((xtimezone).xmake_aware)).apply ((xvalue)) ((xdefault_timezone)))
                      (((unsupported)).apply (""))
                    (((xisinstance)).apply ((xarg)) ((xtzinfo))).if
                      xtz.write (xarg)
                      (((xisinstance)).apply ((xarg)) ((xstr))).if
                        (((unsupported)).apply ((xUnknownTimezoneException)))
                          xtz.write (((xtimezone_constructor)).apply ((xarg)))
                          (((unsupported)).apply (""))
                        (((unsupported)).apply (""))
                    xresult.write ((((xtimezone).xlocaltime)).apply ((xvalue)) ((xtz)))
                    xresult.write (((xdatetimeobject)).apply (((xresult).xyear)) (((xresult).xmonth)) (((xresult).xday)) (((xresult).xhour)) (((xresult).xminute)) (((xresult).xsecond)) (((xresult).xmicrosecond)) (((xresult).xtzinfo)))
                    (((unsupported)).apply (((xresult).xconvert_to_local_time)) (FALSE))
                    (((unsupported)).apply ((xresult)))
            (((unsupported)).apply ((xNode)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xnodelist xuse_tz]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xnodelist)) ((xnodelist)))
                        (((unsupported)).apply (((xself).xuse_tz)) ((xuse_tz)))
                xrender.write
                  [xself xcontext]
                    memory > xold_setting
                    memory > xoutput
                    seq > @
                      seq
                        xold_setting.write ((xcontext).xuse_tz)
                        (((unsupported)).apply (((xcontext).xuse_tz)) (((xself).xuse_tz)))
                        xoutput.write (((((xself).xnodelist).xrender)).apply ((xcontext)))
                        (((unsupported)).apply (((xcontext).xuse_tz)) ((xold_setting)))
                        (((unsupported)).apply ((xoutput)))
            (((unsupported)).apply ((xNode)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xnodelist xtz]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xnodelist)) ((xnodelist)))
                        (((unsupported)).apply (((xself).xtz)) ((xtz)))
                xrender.write
                  [xself xcontext]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtimezone).xoverride)).apply ((((((xself).xtz).xresolve)).apply ((xcontext)))))))
                          xoutput.write (((((xself).xnodelist).xrender)).apply ((xcontext)))
                        (((unsupported)).apply ((xoutput)))
            (((unsupported)).apply ((xNode)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xvariable]
                    seq > @
                      (((unsupported)).apply (((xself).xvariable)) ((xvariable)))
                xrender.write
                  [xself xcontext]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xvariable)))) (((((xtimezone).xget_current_timezone_name)).apply)))
                        (((unsupported)).apply (""))
            xlocaltime_tag.write
              [xparser xtoken]
                memory > xbits
                memory > xnodelist
                memory > xuse_tz
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).eq 1).if
                      xuse_tz.write TRUE
                      (((((xlen)).apply ((xbits))).greater 2).or (((unsupported)).apply ((((unsupported)).apply ((xbits)) (1))) ((((unsupported)).apply ("on") ("off"))))).if
                        (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("%r argument should be 'on' or 'off'".mod (((unsupported)).apply ((xbits)) (0)))))))
                        xuse_tz.write ((((unsupported)).apply ((xbits)) (1)).eq "on")
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endlocaltime"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xLocalTimeNode)).apply ((xnodelist)) ((xuse_tz)))))
            xtimezone_tag.write
              [xparser xtoken]
                memory > xbits
                memory > xnodelist
                memory > xtz
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' takes one argument (timezone)".mod (((unsupported)).apply ((xbits)) (0)))))))
                    xtz.write ((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (1))))
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endtimezone"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xTimezoneNode)).apply ((xnodelist)) ((xtz)))))
            xget_current_timezone_tag.write
              [xparser xtoken]
                memory > xargs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xargs.write (((((xtoken).xcontents).xsplit)).apply)
                    (((((xlen)).apply ((xargs))).neq 3).or ((((unsupported)).apply ((xargs)) (1)).neq "as")).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'get_current_timezone' requires 'as variable' (got %r)".mod (xargs))))))
                    (((unsupported)).apply ((((xGetCurrentTimezoneNode)).apply ((((unsupported)).apply ((xargs)) (2))))))