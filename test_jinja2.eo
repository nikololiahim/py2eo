memory > xTemplateSyntaxError
memory > xImportError
memory > xPath
memory > xRequestFactory
memory > xmock
memory > x__file__
memory > xskipIf
memory > xe
memory > xTemplateStringsTests
memory > xlen
[] > test_jinja2
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_template_render_nested_error
        memory > xtest_origin
        memory > xJinja2
        memory > xengine_class
        memory > xbackend_name
        memory > xtest_exception_debug_info_max_context
        memory > xtest_template_render_error_nonexistent_source
        memory > xtest_origin_from_string
        memory > xtest_context_processors
        memory > xtest_dirs_pathlib
        memory > xtest_exception_debug_info_min_context
        memory > xtest_self_context
        memory > xjinja2
        memory > xoptions
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              seq
                xjinja2.write "None: is there a None literal in the EO language?"
                xJinja2.write "None: is there a None literal in the EO language?"
              (((unsupported)).apply)
            (((unsupported)).apply ((xTemplateStringsTests)) ((((xskipIf)).apply ((((unsupported)).apply ((xjinja2)) ("None: is there a None literal in the EO language?"))) ("this test requires jinja2"))))
              seq
                xengine_class.write (xJinja2)
                xbackend_name.write "jinja2"
                xoptions.write (((unsupported)).apply ("keep_trailing_newline") (TRUE) ("context_processors") ((((unsupported)).apply ("django.template.context_processors.static"))))
                xtest_origin.write
                  [xself]
                    memory > xtemplate
                    seq > @
                      seq
                        xtemplate.write (((((xself).xengine).xget_template)).apply ("template_backends/hello.html"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xtemplate).xorigin).xname).xendswith)).apply ("hello.html"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtemplate).xorigin).xtemplate_name)) ("template_backends/hello.html"))
                xtest_origin_from_string.write
                  [xself]
                    memory > xtemplate
                    seq > @
                      seq
                        xtemplate.write (((((xself).xengine).xfrom_string)).apply ("Hello!n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtemplate).xorigin).xname)) ("<template>"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xtemplate).xorigin).xtemplate_name)))
                xtest_self_context.write
                  [xself]
                    memory > xtemplate
                    memory > xcontent
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtemplate.write (((((xself).xengine).xfrom_string)).apply ("hello {{ foo }}!"))
                        xcontent.write (((unsupported)).apply (((xtemplate).xrender)) ((((unsupported)).apply ("self") ("self") ("foo") ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontent)) ("hello world!"))
                xtest_exception_debug_info_min_context.write
                  [xself]
                    memory > xdebug
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))) ((xe)))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("template_backends/syntax_error.html"))
                        xdebug.write (((xe).xexception).xtemplate_debug)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("after"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("before"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("during"))) ("{% block %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("bottom"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("top"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("line"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("total"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xdebug)) ("source_lines"))))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xdebug)) ("name")).xendswith)).apply ("syntax_error.html"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("message") ((xdebug)))
                xtest_exception_debug_info_max_context.write
                  [xself]
                    memory > xdebug
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))) ((xe)))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("template_backends/syntax_error2.html"))
                        xdebug.write (((xe).xexception).xtemplate_debug)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("after"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("before"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("during"))) ("{% block %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("bottom"))) (26))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("top"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("line"))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("total"))) (31))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xdebug)) ("source_lines"))))) (21))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xdebug)) ("name")).xendswith)).apply ("syntax_error2.html"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("message") ((xdebug)))
                xtest_context_processors.write
                  [xself]
                    memory > xtemplate
                    memory > xrequest
                    memory > xcontent
                    seq > @
                      seq
                        xrequest.write ((((((xRequestFactory)).apply).xget)).apply ("/"))
                        xtemplate.write (((((xself).xengine).xfrom_string)).apply ("Static URL: {{ STATIC_URL }}"))
                        xcontent.write (((unsupported)).apply (((xtemplate).xrender)) ((xrequest)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontent)) ("Static URL: /static/"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("/s/"))))
                          xcontent.write (((unsupported)).apply (((xtemplate).xrender)) ((xrequest)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontent)) ("Static URL: /s/"))
                xtest_dirs_pathlib.write
                  [xself]
                    memory > xtemplate
                    memory > xengine
                    seq > @
                      seq
                        xengine.write (((xJinja2)).apply ((((unsupported)).apply ("DIRS") ((((unsupported)).apply (((((((xPath)).apply ((x__file__))).xparent).div "templates").div "template_backends")))) ("APP_DIRS") (FALSE) ("NAME") ("jinja2") ("OPTIONS") ((((unsupported)).apply)))))
                        xtemplate.write ((((xengine).xget_template)).apply ("hello.html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate).xrender)).apply ((((unsupported)).apply ("name") ("Joe"))))) ("Hello Joe!"))
                xtest_template_render_nested_error.write
                  [xself]
                    memory > xtemplate
                    memory > xdebug
                    seq > @
                      seq
                        xtemplate.write (((((xself).xengine).xget_template)).apply ("template_backends/syntax_error_include.html"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))) ((xe)))
                          (((unsupported)).apply (((xtemplate).xrender)) ((((unsupported)).apply)))
                        xdebug.write (((xe).xexception).xtemplate_debug)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("after"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("before"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("during"))) ("{% block %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("bottom"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("top"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("line"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("total"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xdebug)) ("source_lines"))))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xdebug)) ("name")).xendswith)).apply ("syntax_error.html"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("message") ((xdebug)))
                xtest_template_render_error_nonexistent_source.write
                  [xself]
                    memory > xtemplate
                    memory > xdebug
                    seq > @
                      seq
                        xtemplate.write (((((xself).xengine).xget_template)).apply ("template_backends/hello.html"))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("jinja2.environment.Template.render") ((((unsupported)).apply (((xjinja2).xTemplateSyntaxError)) ("") (1) ("nonexistent.html"))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))) ((xe)))
                            (((unsupported)).apply (((xtemplate).xrender)) ((((unsupported)).apply)))
                        xdebug.write (((xe).xexception).xtemplate_debug)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("after"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("before"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("during"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("bottom"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("top"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("line"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdebug)) ("total"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xdebug)) ("source_lines"))))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xdebug)) ("name")).xendswith)).apply ("nonexistent.html"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("message") ((xdebug)))