memory > xurlencode
memory > xdefaults
memory > xcallable
memory > xsettings
memory > xtuple
memory > xsorted
memory > xcopy
memory > xauthenticate
memory > xfalse
memory > xget_user
memory > xresolve
memory > x_lazy_re_compile
memory > xlist
memory > xQueryDict
memory > xBytesIO
memory > xContextList
memory > xValueError
memory > ximport_module
memory > xstr
memory > xClientHandler
memory > xsync_to_async
memory > xClientMixin
memory > xHttpRequest
memory > xurlparse
memory > xSimpleCookie
memory > xvalue
memory > xASGIRequest
memory > x_
memory > xextra
memory > xNotImplementedError
memory > xload_backend
memory > xrequest_finished
memory > xbackend_path
memory > xcredentials
memory > xquery_string
memory > xBaseHandler
memory > xrequest_started
memory > xFakePayload
memory > xException
memory > xhasattr
memory > xRequestFactory
memory > xsuper
memory > xunquote_to_bytes
memory > xsys
memory > xargs
memory > xos
memory > xRedirectCycleError
memory > xitem
memory > xval
memory > xgetattr
memory > xid
memory > xexc_value
memory > xWSGIRequest
memory > xAsyncRequestFactory
memory > xpartial
memory > xSimpleLazyObject
memory > xHTTPStatus
memory > xforce_bytes
memory > xmorsel
memory > xjson
memory > xurlsplit
memory > xis_iterable
memory > xsignals
memory > xkwargs
memory > xisinstance
memory > xurljoin
memory > xclose_old_connections
memory > xlen
memory > xdict
memory > xgot_request_exception
memory > xTypeError
memory > xmimetypes
memory > xkey
memory > xAsyncClientHandler
[] > client
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdelete
        memory > xput
        memory > xget
        memory > xrequest
        memory > xMULTIPART_CONTENT
        memory > x_get_path
        memory > xCONTENT_TYPE_RE
        memory > x_handle_redirects
        memory > xpatch
        memory > x__all__
        memory > x__init__
        memory > xread
        memory > x__len__
        memory > xwrite
        memory > xencode_file
        memory > xencode_multipart
        memory > x__call__
        memory > x_parse_json
        memory > x_base_scope
        memory > x_encode_json
        memory > xgeneric
        memory > x_base_environ
        memory > x_login
        memory > xclosing_iterator_wrapper
        memory > xstore_rendered_templates
        memory > xtrace
        memory > xlogin
        memory > xhead
        memory > xJSON_CONTENT_TYPE_RE
        memory > xconditional_content_removal
        memory > xforce_login
        memory > xlogout
        memory > xsession
        memory > xBOUNDARY
        memory > xcheck_exception
        memory > xoptions
        memory > xpost
        memory > xstore_exc_info
        memory > x_encode_data
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("AsyncClient") ("AsyncRequestFactory") ("Client") ("RedirectCycleError") ("RequestFactory") ("encode_file") ("encode_multipart"))
            xBOUNDARY.write "BoUnDaRyStRiNg"
            xMULTIPART_CONTENT.write ("multipart/form-data; boundary=%s".mod (xBOUNDARY))
            xCONTENT_TYPE_RE.write (((x_lazy_re_compile)).apply (".*; charset=([w-]+);?"))
            xJSON_CONTENT_TYPE_RE.write (((x_lazy_re_compile)).apply ("^application/(.++)?json"))
            (((unsupported)).apply ((xException)))
              seq
                unsupported
                x__init__.write
                  [xself xmessage xlast_response]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xmessage)))
                        (((unsupported)).apply (((xself).xlast_response)) ((xlast_response)))
                        (((unsupported)).apply (((xself).xredirect_chain)) (((xlast_response).xredirect_chain)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xcontent]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x__content)) ((((xBytesIO)).apply)))
                        (((unsupported)).apply (((xself).x__len)) (0))
                        (((unsupported)).apply (((xself).xread_started)) ((xfalse)))
                        (((unsupported)).apply ((xcontent)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xwrite)).apply ((xcontent)))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x__len)))
                xread.write
                  [xself xnum_bytes]
                    memory > xcontent
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xread_started).not).if
                          seq
                            bogusForceDataize.write (((((xself).x__content).xseek)).apply (0))
                            (((unsupported)).apply (((xself).xread_started)) (TRUE))
                        (((unsupported)).apply ((xnum_bytes)) ("None: is there a None literal in the EO language?")).if
                          xnum_bytes.write (((xself).x__len).or 0)
                        (((unsupported)).apply ((((xself).x__len).geq (xnum_bytes))) ("Cannot read more than the available bytes from the HTTP incoming data."))
                        xcontent.write (((((xself).x__content).xread)).apply ((xnum_bytes)))
                        (((unsupported)).apply (((xself).x__len)) ((xnum_bytes)))
                        (((unsupported)).apply ((xcontent)))
                xwrite.write
                  [xself xcontent]
                    seq > @
                      seq
                        ((xself).xread_started).if
                          (((unsupported)).apply ((((xValueError)).apply ("Unable to write a payload after it's been read"))))
                        xcontent.write (((xforce_bytes)).apply ((xcontent)))
                        bogusForceDataize.write (((((xself).x__content).xwrite)).apply ((xcontent)))
                        (((unsupported)).apply (((xself).x__len)) ((((xlen)).apply ((xcontent)))))
            xclosing_iterator_wrapper.write
              [xiterable xclose]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xiterable)))
                    seq
                      bogusForceDataize.write ((((xrequest_finished).xdisconnect)).apply ((xclose_old_connections)))
                      bogusForceDataize.write (((xclose)).apply)
                      bogusForceDataize.write ((((xrequest_finished).xconnect)).apply ((xclose_old_connections)))
            xconditional_content_removal.write
              [xrequest xresponse]
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((((unsupported)).apply (100) (((xresponse).xstatus_code)) (200)).or (((unsupported)).apply (((xresponse).xstatus_code)) ((((unsupported)).apply (204) (304))))).if
                      ((xresponse).xstreaming).if
                        (((unsupported)).apply (((xresponse).xstreaming_content)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xresponse).xcontent)) (""))
                    (((xrequest).xmethod).eq "HEAD").if
                      ((xresponse).xstreaming).if
                        (((unsupported)).apply (((xresponse).xstreaming_content)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xresponse).xcontent)) (""))
                    (((unsupported)).apply ((xresponse)))
            (((unsupported)).apply ((xBaseHandler)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xenforce_csrf_checks]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xenforce_csrf_checks)) ((xenforce_csrf_checks)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x__call__.write
                  [xself xenviron]
                    memory > xresponse
                    memory > xrequest
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_middleware_chain)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xload_middleware)).apply)
                        bogusForceDataize.write ((((xrequest_started).xdisconnect)).apply ((xclose_old_connections)))
                        (((unsupported)).apply (((xrequest_started).xsend)) (((xself).x__class__)) ((xenviron)))
                        bogusForceDataize.write ((((xrequest_started).xconnect)).apply ((xclose_old_connections)))
                        xrequest.write (((xWSGIRequest)).apply ((xenviron)))
                        (((unsupported)).apply (((xrequest).x_dont_enforce_csrf_checks)) ((((xself).xenforce_csrf_checks).not)))
                        xresponse.write ((((xself).xget_response)).apply ((xrequest)))
                        bogusForceDataize.write (((xconditional_content_removal)).apply ((xrequest)) ((xresponse)))
                        (((unsupported)).apply (((xresponse).xwsgi_request)) ((xrequest)))
                        ((xresponse).xstreaming).if
                          (((unsupported)).apply (((xresponse).xstreaming_content)) ((((xclosing_iterator_wrapper)).apply (((xresponse).xstreaming_content)) (((xresponse).xclose)))))
                          seq
                            bogusForceDataize.write ((((xrequest_finished).xdisconnect)).apply ((xclose_old_connections)))
                            bogusForceDataize.write ((((xresponse).xclose)).apply)
                            bogusForceDataize.write ((((xrequest_finished).xconnect)).apply ((xclose_old_connections)))
                        (((unsupported)).apply ((xresponse)))
            (((unsupported)).apply ((xBaseHandler)))
              seq
                unsupported
                x__init__.write
                  [xself xenforce_csrf_checks]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xenforce_csrf_checks)) ((xenforce_csrf_checks)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x__call__.write
                  [xself xscope]
                    memory > xbody_file
                    memory > xresponse
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_middleware_chain)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xload_middleware)) (TRUE))
                        (((unsupported)).apply ("_body_file") ((xscope))).if
                          xbody_file.write ((((xscope).xpop)).apply ("_body_file"))
                          xbody_file.write (((xFakePayload)).apply (""))
                        bogusForceDataize.write ((((xrequest_started).xdisconnect)).apply ((xclose_old_connections)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsync_to_async)) (((xrequest_started).xsend)) ((xfalse)))) (((xself).x__class__)) ((xscope)))))
                        bogusForceDataize.write ((((xrequest_started).xconnect)).apply ((xclose_old_connections)))
                        xrequest.write (((xASGIRequest)).apply ((xscope)) ((xbody_file)))
                        (((unsupported)).apply (((xrequest).x_dont_enforce_csrf_checks)) ((((xself).xenforce_csrf_checks).not)))
                        xresponse.write (((unsupported)).apply (((((xself).xget_response_async)).apply ((xrequest)))))
                        bogusForceDataize.write (((xconditional_content_removal)).apply ((xrequest)) ((xresponse)))
                        (((unsupported)).apply (((xresponse).xasgi_request)) ((xrequest)))
                        ((xresponse).xstreaming).if
                          (((unsupported)).apply (((xresponse).xstreaming_content)) ((((unsupported)).apply ((((((unsupported)).apply ((xsync_to_async)) ((xclosing_iterator_wrapper)) ((xfalse)))).apply (((xresponse).xstreaming_content)) (((xresponse).xclose)))))))
                          seq
                            bogusForceDataize.write ((((xrequest_finished).xdisconnect)).apply ((xclose_old_connections)))
                            (((unsupported)).apply ((((((unsupported)).apply ((xsync_to_async)) (((xresponse).xclose)) ((xfalse)))).apply)))
                            bogusForceDataize.write ((((xrequest_finished).xconnect)).apply ((xclose_old_connections)))
                        (((unsupported)).apply ((xresponse)))
            xstore_rendered_templates.write
              [xstore xsignal xsender xtemplate xcontext]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    bogusForceDataize.write (((((((xstore).xsetdefault)).apply ("templates") ((((unsupported)).apply))).xappend)).apply ((xtemplate)))
                    (((unsupported)).apply ("context") ((xstore))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xstore)) ("context"))) ((((xContextList)).apply)))
                    bogusForceDataize.write ((((((unsupported)).apply ((xstore)) ("context")).xappend)).apply ((((xcopy)).apply ((xcontext)))))
            xencode_multipart.write
              [xboundary xdata]
                memory > xis_file
                memory > xlines
                memory > xto_bytes
                seq > @
                  seq
                    (((unsupported)).apply)
                    xlines.write (((unsupported)).apply)
                    xto_bytes.write
                      [xs]
                        seq > @
                          (((unsupported)).apply ((((xforce_bytes)).apply ((xs)) (((xsettings).xDEFAULT_CHARSET)))))
                    xis_file.write
                      [xthing]
                        seq > @
                          (((unsupported)).apply (((((xhasattr)).apply ((xthing)) ("read")).and (((xcallable)).apply (((xthing).xread))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xdata).xitems)).apply)))
                      (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply ((((xTypeError)).apply (("Cannot encode None for key '%s' as POST data. Did you mean to pass an empty string or omit the value?".mod (xkey))))))
                        (((xis_file)).apply ((xvalue))).if
                          bogusForceDataize.write ((((xlines).xextend)).apply ((((xencode_file)).apply ((xboundary)) ((xkey)) ((xvalue)))))
                          (((((xisinstance)).apply ((xvalue)) ((xstr))).not).and (((xis_iterable)).apply ((xvalue)))).if
                            (((unsupported)).apply ((xitem)) ((xvalue)))
                              (((xis_file)).apply ((xitem))).if
                                bogusForceDataize.write ((((xlines).xextend)).apply ((((xencode_file)).apply ((xboundary)) ((xkey)) ((xitem)))))
                                bogusForceDataize.write ((((xlines).xextend)).apply ((((unsupported)).apply ((((xto_bytes)).apply ((xval)))) ((xval)) ((((unsupported)).apply (("--%s".mod (xboundary))) (("Content-Disposition: form-data; name=\"%s\"".mod (xkey))) ("") ((xitem)))))))
                            bogusForceDataize.write ((((xlines).xextend)).apply ((((unsupported)).apply ((((xto_bytes)).apply ((xval)))) ((xval)) ((((unsupported)).apply (("--%s".mod (xboundary))) (("Content-Disposition: form-data; name=\"%s\"".mod (xkey))) ("") ((xvalue)))))))
                    bogusForceDataize.write ((((xlines).xextend)).apply ((((unsupported)).apply ((((xto_bytes)).apply (("--%s--".mod (xboundary))))) (""))))
                    (((unsupported)).apply (((("rn".xjoin)).apply ((xlines)))))
            xencode_file.write
              [xboundary xkey xfile]
                memory > xto_bytes
                memory > xfile_has_string_name
                memory > xfilename
                memory > xcontent_type
                seq > @
                  seq
                    xto_bytes.write
                      [xs]
                        seq > @
                          (((unsupported)).apply ((((xforce_bytes)).apply ((xs)) (((xsettings).xDEFAULT_CHARSET)))))
                    xfile_has_string_name.write ((((xhasattr)).apply ((xfile)) ("name")).and (((xisinstance)).apply (((xfile).xname)) ((xstr))))
                    xfilename.write ((xfile_has_string_name).if (((((xos).xpath).xbasename)).apply (((xfile).xname))) "")
                    (((xhasattr)).apply ((xfile)) ("content_type")).if
                      xcontent_type.write ((xfile).xcontent_type)
                      (xfilename).if
                        xcontent_type.write (((unsupported)).apply (((((xmimetypes).xguess_type)).apply ((xfilename)))) (0))
                        xcontent_type.write "None: is there a None literal in the EO language?"
                    (((unsupported)).apply ((xcontent_type)) ("None: is there a None literal in the EO language?")).if
                      xcontent_type.write "application/octet-stream"
                    xfilename.write ((xfilename).or (xkey))
                    (((unsupported)).apply ((((unsupported)).apply ((((xto_bytes)).apply (("--%s".mod (xboundary))))) ((((xto_bytes)).apply (("Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"".mod (((unsupported)).apply ((xkey)) ((xfilename))))))) ((((xto_bytes)).apply (("Content-Type: %s".mod (xcontent_type))))) ("") ((((xto_bytes)).apply (((((xfile).xread)).apply)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xjson_encoder]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xjson_encoder)) ((xjson_encoder)))
                        (((unsupported)).apply (((xself).xdefaults)) ((xdefaults)))
                        (((unsupported)).apply (((xself).xcookies)) ((((xSimpleCookie)).apply)))
                        (((unsupported)).apply (((xself).xerrors)) ((((xBytesIO)).apply)))
                x_base_environ.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ("HTTP_COOKIE") (((("; ".xjoin)).apply ((((xsorted)).apply ((((unsupported)).apply (("%s=%s".mod (((unsupported)).apply (((xmorsel).xkey)) (((xmorsel).xcoded_value))))) ((xmorsel)) ((((((xself).xcookies).xvalues)).apply)))))))) ("PATH_INFO") ("/") ("REMOTE_ADDR") ("127.0.0.1") ("REQUEST_METHOD") ("GET") ("SCRIPT_NAME") ("") ("SERVER_NAME") ("testserver") ("SERVER_PORT") ("80") ("SERVER_PROTOCOL") ("HTTP/1.1") ("wsgi.version") ((((unsupported)).apply (1) (0))) ("wsgi.url_scheme") ("http") ("wsgi.input") ((((xFakePayload)).apply (""))) ("wsgi.errors") (((xself).xerrors)) ("wsgi.multiprocess") (TRUE) ("wsgi.multithread") ((xfalse)) ("wsgi.run_once") ((xfalse)) (((xself).xdefaults)) ((xrequest)))))
                xrequest.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xWSGIRequest)).apply (((((xself).x_base_environ)).apply ((((unsupported)).apply ((xrequest)))))))))
                x_encode_data.write
                  [xself xdata xcontent_type]
                    memory > xcharset
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply ((xcontent_type)) ((xMULTIPART_CONTENT))).if
                        (((unsupported)).apply ((((xencode_multipart)).apply ((xBOUNDARY)) ((xdata)))))
                        seq
                          xmatch.write ((((xCONTENT_TYPE_RE).xmatch)).apply ((xcontent_type)))
                          (xmatch).if
                            xcharset.write (((unsupported)).apply ((xmatch)) (1))
                            xcharset.write ((xsettings).xDEFAULT_CHARSET)
                          (((unsupported)).apply ((((unsupported)).apply ((xforce_bytes)) ((xdata)) ((xcharset)))))
                x_encode_json.write
                  [xself xdata xcontent_type]
                    memory > xshould_encode
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xshould_encode.write (((((xJSON_CONTENT_TYPE_RE).xmatch)).apply ((xcontent_type))).and (((xisinstance)).apply ((xdata)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xtuple))))))
                        (((unsupported)).apply (((xshould_encode).if (((unsupported)).apply (((xjson).xdumps)) ((xdata)) (((xself).xjson_encoder))) (xdata))))
                x_get_path.write
                  [xself xparsed]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write ((xparsed).xpath)
                        ((xparsed).xparams).if
                          (((unsupported)).apply ((xpath)) ((";".add ((xparsed).xparams))))
                        xpath.write (((xunquote_to_bytes)).apply ((xpath)))
                        (((unsupported)).apply (((((xpath).xdecode)).apply ("iso-8859-1"))))
                xget.write
                  [xself xpath xdata xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) (xdata))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("GET") ((xpath)) ((xsecure)) ((((unsupported)).apply ((((unsupported)).apply ("QUERY_STRING") ((((unsupported)).apply ((xurlencode)) ((xdata)) (TRUE))) ((xextra)))))))))
                xpost.write
                  [xself xpath xdata xcontent_type xsecure]
                    memory > xpost_data
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((xself).x_encode_json)).apply (((((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) (xdata))) ((xcontent_type)))
                        xpost_data.write ((((xself).x_encode_data)).apply ((xdata)) ((xcontent_type)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("POST") ((xpath)) ((xpost_data)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xhead.write
                  [xself xpath xdata xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) (xdata))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("HEAD") ((xpath)) ((xsecure)) ((((unsupported)).apply ((((unsupported)).apply ("QUERY_STRING") ((((unsupported)).apply ((xurlencode)) ((xdata)) (TRUE))) ((xextra)))))))))
                xtrace.write
                  [xself xpath xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("TRACE") ((xpath)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xoptions.write
                  [xself xpath xdata xcontent_type xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("OPTIONS") ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xput.write
                  [xself xpath xdata xcontent_type xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((xself).x_encode_json)).apply ((xdata)) ((xcontent_type)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("PUT") ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xpatch.write
                  [xself xpath xdata xcontent_type xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((xself).x_encode_json)).apply ((xdata)) ((xcontent_type)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("PATCH") ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xdelete.write
                  [xself xpath xdata xcontent_type xsecure]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdata.write ((((xself).x_encode_json)).apply ((xdata)) ((xcontent_type)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgeneric)) ("DELETE") ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))))
                xgeneric.write
                  [xself xmethod xpath xdata xcontent_type xsecure]
                    memory > xr
                    memory > xparsed
                    memory > xquery_string
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xparsed.write (((xurlparse)).apply ((((xstr)).apply ((xpath)))))
                        xdata.write (((xforce_bytes)).apply ((xdata)) (((xsettings).xDEFAULT_CHARSET)))
                        xr.write (((unsupported)).apply ("PATH_INFO") (((((xself).x_get_path)).apply ((xparsed)))) ("REQUEST_METHOD") ((xmethod)) ("SERVER_PORT") (((xsecure).if "443" "80")) ("wsgi.url_scheme") (((xsecure).if "https" "http")))
                        (xdata).if
                          bogusForceDataize.write ((((xr).xupdate)).apply ((((unsupported)).apply ("CONTENT_LENGTH") ((((xstr)).apply ((((xlen)).apply ((xdata)))))) ("CONTENT_TYPE") ((xcontent_type)) ("wsgi.input") ((((xFakePayload)).apply ((xdata)))))))
                        bogusForceDataize.write ((((xr).xupdate)).apply ((xextra)))
                        (((((xr).xget)).apply ("QUERY_STRING")).not).if
                          seq
                            xquery_string.write (((((((((unsupported)).apply ((xparsed)) (4)).xencode)).apply).xdecode)).apply ("iso-8859-1"))
                            (((unsupported)).apply ((((unsupported)).apply ((xr)) ("QUERY_STRING"))) ((xquery_string)))
                        (((unsupported)).apply (((((xself).xrequest)).apply ((((unsupported)).apply ((xr)))))))
            (((unsupported)).apply ((xRequestFactory)))
              seq
                (((unsupported)).apply)
                x_base_scope.write
                  [xself]
                    memory > xscope
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xscope.write (((unsupported)).apply ("asgi") ((((unsupported)).apply ("version") ("3.0"))) ("type") ("http") ("http_version") ("1.1") ("client") ((((unsupported)).apply ("127.0.0.1") (0))) ("server") ((((unsupported)).apply ("testserver") ("80"))) ("scheme") ("http") ("method") ("GET") ("headers") ((((unsupported)).apply)) (((xself).xdefaults)) ((xrequest)))
                        bogusForceDataize.write ((((((unsupported)).apply ((xscope)) ("headers")).xappend)).apply ((((unsupported)).apply ("cookie") (((("; ".xjoin)).apply ((((xsorted)).apply ((((unsupported)).apply ((((("%s=%s".mod (((unsupported)).apply (((xmorsel).xkey)) (((xmorsel).xcoded_value)))).xencode)).apply ("ascii"))) ((xmorsel)) ((((((xself).xcookies).xvalues)).apply)))))))))))
                        (((unsupported)).apply ((xscope)))
                xrequest.write
                  [xself]
                    memory > xbody_file
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ("_body_file") ((xrequest))).if
                          xbody_file.write ((((xrequest).xpop)).apply ("_body_file"))
                          xbody_file.write (((xFakePayload)).apply (""))
                        (((unsupported)).apply ((((xASGIRequest)).apply (((((xself).x_base_scope)).apply ((((unsupported)).apply ((xrequest)))))) ((xbody_file)))))
                xgeneric.write
                  [xself xmethod xpath xdata xcontent_type xsecure]
                    memory > xs
                    memory > xparsed
                    memory > xfollow
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xparsed.write (((xurlparse)).apply ((((xstr)).apply ((xpath)))))
                        xdata.write (((xforce_bytes)).apply ((xdata)) (((xsettings).xDEFAULT_CHARSET)))
                        xs.write (((unsupported)).apply ("method") ((xmethod)) ("path") (((((xself).x_get_path)).apply ((xparsed)))) ("server") ((((unsupported)).apply ("127.0.0.1") (((xsecure).if "443" "80")))) ("scheme") (((xsecure).if "https" "http")) ("headers") ((((unsupported)).apply ((((unsupported)).apply ("host") ("testserver"))))))
                        (xdata).if
                          seq
                            bogusForceDataize.write ((((((unsupported)).apply ((xs)) ("headers")).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ("content-length") (((((((xstr)).apply ((((xlen)).apply ((xdata))))).xencode)).apply ("ascii"))))) ((((unsupported)).apply ("content-type") (((((xcontent_type).xencode)).apply ("ascii"))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xs)) ("_body_file"))) ((((xFakePayload)).apply ((xdata)))))
                        xfollow.write ((((xextra).xpop)).apply ("follow") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfollow)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xs)) ("follow"))) ((xfollow)))
                        (((unsupported)).apply (((((xextra).xpop)).apply ("QUERY_STRING") ("None: is there a None literal in the EO language?")))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xs)) ("query_string"))) ((xquery_string)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ("headers"))) ((((unsupported)).apply ((((unsupported)).apply ((((((((xkey).xlower)).apply).xencode)).apply ("ascii"))) (((((xvalue).xencode)).apply ("latin1"))))) ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xextra).xitems)).apply)))))
                        (((((xs).xget)).apply ("query_string")).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((xs)) ("query_string"))) ((((unsupported)).apply ((xparsed)) (4))))
                        (((unsupported)).apply (((((xself).xrequest)).apply ((((unsupported)).apply ((xs)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xstore_exc_info.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xexc_info)) (((((xsys).xexc_info)).apply)))
                xcheck_exception.write
                  [xself xresponse]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xresponse).xexc_info)) (((xself).xexc_info)))
                        ((xself).xexc_info).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xexc_value)) ((x_)))) (((xself).xexc_info)))
                            (((unsupported)).apply (((xself).xexc_info)) ("None: is there a None literal in the EO language?"))
                            ((xself).xraise_request_exception).if
                              (((unsupported)).apply ((xexc_value)))
                xsession.write
                  [xself]
                    memory > xcookie
                    memory > xsession
                    memory > xengine
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xengine.write (((ximport_module)).apply (((xsettings).xSESSION_ENGINE)))
                        xcookie.write (((((xself).xcookies).xget)).apply (((xsettings).xSESSION_COOKIE_NAME)))
                        (xcookie).if
                          (((unsupported)).apply (((((xengine).xSessionStore)).apply (((xcookie).xvalue)))))
                        xsession.write ((((xengine).xSessionStore)).apply)
                        bogusForceDataize.write ((((xsession).xsave)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) (((xsettings).xSESSION_COOKIE_NAME)))) (((xsession).xsession_key)))
                        (((unsupported)).apply ((xsession)))
                xlogin.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser.write (((xauthenticate)).apply ((((unsupported)).apply ((xcredentials)))))
                        (xuser).if
                          seq
                            bogusForceDataize.write ((((xself).x_login)).apply ((xuser)))
                            (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xfalse)))
                xforce_login.write
                  [xself xuser xbackend]
                    memory > xget_backend
                    seq > @
                      (((unsupported)).apply)
                        xget_backend.write
                          []
                            memory > xbackend
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xbackend_path)) (((xsettings).xAUTHENTICATION_BACKENDS)))
                                  seq
                                    xbackend.write (((xload_backend)).apply ((xbackend_path)))
                                    (((xhasattr)).apply ((xbackend)) ("get_user")).if
                                      (((unsupported)).apply ((xbackend_path)))
                        (((unsupported)).apply ((xbackend)) ("None: is there a None literal in the EO language?")).if
                          xbackend.write (((xget_backend)).apply)
                        (((unsupported)).apply (((xuser).xbackend)) ((xbackend)))
                        bogusForceDataize.write ((((xself).x_login)).apply ((xuser)) ((xbackend)))
                x_login.write
                  [xself xuser xbackend]
                    memory > xcookie_data
                    memory > xsession_cookie
                    memory > xrequest
                    memory > xengine
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrequest.write (((xHttpRequest)).apply)
                        ((xself).xsession).if
                          (((unsupported)).apply (((xrequest).xsession)) (((xself).xsession)))
                          seq
                            xengine.write (((ximport_module)).apply (((xsettings).xSESSION_ENGINE)))
                            (((unsupported)).apply (((xrequest).xsession)) (((((xengine).xSessionStore)).apply)))
                        bogusForceDataize.write (((xlogin)).apply ((xrequest)) ((xuser)) ((xbackend)))
                        bogusForceDataize.write (((((xrequest).xsession).xsave)).apply)
                        xsession_cookie.write ((xsettings).xSESSION_COOKIE_NAME)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xcookies)) ((xsession_cookie)))) ((((xrequest).xsession).xsession_key)))
                        xcookie_data.write (((unsupported)).apply ("max-age") ("None: is there a None literal in the EO language?") ("path") ("/") ("domain") (((xsettings).xSESSION_COOKIE_DOMAIN)) ("secure") ((((xsettings).xSESSION_COOKIE_SECURE).or "None: is there a None literal in the EO language?")) ("expires") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xcookies)) ((xsession_cookie))).xupdate)).apply ((xcookie_data)))
                xlogout.write
                  [xself]
                    memory > xrequest
                    memory > xengine
                    seq > @
                      seq
                        unsupported
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xrequest.write (((xHttpRequest)).apply)
                        ((xself).xsession).if
                          seq
                            (((unsupported)).apply (((xrequest).xsession)) (((xself).xsession)))
                            (((unsupported)).apply (((xrequest).xuser)) ((((xget_user)).apply ((xrequest)))))
                          seq
                            xengine.write (((ximport_module)).apply (((xsettings).xSESSION_ENGINE)))
                            (((unsupported)).apply (((xrequest).xsession)) (((((xengine).xSessionStore)).apply)))
                        bogusForceDataize.write (((xlogout)).apply ((xrequest)))
                        (((unsupported)).apply (((xself).xcookies)) ((((xSimpleCookie)).apply)))
                x_parse_json.write
                  [xself xresponse]
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply ((xresponse)) ("_json")).not).if
                          seq
                            (((((xJSON_CONTENT_TYPE_RE).xmatch)).apply (((((xresponse).xget)).apply ("Content-Type")))).not).if
                              (((unsupported)).apply ((((xValueError)).apply (("Content-Type header is \"%s\", not \"application/json\"".mod ((((xresponse).xget)).apply ("Content-Type")))))))
                            (((unsupported)).apply (((xresponse).x_json)) (((((xjson).xloads)).apply ((((((xresponse).xcontent).xdecode)).apply (((xresponse).xcharset)))) ((((unsupported)).apply ((xextra)))))))
                        (((unsupported)).apply (((xresponse).x_json)))
            (((unsupported)).apply ((xClientMixin)) ((xRequestFactory)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xenforce_csrf_checks xraise_request_exception]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xdefaults)))))
                        (((unsupported)).apply (((xself).xhandler)) ((((xClientHandler)).apply ((xenforce_csrf_checks)))))
                        (((unsupported)).apply (((xself).xraise_request_exception)) ((xraise_request_exception)))
                        (((unsupported)).apply (((xself).xexc_info)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xextra)) ("None: is there a None literal in the EO language?"))
                xrequest.write
                  [xself]
                    memory > xon_template_render
                    memory > xdata
                    memory > xexception_uid
                    memory > xsignal_uid
                    memory > xurlconf
                    memory > xenviron
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xenviron.write ((((xself).x_base_environ)).apply ((((unsupported)).apply ((xrequest)))))
                        xdata.write (((unsupported)).apply)
                        xon_template_render.write (((xpartial)).apply ((xstore_rendered_templates)) ((xdata)))
                        xsignal_uid.write ("template-render-%s".mod (((xid)).apply ((xrequest))))
                        (((unsupported)).apply ((((xsignals).xtemplate_rendered).xconnect)) ((xon_template_render)) ((xsignal_uid)))
                        xexception_uid.write ("request-exception-%s".mod (((xid)).apply ((xrequest))))
                        (((unsupported)).apply (((xgot_request_exception).xconnect)) (((xself).xstore_exc_info)) ((xexception_uid)))
                        (((unsupported)).apply)
                          xresponse.write ((((xself).xhandler)).apply ((xenviron)))
                          seq
                            (((unsupported)).apply ((((xsignals).xtemplate_rendered).xdisconnect)) ((xsignal_uid)))
                            (((unsupported)).apply (((xgot_request_exception).xdisconnect)) ((xexception_uid)))
                        bogusForceDataize.write ((((xself).xcheck_exception)).apply ((xresponse)))
                        (((unsupported)).apply (((xresponse).xclient)) ((xself)))
                        (((unsupported)).apply (((xresponse).xrequest)) ((xrequest)))
                        (((unsupported)).apply (((xresponse).xtemplates)) (((((xdata).xget)).apply ("templates") ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xresponse).xcontext)) (((((xdata).xget)).apply ("context"))))
                        (((unsupported)).apply (((xresponse).xjson)) ((((xpartial)).apply (((xself).x_parse_json)) ((xresponse)))))
                        xurlconf.write (((xgetattr)).apply (((xresponse).xwsgi_request)) ("urlconf") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xresponse).xresolver_match)) ((((xSimpleLazyObject)).apply ((((unsupported)).apply ((((unsupported)).apply ((xresolve)) ((((unsupported)).apply ((xrequest)) ("PATH_INFO"))) ((xurlconf)))))))))
                        (((xresponse).xcontext).and ((((xlen)).apply (((xresponse).xcontext))).eq 1)).if
                          (((unsupported)).apply (((xresponse).xcontext)) ((((unsupported)).apply (((xresponse).xcontext)) (0))))
                        ((xresponse).xcookies).if
                          bogusForceDataize.write (((((xself).xcookies).xupdate)).apply (((xresponse).xcookies)))
                        (((unsupported)).apply ((xresponse)))
                xget.write
                  [xself xpath xdata xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xget)) ((xpath)) ((xdata)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xpost.write
                  [xself xpath xdata xcontent_type xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xpost)) ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((xcontent_type)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xhead.write
                  [xself xpath xdata xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xhead)) ((xpath)) ((xdata)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xoptions.write
                  [xself xpath xdata xcontent_type xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xoptions)) ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((xcontent_type)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xput.write
                  [xself xpath xdata xcontent_type xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xput)) ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((xcontent_type)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xpatch.write
                  [xself xpath xdata xcontent_type xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xpatch)) ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((xcontent_type)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xdelete.write
                  [xself xpath xdata xcontent_type xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xdelete)) ((xpath)) ((xdata)) ((xcontent_type)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((xcontent_type)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                xtrace.write
                  [xself xpath xdata xfollow xsecure]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        xresponse.write (((unsupported)).apply (((((xsuper)).apply).xtrace)) ((xpath)) ((xdata)) ((xsecure)) ((((unsupported)).apply ((xextra)))))
                        (xfollow).if
                          xresponse.write (((unsupported)).apply (((xself).x_handle_redirects)) ((xresponse)) ((xdata)) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xresponse)))
                x_handle_redirects.write
                  [xself xresponse xdata xcontent_type]
                    memory > xresponse_url
                    memory > xredirect_chain
                    memory > xurl
                    memory > xpath
                    memory > xrequest_method
                    memory > xredirect_status_codes
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xresponse).xredirect_chain)) ((((unsupported)).apply)))
                        xredirect_status_codes.write (((unsupported)).apply (((xHTTPStatus).xMOVED_PERMANENTLY)) (((xHTTPStatus).xFOUND)) (((xHTTPStatus).xSEE_OTHER)) (((xHTTPStatus).xTEMPORARY_REDIRECT)) (((xHTTPStatus).xPERMANENT_REDIRECT)))
                        while.
                          (((unsupported)).apply (((xresponse).xstatus_code)) ((xredirect_status_codes)))
                          [unused]
                            seq > @
                              seq
                                xresponse_url.write ((xresponse).xurl)
                                xredirect_chain.write ((xresponse).xredirect_chain)
                                bogusForceDataize.write ((((xredirect_chain).xappend)).apply ((((unsupported)).apply ((xresponse_url)) (((xresponse).xstatus_code)))))
                                xurl.write (((xurlsplit)).apply ((xresponse_url)))
                                ((xurl).xscheme).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("wsgi.url_scheme"))) (((xurl).xscheme)))
                                ((xurl).xhostname).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("SERVER_NAME"))) (((xurl).xhostname)))
                                ((xurl).xport).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("SERVER_PORT"))) ((((xstr)).apply (((xurl).xport)))))
                                xpath.write ((xurl).xpath)
                                (((xpath).not).and ((xurl).xnetloc)).if
                                  xpath.write "/"
                                (((((xpath).xstartswith)).apply ("/")).not).if
                                  xpath.write (((xurljoin)).apply ((((unsupported)).apply (((xresponse).xrequest)) ("PATH_INFO"))) ((xpath)))
                                (((unsupported)).apply (((xresponse).xstatus_code)) ((((unsupported)).apply (((xHTTPStatus).xTEMPORARY_REDIRECT)) (((xHTTPStatus).xPERMANENT_REDIRECT))))).if
                                  seq
                                    xrequest_method.write ((((((unsupported)).apply (((xresponse).xrequest)) ("REQUEST_METHOD")).xlower)).apply)
                                    (((unsupported)).apply ((xrequest_method)) ((((unsupported)).apply ("get") ("head")))).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("QUERY_STRING"))) (((xurl).xquery)))
                                    xrequest_method.write (((xgetattr)).apply ((xself)) ((xrequest_method)))
                                  seq
                                    xrequest_method.write ((xself).xget)
                                    xdata.write (((xQueryDict)).apply (((xurl).xquery)))
                                    xcontent_type.write "None: is there a None literal in the EO language?"
                                xresponse.write (((unsupported)).apply ((xrequest_method)) ((xpath)) ((xdata)) ((xcontent_type)) ((xfalse)) ((((unsupported)).apply ((xextra)))))
                                (((unsupported)).apply (((xresponse).xredirect_chain)) ((xredirect_chain)))
                                (((unsupported)).apply ((((unsupported)).apply ((xredirect_chain)) ((1.neg)))) ((((unsupported)).apply ((xredirect_chain)) ((((unsupported)).apply ((1.neg))))))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xRedirectCycleError)) ("Redirect loop detected.") ((xresponse)))))
                                ((((xlen)).apply ((xredirect_chain))).greater 20).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xRedirectCycleError)) ("Too many redirects.") ((xresponse)))))
                        (((unsupported)).apply ((xresponse)))
            (((unsupported)).apply ((xClientMixin)) ((xAsyncRequestFactory)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xenforce_csrf_checks xraise_request_exception]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xdefaults)))))
                        (((unsupported)).apply (((xself).xhandler)) ((((xAsyncClientHandler)).apply ((xenforce_csrf_checks)))))
                        (((unsupported)).apply (((xself).xraise_request_exception)) ((xraise_request_exception)))
                        (((unsupported)).apply (((xself).xexc_info)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xextra)) ("None: is there a None literal in the EO language?"))
                xrequest.write
                  [xself]
                    memory > xon_template_render
                    memory > xdata
                    memory > xexception_uid
                    memory > xscope
                    memory > xsignal_uid
                    memory > xurlconf
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ("follow") ((xrequest))).if
                          (((unsupported)).apply ((((xNotImplementedError)).apply ("AsyncClient request methods do not accept the follow parameter."))))
                        xscope.write ((((xself).x_base_scope)).apply ((((unsupported)).apply ((xrequest)))))
                        xdata.write (((unsupported)).apply)
                        xon_template_render.write (((xpartial)).apply ((xstore_rendered_templates)) ((xdata)))
                        xsignal_uid.write ("template-render-%s".mod (((xid)).apply ((xrequest))))
                        (((unsupported)).apply ((((xsignals).xtemplate_rendered).xconnect)) ((xon_template_render)) ((xsignal_uid)))
                        xexception_uid.write ("request-exception-%s".mod (((xid)).apply ((xrequest))))
                        (((unsupported)).apply (((xgot_request_exception).xconnect)) (((xself).xstore_exc_info)) ((xexception_uid)))
                        (((unsupported)).apply)
                          xresponse.write (((unsupported)).apply (((((xself).xhandler)).apply ((xscope)))))
                          seq
                            (((unsupported)).apply ((((xsignals).xtemplate_rendered).xdisconnect)) ((xsignal_uid)))
                            (((unsupported)).apply (((xgot_request_exception).xdisconnect)) ((xexception_uid)))
                        bogusForceDataize.write ((((xself).xcheck_exception)).apply ((xresponse)))
                        (((unsupported)).apply (((xresponse).xclient)) ((xself)))
                        (((unsupported)).apply (((xresponse).xrequest)) ((xrequest)))
                        (((unsupported)).apply (((xresponse).xtemplates)) (((((xdata).xget)).apply ("templates") ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xresponse).xcontext)) (((((xdata).xget)).apply ("context"))))
                        (((unsupported)).apply (((xresponse).xjson)) ((((xpartial)).apply (((xself).x_parse_json)) ((xresponse)))))
                        xurlconf.write (((xgetattr)).apply (((xresponse).xasgi_request)) ("urlconf") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xresponse).xresolver_match)) ((((xSimpleLazyObject)).apply ((((unsupported)).apply ((((unsupported)).apply ((xresolve)) ((((unsupported)).apply ((xrequest)) ("path"))) ((xurlconf)))))))))
                        (((xresponse).xcontext).and ((((xlen)).apply (((xresponse).xcontext))).eq 1)).if
                          (((unsupported)).apply (((xresponse).xcontext)) ((((unsupported)).apply (((xresponse).xcontext)) (0))))
                        ((xresponse).xcookies).if
                          bogusForceDataize.write (((((xself).xcookies).xupdate)).apply (((xresponse).xcookies)))
                        (((unsupported)).apply ((xresponse)))