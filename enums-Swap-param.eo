memory > xChoices
memory > xstr
memory > xvalue
memory > x_
memory > xChoicesMeta
memory > xany
memory > xint
memory > xhasattr
memory > xx
memory > xsuper
memory > xenum
memory > xzip
memory > xkey
memory > xmember
memory > xlist
memory > xkwds
memory > xtuple
memory > xisinstance
memory > xPromise
memory > xlen
memory > xdict
[] > enums
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_generate_next_value_
        memory > x__str__
        memory > x__contains__
        memory > xnames
        memory > x__all__
        memory > x__new__
        memory > xvalues
        memory > x__repr__
        memory > xlabels
        memory > xlabel
        memory > xchoices
        memory > xdo_not_call_in_templates
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("Choices") ("IntegerChoices") ("TextChoices"))
            (((unsupported)).apply (((xenum).xEnumMeta)))
              seq
                unsupported
                x__new__.write
                  [xmetacls xclassname xbases xclassdict]
                    memory > xvalue
                    memory > xcls
                    memory > xlabel
                    memory > xlabels
                    seq > @
                      (((unsupported)).apply)
                        xlabels.write (((unsupported)).apply)
                        (((unsupported)).apply ((xkey)) (((xclassdict).x_member_names)))
                          seq
                            xvalue.write (((unsupported)).apply ((xclassdict)) ((xkey)))
                            (((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).and ((((xlen)).apply ((xvalue))).greater 1)).and (((xisinstance)).apply ((((unsupported)).apply ((xvalue)) ((1.neg)))) ((((unsupported)).apply ((xPromise)) ((xstr)))))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xvalue)))) ((xlabel)))) ((xvalue)))
                                xvalue.write (((xtuple)).apply ((xvalue)))
                              xlabel.write (((((((xkey).xreplace)).apply ("_") (" ")).xtitle)).apply)
                            bogusForceDataize.write ((((xlabels).xappend)).apply ((xlabel)))
                            bogusForceDataize.write ((((xdict).x__setitem__)).apply ((xclassdict)) ((xkey)) ((xvalue)))
                        xcls.write ((((((xsuper)).apply).x__new__)).apply ((xmetacls)) ((xclassname)) ((xbases)) ((xclassdict)) ((((unsupported)).apply ((xkwds)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmember)) ((xlabel)))) ((((xzip)).apply ((((((xcls).x__members__).xvalues)).apply)) ((xlabels)))))
                          (((unsupported)).apply (((xmember).x_label_)) ((xlabel)))
                        (((unsupported)).apply (((((xenum).xunique)).apply ((xcls)))))
                x__contains__.write
                  [xcls xmember]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xmember)) (((xenum).xEnum))).not).if
                          (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply ((((xx).xvalue).eq (xmember))) ((xx)) ((xcls)))))))
                        (((unsupported)).apply (((((((xsuper)).apply).x__contains__)).apply ((xmember)))))
                xnames.write
                  [xcls]
                    memory > xempty
                    seq > @
                      (((unsupported)).apply)
                        xempty.write ((((xhasattr)).apply ((xcls)) ("__empty__")).if (((unsupported)).apply ("__empty__")) (((unsupported)).apply))
                        (((unsupported)).apply (((xempty).add (((unsupported)).apply (((xmember).xname)) ((xmember)) ((xcls))))))
                xchoices.write
                  [xcls]
                    memory > xempty
                    seq > @
                      (((unsupported)).apply)
                        xempty.write ((((xhasattr)).apply ((xcls)) ("__empty__")).if (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") (((xcls).x__empty__))))) (((unsupported)).apply))
                        (((unsupported)).apply (((xempty).add (((unsupported)).apply ((((unsupported)).apply (((xmember).xvalue)) (((xmember).xlabel)))) ((xmember)) ((xcls))))))
                xlabels.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xlabel)) ((((unsupported)).apply ((x_)) ((xlabel)))) (((xcls).xchoices)))))
                xvalues.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((xvalue)) ((x_)))) (((xcls).xchoices)))))
            (((unsupported)).apply (((xenum).xEnum)) ((xChoicesMeta)))
              seq
                unsupported
                xlabel.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_label_)))
                xdo_not_call_in_templates.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (TRUE))
                x__str__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xstr)).apply (((xself).xvalue)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("{self.__class__.__qualname__}.{self._name_}"))
            (((unsupported)).apply ((xint)) ((xChoices)))
              seq
                unsupported
            (((unsupported)).apply ((xstr)) ((xChoices)))
              seq
                unsupported
                x_generate_next_value_.write
                  [xname xstart xcount xlast_values]
                    seq > @
                      (((unsupported)).apply ((xname)))