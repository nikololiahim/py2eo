memory > xblock_size
memory > xlist
memory > xopen_url
memory > xValueError
memory > xinfo
memory > xsocket
memory > xemail
memory > x_
memory > xurllib
memory > xopen
memory > xbytes
memory > xDeprecationWarning
memory > xkwargs
memory > xlen
memory > x__name__
memory > xf
memory > xrepr
memory > xint
memory > xhasattr
memory > xtime
memory > xfile_location
memory > xsupport
memory > xfileheaders
memory > xargs
memory > xOSError
memory > xos
memory > xunittest
memory > xattr
[] > test_urllibnet
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlogo
        memory > xtestURLread
        memory > xurl
        memory > xsetUp
        memory > xtest_bad_address
        memory > xtest_getcode
        memory > xtest_readlines
        memory > xtest_geturl
        memory > xurlretrieve
        memory > xTIMEOUT
        memory > xtest_basic
        memory > xtest_data_header
        memory > xtest_header
        memory > xtest_specified_path
        memory > xtearDown
        memory > xtest_reporthook
        memory > xtest_info
        memory > xurlopen
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xTIMEOUT.write 30.0
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (((xself).xTIMEOUT)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                xtestURLread.write
                  [xself]
                    memory > xdomain
                    memory > xf
                    seq > @
                      seq
                        xdomain.write ((((((xurllib).xparse).xurlparse)).apply (((xsupport).xTEST_HTTP_URL))).xnetloc)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xdomain)))))
                          seq
                            xf.write (((((xurllib).xrequest).xurlopen)).apply (((xsupport).xTEST_HTTP_URL)))
                            bogusForceDataize.write ((((xf).xread)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xurl.write "http://www.pythontest.net/"
                xurlopen.write
                  [xself]
                    memory > xresource
                    memory > xr
                    seq > @
                      (((unsupported)).apply)
                        xresource.write (((unsupported)).apply ((xargs)) (0))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xresource)))))
                          seq
                            xr.write (((((xurllib).xrequest).xurlopen)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                            (((unsupported)).apply)
                              (((unsupported)).apply ((xr)))
                              bogusForceDataize.write ((((xr).xclose)).apply)
                xtest_basic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xurlopen)).apply (((xself).xurl)))) ((xopen_url)))
                        seq
                          (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("read") ("readline") ("readlines") ("fileno") ("close") ("info") ("geturl"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xopen_url)) ((xattr)))) (("object returned from urlopen lacks the %s attribute".mod (xattr))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xopen_url).xread)).apply)) ("calling 'read' failed"))
                xtest_readlines.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xurlopen)).apply (((xself).xurl)))) ((xopen_url)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xopen_url).xreadline)).apply)) ((xbytes)) ("readline did not return a string"))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xopen_url).xreadlines)).apply)) ((xlist)) ("readlines did not return a list"))
                xtest_info.write
                  [xself]
                    memory > xinfo_obj
                    seq > @
                      (((unsupported)).apply (((((xself).xurlopen)).apply (((xself).xurl)))) ((xopen_url)))
                        seq
                          xinfo_obj.write ((((xopen_url).xinfo)).apply)
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinfo_obj)) ((((xemail).xmessage).xMessage)) ("object returned by 'info' is not an instance of email.message.Message"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinfo_obj).xget_content_subtype)).apply)) ("html"))
                xtest_geturl.write
                  [xself]
                    memory > xgotten_url
                    seq > @
                      (((unsupported)).apply (((((xself).xurlopen)).apply (((xself).xurl)))) ((xopen_url)))
                        seq
                          xgotten_url.write ((((xopen_url).xgeturl)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgotten_url)) (((xself).xurl)))
                xtest_getcode.write
                  [xself]
                    memory > xopen_url
                    memory > xcode
                    memory > xURL
                    seq > @
                      seq
                        xURL.write (((xself).xurl).add "XXXinvalidXXX")
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xURL)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                              xopen_url.write ((((((((xurllib).xrequest).xFancyURLopener)).apply).xopen)).apply ((xURL)))
                            (((unsupported)).apply)
                              xcode.write ((((xopen_url).xgetcode)).apply)
                              bogusForceDataize.write ((((xopen_url).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (404))
                xtest_bad_address.write
                  [xself]
                    memory > xbogus_domain
                    memory > xfailure_explanation
                    seq > @
                      seq
                        xbogus_domain.write "sadflkjsasf.i.nvali.d."
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xsocket).xgethostbyname)).apply ((xbogus_domain)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("%r should not resolve for test to work".mod (xbogus_domain))))
                        xfailure_explanation.write "opening an invalid URL did not raise OSError; can be caused by a broken DNS server (e.g. returns 404 or hijacks page)"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xOSError)) ((xfailure_explanation)))))
                          bogusForceDataize.write (((((xurllib).xrequest).xurlopen)).apply (((("http://{}/".xformat)).apply ((xbogus_domain)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xurlretrieve.write
                  [xself]
                    memory > xresource
                    seq > @
                      (((unsupported)).apply)
                        xresource.write (((unsupported)).apply ((xargs)) (0))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xresource)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfile_location)) ((xinfo)))) ((((((xurllib).xrequest).xurlretrieve)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                            (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xfile_location)) ((xinfo)))))
                              bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfile_location)))
                xtest_basic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xurlretrieve)).apply (((xself).xlogo)))) ((((unsupported)).apply ((xfile_location)) ((xinfo)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xfile_location)))) ("file location returned by urlretrieve is not a valid path"))
                          (((unsupported)).apply ((((xopen)).apply ((xfile_location)) ("rb"))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xread)).apply)) ("reading from the file location returned by urlretrieve failed"))
                xtest_specified_path.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xurlretrieve)).apply (((xself).xlogo)) (((xsupport).xTESTFN)))) ((((unsupported)).apply ((xfile_location)) ((xinfo)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfile_location)) (((xsupport).xTESTFN)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xfile_location)))))
                          (((unsupported)).apply ((((xopen)).apply ((xfile_location)) ("rb"))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf).xread)).apply)) ("reading from temporary file failed"))
                xtest_header.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xurlretrieve)).apply (((xself).xlogo)))) ((((unsupported)).apply ((xfile_location)) ((xinfo)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinfo)) ((((xemail).xmessage).xMessage)) ("info is not an instance of email.message.Message"))
                xlogo.write "http://www.pythontest.net/"
                xtest_data_header.write
                  [xself]
                    memory > xdateformat
                    memory > xdatevalue
                    seq > @
                      (((unsupported)).apply (((((xself).xurlretrieve)).apply (((xself).xlogo)))) ((((unsupported)).apply ((xfile_location)) ((xfileheaders)))))
                        seq
                          xdatevalue.write ((((xfileheaders).xget)).apply ("Date"))
                          xdateformat.write "%a, %d %b %Y %H:%M:%S GMT"
                          (((unsupported)).apply ((xValueError)))
                            bogusForceDataize.write ((((xtime).xstrptime)).apply ((xdatevalue)) ((xdateformat)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Date value not in %r format".mod (xdateformat))))
                xtest_reporthook.write
                  [xself]
                    memory > xrecording_reporthook
                    memory > xblock_sizes
                    memory > xrecords
                    memory > xrecords_repr
                    memory > xexpected_size
                    seq > @
                      seq
                        xrecords.write (((unsupported)).apply)
                        xrecording_reporthook.write
                          [xblocks xblock_size xtotal_size]
                            seq > @
                              bogusForceDataize.write ((((xrecords).xappend)).apply ((((unsupported)).apply ((xblocks)) ((xblock_size)) ((xtotal_size)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xurlretrieve)) (((xself).xlogo)) ((xrecording_reporthook)))) ((((unsupported)).apply ((xfile_location)) ((xfileheaders)))))
                          xexpected_size.write (((xint)).apply ((((unsupported)).apply ((xfileheaders)) ("Content-Length"))))
                        xrecords_repr.write (((xrepr)).apply ((xrecords)))
                        (((unsupported)).apply (((xself).xassertGreater)) ((((xlen)).apply ((xrecords)))) (1) ("There should always be two calls; the first one before the transfer starts."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrecords)) (0))) (0))) (0))
                        (((unsupported)).apply (((xself).xassertGreater)) ((((unsupported)).apply ((((unsupported)).apply ((xrecords)) (0))) (1))) (0) (("block size can't be 0 in %s".mod (xrecords_repr))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrecords)) (0))) (2))) ((xexpected_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrecords)) ((1.neg)))) (2))) ((xexpected_size)))
                        xblock_sizes.write (((unsupported)).apply ((xblock_size)) ((((unsupported)).apply ((x_)) ((xblock_size)) ((x_)))) ((xrecords)))
                        (((unsupported)).apply (((xself).xassertEqual)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrecords)) (0))) (1))))) ((xblock_sizes)) (("block sizes in %s must be equal".mod (xrecords_repr))))
                        (((unsupported)).apply (((xself).xassertGreaterEqual)) (((((unsupported)).apply ((((unsupported)).apply ((xrecords)) ((1.neg)))) (0)).mul (((unsupported)).apply ((((unsupported)).apply ((xrecords)) (0))) (1)))) ((xexpected_size)) (("number of blocks * block size must be >= total size in %s".mod (xrecords_repr))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)