memory > xFunc
memory > xValueError
memory > xstr
memory > xextra
memory > xIntegerField
memory > xValue
memory > xFloatField
memory > xTransform
memory > xexpression
memory > xFixDecimalInputMixin
memory > xisinstance
memory > xCast
memory > xmath
memory > xsuper
memory > xNumericOutputFieldMixin
memory > xgetattr
memory > xextra_context
[] > math
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_resolve_output_field
        memory > xarity
        memory > xlookup_name
        memory > xas_sqlite
        memory > xget_group_by_cols
        memory > x__init__
        memory > xfunction
        memory > xas_oracle
        memory > xas_mysql
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTransform)))
              seq
                xfunction.write "ABS"
                xlookup_name.write "abs"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "ACOS"
                xlookup_name.write "acos"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "ASIN"
                xlookup_name.write "asin"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "ATAN"
                xlookup_name.write "atan"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "ATAN2"
                xarity.write 2
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    seq > @
                      (((unsupported)).apply)
                        (((((xgetattr)).apply (((xconnection).xops)) ("spatialite") (FALSE)).not).or ((((xconnection).xops).xspatial_version).geq (((unsupported)).apply (5) (0) (0)))).if
                          (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply (((((xisinstance)).apply (((xexpression).xoutput_field)) ((xIntegerField))).if (((xCast)).apply ((xexpression)) ((((xFloatField)).apply))) (xexpression))) ((xexpression)) ((((unsupported)).apply (((((xself).xget_source_expressions)).apply)) ((((unsupported)).apply ((1.neg)))))))))
                        (((unsupported)).apply (((((xclone).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xTransform)))
              seq
                xfunction.write "CEILING"
                xlookup_name.write "ceil"
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ("CEIL") ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "COS"
                xlookup_name.write "cos"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "COT"
                xlookup_name.write "cot"
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ("(1 / TAN(%(expressions)s))") ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "DEGREES"
                xlookup_name.write "degrees"
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) (("((%%(expressions)s) * 180 / %s)".mod ((xmath).xpi))) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "EXP"
                xlookup_name.write "exp"
            (((unsupported)).apply ((xTransform)))
              seq
                xfunction.write "FLOOR"
                xlookup_name.write "floor"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "LN"
                xlookup_name.write "ln"
            (((unsupported)).apply ((xFixDecimalInputMixin)) ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "LOG"
                xarity.write 2
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    seq > @
                      (((unsupported)).apply)
                        ((((xgetattr)).apply (((xconnection).xops)) ("spatialite") (FALSE)).not).if
                          (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply (((((xself).xget_source_expressions)).apply)) ((((unsupported)).apply ((1.neg)))))))
                        (((unsupported)).apply (((((xclone).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xFixDecimalInputMixin)) ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "MOD"
                xarity.write 2
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "PI"
                xarity.write 0
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ((((xstr)).apply (((xmath).xpi)))) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "POWER"
                xarity.write 2
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "RADIANS"
                xlookup_name.write "radians"
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) (("((%%(expressions)s) * %s / 180)".mod ((xmath).xpi))) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xFunc)))
              seq
                xfunction.write "RANDOM"
                xarity.write 0
                xas_mysql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ("RAND") ((((unsupported)).apply ((xextra_context)))))))
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ("DBMS_RANDOM.VALUE") ((((unsupported)).apply ((xextra_context)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ("RAND") ((((unsupported)).apply ((xextra_context)))))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
            (((unsupported)).apply ((xFixDecimalInputMixin)) ((xTransform)))
              seq
                xfunction.write "ROUND"
                xlookup_name.write "round"
                xarity.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xexpression xprecision]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xexpression)) ((xprecision)) ((((unsupported)).apply ((xextra)))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xprecision
                    seq > @
                      (((unsupported)).apply)
                        xprecision.write (((unsupported)).apply (((((xself).xget_source_expressions)).apply)) (1))
                        ((((xisinstance)).apply ((xprecision)) ((xValue))).and (((xprecision).xvalue).less 0)).if
                          (((unsupported)).apply ((((xValueError)).apply ("SQLite does not support negative precision."))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sqlite)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                x_resolve_output_field.write
                  [xself]
                    memory > xsource
                    seq > @
                      seq
                        xsource.write (((unsupported)).apply (((((xself).xget_source_expressions)).apply)) (0))
                        (((unsupported)).apply (((xsource).xoutput_field)))
            (((unsupported)).apply ((xTransform)))
              seq
                xfunction.write "SIGN"
                xlookup_name.write "sign"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "SIN"
                xlookup_name.write "sin"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "SQRT"
                xlookup_name.write "sqrt"
            (((unsupported)).apply ((xNumericOutputFieldMixin)) ((xTransform)))
              seq
                xfunction.write "TAN"
                xlookup_name.write "tan"