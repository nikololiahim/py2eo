memory > xAttributeError
memory > xexpected
memory > xNewStyleClass
memory > xstr
memory > xrange
memory > xopen
memory > xtype
memory > xtest_name
memory > xbuiltins
memory > xos
memory > xgetattr
memory > xobject
memory > xlen
memory > xset
memory > xrepr
memory > xException
memory > xhasattr
memory > xissubclass
memory > xtuple
memory > xBaseException
memory > xNonBaseException
memory > xgiven
memory > x__file__
memory > xobject_
memory > xattr
memory > xzip
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_baseexception
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_catch_non_BaseException
        memory > xinterface_tests
        memory > xtest_interface_no_arg
        memory > xtest_raise_string
        memory > xtest_inheritance
        memory > xtest_interface_single_arg
        memory > xinterface_test_driver
        memory > xverify_instance_interface
        memory > xtest_interface_multi_arg
        memory > xtest_catch_BaseException_instance
        memory > xcatch_fails
        memory > xraise_fails
        memory > xtest_builtins_new_style
        memory > xtest_catch_string
        memory > xtest_raise_new_style_non_exception
        memory > xplatform_system
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_builtins_new_style.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xException)) ((xobject)))))
                xverify_instance_interface.write
                  [xself xins]
                    seq > @
                      (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("args") ("__str__") ("__repr__"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xins)) ((xattr)))) (("%s missing %s attribute".mod (((unsupported)).apply ((((xins).x__class__).x__name__)) ((xattr))))))
                xtest_inheritance.write
                  [xself]
                    memory > xplatform_name
                    memory > xinheritance_tree
                    memory > xexc_line
                    memory > xleft_bracket
                    memory > xlast_exc
                    memory > xparen_index
                    memory > xlast_depth
                    memory > xsuperclasses
                    memory > xexc
                    memory > xexc_set
                    memory > xsuperclass_name
                    memory > xdepth
                    memory > xexc_name
                    seq > @
                      seq
                        xexc_set.write (((xset)).apply)
                        (((unsupported)).apply ((xobject_)) ((((((xbuiltins).x__dict__).xvalues)).apply)))
                          (((unsupported)).apply ((xTypeError)))
                            (((xissubclass)).apply ((xobject_)) ((xBaseException))).if
                              bogusForceDataize.write ((((xexc_set).xadd)).apply (((xobject_).x__name__)))
                        xinheritance_tree.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply ((x__file__)))) (0))) ("exception_hierarchy.txt"))))
                        (((unsupported)).apply)
                          seq
                            xsuperclass_name.write (((((((xinheritance_tree).xreadline)).apply).xrstrip)).apply)
                            (((unsupported)).apply ((xAttributeError)))
                              xlast_exc.write (((xgetattr)).apply ((xbuiltins)) ((xsuperclass_name)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("base class %s not a built-in".mod (xsuperclass_name))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xsuperclass_name)) ((xexc_set)) (("%s not found".mod (xsuperclass_name))))
                            bogusForceDataize.write ((((xexc_set).xdiscard)).apply ((xsuperclass_name)))
                            xsuperclasses.write (((unsupported)).apply)
                            xlast_depth.write 0
                            (((unsupported)).apply ((xexc_line)) ((xinheritance_tree)))
                              seq
                                xexc_line.write ((((xexc_line).xrstrip)).apply)
                                xdepth.write ((((xexc_line).xrindex)).apply ("-"))
                                xexc_name.write (((unsupported)).apply ((xexc_line)) ((((unsupported)).apply (((xdepth).sub 2)))))
                                (((unsupported)).apply ("(") ((xexc_name))).if
                                  seq
                                    xparen_index.write ((((xexc_name).xindex)).apply ("("))
                                    xplatform_name.write (((unsupported)).apply ((xexc_name)) ((((unsupported)).apply (((xparen_index).sub 1)) ((1.neg)))))
                                    xexc_name.write (((unsupported)).apply ((xexc_name)) ((((unsupported)).apply (((xparen_index).sub 1)))))
                                    ((((xplatform_system)).apply).neq (xplatform_name)).if
                                      seq
                                        bogusForceDataize.write ((((xexc_set).xdiscard)).apply ((xexc_name)))
                                        (((unsupported)).apply)
                                (((unsupported)).apply ("[") ((xexc_name))).if
                                  seq
                                    xleft_bracket.write ((((xexc_name).xindex)).apply ("["))
                                    xexc_name.write (((unsupported)).apply ((xexc_name)) ((((unsupported)).apply (((xleft_bracket).sub 1)))))
                                (((unsupported)).apply ((xAttributeError)))
                                  xexc.write (((xgetattr)).apply ((xbuiltins)) ((xexc_name)))
                                  bogusForceDataize.write ((((xself).xfail)).apply (("%s not a built-in exception".mod (xexc_name))))
                                ((xlast_depth).less (xdepth)).if
                                  bogusForceDataize.write ((((xsuperclasses).xappend)).apply ((((unsupported)).apply ((xlast_depth)) ((xlast_exc)))))
                                  ((xlast_depth).greater (xdepth)).if
                                    while.
                                      ((((unsupported)).apply ((((unsupported)).apply ((xsuperclasses)) ((1.neg)))) (0)).geq (xdepth))
                                      [unused]
                                        seq > @
                                          bogusForceDataize.write ((((xsuperclasses).xpop)).apply)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xexc)) ((((unsupported)).apply ((((unsupported)).apply ((xsuperclasses)) ((1.neg)))) (1))))) (("%s is not a subclass of %s".mod (((unsupported)).apply (((xexc).x__name__)) (((((unsupported)).apply ((((unsupported)).apply ((xsuperclasses)) ((1.neg)))) (1)).x__name__))))))
                                (((unsupported)).apply ((xTypeError)))
                                  bogusForceDataize.write ((((xself).xverify_instance_interface)).apply ((((xexc)).apply)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xexc_name)) ((xexc_set)))
                                bogusForceDataize.write ((((xexc_set).xdiscard)).apply ((xexc_name)))
                                xlast_exc.write (xexc)
                                xlast_depth.write (xdepth)
                          bogusForceDataize.write ((((xinheritance_tree).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexc_set)))) (0) (("%s not accounted for".mod (xexc_set))))
                xinterface_tests.write (((unsupported)).apply ("length") ("args") ("str") ("repr"))
                xinterface_test_driver.write
                  [xself xresults]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xtest_name)) ((((unsupported)).apply ((xgiven)) ((xexpected)))))) ((((xzip)).apply (((xself).xinterface_tests)) ((xresults)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgiven)) ((xexpected)) (("%s: %s != %s".mod (((unsupported)).apply ((xtest_name)) ((xgiven)) ((xexpected))))))
                xtest_interface_single_arg.write
                  [xself]
                    memory > xresults
                    memory > xexc
                    memory > xarg
                    seq > @
                      seq
                        xarg.write "spam"
                        xexc.write (((xException)).apply ((xarg)))
                        xresults.write (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply (((xexc).xargs)))) (1))) ((((unsupported)).apply ((((unsupported)).apply (((xexc).xargs)) (0))) ((xarg)))) ((((unsupported)).apply ((((xstr)).apply ((xexc)))) ((((xstr)).apply ((xarg)))))) ((((unsupported)).apply ((((xrepr)).apply ((xexc)))) (("%s(%r)".mod (((unsupported)).apply ((((xexc).x__class__).x__name__)) ((xarg))))))))
                        bogusForceDataize.write ((((xself).xinterface_test_driver)).apply ((xresults)))
                xtest_interface_multi_arg.write
                  [xself]
                    memory > xargs
                    memory > xresults
                    memory > xexc
                    memory > xarg_count
                    seq > @
                      seq
                        xarg_count.write 3
                        xargs.write (((xtuple)).apply ((((xrange)).apply ((xarg_count)))))
                        xexc.write (((xException)).apply ((((unsupported)).apply ((xargs)))))
                        xresults.write (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply (((xexc).xargs)))) ((xarg_count)))) ((((unsupported)).apply (((xexc).xargs)) ((xargs)))) ((((unsupported)).apply ((((xstr)).apply ((xexc)))) ((((xstr)).apply ((xargs)))))) ((((unsupported)).apply ((((xrepr)).apply ((xexc)))) (((((xexc).x__class__).x__name__).sub (((xrepr)).apply (((xexc).xargs))))))))
                        bogusForceDataize.write ((((xself).xinterface_test_driver)).apply ((xresults)))
                xtest_interface_no_arg.write
                  [xself]
                    memory > xresults
                    memory > xexc
                    seq > @
                      seq
                        xexc.write (((xException)).apply)
                        xresults.write (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply (((xexc).xargs)))) (0))) ((((unsupported)).apply (((xexc).xargs)) ((((xtuple)).apply)))) ((((unsupported)).apply ((((xstr)).apply ((xexc)))) (""))) ((((unsupported)).apply ((((xrepr)).apply ((xexc)))) (((((xexc).x__class__).x__name__).sub "()")))))
                        bogusForceDataize.write ((((xself).xinterface_test_driver)).apply ((xresults)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xraise_fails.write
                  [xself xobject_]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((xobject_)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xfail)).apply (("TypeError expected for raising %s".mod (((xtype)).apply ((xobject_))))))
                xcatch_fails.write
                  [xself xobject_]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xTypeError)) ((xException)))
                          (((unsupported)).apply ((xobject_)))
                            (((unsupported)).apply ((xException)))
                          bogusForceDataize.write ((((xself).xfail)).apply (("TypeError expected when catching %s".mod (((xtype)).apply ((xobject_))))))
                        (((unsupported)).apply ((xTypeError)) ((xException)))
                          (((unsupported)).apply ((((unsupported)).apply ((xobject_)))))
                            (((unsupported)).apply ((xException)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply (("TypeError expected when catching %s as specified in a tuple".mod (((xtype)).apply ((xobject_))))))
                xtest_raise_new_style_non_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        bogusForceDataize.write ((((xself).xraise_fails)).apply ((xNewStyleClass)))
                        bogusForceDataize.write ((((xself).xraise_fails)).apply ((((xNewStyleClass)).apply)))
                xtest_raise_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xraise_fails)).apply ("spam"))
                xtest_catch_non_BaseException.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        bogusForceDataize.write ((((xself).xcatch_fails)).apply ((xNonBaseException)))
                        bogusForceDataize.write ((((xself).xcatch_fails)).apply ((((xNonBaseException)).apply)))
                xtest_catch_BaseException_instance.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcatch_fails)).apply ((((xBaseException)).apply)))
                xtest_catch_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcatch_fails)).apply ("spam"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)