memory > xfalse
memory > xstep
memory > xlist
memory > xValueError
memory > xrange
memory > xIndexError
memory > xstart
memory > xmax
memory > xint
memory > xhasattr
memory > xi
memory > xsuper
memory > xsorted
memory > xargs
memory > xzip
memory > xkwargs
memory > xTypeError
memory > xtotal_ordering
memory > xstop
memory > xslice
memory > xval
memory > xisinstance
memory > xlen
memory > xdict
[] > mutable_list
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_rebuild
        memory > xreverse
        memory > xindex
        memory > xpop
        memory > xextend
        memory > x__rmul__
        memory > xinsert
        memory > x__setitem__
        memory > x__add__
        memory > x__init__
        memory > x_assign_simple_slice
        memory > x__iadd__
        memory > x__radd__
        memory > x__eq__
        memory > xcount
        memory > x_check_allowed
        memory > x_set_slice
        memory > x_assign_extended_slice_rebuild
        memory > x__getitem__
        memory > x__imul__
        memory > x__delitem__
        memory > x_maxlength
        memory > x__lt__
        memory > x_set_single_rebuild
        memory > xappend
        memory > xsort
        memory > x_checkindex
        memory > x_assign_extended_slice
        memory > x__mul__
        memory > xremove
        memory > x_minlength
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xtotal_ordering)))
              seq
                (((unsupported)).apply)
                x_minlength.write 0
                x_maxlength.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply ((xself)) ("_get_single_internal")).not).if
                          (((unsupported)).apply (((xself).x_get_single_internal)) (((xself).x_get_single_external)))
                        ((((xhasattr)).apply ((xself)) ("_set_single")).not).if
                          seq
                            (((unsupported)).apply (((xself).x_set_single)) (((xself).x_set_single_rebuild)))
                            (((unsupported)).apply (((xself).x_assign_extended_slice)) (((xself).x_assign_extended_slice_rebuild)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x__getitem__.write
                  [xself xindex]
                    seq > @
                      seq
                        unsupported
                        (((xisinstance)).apply ((xindex)) ((xslice))).if
                          (((unsupported)).apply ((((unsupported)).apply (((((xself).x_get_single_external)).apply ((xi)))) ((xi)) ((((xrange)).apply ((((unsupported)).apply (((((xindex).xindices)).apply ((((xlen)).apply ((xself)))))))))))))
                          seq
                            xindex.write ((((xself).x_checkindex)).apply ((xindex)))
                            (((unsupported)).apply (((((xself).x_get_single_external)).apply ((xindex)))))
                x__delitem__.write
                  [xself xindex]
                    memory > xnewLen
                    memory > xindexRange
                    memory > xorigLen
                    memory > xnewItems
                    seq > @
                      seq
                        unsupported
                        ((((xisinstance)).apply ((xindex)) ((((unsupported)).apply ((xint)) ((xslice))))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply (("%s is not a legal index".mod (xindex))))))
                        xorigLen.write (((xlen)).apply ((xself)))
                        (((xisinstance)).apply ((xindex)) ((xint))).if
                          seq
                            xindex.write ((((xself).x_checkindex)).apply ((xindex)))
                            xindexRange.write (((unsupported)).apply ((xindex)))
                          xindexRange.write (((xrange)).apply ((((unsupported)).apply (((((xindex).xindices)).apply ((xorigLen)))))))
                        xnewLen.write ((xorigLen).sub (((xlen)).apply ((xindexRange))))
                        xnewItems.write (((unsupported)).apply (((((xself).x_get_single_internal)).apply ((xi)))) ((xi)) ((((xrange)).apply ((xorigLen)))) ((((unsupported)).apply ((xi)) ((xindexRange)))))
                        bogusForceDataize.write ((((xself).x_rebuild)).apply ((xnewLen)) ((xnewItems)))
                x__setitem__.write
                  [xself xindex xval]
                    seq > @
                      seq
                        unsupported
                        (((xisinstance)).apply ((xindex)) ((xslice))).if
                          bogusForceDataize.write ((((xself).x_set_slice)).apply ((xindex)) ((xval)))
                          seq
                            xindex.write ((((xself).x_checkindex)).apply ((xindex)))
                            bogusForceDataize.write ((((xself).x_check_allowed)).apply ((((unsupported)).apply ((xval)))))
                            bogusForceDataize.write ((((xself).x_set_single)).apply ((xindex)) ((xval)))
                x__add__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x__class__)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)))) ((((unsupported)).apply ((xother)))))))))
                x__radd__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xother).x__class__)).apply ((((unsupported)).apply ((((unsupported)).apply ((xother)))) ((((unsupported)).apply ((xself)))))))))
                x__iadd__.write
                  [xself xother]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xextend)).apply ((xother)))
                        (((unsupported)).apply ((xself)))
                x__mul__.write
                  [xself xn]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x__class__)).apply (((((xlist)).apply ((xself))).mul (xn))))))
                x__rmul__.write
                  [xself xn]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x__class__)).apply (((((xlist)).apply ((xself))).mul (xn))))))
                x__imul__.write
                  [xself xn]
                    memory > xcache
                    seq > @
                      seq
                        unsupported
                        ((xn).leq 0).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply)))))))
                          seq
                            xcache.write (((xlist)).apply ((xself)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (((xn).sub 1)))))
                              bogusForceDataize.write ((((xself).xextend)).apply ((xcache)))
                        (((unsupported)).apply ((xself)))
                x__eq__.write
                  [xself xother]
                    memory > xc
                    memory > xolen
                    seq > @
                      seq
                        xolen.write (((xlen)).apply ((xother)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xolen)))))
                          seq
                            (((unsupported)).apply ((xIndexError)))
                              xc.write ((((unsupported)).apply ((xself)) ((xi))).eq (((unsupported)).apply ((xother)) ((xi))))
                              (((unsupported)).apply ((xfalse)))
                            ((xc).not).if
                              (((unsupported)).apply ((xfalse)))
                        (((unsupported)).apply (((((xlen)).apply ((xself))).eq (xolen))))
                x__lt__.write
                  [xself xother]
                    memory > xc
                    memory > xolen
                    seq > @
                      seq
                        xolen.write (((xlen)).apply ((xother)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xolen)))))
                          seq
                            (((unsupported)).apply ((xIndexError)))
                              xc.write ((((unsupported)).apply ((xself)) ((xi))).less (((unsupported)).apply ((xother)) ((xi))))
                              (((unsupported)).apply (TRUE))
                            (xc).if
                              (((unsupported)).apply ((xc)))
                              ((((unsupported)).apply ((xother)) ((xi))).less (((unsupported)).apply ((xself)) ((xi)))).if
                                (((unsupported)).apply ((xfalse)))
                        (((unsupported)).apply (((((xlen)).apply ((xself))).less (xolen))))
                xcount.write
                  [xself xval]
                    memory > xcount
                    seq > @
                      seq
                        unsupported
                        xcount.write 0
                        (((unsupported)).apply ((xi)) ((xself)))
                          ((xval).eq (xi)).if
                            (((unsupported)).apply ((xcount)) (1))
                        (((unsupported)).apply ((xcount)))
                xindex.write
                  [xself xval]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) ((((xlen)).apply ((xself)))))))
                          ((((unsupported)).apply ((xself)) ((xi))).eq (xval)).if
                            (((unsupported)).apply ((xi)))
                        (((unsupported)).apply ((((xValueError)).apply (("%s not found in object".mod (xval))))))
                xappend.write
                  [xself xval]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply ((((xlen)).apply ((xself)))))))) ((((unsupported)).apply ((xval)))))
                xextend.write
                  [xself xvals]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply ((((xlen)).apply ((xself)))))))) ((xvals)))
                xinsert.write
                  [xself xindex xval]
                    seq > @
                      seq
                        unsupported
                        ((((xisinstance)).apply ((xindex)) ((xint))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply (("%s is not a legal index".mod (xindex))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply ((xindex)) ((xindex)))))) ((((unsupported)).apply ((xval)))))
                xpop.write
                  [xself xindex]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xresult.write (((unsupported)).apply ((xself)) ((xindex)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) ((xindex)))))))
                        (((unsupported)).apply ((xresult)))
                xremove.write
                  [xself xval]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xself)) (((((xself).xindex)).apply ((xval)))))))))
                xreverse.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xself)) ((((unsupported)).apply ((1.neg)) ((1.neg)))))))
                xsort.write
                  [xself xkey xreverse]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xsorted)) ((xself)) ((xkey)) ((xreverse)))))
                x_rebuild.write
                  [xself xnewLen xnewItems]
                    seq > @
                      seq
                        ((xnewLen).and ((xnewLen).less ((xself).x_minlength))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Must have at least %d items".mod ((xself).x_minlength))))))
                        ((((unsupported)).apply (((xself).x_maxlength)) ("None: is there a None literal in the EO language?")).and ((xnewLen).greater ((xself).x_maxlength))).if
                          (((unsupported)).apply ((((xValueError)).apply (("Cannot have more than %d items".mod ((xself).x_maxlength))))))
                        bogusForceDataize.write ((((xself).x_set_list)).apply ((xnewLen)) ((xnewItems)))
                x_set_single_rebuild.write
                  [xself xindex xvalue]
                    seq > @
                      bogusForceDataize.write ((((xself).x_set_slice)).apply ((((xslice)).apply ((xindex)) (((xindex).add 1)) (1))) ((((unsupported)).apply ((xvalue)))))
                x_checkindex.write
                  [xself xindex]
                    memory > xlength
                    seq > @
                      seq
                        xlength.write (((xlen)).apply ((xself)))
                        (((unsupported)).apply (0) ((xindex)) ((xlength))).if
                          (((unsupported)).apply ((xindex)))
                        (((unsupported)).apply (((xlength).neg)) ((xindex)) (0)).if
                          (((unsupported)).apply (((xindex).add (xlength))))
                        (((unsupported)).apply ((((xIndexError)).apply (("invalid index: %s".mod (xindex))))))
                x_check_allowed.write
                  [xself xitems]
                    seq > @
                      (((xhasattr)).apply ((xself)) ("_allowed")).if
                        (((unsupported)).apply ((xfalse)) ((((unsupported)).apply ((((xisinstance)).apply ((xval)) (((xself).x_allowed)))) ((xval)) ((xitems))))).if
                          (((unsupported)).apply ((((xTypeError)).apply ("Invalid type encountered in the arguments."))))
                x_set_slice.write
                  [xself xindex xvalues]
                    memory > xvalueList
                    memory > xorigLen
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xTypeError)))
                          xvalueList.write (((xlist)).apply ((xvalues)))
                          (((unsupported)).apply ((((xTypeError)).apply ("can only assign an iterable to a slice"))))
                        bogusForceDataize.write ((((xself).x_check_allowed)).apply ((xvalueList)))
                        xorigLen.write (((xlen)).apply ((xself)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))) (((((xindex).xindices)).apply ((xorigLen)))))
                        (((unsupported)).apply (((xindex).xstep)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).x_assign_simple_slice)).apply ((xstart)) ((xstop)) ((xvalueList)))
                          bogusForceDataize.write ((((xself).x_assign_extended_slice)).apply ((xstart)) ((xstop)) ((xstep)) ((xvalueList)))
                x_assign_extended_slice_rebuild.write
                  [xself xstart xstop xstep xvalueList]
                    memory > xindexList
                    memory > xnewLen
                    memory > xnewVals
                    memory > xnewItems
                    seq > @
                      seq
                        unsupported
                        xindexList.write (((xrange)).apply ((xstart)) ((xstop)) ((xstep)))
                        ((((xlen)).apply ((xvalueList))).neq (((xlen)).apply ((xindexList)))).if
                          (((unsupported)).apply ((((xValueError)).apply (("attempt to assign sequence of size %d to extended slice of size %d".mod (((unsupported)).apply ((((xlen)).apply ((xvalueList)))) ((((xlen)).apply ((xindexList))))))))))
                        xnewLen.write (((xlen)).apply ((xself)))
                        xnewVals.write (((xdict)).apply ((((xzip)).apply ((xindexList)) ((xvalueList)))))
                        xnewItems.write
                          []
                            seq > @
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xnewLen)))))
                                (((unsupported)).apply ((xi)) ((xnewVals))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xnewVals)) ((xi)))))
                                  (((unsupported)).apply (((((xself).x_get_single_internal)).apply ((xi)))))
                        bogusForceDataize.write ((((xself).x_rebuild)).apply ((xnewLen)) ((((xnewItems)).apply)))
                x_assign_extended_slice.write
                  [xself xstart xstop xstep xvalueList]
                    memory > xindexList
                    seq > @
                      seq
                        unsupported
                        xindexList.write (((xrange)).apply ((xstart)) ((xstop)) ((xstep)))
                        ((((xlen)).apply ((xvalueList))).neq (((xlen)).apply ((xindexList)))).if
                          (((unsupported)).apply ((((xValueError)).apply (("attempt to assign sequence of size %d to extended slice of size %d".mod (((unsupported)).apply ((((xlen)).apply ((xvalueList)))) ((((xlen)).apply ((xindexList))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xval)))) ((((xzip)).apply ((xindexList)) ((xvalueList)))))
                          bogusForceDataize.write ((((xself).x_set_single)).apply ((xi)) ((xval)))
                x_assign_simple_slice.write
                  [xself xstart xstop xvalueList]
                    memory > xnewLen
                    memory > xorigLen
                    memory > xnewItems
                    seq > @
                      seq
                        unsupported
                        xorigLen.write (((xlen)).apply ((xself)))
                        xstop.write (((xmax)).apply ((xstart)) ((xstop)))
                        xnewLen.write ((((xorigLen).sub (xstop)).add (xstart)).add (((xlen)).apply ((xvalueList))))
                        xnewItems.write
                          []
                            seq > @
                              (((unsupported)).apply ((xi)) ((((xrange)).apply (((xorigLen).add 1)))))
                                seq
                                  ((xi).eq (xstart)).if
                                    (((unsupported)).apply ((xvalueList)))
                                  ((xi).less (xorigLen)).if
                                    (((xi).less (xstart)).or ((xi).geq (xstop))).if
                                      (((unsupported)).apply (((((xself).x_get_single_internal)).apply ((xi)))))
                        bogusForceDataize.write ((((xself).x_rebuild)).apply ((xnewLen)) ((((xnewItems)).apply)))