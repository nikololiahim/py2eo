memory > xplatform
memory > xlist
memory > x_testcapi
memory > xopen
memory > xi
memory > xkwargs
memory > xcm
memory > xk
memory > xassert_python_ok
memory > xValueError
memory > xsignal
memory > xerrno
memory > xpwd
memory > xstr
memory > xinst
memory > xwarnings
memory > xg
memory > xstat
memory > xFileNotFoundError
memory > xt
memory > xteardown_file
memory > xreader
memory > xrange
memory > xNotImplementedError
memory > xbytearray
memory > xKeyError
memory > xrfd
memory > xfn
memory > xcpu
memory > xmax
memory > xRuntimeWarning
memory > xerr
memory > xtempfile
memory > xsched
memory > xtextwrap
memory > xtype
memory > xf
memory > xw
memory > xset
memory > xint
memory > xr
memory > xhasattr
memory > xtime
memory > xOverflowError
memory > xsupport
memory > xsys
memory > xbytes
memory > xtuple
memory > xsorted
memory > xDeprecationWarning
memory > xTestPosixSpawnP
memory > xfloat
memory > xcls
memory > xargs
memory > xOSError
memory > xos
memory > xwfd
memory > xchildfile
memory > xval
memory > xgetattr
memory > xv
memory > xPosixTester
memory > xPermissionError
memory > xdst
memory > xe
memory > x__file__
memory > x_PosixSpawnMixin
memory > xname
memory > xunittest
memory > xexc
memory > xmap
memory > xn
memory > xpid2
memory > xstatus
memory > xmemoryview
memory > xobject
memory > xsysconfig
memory > xlen
memory > xidg
memory > xoutfile
memory > xTestPosixSpawn
memory > xfp
memory > xTypeError
memory > xPosixGroupsTester
memory > x__name__
memory > xgroups
memory > xwriter
[] > test_posix
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_fstatvfs
        memory > xtest_osexlock
        memory > xtest_sched_yield
        memory > xtest_chflags
        memory > xtest_listdir_bytes_like
        memory > xrequires_sched_affinity
        memory > xtest_stat_dir_fd
        memory > xtest_getresuid
        memory > xtest_mkdir_dir_fd
        memory > x_test_all_chown_common
        memory > xtest_sched_priority
        memory > xtest_returns_pid
        memory > xtest_getresgid
        memory > xtest_open_file
        memory > xtest_mkfifo_dir_fd
        memory > xtest_umask
        memory > xtest_listdir
        memory > xtest_sched_rr_get_interval
        memory > xtest_posix_fallocate_errno
        memory > xtest_access
        memory > xtest_sched_setaffinity
        memory > xtest_symlink_dir_fd
        memory > xtest_strerror
        memory > xtest_getcwd_long_pathnames
        memory > xtest_dup
        memory > xtest_open_dir_fd
        memory > xtest_getgroups
        memory > xtest_pipe2
        memory > xtest_resetids
        memory > xtest_sched_getaffinity
        memory > xtest_setresuid_exception
        memory > xtest_chown
        memory > xtestNoArgFunctions
        memory > xtest_multiple_file_actions
        memory > xtest_dup2
        memory > xtest_no_such_executable
        memory > xtest_setsigmask_wrong_type
        memory > xtest_pipe
        memory > x_DUMMY_SYMLINK
        memory > xtest_environ
        memory > xtest_utime
        memory > xtest_pwrite
        memory > xtest_lockf
        memory > xtest_lchown
        memory > xtest_setsigmask
        memory > xtest_main
        memory > xtest_path_with_null_character
        memory > xspawn_func
        memory > xtest_posix_fadvise
        memory > xtest_fstat
        memory > xtest_path_with_null_byte
        memory > xtest_setresuid
        memory > xtest_lchflags_symlink
        memory > xtest_specify_environment
        memory > xposix
        memory > xtest_chdir
        memory > x_supports_sched
        memory > xtest_setpgroup
        memory > xtest_access_dir_fd
        memory > xtest_utime_dir_fd
        memory > xtest_posix_fadvise_errno
        memory > xtest_readv_overflow_32bits
        memory > xsetUp
        memory > xtest_setsigdef_wrong_type
        memory > xtest_setresgid_exception
        memory > xtest_rtld_constants
        memory > xtest_pwritev_flags
        memory > xtest_readlink_dir_fd
        memory > xtest_writev_overflow_32bits
        memory > xtest_get_and_set_scheduler_and_param
        memory > xtest_osshlock
        memory > xtest_resetids_explicit_default
        memory > xtest_setsigdef
        memory > xtest_stat
        memory > xtest_unlink_dir_fd
        memory > xtest_mknod_dir_fd
        memory > xtest_setgroups
        memory > xtest_setscheduler_only_param
        memory > xtest_getgrouplist
        memory > xtest_utime_with_fd
        memory > xtest_setpgroup_wrong_type
        memory > xtest_register_at_fork
        memory > xtest_ftruncate
        memory > xtest_chown_dir_fd
        memory > xtest_preadv_overflow_32bits
        memory > xtest_posix_spawnp
        memory > xtest_mkfifo
        memory > xtest_pwritev_overflow_32bits
        memory > xtest_pipe2_c_limits
        memory > xtest_posix_fallocate
        memory > xtest_empty_file_actions
        memory > xtest_listdir_default
        memory > xtest_link_dir_fd
        memory > xtest_preadv_flags
        memory > xtest_makedev
        memory > xtest_listdir_bytes
        memory > xtest_fs_holes
        memory > xtest_setsid
        memory > xtest_readv
        memory > xtest_pwritev
        memory > xtest_path_error2
        memory > xtest_bad_file_actions
        memory > xrequires_sched_h
        memory > xtest_setresgid
        memory > xrequires_32b
        memory > xtest_none_file_actions
        memory > xrequires_sched
        memory > xtest_fchown
        memory > xtest_rename_dir_fd
        memory > xtest_confstr
        memory > xtest_initgroups
        memory > xtest_close_file
        memory > xtest_lchflags_regular_file
        memory > xtest_waitid
        memory > xtest_fexecve
        memory > x_test_chflags_regular_file
        memory > xtest_writev
        memory > xtest_utime_nofollow_symlinks
        memory > xtest_listdir_fd
        memory > xtest_setscheduler_with_policy
        memory > xtest_preadv
        memory > xtest_chmod_dir_fd
        memory > xtest_truncate
        memory > xtest_mknod
        memory > xtearDown
        memory > xtest_pread
        memory > xtest_oscloexec
        memory > xpython_args
        memory > xtest_statvfs
        memory > xtest_resetids_wrong_type
        memory > xtest_putenv
        memory > xNOOP_PROGRAM
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            xposix.write ((((xsupport).ximport_module)).apply ("posix"))
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_DUMMY_SYMLINK.write (((((xos).xpath).xjoin)).apply ((((xsupport).xTESTFN).add "-dummy-symlink")) (((((xtempfile).xgettempdir)).apply)))
            xrequires_32b.write ((((xunittest).xskipUnless)).apply ((((xsys).xmaxsize).less (((unsupported)).apply (2) (32)))) ("test is only meaningful on 32-bit builds"))
            x_supports_sched.write
              []
                seq > @
                  seq
                    ((((xhasattr)).apply ((xposix)) ("sched_getscheduler")).not).if
                      (((unsupported)).apply (FALSE))
                    (((unsupported)).apply ((xOSError)))
                      bogusForceDataize.write ((((xposix).xsched_getscheduler)).apply (0))
                      (((xe).xerrno).eq ((xerrno).xENOSYS)).if
                        (((unsupported)).apply (FALSE))
                    (((unsupported)).apply (TRUE))
            xrequires_sched.write ((((xunittest).xskipUnless)).apply ((((x_supports_sched)).apply)) ("requires POSIX scheduler API"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xfp
                    seq > @
                      seq
                        xfp.write (((xopen)).apply (((xsupport).xTESTFN)) ("w+"))
                        bogusForceDataize.write ((((xfp).xclose)).apply)
                        (((unsupported)).apply (((xself).xteardown_files)) ((((unsupported)).apply (((xsupport).xTESTFN)))))
                        (((unsupported)).apply (((xself).x_warnings_manager)) (((((xsupport).xcheck_warnings)).apply)))
                        bogusForceDataize.write (((((xself).x_warnings_manager).x__enter__)).apply)
                        bogusForceDataize.write ((((xwarnings).xfilterwarnings)).apply ("ignore") (".* potential security risk .*") ((xRuntimeWarning)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xteardown_file)) (((xself).xteardown_files)))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xteardown_file)))
                        bogusForceDataize.write (((((xself).x_warnings_manager).x__exit__)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtestNoArgFunctions.write
                  [xself]
                    memory > xposix_func
                    memory > xNO_ARG_FUNCTIONS
                    seq > @
                      seq
                        xNO_ARG_FUNCTIONS.write (((unsupported)).apply ("ctermid") ("getcwd") ("getcwdb") ("uname") ("times") ("getloadavg") ("getegid") ("geteuid") ("getgid") ("getgroups") ("getpid") ("getpgrp") ("getppid") ("getuid") ("sync"))
                        (((unsupported)).apply ((xname)) ((xNO_ARG_FUNCTIONS)))
                          seq
                            xposix_func.write (((xgetattr)).apply ((xposix)) ((xname)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xposix_func)) ("None: is there a None literal in the EO language?")).if
                              seq
                                bogusForceDataize.write (((xposix_func)).apply)
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xposix_func)) (1))
                xtest_getresuid.write
                  [xself]
                    memory > xuser_ids
                    seq > @
                      (((unsupported)).apply)
                        xuser_ids.write ((((xposix).xgetresuid)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xuser_ids)))) (3))
                        (((unsupported)).apply ((xval)) ((xuser_ids)))
                          bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xval)) (0))
                xtest_getresgid.write
                  [xself]
                    memory > xgroup_ids
                    seq > @
                      (((unsupported)).apply)
                        xgroup_ids.write ((((xposix).xgetresgid)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xgroup_ids)))) (3))
                        (((unsupported)).apply ((xval)) ((xgroup_ids)))
                          bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xval)) (0))
                xtest_setresuid.write
                  [xself]
                    memory > xcurrent_user_ids
                    seq > @
                      (((unsupported)).apply)
                        xcurrent_user_ids.write ((((xposix).xgetresuid)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xposix).xsetresuid)).apply ((((unsupported)).apply ((xcurrent_user_ids)))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xposix).xsetresuid)).apply ((1.neg)) ((1.neg)) ((1.neg)))))
                xtest_setresuid_exception.write
                  [xself]
                    memory > xcurrent_user_ids
                    memory > xnew_user_ids
                    seq > @
                      (((unsupported)).apply)
                        xcurrent_user_ids.write ((((xposix).xgetresuid)).apply)
                        (((unsupported)).apply (0) ((xcurrent_user_ids))).if
                          seq
                            xnew_user_ids.write (((unsupported)).apply (((((unsupported)).apply ((xcurrent_user_ids)) (0)).add 1)) ((1.neg)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsetresuid)) ((((unsupported)).apply ((xnew_user_ids)))))
                xtest_setresgid.write
                  [xself]
                    memory > xcurrent_group_ids
                    seq > @
                      (((unsupported)).apply)
                        xcurrent_group_ids.write ((((xposix).xgetresgid)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xposix).xsetresgid)).apply ((((unsupported)).apply ((xcurrent_group_ids)))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xposix).xsetresgid)).apply ((1.neg)) ((1.neg)) ((1.neg)))))
                xtest_setresgid_exception.write
                  [xself]
                    memory > xnew_group_ids
                    memory > xcurrent_group_ids
                    seq > @
                      (((unsupported)).apply)
                        xcurrent_group_ids.write ((((xposix).xgetresgid)).apply)
                        (((unsupported)).apply (0) ((xcurrent_group_ids))).if
                          seq
                            xnew_group_ids.write (((unsupported)).apply (((((unsupported)).apply ((xcurrent_group_ids)) (0)).add 1)) ((1.neg)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsetresgid)) ((((unsupported)).apply ((xnew_group_ids)))))
                xtest_initgroups.write
                  [xself]
                    memory > xname
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xinitgroups)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xinitgroups)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xinitgroups)) (3) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xinitgroups)) ("foo") (3) ((((xobject)).apply)))
                        (((((xos).xgetuid)).apply).neq 0).if
                          seq
                            (((unsupported)).apply ((xKeyError)))
                              xname.write (((((xpwd).xgetpwuid)).apply (((((xposix).xgetuid)).apply))).xpw_name)
                              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("need a pwd entry"))))
                            (((unsupported)).apply ((xOSError)))
                              bogusForceDataize.write ((((xposix).xinitgroups)).apply ((xname)) (13))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xerrno)) (((xerrno).xEPERM)))
                              bogusForceDataize.write ((((xself).xfail)).apply ("Expected OSError to be raised by initgroups"))
                xtest_statvfs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstatvfs)).apply (((xos).xcurdir)))))
                xtest_fstatvfs.write
                  [xself]
                    memory > xfp
                    seq > @
                      (((unsupported)).apply)
                        xfp.write (((xopen)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xfstatvfs)).apply (((((xfp).xfileno)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstatvfs)).apply (((((xfp).xfileno)).apply)))))
                          bogusForceDataize.write ((((xfp).xclose)).apply)
                xtest_ftruncate.write
                  [xself]
                    memory > xfp
                    seq > @
                      (((unsupported)).apply)
                        xfp.write (((xopen)).apply (((xsupport).xTESTFN)) ("w+"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xfp).xwrite)).apply ("test"))
                            bogusForceDataize.write ((((xfp).xflush)).apply)
                            bogusForceDataize.write ((((xposix).xftruncate)).apply (((((xfp).xfileno)).apply)) (0))
                          bogusForceDataize.write ((((xfp).xclose)).apply)
                xtest_truncate.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("w"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xwrite)).apply ("test"))
                            bogusForceDataize.write ((((xfp).xflush)).apply)
                        bogusForceDataize.write ((((xposix).xtruncate)).apply (((xsupport).xTESTFN)) (0))
                xtest_fexecve.write
                  [xself]
                    memory > xpid
                    memory > xfp
                    seq > @
                      (((unsupported)).apply)
                        xfp.write ((((xos).xopen)).apply (((xsys).xexecutable)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            xpid.write ((((xos).xfork)).apply)
                            ((xpid).eq 0).if
                              seq
                                bogusForceDataize.write ((((xos).xchdir)).apply ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xsys).xexecutable)))) (0))))
                                bogusForceDataize.write ((((xposix).xexecve)).apply ((xfp)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfp)))
                xtest_waitid.write
                  [xself]
                    memory > xpid
                    memory > xres
                    seq > @
                      (((unsupported)).apply)
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          seq
                            bogusForceDataize.write ((((xos).xchdir)).apply ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xsys).xexecutable)))) (0))))
                            bogusForceDataize.write ((((xposix).xexecve)).apply (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)))
                          seq
                            xres.write ((((xposix).xwaitid)).apply (((xposix).xP_PID)) ((xpid)) (((xposix).xWEXITED)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpid)) (((xres).xsi_pid)))
                xtest_register_at_fork.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Positional args not allowed"))))
                          bogusForceDataize.write ((((xos).xregister_at_fork)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must be callable"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) (2))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must be callable"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("three"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must be callable"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("Five"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must not be None"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must not be None"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Args must not be None"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Invalid arg was allowed"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply (3))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ("Invalid arg was allowed"))))
                          (((unsupported)).apply (((xos).xregister_at_fork)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) (""))
                        xcode.write (((unsupported)).apply)
                        bogusForceDataize.write (((xassert_python_ok)).apply ("-c") ((xcode)))
                xtest_lockf.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xposix).xlockf)).apply ((xfd)) (((xposix).xF_LOCK)) (4))
                            bogusForceDataize.write ((((xposix).xlockf)).apply ((xfd)) (((xposix).xF_ULOCK)) (4))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_pread.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("es") (((((xposix).xpread)).apply ((xfd)) (2) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("te") (((((xposix).xread)).apply ((xfd)) (2))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_preadv.write
                  [xself]
                    memory > xbuf
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test1tt2t3t5t6t6t8"))
                            xbuf.write (((unsupported)).apply ((((xbytearray)).apply ((xi)))) ((xi)) ((((unsupported)).apply (5) (3) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xpreadv)).apply ((xfd)) ((xbuf)) (3))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("t1tt2") ("t3t") ("5t"))) ((((xlist)).apply ((xbuf)))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_preadv_flags.write
                  [xself]
                    memory > xbuf
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply ((xNotImplementedError)) ((xOSError)))
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test1tt2t3t5t6t6t8"))
                            xbuf.write (((unsupported)).apply ((((xbytearray)).apply ((xi)))) ((xi)) ((((unsupported)).apply (5) (3) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xpreadv)).apply ((xfd)) ((xbuf)) (3) (((xos).xRWF_HIPRI)))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("t1tt2") ("t3t") ("5t"))) ((((xlist)).apply ((xbuf)))))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("preadv2 not available"))
                          (((unsupported)).apply (((xinst).xerrno)) ((((unsupported)).apply (((xerrno).xEINVAL)) (((xerrno).xENOTSUP))))).if
                            (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("RWF_HIPRI is not supported by the current system"))))
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_preadv_overflow_32bits.write
                  [xself]
                    memory > xbuf
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            xbuf.write ((((unsupported)).apply ((((xbytearray)).apply ((((unsupported)).apply (2) (16)))))).mul (((unsupported)).apply (2) (15)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xos).xpreadv)).apply ((xfd)) ((xbuf)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((unsupported)).apply ((xbuf)) (0))))) (("0".mul (((unsupported)).apply (2) (16)))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_pwrite.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xposix).xpwrite)).apply ((xfd)) ("xx") (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("txxt") (((((xposix).xread)).apply ((xfd)) (4))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_pwritev.write
                  [xself]
                    memory > xn
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("xx"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            xn.write ((((xos).xpwritev)).apply ((xfd)) ((((unsupported)).apply ("test1") ("tt2") ("t3"))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (10))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("xxtest1tt2t3") (((((xposix).xread)).apply ((xfd)) (100))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_pwritev_flags.write
                  [xself]
                    memory > xn
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("xx"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            xn.write ((((xos).xpwritev)).apply ((xfd)) ((((unsupported)).apply ("test1") ("tt2") ("t3"))) (2) (((xos).xRWF_SYNC)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (10))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("xxtest1tt2") (((((xposix).xread)).apply ((xfd)) (100))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_pwritev_overflow_32bits.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xos).xpwritev)).apply ((xfd)) (((((unsupported)).apply (("x".mul (((unsupported)).apply (2) (16))))).mul (((unsupported)).apply (2) (15)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_posix_fallocate.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xposix).xposix_fallocate)).apply ((xfd)) (0) (10))
                          ((((xinst).xerrno).eq ((xerrno).xEINVAL)).and (((((xsys).xplatform).xstartswith)).apply ((((unsupported)).apply ("sunos") ("freebsd") ("netbsd") ("openbsd") ("gnukfreebsd"))))).if
                            (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("test may fail on ZFS filesystems"))))
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_posix_fallocate_errno.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xposix).xposix_fallocate)).apply ((42.neg)) (0) (10))
                          (((xinst).xerrno).neq ((xerrno).xEBADF)).if
                            (((unsupported)).apply)
                xtest_posix_fadvise.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xposix).xposix_fadvise)).apply ((xfd)) (0) (0) (((xposix).xPOSIX_FADV_WILLNEED)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_posix_fadvise_errno.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xposix).xposix_fadvise)).apply ((42.neg)) (0) (0) (((xposix).xPOSIX_FADV_WILLNEED)))
                          (((xinst).xerrno).neq ((xerrno).xEBADF)).if
                            (((unsupported)).apply)
                xtest_utime_with_fd.write
                  [xself]
                    memory > xfd
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        xnow.write ((((xtime).xtime)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xposix).xutime)).apply ((xfd)))
                            bogusForceDataize.write ((((xposix).xutime)).apply ((xfd)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ((xnow)) ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xnow)))))
                            bogusForceDataize.write ((((xposix).xutime)).apply ((xfd)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((xnow)))))))
                            bogusForceDataize.write ((((xposix).xutime)).apply ((xfd)) ((((unsupported)).apply ((xnow)) ((xnow)))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ((xnow)) ((xnow)))) ((((unsupported)).apply ((xnow)) ((xnow)))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ((xnow)) (0))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xnow)) (0))))
                            bogusForceDataize.write ((((xposix).xutime)).apply ((xfd)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((((xnow).sub (((xint)).apply ((xnow)))).mul (((unsupported)).apply))))))))
                            (((unsupported)).apply (((xposix).xutime)) ((xfd)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((((xnow).sub (((xint)).apply ((xnow)))).mul (((unsupported)).apply))))))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_utime_nofollow_symlinks.write
                  [xself]
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        xnow.write ((((xtime).xtime)).apply)
                        (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ("None: is there a None literal in the EO language?") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ("None: is there a None literal in the EO language?"))) (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xnow)))) (FALSE))
                        (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((xnow)))))) (FALSE))
                        (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ((xnow)))) (FALSE))
                        (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) (FALSE))
                xtest_writev.write
                  [xself]
                    memory > xn
                    memory > xsize
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            xn.write ((((xos).xwritev)).apply ((xfd)) ((((unsupported)).apply ("test1") ("tt2") ("t3"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (10))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("test1tt2t3") (((((xposix).xread)).apply ((xfd)) (10))))
                            (((unsupported)).apply ((xOSError)))
                              xsize.write ((((xposix).xwritev)).apply ((xfd)) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsize)) (0))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_writev_overflow_32bits.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xos).xwritev)).apply ((xfd)) (((((unsupported)).apply (("x".mul (((unsupported)).apply (2) (16))))).mul (((unsupported)).apply (2) (15)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_readv.write
                  [xself]
                    memory > xsize
                    memory > xbuf
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xwrite)).apply ((xfd)) ("test1tt2t3"))
                            bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (0) (((xos).xSEEK_SET)))
                            xbuf.write (((unsupported)).apply ((((xbytearray)).apply ((xi)))) ((xi)) ((((unsupported)).apply (5) (3) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xreadv)).apply ((xfd)) ((xbuf)))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("test1") ("tt2") ("t3"))) ((((unsupported)).apply ((((xbytes)).apply ((xi)))) ((xi)) ((xbuf)))))
                            (((unsupported)).apply ((xOSError)))
                              xsize.write ((((xposix).xreadv)).apply ((xfd)) ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsize)) (0))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_readv_overflow_32bits.write
                  [xself]
                    memory > xbuf
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDWR).or ((xos).xO_CREAT))))
                        (((unsupported)).apply)
                          seq
                            xbuf.write ((((unsupported)).apply ((((xbytearray)).apply ((((unsupported)).apply (2) (16)))))).mul (((unsupported)).apply (2) (15)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xos).xreadv)).apply ((xfd)) ((xbuf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xEINVAL)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((unsupported)).apply ((xbuf)) (0))))) (("0".mul (((unsupported)).apply (2) (16)))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_dup.write
                  [xself]
                    memory > xfp
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfp.write (((xopen)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply)
                          seq
                            xfd.write ((((xposix).xdup)).apply (((((xfp).xfileno)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfd)) ((xint)))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                          bogusForceDataize.write ((((xfp).xclose)).apply)
                xtest_confstr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposix).xconfstr)) ("CS_garbage"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xlen)).apply (((((xposix).xconfstr)).apply ("CS_PATH")))).greater 0)) (TRUE))
                xtest_dup2.write
                  [xself]
                    memory > xfp2
                    memory > xfp1
                    seq > @
                      (((unsupported)).apply)
                        xfp1.write (((xopen)).apply (((xsupport).xTESTFN)))
                        xfp2.write (((xopen)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xposix).xdup2)).apply (((((xfp1).xfileno)).apply)) (((((xfp2).xfileno)).apply)))
                          seq
                            bogusForceDataize.write ((((xfp1).xclose)).apply)
                            bogusForceDataize.write ((((xfp2).xclose)).apply)
                xtest_oscloexec.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) ((((xos).xO_RDONLY).or ((xos).xO_CLOEXEC))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xfd)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xos).xget_inheritable)).apply ((xfd)))))
                xtest_osexlock.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_EXLOCK)).or ((xos).xO_CREAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xopen)) (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_EXLOCK)).or ((xos).xO_NONBLOCK))))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                        (((xhasattr)).apply ((xposix)) ("O_SHLOCK")).if
                          seq
                            xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_SHLOCK)).or ((xos).xO_CREAT))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xopen)) (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_EXLOCK)).or ((xos).xO_NONBLOCK))))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_osshlock.write
                  [xself]
                    memory > xfd1
                    memory > xfd
                    memory > xfd2
                    seq > @
                      (((unsupported)).apply)
                        xfd1.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_SHLOCK)).or ((xos).xO_CREAT))))
                        xfd2.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_SHLOCK)).or ((xos).xO_CREAT))))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xfd2)))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xfd1)))
                        (((xhasattr)).apply ((xposix)) ("O_EXLOCK")).if
                          seq
                            xfd.write ((((xos).xopen)).apply (((xsupport).xTESTFN)) (((((xos).xO_WRONLY).or ((xos).xO_SHLOCK)).or ((xos).xO_CREAT))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xopen)) (((xsupport).xTESTFN)) (((((xos).xO_RDONLY).or ((xos).xO_EXLOCK)).or ((xos).xO_NONBLOCK))))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtest_fstat.write
                  [xself]
                    memory > xfp
                    seq > @
                      (((unsupported)).apply)
                        xfp.write (((xopen)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xfstat)).apply (((((xfp).xfileno)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstat)).apply (((((xfp).xfileno)).apply)))))
                            bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be string, bytes, os.PathLike or integer, not") (((xposix).xstat)) ((((xfloat)).apply (((((xfp).xfileno)).apply)))))
                          bogusForceDataize.write ((((xfp).xclose)).apply)
                xtest_stat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstat)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstat)).apply (((((xos).xfsencode)).apply (((xsupport).xTESTFN)))))))
                        bogusForceDataize.write ((((xself).xassertWarnsRegex)).apply ((xDeprecationWarning)) ("should be string, bytes, os.PathLike or integer, not") (((xposix).xstat)) ((((xbytearray)).apply (((((xos).xfsencode)).apply (((xsupport).xTESTFN)))))))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be string, bytes, os.PathLike or integer, not") (((xposix).xstat)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be string, bytes, os.PathLike or integer, not") (((xposix).xstat)) ((((xlist)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be string, bytes, os.PathLike or integer, not") (((xposix).xstat)) ((((xlist)).apply (((((xos).xfsencode)).apply (((xsupport).xTESTFN)))))))
                xtest_mkfifo.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xposix).xmkfifo)).apply (((xsupport).xTESTFN)) ((((xstat).xS_IRUSR).or ((xstat).xS_IWUSR))))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("posix.mkfifo(): %s".mod (xe))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstat).xS_ISFIFO)).apply ((((((xposix).xstat)).apply (((xsupport).xTESTFN))).xst_mode)))))
                xtest_mknod.write
                  [xself]
                    memory > xmode
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xmode.write ((((xstat).xS_IFIFO).or ((xstat).xS_IRUSR)).or ((xstat).xS_IWUSR))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xposix).xmknod)).apply (((xsupport).xTESTFN)) ((xmode)) (0))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (((xe).xerrno)) ((((unsupported)).apply (((xerrno).xEPERM)) (((xerrno).xEINVAL)) (((xerrno).xEACCES)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstat).xS_ISFIFO)).apply ((((((xposix).xstat)).apply (((xsupport).xTESTFN))).xst_mode)))))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((xOSError)))
                          (((unsupported)).apply (((xposix).xmknod)) (((xsupport).xTESTFN)) ((xmode)) (0) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (((xe).xerrno)) ((((unsupported)).apply (((xerrno).xEPERM)) (((xerrno).xEINVAL)) (((xerrno).xEACCES)))))
                xtest_makedev.write
                  [xself]
                    memory > xst
                    memory > xmajor
                    memory > xminor
                    memory > xdev
                    seq > @
                      (((unsupported)).apply)
                        xst.write ((((xposix).xstat)).apply (((xsupport).xTESTFN)))
                        xdev.write ((xst).xst_dev)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xdev)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xdev)) (0))
                        xmajor.write ((((xposix).xmajor)).apply ((xdev)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmajor)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xmajor)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xmajor)).apply ((xdev)))) ((xmajor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmajor)) ((((xfloat)).apply ((xdev)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmajor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))) (((xposix).xmajor)) ((1.neg)))
                        xminor.write ((((xposix).xminor)).apply ((xdev)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xminor)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xminor)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xminor)).apply ((xdev)))) ((xminor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xminor)) ((((xfloat)).apply ((xdev)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xminor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))) (((xposix).xminor)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xmakedev)).apply ((xmajor)) ((xminor)))) ((xdev)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmakedev)) ((((xfloat)).apply ((xmajor)))) ((xminor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmakedev)) ((xmajor)) ((((xfloat)).apply ((xminor)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmakedev)) ((xmajor)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xmakedev)))
                x_test_all_chown_common.write
                  [xself xchown_func xfirst_param xstat_func]
                    memory > xcheck_stat
                    memory > xuid
                    memory > xgid
                    memory > xbig_value
                    seq > @
                      seq
                        unsupported
                        xcheck_stat.write
                          [xuid xgid]
                            memory > xstat
                            seq > @
                              (((unsupported)).apply ((xstat_func)) ("None: is there a None literal in the EO language?")).if
                                seq
                                  xstat.write (((xstat_func)).apply ((xfirst_param)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstat).xst_uid)) ((xuid)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstat).xst_gid)) ((xgid)))
                        xuid.write ((((xos).xgetuid)).apply)
                        xgid.write ((((xos).xgetgid)).apply)
                        bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((xuid)) ((xgid)))
                        bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                        bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((1.neg)) ((xgid)))
                        bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                        bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((xuid)) ((1.neg)))
                        bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                        ((xuid).eq 0).if
                          seq
                            xbig_value.write (((unsupported)).apply (2) (31))
                            bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((xbig_value)) ((xbig_value)))
                            bogusForceDataize.write (((xcheck_stat)).apply ((xbig_value)) ((xbig_value)))
                            bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((1.neg)) ((1.neg)))
                            bogusForceDataize.write (((xcheck_stat)).apply ((xbig_value)) ((xbig_value)))
                            bogusForceDataize.write (((xchown_func)).apply ((xfirst_param)) ((xuid)) ((xgid)))
                            bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                          (((unsupported)).apply (((((xplatform).xsystem)).apply)) ((((unsupported)).apply ("HP-UX") ("SunOS")))).if
                            (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("Skipping because of non-standard chown() behavior"))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) ((xchown_func)) ((xfirst_param)) (0) (0))
                              bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) ((xchown_func)) ((xfirst_param)) (0) ((1.neg)))
                              bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                              (((unsupported)).apply (0) (((((xos).xgetgroups)).apply))).if
                                seq
                                  bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) ((xchown_func)) ((xfirst_param)) ((1.neg)) (0))
                                  bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply ((xstr)) ((xfloat)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xchown_func)) ((xfirst_param)) ((((xt)).apply ((xuid)))) ((xgid)))
                            bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xchown_func)) ((xfirst_param)) ((xuid)) ((((xt)).apply ((xgid)))))
                            bogusForceDataize.write (((xcheck_stat)).apply ((xuid)) ((xgid)))
                xtest_chown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xchown)) (((xsupport).xTESTFN)) ((1.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).x_test_all_chown_common)).apply (((xposix).xchown)) (((xsupport).xTESTFN)) (((xposix).xstat)))
                xtest_fchown.write
                  [xself]
                    memory > xtest_file
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                        xtest_file.write (((xopen)).apply (((xsupport).xTESTFN)) ("w"))
                        (((unsupported)).apply)
                          seq
                            xfd.write ((((xtest_file).xfileno)).apply)
                            bogusForceDataize.write ((((xself).x_test_all_chown_common)).apply (((xposix).xfchown)) ((xfd)) ((((xgetattr)).apply ((xposix)) ("fstat") ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xtest_file).xclose)).apply)
                xtest_lchown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((x_DUMMY_SYMLINK)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).x_test_all_chown_common)).apply (((xposix).xlchown)) (((xsupport).xTESTFN)) ((((xgetattr)).apply ((xposix)) ("lstat") ("None: is there a None literal in the EO language?"))))
                xtest_chdir.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xposix).xchdir)).apply (((xos).xcurdir)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xchdir)) (((xsupport).xTESTFN)))
                xtest_listdir.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (((xsupport).xTESTFN)) (((((xposix).xlistdir)).apply (((xos).xcurdir)))))
                xtest_listdir_default.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (((xsupport).xTESTFN)) (((((xposix).xlistdir)).apply)))
                xtest_listdir_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (((((xos).xfsencode)).apply (((xsupport).xTESTFN)))) (((((xposix).xlistdir)).apply ("."))))
                xtest_listdir_bytes_like.write
                  [xself]
                    memory > xnames
                    seq > @
                      (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xbytearray)) ((xmemoryview)))))
                        seq
                          (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                            xnames.write ((((xposix).xlistdir)).apply ((((xcls)).apply ("."))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (((((xos).xfsencode)).apply (((xsupport).xTESTFN)))) ((xnames)))
                          (((unsupported)).apply ((xname)) ((xnames)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xname)))) ((xbytes)))
                xtest_listdir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xposix).xclose)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((xposix).xlistdir)).apply ("."))))) ((((xsorted)).apply (((((xposix).xlistdir)).apply ((xf)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((xposix).xlistdir)).apply ("."))))) ((((xsorted)).apply (((((xposix).xlistdir)).apply ((xf)))))))
                xtest_access.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xaccess)).apply (((xsupport).xTESTFN)) (((xos).xR_OK)))))
                xtest_umask.write
                  [xself]
                    memory > xold_mask
                    seq > @
                      (((unsupported)).apply)
                        xold_mask.write ((((xposix).xumask)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xold_mask)) ((xint)))
                        bogusForceDataize.write ((((xposix).xumask)).apply ((xold_mask)))
                xtest_strerror.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xposix).xstrerror)).apply (0))))
                xtest_pipe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xreader)) ((xwriter)))) (((((xposix).xpipe)).apply)))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xreader)))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xwriter)))
                xtest_pipe2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xos).xpipe2)) ("DEADBEEF"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xos).xpipe2)) (0) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe2)).apply (0))))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xr)))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xw)))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe2)).apply ((((xos).xO_CLOEXEC).or ((xos).xO_NONBLOCK))))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xr)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xos).xget_inheritable)).apply ((xr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xos).xget_inheritable)).apply ((xw)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xos).xget_blocking)).apply ((xr)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xos).xget_blocking)).apply ((xw)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xread)) ((xr)) (1))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xos).xwrite)).apply ((xw)) (("x".mul ((xsupport).xPIPE_MAX_SIZE))))
                xtest_pipe2_c_limits.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xos).xpipe2)) ((((x_testcapi).xINT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xos).xpipe2)) ((((x_testcapi).xUINT_MAX).add 1)))
                xtest_utime.write
                  [xself]
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        xnow.write ((((xtime).xtime)).apply)
                        bogusForceDataize.write ((((xposix).xutime)).apply (((xsupport).xTESTFN)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xnow)))))
                        bogusForceDataize.write ((((xposix).xutime)).apply (((xsupport).xTESTFN)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((xnow)))))))
                        bogusForceDataize.write ((((xposix).xutime)).apply (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ((xnow)))))
                x_test_chflags_regular_file.write
                  [xself xchflags_func xtarget_file]
                    memory > xnew_st
                    memory > xmsg
                    memory > xst
                    memory > xflags
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xst.write ((((xos).xstat)).apply ((xtarget_file)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xst)) ("st_flags"))))
                        xflags.write (((xst).xst_flags).or ((xstat).xUF_IMMUTABLE))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write (((xchflags_func)).apply ((xtarget_file)) ((xflags)) ((((unsupported)).apply ((xkwargs)))))
                          seq
                            (((xerr).xerrno).neq ((xerrno).xEOPNOTSUPP)).if
                              (((unsupported)).apply)
                            xmsg.write "chflag UF_IMMUTABLE not supported by underlying fs"
                            bogusForceDataize.write ((((xself).xskipTest)).apply ((xmsg)))
                        (((unsupported)).apply)
                          seq
                            xnew_st.write ((((xos).xstat)).apply ((xtarget_file)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xst).xst_flags).or ((xstat).xUF_IMMUTABLE))) (((xnew_st).xst_flags)))
                            (((unsupported)).apply ((xOSError)))
                              xfd.write (((xopen)).apply ((xtarget_file)) ("w+"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xerrno)) (((xerrno).xEPERM)))
                          bogusForceDataize.write ((((xposix).xchflags)).apply ((xtarget_file)) (((xst).xst_flags)))
                xtest_chflags.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_chflags_regular_file)).apply (((xposix).xchflags)) (((xsupport).xTESTFN)))
                xtest_lchflags_regular_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_chflags_regular_file)).apply (((xposix).xlchflags)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((xself).x_test_chflags_regular_file)) (((xposix).xchflags)) (((xsupport).xTESTFN)) (FALSE))
                xtest_lchflags_symlink.write
                  [xself]
                    memory > xflags
                    memory > xtestfn_st
                    memory > xdummy_symlink_st
                    memory > xmsg
                    memory > xnew_dummy_symlink_st
                    memory > xchflags_nofollow
                    memory > xnew_testfn_st
                    seq > @
                      (((unsupported)).apply)
                        xtestfn_st.write ((((xos).xstat)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xtestfn_st)) ("st_flags"))))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xsupport).xTESTFN)) ((x_DUMMY_SYMLINK)))
                        bogusForceDataize.write (((((xself).xteardown_files).xappend)).apply ((x_DUMMY_SYMLINK)))
                        xdummy_symlink_st.write ((((xos).xlstat)).apply ((x_DUMMY_SYMLINK)))
                        xchflags_nofollow.write
                          [xpath xflags]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((xposix).xchflags)) ((xpath)) ((xflags)) (FALSE))))
                        (((unsupported)).apply ((xfn)) ((((unsupported)).apply (((xposix).xlchflags)) ((xchflags_nofollow)))))
                          seq
                            xflags.write (((xdummy_symlink_st).xst_flags).or ((xstat).xUF_IMMUTABLE))
                            (((unsupported)).apply ((xOSError)))
                              bogusForceDataize.write (((xfn)).apply ((x_DUMMY_SYMLINK)) ((xflags)))
                              seq
                                (((xerr).xerrno).neq ((xerrno).xEOPNOTSUPP)).if
                                  (((unsupported)).apply)
                                xmsg.write "chflag UF_IMMUTABLE not supported by underlying fs"
                                bogusForceDataize.write ((((xself).xskipTest)).apply ((xmsg)))
                            (((unsupported)).apply)
                              seq
                                xnew_testfn_st.write ((((xos).xstat)).apply (((xsupport).xTESTFN)))
                                xnew_dummy_symlink_st.write ((((xos).xlstat)).apply ((x_DUMMY_SYMLINK)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtestfn_st).xst_flags)) (((xnew_testfn_st).xst_flags)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdummy_symlink_st).xst_flags).or ((xstat).xUF_IMMUTABLE))) (((xnew_dummy_symlink_st).xst_flags)))
                              bogusForceDataize.write (((xfn)).apply ((x_DUMMY_SYMLINK)) (((xdummy_symlink_st).xst_flags)))
                xtest_environ.write
                  [xself]
                    memory > xitem_type
                    seq > @
                      seq
                        (((xos).xname).eq "nt").if
                          xitem_type.write (xstr)
                          xitem_type.write (xbytes)
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((((xposix).xenviron).xitems)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xk)))) ((xitem_type)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xv)))) ((xitem_type)))
                xtest_putenv.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT0VEGETABLE") ("cabbage"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT0VEGETABLE") ("cabbage"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT") ("orange0VEGETABLE=cabbage"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT") ("orange0VEGETABLE=cabbage"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT=ORANGE") ("lemon"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xos).xputenv)).apply ("FRUIT=ORANGE") ("lemon"))
                xtest_getcwd_long_pathnames.write
                  [xself]
                    memory > xbase_path
                    memory > xdirname
                    memory > xcurdir
                    memory > x_create_and_do_getcwd
                    seq > @
                      (((unsupported)).apply)
                        xdirname.write "getcwd-test-directory-0123456789abcdef-01234567890abcdef"
                        xcurdir.write ((((xos).xgetcwd)).apply)
                        xbase_path.write ((((((xos).xpath).xabspath)).apply (((xsupport).xTESTFN))).add ".getcwd")
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xbase_path)))
                            bogusForceDataize.write ((((xos).xchdir)).apply ((xbase_path)))
                          seq
                            (((unsupported)).apply)
                            x_create_and_do_getcwd.write
                              [xdirname xcurrent_path_length]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                                      bogusForceDataize.write ((((xos).xmkdir)).apply ((xdirname)))
                                      (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("mkdir cannot create directory sufficiently deep for getcwd test"))))
                                    bogusForceDataize.write ((((xos).xchdir)).apply ((xdirname)))
                                    (((unsupported)).apply)
                                      seq
                                        bogusForceDataize.write ((((xos).xgetcwd)).apply)
                                        ((xcurrent_path_length).less 1027).if
                                          bogusForceDataize.write (((x_create_and_do_getcwd)).apply ((xdirname)) ((((xcurrent_path_length).add (((xlen)).apply ((xdirname)))).add 1)))
                                      seq
                                        bogusForceDataize.write ((((xos).xchdir)).apply (".."))
                                        bogusForceDataize.write ((((xos).xrmdir)).apply ((xdirname)))
                            bogusForceDataize.write (((x_create_and_do_getcwd)).apply ((xdirname)))
                          seq
                            bogusForceDataize.write ((((xos).xchdir)).apply ((xcurdir)))
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xbase_path)))
                xtest_getgrouplist.write
                  [xself]
                    memory > xgroup
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        xuser.write (((unsupported)).apply (((((xpwd).xgetpwuid)).apply (((((xos).xgetuid)).apply)))) (0))
                        xgroup.write (((unsupported)).apply (((((xpwd).xgetpwuid)).apply (((((xos).xgetuid)).apply)))) (3))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xgroup)) (((((xposix).xgetgrouplist)).apply ((xuser)) ((xgroup)))))
                xtest_getgroups.write
                  [xself]
                    memory > xret
                    memory > xdt
                    memory > xidg_groups
                    memory > xsymdiff
                    memory > xgroups
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xos).xpopen)).apply ("id -G 2>/dev/null"))) ((xidg)))
                          seq
                            xgroups.write (((((((xidg).xread)).apply).xstrip)).apply)
                            xret.write ((((xidg).xclose)).apply)
                        (((unsupported)).apply ((xValueError)))
                          xidg_groups.write (((xset)).apply ((((unsupported)).apply ((((xint)).apply ((xg)))) ((xg)) (((((xgroups).xsplit)).apply)))))
                          xidg_groups.write (((xset)).apply)
                        ((((unsupported)).apply ((xret)) ("None: is there a None literal in the EO language?")).or ((xidg_groups).not)).if
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("need working 'id -G'"))))
                        (((xsys).xplatform).eq "darwin").if
                          seq
                            (((unsupported)).apply)
                            xdt.write (((((xsysconfig).xget_config_var)).apply ("MACOSX_DEPLOYMENT_TARGET")).or "10.0")
                            ((((xtuple)).apply ((((unsupported)).apply ((((xint)).apply ((xn)))) ((xn)) ((((unsupported)).apply (((((xdt).xsplit)).apply ("."))) ((((unsupported)).apply (0) (2)))))))).less (((unsupported)).apply (10) (6))).if
                              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("getgroups(2) is broken prior to 10.6"))))
                        xsymdiff.write ((((xidg_groups).xsymmetric_difference)).apply (((((xposix).xgetgroups)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xsymdiff).not).or ((xsymdiff).eq (((unsupported)).apply (((((xposix).xgetegid)).apply)))))))
                xtest_access_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xposix).xaccess)) (((xsupport).xTESTFN)) (((xos).xR_OK)) ((xf)))))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_chmod_dir_fd.write
                  [xself]
                    memory > xs
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xsupport).xTESTFN)) (((xstat).xS_IRUSR)))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xposix).xchmod)) (((xsupport).xTESTFN)) ((((xstat).xS_IRUSR).or ((xstat).xS_IWUSR))) ((xf)))
                            xs.write ((((xposix).xstat)).apply (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xs)) (0)).and ((xstat).xS_IRWXU))) ((((xstat).xS_IRUSR).or ((xstat).xS_IWUSR))))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_chown_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply (((xsupport).xTESTFN)))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xposix).xchown)) (((xsupport).xTESTFN)) (((((xos).xgetuid)).apply)) (((((xos).xgetgid)).apply)) ((xf)))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_stat_dir_fd.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("w"))) ((xoutfile)))
                          bogusForceDataize.write ((((xoutfile).xwrite)).apply ("testlinen"))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            xs1.write ((((xposix).xstat)).apply (((xsupport).xTESTFN)))
                            xs2.write (((unsupported)).apply (((xposix).xstat)) (((xsupport).xTESTFN)) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs1)) ((xs2)))
                            xs2.write (((unsupported)).apply (((xposix).xstat)) (((xsupport).xTESTFN)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs1)) ((xs2)))
                            (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ("should be integer or None, not") (((xposix).xstat)) (((xsupport).xTESTFN)) (((((xposix).xgetcwd)).apply)))
                            (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xTypeError)) ("should be integer or None, not") (((xposix).xstat)) (((xsupport).xTESTFN)) ((((xfloat)).apply ((xf)))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) (((xposix).xstat)) (((xsupport).xTESTFN)) ((((unsupported)).apply (10) (20))))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_utime_dir_fd.write
                  [xself]
                    memory > xnow
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            xnow.write ((((xtime).xtime)).apply)
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ("None: is there a None literal in the EO language?") ((xf)))
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((xf)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((xnow)) ((xf)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((xf)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ("None: is there a None literal in the EO language?"))) ((xf)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xnow)))) ((xf)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ("x"))) ((xf)))
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((xnow)))))) ((xf)))
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((xnow)) ((xnow)))) ((xf)))
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((((xnow).sub (((xint)).apply ((xnow)))).mul (((unsupported)).apply))))))) ((xf)))
                            (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) ((xf)) ((((unsupported)).apply ((((xint)).apply ((xnow)))) ((((xint)).apply ((((xnow).sub (((xint)).apply ((xnow)))).mul (((unsupported)).apply))))))))
                            (((unsupported)).apply (((xos).xutime)) (((xos).xsupports_follow_symlinks))).if
                              (((unsupported)).apply ((xValueError)))
                                (((unsupported)).apply (((xposix).xutime)) (((xsupport).xTESTFN)) (FALSE) ((xf)))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_link_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply ((xPermissionError)))
                          (((unsupported)).apply (((xposix).xlink)) (((xsupport).xTESTFN)) ((((xsupport).xTESTFN).add "link")) ((xf)) ((xf)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("posix.link(): %s".mod (xe))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xposix).xstat)).apply (((xsupport).xTESTFN)))) (1))) ((((unsupported)).apply (((((xposix).xstat)).apply ((((xsupport).xTESTFN).add "link")))) (1))))
                          seq
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((xsupport).xTESTFN).add "link")))
                xtest_mkdir_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xposix).xmkdir)) ((((xsupport).xTESTFN).add "dir")) ((xf)))
                            bogusForceDataize.write ((((xposix).xstat)).apply ((((xsupport).xTESTFN).add "dir")))
                          seq
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((((xsupport).xTESTFN).add "dir")))
                xtest_mknod_dir_fd.write
                  [xself]
                    memory > xf
                    memory > xmode
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xmode.write ((((xstat).xS_IFIFO).or ((xstat).xS_IRUSR)).or ((xstat).xS_IWUSR))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply ((xOSError)))
                          (((unsupported)).apply (((xposix).xmknod)) (((xsupport).xTESTFN)) ((xmode)) (0) ((xf)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (((xe).xerrno)) ((((unsupported)).apply (((xerrno).xEPERM)) (((xerrno).xEINVAL)) (((xerrno).xEACCES)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstat).xS_ISFIFO)).apply ((((((xposix).xstat)).apply (((xsupport).xTESTFN))).xst_mode)))))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_open_dir_fd.write
                  [xself]
                    memory > xres
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("w"))) ((xoutfile)))
                          bogusForceDataize.write ((((xoutfile).xwrite)).apply ("testlinen"))
                        xa.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        xb.write (((unsupported)).apply (((xposix).xopen)) (((xsupport).xTESTFN)) (((xposix).xO_RDONLY)) ((xa)))
                        (((unsupported)).apply)
                          seq
                            xres.write (((unsupported)).apply ((((((xposix).xread)).apply ((xb)) (9)).xdecode)) ("utf-8"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("testlinen") ((xres)))
                          seq
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xa)))
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xb)))
                xtest_readlink_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xsupport).xTESTFN)) ((((xsupport).xTESTFN).add "link")))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xreadlink)).apply ((((xsupport).xTESTFN).add "link")))) ((((unsupported)).apply (((xposix).xreadlink)) ((((xsupport).xTESTFN).add "link")) ((xf)))))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((xsupport).xTESTFN).add "link")))
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_rename_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply ((((xsupport).xTESTFN).add "ren")))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xposix).xrename)) ((((xsupport).xTESTFN).add "ren")) (((xsupport).xTESTFN)) ((xf)) ((xf)))
                          seq
                            bogusForceDataize.write ((((xposix).xrename)).apply ((((xsupport).xTESTFN).add "ren")) (((xsupport).xTESTFN)))
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xposix).xstat)).apply (((xsupport).xTESTFN)))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_symlink_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xposix).xsymlink)) (((xsupport).xTESTFN)) ((((xsupport).xTESTFN).add "link")) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xreadlink)).apply ((((xsupport).xTESTFN).add "link")))) (((xsupport).xTESTFN)))
                          seq
                            bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((xsupport).xTESTFN).add "link")))
                xtest_unlink_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply ((((xsupport).xTESTFN).add "del")))
                        bogusForceDataize.write ((((xposix).xstat)).apply ((((xsupport).xTESTFN).add "del")))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xposix).xunlink)) ((((xsupport).xTESTFN).add "del")) ((xf)))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((xsupport).xTESTFN).add "del")))
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xstat)) ((((xsupport).xTESTFN).add "link")))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xtest_mkfifo_dir_fd.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xf.write ((((xposix).xopen)).apply (((((xposix).xgetcwd)).apply)) (((xposix).xO_RDONLY)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xPermissionError)))
                              (((unsupported)).apply (((xposix).xmkfifo)) (((xsupport).xTESTFN)) ((((xstat).xS_IRUSR).or ((xstat).xS_IWUSR))) ((xf)))
                              bogusForceDataize.write ((((xself).xskipTest)).apply (("posix.mkfifo(): %s".mod (xe))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstat).xS_ISFIFO)).apply ((((((xposix).xstat)).apply (((xsupport).xTESTFN))).xst_mode)))))
                          bogusForceDataize.write ((((xposix).xclose)).apply ((xf)))
                xrequires_sched_h.write ((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xposix)) ("sched_yield"))) ("don't have scheduling support"))
                xrequires_sched_affinity.write ((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xposix)) ("sched_setaffinity"))) ("don't have sched affinity support"))
                xtest_sched_yield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xposix).xsched_yield)).apply)
                xtest_sched_priority.write
                  [xself]
                    memory > xlo
                    memory > xpol
                    memory > xhi
                    seq > @
                      (((unsupported)).apply)
                        xpol.write ((xposix).xSCHED_RR)
                        xlo.write ((((xposix).xsched_get_priority_min)).apply ((xpol)))
                        xhi.write ((((xposix).xsched_get_priority_max)).apply ((xpol)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xlo)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xhi)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xhi)) ((xlo)))
                        (((xsys).xplatform).neq "darwin").if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_get_priority_min)) ((23.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_get_priority_max)) ((23.neg)))
                xtest_get_and_set_scheduler_and_param.write
                  [xself]
                    memory > xparent
                    memory > xlarge
                    memory > xmine
                    memory > xparam
                    memory > xpossible_schedulers
                    seq > @
                      (((unsupported)).apply)
                        xpossible_schedulers.write (((unsupported)).apply ((xsched)) ((((unsupported)).apply ((xname)) ((xsched)))) ((((((xposix).x__dict__).xitems)).apply)) (((((xname).xstartswith)).apply ("SCHED_"))))
                        xmine.write ((((xposix).xsched_getscheduler)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xmine)) ((xpossible_schedulers)))
                        (((unsupported)).apply ((xOSError)))
                          xparent.write ((((xposix).xsched_getscheduler)).apply (((((xos).xgetppid)).apply)))
                          (((xe).xerrno).neq ((xerrno).xEPERM)).if
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xparent)) ((xpossible_schedulers)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_getscheduler)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_getparam)) ((1.neg)))
                        xparam.write ((((xposix).xsched_getparam)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xparam).xsched_priority)) ((xint)))
                        ((((((xsys).xplatform).xstartswith)).apply ((((unsupported)).apply ("freebsd") ("netbsd")))).not).if
                          seq
                            (((unsupported)).apply ((xOSError)))
                              seq
                                bogusForceDataize.write ((((xposix).xsched_setscheduler)).apply (0) ((xmine)) ((xparam)))
                                bogusForceDataize.write ((((xposix).xsched_setparam)).apply (0) ((xparam)))
                              (((xe).xerrno).neq ((xerrno).xEPERM)).if
                                (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_setparam)) ((1.neg)) ((xparam)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_setscheduler)) ((1.neg)) ((xmine)) ((xparam)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xsched_setscheduler)) (0) ((xmine)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xsched_setparam)) (0) (43))
                        xparam.write ((((xposix).xsched_param)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposix).xsched_setparam)) (0) ((xparam)))
                        xlarge.write (((unsupported)).apply)
                        xparam.write ((((xposix).xsched_param)).apply ((xlarge)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xposix).xsched_setparam)) (0) ((xparam)))
                        xparam.write (((unsupported)).apply (((xposix).xsched_param)) (((xlarge).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xposix).xsched_setparam)) (0) ((xparam)))
                xtest_sched_rr_get_interval.write
                  [xself]
                    memory > xinterval
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xOSError)))
                          xinterval.write ((((xposix).xsched_rr_get_interval)).apply (0))
                          seq
                            (((xe).xerrno).neq ((xerrno).xEINVAL)).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("only works on SCHED_RR processes"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinterval)) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xinterval)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xinterval)) ((((unsupported)).apply)))
                xtest_sched_getaffinity.write
                  [xself]
                    memory > xmask
                    seq > @
                      (((unsupported)).apply)
                        xmask.write ((((xposix).xsched_getaffinity)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmask)) ((xset)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xlen)).apply ((xmask)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_getaffinity)) ((1.neg)))
                        (((unsupported)).apply ((xcpu)) ((xmask)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcpu)) ((xint)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xcpu)) (0))
                            bogusForceDataize.write ((((xself).xassertLess)).apply ((xcpu)) ((((unsupported)).apply (1) (32))))
                xtest_sched_setaffinity.write
                  [xself]
                    memory > xmask
                    seq > @
                      (((unsupported)).apply)
                        xmask.write ((((xposix).xsched_getaffinity)).apply (0))
                        ((((xlen)).apply ((xmask))).greater 1).if
                          bogusForceDataize.write ((((xmask).xpop)).apply)
                        bogusForceDataize.write ((((xposix).xsched_setaffinity)).apply (0) ((xmask)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposix).xsched_getaffinity)).apply (0))) ((xmask)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_setaffinity)) (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposix).xsched_setaffinity)) (0) ((((unsupported)).apply ((10.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposix).xsched_setaffinity)) (0) ((((xmap)).apply ((xint)) ("0X"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xposix).xsched_setaffinity)) (0) ((((unsupported)).apply ((((unsupported)).apply (1) (128))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xposix).xsched_setaffinity)) ((1.neg)) ((xmask)))
                xtest_rtld_constants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtest_fs_holes.write
                  [xself]
                    memory > xsize
                    memory > xfno
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("r+b"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xwrite)).apply ("hello"))
                            bogusForceDataize.write ((((xfp).xflush)).apply)
                            xsize.write ((((xfp).xtell)).apply)
                            xfno.write ((((xfp).xfileno)).apply)
                            (((unsupported)).apply ((xOSError)))
                              seq
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((xsize)))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (((((xos).xlseek)).apply ((xfno)) ((xi)) (((xos).xSEEK_DATA)))))
                                    bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xsize)) (((((xos).xlseek)).apply ((xfno)) ((xi)) (((xos).xSEEK_HOLE)))))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xlseek)) ((xfno)) ((xsize)) (((xos).xSEEK_DATA)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xos).xlseek)) ((xfno)) ((xsize)) (((xos).xSEEK_HOLE)))
                              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("OSError raised!"))))
                xtest_path_error2.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply ("rename") ("replace") ("link"))))
                          seq
                            xfunction.write (((xgetattr)).apply ((xos)) ((xname)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xfunction)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xdst)) ((((unsupported)).apply ("noodly2") (((xsupport).xTESTFN)))))
                              (((unsupported)).apply ((xOSError)))
                                bogusForceDataize.write (((xfunction)).apply ("doesnotexistfilename") ((xdst)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertIn)).apply (((("'doesnotexistfilename' -> '{}'".xformat)).apply ((xdst)))) ((((xstr)).apply ((xe)))))
                                  (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xfail)).apply (("No valid path_error2() test for os.".add (xname))))
                xtest_path_with_null_character.write
                  [xself]
                    memory > xfn
                    memory > xfd
                    memory > xfn_with_NUL
                    seq > @
                      seq
                        xfn.write ((xsupport).xTESTFN)
                        xfn_with_NUL.write ((xfn).add "0")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfn)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfn)))
                        xfd.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            xfd.write ((((xos).xopen)).apply ((xfn_with_NUL)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                          (((unsupported)).apply ((xfd)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xfn)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xos).xmkdir)) ((xfn_with_NUL)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xfn)))))
                        bogusForceDataize.write ((((((xopen)).apply ((xfn)) ("wb")).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xos).xstat)) ((xfn_with_NUL)))
                xtest_path_with_null_byte.write
                  [xself]
                    memory > xfn
                    memory > xfd
                    memory > xfn_with_NUL
                    seq > @
                      seq
                        xfn.write ((((xos).xfsencode)).apply (((xsupport).xTESTFN)))
                        xfn_with_NUL.write ((xfn).add "0")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfn)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfn)))
                        xfd.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            xfd.write ((((xos).xopen)).apply ((xfn_with_NUL)) ((((xos).xO_WRONLY).or ((xos).xO_CREAT))))
                          (((unsupported)).apply ((xfd)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xfn)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xos).xmkdir)) ((xfn_with_NUL)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xfn)))))
                        bogusForceDataize.write ((((((xopen)).apply ((xfn)) ("wb")).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xos).xstat)) ((xfn_with_NUL)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((((xposix).xgetuid)).apply).neq 0).if
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("not enough privileges"))))
                        ((((xhasattr)).apply ((xposix)) ("getgroups")).not).if
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("need posix.getgroups"))))
                        (((xsys).xplatform).eq "darwin").if
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("getgroups(2) is broken on OSX"))))
                        (((unsupported)).apply (((xself).xsaved_groups)) (((((xposix).xgetgroups)).apply)))
                xtearDown.write
                  [xself]
                    memory > xname
                    seq > @
                      (((xhasattr)).apply ((xposix)) ("setgroups")).if
                        bogusForceDataize.write ((((xposix).xsetgroups)).apply (((xself).xsaved_groups)))
                        (((xhasattr)).apply ((xposix)) ("initgroups")).if
                          seq
                            xname.write (((((xpwd).xgetpwuid)).apply (((((xposix).xgetuid)).apply))).xpw_name)
                            bogusForceDataize.write ((((xposix).xinitgroups)).apply ((xname)) ((((unsupported)).apply (((xself).xsaved_groups)) (0))))
                xtest_initgroups.write
                  [xself]
                    memory > xname
                    memory > xg
                    seq > @
                      (((unsupported)).apply)
                        xg.write ((((xmax)).apply ((((xself).xsaved_groups).or (((unsupported)).apply (0))))).add 1)
                        xname.write (((((xpwd).xgetpwuid)).apply (((((xposix).xgetuid)).apply))).xpw_name)
                        bogusForceDataize.write ((((xposix).xinitgroups)).apply ((xname)) ((xg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xg)) (((((xposix).xgetgroups)).apply)))
                xtest_setgroups.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xgroups)) ((((unsupported)).apply ((((unsupported)).apply (0))) ((((xlist)).apply ((((xrange)).apply (16))))))))
                          seq
                            bogusForceDataize.write ((((xposix).xsetgroups)).apply ((xgroups)))
                            bogusForceDataize.write ((((xself).xassertListEqual)).apply ((xgroups)) (((((xposix).xgetgroups)).apply)))
            (((unsupported)).apply)
              seq
                xNOOP_PROGRAM.write (((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-S") ("-c") ("pass"))
                xspawn_func.write "None: is there a None literal in the EO language?"
                xpython_args.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-S") ((((unsupported)).apply ((xargs)))))))
                xtest_returns_pid.write
                  [xself]
                    memory > xpid
                    memory > xscript
                    memory > xpidfile
                    memory > xargs
                    seq > @
                      seq
                        xpidfile.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xpidfile)))
                        xscript.write (((unsupported)).apply)
                        xargs.write ((((xself).xpython_args)).apply ("-c") ((xscript)))
                        xpid.write ((((xself).xspawn_func)).apply ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        (((unsupported)).apply ((((xopen)).apply ((xpidfile)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ((((xstr)).apply ((xpid)))))
                xtest_no_such_executable.write
                  [xself]
                    memory > xno_such_executable
                    memory > xpid
                    seq > @
                      seq
                        xno_such_executable.write "no_such_executable"
                        (((unsupported)).apply ((((unsupported)).apply ((xFileNotFoundError)) ((xPermissionError)))))
                          xpid.write ((((xself).xspawn_func)).apply ((xno_such_executable)) ((((unsupported)).apply ((xno_such_executable)))) (((xos).xenviron)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexc).xfilename)) ((xno_such_executable)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xpid2)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpid2)) ((xpid)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xstatus)) (0))
                xtest_specify_environment.write
                  [xself]
                    memory > xpid
                    memory > xscript
                    memory > xenvfile
                    memory > xargs
                    seq > @
                      seq
                        xenvfile.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xenvfile)))
                        xscript.write (((unsupported)).apply)
                        xargs.write ((((xself).xpython_args)).apply ("-c") ((xscript)))
                        xpid.write ((((xself).xspawn_func)).apply ((((unsupported)).apply ((xargs)) (0))) ((xargs)) ((((unsupported)).apply (((xos).xenviron)) ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        (((unsupported)).apply ((((xopen)).apply ((xenvfile)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("bar"))
                xtest_none_file_actions.write
                  [xself]
                    memory > xpid
                    seq > @
                      seq
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply (((xself).xNOOP_PROGRAM)) (0))) (((xself).xNOOP_PROGRAM)) (((xos).xenviron)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_empty_file_actions.write
                  [xself]
                    memory > xpid
                    seq > @
                      seq
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply (((xself).xNOOP_PROGRAM)) (0))) (((xself).xNOOP_PROGRAM)) (((xos).xenviron)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_resetids_explicit_default.write
                  [xself]
                    memory > xpid
                    seq > @
                      seq
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_resetids.write
                  [xself]
                    memory > xpid
                    seq > @
                      seq
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_resetids_wrong_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ("None: is there a None literal in the EO language?"))
                xtest_setpgroup.write
                  [xself]
                    memory > xpid
                    seq > @
                      seq
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) (((((xos).xgetpgrp)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_setpgroup_wrong_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ("023"))
                xtest_setsigmask.write
                  [xself]
                    memory > xcode
                    memory > xpid
                    seq > @
                      (((unsupported)).apply)
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xos).xenviron)) ((((unsupported)).apply (((xsignal).xSIGUSR1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_setsigmask_wrong_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) (34))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ((((unsupported)).apply ("j"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ((((unsupported)).apply (((xsignal).xNSIG)) ((((xsignal).xNSIG).add 1)))))
                xtest_setsid.write
                  [xself]
                    memory > xparent_sid
                    memory > xchild_sid
                    memory > xpid
                    memory > xoutput
                    memory > xcode
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrfd)) ((xwfd)))) (((((xos).xpipe)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xrfd)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xset_inheritable)).apply ((xwfd)) (TRUE))
                            xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                            (((unsupported)).apply ((xNotImplementedError)) ((xPermissionError)))
                              xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xos).xenviron)) (TRUE))
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("setsid is not supported: {exc!r}"))
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("setsid failed with: {exc!r}"))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xwfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        xoutput.write ((((xos).xread)).apply ((xrfd)) (100))
                        xchild_sid.write (((xint)).apply ((xoutput)))
                        xparent_sid.write ((((xos).xgetsid)).apply (((((xos).xgetpid)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xparent_sid)) ((xchild_sid)))
                xtest_setsigdef.write
                  [xself]
                    memory > xcode
                    memory > xpid
                    memory > xoriginal_handler
                    seq > @
                      (((unsupported)).apply)
                        xoriginal_handler.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) (((xsignal).xSIG_IGN)))
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xos).xenviron)) ((((unsupported)).apply (((xsignal).xSIGUSR1)))))
                          bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xoriginal_handler)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpid2)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpid2)) ((xpid)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xos).xWIFSIGNALED)).apply ((xstatus)))) ((xstatus)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xWTERMSIG)).apply ((xstatus)))) (((xsignal).xSIGUSR1)))
                xtest_setsigdef_wrong_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) (34))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ((((unsupported)).apply ("j"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("pass"))) (((xos).xenviron)) ((((unsupported)).apply (((xsignal).xNSIG)) ((((xsignal).xNSIG).add 1)))))
                xtest_setscheduler_only_param.write
                  [xself]
                    memory > xpolicy
                    memory > xcode
                    memory > xpid
                    memory > xpriority
                    seq > @
                      (((unsupported)).apply)
                        xpolicy.write ((((xos).xsched_getscheduler)).apply (0))
                        xpriority.write ((((xos).xsched_get_priority_min)).apply ((xpolicy)))
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xos).xenviron)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (((((xos).xsched_param)).apply ((xpriority)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_setscheduler_with_policy.write
                  [xself]
                    memory > xpolicy
                    memory > xcode
                    memory > xpid
                    memory > xpriority
                    seq > @
                      (((unsupported)).apply)
                        xpolicy.write ((((xos).xsched_getscheduler)).apply (0))
                        xpriority.write ((((xos).xsched_get_priority_min)).apply ((xpolicy)))
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) (((xsys).xexecutable)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xos).xenviron)) ((((unsupported)).apply ((xpolicy)) (((((xos).xsched_param)).apply ((xpriority)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_multiple_file_actions.write
                  [xself]
                    memory > xfile_actions
                    memory > xpid
                    seq > @
                      seq
                        xfile_actions.write (((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_OPEN)) (3) ((((((xos).xpath).xrealpath)).apply ((x__file__)))) (((xos).xO_RDONLY)) (0))) ((((unsupported)).apply (((xos).xPOSIX_SPAWN_CLOSE)) (0))) ((((unsupported)).apply (((xos).xPOSIX_SPAWN_DUP2)) (1) (4))))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply (((xself).xNOOP_PROGRAM)) (0))) (((xself).xNOOP_PROGRAM)) (((xos).xenviron)) ((xfile_actions)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                xtest_bad_file_actions.write
                  [xself]
                    memory > xargs
                    seq > @
                      seq
                        xargs.write ((xself).xNOOP_PROGRAM)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (12345))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_CLOSE)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_CLOSE)) (1) (2))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_CLOSE)) ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_OPEN)) (3) (((x__file__).add "0")) (((xos).xO_RDONLY)) (0))))))
                xtest_open_file.write
                  [xself]
                    memory > xfile_actions
                    memory > xscript
                    memory > xpid
                    memory > xargs
                    memory > xoutfile
                    seq > @
                      seq
                        xoutfile.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xoutfile)))
                        xscript.write (((unsupported)).apply)
                        xfile_actions.write (((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_OPEN)) (1) ((xoutfile)) (((((xos).xO_WRONLY).or ((xos).xO_CREAT)).or ((xos).xO_TRUNC))) ((((xstat).xS_IRUSR).or ((xstat).xS_IWUSR))))))
                        xargs.write ((((xself).xpython_args)).apply ("-c") ((xscript)))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((xfile_actions)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        (((unsupported)).apply ((((xopen)).apply ((xoutfile)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("hello"))
                xtest_close_file.write
                  [xself]
                    memory > xclosefile
                    memory > xpid
                    memory > xscript
                    memory > xargs
                    seq > @
                      seq
                        xclosefile.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xclosefile)))
                        xscript.write (((unsupported)).apply)
                        xargs.write ((((xself).xpython_args)).apply ("-c") ((xscript)))
                        xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_CLOSE)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        (((unsupported)).apply ((((xopen)).apply ((xclosefile)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) (("is closed %d".mod ((xerrno).xEBADF))))
                xtest_dup2.write
                  [xself]
                    memory > xfile_actions
                    memory > xscript
                    memory > xpid
                    memory > xargs
                    memory > xdupfile
                    seq > @
                      seq
                        xdupfile.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xdupfile)))
                        xscript.write (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xdupfile)) ("wb"))) ((xchildfile)))
                          seq
                            xfile_actions.write (((unsupported)).apply ((((unsupported)).apply (((xos).xPOSIX_SPAWN_DUP2)) (((((xchildfile).xfileno)).apply)) (1))))
                            xargs.write ((((xself).xpython_args)).apply ("-c") ((xscript)))
                            xpid.write (((unsupported)).apply (((xself).xspawn_func)) ((((unsupported)).apply ((xargs)) (0))) ((xargs)) (((xos).xenviron)) ((xfile_actions)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xwaitpid)).apply ((xpid)) (0))) ((((unsupported)).apply ((xpid)) (0))))
                        (((unsupported)).apply ((((xopen)).apply ((xdupfile)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("hello"))
            (((unsupported)).apply (((xunittest).xTestCase)) ((x_PosixSpawnMixin)) (((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xos)) ("posix_spawn"))) ("test needs os.posix_spawn"))))
              xspawn_func.write (((xgetattr)).apply ((xposix)) ("posix_spawn") ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((xunittest).xTestCase)) ((x_PosixSpawnMixin)) (((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xos)) ("posix_spawnp"))) ("test needs os.posix_spawnp"))))
              seq
                xspawn_func.write (((xgetattr)).apply ((xposix)) ("posix_spawnp") ("None: is there a None literal in the EO language?"))
                xtest_posix_spawnp.write
                  [xself]
                    memory > xspawn_args
                    memory > xcode
                    memory > xargs
                    memory > xprogram_fullpath
                    memory > xprogram
                    memory > xtemp_dir
                    memory > xpath
                    seq > @
                      (((unsupported)).apply)
                        xtemp_dir.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ((xtemp_dir)))
                        xprogram.write "posix_spawnp_test_program.exe"
                        xprogram_fullpath.write (((((xos).xpath).xjoin)).apply ((xtemp_dir)) ((xprogram)))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xsys).xexecutable)) ((xprogram_fullpath)))
                        (((unsupported)).apply ((xKeyError)))
                          xpath.write (((((xos).xpathsep).xjoin)).apply ((((unsupported)).apply ((xtemp_dir)) ((((unsupported)).apply (((xos).xenviron)) ("PATH"))))))
                          xpath.write (xtemp_dir)
                        xspawn_args.write (((unsupported)).apply ((xprogram)) ("-I") ("-S") ("-c") ("pass"))
                        xcode.write ((((xtextwrap).xdedent)).apply (((((unsupported)).apply).mod (((unsupported)).apply ((xspawn_args))))))
                        xargs.write (((unsupported)).apply ("-c") ((xcode)))
                        (((unsupported)).apply ((xassert_python_ok)) ((((unsupported)).apply ((xargs)))) ((xpath)))
            xtest_main.write
              []
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xPosixTester)) ((xPosixGroupsTester)) ((xTestPosixSpawn)) ((xTestPosixSpawnP)))
                    bogusForceDataize.write ((((xsupport).xreap_children)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)