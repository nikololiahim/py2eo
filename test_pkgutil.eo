memory > xlist
memory > xValueError
memory > xImportlibMigrationTests
memory > xt
memory > xfinal
memory > xzipimport
memory > xtempfile
memory > xopen
memory > xos
memory > xe
memory > xobject
memory > xmoduleinfo
memory > xd
memory > xrun_unittest
memory > xcheck_warnings
memory > xCleanImport
memory > xImportError
memory > xAttributeError
memory > xpkg
memory > xc
memory > ximportlib
memory > xExtendPathTests
memory > xKeyError
memory > xPkgutilPEP302Tests
memory > xbase
memory > xprint
memory > xtype
memory > xf
memory > xw
memory > xPkgutilTests
memory > xspec_from_file_location
memory > xpkgutil
memory > ximporter
memory > xNestedNamespacePackageTest
memory > xfinder
memory > xsys
memory > xsorted
memory > xDeprecationWarning
memory > xshutil
memory > xunittest
memory > xfoo
memory > xlen
memory > xfl
memory > xunload
memory > xzipfile
memory > xTypeError
memory > x__name__
[] > test_pkgutil
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_loader_deprecated
        memory > xtest_find_loader_avoids_emulation
        memory > xtest_iter_importers
        memory > xtest_importer_deprecated
        memory > xtest_walk_packages_raises_on_string_or_bytes_input
        memory > xcreate_init
        memory > xtest_alreadyloaded
        memory > xexec_module
        memory > xtest_get_loader_handles_spec_attribute_none
        memory > xget_data
        memory > xtest_iter_importers_avoids_emulation
        memory > xtest_getdata_filesys
        memory > xtest_get_loader_None_in_sys_modules
        memory > xtest_unreadable_dir_on_syspath
        memory > xtest_getdata_zipfile
        memory > xtest_getdata_pep302
        memory > xtest_simple
        memory > xtest_walkpackages_zipfile
        memory > xtest_main
        memory > xsetUp
        memory > xtest_walkpackages_filesys
        memory > xtest_nested
        memory > xtest_get_loader_avoids_emulation
        memory > xcreate_module
        memory > xtest_mixed_namespace
        memory > xcheck_deprecated
        memory > xtest_get_importer_avoids_emulation
        memory > xtest_get_loader_handles_missing_loader_attribute
        memory > xtest_find_loader_missing_module
        memory > xtearDown
        memory > xfind_spec
        memory > xtest_get_loader_handles_missing_spec_attribute
        memory > xcreate_submodule
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdirname)) (((((xtempfile).xmkdtemp)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) (((xself).xdirname)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) (((xself).xdirname)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                xtest_getdata_filesys.write
                  [xself]
                    memory > xpkg
                    memory > xres1
                    memory > xres2
                    memory > xpackage_dir
                    memory > xf
                    memory > xRESOURCE_DATA
                    seq > @
                      seq
                        xpkg.write "test_getdata_filesys"
                        xRESOURCE_DATA.write "Hello, world!nSecond linernThird line"
                        xpackage_dir.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xpkg)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpackage_dir)))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpackage_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpackage_dir)) ("res.txt"))) ("wb"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply ((xpackage_dir)) ("sub"))))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpackage_dir)) ("sub") ("res.txt"))) ("wb"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xres1.write ((((xpkgutil).xget_data)).apply ((xpkg)) ("res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres1)) ((xRESOURCE_DATA)))
                        xres2.write ((((xpkgutil).xget_data)).apply ((xpkg)) ("sub/res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres2)) ((xRESOURCE_DATA)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xpkg)))))))
                xtest_getdata_zipfile.write
                  [xself]
                    memory > xpkg
                    memory > xres2
                    memory > xRESOURCE_DATA
                    memory > xnames
                    memory > xzip
                    memory > xzip_file
                    memory > xz
                    memory > xres1
                    seq > @
                      seq
                        xzip.write "test_getdata_zipfile.zip"
                        xpkg.write "test_getdata_zipfile"
                        xRESOURCE_DATA.write "Hello, world!nSecond linernThird line"
                        xzip_file.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xzip)))
                        xz.write ((((xzipfile).xZipFile)).apply ((xzip_file)) ("w"))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((xpkg).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((xpkg).add "/res.txt")) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((xpkg).add "/sub/res.txt")) ((xRESOURCE_DATA)))
                        bogusForceDataize.write ((((xz).xclose)).apply)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((xzip_file)))
                        xres1.write ((((xpkgutil).xget_data)).apply ((xpkg)) ("res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres1)) ((xRESOURCE_DATA)))
                        xres2.write ((((xpkgutil).xget_data)).apply ((xpkg)) ("sub/res.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres2)) ((xRESOURCE_DATA)))
                        xnames.write (((unsupported)).apply)
                        (((unsupported)).apply ((xmoduleinfo)) (((((xpkgutil).xiter_modules)).apply ((((unsupported)).apply ((xzip_file)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmoduleinfo)) (((xpkgutil).xModuleInfo)))
                            bogusForceDataize.write ((((xnames).xappend)).apply (((xmoduleinfo).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnames)) ((((unsupported)).apply ("test_getdata_zipfile"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xpkg)))))))
                xtest_unreadable_dir_on_syspath.write
                  [xself]
                    memory > xd
                    memory > xpackage_name
                    seq > @
                      seq
                        xpackage_name.write "unreadable_package"
                        xd.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xpackage_name)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xd)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xrmdir)) ((xd)))
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply (((xpkgutil).xwalk_packages)) ((((unsupported)).apply (((xself).xdirname)))))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("unexpected package found"))
                xtest_walkpackages_filesys.write
                  [xself]
                    memory > xexpected
                    memory > xpkg1_dir
                    memory > xpkg1
                    memory > xf
                    memory > xpkg2_dir
                    memory > xpkg2
                    memory > xactual
                    seq > @
                      seq
                        xpkg1.write "test_walkpackages_filesys"
                        xpkg1_dir.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xpkg1)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpkg1_dir)))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg1_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply ((xpkg1_dir)) ("sub"))))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg1_dir)) ("sub") ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg1_dir)) ("sub") ("mod.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xpkg2.write "sub"
                        xpkg2_dir.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xpkg2)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpkg2_dir)))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg2_dir)) ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply ((xpkg2_dir)) ("test_walkpackages_filesys"))))
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg2_dir)) ("test_walkpackages_filesys") ("__init__.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xf.write (((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkg2_dir)) ("test_walkpackages_filesys") ("mod.py"))) ("wb"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        xexpected.write (((unsupported)).apply ("sub") ("sub.test_walkpackages_filesys") ("sub.test_walkpackages_filesys.mod") ("test_walkpackages_filesys") ("test_walkpackages_filesys.sub") ("test_walkpackages_filesys.sub.mod"))
                        xactual.write (((unsupported)).apply ((((unsupported)).apply ((xe)) (1))) ((xe)) (((((xpkgutil).xwalk_packages)).apply ((((unsupported)).apply (((xself).xdirname)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                        (((unsupported)).apply ((xpkg)) ((xexpected)))
                          seq
                            ((((xpkg).xendswith)).apply ("mod")).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xpkg)))))))
                xtest_walkpackages_zipfile.write
                  [xself]
                    memory > xexpected
                    memory > xpkg1
                    memory > xzip
                    memory > xz
                    memory > xzip_file
                    memory > xpkg2
                    memory > xactual
                    seq > @
                      seq
                        unsupported
                        xzip.write "test_walkpackages_zipfile.zip"
                        xpkg1.write "test_walkpackages_zipfile"
                        xpkg2.write "sub"
                        xzip_file.write (((((xos).xpath).xjoin)).apply (((xself).xdirname)) ((xzip)))
                        xz.write ((((xzipfile).xZipFile)).apply ((xzip_file)) ("w"))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((xpkg2).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((((xpkg2).add "/").add (xpkg1)).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((((xpkg2).add "/").add (xpkg1)).add "/mod.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((xpkg1).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((((xpkg1).add "/").add (xpkg2)).add "/__init__.py")) (""))
                        bogusForceDataize.write ((((xz).xwritestr)).apply (((((xpkg1).add "/").add (xpkg2)).add "/mod.py")) (""))
                        bogusForceDataize.write ((((xz).xclose)).apply)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((xzip_file)))
                        xexpected.write (((unsupported)).apply ("sub") ("sub.test_walkpackages_zipfile") ("sub.test_walkpackages_zipfile.mod") ("test_walkpackages_zipfile") ("test_walkpackages_zipfile.sub") ("test_walkpackages_zipfile.sub.mod"))
                        xactual.write (((unsupported)).apply ((((unsupported)).apply ((xe)) (1))) ((xe)) (((((xpkgutil).xwalk_packages)).apply ((((unsupported)).apply ((xzip_file)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((xpkg)) ((xexpected)))
                          seq
                            ((((xpkg).xendswith)).apply ("mod")).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xpkg)))))))
                xtest_walk_packages_raises_on_string_or_bytes_input.write
                  [xself]
                    memory > xbytes_input
                    memory > xstr_input
                    seq > @
                      seq
                        xstr_input.write "test_dir"
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))))
                          bogusForceDataize.write (((xlist)).apply (((((xpkgutil).xwalk_packages)).apply ((xstr_input)))))
                        xbytes_input.write "test_dir"
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))))
                          bogusForceDataize.write (((xlist)).apply (((((xpkgutil).xwalk_packages)).apply ((xbytes_input)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply ((xobject)))
                  seq
                    xcreate_module.write
                      [xself xspec]
                        seq > @
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xexec_module.write
                      [xself xmod]
                        seq > @
                          (((unsupported)).apply ((((unsupported)).apply (((xmod).x__dict__)) ("loads"))) (((((((xmod).x__dict__).xget)).apply ("loads") (0)).add 1)))
                    xget_data.write
                      [xself xpath]
                        seq > @
                          (((unsupported)).apply ("Hello, world!"))
                (((unsupported)).apply ((xobject)))
                  xfind_spec.write
                    [xself xfullname xpath xtarget]
                      memory > xloader
                      seq > @
                        (((unsupported)).apply)
                          xloader.write ((((xPkgutilPEP302Tests).xMyTestLoader)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xspec_from_file_location)) ((xfullname)) (("<%s>".mod (((xloader).x__class__).x__name__))) ((xloader)) ((((unsupported)).apply)))))
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xsys).xmeta_path).xinsert)).apply (0) (((((xself).xMyTestImporter)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmeta_path)) (0))))))
                xtest_getdata_pep302.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpkgutil).xget_data)).apply ("foo") ("dummy"))) ("Hello, world!"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo"))))))
                xtest_alreadyloaded.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfoo).xloads)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpkgutil).xget_data)).apply ("foo") ("dummy"))) ("Hello, world!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfoo).xloads)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcreate_init.write
                  [xself xpkgname]
                    memory > xdirname
                    memory > xpkgdir
                    seq > @
                      seq
                        xdirname.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((xdirname)))
                        xpkgdir.write (((((xos).xpath).xjoin)).apply ((xdirname)) ((xpkgname)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpkgdir)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpkgdir)) ("__init__.py"))) ("w"))) ((xfl)))
                          bogusForceDataize.write ((((xfl).xwrite)).apply ("from pkgutil import extend_pathn__path__ = extend_path(__path__, __name__)n"))
                        (((unsupported)).apply ((xdirname)))
                xcreate_submodule.write
                  [xself xdirname xpkgname xsubmodule_name xvalue]
                    memory > xmodule_name
                    seq > @
                      seq
                        xmodule_name.write (((((xos).xpath).xjoin)).apply ((xdirname)) ((xpkgname)) (((xsubmodule_name).add ".py")))
                        (((unsupported)).apply ((((xopen)).apply ((xmodule_name)) ("w"))) ((xfl)))
                          (((unsupported)).apply ((xprint)) (((("value={}".xformat)).apply ((xvalue)))) ((xfl)))
                xtest_simple.write
                  [xself]
                    memory > xpkgname
                    memory > xdirname_0
                    memory > xdirname_1
                    seq > @
                      seq
                        xpkgname.write "foo"
                        xdirname_0.write ((((xself).xcreate_init)).apply ((xpkgname)))
                        xdirname_1.write ((((xself).xcreate_init)).apply ((xpkgname)))
                        bogusForceDataize.write ((((xself).xcreate_submodule)).apply ((xdirname_0)) ((xpkgname)) ("bar") (0))
                        bogusForceDataize.write ((((xself).xcreate_submodule)).apply ((xdirname_1)) ((xpkgname)) ("baz") (1))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfoo).xbar).xvalue)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfoo).xbaz).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((xfoo).x__path__)))) ((((xsorted)).apply ((((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xdirname_0)) ((xpkgname)))) ((((((xos).xpath).xjoin)).apply ((xdirname_1)) ((xpkgname)))))))))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdirname_0)))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdirname_1)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo.bar"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo.baz"))))))
                xtest_iter_importers.write
                  [xself]
                    memory > xpkgname
                    memory > xloader
                    memory > xpathitem
                    memory > xspec
                    memory > xdirname
                    memory > xmodname
                    memory > xexpected_importer
                    memory > xget_importer
                    memory > ximporters
                    memory > xfullname
                    memory > xiter_importers
                    seq > @
                      seq
                        xiter_importers.write ((xpkgutil).xiter_importers)
                        xget_importer.write ((xpkgutil).xget_importer)
                        xpkgname.write "spam"
                        xmodname.write "eggs"
                        xdirname.write ((((xself).xcreate_init)).apply ((xpkgname)))
                        xpathitem.write (((((xos).xpath).xjoin)).apply ((xdirname)) ((xpkgname)))
                        xfullname.write ((("{}.{}".xformat)).apply ((xpkgname)) ((xmodname)))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ((xfullname)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ((xpkgname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xcreate_submodule)).apply ((xdirname)) ((xpkgname)) ((xmodname)) (0))
                            bogusForceDataize.write ((((ximportlib).ximport_module)).apply ((xfullname)))
                            ximporters.write (((xlist)).apply ((((xiter_importers)).apply ((xfullname)))))
                            xexpected_importer.write (((xget_importer)).apply ((xpathitem)))
                            (((unsupported)).apply ((xfinder)) ((ximporters)))
                              seq
                                xspec.write ((((xpkgutil).x_get_spec)).apply ((xfinder)) ((xfullname)))
                                xloader.write ((xspec).xloader)
                                (((unsupported)).apply ((xAttributeError)))
                                  xloader.write ((xloader).xloader)
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfinder)) ((((ximportlib).xmachinery).xFileFinder)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfinder)) ((xexpected_importer)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xloader)) ((((ximportlib).xmachinery).xSourceFileLoader)))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpkgutil).x_get_spec)).apply ((xfinder)) ((xpkgname)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((xlist)).apply ((((xiter_importers)).apply ("invalid.module"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((xlist)).apply ((((xiter_importers)).apply (".spam"))))
                          seq
                            bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdirname)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                            (((unsupported)).apply ((xKeyError)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("spam"))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("spam.eggs"))))))
                xtest_mixed_namespace.write
                  [xself]
                    memory > xpkgname
                    memory > xdirname_0
                    memory > xdirname_1
                    seq > @
                      seq
                        xpkgname.write "foo"
                        xdirname_0.write ((((xself).xcreate_init)).apply ((xpkgname)))
                        xdirname_1.write ((((xself).xcreate_init)).apply ((xpkgname)))
                        bogusForceDataize.write ((((xself).xcreate_submodule)).apply ((xdirname_0)) ((xpkgname)) ("bar") (0))
                        bogusForceDataize.write ((((xos).xunlink)).apply ((((((xos).xpath).xjoin)).apply ((xdirname_0)) ((xpkgname)) ("__init__.py"))))
                        bogusForceDataize.write ((((xself).xcreate_submodule)).apply ((xdirname_1)) ((xpkgname)) ("baz") (1))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfoo).xbar).xvalue)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfoo).xbaz).xvalue)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((xfoo).x__path__)))) ((((xsorted)).apply ((((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xdirname_0)) ((xpkgname)))) ((((((xos).xpath).xjoin)).apply ((xdirname_1)) ((xpkgname)))))))))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdirname_0)))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdirname_1)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo.bar"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ("foo.baz"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xbasedir)) (((((xtempfile).xmkdtemp)).apply)))
                        (((unsupported)).apply (((xself).xold_path)) ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))) (((xself).xold_path)))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply (((xself).xbasedir)))
                xcreate_module.write
                  [xself xname xcontents]
                    memory > xbase_path
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xbase)) ((xfinal)))) (((((xname).xrsplit)).apply (".") (1))))
                        xbase_path.write (((((xos).xpath).xjoin)).apply (((xself).xbasedir)) (((((xbase).xreplace)).apply (".") ((((xos).xpath).xsep)))))
                        (((unsupported)).apply (((xos).xmakedirs)) ((xbase_path)) (TRUE))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xbase_path)) (((xfinal).add ".py")))) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((xcontents)))
                xtest_nested.write
                  [xself]
                    memory > xpkgutil_boilerplate
                    seq > @
                      seq
                        xpkgutil_boilerplate.write "import pkgutil; __path__ = pkgutil.extend_path(__path__, __name__)"
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("a.pkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("b.pkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("a.pkg.subpkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("b.pkg.subpkg.__init__") ((xpkgutil_boilerplate)))
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("a.pkg.subpkg.c") ("c = 1"))
                        bogusForceDataize.write ((((xself).xcreate_module)).apply ("b.pkg.subpkg.d") ("d = 2"))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((((((xos).xpath).xjoin)).apply (((xself).xbasedir)) ("a"))))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((((((xos).xpath).xjoin)).apply (((xself).xbasedir)) ("b"))))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xunload)) ("pkg"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xpkg).x__path__)))) (2))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xunload)) ("pkg.subpkg"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xpkg).xsubpkg).x__path__)))) (2))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) (2))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcheck_warnings)).apply ((((unsupported)).apply ("This emulation is deprecated, use 'importlib' instead") ((xDeprecationWarning)))))))
                xtest_importer_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xcheck_deprecated)).apply)))
                        bogusForceDataize.write ((((xpkgutil).xImpImporter)).apply (""))
                xtest_loader_deprecated.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xcheck_deprecated)).apply)))
                        bogusForceDataize.write ((((xpkgutil).xImpLoader)).apply ("") ("") ("") (""))
                xtest_get_loader_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcheck_warnings)).apply)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xget_loader)).apply ("sys"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xget_loader)).apply ("os"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xget_loader)).apply ("test.support"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (0))
                xtest_get_loader_handles_missing_loader_attribute.write
                  [xself]
                    memory > xthis_loader
                    memory > x__loader__
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xthis_loader.write (x__loader__)
                        (((unsupported)).apply ((((unsupported)).apply ((x__loader__)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((xcheck_warnings)).apply)) ((xw)))
                            seq
                              bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xget_loader)).apply ((x__name__)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (0))
                          x__loader__.write (xthis_loader)
                xtest_get_loader_handles_missing_spec_attribute.write
                  [xself]
                    memory > xname
                    memory > xloader
                    memory > xmod
                    seq > @
                      seq
                        xname.write "spam"
                        xmod.write (((((xtype)).apply ((xsys)))).apply ((xname)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmod).x__spec__)))))
                        (((unsupported)).apply ((((xCleanImport)).apply ((xname)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))) ((xmod)))
                            xloader.write ((((xpkgutil).xget_loader)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xloader)))
                xtest_get_loader_handles_spec_attribute_none.write
                  [xself]
                    memory > xname
                    memory > xloader
                    memory > xmod
                    seq > @
                      seq
                        xname.write "spam"
                        xmod.write (((((xtype)).apply ((xsys)))).apply ((xname)))
                        (((unsupported)).apply (((xmod).x__spec__)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xCleanImport)).apply ((xname)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))) ((xmod)))
                            xloader.write ((((xpkgutil).xget_loader)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xloader)))
                xtest_get_loader_None_in_sys_modules.write
                  [xself]
                    memory > xname
                    memory > xloader
                    seq > @
                      seq
                        xname.write "totally bogus"
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          xloader.write ((((xpkgutil).xget_loader)).apply ((xname)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xloader)))
                xtest_find_loader_missing_module.write
                  [xself]
                    memory > xname
                    memory > xloader
                    seq > @
                      seq
                        xname.write "totally bogus"
                        xloader.write ((((xpkgutil).xfind_loader)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xloader)))
                xtest_find_loader_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcheck_warnings)).apply)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xfind_loader)).apply ("sys"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xfind_loader)).apply ("os"))))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xpkgutil).xfind_loader)).apply ("test.support"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (0))
                xtest_get_importer_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcheck_warnings)).apply)) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xpkgutil).xget_importer)).apply ("*??"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (0))
                xtest_iter_importers_avoids_emulation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xcheck_warnings)).apply)) ((xw)))
                        seq
                          (((unsupported)).apply ((ximporter)) (((((xpkgutil).xiter_importers)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xw).xwarnings)))) (0))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write (((xrun_unittest)).apply ((xPkgutilTests)) ((xPkgutilPEP302Tests)) ((xExtendPathTests)) ((xNestedNamespacePackageTest)) ((xImportlibMigrationTests)))
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    bogusForceDataize.write (((((xzipimport).x_zip_directory_cache).xclear)).apply)
                    bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)