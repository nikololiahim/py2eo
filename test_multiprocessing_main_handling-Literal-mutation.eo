memory > x__debug__
memory > xscript_dir
memory > xrc
memory > xout
memory > xmake_zip_pkg
memory > xerr
memory > xmake_zip_script
memory > xos
memory > xmultiprocessing
memory > xpy_compile
memory > xunittest
memory > xrun_name
memory > xzip_name
memory > x__name__
memory > xMultiProcessingCmdLineMixin
memory > ximportlib
memory > xassert_python_ok
memory > xcmd_line_switches
memory > xmake_pkg
memory > xprint
memory > xset
memory > xrepr
memory > xmake_script
memory > xsupport
memory > xsys
[] > test_multiprocessing_main_handling
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_ipython_workaround
        memory > x_make_test_zip_pkg
        memory > x_check_output
        memory > xlaunch_source
        memory > xverbose
        memory > xtearDownModule
        memory > xtest_directory_compiled
        memory > xtest_directory
        memory > xmaxDiff
        memory > x_check_script
        memory > xAVAILABLE_START_METHODS
        memory > xtest_zipfile_compiled
        memory > xtest_zipfile
        memory > xstart_method
        memory > xtest_module_in_subpackage_in_zipfile
        memory > x_make_launch_script
        memory > xtest_script_compiled
        memory > xsetUp
        memory > xtest_package
        memory > xtest_module_in_package
        memory > xtest_basic_script_no_suffix
        memory > xtest_source
        memory > x_make_test_script
        memory > xmain_in_children_source
        memory > xtest_basic_script
        memory > xtest_source_main_skipped_in_children
        memory > xtest_package_compiled
        memory > xtest_module_in_package_in_zipfile
        seq > @
          seq
            (((unsupported)).apply)
            bogusForceDataize.write ((((xsupport).ximport_module)).apply ("_multiprocessing"))
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            ((xsupport).xPGO).if
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("test is not helpful for PGO"))))
            (((unsupported)).apply)
            xAVAILABLE_START_METHODS.write (((xset)).apply (((((xmultiprocessing).xget_all_start_methods)).apply)))
            bogusForceDataize.write ((((xsupport).xskip_if_broken_multiprocessing_synchronize)).apply)
            xverbose.write ((xsupport).xverbose)
            xtest_source.write (((unsupported)).apply)
            xtest_source_main_skipped_in_children.write (((unsupported)).apply)
            x_make_test_script.write
              [xscript_dir xscript_basename xsource xomit_suffix]
                memory > xto_return
                seq > @
                  (((unsupported)).apply)
                    xto_return.write (((xmake_script)).apply ((xscript_dir)) ((xscript_basename)) ((xsource)) ((xomit_suffix)))
                    ((xscript_basename).eq "check_sibling").if
                      bogusForceDataize.write (((xmake_script)).apply ((xscript_dir)) ("sibling") (""))
                    bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                    (((unsupported)).apply ((xto_return)))
            x_make_test_zip_pkg.write
              [xzip_dir xzip_basename xpkg_name xscript_basename xsource xdepth]
                memory > xto_return
                seq > @
                  (((unsupported)).apply)
                    xto_return.write (((xmake_zip_pkg)).apply ((xzip_dir)) ((xzip_basename)) ((xpkg_name)) ((xscript_basename)) ((xsource)) ((xdepth)))
                    bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                    (((unsupported)).apply ((xto_return)))
            xlaunch_source.write (((unsupported)).apply)
            x_make_launch_script.write
              [xscript_dir xscript_basename xmodule_name xpath]
                memory > xsource
                memory > xto_return
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xpath)) ("None: is there a None literal in the EO language?")).if
                      xpath.write "os.path.dirname(__file__)"
                      xpath.write (((xrepr)).apply ((xpath)))
                    xsource.write ((xlaunch_source).mod (((unsupported)).apply ((xpath)) ((xmodule_name))))
                    xto_return.write (((xmake_script)).apply ((xscript_dir)) ((xscript_basename)) ((xsource)))
                    bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                    (((unsupported)).apply ((xto_return)))
            (((unsupported)).apply)
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xstart_method)) ((xAVAILABLE_START_METHODS))).if
                        bogusForceDataize.write ((((xself).xskipTest)).apply (("%r start method not available".mod ((xself).xstart_method))))
                x_check_output.write
                  [xself xscript_name xexit_code xout xerr]
                    memory > xexpected_results
                    seq > @
                      seq
                        ((xverbose).greater 1).if
                          seq
                            bogusForceDataize.write (((xprint)).apply (("Output from test script %r:".mod (xscript_name))))
                            bogusForceDataize.write (((xprint)).apply ((((xrepr)).apply ((xout)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexit_code)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xerr).xdecode)).apply ("utf-8"))) (""))
                        xexpected_results.write ("%s -> [1, 4, 9]".mod ((xself).xstart_method))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xout).xdecode)).apply ("utf-8")).xstrip)).apply)) ((xexpected_results)))
                x_check_script.write
                  [xself xscript_name]
                    memory > xrun_args
                    seq > @
                      (((unsupported)).apply)
                        ((x__debug__).not).if
                          (((unsupported)).apply ((xcmd_line_switches)) ((((unsupported)).apply (("-".add ("O".mul (((xsys).xflags).xoptimize)))))))
                        xrun_args.write ((xcmd_line_switches).add (((unsupported)).apply ((xscript_name)) (((xself).xstart_method))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((unsupported)).apply ((xassert_python_ok)) ((((unsupported)).apply ((xrun_args)))) (FALSE))))
                        bogusForceDataize.write ((((xself).x_check_output)).apply ((xscript_name)) ((xrc)) ((xout)) ((xerr)))
                xtest_basic_script.write
                  [xself]
                    memory > xscript_name
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          xscript_name.write (((x_make_test_script)).apply ((xscript_dir)) ("script"))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_name)))
                xtest_basic_script_no_suffix.write
                  [xself]
                    memory > xscript_name
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("script") (TRUE))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_name)))
                xtest_ipython_workaround.write
                  [xself]
                    memory > xscript_name
                    memory > xsource
                    memory > xscript_no_suffix
                    seq > @
                      seq
                        xsource.write (xtest_source_main_skipped_in_children)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("ipython") ((xsource)))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_name)))
                            xscript_no_suffix.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("ipython") ((xsource)) (TRUE))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_no_suffix)))
                xtest_script_compiled.write
                  [xself]
                    memory > xscript_name
                    memory > xpyc_file
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          xscript_name.write (((x_make_test_script)).apply ((xscript_dir)) ("script"))
                          (((unsupported)).apply (((xpy_compile).xcompile)) ((xscript_name)) (TRUE))
                          bogusForceDataize.write ((((xos).xremove)).apply ((xscript_name)))
                          xpyc_file.write ((((xsupport).xmake_legacy_pyc)).apply ((xscript_name)))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xpyc_file)))
                xtest_directory.write
                  [xself]
                    memory > xscript_name
                    memory > xsource
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("__main__") ((xsource)))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_dir)))
                xtest_directory_compiled.write
                  [xself]
                    memory > xscript_name
                    memory > xpyc_file
                    memory > xsource
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("__main__") ((xsource)))
                            (((unsupported)).apply (((xpy_compile).xcompile)) ((xscript_name)) (TRUE))
                            bogusForceDataize.write ((((xos).xremove)).apply ((xscript_name)))
                            xpyc_file.write ((((xsupport).xmake_legacy_pyc)).apply ((xscript_name)))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xscript_dir)))
                xtest_zipfile.write
                  [xself]
                    memory > xscript_name
                    memory > xsource
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("__main__") ((xsource)))
                            (((unsupported)).apply ((((unsupported)).apply ((xzip_name)) ((xrun_name)))) ((((xmake_zip_script)).apply ((xscript_dir)) ("test_zip") ((xscript_name)))))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xzip_name)))
                xtest_zipfile_compiled.write
                  [xself]
                    memory > xscript_name
                    memory > xsource
                    memory > xcompiled_name
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xscript_dir)) ("__main__") ((xsource)))
                            xcompiled_name.write (((unsupported)).apply (((xpy_compile).xcompile)) ((xscript_name)) (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply ((xzip_name)) ((xrun_name)))) ((((xmake_zip_script)).apply ((xscript_dir)) ("test_zip") ((xcompiled_name)))))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xzip_name)))
                xtest_module_in_package.write
                  [xself]
                    memory > xscript_name
                    memory > xpkg_dir
                    memory > xlaunch_name
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          xpkg_dir.write (((((xos).xpath).xjoin)).apply ((xscript_dir)) ("test_pkg"))
                          bogusForceDataize.write (((xmake_pkg)).apply ((xpkg_dir)))
                          xscript_name.write (((x_make_test_script)).apply ((xpkg_dir)) ("check_sibling"))
                          xlaunch_name.write (((x_make_launch_script)).apply ((xscript_dir)) ("launch") ("test_pkg.check_sibling"))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xlaunch_name)))
                xtest_module_in_package_in_zipfile.write
                  [xself]
                    memory > xlaunch_name
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xzip_name)) ((xrun_name)))) ((((x_make_test_zip_pkg)).apply ((xscript_dir)) ("test_zip") ("test_pkg") ("script"))))
                          xlaunch_name.write (((x_make_launch_script)).apply ((xscript_dir)) ("launch") ("test_pkg.script") ((xzip_name)))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xlaunch_name)))
                xtest_module_in_subpackage_in_zipfile.write
                  [xself]
                    memory > xlaunch_name
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xzip_name)) ((xrun_name)))) ((((unsupported)).apply ((x_make_test_zip_pkg)) ((xscript_dir)) ("test_zip") ("test_pkg") ("script") (2))))
                          xlaunch_name.write (((x_make_launch_script)).apply ((xscript_dir)) ("launch") ("test_pkg.test_pkg.script") ((xzip_name)))
                          bogusForceDataize.write ((((xself).x_check_script)).apply ((xlaunch_name)))
                xtest_package.write
                  [xself]
                    memory > xscript_name
                    memory > xpkg_dir
                    memory > xsource
                    memory > xlaunch_name
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xpkg_dir.write (((((xos).xpath).xjoin)).apply ((xscript_dir)) ("test_pkg"))
                            bogusForceDataize.write (((xmake_pkg)).apply ((xpkg_dir)))
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xpkg_dir)) ("__main__") ((xsource)))
                            xlaunch_name.write (((x_make_launch_script)).apply ((xscript_dir)) ("launch") ("test_pkg"))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xlaunch_name)))
                xtest_package_compiled.write
                  [xself]
                    memory > xpyc_file
                    memory > xlaunch_name
                    memory > xscript_name
                    memory > xcompiled_name
                    memory > xpkg_dir
                    memory > xsource
                    seq > @
                      seq
                        xsource.write ((xself).xmain_in_children_source)
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xpkg_dir.write (((((xos).xpath).xjoin)).apply ((xscript_dir)) ("test_pkg"))
                            bogusForceDataize.write (((xmake_pkg)).apply ((xpkg_dir)))
                            xscript_name.write (((unsupported)).apply ((x_make_test_script)) ((xpkg_dir)) ("__main__") ((xsource)))
                            xcompiled_name.write (((unsupported)).apply (((xpy_compile).xcompile)) ((xscript_name)) (TRUE))
                            bogusForceDataize.write ((((xos).xremove)).apply ((xscript_name)))
                            xpyc_file.write ((((xsupport).xmake_legacy_pyc)).apply ((xscript_name)))
                            xlaunch_name.write (((x_make_launch_script)).apply ((xscript_dir)) ("launch") ("test_pkg"))
                            bogusForceDataize.write ((((xself).x_check_script)).apply ((xlaunch_name)))
            (((unsupported)).apply ((xMultiProcessingCmdLineMixin)) (((xunittest).xTestCase)))
              seq
                xstart_method.write "spawn"
                xmain_in_children_source.write (xtest_source_main_skipped_in_children)
            (((unsupported)).apply ((xMultiProcessingCmdLineMixin)) (((xunittest).xTestCase)))
              seq
                xstart_method.write "fork"
                xmain_in_children_source.write (xtest_source)
            (((unsupported)).apply ((xMultiProcessingCmdLineMixin)) (((xunittest).xTestCase)))
              seq
                xstart_method.write "forkserver"
                xmain_in_children_source.write (xtest_source_main_skipped_in_children)
            xtearDownModule.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xreap_children)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)