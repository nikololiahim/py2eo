memory > xfalse
memory > xFakeFile
memory > xwarnings
memory > xcollections
memory > xopen
memory > xv
memory > xcm
memory > xconfigparser
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xopt
memory > xpickle
memory > xlist
memory > xfile_path
memory > xdecimal
memory > xRawConfigParserTestCase
memory > xValueError
memory > xsection
memory > xstr
memory > xio
memory > xoption
memory > xrange
memory > xvalue
memory > xdefault
memory > xKeyError
memory > xConfigParserTestCase
memory > xproto
memory > xtextwrap
memory > xpathlib
memory > xf
memory > xw
memory > xset
memory > xrepr
memory > xhasattr
memory > xmystr
memory > xx
memory > xi
memory > xsuper
memory > xdse
memory > xsupport
memory > xsorted
memory > xDeprecationWarning
memory > xSortedDict
memory > xCfgParserTestCaseClass
memory > xos
memory > xUnicodeEncodeError
memory > xe
memory > xiter
memory > xctx
memory > xname
memory > xunittest
memory > xspace_around_delimiters
memory > xobject
memory > xCustomConfigParser
memory > xBasicTestCase
memory > xStrangeConfigParser
memory > xwarning
memory > xlen
memory > xdict
memory > xj
memory > xisinstance
memory > xTypeError
memory > x__name__
[] > test_configparser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_interpolationdeptherror
        memory > xtest_duplicateoptionerror
        memory > xini
        memory > xtest_dominating_multiline_values
        memory > xtest_remove_option
        memory > xtest_nosectionerror
        memory > xiterkeys
        memory > xtest_readline_generator
        memory > xtest_case_sensitivity_basic
        memory > xtest__all__
        memory > xvalues
        memory > xtest_nooptionerror
        memory > xtest_readfp_deprecation
        memory > xtest_other_errors
        memory > xtest_basic_from_dict
        memory > xtest_comment_handling
        memory > xdefault_section
        memory > xtest_parse_errors
        memory > xinline_comment_prefixes
        memory > xtest_interpolation
        memory > xexpected_output
        memory > xdict_type
        memory > xtest_add_section_default
        memory > xtest_case_sensitivity
        memory > xget_error
        memory > xtest_defaults_keyword
        memory > xtest_missing_section
        memory > xtest_interpolation_validation
        memory > xtest_interpolationerror
        memory > xtest_extended_interpolation
        memory > xconfig_class
        memory > xstrict
        memory > xtest_interpolation_missing_value
        memory > xtest_none_as_value_stringified_raw
        memory > xkeys
        memory > x__iter__
        memory > xtest_weird_errors
        memory > xwonderful_spam
        memory > xget_interpolation_config
        memory > xtest_inconsistent_converters_state
        memory > xtest_inheritance
        memory > xtest_get_extended_interpolation
        memory > xparse_error
        memory > xtest_missingsectionheadererror
        memory > xtest_unicode_failure
        memory > xtest_interpolationsyntaxerror
        memory > xtest_parsingerror
        memory > xtest_no_interpolation
        memory > xtest_none_as_value_stringified
        memory > xtest_sectionproxy_repr
        memory > xtest_write
        memory > xinterpolation
        memory > xtest_strange_options
        memory > xtest_error
        memory > xtest_sorted
        memory > xprepare
        memory > xtest_stripping
        memory > xsetUp
        memory > xtest_read_returns_file_list_with_bytestring_path
        memory > xtest_endless_loop
        memory > xtest_empty_case
        memory > xtest_query_errors
        memory > xtest_read_returns_file_list
        memory > xfromstring
        memory > xtest_converters_at_init
        memory > xtest_instance_assignment
        memory > xiteritems
        memory > xtest_default_case_sensitivity
        memory > xtest_safe_interpolation
        memory > xtest_case_sensitivity_conflicts
        memory > xitems
        memory > x_test_len
        memory > xtest_cfgparser_dot_3
        memory > xtest_get_basic_interpolation
        memory > xtest_basic
        memory > xtest_source_as_bytes
        memory > xtest_reading
        memory > xempty_lines_in_values
        memory > xtest_safeconfigparser_deprecation
        memory > xcomment_prefixes
        memory > xtest_interpolation_depth_error
        memory > xtest_set_nonstring_types
        memory > xtest_boolean
        memory > xbasic_test
        memory > xassertMatchesIni
        memory > x__init__
        memory > xtest_iterable
        memory > xtest_clear
        memory > xallow_no_value
        memory > xtest_converters
        memory > xtest_setitem
        memory > xitervalues
        memory > xreadline_generator
        memory > xtest_duplicate_option_error
        memory > xtest_case_sensitivity_mapping_access
        memory > xcheck_items_config
        memory > xtest_set_malformatted_interpolation
        memory > xtest_popitem
        memory > xconfig
        memory > xtest_set_string_types
        memory > xtest_parsing_error
        memory > xtearDown
        memory > xtest_interpolationmissingoptionerror
        memory > xnewconfig
        memory > xtest_file
        memory > xtest_none_as_default_interpolation
        memory > xreadline
        memory > xdelimiters
        memory > xtest_items
        memory > xtest_missing_options
        memory > xtest_duplicatesectionerror
        memory > xtest_invalid_multiline_value
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xcollections).xUserDict)))
              seq
                xitems.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xsorted)).apply ((((((xself).xdata).xitems)).apply)))))
                xkeys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xsorted)).apply ((((((xself).xdata).xkeys)).apply)))))
                xvalues.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xi)) (1))) ((xi)) (((((xself).xitems)).apply)))))
                xiteritems.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((((xself).xitems)).apply)))))
                xiterkeys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((((xself).xkeys)).apply)))))
                xitervalues.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((((xself).xvalues)).apply)))))
                x__iter__.write (xiterkeys)
            (((unsupported)).apply)
              seq
                xallow_no_value.write (xfalse)
                xdelimiters.write (((unsupported)).apply ("=") (":"))
                xcomment_prefixes.write (((unsupported)).apply (";") ("#"))
                xinline_comment_prefixes.write (((unsupported)).apply (";") ("#"))
                xempty_lines_in_values.write TRUE
                xdict_type.write ((xconfigparser).x_default_dict)
                xstrict.write (xfalse)
                xdefault_section.write ((xconfigparser).xDEFAULTSECT)
                xinterpolation.write ((xconfigparser).x_UNSET)
                xnewconfig.write
                  [xself xdefaults]
                    memory > xarguments
                    memory > xinstance
                    seq > @
                      (((unsupported)).apply)
                        xarguments.write (((unsupported)).apply ((xdict)) ((xdefaults)) (((xself).xallow_no_value)) (((xself).xdelimiters)) (((xself).xcomment_prefixes)) (((xself).xinline_comment_prefixes)) (((xself).xempty_lines_in_values)) (((xself).xdict_type)) (((xself).xstrict)) (((xself).xdefault_section)) (((xself).xinterpolation)))
                        xinstance.write ((((xself).xconfig_class)).apply ((((unsupported)).apply ((xarguments)))))
                        (((unsupported)).apply ((xinstance)))
                xfromstring.write
                  [xself xstring xdefaults]
                    memory > xcf
                    seq > @
                      (((unsupported)).apply)
                        xcf.write ((((xself).xnewconfig)).apply ((xdefaults)))
                        bogusForceDataize.write ((((xcf).xread_string)).apply ((xstring)))
                        (((unsupported)).apply ((xcf)))
            (((unsupported)).apply ((xCfgParserTestCaseClass)))
              seq
                xbasic_test.write
                  [xself xcf]
                    memory > xsection
                    memory > xF
                    memory > xE
                    memory > xeq
                    memory > xL
                    seq > @
                      seq
                        xE.write (((unsupported)).apply ("Commented Bar") ("Foo Bar") ("Internationalized Stuff") ("Long Line") ((((unsupported)).apply)) ("Spaces") ("Spacey Bar") ("Spacey Bar From The Beginning") ("Types"))
                        ((xself).xallow_no_value).if
                          bogusForceDataize.write ((((xE).xappend)).apply ("NoValue"))
                        bogusForceDataize.write ((((xE).xsort)).apply)
                        xF.write (((unsupported)).apply ((((unsupported)).apply ("baz") ("qwe"))) ((((unsupported)).apply ("foo") ("bar3"))))
                        xL.write ((((xcf).xsections)).apply)
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((xE)))
                        xL.write ((((xcf).xitems)).apply ("Spacey Bar From The Beginning"))
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((xF)))
                        xL.write (((unsupported)).apply ((xsection)) ((xsection)) ((xcf)))
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        bogusForceDataize.write ((((xE).xappend)).apply (((xself).xdefault_section)))
                        bogusForceDataize.write ((((xE).xsort)).apply)
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((xE)))
                        xL.write ((((((unsupported)).apply ((xcf)) ("Spacey Bar From The Beginning")).xitems)).apply)
                        xL.write (((xsorted)).apply ((((xlist)).apply ((xL)))))
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((xF)))
                        xL.write ((((xcf).xitems)).apply)
                        xL.write (((xsorted)).apply ((((xlist)).apply ((xL)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xL)))) ((((xlen)).apply ((xE)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xsection)))) ((xL)))
                          bogusForceDataize.write (((xeq)).apply ((xname)) (((xsection).xname)))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xdefaults)).apply)) ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo Bar") ("foo"))) ("bar1"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Spacey Bar") ("foo"))) ("bar2"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Spacey Bar From The Beginning") ("foo"))) ("bar3"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Spacey Bar From The Beginning") ("baz"))) ("qwe"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Commented Bar") ("foo"))) ("bar4"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Commented Bar") ("baz"))) ("qwe"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Spaces") ("key with spaces"))) ("value"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Spaces") ("another with spaces"))) ("splat!"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xgetint)).apply ("Types") ("int"))) (42))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Types") ("int"))) ("42"))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((xcf).xgetfloat)).apply ("Types") ("float"))) (0.44))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Types") ("float"))) ("0.44"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xgetboolean)).apply ("Types") ("boolean"))) ((xfalse)))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Types") ("123"))) ("strange but acceptable"))
                        ((xself).xallow_no_value).if
                          bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("NoValue") ("option-without-value"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("Foo Bar") ("foo") ("baz"))) ("bar1"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("Foo Bar") ("foo") ((((unsupported)).apply ("foo") ("baz"))))) ("baz"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))))
                          bogusForceDataize.write ((((xcf).xget)).apply ("No Such Foo Bar") ("foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoOptionError)))))
                          bogusForceDataize.write ((((xcf).xget)).apply ("Foo Bar") ("no-such-foo"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("No Such Foo Bar") ("foo") ("baz"))) ("baz"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("Foo Bar") ("no-such-foo") ("baz"))) ("baz"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("Spacey Bar") ("foo") ("None: is there a None literal in the EO language?"))) ("bar2"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("No Such Spacey Bar") ("foo") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetint)) ("Types") ("int") (18))) (42))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetint)) ("Types") ("no-such-int") (18))) (18))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetint)) ("Types") ("no-such-int") ("18"))) ("18"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoOptionError)))))
                          bogusForceDataize.write ((((xcf).xgetint)).apply ("Types") ("no-such-int"))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xcf).xgetfloat)) ("Types") ("float") (0.0))) (0.44))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xcf).xgetfloat)) ("Types") ("no-such-float") (0.0))) (0.0))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetfloat)) ("Types") ("no-such-float") ("0.0"))) ("0.0"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoOptionError)))))
                          bogusForceDataize.write ((((xcf).xgetfloat)).apply ("Types") ("no-such-float"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetboolean)) ("Types") ("boolean") (TRUE))) ((xfalse)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetboolean)) ("Types") ("no-such-boolean") ("yes"))) ("yes"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetboolean)) ("Types") ("no-such-boolean") (TRUE))) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoOptionError)))))
                          bogusForceDataize.write ((((xcf).xgetboolean)).apply ("Types") ("no-such-boolean"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xgetboolean)) ("No Such Types") ("boolean") (TRUE))) (TRUE))
                        ((xself).xallow_no_value).if
                          seq
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("NoValue") ("option-without-value") ((xfalse)))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xcf).xget)) ("NoValue") ("no-such-option-without-value") ((xfalse)))) ((xfalse)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Foo Bar"))) ("foo"))) ("bar1"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spacey Bar"))) ("foo"))) ("bar2"))
                        xsection.write (((unsupported)).apply ((xcf)) ("Spacey Bar From The Beginning"))
                        bogusForceDataize.write (((xeq)).apply (((xsection).xname)) ("Spacey Bar From The Beginning"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xsection).xparser)) ((xcf)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xsection).xname)) ("Name is read-only"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xsection).xparser)) ("Parser is read-only"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xsection)) ("foo"))) ("bar3"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xsection)) ("baz"))) ("qwe"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Commented Bar"))) ("foo"))) ("bar4"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Commented Bar"))) ("baz"))) ("qwe"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spaces"))) ("key with spaces"))) ("value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spaces"))) ("another with spaces"))) ("splat!"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Long Line"))) ("foo"))) ("this line is much, much longer than my editornlikes it."))
                        ((xself).xallow_no_value).if
                          bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("NoValue"))) ("option-without-value"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)).apply ("foo") ("baz"))) ("bar1"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)) ("foo") ("baz"))) ("bar1"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)) ("foo") ((((unsupported)).apply ("foo") ("baz"))))) ("baz"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("No Such Foo Bar"))) ("foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Foo Bar"))) ("no-such-foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply (((((unsupported)).apply ((xcf)) ("No Such Foo Bar")).xget)) ("foo") ("baz"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)).apply ("no-such-foo") ("baz"))) ("baz"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)) ("no-such-foo") ("baz"))) ("baz"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Foo Bar")).xget)).apply ("no-such-foo"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Spacey Bar")).xget)).apply ("foo") ("None: is there a None literal in the EO language?"))) ("bar2"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Spacey Bar")).xget)) ("foo") ("None: is there a None literal in the EO language?"))) ("bar2"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xcf)) ("No Such Spacey Bar")).xget)).apply ("foo") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetint)).apply ("int") (18))) (42))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetint)) ("int") (18))) (42))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetint)).apply ("no-such-int") (18))) (18))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetint)) ("no-such-int") (18))) (18))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetint)).apply ("no-such-int") ("18"))) ("18"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetint)) ("no-such-int") ("18"))) ("18"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetint)).apply ("no-such-int"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)).apply ("float") (0.0))) (0.44))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)) ("float") (0.0))) (0.44))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)).apply ("no-such-float") (0.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)) ("no-such-float") (0.0))) (0.0))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)).apply ("no-such-float") ("0.0"))) ("0.0"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)) ("no-such-float") ("0.0"))) ("0.0"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetfloat)).apply ("no-such-float"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)).apply ("boolean") (TRUE))) ((xfalse)))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)) ("boolean") (TRUE))) ((xfalse)))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)).apply ("no-such-boolean") ("yes"))) ("yes"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)) ("no-such-boolean") ("yes"))) ("yes"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)).apply ("no-such-boolean") (TRUE))) (TRUE))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)) ("no-such-boolean") (TRUE))) (TRUE))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("Types")).xgetboolean)).apply ("no-such-boolean"))) ("None: is there a None literal in the EO language?"))
                        ((xself).xallow_no_value).if
                          seq
                            bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("NoValue")).xget)).apply ("option-without-value") ((xfalse)))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("NoValue")).xget)) ("option-without-value") ((xfalse)))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("NoValue")).xget)).apply ("no-such-option-without-value") ((xfalse)))) ((xfalse)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((unsupported)).apply ((xcf)) ("NoValue")).xget)) ("no-such-option-without-value") ((xfalse)))) ((xfalse)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("this_value"))) ("1"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("that_value"))) ("2"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xremove_section)).apply ("Spaces"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xhas_option)).apply ("Spaces") ("key with spaces"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xremove_section)).apply ("Spaces"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xremove_section)).apply (((xself).xdefault_section)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xremove_option)).apply ("Foo Bar") ("foo"))) ("remove_option() failed to report existence of option"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xhas_option)).apply ("Foo Bar") ("foo"))) ("remove_option() failed to remove option"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xremove_option)).apply ("Foo Bar") ("foo"))) ("remove_option() failed to report non-existence of option that was removed"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xhas_option)).apply ("Foo Bar") ("this_value"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xremove_option)).apply ("Foo Bar") ("this_value"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xremove_option)).apply (((xself).xdefault_section)) ("this_value"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xhas_option)).apply ("Foo Bar") ("this_value"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xremove_option)).apply (((xself).xdefault_section)) ("this_value"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))) ((xcm)))
                          bogusForceDataize.write ((((xcf).xremove_option)).apply ("No Such Section") ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply ("No Such Section"))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Long Line") ("foo"))) ("this line is much, much longer than my editornlikes it."))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Types"))))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((unsupported)).apply ("Types") ((xcf)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Types"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spacey Bar"))) ("foo"))))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xcf)) ("Spacey Bar"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spacey Bar"))) ("foo"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("that_value") ((((unsupported)).apply ((xcf)) ("Spacey Bar"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Spacey Bar"))) ("that_value"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("that_value"))))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((unsupported)).apply ("that_value") ((((unsupported)).apply ((xcf)) ("Spacey Bar"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("that_value"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("No Such Section"))) ("foo"))))))
                xtest_basic.write
                  [xself]
                    memory > xconfig_string
                    memory > xcf
                    seq > @
                      seq
                        xconfig_string.write ((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)) (((xself).xcomment_prefixes)))
                        ((xself).xallow_no_value).if
                          (((unsupported)).apply ((xconfig_string)) ("[NoValue]noption-without-valuen"))
                        xcf.write ((((xself).xfromstring)).apply ((xconfig_string)))
                        bogusForceDataize.write ((((xself).xbasic_test)).apply ((xcf)))
                        ((xself).xstrict).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateOptionError)))))
                              bogusForceDataize.write ((((xcf).xread_string)).apply (((((xtextwrap).xdedent)).apply (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateSectionError)))))
                              bogusForceDataize.write ((((xcf).xread_string)).apply (((((xtextwrap).xdedent)).apply (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))))))
                          seq
                            bogusForceDataize.write ((((xcf).xread_string)).apply (((((xtextwrap).xdedent)).apply (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))))))
                            bogusForceDataize.write ((((xcf).xread_string)).apply (((((xtextwrap).xdedent)).apply (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))))))
                xtest_basic_from_dict.write
                  [xself]
                    memory > xcf
                    memory > xconfig
                    seq > @
                      seq
                        xconfig.write (((unsupported)).apply ("Foo Bar") ((((unsupported)).apply ("foo") ("bar1"))) ("Spacey Bar") ((((unsupported)).apply ("foo") ("bar2"))) ("Spacey Bar From The Beginning") ((((unsupported)).apply ("foo") ("bar3") ("baz") ("qwe"))) ("Commented Bar") ((((unsupported)).apply ("foo") ("bar4") ("baz") ("qwe"))) ("Long Line") ((((unsupported)).apply ("foo") ("this line is much, much longer than my editornlikes it."))) ((((unsupported)).apply)) ((((unsupported)).apply)) ("Internationalized Stuff") ((((unsupported)).apply ("foo[bg]") ("Bulgarian") ("foo") ("Default") ("foo[en]") ("English") ("foo[de]") ("Deutsch"))) ("Spaces") ((((unsupported)).apply ("key with spaces") ("value") ("another with spaces") ("splat!"))) ("Types") ((((unsupported)).apply ("int") (42) ("float") (0.44) ("boolean") ((xfalse)) (123) ("strange but acceptable"))))
                        ((xself).xallow_no_value).if
                          bogusForceDataize.write ((((xconfig).xupdate)).apply ((((unsupported)).apply ("NoValue") ((((unsupported)).apply ("option-without-value") ("None: is there a None literal in the EO language?"))))))
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xcf).xread_dict)).apply ((xconfig)))
                        bogusForceDataize.write ((((xself).xbasic_test)).apply ((xcf)))
                        ((xself).xstrict).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateSectionError)))))
                              bogusForceDataize.write ((((xcf).xread_dict)).apply ((((unsupported)).apply ("1") ((((unsupported)).apply ("key") ("value"))) (1) ((((unsupported)).apply ("key2") ("value2"))))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateOptionError)))))
                              bogusForceDataize.write ((((xcf).xread_dict)).apply ((((unsupported)).apply ("Duplicate Options Here") ((((unsupported)).apply ("option") ("with a value") ("OPTION") ("with another value"))))))
                          seq
                            bogusForceDataize.write ((((xcf).xread_dict)).apply ((((unsupported)).apply ("section") ((((unsupported)).apply ("key") ("value"))) ("SECTION") ((((unsupported)).apply ("key2") ("value2"))))))
                            bogusForceDataize.write ((((xcf).xread_dict)).apply ((((unsupported)).apply ("Duplicate Options Here") ((((unsupported)).apply ("option") ("with a value") ("OPTION") ("with another value"))))))
                xtest_case_sensitivity.write
                  [xself]
                    memory > xeq
                    memory > xL
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("A"))
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("a"))
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("B"))
                        xL.write ((((xcf).xsections)).apply)
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((((unsupported)).apply ("A") ("B") ("a"))))
                        bogusForceDataize.write ((((xcf).xset)).apply ("a") ("B") ("value"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xoptions)).apply ("a"))) ((((unsupported)).apply ("b"))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("a") ("b"))) ("value") ("could not locate option, expecting case-insensitive option names"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))))
                          bogusForceDataize.write ((((xcf).xset)).apply ("b") ("A") ("value"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xhas_option)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xhas_option)).apply ("b") ("b"))))
                        bogusForceDataize.write ((((xcf).xset)).apply ("A") ("A-B") ("A-B value"))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("a-b") ("A-b") ("a-B") ("A-B"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xhas_option)).apply ("A") ((xopt)))) ("has_option() returned false for option which should exist"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xoptions)).apply ("A"))) ((((unsupported)).apply ("a-b"))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xoptions)).apply ("a"))) ((((unsupported)).apply ("b"))))
                        bogusForceDataize.write ((((xcf).xremove_option)).apply ("a") ("B"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xoptions)).apply ("a"))) ((((unsupported)).apply)))
                        xcf.write ((((xself).xfromstring)).apply (((("[MySection]nOption{} first line   ntsecond line   n".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xoptions)).apply ("MySection"))) ((((unsupported)).apply ("option"))))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("MySection") ("Option"))) ("first linensecond line"))
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) (((("[section]nnekey{}nevaluen".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))) ((((unsupported)).apply ("key") ("value"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xhas_option)).apply ("section") ("Key"))))
                xtest_case_sensitivity_mapping_access.write
                  [xself]
                    memory > xeq
                    memory > xL
                    memory > xcf
                    memory > xelem_eq
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("A"))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("a"))) ((((unsupported)).apply ("B") ("value"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("B"))) ((((unsupported)).apply)))
                        xL.write (((unsupported)).apply ((xsection)) ((xsection)) ((xcf)))
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        xeq.write ((xself).xassertEqual)
                        xelem_eq.write ((xself).xassertCountEqual)
                        bogusForceDataize.write (((xeq)).apply ((xL)) ((((xsorted)).apply ((((unsupported)).apply ("A") ("B") (((xself).xdefault_section)) ("a"))))))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("a")).xkeys)).apply)) ((((unsupported)).apply ("b"))))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("a"))) ("b"))) ("value") ("could not locate option, expecting case-insensitive option names"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("b"))) ("A"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("b") ((((unsupported)).apply ((xcf)) ("a"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("A"))) ("A-B"))) ("A-B value"))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("a-b") ("A-b") ("a-B") ("A-B"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xopt)) ((((unsupported)).apply ((xcf)) ("A"))))) ("has_option() returned false for option which should exist"))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("A")).xkeys)).apply)) ((((unsupported)).apply ("a-b"))))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("a")).xkeys)).apply)) ((((unsupported)).apply ("b"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("a"))) ("B"))))))
                        bogusForceDataize.write (((xelem_eq)).apply (((((((unsupported)).apply ((xcf)) ("a")).xkeys)).apply)) ((((unsupported)).apply)))
                        xcf.write ((((xself).xfromstring)).apply (((("[MySection]nOption{} first line   ntsecond line   n".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write (((xeq)).apply (((((((unsupported)).apply ((xcf)) ("MySection")).xkeys)).apply)) ((((unsupported)).apply ("option"))))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("MySection"))) ("Option"))) ("first linensecond line"))
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) (((("[section]nnekey{}nevaluen".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))) ((((unsupported)).apply ("key") ("value"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("Key") ((((unsupported)).apply ((xcf)) ("section"))))))
                xtest_default_case_sensitivity.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply ((((unsupported)).apply ("foo") ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply (((xself).xdefault_section)) ("Foo"))) ("Bar") ("could not locate option, expecting case-insensitive option names"))
                        xcf.write ((((xself).xnewconfig)).apply ((((unsupported)).apply ("Foo") ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply (((xself).xdefault_section)) ("Foo"))) ("Bar") ("could not locate option, expecting case-insensitive defaults"))
                xtest_parse_errors.write
                  [xself]
                    memory > xerror
                    memory > xcf
                    memory > xe
                    memory > xexpected
                    memory > xtricky
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xparse_error)).apply ((xcf)) (((xconfigparser).xParsingError)) (((("[Foo]n{}val-without-opt-namen".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write ((((xself).xparse_error)).apply ((xcf)) (((xconfigparser).xParsingError)) (((("[Foo]n{}val-without-opt-namen".xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (1))))))
                        xe.write ((((xself).xparse_error)).apply ((xcf)) (((xconfigparser).xMissingSectionHeaderError)) ("No Section!n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("<???>") (1) ("No Section!n"))))
                        (((xself).xallow_no_value).not).if
                          seq
                            xe.write ((((xself).xparse_error)).apply ((xcf)) (((xconfigparser).xParsingError)) ("[Foo]n  wrong-indentn"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("<???>"))))
                            xtricky.write ((((xsupport).xfindfile)).apply ("cfgparser.3"))
                            ((((unsupported)).apply (((xself).xdelimiters)) (0)).eq "=").if
                              seq
                                xerror.write ((xconfigparser).xParsingError)
                                xexpected.write (((unsupported)).apply ((xtricky)))
                              seq
                                xerror.write ((xconfigparser).xMissingSectionHeaderError)
                                xexpected.write (((unsupported)).apply ((xtricky)) (1) ("  # INI with as many tricky parts as possiblen"))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xtricky)) ("utf-8"))) ((xf)))
                              xe.write ((((xself).xparse_error)).apply ((xcf)) ((xerror)) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((xexpected)))
                xparse_error.write
                  [xself xcf xexc xsrc]
                    memory > xsio
                    seq > @
                      seq
                        (((xhasattr)).apply ((xsrc)) ("readline")).if
                          xsio.write (xsrc)
                          xsio.write ((((xio).xStringIO)).apply ((xsrc)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xexc)))) ((xcm)))
                          bogusForceDataize.write ((((xcf).xread_file)).apply ((xsio)))
                        (((unsupported)).apply (((xcm).xexception)))
                xtest_query_errors.write
                  [xself]
                    memory > xe
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply)) ("new ConfigParser should have no defined sections"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xhas_section)).apply ("Foo"))) ("new ConfigParser should have no acknowledged sections"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))))
                          bogusForceDataize.write ((((xcf).xoptions)).apply ("Foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))))
                          bogusForceDataize.write ((((xcf).xset)).apply ("foo") ("bar") ("value"))
                        xe.write ((((xself).xget_error)).apply ((xcf)) (((xconfigparser).xNoSectionError)) ("foo") ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("foo"))))
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("foo"))
                        xe.write ((((xself).xget_error)).apply ((xcf)) (((xconfigparser).xNoOptionError)) ("foo") ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("bar") ("foo"))))
                xget_error.write
                  [xself xcf xexc xsection xoption]
                    seq > @
                      (((unsupported)).apply ((xexc)))
                        bogusForceDataize.write ((((xcf).xget)).apply ((xsection)) ((xoption)))
                        (((unsupported)).apply ((xe)))
                        bogusForceDataize.write ((((xself).xfail)).apply (("expected exception type %s.%s".mod (((unsupported)).apply (((xexc).x__module__)) (((xexc).x__qualname__))))))
                xtest_boolean.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[BOOLTEST]nT1{equals}1nT2{equals}TRUEnT3{equals}TruenT4{equals}oNnT5{equals}yesnF1{equals}0nF2{equals}FALSEnF3{equals}falsenF4{equals}oFFnF5{equals}nOnE1{equals}2nE2{equals}foonE3{equals}-1nE4{equals}0.1nE5{equals}FALSE AND MORE".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        (((unsupported)).apply ((xx)) ((((xrange)).apply (1) (5))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcf).xgetboolean)).apply ("BOOLTEST") (("t%d".mod (xx))))))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xgetboolean)).apply ("BOOLTEST") (("f%d".mod (xx))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcf).xgetboolean)) ("BOOLTEST") (("e%d".mod (xx))))
                xtest_weird_errors.write
                  [xself]
                    memory > xe
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("Foo"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateSectionError)))) ((xcm)))
                          bogusForceDataize.write ((((xcf).xadd_section)).apply ("Foo"))
                        xe.write ((xcm).xexception)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("Section 'Foo' already exists"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("Foo") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        ((xself).xstrict).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateSectionError)))) ((xcm)))
                              (((unsupported)).apply (((xcf).xread_string)) (((((xtextwrap).xdedent)).apply ((((unsupported)).apply (((((unsupported)).apply).xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))) ("<foo-bar>"))
                            xe.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("While reading from '<foo-bar>' [line  5]: section 'Foo' already exists"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("Foo") ("<foo-bar>") (5))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateOptionError)))) ((xcm)))
                              bogusForceDataize.write ((((xcf).xread_dict)).apply ((((unsupported)).apply ("Bar") ((((unsupported)).apply ("opt") ("val") ("OPT") ("is really `opt`"))))))
                            xe.write ((xcm).xexception)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("While reading from '<dict>': option 'opt' in section 'Bar' already exists"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("Bar") ("opt") ("<dict>") ("None: is there a None literal in the EO language?"))))
                xtest_write.write
                  [xself]
                    memory > xoutput
                    memory > xexpect_string
                    memory > xdelimiter
                    memory > xconfig_string
                    memory > xcf
                    seq > @
                      seq
                        xconfig_string.write (((unsupported)).apply (("[Long Line]nfoo{0[0]} this line is much, much longer than my editorn   likes it.n[{default_section}]nfoo{0[1]} another veryn long linen[Long Line - With Comments!]ntest {0[1]} we        {comment} cann            also      {comment} placen            comments  {comment} inn            multiline {comment} valuesn".xformat)) (((xself).xdelimiters)) ((((unsupported)).apply (((xself).xcomment_prefixes)) (0))) (((xself).xdefault_section)))
                        ((xself).xallow_no_value).if
                          (((unsupported)).apply ((xconfig_string)) ("[Valueless]noption-without-valuen"))
                        xcf.write ((((xself).xfromstring)).apply ((xconfig_string)))
                        (((unsupported)).apply ((xspace_around_delimiters)) ((((unsupported)).apply (TRUE) ((xfalse)))))
                          seq
                            xoutput.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply (((xcf).xwrite)) ((xoutput)) ((xspace_around_delimiters)))
                            xdelimiter.write (((unsupported)).apply (((xself).xdelimiters)) (0))
                            (xspace_around_delimiters).if
                              xdelimiter.write (((" {} ".xformat)).apply ((xdelimiter)))
                            xexpect_string.write (((unsupported)).apply (("[{default_section}]nfoo{equals}another veryntlong linenn[Long Line]nfoo{equals}this line is much, much longer than my editorntlikes it.nn[Long Line - With Comments!]ntest{equals}wentalsontcommentsntmultilinenn".xformat)) ((xdelimiter)) (((xself).xdefault_section)))
                            ((xself).xallow_no_value).if
                              (((unsupported)).apply ((xexpect_string)) ("[Valueless]noption-without-valuenn"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xgetvalue)).apply)) ((xexpect_string)))
                xtest_set_string_types.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[sect]noption1{eq}foon".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        (((unsupported)).apply ((xstr)))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ("splat"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ((((xmystr)).apply ("splat"))))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option2") ("splat"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option2") ((((xmystr)).apply ("splat"))))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ("splat"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option2") ("splat"))
                xtest_read_returns_file_list.write
                  [xself]
                    memory > xfile1
                    memory > xcf
                    memory > xparsed_files
                    seq > @
                      seq
                        ((((unsupported)).apply (((xself).xdelimiters)) (0)).neq "=").if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("incompatible format"))
                        xfile1.write ((((xsupport).xfindfile)).apply ("cfgparser.1"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((((unsupported)).apply ((xfile1)) ("nonexistent-file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Foo Bar") ("foo"))) ("newbar"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((xfile1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Foo Bar") ("foo"))) ("newbar"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply (((((xpathlib).xPath)).apply ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Foo Bar") ("foo"))) ("newbar"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((((unsupported)).apply (((((xpathlib).xPath)).apply ((xfile1)))) ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1)) ((xfile1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Foo Bar") ("foo"))) ("newbar"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((((unsupported)).apply ("nonexistent-file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply)))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply)))
                xtest_read_returns_file_list_with_bytestring_path.write
                  [xself]
                    memory > xfile1_bytestring
                    memory > xcf
                    memory > xparsed_files
                    seq > @
                      seq
                        ((((unsupported)).apply (((xself).xdelimiters)) (0)).neq "=").if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("incompatible format"))
                        xfile1_bytestring.write (((((((xsupport).xfindfile)).apply ("cfgparser.1")).xencode)).apply)
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((xfile1_bytestring)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1_bytestring)))))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ("nonexistent-file"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply)))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write ((((xcf).xread)).apply ((((unsupported)).apply ((xfile1_bytestring)) ("nonexistent-file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xfile1_bytestring)))))
                xget_interpolation_config.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xfromstring)).apply ((((unsupported)).apply (("[Foo]nbar{equals}something %(with1)s interpolation (1 step)nbar9{equals}something %(with9)s lots of interpolation (9 steps)nbar10{equals}something %(with10)s lots of interpolation (10 steps)nbar11{equals}something %(with11)s lots of interpolation (11 steps)nwith11{equals}%(with10)snwith10{equals}%(with9)snwith9{equals}%(with8)snwith8{equals}%(With7)snwith7{equals}%(WITH6)snwith6{equals}%(with5)snWith5{equals}%(with4)snWITH4{equals}%(with3)snwith3{equals}%(with2)snwith2{equals}%(with1)snwith1{equals}withnn[Mutual Recursion]nfoo{equals}%(bar)snbar{equals}%(foo)snn[Interpolation Error]nname{equals}%(reference)sn".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))))
                xcheck_items_config.write
                  [xself xexpected]
                    memory > xL
                    memory > xcf
                    seq > @
                      seq
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))) ((((unsupported)).apply ("default") ("<default>"))))
                        xL.write (((xlist)).apply ((((unsupported)).apply (((xcf).xitems)) ("section") ((((unsupported)).apply ("value") ("value"))))))
                        bogusForceDataize.write ((((xL).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xL)) ((xexpected)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))))
                          bogusForceDataize.write ((((xcf).xitems)).apply ("no such section"))
                xtest_popitem.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))) ((((unsupported)).apply ("default") ("<default>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcf).xpopitem)).apply)) (0))) ("section1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcf).xpopitem)).apply)) (0))) ("section2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xcf).xpopitem)).apply)) (0))) ("section3"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          bogusForceDataize.write ((((xcf).xpopitem)).apply)
                xtest_clear.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply ((((unsupported)).apply ("foo") ("Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply (((xself).xdefault_section)) ("Foo"))) ("Bar") ("could not locate option, expecting case-insensitive option names"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("zing"))) ((((unsupported)).apply ("option1") ("value1") ("option2") ("value2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("zing"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("zing")).xkeys)).apply)))) ((((unsupported)).apply ("option1") ("option2") ("foo"))))
                        bogusForceDataize.write ((((xcf).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xcf).xsections)).apply)))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xkeys)).apply)))) ((((unsupported)).apply ("foo"))))
                xtest_setitem.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) (((((((unsupported)).apply).xformat)).apply (((xself).xdelimiters)))) ((((unsupported)).apply ("nameD") ("valueD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section1")).xkeys)).apply)))) ((((unsupported)).apply ("name1") ("named"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section2")).xkeys)).apply)))) ((((unsupported)).apply ("name2") ("named"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section3")).xkeys)).apply)))) ((((unsupported)).apply ("name3") ("named"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section1"))) ("name1"))) ("value1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section2"))) ("name2"))) ("value2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section3"))) ("name3"))) ("value3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("section1") ("section2") ("section3"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section2"))) ((((unsupported)).apply ("name22") ("value22"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section2")).xkeys)).apply)))) ((((unsupported)).apply ("name22") ("named"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section2"))) ("name22"))) ("value22"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("name2") ((((unsupported)).apply ((xcf)) ("section2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("section1") ("section2") ("section3"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section3"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section3")).xkeys)).apply)))) ((((unsupported)).apply ("named"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("name3") ((((unsupported)).apply ((xcf)) ("section3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("section1") ("section2") ("section3"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xkeys)).apply)))) ((((xset)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xkeys)).apply)))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section1")).xkeys)).apply)))) ((((unsupported)).apply ("name1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section2")).xkeys)).apply)))) ((((unsupported)).apply ("name22"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section3")).xkeys)).apply)))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("section1") ("section2") ("section3"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("section2"))) ((((unsupported)).apply ((xcf)) ("section2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((((unsupported)).apply ((xcf)) ("section2")).xkeys)).apply)))) ((((unsupported)).apply ("name22"))))
                xtest_invalid_multiline_value.write
                  [xself]
                    memory > xcf
                    memory > xinvalid
                    seq > @
                      seq
                        ((xself).xallow_no_value).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("if no_value is allowed, ParsingError is not raised"))
                        xinvalid.write ((((xtextwrap).xdedent)).apply (((((((unsupported)).apply).xformat)).apply ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        xcf.write ((((xself).xnewconfig)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xParsingError)))))
                          bogusForceDataize.write ((((xcf).xread_string)).apply ((xinvalid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("DEFAULT") ("test"))) ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("DEFAULT"))) ("test"))) ("test"))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xRawConfigParser)
                xstrict.write TRUE
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xtest_interpolation.write
                  [xself]
                    memory > xe
                    memory > xeq
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xget_interpolation_config)).apply)
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar"))) ("something with interpolation (1 step)"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar9"))) ("something with lots of interpolation (9 steps)"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar10"))) ("something with lots of interpolation (10 steps)"))
                        xe.write ((((xself).xget_error)).apply ((xcf)) (((xconfigparser).xInterpolationDepthError)) ("Foo") ("bar11"))
                        (((xself).xinterpolation).eq ((xconfigparser).x_UNSET)).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("bar11") ("Foo") ("something %(with11)s lots of interpolation (11 steps)"))))
                          (((xisinstance)).apply (((xself).xinterpolation)) (((xconfigparser).xLegacyInterpolation))).if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("bar11") ("Foo") ("something %(with11)s lots of interpolation (11 steps)"))))
                xtest_interpolation_missing_value.write
                  [xself]
                    memory > xe
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xget_interpolation_config)).apply)
                        xe.write ((((xself).xget_error)).apply ((xcf)) (((xconfigparser).xInterpolationMissingOptionError)) ("Interpolation Error") ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xreference)) ("reference"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xsection)) ("Interpolation Error"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xoption)) ("name"))
                        (((xself).xinterpolation).eq ((xconfigparser).x_UNSET)).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("name") ("Interpolation Error") ("%(reference)s") ("reference"))))
                          (((xisinstance)).apply (((xself).xinterpolation)) (((xconfigparser).xLegacyInterpolation))).if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xargs)) ((((unsupported)).apply ("name") ("Interpolation Error") ("%(reference)s") ("reference"))))
                xtest_items.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_items_config)).apply ((((unsupported)).apply ((((unsupported)).apply ("default") ("<default>"))) ((((unsupported)).apply ("getdefault") ("|<default>|"))) ((((unsupported)).apply ("key") ("|value|"))) ((((unsupported)).apply ("name") ("value"))))))
                xtest_safe_interpolation.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[section]noption1{eq}xxxnoption2{eq}%(option1)s/xxxnok{eq}%(option1)s/%%snnot_ok{eq}%(option2)s/%%s".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("section") ("ok"))) ("xxx/%s"))
                        (((xself).xinterpolation).eq ((xconfigparser).x_UNSET)).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("section") ("not_ok"))) ("xxx/xxx/%s"))
                          (((xisinstance)).apply (((xself).xinterpolation)) (((xconfigparser).xLegacyInterpolation))).if
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write ((((xcf).xget)).apply ("section") ("not_ok"))
                xtest_set_malformatted_interpolation.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[sect]noption1{eq}foon".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcf).xset)) ("sect") ("option1") ("%foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcf).xset)) ("sect") ("option1") ("foo%"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcf).xset)) ("sect") ("option1") ("f%oo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("foo"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option2") ("foo%%bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option2"))) ("foo%bar"))
                xtest_set_nonstring_types.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[sect]noption1{eq}foon".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option1") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option1") (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option1") ((((xobject)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option2") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option2") (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") ("option2") ((((xobject)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xset)) ("sect") (123) ("invalid opt name!"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcf).xadd_section)) (123))
                xtest_add_section_default.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcf).xadd_section)) (((xself).xdefault_section)))
                xtest_defaults_keyword.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        unsupported
                        xcf.write (((unsupported)).apply (((xself).xnewconfig)) ((((unsupported)).apply (1) (2.4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("1"))) ("2.4"))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xgetfloat)).apply ("1"))) (2.4))
                        xcf.write (((unsupported)).apply (((xself).xnewconfig)) ((((unsupported)).apply ("A") (5.2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("a"))) ("5.2"))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xgetfloat)).apply ("a"))) (5.2))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xinterpolation.write "None: is there a None literal in the EO language?"
                xini.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                xassertMatchesIni.write
                  [xself xcf]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("numbers"))) ("one"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("numbers"))) ("two"))) ("%(one)s * 2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("numbers"))) ("three"))) ("${common:one} * 3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("hexen"))) ("sixteen"))) ("${numbers:two} * 8"))
                xtest_no_interpolation.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply (((xself).xini)))
                        bogusForceDataize.write ((((xself).xassertMatchesIni)).apply ((xcf)))
                xtest_empty_case.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xcf).xread_string)).apply (""))))
                xtest_none_as_default_interpolation.write
                  [xself]
                    memory > x_DEFAULT_INTERPOLATION
                    memory > xcf
                    seq > @
                      seq
                        (((unsupported)).apply (((xconfigparser).xConfigParser)))
                          x_DEFAULT_INTERPOLATION.write "None: is there a None literal in the EO language?"
                        xcf.write (((xCustomConfigParser)).apply)
                        bogusForceDataize.write ((((xcf).xread_string)).apply (((xself).xini)))
                        bogusForceDataize.write ((((xself).xassertMatchesIni)).apply ((xcf)))
            (((unsupported)).apply ((xConfigParserTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xinterpolation.write ((((xconfigparser).xLegacyInterpolation)).apply)
                xtest_set_malformatted_interpolation.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply (("[sect]noption1{eq}foon".xformat)) ((((unsupported)).apply (((xself).xdelimiters)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("foo"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ("%foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("%foo"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ("foo%"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("foo%"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option1") ("f%oo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option1"))) ("f%oo"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("sect") ("option2") ("foo%%bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("sect") ("option2"))) ("foo%%bar"))
            (((unsupported)).apply ((xConfigParserTestCase)))
              seq
                xdelimiters.write (((unsupported)).apply (":=") ("$"))
                xcomment_prefixes.write (((unsupported)).apply ("//") ("\""))
                xinline_comment_prefixes.write (((unsupported)).apply ("//") ("\""))
            (((unsupported)).apply ((xConfigParserTestCase)))
              xdefault_section.write "general"
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xwonderful_spam.write ((("I'm having spam spam spam spam spam spam spam beaked beans spam spam spam and spam!".xreplace)).apply (" ") ("tn"))
                xsetUp.write
                  [xself]
                    memory > xs
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xs.write ((("section{}".xformat)).apply ((xi)))
                            bogusForceDataize.write ((((xcf).xadd_section)).apply ((xs)))
                            (((unsupported)).apply ((xj)) ((((xrange)).apply (10))))
                              bogusForceDataize.write ((((xcf).xset)).apply ((xs)) (((("lovely_spam{}".xformat)).apply ((xj)))) (((xself).xwonderful_spam)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xcf).xwrite)).apply ((xf)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_dominating_multiline_values.write
                  [xself]
                    memory > xcf_from_file
                    seq > @
                      seq
                        xcf_from_file.write ((((xself).xnewconfig)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)))) ((xf)))
                          bogusForceDataize.write ((((xcf_from_file).xread_file)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf_from_file).xget)).apply ("section8") ("lovely_spam4"))) ((((((xself).xwonderful_spam).xreplace)).apply ("tn") ("n"))))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xRawConfigParser)
                xtest_interpolation.write
                  [xself]
                    memory > xeq
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xget_interpolation_config)).apply)
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar"))) ("something %(with1)s interpolation (1 step)"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar9"))) ("something %(with9)s lots of interpolation (9 steps)"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar10"))) ("something %(with10)s lots of interpolation (10 steps)"))
                        bogusForceDataize.write (((xeq)).apply (((((xcf).xget)).apply ("Foo") ("bar11"))) ("something %(with11)s lots of interpolation (11 steps)"))
                xtest_items.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_items_config)).apply ((((unsupported)).apply ((((unsupported)).apply ("default") ("<default>"))) ((((unsupported)).apply ("getdefault") ("|%(default)s|"))) ((((unsupported)).apply ("key") ("|%(name)s|"))) ((((unsupported)).apply ("name") ("%(value)s"))))))
                xtest_set_nonstring_types.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xcf).xadd_section)).apply ("non-string"))
                        bogusForceDataize.write ((((xcf).xset)).apply ("non-string") ("int") (1))
                        bogusForceDataize.write ((((xcf).xset)).apply ("non-string") ("list") ((((unsupported)).apply (0) (1) (1) (2) (3) (5) (8) (13))))
                        bogusForceDataize.write ((((xcf).xset)).apply ("non-string") ("dict") ((((unsupported)).apply ("pi") (3.14159))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("non-string") ("int"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("non-string") ("list"))) ((((unsupported)).apply (0) (1) (1) (2) (3) (5) (8) (13))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("non-string") ("dict"))) ((((unsupported)).apply ("pi") (3.14159))))
                        bogusForceDataize.write ((((xcf).xadd_section)).apply (123))
                        bogusForceDataize.write ((((xcf).xset)).apply (123) ("this is sick") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply (123) ("this is sick"))) (TRUE))
                        (((unsupported)).apply (((xcf).x_dict)) (((xconfigparser).x_default_dict))).if
                          seq
                            (((unsupported)).apply (((xcf).xoptionxform)) ((((unsupported)).apply ((xx)))))
                            bogusForceDataize.write ((((xcf).xset)).apply ("non-string") (1) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("non-string") (1))) (1))
                xtest_defaults_keyword.write
                  [xself]
                    memory > xerr
                    memory > xcf
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))) ((xctx)))
                          (((unsupported)).apply (((xself).xnewconfig)) ((((unsupported)).apply (1) (2.4))))
                        xerr.write ((xctx).xexception)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xerr)))) ("'int' object has no attribute 'lower'"))
                        xcf.write (((unsupported)).apply (((xself).xnewconfig)) ((((unsupported)).apply ("A") (5.2))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) (((xself).xdefault_section)))) ("a"))) (5.2))
            (((unsupported)).apply ((xRawConfigParserTestCase)))
              seq
                xdelimiters.write (((unsupported)).apply (":=") ("$"))
                xcomment_prefixes.write (((unsupported)).apply ("//") ("\""))
                xinline_comment_prefixes.write (((unsupported)).apply ("//") ("\""))
            (((unsupported)).apply ((xCfgParserTestCaseClass)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xRawConfigParser)
                xcomment_prefixes.write (((unsupported)).apply ("#") (";") ("----"))
                xinline_comment_prefixes.write (((unsupported)).apply ("//"))
                xempty_lines_in_values.write (xfalse)
                xtest_reading.write
                  [xself]
                    memory > xsmbconf
                    memory > xsections
                    memory > xcf
                    memory > xparsed_files
                    seq > @
                      seq
                        xsmbconf.write ((((xsupport).xfindfile)).apply ("cfgparser.2"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        xparsed_files.write (((unsupported)).apply (((xcf).xread)) ((((unsupported)).apply ((xsmbconf)) ("nonexistent-file"))) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xparsed_files)) ((((unsupported)).apply ((xsmbconf)))))
                        xsections.write (((unsupported)).apply ("global") ("homes") ("printers") ("print$") ("pdf-generator") ("tmp") ("Agustin"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((xsections)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("global") ("workgroup"))) ("MDKGROUP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xgetint)).apply ("global") ("max log size"))) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("global") ("hosts allow"))) ("127."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("tmp") ("echo command"))) ("cat %s; rm %s"))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xinterpolation.write ((((xconfigparser).xExtendedInterpolation)).apply)
                xdefault_section.write "common"
                xstrict.write TRUE
                xfromstring.write
                  [xself xstring xdefaults xoptionxform]
                    memory > xcf
                    seq > @
                      (((unsupported)).apply)
                        xcf.write ((((xself).xnewconfig)).apply ((xdefaults)))
                        (xoptionxform).if
                          (((unsupported)).apply (((xcf).xoptionxform)) ((xoptionxform)))
                        bogusForceDataize.write ((((xcf).xread_string)).apply ((xstring)))
                        (((unsupported)).apply ((xcf)))
                xtest_extended_interpolation.write
                  [xself]
                    memory > xeq
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)))
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("favourite Beatle"))) ("Paul"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("favourite color"))) ("green"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("tom"))) ("favourite Beatle"))) ("Paul"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("tom"))) ("favourite color"))) ("green"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("tom"))) ("favourite band"))) ("green day"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("tom"))) ("favourite pope"))) ("John Paul II"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("tom"))) ("sequel"))) ("John Paul III"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("ambv"))) ("favourite Beatle"))) ("George"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("ambv"))) ("favourite color"))) ("green"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("ambv"))) ("son of Edward VII"))) ("George V"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("ambv"))) ("son of George V"))) ("George VI"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite Beatle"))) ("George"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite color"))) ("black"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite state of mind"))) ("paranoid"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite movie"))) ("soylent green"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite pope"))) ("John Paul II"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("stanley"))) ("favourite song"))) ("black sabbath - paranoid"))
                xtest_endless_loop.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationDepthError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("one for you"))) ("ping"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationDepthError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("selfish"))) ("me"))
                xtest_strange_options.write
                  [xself]
                    memory > xcf
                    memory > xexception_class
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("dollars"))) ("$var"))) ("$value"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolated"))) ("$other"))) ("$value"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("dollars"))) ("${sick}"))) ("cannot interpolate me"))
                        xexception_class.write ((xconfigparser).xInterpolationMissingOptionError)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xexception_class)))) ((xcm)))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolated"))) ("$trying"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xreference)) ("dollars:${sick"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (2))) ("${dollars:${sick}}"))
                xtest_case_sensitivity_basic.write
                  [xself]
                    memory > xeq
                    memory > xcf
                    memory > xini
                    seq > @
                      seq
                        xini.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        xcf.write ((((xself).xfromstring)).apply ((xini)))
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("optionlower"))) ("value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("OptionUpper"))) ("Value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Common"))) ("optionlower"))) ("a better value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Common"))) ("OptionUpper"))) ("A Better Value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("random"))) ("foolower"))) ("value redefined"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("random"))) ("FooUpper"))) ("A Better Value Redefined"))
                xtest_case_sensitivity_conflicts.write
                  [xself]
                    memory > xeq
                    memory > xcf
                    memory > xini
                    seq > @
                      seq
                        xini.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateOptionError)))))
                          xcf.write ((((xself).xfromstring)).apply ((xini)))
                        xcf.write (((unsupported)).apply (((xself).xfromstring)) ((xini)) ((((unsupported)).apply ((xopt)))))
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("option"))) ("value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("common"))) ("Option"))) ("Value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Common"))) ("option"))) ("a better value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("Common"))) ("Option"))) ("A Better Value"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("random"))) ("foo"))) ("value redefined"))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("random"))) ("Foo"))) ("A Better Value Redefined"))
                xtest_other_errors.write
                  [xself]
                    memory > xcf
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationSyntaxError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case1"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationMissingOptionError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case2"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationMissingOptionError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case3"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationSyntaxError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case4"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationSyntaxError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case5"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcf)) ("interpolation fail"))) ("case6"))) ("BLACK $ABBATH"))
            (((unsupported)).apply ((xConfigParserTestCase)))
              xallow_no_value.write TRUE
            (((unsupported)).apply ((xCfgParserTestCaseClass)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xdelimiters.write (((unsupported)).apply ("="))
                xcomment_prefixes.write (((unsupported)).apply ("#"))
                xallow_no_value.write TRUE
                xtest_cfgparser_dot_3.write
                  [xself]
                    memory > xtricky
                    memory > xcf
                    memory > xlongname
                    seq > @
                      seq
                        xtricky.write ((((xsupport).xfindfile)).apply ("cfgparser.3"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply (((xcf).xread)) ((xtricky)) ("utf-8"))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xsections)).apply)) ((((unsupported)).apply ("strange") ("corruption") ("yeah, sections can be indented as well") ("another one!") ("no values here") ("tricky interpolation") ("more interpolation"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcf).xgetint)) (((xself).xdefault_section)) ("go") ((((unsupported)).apply ("interpolate") ("-1"))))) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xcf).xgetint)) (((xself).xdefault_section)) ("go") (TRUE) ((((unsupported)).apply ("interpolate") ("-1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((((xcf).xget)).apply ("strange") ("other")).xsplit)).apply ("n"))))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((((xcf).xget)).apply ("corruption") ("value")).xsplit)).apply ("n"))))) (10))
                        xlongname.write "yeah, sections can be indented as well"
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcf).xgetboolean)).apply ((xlongname)) ("are they subsections"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ((xlongname)) ("lets use some Unicode"))) ("片仮名"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xcf).xitems)).apply ("another one!"))))) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationMissingOptionError)))))
                          bogusForceDataize.write ((((xcf).xitems)).apply ("no values here"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("tricky interpolation") ("lets"))) ("do this"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("tricky interpolation") ("lets"))) (((((xcf).xget)).apply ("tricky interpolation") ("go"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("more interpolation") ("lets"))) ("go shopping"))
                xtest_unicode_failure.write
                  [xself]
                    memory > xtricky
                    memory > xcf
                    seq > @
                      seq
                        xtricky.write ((((xsupport).xfindfile)).apply ("cfgparser.3"))
                        xcf.write ((((xself).xnewconfig)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnicodeDecodeError)))))
                          (((unsupported)).apply (((xcf).xread)) ((xtricky)) ("ascii"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xexpected_output.write "[section]noption = Nonenn"
                xprepare.write
                  [xself xconfig_class]
                    memory > xsio
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)).apply ((xconfig_class)) ((xfalse)))
                        bogusForceDataize.write ((((xcp).xadd_section)).apply ("section"))
                        bogusForceDataize.write ((((xcp).xset)).apply ("section") ("option") ("None: is there a None literal in the EO language?"))
                        xsio.write ((((xio).xStringIO)).apply)
                        bogusForceDataize.write ((((xcp).xwrite)).apply ((xsio)))
                        (((unsupported)).apply (((((xsio).xgetvalue)).apply)))
                xtest_none_as_value_stringified.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write (((unsupported)).apply (((xconfigparser).xConfigParser)) ((xfalse)))
                        bogusForceDataize.write ((((xcp).xadd_section)).apply ("section"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xcp).xset)).apply ("section") ("option") ("None: is there a None literal in the EO language?"))
                xtest_none_as_value_stringified_raw.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write ((((xself).xprepare)).apply (((xconfigparser).xRawConfigParser)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (((xself).xexpected_output)))
            (((unsupported)).apply ((xRawConfigParserTestCase)))
              seq
                xdict_type.write (xSortedDict)
                xtest_sorted.write
                  [xself]
                    memory > xcf
                    memory > xoutput
                    seq > @
                      seq
                        xcf.write ((((xself).xfromstring)).apply ("[b]no4=1no3=2no2=3no1=4n[a]nk=vn"))
                        xoutput.write ((((xio).xStringIO)).apply)
                        bogusForceDataize.write ((((xcf).xwrite)).apply ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xgetvalue)).apply)) ("[a]nk = vnn[b]no1 = 4no2 = 3no3 = 2no4 = 1nn"))
            (((unsupported)).apply ((xCfgParserTestCaseClass)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xRawConfigParser)
                xcomment_prefixes.write "#;"
                xinline_comment_prefixes.write ";"
                xtest_comment_handling.write
                  [xself]
                    memory > xconfig_string
                    memory > xcf
                    seq > @
                      seq
                        xconfig_string.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xcf.write ((((xself).xfromstring)).apply ((xconfig_string)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Commented Bar") ("foo"))) ("bar # not a comment!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Commented Bar") ("baz"))) ("qwe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcf).xget)).apply ("Commented Bar") ("quirk"))) ("this;is not a comment"))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                xconfig_class.write ((xconfigparser).xConfigParser)
                xfromstring.write
                  [xself xstring xdefaults]
                    memory > xcf_copy
                    memory > xcf
                    seq > @
                      (((unsupported)).apply)
                        xcf.write ((((xself).xnewconfig)).apply ((xdefaults)))
                        bogusForceDataize.write ((((xcf).xread_string)).apply ((xstring)))
                        xcf_copy.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xcf_copy).xread_dict)).apply ((xcf)))
                        (((unsupported)).apply ((xsection)) (((((xcf_copy).xvalues)).apply)))
                          seq
                            (((xsection).xname).eq ((xself).xdefault_section)).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xdefault)) ((xvalue)))) (((((((unsupported)).apply ((xcf)) (((xself).xdefault_section))).xitems)).apply)))
                              ((((unsupported)).apply ((xsection)) ((xdefault))).eq (xvalue)).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsection)) ((xdefault)))))))
                        (((unsupported)).apply ((xcf_copy)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    memory > xfile_path
                    seq > @
                      seq
                        xfile_path.write ((((xsupport).xfindfile)).apply ("cfgparser.1"))
                        (((unsupported)).apply ((((xopen)).apply ((xfile_path)))) ((xf)))
                          seq
                            (((unsupported)).apply (((xself).xlines)) (((((xf).xreadlines)).apply)))
                            bogusForceDataize.write (((((xself).xlines).xreverse)).apply)
                xreadline.write
                  [xself]
                    seq > @
                      seq
                        (((xlen)).apply (((xself).xlines))).if
                          (((unsupported)).apply ((((((xself).xlines).xpop)).apply)))
                        (((unsupported)).apply (""))
            xreadline_generator.write
              [xf]
                memory > xline
                seq > @
                  seq
                    unsupported
                    xline.write ((((xf).xreadline)).apply)
                    while.
                      (xline)
                      [unused]
                        seq > @
                          seq
                            (((unsupported)).apply ((xline)))
                            xline.write ((((xf).xreadline)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_file.write
                  [xself]
                    memory > xfile_paths
                    memory > xparser
                    seq > @
                      seq
                        xfile_paths.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("cfgparser.1"))))
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          bogusForceDataize.write ((((xfile_paths).xappend)).apply (((((((unsupported)).apply ((xfile_paths)) (0)).xencode)).apply ("utf8"))))
                        (((unsupported)).apply ((xfile_path)) ((xfile_paths)))
                          seq
                            xparser.write ((((xconfigparser).xConfigParser)).apply)
                            (((unsupported)).apply ((((xopen)).apply ((xfile_path)))) ((xf)))
                              bogusForceDataize.write ((((xparser).xread_file)).apply ((xf)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo Bar") ((xparser)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((unsupported)).apply ((xparser)) ("Foo Bar"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xparser)) ("Foo Bar"))) ("foo"))) ("newbar"))
                xtest_iterable.write
                  [xself]
                    memory > xlines
                    memory > xparser
                    seq > @
                      seq
                        xlines.write ((((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply).xsplit)).apply ("n"))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        bogusForceDataize.write ((((xparser).xread_file)).apply ((xlines)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo Bar") ((xparser)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((unsupported)).apply ((xparser)) ("Foo Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xparser)) ("Foo Bar"))) ("foo"))) ("newbar"))
                xtest_readline_generator.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        unsupported
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xparser).xread_file)).apply ((((xFakeFile)).apply)))
                        bogusForceDataize.write ((((xparser).xread_file)).apply ((((xreadline_generator)).apply ((((xFakeFile)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo Bar") ((xparser)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((unsupported)).apply ((xparser)) ("Foo Bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xparser)) ("Foo Bar"))) ("foo"))) ("newbar"))
                xtest_source_as_bytes.write
                  [xself]
                    memory > xlines
                    memory > xparser
                    seq > @
                      seq
                        unsupported
                        xlines.write ((((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply).xsplit)).apply ("n"))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateSectionError)))) ((xdse)))
                          (((unsupported)).apply (((xparser).xread_file)) ((xlines)) ("badbad"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xdse).xexception)))) ("While reading from b'badbad' [line  2]: section 'badbad' already exists"))
                        xlines.write ((((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply).xsplit)).apply ("n"))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xDuplicateOptionError)))) ((xdse)))
                          (((unsupported)).apply (((xparser).xread_file)) ((xlines)) ("badbad"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xdse).xexception)))) ("While reading from b'badbad' [line  3]: option 'bad' in section 'badbad' already exists"))
                        xlines.write ((((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply).xsplit)).apply ("n"))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xParsingError)))) ((xdse)))
                          (((unsupported)).apply (((xparser).xread_file)) ((xlines)) ("badbad"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xdse).xexception)))) ("Source contains parsing errors: b'badbad'nt[line  2]: '= bad'"))
                        xlines.write ((((((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply).xsplit)).apply ("n"))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xMissingSectionHeaderError)))) ((xdse)))
                          (((unsupported)).apply (((xparser).xread_file)) ((xlines)) ("badbad"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xdse).xexception)))) ("File contains no section headers.nfile: b'badbad', line: 1n'[badbad'"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_duplicate_option_error.write
                  [xself]
                    memory > xerror
                    seq > @
                      seq
                        xerror.write ((((xconfigparser).xDuplicateOptionError)).apply ("section") ("option"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xsection)) ("section"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xoption)) ("option"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xsource)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xlineno)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xargs)) ((((unsupported)).apply ("section") ("option") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xerror)))) ("Option 'option' in section 'section' already exists"))
                xtest_interpolation_depth_error.write
                  [xself]
                    memory > xerror
                    seq > @
                      seq
                        xerror.write ((((xconfigparser).xInterpolationDepthError)).apply ("option") ("section") ("rawval"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xargs)) ((((unsupported)).apply ("option") ("section") ("rawval"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xoption)) ("option"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xsection)) ("section"))
                xtest_parsing_error.write
                  [xself]
                    memory > xerror
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xconfigparser).xParsingError)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("Required argument `source' not given."))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          (((unsupported)).apply (((xconfigparser).xParsingError)) ("source") ("filename"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("Cannot specify both `filename' and `source'. Use `source'."))
                        xerror.write (((unsupported)).apply (((xconfigparser).xParsingError)) ("source"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xsource)) ("source"))
                        (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xw)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("always") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xfilename)) ("source"))
                            (((unsupported)).apply (((xerror).xfilename)) ("filename"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xsource)) ("filename"))
                        (((unsupported)).apply ((xwarning)) ((xw)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xwarning).xcategory)) ((xDeprecationWarning)))))
                xtest_interpolation_validation.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationSyntaxError)))) ((xcm)))
                          (((unsupported)).apply ((((unsupported)).apply ((xparser)) ("section"))) ("invalid_percent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("'%' must be followed by '%' or '(', found: '%'"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationSyntaxError)))) ((xcm)))
                          (((unsupported)).apply ((((unsupported)).apply ((xparser)) ("section"))) ("invalid_reference"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("bad interpolation variable reference '%(()'"))
                xtest_readfp_deprecation.write
                  [xself]
                    memory > xsio
                    memory > xparser
                    seq > @
                      seq
                        xsio.write ((((xio).xStringIO)).apply ((((unsupported)).apply)))
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xw)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("always") ((xDeprecationWarning)))
                            (((unsupported)).apply (((xparser).xreadfp)) ((xsio)) ("StringIO"))
                        (((unsupported)).apply ((xwarning)) ((xw)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xwarning).xcategory)) ((xDeprecationWarning)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xparser)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xparser)) ("section"))) ("option"))) ("value"))
                xtest_safeconfigparser_deprecation.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xw)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("always") ((xDeprecationWarning)))
                            xparser.write ((((xconfigparser).xSafeConfigParser)).apply)
                        (((unsupported)).apply ((xwarning)) ((xw)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xwarning).xcategory)) ((xDeprecationWarning)))))
                xtest_sectionproxy_repr.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xparser)) ("section"))))) ("<Section: section>"))
                xtest_inconsistent_converters_state.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xparser).xconverters)) ("decimal"))) (((xdecimal).xDecimal)))
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("decimal") (((xparser).xconverters)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetdecimal)).apply ("s1") ("one"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xgetdecimal)).apply ("s2") ("two"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xparser)) ("s1")).xgetdecimal)).apply ("one"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xparser)) ("s2")).xgetdecimal)).apply ("two"))) (2))
                        (((unsupported)).apply ((((unsupported)).apply (((xparser).xgetdecimal)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xparser).xgetdecimal)).apply ("s1") ("one"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("decimal") (((xparser).xconverters)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xparser).xconverters)) ("decimal"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("decimal") (((xparser).xconverters)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xparser).xgetdecimal)).apply ("s1") ("one"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xparser)) ("s1")).xgetdecimal)).apply ("one"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xparser)) ("s2")).xgetdecimal)).apply ("two"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_error.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xError)).apply ("value"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_nosectionerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xNoSectionError)).apply ("section"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_nooptionerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xNoOptionError)).apply ("option") ("section"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_duplicatesectionerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xDuplicateSectionError)).apply ("section") ("source") (123))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsource)) (((xe2).xsource)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xlineno)) (((xe2).xlineno)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_duplicateoptionerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xDuplicateOptionError)).apply ("section") ("option") ("source") (123))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsource)) (((xe2).xsource)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xlineno)) (((xe2).xlineno)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_interpolationerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xInterpolationError)).apply ("option") ("section") ("msg"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_interpolationmissingoptionerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xInterpolationMissingOptionError)).apply ("option") ("section") ("rawval") ("reference"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xreference)) (((xe2).xreference)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_interpolationsyntaxerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xInterpolationSyntaxError)).apply ("option") ("section") ("msg"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_interpolationdeptherror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xInterpolationDepthError)).apply ("option") ("section") ("rawval"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsection)) (((xe2).xsection)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xoption)) (((xe2).xoption)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_parsingerror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xParsingError)).apply ("source"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (1) ("line1"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (2) ("line2"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (3) ("line3"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsource)) (((xe2).xsource)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xerrors)) (((xe2).xerrors)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                        xe1.write (((unsupported)).apply (((xconfigparser).xParsingError)) ("filename"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (1) ("line1"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (2) ("line2"))
                        bogusForceDataize.write ((((xe1).xappend)).apply (3) ("line3"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsource)) (((xe2).xsource)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xerrors)) (((xe2).xerrors)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
                xtest_missingsectionheadererror.write
                  [xself]
                    memory > xe2
                    memory > xe1
                    memory > xpickled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xe1.write ((((xconfigparser).xMissingSectionHeaderError)).apply ("filename") (123) ("line"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xpickled.write ((((xpickle).xdumps)).apply ((xe1)) ((xproto)))
                            xe2.write ((((xpickle).xloads)).apply ((xpickled)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xmessage)) (((xe2).xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xargs)) (((xe2).xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xline)) (((xe2).xline)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsource)) (((xe2).xsource)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xlineno)) (((xe2).xlineno)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xe1)))) ((((xrepr)).apply ((xe2)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_stripping.write
                  [xself]
                    memory > xs
                    memory > xcfg
                    seq > @
                      seq
                        xcfg.write (((unsupported)).apply (((xconfigparser).xConfigParser)) ((((unsupported)).apply (";") ("#") ("//"))))
                        bogusForceDataize.write ((((xcfg).xread_string)).apply ((((unsupported)).apply)))
                        xs.write (((unsupported)).apply ((xcfg)) ("section"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k1"))) ("v1;still v1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k2"))) ("v2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k3"))) ("v3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k4"))) ("v4;still v4"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k5"))) ("v5;still v5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k6"))) ("v6;still v6; and still v6"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k7"))) ("v7;still v7; and still v7"))
                        xs.write (((unsupported)).apply ((xcfg)) ("multiprefix"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k1"))) ("v1;still v1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k2"))) ("v2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("k3"))) ("v3;#//still v3# and still v3"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_get_basic_interpolation.write
                  [xself]
                    memory > xcm
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        xcm.write ((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationMissingOptionError)))
                        (((unsupported)).apply ((xcm)))
                          bogusForceDataize.write ((((xparser).xget)).apply ("Paths") ("my_dir"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcm).xexception).x__suppress_context__)) (TRUE))
                xtest_get_extended_interpolation.write
                  [xself]
                    memory > xcm
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)).apply (((xconfigparser).xConfigParser)) (((((xconfigparser).xExtendedInterpolation)).apply)))
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        xcm.write ((((xself).xassertRaises)).apply (((xconfigparser).xInterpolationMissingOptionError)))
                        (((unsupported)).apply ((xcm)))
                          bogusForceDataize.write ((((xparser).xget)).apply ("Paths") ("my_dir"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcm).xexception).x__suppress_context__)) (TRUE))
                xtest_missing_options.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xconfigparser).xConfigParser)).apply)
                        bogusForceDataize.write ((((xparser).xread_string)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xoptions)).apply ("test"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcm).xexception).x__suppress_context__)) (TRUE))
                xtest_missing_section.write
                  [xself]
                    memory > xconfig
                    seq > @
                      seq
                        xconfig.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))) ((xcm)))
                          bogusForceDataize.write ((((xconfig).xset)).apply ("Section1") ("an_int") ("15"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcm).xexception).x__suppress_context__)) (TRUE))
                xtest_remove_option.write
                  [xself]
                    memory > xconfig
                    seq > @
                      seq
                        xconfig.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoSectionError)))) ((xcm)))
                          bogusForceDataize.write ((((xconfig).xremove_option)).apply ("Section1") ("an_int"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcm).xexception).x__suppress_context__)) (TRUE))
            (((unsupported)).apply ((xBasicTestCase)) (((xunittest).xTestCase)))
              seq
                unsupported
                xconfig_class.write ((xconfigparser).xConfigParser)
                xnewconfig.write
                  [xself xdefaults]
                    memory > xinstance
                    seq > @
                      (((unsupported)).apply)
                        xinstance.write (((unsupported)).apply (((((xsuper)).apply).xnewconfig)) ((xdefaults)))
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xconverters)) ("list"))) ((((unsupported)).apply ((((unsupported)).apply (((((xe).xstrip)).apply)) ((xe)) (((((xv).xsplit)).apply)) (((((xe).xstrip)).apply)))))))
                        (((unsupported)).apply ((xinstance)))
                xtest_converters.write
                  [xself]
                    memory > xs
                    memory > xcfg
                    memory > xdec0_5
                    seq > @
                      seq
                        xcfg.write ((((xself).xnewconfig)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("boolean") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("list") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("int"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("float"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("boolean"))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("list"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcfg).xconverters)))) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) (""))) ((((unsupported)).apply ((xv)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xv)))))
                        bogusForceDataize.write ((((xcfg).xread_string)).apply ((((unsupported)).apply)))
                        xs.write (((unsupported)).apply ((xcfg)) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("str"))) ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("int"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("float"))) ("0.5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("list"))) ("a b c d e f g"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ("bool"))) ("yes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("str"))) ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("int"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("float"))) ("0.5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("list"))) ("a b c d e f g"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("bool"))) ("yes"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xget)).apply ("s") ("str"))) ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetint)).apply ("s") ("int"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetfloat)).apply ("s") ("float"))) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlist)).apply ("s") ("list"))) ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e") ("f") ("g"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetboolean)).apply ("s") ("bool"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xget)).apply ("str"))) ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetint)).apply ("int"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetfloat)).apply ("float"))) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetlist)).apply ("list"))) ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e") ("f") ("g"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetboolean)).apply ("bool"))) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xcfg).xgetdecimal)).apply ("s") ("float"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xs).xgetdecimal)).apply ("float"))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("decimal"))) (((xdecimal).xDecimal)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("decimal") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("decimal"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcfg).xconverters)))) (5))
                        xdec0_5.write ((((xdecimal).xDecimal)).apply ("0.5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetdecimal)).apply ("s") ("float"))) ((xdec0_5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetdecimal)).apply ("float"))) ((xdec0_5)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("decimal"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("decimal") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcfg).xconverters)))) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xcfg).xgetdecimal)).apply ("s") ("float"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xs).xgetdecimal)).apply ("float"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("decimal"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) (""))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xconfig.write (((unsupported)).apply)
                xtest_converters_at_init.write
                  [xself]
                    memory > xcfg
                    seq > @
                      seq
                        xcfg.write (((unsupported)).apply (((xconfigparser).xConfigParser)) ((((unsupported)).apply ("len") ((xlen)))))
                        bogusForceDataize.write ((((xcfg).xread_string)).apply (((xself).xconfig)))
                        bogusForceDataize.write ((((xself).x_test_len)).apply ((xcfg)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("len"))))
                xtest_inheritance.write
                  [xself]
                    memory > xgetboolean
                    memory > xgetlen
                    memory > xcfg
                    memory > xgettysburg
                    seq > @
                      seq
                        (((unsupported)).apply (((xconfigparser).xConfigParser)))
                          seq
                            xgettysburg.write "a historic borough in south central Pennsylvania"
                            xgetboolean.write
                              [xself xsection xoption xraw xvars xfallback]
                                seq > @
                                  (((unsupported)).apply)
                                    ((xsection).eq (xoption)).if
                                      (((unsupported)).apply (TRUE))
                                    (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xgetboolean)) ((xsection)) ((xoption)) ((xraw)) ((xvars)) ((xfallback)))))
                            xgetlen.write
                              [xself xsection xoption xraw xvars xfallback]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).x_get_conv)) ((xsection)) ((xoption)) ((xlen)) ((xraw)) ((xvars)) ((xfallback)))))
                        xcfg.write (((xStrangeConfigParser)).apply)
                        bogusForceDataize.write ((((xcfg).xread_string)).apply (((xself).xconfig)))
                        bogusForceDataize.write ((((xself).x_test_len)).apply ((xcfg)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("len"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("one") ("one"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("two") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("one") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("two") ("one"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("boolean"))) (((xcfg).x_convert_to_boolean)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("one") ("one"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("two") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("one") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("two") ("one"))))
                x_test_len.write
                  [xself xcfg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcfg).xconverters)))) (4))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("boolean") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("len") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("tysburg") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("int"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("float"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("boolean"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("three"))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("three"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcfg).xgetlen)) ("two") ("four") (0))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xconfigparser).xNoOptionError)))))
                          bogusForceDataize.write ((((xcfg).xgetlen)).apply ("two") ("four"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("one")).xgetlen)).apply ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("one")).xgetlen)).apply ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("one")).xgetlen)).apply ("three"))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("three"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("four") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("four"))) ("None: is there a None literal in the EO language?"))
                xtest_instance_assignment.write
                  [xself]
                    memory > xcfg
                    seq > @
                      seq
                        xcfg.write ((((xconfigparser).xConfigParser)).apply)
                        (((unsupported)).apply (((xcfg).xgetboolean)) ((((unsupported)).apply (TRUE))))
                        (((unsupported)).apply (((xcfg).xgetlen)) ((((unsupported)).apply ((((xlen)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcfg)) ((xsection)))) ((xoption)))))))))
                        bogusForceDataize.write ((((xcfg).xread_string)).apply (((xself).xconfig)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcfg).xconverters)))) (3))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("boolean") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("len") (((xcfg).xconverters)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("int"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("float"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("boolean"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("one") ("one"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("two") ("two"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("one") ("two"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcfg).xgetboolean)).apply ("two") ("one"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xcfg).xconverters)) ("boolean"))) (((xcfg).x_convert_to_boolean)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("one") ("one"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("two") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("one") ("two"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcfg).xgetboolean)).apply ("two") ("one"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("one") ("three"))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("one"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("two"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcfg).xgetlen)).apply ("two") ("three"))) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("one")).xgetlen)).apply ("one"))) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xcfg)) ("two")).xgetlen)).apply ("one"))) (5))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("Error"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xconfigparser)) ((xblacklist)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)