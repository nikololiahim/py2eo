memory > xcan_symlink
memory > xparts
memory > xstr
memory > xfile
memory > xrange
memory > xbase
memory > xtype
memory > xr
memory > xbytes
memory > xsorted
memory > xcreate_empty_file
memory > xkwargs
memory > xskip_unless_symlink
memory > xtuples
memory > xlist
memory > xset
memory > xit
memory > xx
memory > xi
memory > xTESTFN
memory > xos
memory > xshutil
memory > xunittest
memory > xnext
memory > xmap
memory > xj
memory > xlen
memory > xchange_cwd
memory > x__name__
[] > test_glob
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_glob_directory_names
        memory > xtest_escape_windows
        memory > xtest_glob_nested_directory
        memory > xtest_glob_magic_in_drive
        memory > xtest_glob_one_directory
        memory > xjoins
        memory > xsetUp
        memory > xglob
        memory > xmktemp
        memory > xtest_escape
        memory > xassertSequencesEqual_noorder
        memory > xtearDown
        memory > xrglob
        memory > xtest_glob_bytes_directory_with_trailing_slash
        memory > xtest_glob_literal
        memory > xtest_glob_broken_symlinks
        memory > xnorm
        memory > xtest_glob_many_open_files
        memory > xtest_selflink
        memory > xtest_glob_directory_with_trailing_slash
        memory > xtest_recursive_glob
        memory > xcheck_escape
        memory > xtest_glob_symlinks
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xnorm.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xos).xpath).xnormpath)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ((((unsupported)).apply ((xparts)))))))))
                xjoins.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ((((unsupported)).apply ((xparts)))))) ((xparts)) ((xtuples)))))
                xmktemp.write
                  [xself]
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply)
                        xfilename.write ((((xself).xnorm)).apply ((((unsupported)).apply ((xparts)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbase)) ((xfile)))) ((((((xos).xpath).xsplit)).apply ((xfilename)))))
                        ((((((xos).xpath).xexists)).apply ((xbase))).not).if
                          bogusForceDataize.write ((((xos).xmakedirs)).apply ((xbase)))
                        bogusForceDataize.write (((xcreate_empty_file)).apply ((xfilename)))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtempdir)) (((xTESTFN).add "_dir")))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("a") ("D"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("aab") ("F"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply (".aa") ("G"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply (".bb") ("H"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("aaa") ("zzzF"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("ZZZ"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("EF"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("a") ("bcd") ("EF"))
                        bogusForceDataize.write ((((xself).xmktemp)).apply ("a") ("bcd") ("efg") ("ha"))
                        (xcan_symlink).if
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((((xself).xnorm)).apply ("broken"))) (((((xself).xnorm)).apply ("sym1"))))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("broken") (((((xself).xnorm)).apply ("sym2"))))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((((((xos).xpath).xjoin)).apply ("a") ("bcd"))) (((((xself).xnorm)).apply ("sym3"))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xshutil).xrmtree)).apply (((xself).xtempdir)))
                xglob.write
                  [xself]
                    memory > xbres
                    memory > xpattern
                    memory > xp
                    memory > xres
                    seq > @
                      (((unsupported)).apply)
                        ((((xlen)).apply ((xparts))).eq 1).if
                          xpattern.write (((unsupported)).apply ((xparts)) (0))
                          xpattern.write (((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((xparts)))))
                        xp.write (((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ((xpattern)))
                        xres.write ((((xglob).xglob)).apply ((xp)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xglob).xiglob)).apply ((xp)) ((((unsupported)).apply ((xkwargs)))))) ((xres)))
                        xbres.write (((unsupported)).apply (((((xos).xfsencode)).apply ((xx)))) ((xx)) ((xres)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xglob).xglob)).apply (((((xos).xfsencode)).apply ((xp)))) ((((unsupported)).apply ((xkwargs)))))) ((xbres)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xglob).xiglob)).apply (((((xos).xfsencode)).apply ((xp)))) ((((unsupported)).apply ((xkwargs)))))) ((xbres)))
                        (((unsupported)).apply ((xres)))
                xassertSequencesEqual_noorder.write
                  [xself xl1 xl2]
                    seq > @
                      seq
                        xl1.write (((xlist)).apply ((xl1)))
                        xl2.write (((xlist)).apply ((xl2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xl1)))) ((((xset)).apply ((xl2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xl1)))) ((((xsorted)).apply ((xl2)))))
                xtest_glob_literal.write
                  [xself]
                    memory > xeq
                    memory > xres
                    seq > @
                      seq
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a") ("D"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("D"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("aab"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("aab"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("zymurgy"))) ((((unsupported)).apply)))
                        xres.write ((((xglob).xglob)).apply ("*"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtype)).apply ((xr)))) ((xr)) ((xres)))) ((((unsupported)).apply ((xstr)))))
                        xres.write ((((xglob).xglob)).apply ((((((xos).xpath).xjoin)).apply (((xos).xcurdir)) ("*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtype)).apply ((xr)))) ((xr)) ((xres)))) ((((unsupported)).apply ((xstr)))))
                        xres.write ((((xglob).xglob)).apply ("*"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtype)).apply ((xr)))) ((xr)) ((xres)))) ((((unsupported)).apply ((xbytes)))))
                        xres.write ((((xglob).xglob)).apply ((((((xos).xpath).xjoin)).apply (((((xos).xfsencode)).apply (((xos).xcurdir)))) ("*"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtype)).apply ((xr)))) ((xr)) ((xres)))) ((((unsupported)).apply ((xbytes)))))
                xtest_glob_one_directory.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a*"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply ("a") ("aab") ("aaa"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("*a"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply ("a") ("aaa"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply (".*"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply (".aa") (".bb"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("?aa"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply ("aaa"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("aa?"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply ("aaa") ("aab"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("aa[ab]"))) ((((xmap)).apply (((xself).xnorm)) ((((unsupported)).apply ("aaa") ("aab"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("*q"))) ((((unsupported)).apply)))
                xtest_glob_nested_directory.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        ((((((xos).xpath).xnormcase)).apply ("abCD")).eq "abCD").if
                          bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a") ("bcd") ("E*"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("bcd") ("EF"))))))
                          bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a") ("bcd") ("E*"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("bcd") ("EF"))) (((((xself).xnorm)).apply ("a") ("bcd") ("efg"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a") ("bcd") ("*g"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("bcd") ("efg"))))))
                xtest_glob_directory_names.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("*") ("D"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("D"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("*") ("*a"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("a") ("*") ("*") ("*a"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("a") ("bcd") ("efg") ("ha"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("?a?") ("*F"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("aaa") ("zzzF"))) (((((xself).xnorm)).apply ("aab") ("F"))))))
                xtest_glob_directory_with_trailing_slash.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xglob).xglob)).apply ((((((xself).xnorm)).apply ("Z*Z")).add ((xos).xsep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply)))
                        xres.write ((((xglob).xglob)).apply ((((((xself).xnorm)).apply ("ZZZ")).add ((xos).xsep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply)))
                        xres.write ((((xglob).xglob)).apply ((((((xself).xnorm)).apply ("aa*")).add ((xos).xsep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xres)))) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xset)).apply ((xres)))) ((((unsupported)).apply ((((unsupported)).apply (((((xself).xnorm)).apply ("aaa"))) (((((xself).xnorm)).apply ("aab"))))) ((((unsupported)).apply ((((((xself).xnorm)).apply ("aaa")).add ((xos).xsep))) ((((((xself).xnorm)).apply ("aab")).add ((xos).xsep))))))))
                xtest_glob_bytes_directory_with_trailing_slash.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xglob).xglob)).apply (((((xos).xfsencode)).apply ((((((xself).xnorm)).apply ("Z*Z")).add ((xos).xsep))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply)))
                        xres.write ((((xglob).xglob)).apply (((((xos).xfsencode)).apply ((((((xself).xnorm)).apply ("ZZZ")).add ((xos).xsep))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply)))
                        xres.write ((((xglob).xglob)).apply (((((xos).xfsencode)).apply ((((((xself).xnorm)).apply ("aa*")).add ((xos).xsep))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xres)))) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xset)).apply ((xres)))) ((((unsupported)).apply ((((unsupported)).apply (((((xos).xfsencode)).apply (((((xself).xnorm)).apply ("aaa"))))) (((((xos).xfsencode)).apply (((((xself).xnorm)).apply ("aab"))))))) ((((unsupported)).apply (((((xos).xfsencode)).apply ((((((xself).xnorm)).apply ("aaa")).add ((xos).xsep))))) (((((xos).xfsencode)).apply ((((((xself).xnorm)).apply ("aab")).add ((xos).xsep))))))))))
                xtest_glob_symlinks.write
                  [xself]
                    memory > xeq
                    seq > @
                      (((unsupported)).apply)
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("sym3"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("sym3"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("sym3") ("*"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("sym3") ("EF"))) (((((xself).xnorm)).apply ("sym3") ("efg"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xself).xglob)).apply (("sym3".add ((xos).xsep))))) ((((unsupported)).apply ((((unsupported)).apply (((((xself).xnorm)).apply ("sym3"))))) ((((unsupported)).apply ((((((xself).xnorm)).apply ("sym3")).add ((xos).xsep))))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("*") ("*F"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("aaa") ("zzzF"))) (((((xself).xnorm)).apply ("aab") ("F"))) (((((xself).xnorm)).apply ("sym3") ("EF"))))))
                xtest_glob_broken_symlinks.write
                  [xself]
                    memory > xeq
                    seq > @
                      (((unsupported)).apply)
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("sym*"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("sym1"))) (((((xself).xnorm)).apply ("sym2"))) (((((xself).xnorm)).apply ("sym3"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("sym1"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("sym1"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xglob)).apply ("sym2"))) ((((unsupported)).apply (((((xself).xnorm)).apply ("sym2"))))))
                xtest_glob_magic_in_drive.write
                  [xself]
                    memory > xeq
                    seq > @
                      (((unsupported)).apply)
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ("*:"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ("*:"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ("?:"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ("?:"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xglob).xglob)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                xcheck_escape.write
                  [xself xarg xexpected]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xglob).xescape)).apply ((xarg)))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xglob).xescape)).apply (((((xos).xfsencode)).apply ((xarg)))))) (((((xos).xfsencode)).apply ((xexpected)))))
                xtest_escape.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).xcheck_escape)
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("abc"))
                        bogusForceDataize.write (((xcheck)).apply ("[") ("[[]"))
                        bogusForceDataize.write (((xcheck)).apply ("?") ("[?]"))
                        bogusForceDataize.write (((xcheck)).apply ("*") ("[*]"))
                        bogusForceDataize.write (((xcheck)).apply ("[[_/*?*/_]]") ("[[][[]_/[*][?][*]/_]]"))
                        bogusForceDataize.write (((xcheck)).apply ("/[[_/*?*/_]]/") ("/[[][[]_/[*][?][*]/_]]/"))
                xtest_escape_windows.write
                  [xself]
                    memory > xcheck
                    seq > @
                      (((unsupported)).apply)
                        xcheck.write ((xself).xcheck_escape)
                        bogusForceDataize.write (((xcheck)).apply ("?:?") ("?:[?]"))
                        bogusForceDataize.write (((xcheck)).apply ("*:*") ("*:[*]"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ("//?/c:/?") ("//?/c:/[?]"))
                        bogusForceDataize.write (((xcheck)).apply ("//*/*/*") ("//*/*/[*]"))
                xrglob.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xglob)) ((((unsupported)).apply ((xparts)))) (TRUE) ((((unsupported)).apply ((xkwargs)))))))
                xtest_recursive_glob.write
                  [xself]
                    memory > xjoin
                    memory > xeq
                    memory > xdirs
                    memory > xfull
                    memory > xexpect
                    seq > @
                      seq
                        xeq.write ((xself).xassertSequencesEqual_noorder)
                        xfull.write (((unsupported)).apply ((((unsupported)).apply ("EF"))) ((((unsupported)).apply ("ZZZ"))) ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("a") ("D"))) ((((unsupported)).apply ("a") ("bcd"))) ((((unsupported)).apply ("a") ("bcd") ("EF"))) ((((unsupported)).apply ("a") ("bcd") ("efg"))) ((((unsupported)).apply ("a") ("bcd") ("efg") ("ha"))) ((((unsupported)).apply ("aaa"))) ((((unsupported)).apply ("aaa") ("zzzF"))) ((((unsupported)).apply ("aab"))) ((((unsupported)).apply ("aab") ("F"))))
                        (xcan_symlink).if
                          (((unsupported)).apply ((xfull)) ((((unsupported)).apply ((((unsupported)).apply ("sym1"))) ((((unsupported)).apply ("sym2"))) ((((unsupported)).apply ("sym3"))) ((((unsupported)).apply ("sym3") ("EF"))) ((((unsupported)).apply ("sym3") ("efg"))) ((((unsupported)).apply ("sym3") ("efg") ("ha"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**"))) (((((xself).xjoins)).apply ((((unsupported)).apply (""))) ((((unsupported)).apply ((xfull)))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply (((xos).xcurdir)) ("**"))) (((((xself).xjoins)).apply ((((unsupported)).apply (((xos).xcurdir)) (""))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xos).xcurdir))).add (xi))) ((xi)) ((xfull)))))))))
                        xdirs.write (((unsupported)).apply ((((unsupported)).apply ("a") (""))) ((((unsupported)).apply ("a") ("bcd") (""))) ((((unsupported)).apply ("a") ("bcd") ("efg") (""))) ((((unsupported)).apply ("aaa") (""))) ((((unsupported)).apply ("aab") (""))))
                        (xcan_symlink).if
                          (((unsupported)).apply ((xdirs)) ((((unsupported)).apply ((((unsupported)).apply ("sym3") (""))) ((((unsupported)).apply ("sym3") ("efg") (""))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**") (""))) (((((xself).xjoins)).apply ((((unsupported)).apply (""))) ((((unsupported)).apply ((xdirs)))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("a") ("**"))) (((((xself).xjoins)).apply ((((unsupported)).apply ("a") (""))) ((((unsupported)).apply ("a") ("D"))) ((((unsupported)).apply ("a") ("bcd"))) ((((unsupported)).apply ("a") ("bcd") ("EF"))) ((((unsupported)).apply ("a") ("bcd") ("efg"))) ((((unsupported)).apply ("a") ("bcd") ("efg") ("ha"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("a**"))) (((((xself).xjoins)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("aaa"))) ((((unsupported)).apply ("aab"))))))
                        xexpect.write (((unsupported)).apply ((((unsupported)).apply ("a") ("bcd") ("EF"))) ((((unsupported)).apply ("EF"))))
                        (xcan_symlink).if
                          (((unsupported)).apply ((xexpect)) ((((unsupported)).apply ((((unsupported)).apply ("sym3") ("EF"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**") ("EF"))) (((((xself).xjoins)).apply ((((unsupported)).apply ((xexpect)))))))
                        xexpect.write (((unsupported)).apply ((((unsupported)).apply ("a") ("bcd") ("EF"))) ((((unsupported)).apply ("aaa") ("zzzF"))) ((((unsupported)).apply ("aab") ("F"))) ((((unsupported)).apply ("EF"))))
                        (xcan_symlink).if
                          (((unsupported)).apply ((xexpect)) ((((unsupported)).apply ((((unsupported)).apply ("sym3") ("EF"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**") ("*F"))) (((((xself).xjoins)).apply ((((unsupported)).apply ((xexpect)))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**") ("*F") (""))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("**") ("bcd") ("*"))) (((((xself).xjoins)).apply ((((unsupported)).apply ("a") ("bcd") ("EF"))) ((((unsupported)).apply ("a") ("bcd") ("efg"))))))
                        bogusForceDataize.write (((xeq)).apply (((((xself).xrglob)).apply ("a") ("**") ("bcd"))) (((((xself).xjoins)).apply ((((unsupported)).apply ("a") ("bcd"))))))
                        (((unsupported)).apply ((((xchange_cwd)).apply (((xself).xtempdir)))))
                          seq
                            xjoin.write (((xos).xpath).xjoin)
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ("**") (TRUE))) ((((unsupported)).apply ((((xjoin)).apply ((((unsupported)).apply ((xi)))))) ((xi)) ((xfull)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply ("**") (""))) (TRUE))) ((((unsupported)).apply ((((xjoin)).apply ((((unsupported)).apply ((xi)))))) ((xi)) ((xdirs)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply ("**") ("*"))) (TRUE))) ((((unsupported)).apply ((((xjoin)).apply ((((unsupported)).apply ((xi)))))) ((xi)) ((xfull)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply (((xos).xcurdir)) ("**"))) (TRUE))) (((((unsupported)).apply ((((xjoin)).apply (((xos).xcurdir)) ("")))).add (((unsupported)).apply ((((xjoin)).apply (((xos).xcurdir)) ((((unsupported)).apply ((xi)))))) ((xi)) ((xfull))))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply (((xos).xcurdir)) ("**") (""))) (TRUE))) (((((unsupported)).apply ((((xjoin)).apply (((xos).xcurdir)) ("")))).add (((unsupported)).apply ((((xjoin)).apply (((xos).xcurdir)) ((((unsupported)).apply ((xi)))))) ((xi)) ((xdirs))))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply (((xos).xcurdir)) ("**") ("*"))) (TRUE))) ((((unsupported)).apply ((((xjoin)).apply (((xos).xcurdir)) ((((unsupported)).apply ((xi)))))) ((xi)) ((xfull)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply ("**") ("zz*F"))) (TRUE))) ((((unsupported)).apply ((((xjoin)).apply ("aaa") ("zzzF"))))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ("**zz*F") (TRUE))) ((((unsupported)).apply)))
                            xexpect.write (((unsupported)).apply ((((xjoin)).apply ("a") ("bcd") ("EF"))) ("EF"))
                            (xcan_symlink).if
                              (((unsupported)).apply ((xexpect)) ((((unsupported)).apply ((((xjoin)).apply ("sym3") ("EF"))))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((xglob).xglob)) ((((xjoin)).apply ("**") ("EF"))) (TRUE))) ((xexpect)))
                xtest_glob_many_open_files.write
                  [xself]
                    memory > xiters
                    memory > xbase
                    memory > xp
                    memory > xpattern
                    memory > xdepth
                    seq > @
                      seq
                        xdepth.write 30
                        xbase.write (((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ("deep"))
                        xp.write (((((xos).xpath).xjoin)).apply ((xbase)) ((((unsupported)).apply (((((unsupported)).apply ("d")).mul (xdepth))))))
                        bogusForceDataize.write ((((xos).xmakedirs)).apply ((xp)))
                        xpattern.write (((((xos).xpath).xjoin)).apply ((xbase)) ((((unsupported)).apply (((((unsupported)).apply ("*")).mul (xdepth))))))
                        xiters.write (((unsupported)).apply ((((unsupported)).apply (((xglob).xiglob)) ((xpattern)) (TRUE))) ((xj)) ((((xrange)).apply (100))))
                        (((unsupported)).apply ((xit)) ((xiters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((xp)))
                        xpattern.write (((((xos).xpath).xjoin)).apply ((xbase)) ("**") ("d"))
                        xiters.write (((unsupported)).apply ((((unsupported)).apply (((xglob).xiglob)) ((xpattern)) (TRUE))) ((xj)) ((((xrange)).apply (100))))
                        xp.write (xbase)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xdepth)))))
                          seq
                            xp.write (((((xos).xpath).xjoin)).apply ((xp)) ("d"))
                            (((unsupported)).apply ((xit)) ((xiters)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((xp)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xskip_unless_symlink)))
              xtest_selflink.write
                [xself]
                  memory > xtempdir
                  memory > xdepth
                  memory > xpath
                  memory > xresults
                  seq > @
                    seq
                      xtempdir.write ((xTESTFN).add "_dir")
                      bogusForceDataize.write ((((xos).xmakedirs)).apply ((xtempdir)))
                      bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xshutil).xrmtree)) ((xtempdir)))
                      (((unsupported)).apply ((((xchange_cwd)).apply ((xtempdir)))))
                        seq
                          bogusForceDataize.write ((((xos).xmakedirs)).apply ("dir"))
                          bogusForceDataize.write (((xcreate_empty_file)).apply ((((((xos).xpath).xjoin)).apply ("dir") ("file"))))
                          bogusForceDataize.write ((((xos).xsymlink)).apply (((xos).xcurdir)) ((((((xos).xpath).xjoin)).apply ("dir") ("link"))))
                          xresults.write (((unsupported)).apply (((xglob).xglob)) ("**") (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresults)))) ((((xlen)).apply ((((xset)).apply ((xresults)))))))
                          xresults.write (((xset)).apply ((xresults)))
                          xdepth.write 0
                          while.
                            (xresults)
                            [unused]
                              seq > @
                                seq
                                  xpath.write (((((xos).xpath).xjoin)).apply ((((unsupported)).apply (((((unsupported)).apply ("dir")).add ((((unsupported)).apply ("link")).mul (xdepth)))))))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xpath)) ((xresults)))
                                  bogusForceDataize.write ((((xresults).xremove)).apply ((xpath)))
                                  ((xresults).not).if
                                    (((unsupported)).apply)
                                  xpath.write (((((xos).xpath).xjoin)).apply ((xpath)) ("file"))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xpath)) ((xresults)))
                                  bogusForceDataize.write ((((xresults).xremove)).apply ((xpath)))
                                  (((unsupported)).apply ((xdepth)) (1))
                          xresults.write (((unsupported)).apply (((xglob).xglob)) ((((((xos).xpath).xjoin)).apply ("**") ("file"))) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresults)))) ((((xlen)).apply ((((xset)).apply ((xresults)))))))
                          xresults.write (((xset)).apply ((xresults)))
                          xdepth.write 0
                          while.
                            (xresults)
                            [unused]
                              seq > @
                                seq
                                  xpath.write (((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((((((unsupported)).apply ("dir")).add ((((unsupported)).apply ("link")).mul (xdepth))).add (((unsupported)).apply ("file")))))))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xpath)) ((xresults)))
                                  bogusForceDataize.write ((((xresults).xremove)).apply ((xpath)))
                                  (((unsupported)).apply ((xdepth)) (1))
                          xresults.write (((unsupported)).apply (((xglob).xglob)) ((((((xos).xpath).xjoin)).apply ("**") (""))) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresults)))) ((((xlen)).apply ((((xset)).apply ((xresults)))))))
                          xresults.write (((xset)).apply ((xresults)))
                          xdepth.write 0
                          while.
                            (xresults)
                            [unused]
                              seq > @
                                seq
                                  xpath.write (((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((((((unsupported)).apply ("dir")).add ((((unsupported)).apply ("link")).mul (xdepth))).add (((unsupported)).apply ("")))))))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((xpath)) ((xresults)))
                                  bogusForceDataize.write ((((xresults).xremove)).apply ((xpath)))
                                  (((unsupported)).apply ((xdepth)) (1))
            ((x__name__).eq "__main__").if
              unsupported