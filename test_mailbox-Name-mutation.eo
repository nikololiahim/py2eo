memory > xtempfile
memory > xbytes
memory > xlock_remnant
memory > xclass2_
memory > xvalues
memory > xAttributeError
memory > xheader
memory > xc
memory > xmailbox
memory > xlist
memory > xsetting
memory > xenumerate
memory > xTestMHMessage
memory > xTestBabyl
memory > xValueError
memory > xFakeMailBox
memory > xMiscTestCase
memory > xstr
memory > xfactory
memory > xio
memory > xlabel
memory > xclass1
memory > xTestMMDF
memory > xstat
memory > xkeys
memory > xfile
memory > xsocket
memory > xemail
memory > xrange
memory > xvalue
memory > xpart
memory > xTestProxyFileBase
memory > xNotImplementedError
memory > xStopIteration
memory > xmsg
memory > xKeyError
memory > xhead
memory > xclass2
memory > xTestMMDFMessage
memory > x_TestMboxMMDF
memory > xglob
memory > xp
memory > xTestMessage
memory > xopen
memory > xtextwrap
memory > xpath
memory > xTestBase
memory > xTestMaildir
memory > xf
memory > xset
memory > xre
memory > x_TestMboxMMDFMessage
memory > xint
memory > xTestMbox
memory > xException
memory > xTestMessageConversion
memory > xtime
memory > xtail
memory > xx
memory > xTestFakeMailBox
memory > xexited_pid
memory > xi
memory > xTestPartialFile
memory > xsuper
memory > xsupport
memory > xsys
memory > xsorted
memory > xDeprecationWarning
memory > xTestMailboxSuperclass
memory > xpayload
memory > xTestBabylMessage
memory > xos
memory > xTestMaildirMessage
memory > xPermissionError
memory > xTestProxyFile
memory > xFakeMessage
memory > xinput
memory > xiter
memory > xTestMboxMessage
memory > xclass_
memory > xunittest
memory > xattr
memory > xresult
memory > xTestMailbox
memory > xnext
memory > xmap
memory > xobject
memory > xTestMH
memory > xstatus
memory > xsubdir
memory > xFakeFileLikeObject
memory > x_TestSingleFile
memory > xabs
memory > xlen
memory > xMaildirTestCase
memory > xfp
memory > xTypeError
memory > x__name__
memory > xkey
memory > xa
[] > test_mailbox
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_relock
        memory > xtest_get_folder
        memory > xtest_add_and_close
        memory > xtest_keys
        memory > xtest_mboxmmdf_to_mboxmmdf
        memory > xtest_initialize
        memory > xtest_empty_maildir
        memory > xtest_iter
        memory > xtest_mh_to_mboxmmdf
        memory > xtest__all__
        memory > xtest_add_MM
        memory > x_post_initialize_hook
        memory > x_delete_recursively
        memory > xtest_iteration
        memory > xtest_initialize_with_file
        memory > xtest_clean
        memory > xtest_labels
        memory > xtest_set_item
        memory > xtest_open_close_open
        memory > x_bytes_sample_message
        memory > xget_file
        memory > xtest_folder
        memory > xtest_babyl_to_mboxmmdf
        memory > xtest_notimplemented
        memory > xtest_flags
        memory > x_check_sample
        memory > xtest_add_from_bytes
        memory > xtest_iterkeys
        memory > xtest_add_binary_file
        memory > xtest_issue2625
        memory > x_check_iteration
        memory > xtest_nonempty_maildir_cur
        memory > xtest_add_8bit_body
        memory > x_sample_payloads
        memory > xtest_close
        memory > xtest_folder_file_perms
        memory > xtest_issue7627
        memory > xtest_maildir_to_mh
        memory > xtest_pack
        memory > xtest_seek_and_tell
        memory > xtest_visible
        memory > xtest_mh_to_mh
        memory > xtest_add_that_raises_leaves_mailbox_empty
        memory > xtest_set_MM
        memory > xtest_babyl_to_babyl
        memory > xDUMMY_MESSAGE
        memory > xtest_info_and_flags
        memory > xtest_update
        memory > x_test_remove_or_delitem
        memory > xtest_initialize_incorrectly
        memory > xtest_lock_unlock
        memory > xtest_get_MM
        memory > x_nonascii_msg
        memory > xtest_get_string_from
        memory > xtest_initialize_with_nothing
        memory > xtest_mh_to_maildir
        memory > xclose
        memory > xtest_iteritems
        memory > xtest_nonempty_maildir_new
        memory > xtest_main
        memory > x_test_read
        memory > xtest_add
        memory > xtest_add_nonascii_StringIO_raises
        memory > xtest_get_bytes_from
        memory > xtest_initialize_with_string
        memory > xtest_mboxmmdf_to_maildir
        memory > xtest_initialize_with_binary_file
        memory > xtest_add_binary_nonascii_file
        memory > xtest_babyl_to_mh
        memory > xtest_pop
        memory > xtest_get
        memory > xFROM_
        memory > x_test_flush_or_close
        memory > xsetUp
        memory > xtest_add_invalid_8bit_bytes_header
        memory > xtest_remove
        memory > xtest_terminating_newline
        memory > xtest_explain_to
        memory > xtest_lookup
        memory > xtest_consistent_factory
        memory > xtest_add_doesnt_rewrite
        memory > xtest_from
        memory > x_factory
        memory > x_sample_headers
        memory > xtest_closing_fd
        memory > xtest_date
        memory > x_sample_message
        memory > xtest_popitem_and_flush_twice
        memory > x_check_basics
        memory > xtest_mboxmmdf_to_babyl
        memory > xtest_itervalues
        memory > x_non_latin_bin_msg
        memory > xtest_add_nonascii_string_header_raises
        memory > xtest_directory_in_folder
        memory > xtest_invalid_nonascii_header_as_string
        memory > xtest_add_and_remove_folders
        memory > xtest_nonempty_maildir_both
        memory > xtest_mh_to_babyl
        memory > x_test_iteration
        memory > xtest_discard
        memory > xassertMailboxEmpty
        memory > xtest_getitem
        memory > xtest_readline
        memory > xtest_type_specific_attributes_removed_on_conversion
        memory > xtest_add_StringIO_warns
        memory > x_test_seek_and_tell
        memory > xtest_contains
        memory > xtest_permissions_after_flush
        memory > xtest_subdir
        memory > xtest_message_separator
        memory > xtest_get_message
        memory > xtest_mboxmmdf_to_mh
        memory > xmaxDiff
        memory > xtest_get_file_can_be_closed_twice
        memory > xtest_dump_message
        memory > x_test_readline
        memory > xtest_readlines
        memory > xtest_get_file
        memory > x_check_from
        memory > x_test_readlines
        memory > xtest_all_eMM_attribues_exist
        memory > x__init__
        memory > xtest_get_bytes
        memory > xtest_flush
        memory > xtest_add_mbox_or_mmdf_message
        memory > xtest_initialize_with_unixfrom
        memory > xtest_clear
        memory > xtest_add_from_string
        memory > xtest_refresh_after_safety_period
        memory > xtest_plain_to_x
        memory > xtest_create_tmp
        memory > xtest_initialize_with_eMM
        memory > x_template
        memory > xtest_list_folders
        memory > xtest_read
        memory > xtest_reread
        memory > xtest_get_string
        memory > xtest_values
        memory > xtest_maildir_to_mboxmmdf
        memory > x_get_lock_path
        memory > xtest_initialize_new
        memory > xtest_x_to_invalid
        memory > xtest_file_perms
        memory > xtest_len
        memory > xtest_popitem
        memory > xtest_maildir_to_babyl
        memory > xtest_initialize_existing
        memory > xtest_lock_conflict
        memory > xtearDown
        memory > x_test_close
        memory > xtest_babyl_to_maildir
        memory > xtest_delitem
        memory > xtest_x_to_plain
        memory > xtest_become_message
        memory > xcreateMessage
        memory > xtest_sequences
        memory > xtest_info
        memory > xall_mailbox_types
        memory > xtest_items
        memory > xtest_add_text_file_warns
        memory > xtest_file_permissions
        memory > xtest_refresh
        memory > xtest_maildir_to_maildir
        memory > xtest_x_from_bytes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xall_mailbox_types.write (((unsupported)).apply (((xmailbox).xMessage)) (((xmailbox).xMaildirMessage)) (((xmailbox).xmboxMessage)) (((xmailbox).xMHMessage)) (((xmailbox).xBabylMessage)) (((xmailbox).xMMDFMessage)))
                x_check_sample.write
                  [xself xmsg]
                    memory > xpart2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg)) ((((xemail).xmessage).xMessage)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg)) (((xmailbox).xMessage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((x_sample_headers).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xvalue)) (((((xmsg).xget_all)).apply ((xkey)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmsg).xis_multipart)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xmsg).xget_payload)).apply)))) ((((xlen)).apply ((x_sample_payloads)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xpayload)))) ((((xenumerate)).apply ((x_sample_payloads)))))
                          seq
                            xpart2.write ((((xmsg).xget_payload)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpart)) ((((xemail).xmessage).xMessage)))
                            bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xpart)) (((xmailbox).xMessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpart).xget_payload)).apply)) ((xpayload)))
                x_delete_recursively.write
                  [xself xtarget]
                    seq > @
                      (((((xos).xpath).xisdir)).apply ((xtarget))).if
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtarget)))
                        (((((xos).xpath).xexists)).apply ((xtarget))).if
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtarget)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                x_factory.write "None: is there a None literal in the EO language?"
                x_template.write "From: foonn%sn"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_path)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                xtest_add.write
                  [xself]
                    memory > xkeys
                    seq > @
                      seq
                        xkeys.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply (((((xmailbox).xMessage)).apply ((x_sample_message)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (2))
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply (((((xemail).xmessage_from_string)).apply ((x_sample_message)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (3))
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply (((((xio).xBytesIO)).apply ((x_bytes_sample_message)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (4))
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((x_sample_message)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (5))
                        bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((x_bytes_sample_message)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (6))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply (((((xio).xTextIOWrapper)).apply (((((xio).xBytesIO)).apply ((x_bytes_sample_message)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((((unsupported)).apply ((xkeys)) (0))))) ((((xself).x_template).mod 0)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((((unsupported)).apply (((xself).x_box)) ((((unsupported)).apply ((xkeys)) ((xi)))))))
                x_nonascii_msg.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                xtest_add_invalid_8bit_bytes_header.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        xkey.write (((((xself).x_box).xadd)).apply ((((((xself).x_nonascii_msg).xencode)).apply ("latin-1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_bytes)).apply ((xkey)))) ((((((xself).x_nonascii_msg).xencode)).apply ("latin-1"))))
                xtest_invalid_nonascii_header_as_string.write
                  [xself]
                    memory > xsubj
                    memory > xkey
                    seq > @
                      seq
                        xsubj.write (((unsupported)).apply ((((((xself).x_nonascii_msg).xsplitlines)).apply)) (1))
                        xkey.write (((((xself).x_box).xadd)).apply (((((xsubj).xencode)).apply ("latin-1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))) ("Subject: =?unknown-8bit?b?RmFsaW5hcHThciBo4Xpob3pzeuFsbO104XNzYWwuIE3hciByZW5kZWx06Ww/?=nn"))
                xtest_add_nonascii_string_header_raises.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("ASCII-only"))))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply (((xself).x_nonascii_msg)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        bogusForceDataize.write ((((xself).xassertMailboxEmpty)).apply)
                xtest_add_that_raises_leaves_mailbox_empty.write
                  [xself]
                    memory > xraiser
                    seq > @
                      seq
                        xraiser.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xException)).apply ("a fake error"))))
                        bogusForceDataize.write ((((xsupport).xpatch)).apply ((xself)) ((((xemail).xgenerator).xBytesGenerator)) ("flatten") ((xraiser)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply (((((xemail).xmessage_from_string)).apply ("From: Alphöso"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertMailboxEmpty)).apply)
                x_non_latin_bin_msg.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xencode)).apply ("utf-8"))
                xtest_add_8bit_body.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        xkey.write (((((xself).x_box).xadd)).apply (((xself).x_non_latin_bin_msg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_bytes)).apply ((xkey)))) (((xself).x_non_latin_bin_msg)))
                        (((unsupported)).apply ((((((xself).x_box).xget_file)).apply ((xkey)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ((((((xself).x_non_latin_bin_msg).xreplace)).apply ("n") ((((((xos).xlinesep).xencode)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xself).x_box)) ((xkey))).xget_payload)).apply)) ("Да, они летят.n"))
                xtest_add_binary_file.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb+"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ((x_bytes_sample_message)))
                            bogusForceDataize.write ((((xf).xseek)).apply (0))
                            xkey.write (((((xself).x_box).xadd)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xget_bytes)).apply ((xkey))).xsplit)).apply ("n"))) (((((x_bytes_sample_message).xsplit)).apply ("n"))))
                xtest_add_binary_nonascii_file.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb+"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply (((xself).x_non_latin_bin_msg)))
                            bogusForceDataize.write ((((xf).xseek)).apply (0))
                            xkey.write (((((xself).x_box).xadd)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xget_bytes)).apply ((xkey))).xsplit)).apply ("n"))) ((((((xself).x_non_latin_bin_msg).xsplit)).apply ("n"))))
                xtest_add_text_file_warns.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("w+"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xf).xseek)).apply (0))
                            (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                              xkey.write (((((xself).x_box).xadd)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xget_bytes)).apply ((xkey))).xsplit)).apply ("n"))) (((((x_bytes_sample_message).xsplit)).apply ("n"))))
                xtest_add_StringIO_warns.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xkey.write (((((xself).x_box).xadd)).apply (((((xio).xStringIO)).apply ((((xself).x_template).mod "0")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))) ((((xself).x_template).mod "0")))
                xtest_add_nonascii_StringIO_raises.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("ASCII-only"))))
                            bogusForceDataize.write (((((xself).x_box).xadd)).apply (((((xio).xStringIO)).apply (((xself).x_nonascii_msg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertMailboxEmpty)).apply)
                xtest_remove.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_remove_or_delitem)).apply ((((xself).x_box).xremove)))
                xtest_delitem.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_remove_or_delitem)).apply ((((xself).x_box).x__delitem__)))
                x_test_remove_or_delitem.write
                  [xself xmethod]
                    memory > xkey0
                    memory > xkey2
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (2))
                        bogusForceDataize.write (((xmethod)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((xmethod)).apply ((xkey0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod 1)))
                        xkey2.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (2))
                        bogusForceDataize.write (((xmethod)).apply ((xkey2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey2)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((xmethod)).apply ((xkey2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod 1)))
                        bogusForceDataize.write (((xmethod)).apply ((xkey1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey1)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((xmethod)).apply ((xkey1)))))))
                xtest_discard.write
                  [xself xrepetitions]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      (((unsupported)).apply)
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (2))
                        bogusForceDataize.write (((((xself).x_box).xdiscard)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))))
                        bogusForceDataize.write (((((xself).x_box).xdiscard)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))))
                xtest_get.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    memory > xmsg
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xmsg.write (((((xself).x_box).xget)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmsg)) ("from"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_payload)).apply)) ("0n"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).x_box).xget)).apply ("foo"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).x_box).xget)).apply ("foo") (FALSE))) (FALSE))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        xmsg.write (((((xself).x_box).xget)).apply ((xkey1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmsg)) ("from"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_payload)).apply)) ("1n"))
                xtest_getitem.write
                  [xself]
                    memory > xkey0
                    memory > xmsg
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xmsg.write (((unsupported)).apply (((xself).x_box)) ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmsg)) ("from"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_payload)).apply)) ("0n"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ("foo"))))))
                        bogusForceDataize.write (((((xself).x_box).xdiscard)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))))
                xtest_get_message.write
                  [xself]
                    memory > xkey0
                    memory > xmsg0
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        xmsg0.write (((((xself).x_box).xget_message)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg0)) (((xmailbox).xMessage)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmsg0)) ("from"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg0).xget_payload)).apply)) ("0n"))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((((((xself).x_box).xget_message)).apply ((xkey1)))))
                xtest_get_bytes.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_bytes)).apply ((xkey0)))) (((((((xself).x_template).mod 0).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_bytes)).apply ((xkey1)))) ((x_bytes_sample_message)))
                xtest_get_string.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xget_string)).apply ((xkey1))).xsplit)).apply ("n"))) (((((x_sample_message).xsplit)).apply ("n"))))
                xtest_get_file.write
                  [xself]
                    memory > xdata1
                    memory > xkey0
                    memory > xkey1
                    memory > xdata0
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        (((unsupported)).apply ((((((xself).x_box).xget_file)).apply ((xkey0)))) ((xfile)))
                          xdata0.write ((((xfile).xread)).apply)
                        (((unsupported)).apply ((((((xself).x_box).xget_file)).apply ((xkey1)))) ((xfile)))
                          xdata1.write ((((xfile).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xdata0).xdecode)).apply ("ascii")).xreplace)).apply (((xos).xlinesep)) ("n"))) ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xdata1).xdecode)).apply ("ascii")).xreplace)).apply (((xos).xlinesep)) ("n"))) ((x_sample_message)))
                xtest_get_file_can_be_closed_twice.write
                  [xself]
                    memory > xkey
                    memory > xf
                    seq > @
                      seq
                        xkey.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        xf.write (((((xself).x_box).xget_file)).apply ((xkey)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtest_iterkeys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xiterkeys)) (TRUE) (FALSE))
                xtest_keys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xkeys)) (TRUE) (FALSE))
                xtest_itervalues.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xitervalues)) (FALSE) (TRUE))
                xtest_iter.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).x__iter__)) (FALSE) (TRUE))
                xtest_values.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xvalues)) (FALSE) (TRUE))
                xtest_iteritems.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xiteritems)) (TRUE) (TRUE))
                xtest_items.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_check_iteration)) ((((xself).x_box).xitems)) (TRUE) (TRUE))
                x_check_iteration.write
                  [xself xmethod xdo_keys xdo_values xrepetitions]
                    memory > xreturned_values
                    memory > xreturned_keys
                    memory > xcount
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)) ((((xmethod)).apply)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Not empty"))
                        (((unsupported)).apply ((((unsupported)).apply ((xkeys)) ((xvalues)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xrepetitions)))))
                          seq
                            bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((((xself).x_template).mod (xi))))))
                            bogusForceDataize.write ((((xvalues).xappend)).apply ((((xself).x_template).mod (xi))))
                        ((xdo_keys).and ((xdo_values).not)).if
                          xreturned_keys.write (((xlist)).apply ((((xmethod)).apply)))
                          ((xdo_values).and ((xdo_keys).not)).if
                            xreturned_values.write (((xlist)).apply ((((xmethod)).apply)))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xreturned_keys)) ((xreturned_values)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((xmethod)).apply)))
                                seq
                                  bogusForceDataize.write ((((xreturned_keys).xappend)).apply ((xkey)))
                                  bogusForceDataize.write ((((xreturned_values).xappend)).apply ((xvalue)))
                        (xdo_keys).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xkeys)))) ((((xlen)).apply ((xreturned_keys)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xkeys)))) ((((xset)).apply ((xreturned_keys)))))
                        (xdo_values).if
                          seq
                            xcount.write 0
                            (((unsupported)).apply ((xvalue)) ((xreturned_values)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvalue)) ("from"))) ("foo"))
                                bogusForceDataize.write ((((xself).xassertLess)).apply ((((xint)).apply (((((xvalue).xget_payload)).apply)))) ((xrepetitions)))
                                (((unsupported)).apply ((xcount)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xvalues)))) ((xcount)))
                xtest_contains.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") (((xself).x_box)))
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey0)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") (((xself).x_box)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey0)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") (((xself).x_box)))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey0)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey0)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") (((xself).x_box)))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey1)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey0)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") (((xself).x_box)))
                xtest_len.write
                  [xself xrepetitions]
                    memory > xkeys
                    seq > @
                      (((unsupported)).apply)
                        xkeys.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xrepetitions)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) ((xi)))
                            bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((((xself).x_template).mod (xi))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (((xi).add 1)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xrepetitions)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (((xrepetitions).sub (xi))))
                            bogusForceDataize.write (((((xself).x_box).xremove)).apply ((((unsupported)).apply ((xkeys)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) ((((xrepetitions).sub (xi)).sub 1)))
                xtest_set_item.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod "original 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "original 0")))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod "original 1")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod "original 1")))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))) ((((xself).x_template).mod "changed 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "changed 0")))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey1)))) ((((xself).x_template).mod "changed 1")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod "changed 1")))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))) ((x_sample_message)))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey1)))) ((((unsupported)).apply (((xself).x_box)) ((xkey0)))))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey1)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))) ((((xself).x_template).mod "original 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "original 0")))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((((xself).x_box).x__setitem__)).apply ("foo") ("bar"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ("foo"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (2))
                xtest_clear.write
                  [xself xiterations]
                    memory > xkeys
                    seq > @
                      (((unsupported)).apply)
                        xkeys.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xiterations)))))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod (xi))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xkey)))) ((((xenumerate)).apply ((xkeys)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))) ((((xself).x_template).mod (xi))))
                        bogusForceDataize.write (((((xself).x_box).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xkey)))) ((((xenumerate)).apply ((xkeys)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))))))
                xtest_pop.write
                  [xself]
                    memory > xkey0
                    memory > xkey2
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey0)) (((xself).x_box)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xpop)).apply ((xkey0))).xget_payload)).apply)) ("0n"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey0)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey1)) (((xself).x_box)))
                        xkey2.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 2)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey2)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xpop)).apply ((xkey2))).xget_payload)).apply)) ("2n"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey2)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).x_box).xpop)).apply ((xkey1))).xget_payload)).apply)) ("1n"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey1)) (((xself).x_box)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                xtest_popitem.write
                  [xself xiterations]
                    memory > xkeys
                    memory > xseen
                    seq > @
                      (((unsupported)).apply)
                        xkeys.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          bogusForceDataize.write ((((xkeys).xappend)).apply ((((((xself).x_box).xadd)).apply ((((xself).x_template).mod (xi))))))
                        xseen.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmsg)))) ((((((xself).x_box).xpopitem)).apply)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey)) ((xkeys)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xkey)) ((xseen)))
                            bogusForceDataize.write ((((xseen).xappend)).apply ((xkey)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((((xmsg).xget_payload)).apply)))) (((((xkeys).xindex)).apply ((xkey)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (0))
                        (((unsupported)).apply ((xkey)) ((xkeys)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey)))))))
                xtest_update.write
                  [xself]
                    memory > xkey0
                    memory > xkey2
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod "original 0")))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod "original 1")))
                        xkey2.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod "original 2")))
                        bogusForceDataize.write (((((xself).x_box).xupdate)).apply ((((unsupported)).apply ((xkey0)) ((((xself).x_template).mod "changed 0")) ((xkey2)) ((x_sample_message)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "changed 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod "original 1")))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey2)))))
                        bogusForceDataize.write (((((xself).x_box).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey2)) ((((xself).x_template).mod "changed 2")))) ((((unsupported)).apply ((xkey1)) ((((xself).x_template).mod "changed 1")))) ((((unsupported)).apply ((xkey0)) ((((xself).x_template).mod "original 0")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "original 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod "changed 1")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey2)))) ((((xself).x_template).mod "changed 2")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((((xself).x_box).xupdate)).apply ((((unsupported)).apply ("foo") ("bar") ((xkey0)) ((((xself).x_template).mod "changed 0")))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey0)))) ((((xself).x_template).mod "changed 0")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey1)))) ((((xself).x_template).mod "changed 1")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_string)).apply ((xkey2)))) ((((xself).x_template).mod "changed 2")))
                xtest_flush.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_flush_or_close)).apply ((((xself).x_box).xflush)) (TRUE))
                xtest_popitem_and_flush_twice.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write (((((xself).x_box).xpopitem)).apply)
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write (((((xself).x_box).xpopitem)).apply)
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                xtest_lock_unlock.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((((xself).x_get_lock_path)).apply)))))
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply (((((xself).x_get_lock_path)).apply)))))
                        bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((((xself).x_get_lock_path)).apply)))))
                xtest_close.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_flush_or_close)).apply ((((xself).x_box).xclose)) (FALSE))
                x_test_flush_or_close.write
                  [xself xmethod xshould_call_close]
                    memory > xkeys
                    memory > xoldbox
                    memory > xcontents
                    seq > @
                      seq
                        xcontents.write (((unsupported)).apply ((((xself).x_template).mod (xi))) ((xi)) ((((xrange)).apply (3))))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((unsupported)).apply ((xcontents)) (0))))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((unsupported)).apply ((xcontents)) (1))))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((unsupported)).apply ((xcontents)) (2))))
                        xoldbox.write ((xself).x_box)
                        bogusForceDataize.write (((xmethod)).apply)
                        (xshould_call_close).if
                          bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        xkeys.write (((((xself).x_box).xkeys)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xkeys)))) (3))
                        (((unsupported)).apply ((xkey)) ((xkeys)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))) ((xcontents)))
                        bogusForceDataize.write ((((xoldbox).xclose)).apply)
                xtest_dump_message.write
                  [xself]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply ((xinput)) ((((unsupported)).apply (((((xemail).xmessage_from_string)).apply ((x_sample_message)))) ((x_sample_message)) (((((xio).xBytesIO)).apply ((x_bytes_sample_message)))))))
                          seq
                            xoutput.write ((((xio).xBytesIO)).apply)
                            bogusForceDataize.write (((((xself).x_box).x_dump_message)).apply ((xinput)) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xgetvalue)).apply)) (((((x_bytes_sample_message).xreplace)).apply ("n") ((((((xos).xlinesep).xencode)).apply)))))
                        xoutput.write ((((xio).xBytesIO)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((((xself).x_box).x_dump_message)).apply ("None: is there a None literal in the EO language?") ((xoutput)))))))
                x_get_lock_path.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).x_path).add ".lock")))
            (((unsupported)).apply ((xTestBase)) (((xunittest).xTestCase)))
              xtest_notimplemented.write
                [xself]
                  memory > xbox
                  seq > @
                    seq
                      xbox.write ((((xmailbox).xMailbox)).apply ("path"))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xadd)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xremove)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).x__delitem__)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xdiscard)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).x__setitem__)).apply ("") (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xiterkeys)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xkeys)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply ((((((((xbox).xitervalues)).apply).x__next__)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply ((((((((xbox).x__iter__)).apply).x__next__)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xvalues)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply ((((((((xbox).xiteritems)).apply).x__next__)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xitems)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xget)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).x__getitem__)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xget_message)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xget_string)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xget_bytes)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xget_file)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply ((((unsupported)).apply ("") ((xbox)))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).x__contains__)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).x__len__)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xclear)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xpop)).apply (""))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xpopitem)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ("") (""))))))))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xflush)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xlock)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xunlock)).apply)))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((unsupported)).apply (((((xbox).xclose)).apply)))))
            (((unsupported)).apply ((xTestMailbox)) (((xunittest).xTestCase)))
              seq
                x_factory.write (((unsupported)).apply (((((xmailbox).xMaildir)).apply ((xpath)) ((xfactory)))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xTestMailbox).xsetUp)).apply ((xself)))
                        ((((xos).xname).eq "nt").or (((xsys).xplatform).eq "cygwin")).if
                          (((unsupported)).apply ((((xself).x_box).xcolon)) ("!"))
                xassertMailboxEmpty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("tmp"))))) ((((unsupported)).apply)))
                xtest_add_MM.write
                  [xself]
                    memory > xmsg
                    memory > xkey
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("cur"))
                        bogusForceDataize.write ((((xmsg).xset_info)).apply ("foo"))
                        xkey.write (((((xself).x_box).xadd)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("cur") (("%s%sfoo".mod (((unsupported)).apply ((xkey)) ((((xself).x_box).xcolon))))))))))
                xtest_get_MM.write
                  [xself]
                    memory > xmsg_returned
                    memory > xmsg
                    memory > xkey
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("cur"))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("RF"))
                        xkey.write (((((xself).x_box).xadd)).apply ((xmsg)))
                        xmsg_returned.write (((((xself).x_box).xget_message)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg_returned)) (((xmailbox).xMaildirMessage)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_subdir)).apply)) ("cur"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_flags)).apply)) ("FR"))
                xtest_set_MM.write
                  [xself]
                    memory > xmsg0
                    memory > xmsg1
                    memory > xmsg_returned
                    memory > xmsg2
                    memory > xkey
                    seq > @
                      seq
                        xmsg0.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg0).xset_flags)).apply ("TP"))
                        xkey.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        xmsg_returned.write (((((xself).x_box).xget_message)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_flags)).apply)) ("PT"))
                        xmsg1.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 1)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey)))) ((xmsg1)))
                        xmsg_returned.write (((((xself).x_box).xget_message)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_flags)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_payload)).apply)) ("1n"))
                        xmsg2.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 2)))
                        bogusForceDataize.write ((((xmsg2).xset_info)).apply ("2,S"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey)))) ((xmsg2)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey)))) ((((xself).x_template).mod 3)))
                        xmsg_returned.write (((((xself).x_box).xget_message)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_flags)).apply)) ("S"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg_returned).xget_payload)).apply)) ("3n"))
                xtest_consistent_factory.write
                  [xself]
                    memory > xbox
                    memory > xkey
                    memory > xmsg
                    memory > xmsg2
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("cur"))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("RF"))
                        xkey.write (((((xself).x_box).xadd)).apply ((xmsg)))
                        (((unsupported)).apply (((xmailbox).xMaildirMessage)))
                        xbox.write (((unsupported)).apply (((xmailbox).xMaildir)) (((xself).x_path)) ((xFakeMessage)))
                        (((unsupported)).apply (((xbox).xcolon)) ((((xself).x_box).xcolon)))
                        xmsg2.write ((((xbox).xget_message)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg2)) ((xFakeMessage)))
                xtest_initialize_new.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xtearDown)).apply)
                        (((unsupported)).apply (((xself).x_box)) (((((xmailbox).xMaildir)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).x_check_basics)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                        (((unsupported)).apply (((xself).x_box)) ((((unsupported)).apply (((xself).x_factory)) (((xself).x_path)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).x_check_basics)).apply)
                xtest_initialize_existing.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xtearDown)).apply)
                        (((unsupported)).apply ((xsubdir)) ((((unsupported)).apply ("") ("tmp") ("new") ("cur"))))
                          bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xnormpath)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ((xsubdir)))))))
                        (((unsupported)).apply (((xself).x_box)) (((((xmailbox).xMaildir)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).x_check_basics)).apply)
                x_check_basics.write
                  [xself xfactory]
                    memory > xpath
                    memory > xmode
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_path)) ((((((xos).xpath).xabspath)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_factory)) ((xfactory)))
                        (((unsupported)).apply ((xsubdir)) ((((unsupported)).apply ("") ("tmp") ("new") ("cur"))))
                          seq
                            xpath.write (((((xos).xpath).xjoin)).apply (((xself).x_path)) ((xsubdir)))
                            xmode.write (((unsupported)).apply (((((xos).xstat)).apply ((xpath)))) (((xstat).xST_MODE)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstat).xS_ISDIR)).apply ((xmode)))) (("Not a directory: '%s'".mod (xpath))))
                xtest_list_folders.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("one"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("two"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("one") ("two") ("three"))))))
                xtest_get_folder.write
                  [xself]
                    memory > xfolder1
                    memory > xfolder0
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("foo.bar"))
                        xfolder0.write (((((xself).x_box).xget_folder)).apply ("foo.bar"))
                        bogusForceDataize.write ((((xfolder0).xadd)).apply ((((xself).x_template).mod "bar")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) (".foo.bar"))))))
                        xfolder1.write (((((xself).x_box).xget_folder)).apply ("foo.bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfolder1).xget_string)).apply ((((unsupported)).apply (((((xfolder1).xkeys)).apply)) (0))))) ((((xself).x_template).mod "bar")))
                xtest_add_and_remove_folders.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("one"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("two"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("one") ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("one"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two") ("three"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("two"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xlist_folders)).apply)) ((((unsupported)).apply)))
                xtest_clean.write
                  [xself]
                    memory > xbar_path
                    memory > xfoo_path
                    memory > xfoo_stat
                    seq > @
                      seq
                        xfoo_path.write (((((xos).xpath).xjoin)).apply (((xself).x_path)) ("tmp") ("foo"))
                        xbar_path.write (((((xos).xpath).xjoin)).apply (((xself).x_path)) ("tmp") ("bar"))
                        (((unsupported)).apply ((((xopen)).apply ((xfoo_path)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("@"))
                        (((unsupported)).apply ((((xopen)).apply ((xbar_path)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("@"))
                        bogusForceDataize.write (((((xself).x_box).xclean)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xfoo_path)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xbar_path)))))
                        xfoo_stat.write ((((xos).xstat)).apply ((xfoo_path)))
                        bogusForceDataize.write ((((xos).xutime)).apply ((xfoo_path)) ((((unsupported)).apply (((((((xtime).xtime)).apply).sub 129600).sub 2)) (((xfoo_stat).xst_mtime)))))
                        bogusForceDataize.write (((((xself).x_box).xclean)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply ((xfoo_path)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xbar_path)))))
                xtest_create_tmp.write
                  [xself xrepetitions]
                    memory > xpid
                    memory > xpattern
                    memory > xtmp_file
                    memory > xprevious_groups
                    memory > xfile_count
                    memory > xgroups
                    memory > xhostname
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        xhostname.write ((((xsocket).xgethostname)).apply)
                        (((unsupported)).apply ("/") ((xhostname))).if
                          xhostname.write ((((xhostname).xreplace)).apply ("/") ("057"))
                        (((unsupported)).apply (":") ((xhostname))).if
                          xhostname.write ((((xhostname).xreplace)).apply (":") ("072"))
                        xpid.write ((((xos).xgetpid)).apply)
                        xpattern.write ((((xre).xcompile)).apply ("(?P<time>d+).M(?P<M>d{1,6})P(?P<P>d+)Q(?P<Q>d+).(?P<host>[^:/]*)"))
                        xprevious_groups.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xx)) ((((xrange)).apply ((xrepetitions)))))
                          seq
                            xtmp_file.write (((((xself).x_box).x_create_tmp)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xhead)) ((xtail)))) ((((((xos).xpath).xsplit)).apply (((xtmp_file).xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhead)) ((((((xos).xpath).xabspath)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("tmp"))))) (("File in wrong location: '%s'".mod (xhead))))
                            xmatch.write ((((xpattern).xmatch)).apply ((xtail)))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xmatch)) (("Invalid file name: '%s'".mod (xtail))))
                            xgroups.write ((((xmatch).xgroups)).apply)
                            (((unsupported)).apply ((xprevious_groups)) ("None: is there a None literal in the EO language?")).if
                              seq
                                bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xint)).apply ((((unsupported)).apply ((xgroups)) (0))))) ((((xint)).apply ((((unsupported)).apply ((xprevious_groups)) (0))))) (("Non-monotonic seconds: '%s' before '%s'".mod (((unsupported)).apply ((((unsupported)).apply ((xprevious_groups)) (0))) ((((unsupported)).apply ((xgroups)) (0)))))))
                                ((((xint)).apply ((((unsupported)).apply ((xgroups)) (0)))).eq (((xint)).apply ((((unsupported)).apply ((xprevious_groups)) (0))))).if
                                  bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xint)).apply ((((unsupported)).apply ((xgroups)) (1))))) ((((xint)).apply ((((unsupported)).apply ((xprevious_groups)) (1))))) (("Non-monotonic milliseconds: '%s' before '%s'".mod (((unsupported)).apply ((((unsupported)).apply ((xprevious_groups)) (1))) ((((unsupported)).apply ((xgroups)) (1)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((unsupported)).apply ((xgroups)) (2))))) ((xpid)) (("Process ID mismatch: '%s' should be '%s'".mod (((unsupported)).apply ((((unsupported)).apply ((xgroups)) (2))) ((xpid))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((unsupported)).apply ((xgroups)) (3))))) (((((xint)).apply ((((unsupported)).apply ((xprevious_groups)) (3)))).add 1)) (("Non-sequential counter: '%s' before '%s'".mod (((unsupported)).apply ((((unsupported)).apply ((xprevious_groups)) (3))) ((((unsupported)).apply ((xgroups)) (3)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xgroups)) (4))) ((xhostname)) (("Host name mismatch: '%s' should be '%s'".mod (((unsupported)).apply ((((unsupported)).apply ((xgroups)) (4))) ((xhostname))))))
                            xprevious_groups.write (xgroups)
                            bogusForceDataize.write ((((xtmp_file).xwrite)).apply ((x_bytes_sample_message)))
                            bogusForceDataize.write ((((xtmp_file).xseek)).apply (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtmp_file).xread)).apply)) ((x_bytes_sample_message)))
                            bogusForceDataize.write ((((xtmp_file).xclose)).apply)
                        xfile_count.write (((xlen)).apply (((((xos).xlistdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("tmp"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfile_count)) ((xrepetitions)) (("Wrong file count: '%s' should be '%s'".mod (((unsupported)).apply ((xfile_count)) ((xrepetitions))))))
                xtest_refresh.write
                  [xself]
                    memory > xkey0
                    memory > xkey2
                    memory > xkey1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply)))
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply ((xkey0)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey0)))) ((xkey1)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey1)))))))
                        xkey2.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply ((xkey0)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey0)))) ((xkey1)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey1)))))))
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply ((xkey0)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey0)))) ((xkey1)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey1)))) ((xkey2)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey2)))))))
                xtest_refresh_after_safety_period.write
                  [xself]
                    memory > xkey0
                    memory > xkey1
                    seq > @
                      seq
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((xself).x_box).x_skewfactor)) ((3.neg)))
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((((xself).x_box).x_toc).xkeys)).apply)))) ((((xsorted)).apply ((((unsupported)).apply ((xkey0)) ((xkey1)))))))
                xtest_lookup.write
                  [xself]
                    memory > xkey0
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((((xself).x_box).x_lookup)).apply ("foo"))))))
                        xkey0.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).x_lookup)).apply ((xkey0)))) ((((((xos).xpath).xjoin)).apply ("new") ((xkey0)))))
                        bogusForceDataize.write ((((xos).xremove)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("new") ((xkey0)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply ((xkey0)) ((((((xos).xpath).xjoin)).apply ("new") ((xkey0)))))))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((unsupported)).apply ((((((xself).x_box).x_lookup)).apply ((xkey0)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).x_box).x_toc)) ((((unsupported)).apply)))
                xtest_lock_unlock.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                xtest_folder.write
                  [xself]
                    memory > xfolder1_alias
                    memory > xfolder
                    memory > xdummy_factory
                    memory > xbox
                    seq > @
                      seq
                        xdummy_factory.write
                          [xs]
                            seq > @
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xbox.write (((unsupported)).apply (((xself).x_factory)) (((xself).x_path)) ((xdummy_factory)))
                        xfolder.write ((((xbox).xadd_folder)).apply ("folder1"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfolder).x_factory)) ((xdummy_factory)))
                        xfolder1_alias.write ((((xbox).xget_folder)).apply ("folder1"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfolder1_alias).x_factory)) ((xdummy_factory)))
                xtest_directory_in_folder.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply (((((xmailbox).xMessage)).apply ((x_sample_message)))))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("cur") ("stray-dir"))))
                        (((unsupported)).apply ((xmsg)) (((xself).x_box)))
                xtest_file_permissions.write
                  [xself]
                    memory > xmode
                    memory > xmsg
                    memory > xpath
                    memory > xorig_umask
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((((xself).x_template).mod 0)))
                        xorig_umask.write ((((xos).xumask)).apply (0))
                        (((unsupported)).apply)
                          xkey.write (((((xself).x_box).xadd)).apply ((xmsg)))
                          bogusForceDataize.write ((((xos).xumask)).apply ((xorig_umask)))
                        xpath.write (((((xos).xpath).xjoin)).apply (((xself).x_path)) ((((((xself).x_box).x_lookup)).apply ((xkey)))))
                        xmode.write (((((xos).xstat)).apply ((xpath))).xst_mode)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmode).and 73)))
                xtest_folder_file_perms.write
                  [xself]
                    memory > xperms
                    memory > xst
                    memory > xpath
                    memory > xsubfolder
                    memory > xorig_umask
                    seq > @
                      (((unsupported)).apply)
                        xorig_umask.write ((((xos).xumask)).apply (0))
                        (((unsupported)).apply)
                          xsubfolder.write (((((xself).x_box).xadd_folder)).apply ("subfolder"))
                          bogusForceDataize.write ((((xos).xumask)).apply ((xorig_umask)))
                        xpath.write (((((xos).xpath).xjoin)).apply (((xsubfolder).x_path)) ("maildirfolder"))
                        xst.write ((((xos).xstat)).apply ((xpath)))
                        xperms.write ((xst).xst_mode)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xperms).and 73)))
                xtest_reread.write
                  [xself]
                    memory > xrefreshed
                    memory > xorig_toc
                    memory > xfilename
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        (((unsupported)).apply ((xsubdir)) ((((unsupported)).apply ("cur") ("new"))))
                          bogusForceDataize.write ((((xos).xutime)).apply ((((((xos).xpath).xjoin)).apply ((((xself).x_box).x_path)) ((xsubdir)))) (((((unsupported)).apply ((((((xtime).xtime)).apply).sub 5))).mul 2)))
                        (((unsupported)).apply ((((xself).x_box).x_skewfactor)) ((3.neg)))
                        xorig_toc.write (((xself).x_box).x_toc)
                        xrefreshed.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((xself).x_box).x_toc)) ((xorig_toc)))))
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xrefreshed)).apply)))
                        xfilename.write (((((xos).xpath).xjoin)).apply (((xself).x_path)) ("cur") ("stray-file"))
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply ((xfilename)))
                        bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
                        bogusForceDataize.write (((((xself).x_box).x_refresh)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xrefreshed)).apply)))
            (((unsupported)).apply ((xTestMailbox)))
              seq
                unsupported
                xtest_add_doesnt_rewrite.write
                  [xself]
                    memory > xinode_before
                    memory > xinode_after
                    seq > @
                      seq
                        xinode_before.write (((((xos).xstat)).apply (((xself).x_path))).xst_ino)
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        xinode_after.write (((((xos).xstat)).apply (((xself).x_path))).xst_ino)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xinode_before)) ((xinode_after)))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (1))
                xtest_permissions_after_flush.write
                  [xself]
                    memory > xi
                    memory > xmode
                    seq > @
                      seq
                        xmode.write ((((((xos).xstat)).apply (((xself).x_path))).xst_mode).or 438)
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).x_path)) ((xmode)))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 0)))
                        xi.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xi)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xstat)).apply (((xself).x_path))).xst_mode)) ((xmode)))
            (((unsupported)).apply ((x_TestSingleFile)))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                        (((unsupported)).apply ((xlock_remnant)) (((((xglob).xglob)).apply ((((((xglob).xescape)).apply (((xself).x_path))).add ".*")))))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xlock_remnant)))
                xassertMailboxEmpty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply (((xself).x_path)))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadlines)).apply)) ((((unsupported)).apply)))
                xtest_get_bytes_from.write
                  [xself]
                    memory > xkey0
                    memory > xunixfrom
                    memory > xkey1
                    seq > @
                      seq
                        xunixfrom.write "From foo@bar blahn"
                        xkey0.write (((((xself).x_box).xadd)).apply (((xunixfrom).add (((xself).x_template).mod 0))))
                        xkey1.write (((((xself).x_box).xadd)).apply (((xunixfrom).add (x_sample_message))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_bytes)) ((xkey0)) (FALSE))) (((((((xself).x_template).mod 0).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_bytes)) ((xkey1)) (FALSE))) ((x_bytes_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_bytes)) ((xkey0)) (TRUE))) ((((((xunixfrom).add (((xself).x_template).mod 0)).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_bytes)) ((xkey1)) (TRUE))) ((((((xunixfrom).xencode)).apply ("ascii")).add (x_bytes_sample_message))))
                xtest_get_string_from.write
                  [xself]
                    memory > xkey0
                    memory > xunixfrom
                    memory > xkey1
                    seq > @
                      seq
                        xunixfrom.write "From foo@bar blahn"
                        xkey0.write (((((xself).x_box).xadd)).apply (((xunixfrom).add (((xself).x_template).mod 0))))
                        xkey1.write (((((xself).x_box).xadd)).apply (((xunixfrom).add (x_sample_message))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_string)) ((xkey0)) (FALSE))) ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xself).x_box).xget_string)) ((xkey1)) (FALSE)).xsplit)).apply ("n"))) (((((x_sample_message).xsplit)).apply ("n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).x_box).xget_string)) ((xkey0)) (TRUE))) (((xunixfrom).add (((xself).x_template).mod 0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xself).x_box).xget_string)) ((xkey1)) (TRUE)).xsplit)).apply ("n"))) ((((((xunixfrom).add (x_sample_message)).xsplit)).apply ("n"))))
                xtest_add_from_string.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        xkey.write (((((xself).x_box).xadd)).apply ("From foo@bar blahnFrom: foonn0n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xself).x_box)) ((xkey))).xget_from)).apply)) ("foo@bar blah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xself).x_box)) ((xkey))).xget_payload)).apply)) ("0n"))
                xtest_add_from_bytes.write
                  [xself]
                    memory > xkey
                    seq > @
                      seq
                        xkey.write (((((xself).x_box).xadd)).apply ("From foo@bar blahnFrom: foonn0n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xself).x_box)) ((xkey))).xget_from)).apply)) ("foo@bar blah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xself).x_box)) ((xkey))).xget_payload)).apply)) ("0n"))
                xtest_add_mbox_or_mmdf_message.write
                  [xself]
                    memory > xmsg
                    memory > xkey
                    seq > @
                      (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                        seq
                          xmsg.write (((xclass_)).apply ("From foo@bar blahnFrom: foonn0n"))
                          xkey.write (((((xself).x_box).xadd)).apply ((xmsg)))
                xtest_open_close_open.write
                  [xself]
                    memory > xvalues
                    memory > xmtime
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xself).x_template).mod (xi))) ((xi)) ((((xrange)).apply (3))))
                        (((unsupported)).apply ((xvalue)) ((xvalues)))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply ((xvalue)))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        xmtime.write (((((xos).xpath).xgetmtime)).apply (((xself).x_path)))
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).x_box)))) (3))
                        (((unsupported)).apply ((xkey)) ((((((xself).x_box).xiterkeys)).apply)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xself).x_box).xget_string)).apply ((xkey)))) ((xvalues)))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmtime)) ((((((xos).xpath).xgetmtime)).apply (((xself).x_path)))))
                xtest_add_and_close.write
                  [xself]
                    memory > xcontents
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                          bogusForceDataize.write (((((xself).x_box).xadd)).apply ((((xself).x_template).mod (xi))))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((((xself).x_box).x_file).xflush)).apply)
                        bogusForceDataize.write ((((((xself).x_box).x_file).xseek)).apply (0))
                        xcontents.write ((((((xself).x_box).x_file).xread)).apply)
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xself).x_path)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontents)) (((((xf).xread)).apply)))
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                xtest_lock_conflict.write
                  [xself]
                    memory > xpid
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xp)))) (((((xsocket).xsocketpair)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xc).xclose)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xp).xclose)))
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          (((unsupported)).apply)
                            seq
                              bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                              bogusForceDataize.write ((((xc).xsend)).apply ("c"))
                              bogusForceDataize.write ((((xc).xrecv)).apply (1))
                              bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                        bogusForceDataize.write ((((xp).xrecv)).apply (1))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xmailbox).xExternalClashError)) ((((xself).x_box).xlock)))
                          seq
                            bogusForceDataize.write ((((xp).xsend)).apply ("p"))
                            (((unsupported)).apply ((((unsupported)).apply ((xexited_pid)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                xtest_relock.write
                  [xself]
                    memory > xkey2
                    memory > xkey1
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Subject: subnnbodyn"
                        xkey1.write (((((xself).x_box).xadd)).apply ((xmsg)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)))))
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        xkey2.write (((((xself).x_box).xadd)).apply ((xmsg)))
                        bogusForceDataize.write (((((xself).x_box).xflush)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).x_box).x_locked)))
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
            (((unsupported)).apply ((x_TestMboxMMDF)) (((xunittest).xTestCase)))
              seq
                x_factory.write (((unsupported)).apply (((((xmailbox).xmbox)).apply ((xpath)) ((xfactory)))))
                xtest_file_perms.write
                  [xself]
                    memory > xst
                    memory > xold_umask
                    memory > xperms
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            xold_umask.write ((((xos).xumask)).apply (63))
                            bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                            bogusForceDataize.write ((((xos).xunlink)).apply (((xself).x_path)))
                            (((unsupported)).apply (((xself).x_box)) ((((unsupported)).apply (((xmailbox).xmbox)) (((xself).x_path)) (TRUE))))
                            bogusForceDataize.write (((((xself).x_box).xadd)).apply (""))
                            bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                          bogusForceDataize.write ((((xos).xumask)).apply ((xold_umask)))
                        xst.write ((((xos).xstat)).apply (((xself).x_path)))
                        xperms.write ((xst).xst_mode)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xperms).and 73)))
                xtest_terminating_newline.write
                  [xself]
                    memory > xmessage
                    memory > xi
                    seq > @
                      seq
                        xmessage.write (((((xemail).xmessage).xMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ("From"))) ("john@example.com"))
                        bogusForceDataize.write ((((xmessage).xset_payload)).apply ("No newline at the end"))
                        xi.write (((((xself).x_box).xadd)).apply ((xmessage)))
                        xmessage.write (((((xself).x_box).xget)).apply ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmessage).xget_payload)).apply)) ("No newline at the endn"))
                xtest_message_separator.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ("From: foonn0"))
                        (((unsupported)).apply ((((xopen)).apply (((xself).x_path)))) ((xf)))
                          seq
                            xdata.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((3.neg)))))) ("0nn"))
                        bogusForceDataize.write (((((xself).x_box).xadd)).apply ("From: foonn0n"))
                        (((unsupported)).apply ((((xopen)).apply (((xself).x_path)))) ((xf)))
                          seq
                            xdata.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((3.neg)))))) ("0nn"))
            (((unsupported)).apply ((x_TestMboxMMDF)) (((xunittest).xTestCase)))
              x_factory.write (((unsupported)).apply (((((xmailbox).xMMDF)).apply ((xpath)) ((xfactory)))))
            (((unsupported)).apply ((xTestMailbox)) (((xunittest).xTestCase)))
              seq
                x_factory.write (((unsupported)).apply (((((xmailbox).xMH)).apply ((xpath)) ((xfactory)))))
                xassertMailboxEmpty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xos).xlistdir)).apply (((xself).x_path)))) ((((unsupported)).apply (".mh_sequences"))))
                xtest_list_folders.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("one"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("two"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("one") ("two") ("three"))))))
                xtest_get_folder.write
                  [xself]
                    memory > xfolder1
                    memory > xnew_folder
                    memory > xfolder0
                    memory > xdummy_factory
                    seq > @
                      seq
                        xdummy_factory.write
                          [xs]
                            seq > @
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).x_box)) (((((xself).x_factory)).apply (((xself).x_path)) ((xdummy_factory)))))
                        xnew_folder.write (((((xself).x_box).xadd_folder)).apply ("foo.bar"))
                        xfolder0.write (((((xself).x_box).xget_folder)).apply ("foo.bar"))
                        bogusForceDataize.write ((((xfolder0).xadd)).apply ((((xself).x_template).mod "bar")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) ("foo.bar"))))))
                        xfolder1.write (((((xself).x_box).xget_folder)).apply ("foo.bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfolder1).xget_string)).apply ((((unsupported)).apply (((((xfolder1).xkeys)).apply)) (0))))) ((((xself).x_template).mod "bar")))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xnew_folder).x_factory)) ((((xself).x_box).x_factory)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfolder0).x_factory)) ((((xself).x_box).x_factory)))
                xtest_add_and_remove_folders.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("one"))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("two"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("one") ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("one"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xadd_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two") ("three"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("three"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xlist_folders)).apply)))) ((((xset)).apply ((((unsupported)).apply ("two"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove_folder)).apply ("two"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).x_box).xlist_folders)).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xlist_folders)).apply)) ((((unsupported)).apply)))
                xtest_sequences.write
                  [xself]
                    memory > xkey0
                    memory > xmsg1
                    memory > xmsg0
                    memory > xkey1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply)))
                        xmsg0.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg0).xadd_sequence)).apply ("foo"))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xkey0)))))))
                        xmsg1.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xmsg1).xset_sequences)).apply ((((unsupported)).apply ("bar") ("replied") ("foo"))))
                        xkey1.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xkey0)) ((xkey1)))) ("bar") ((((unsupported)).apply ((xkey1)))) ("replied") ((((unsupported)).apply ((xkey1)))))))
                        bogusForceDataize.write ((((xmsg0).xset_sequences)).apply ((((unsupported)).apply ("flagged"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))) ((xmsg0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xkey1)))) ("bar") ((((unsupported)).apply ((xkey1)))) ("replied") ((((unsupported)).apply ((xkey1)))) ("flagged") ((((unsupported)).apply ((xkey0)))))))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("flagged") ((((unsupported)).apply ((xkey0)))))))
                xtest_issue2625.write
                  [xself]
                    memory > xkey0
                    memory > xmsg0
                    memory > xrefmsg0
                    seq > @
                      seq
                        xmsg0.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg0).xadd_sequence)).apply ("foo"))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        xrefmsg0.write (((((xself).x_box).xget_message)).apply ((xkey0)))
                xtest_issue7627.write
                  [xself]
                    memory > xkey0
                    memory > xmsg0
                    seq > @
                      seq
                        xmsg0.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 0)))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey0)))
                        bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                xtest_pack.write
                  [xself]
                    memory > xkey2
                    memory > xmsg0
                    memory > xmsg3
                    memory > xmsg2
                    memory > xkey0
                    memory > xkey1
                    memory > xmsg1
                    memory > xkey3
                    seq > @
                      seq
                        xmsg0.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 0)))
                        xmsg1.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 1)))
                        xmsg2.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 2)))
                        xmsg3.write ((((xmailbox).xMHMessage)).apply ((((xself).x_template).mod 3)))
                        bogusForceDataize.write ((((xmsg0).xset_sequences)).apply ((((unsupported)).apply ("foo") ("unseen"))))
                        bogusForceDataize.write ((((xmsg1).xset_sequences)).apply ((((unsupported)).apply ("foo"))))
                        bogusForceDataize.write ((((xmsg2).xset_sequences)).apply ((((unsupported)).apply ("foo") ("flagged"))))
                        bogusForceDataize.write ((((xmsg3).xset_sequences)).apply ((((unsupported)).apply ("foo") ("bar") ("replied"))))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        xkey2.write (((((xself).x_box).xadd)).apply ((xmsg2)))
                        xkey3.write (((((xself).x_box).xadd)).apply ((xmsg3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xkey0)) ((xkey1)) ((xkey2)) ((xkey3)))) ("unseen") ((((unsupported)).apply ((xkey0)))) ("flagged") ((((unsupported)).apply ((xkey2)))) ("bar") ((((unsupported)).apply ((xkey3)))) ("replied") ((((unsupported)).apply ((xkey3)))))))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xkey0)) ((xkey1)) ((xkey3)))) ("unseen") ((((unsupported)).apply ((xkey0)))) ("bar") ((((unsupported)).apply ((xkey3)))) ("replied") ((((unsupported)).apply ((xkey3)))))))
                        bogusForceDataize.write (((((xself).x_box).xpack)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xkeys)).apply)) ((((unsupported)).apply (1) (2) (3))))
                        xkey0.write (xkey0)
                        xkey1.write ((xkey0).add 1)
                        xkey2.write ((xkey1).add 1)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply (1) (2) (3))) ("unseen") ((((unsupported)).apply (1))) ("bar") ((((unsupported)).apply (3))) ("replied") ((((unsupported)).apply (3))))))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        xkey1.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        xkey2.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        xkey3.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey0)))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey2)))
                        bogusForceDataize.write (((((xself).x_box).xlock)).apply)
                        bogusForceDataize.write (((((xself).x_box).xpack)).apply)
                        bogusForceDataize.write (((((xself).x_box).xunlock)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_sequences)).apply)) ((((unsupported)).apply ("foo") ((((unsupported)).apply (1) (2) (3) (4) (5))) ("unseen") ((((unsupported)).apply (1))) ("bar") ((((unsupported)).apply (3))) ("replied") ((((unsupported)).apply (3))))))
                x_get_lock_path.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_path)) (".mh_sequences.lock"))))
            (((unsupported)).apply ((x_TestSingleFile)) (((xunittest).xTestCase)))
              seq
                x_factory.write (((unsupported)).apply (((((xmailbox).xBabyl)).apply ((xpath)) ((xfactory)))))
                xassertMailboxEmpty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply (((xself).x_path)))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadlines)).apply)) ((((unsupported)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                        bogusForceDataize.write (((((xself).x_box).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                        (((unsupported)).apply ((xlock_remnant)) (((((xglob).xglob)).apply ((((((xglob).xescape)).apply (((xself).x_path))).add ".*")))))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xlock_remnant)))
                xtest_labels.write
                  [xself]
                    memory > xkey0
                    memory > xmsg1
                    memory > xmsg0
                    memory > xkey1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_labels)).apply)) ((((unsupported)).apply)))
                        xmsg0.write ((((xmailbox).xBabylMessage)).apply ((((xself).x_template).mod 0)))
                        bogusForceDataize.write ((((xmsg0).xadd_label)).apply ("foo"))
                        xkey0.write (((((xself).x_box).xadd)).apply ((xmsg0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_box).xget_labels)).apply)) ((((unsupported)).apply ("foo"))))
                        xmsg1.write ((((xmailbox).xBabylMessage)).apply ((((xself).x_template).mod 1)))
                        bogusForceDataize.write ((((xmsg1).xset_labels)).apply ((((unsupported)).apply ("bar") ("answered") ("foo"))))
                        xkey1.write (((((xself).x_box).xadd)).apply ((xmsg1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xget_labels)).apply)))) ((((xset)).apply ((((unsupported)).apply ("foo") ("bar"))))))
                        bogusForceDataize.write ((((xmsg0).xset_labels)).apply ((((unsupported)).apply ("blah") ("filed"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_box)) ((xkey0)))) ((xmsg0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xget_labels)).apply)))) ((((xset)).apply ((((unsupported)).apply ("foo") ("bar") ("blah"))))))
                        bogusForceDataize.write (((((xself).x_box).xremove)).apply ((xkey1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((((xself).x_box).xget_labels)).apply)))) ((((xset)).apply ((((unsupported)).apply ("blah"))))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xclosed)) (FALSE))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xclosed)) (TRUE))
            (((unsupported)).apply (((xmailbox).xMailbox)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xmailbox).xMailbox).x__init__)).apply ((xself)) ("") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((xself).xfiles)) ((((unsupported)).apply ((((xFakeFileLikeObject)).apply)) ((xi)) ((((xrange)).apply (10))))))
                xget_file.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xfiles)) ((xkey)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_closing_fd.write
                [xself]
                  memory > xbox
                  seq > @
                    seq
                      xbox.write (((xFakeMailBox)).apply)
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply (((xbox).xfiles)) ((xi))).xclosed)))
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xbox)) ((xi)))
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply (((xbox).xfiles)) ((xi))).xclosed)))
            (((unsupported)).apply ((xTestBase)) (((xunittest).xTestCase)))
              seq
                x_factory.write ((xmailbox).xMessage)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_path)) (((xsupport).xTESTFN)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                xtest_initialize_with_eMM.write
                  [xself]
                    memory > xeMM
                    memory > xmsg
                    seq > @
                      seq
                        xeMM.write ((((xemail).xmessage_from_string)).apply ((x_sample_message)))
                        xmsg.write ((((xself).x_factory)).apply ((xeMM)))
                        bogusForceDataize.write ((((xself).x_post_initialize_hook)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_initialize_with_string.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xself).x_factory)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).x_post_initialize_hook)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_initialize_with_file.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply (((xself).x_path)) ("w+"))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xf).xwrite)).apply ((x_sample_message)))
                          bogusForceDataize.write ((((xf).xseek)).apply (0))
                          xmsg.write ((((xself).x_factory)).apply ((xf)))
                          bogusForceDataize.write ((((xself).x_post_initialize_hook)).apply ((xmsg)))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_initialize_with_binary_file.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply (((xself).x_path)) ("wb+"))) ((xf)))
                        seq
                          bogusForceDataize.write ((((xf).xwrite)).apply ((x_bytes_sample_message)))
                          bogusForceDataize.write ((((xf).xseek)).apply (0))
                          xmsg.write ((((xself).x_factory)).apply ((xf)))
                          bogusForceDataize.write ((((xself).x_post_initialize_hook)).apply ((xmsg)))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_initialize_with_nothing.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xself).x_factory)).apply)
                        bogusForceDataize.write ((((xself).x_post_initialize_hook)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg)) ((((xemail).xmessage).xMessage)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg)) (((xmailbox).xMessage)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmsg)) (((xself).x_factory)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xkeys)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmsg).xis_multipart)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmsg).xget_payload)).apply)))
                xtest_initialize_incorrectly.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xself).x_factory)).apply ((((xobject)).apply)))))))
                xtest_all_eMM_attribues_exist.write
                  [xself]
                    memory > xeMM
                    memory > xmsg
                    seq > @
                      seq
                        xeMM.write ((((xemail).xmessage_from_string)).apply ((x_sample_message)))
                        xmsg.write ((((xself).x_factory)).apply ((x_sample_message)))
                        (((unsupported)).apply ((xattr)) (((xeMM).x__dict__)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xattr)) (((xmsg).x__dict__)) (((("{} attribute does not exist".xformat)).apply ((xattr)))))
                xtest_become_message.write
                  [xself]
                    memory > xeMM
                    memory > xmsg
                    seq > @
                      seq
                        xeMM.write ((((xemail).xmessage_from_string)).apply ((x_sample_message)))
                        xmsg.write ((((xself).x_factory)).apply)
                        bogusForceDataize.write ((((xmsg).x_become_message)).apply ((xeMM)))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_explain_to.write
                  [xself]
                    memory > xmsg
                    memory > xother_msg
                    seq > @
                      seq
                        xmsg.write ((((xself).x_factory)).apply)
                        (((unsupported)).apply ((xclass_)) (((xself).xall_mailbox_types)))
                          seq
                            xother_msg.write (((xclass_)).apply)
                            bogusForceDataize.write ((((xmsg).x_explain_to)).apply ((xother_msg)))
                        xother_msg.write (((((xemail).xmessage).xMessage)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xmsg).x_explain_to)).apply ((xother_msg)))))))
                x_post_initialize_hook.write
                  [xself xmsg]
                    seq > @
            (((unsupported)).apply ((xTestMessage)) (((xunittest).xTestCase)))
              seq
                x_factory.write ((xmailbox).xMaildirMessage)
                x_post_initialize_hook.write
                  [xself xmsg]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmsg).x_subdir)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmsg).x_info)) (""))
                xtest_subdir.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("cur"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("cur"))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply (((((xmsg).xset_subdir)).apply ("tmp"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xmsg).xset_subdir)).apply ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_flags.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("F"))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("SDTP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("DPST"))
                        bogusForceDataize.write ((((xmsg).xadd_flag)).apply ("FT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("DFPST"))
                        bogusForceDataize.write ((((xmsg).xremove_flag)).apply ("TDRP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("FS"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("new"))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_date.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xabs)).apply ((((((xmsg).xget_date)).apply).sub ((((xtime).xtime)).apply))))) (60))
                        bogusForceDataize.write ((((xmsg).xset_date)).apply (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_date)).apply)) (0.0))
                xtest_info.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) (""))
                        bogusForceDataize.write ((((xmsg).xset_info)).apply ("1,foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) ("1,foo=bar"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xmsg).xset_info)).apply ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_info_and_flags.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) (""))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("SF"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("FS"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) ("2,FS"))
                        bogusForceDataize.write ((((xmsg).xset_info)).apply ("1,"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) ("1,"))
                        bogusForceDataize.write ((((xmsg).xremove_flag)).apply ("RPT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) ("1,"))
                        bogusForceDataize.write ((((xmsg).xadd_flag)).apply ("D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_info)).apply)) ("2,D"))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
            (((unsupported)).apply)
              seq
                x_factory.write ((xmailbox).x_mboxMMDFMessage)
                x_post_initialize_hook.write
                  [xself xmsg]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_from)).apply ((xmsg)))
                xtest_initialize_with_unixfrom.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xset_unixfrom)).apply ("From foo@bar blah"))
                        xmsg.write ((((xmailbox).xmboxMessage)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_from)).apply)) ("foo@bar blah") (((((xmsg).xget_from)).apply)))
                xtest_from.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xmboxMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).x_check_from)).apply ((xmsg)))
                        bogusForceDataize.write ((((xmsg).xset_from)).apply ("foo bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_from)).apply)) ("foo bar"))
                        bogusForceDataize.write ((((xmsg).xset_from)).apply ("foo@bar") (TRUE))
                        bogusForceDataize.write ((((xself).x_check_from)).apply ((xmsg)) ("foo@bar"))
                        bogusForceDataize.write ((((xmsg).xset_from)).apply ("blah@temp") (((((xtime).xlocaltime)).apply)))
                        bogusForceDataize.write ((((xself).x_check_from)).apply ((xmsg)) ("blah@temp"))
                xtest_flags.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xmboxMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) (""))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("F"))
                        bogusForceDataize.write ((((xmsg).xset_flags)).apply ("XODR"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("RODX"))
                        bogusForceDataize.write ((((xmsg).xadd_flag)).apply ("FA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("RODFAX"))
                        bogusForceDataize.write ((((xmsg).xremove_flag)).apply ("FDXA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("RO"))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                x_check_from.write
                  [xself xmsg xsender]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xsender)) ("None: is there a None literal in the EO language?")).if
                          xsender.write "MAILER-DAEMON"
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xre).xmatch)).apply (((xsender).add " w{3} w{3} [d ]d [d ]d:d{2}:d{2} d{4}")) (((((xmsg).xget_from)).apply)))))
            (((unsupported)).apply ((x_TestMboxMMDFMessage)) ((xTestMessage)))
              x_factory.write ((xmailbox).xmboxMessage)
            (((unsupported)).apply ((xTestMessage)) (((xunittest).xTestCase)))
              seq
                x_factory.write ((xmailbox).xMHMessage)
                x_post_initialize_hook.write
                  [xself xmsg]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmsg).x_sequences)) ((((unsupported)).apply)))
                xtest_sequences.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xmsg).xset_sequences)).apply ((((unsupported)).apply ("foobar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xset_sequences)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("unseen"))))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("unseen") ("flagged"))))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("unseen") ("flagged"))))
                        bogusForceDataize.write ((((xmsg).xremove_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("flagged"))))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("flagged") ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xremove_sequence)).apply ("replied"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("flagged") ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xset_sequences)).apply ((((unsupported)).apply ("foobar") ("replied"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_sequences)).apply)) ((((unsupported)).apply ("foobar") ("replied"))))
            (((unsupported)).apply ((xTestMessage)) (((xunittest).xTestCase)))
              seq
                x_factory.write ((xmailbox).xBabylMessage)
                x_post_initialize_hook.write
                  [xself xmsg]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmsg).x_labels)) ((((unsupported)).apply)))
                xtest_labels.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xmsg).xset_labels)).apply ((((unsupported)).apply ("foobar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xset_labels)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xmsg).xadd_label)).apply ("filed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("filed"))))
                        bogusForceDataize.write ((((xmsg).xadd_label)).apply ("resent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("filed") ("resent"))))
                        bogusForceDataize.write ((((xmsg).xadd_label)).apply ("resent"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("filed") ("resent"))))
                        bogusForceDataize.write ((((xmsg).xremove_label)).apply ("filed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("resent"))))
                        bogusForceDataize.write ((((xmsg).xadd_label)).apply ("foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("resent") ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xremove_label)).apply ("unseen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("resent") ("foobar"))))
                        bogusForceDataize.write ((((xmsg).xset_labels)).apply ((((unsupported)).apply ("foobar") ("answered"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_labels)).apply)) ((((unsupported)).apply ("foobar") ("answered"))))
                xtest_visible.write
                  [xself]
                    memory > xvisible
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        xvisible.write ((((xmsg).xget_visible)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvisible).xkeys)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvisible).xget_payload)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xvisible)) ("User-Agent"))) ("FooBar 1.0"))
                        (((unsupported)).apply ((((unsupported)).apply ((xvisible)) ("X-Whatever"))) ("Blah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmsg).xget_visible)).apply).xkeys)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xmsg).xset_visible)).apply ((xvisible)))
                        xvisible.write ((((xmsg).xget_visible)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvisible).xkeys)).apply)) ((((unsupported)).apply ("User-Agent") ("X-Whatever"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvisible)) ("User-Agent"))) ("FooBar 1.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvisible)) ("X-Whatever"))) ("Blah"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvisible).xget_payload)).apply)))
                        bogusForceDataize.write ((((xmsg).xupdate_visible)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvisible).xkeys)).apply)) ((((unsupported)).apply ("User-Agent") ("X-Whatever"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xvisible).xget_payload)).apply)))
                        xvisible.write ((((xmsg).xget_visible)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvisible).xkeys)).apply)) ((((unsupported)).apply ("User-Agent") ("Date") ("From") ("To") ("Subject"))))
                        (((unsupported)).apply ((xheader)) ((((unsupported)).apply ("User-Agent") ("Date") ("From") ("To") ("Subject"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvisible)) ((xheader)))) ((((unsupported)).apply ((xmsg)) ((xheader)))))
            (((unsupported)).apply ((x_TestMboxMMDFMessage)) ((xTestMessage)))
              x_factory.write ((xmailbox).xMMDFMessage)
            (((unsupported)).apply ((xTestBase)) (((xunittest).xTestCase)))
              seq
                xtest_plain_to_x.write
                  [xself]
                    memory > xmsg
                    memory > xmsg_plain
                    seq > @
                      (((unsupported)).apply ((xclass_)) (((xself).xall_mailbox_types)))
                        seq
                          xmsg_plain.write ((((xmailbox).xMessage)).apply ((x_sample_message)))
                          xmsg.write (((xclass_)).apply ((xmsg_plain)))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_x_to_plain.write
                  [xself]
                    memory > xmsg
                    memory > xmsg_plain
                    seq > @
                      (((unsupported)).apply ((xclass_)) (((xself).xall_mailbox_types)))
                        seq
                          xmsg.write (((xclass_)).apply ((x_sample_message)))
                          xmsg_plain.write ((((xmailbox).xMessage)).apply ((xmsg)))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg_plain)))
                xtest_x_from_bytes.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((xclass_)) (((xself).xall_mailbox_types)))
                        seq
                          xmsg.write (((xclass_)).apply ((x_bytes_sample_message)))
                          bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                xtest_x_to_invalid.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xclass_)) (((xself).xall_mailbox_types)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((xclass_)).apply (FALSE))))))
                xtest_type_specific_attributes_removed_on_conversion.write
                  [xself]
                    memory > xtarget
                    memory > xtype_specific
                    memory > xreference
                    memory > xsource
                    seq > @
                      seq
                        xreference.write (((unsupported)).apply ((xclass_)) (((((xclass_)).apply ((x_sample_message))).x__dict__)) ((xclass_)) (((xself).xall_mailbox_types)))
                        (((unsupported)).apply ((xclass1)) (((xself).xall_mailbox_types)))
                          (((unsupported)).apply ((xclass2)) (((xself).xall_mailbox_types)))
                            seq
                              (((unsupported)).apply ((xclass1)) ((xclass2))).if
                                (((unsupported)).apply)
                              xsource.write (((xclass1)).apply ((x_sample_message)))
                              xtarget.write (((xclass2)).apply ((xsource)))
                              xtype_specific.write (((unsupported)).apply ((xa)) ((xa)) ((((unsupported)).apply ((xreference)) ((xclass1)))) ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((xreference)) ((xclass2)))))))
                              (((unsupported)).apply ((xattr)) ((xtype_specific)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xattr)) (((xtarget).x__dict__)) (((("while converting {} to {}".xformat)).apply ((xclass1)) ((xclass2)))))
                xtest_maildir_to_maildir.write
                  [xself]
                    memory > xmsg_maildir
                    memory > xdate
                    memory > xmsg
                    seq > @
                      seq
                        xmsg_maildir.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg_maildir).xset_flags)).apply ("DFPRST"))
                        bogusForceDataize.write ((((xmsg_maildir).xset_subdir)).apply ("cur"))
                        xdate.write ((((xmsg_maildir).xget_date)).apply)
                        xmsg.write ((((xmailbox).xMaildirMessage)).apply ((xmsg_maildir)))
                        bogusForceDataize.write ((((xself).x_check_sample)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ("DFPRST"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_subdir)).apply)) ("cur"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_date)).apply)) ((xdate)))
                xtest_maildir_to_mboxmmdf.write
                  [xself]
                    memory > xpairs
                    memory > xmsg_maildir
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("D") (""))) ((((unsupported)).apply ("F") ("F"))) ((((unsupported)).apply ("P") (""))) ((((unsupported)).apply ("R") ("A"))) ((((unsupported)).apply ("S") ("R"))) ((((unsupported)).apply ("T") ("D"))) ((((unsupported)).apply ("DFPRST") ("RDFA"))))
                        (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                          seq
                            xmsg_maildir.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg_maildir).xset_date)).apply (0.0))
                            (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                              seq
                                bogusForceDataize.write ((((xmsg_maildir).xset_flags)).apply ((xsetting)))
                                xmsg.write (((xclass_)).apply ((xmsg_maildir)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ((xresult)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_from)).apply)) (("MAILER-DAEMON %s".mod ((((xtime).xasctime)).apply (((((xtime).xgmtime)).apply (0.0)))))))
                            bogusForceDataize.write ((((xmsg_maildir).xset_subdir)).apply ("cur"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xclass_)).apply ((xmsg_maildir))).xget_flags)).apply)) ("RODFA"))
                xtest_maildir_to_mh.write
                  [xself]
                    memory > xpairs
                    memory > xmsg_maildir
                    seq > @
                      seq
                        xmsg_maildir.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("D") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("F") ((((unsupported)).apply ("unseen") ("flagged"))))) ((((unsupported)).apply ("P") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("R") ((((unsupported)).apply ("unseen") ("replied"))))) ((((unsupported)).apply ("S") ((((unsupported)).apply)))) ((((unsupported)).apply ("T") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("DFPRST") ((((unsupported)).apply ("replied") ("flagged"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            bogusForceDataize.write ((((xmsg_maildir).xset_flags)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMHMessage)).apply ((xmsg_maildir))).xget_sequences)).apply)) ((xresult)))
                xtest_maildir_to_babyl.write
                  [xself]
                    memory > xpairs
                    memory > xmsg_maildir
                    seq > @
                      seq
                        xmsg_maildir.write ((((xmailbox).xMaildirMessage)).apply ((x_sample_message)))
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("D") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("F") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("P") ((((unsupported)).apply ("unseen") ("forwarded"))))) ((((unsupported)).apply ("R") ((((unsupported)).apply ("unseen") ("answered"))))) ((((unsupported)).apply ("S") ((((unsupported)).apply)))) ((((unsupported)).apply ("T") ((((unsupported)).apply ("unseen") ("deleted"))))) ((((unsupported)).apply ("DFPRST") ((((unsupported)).apply ("deleted") ("answered") ("forwarded"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            bogusForceDataize.write ((((xmsg_maildir).xset_flags)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xBabylMessage)).apply ((xmsg_maildir))).xget_labels)).apply)) ((xresult)))
                xtest_mboxmmdf_to_maildir.write
                  [xself]
                    memory > xmsg
                    memory > xpairs
                    memory > xmsg_mboxMMDF
                    seq > @
                      (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                        seq
                          xmsg_mboxMMDF.write (((xclass_)).apply ((x_sample_message)))
                          bogusForceDataize.write ((((xmsg_mboxMMDF).xset_from)).apply ("foo@bar") (((((xtime).xgmtime)).apply (0.0))))
                          xpairs.write (((unsupported)).apply ((((unsupported)).apply ("R") ("S"))) ((((unsupported)).apply ("O") (""))) ((((unsupported)).apply ("D") ("T"))) ((((unsupported)).apply ("F") ("F"))) ((((unsupported)).apply ("A") ("R"))) ((((unsupported)).apply ("RODFA") ("FRST"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                            seq
                              bogusForceDataize.write ((((xmsg_mboxMMDF).xset_flags)).apply ((xsetting)))
                              xmsg.write ((((xmailbox).xMaildirMessage)).apply ((xmsg_mboxMMDF)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_flags)).apply)) ((xresult)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget_date)).apply)) (0.0))
                          bogusForceDataize.write ((((xmsg_mboxMMDF).xset_flags)).apply ("O"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg_mboxMMDF))).xget_subdir)).apply)) ("cur"))
                xtest_mboxmmdf_to_mboxmmdf.write
                  [xself]
                    memory > xmsg_mboxMMDF
                    memory > xmsg2
                    seq > @
                      (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                        seq
                          xmsg_mboxMMDF.write (((xclass_)).apply ((x_sample_message)))
                          bogusForceDataize.write ((((xmsg_mboxMMDF).xset_flags)).apply ("RODFA"))
                          bogusForceDataize.write ((((xmsg_mboxMMDF).xset_from)).apply ("foo@bar"))
                          (((unsupported)).apply ((xclass2_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                            seq
                              xmsg2.write (((xclass2_)).apply ((xmsg_mboxMMDF)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg2).xget_flags)).apply)) ("RODFA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg2).xget_from)).apply)) ("foo@bar"))
                xtest_mboxmmdf_to_mh.write
                  [xself]
                    memory > xpairs
                    memory > xmsg_mboxMMDF
                    seq > @
                      (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                        seq
                          xmsg_mboxMMDF.write (((xclass_)).apply ((x_sample_message)))
                          xpairs.write (((unsupported)).apply ((((unsupported)).apply ("R") ((((unsupported)).apply)))) ((((unsupported)).apply ("O") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("D") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("F") ((((unsupported)).apply ("unseen") ("flagged"))))) ((((unsupported)).apply ("A") ((((unsupported)).apply ("unseen") ("replied"))))) ((((unsupported)).apply ("RODFA") ((((unsupported)).apply ("replied") ("flagged"))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                            seq
                              bogusForceDataize.write ((((xmsg_mboxMMDF).xset_flags)).apply ((xsetting)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMHMessage)).apply ((xmsg_mboxMMDF))).xget_sequences)).apply)) ((xresult)))
                xtest_mboxmmdf_to_babyl.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                        seq
                          xmsg.write (((xclass_)).apply ((x_sample_message)))
                          xpairs.write (((unsupported)).apply ((((unsupported)).apply ("R") ((((unsupported)).apply)))) ((((unsupported)).apply ("O") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("D") ((((unsupported)).apply ("unseen") ("deleted"))))) ((((unsupported)).apply ("F") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("A") ((((unsupported)).apply ("unseen") ("answered"))))) ((((unsupported)).apply ("RODFA") ((((unsupported)).apply ("deleted") ("answered"))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                            seq
                              bogusForceDataize.write ((((xmsg).xset_flags)).apply ((xsetting)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xBabylMessage)).apply ((xmsg))).xget_labels)).apply)) ((xresult)))
                xtest_mh_to_maildir.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") (""))) ((((unsupported)).apply ("replied") ("RS"))) ((((unsupported)).apply ("flagged") ("FS"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_flags)).apply)) ((xresult)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_subdir)).apply)) ("cur"))
                        xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("replied"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_flags)).apply)) ("FR"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_subdir)).apply)) ("cur"))
                xtest_mh_to_mboxmmdf.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") ("O"))) ((((unsupported)).apply ("replied") ("ROA"))) ((((unsupported)).apply ("flagged") ("ROF"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ((xsetting)))
                            (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xclass_)).apply ((xmsg))).xget_flags)).apply)) ((xresult)))
                        xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("replied"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xclass_)).apply ((xmsg))).xget_flags)).apply)) ("OFA"))
                xtest_mh_to_mh.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("replied"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMHMessage)).apply ((xmsg))).xget_sequences)).apply)) ((((unsupported)).apply ("unseen") ("replied") ("flagged"))))
                xtest_mh_to_babyl.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("replied") ((((unsupported)).apply ("answered"))))) ((((unsupported)).apply ("flagged") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xBabylMessage)).apply ((xmsg))).xget_labels)).apply)) ((xresult)))
                        xmsg.write ((((xmailbox).xMHMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("unseen"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("replied"))
                        bogusForceDataize.write ((((xmsg).xadd_sequence)).apply ("flagged"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xBabylMessage)).apply ((xmsg))).xget_labels)).apply)) ((((unsupported)).apply ("unseen") ("answered"))))
                xtest_babyl_to_maildir.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") (""))) ((((unsupported)).apply ("deleted") ("ST"))) ((((unsupported)).apply ("filed") ("S"))) ((((unsupported)).apply ("answered") ("RS"))) ((((unsupported)).apply ("forwarded") ("PS"))) ((((unsupported)).apply ("edited") ("S"))) ((((unsupported)).apply ("resent") ("PS"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_flags)).apply)) ((xresult)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_subdir)).apply)) ("cur"))
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ("unseen") ("deleted") ("filed") ("answered") ("forwarded") ("edited") ("resent"))))
                          bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xlabel)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_flags)).apply)) ("PRT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMaildirMessage)).apply ((xmsg))).xget_subdir)).apply)) ("cur"))
                xtest_babyl_to_mboxmmdf.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") ("O"))) ((((unsupported)).apply ("deleted") ("ROD"))) ((((unsupported)).apply ("filed") ("RO"))) ((((unsupported)).apply ("answered") ("ROA"))) ((((unsupported)).apply ("forwarded") ("RO"))) ((((unsupported)).apply ("edited") ("RO"))) ((((unsupported)).apply ("resent") ("RO"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                            seq
                              xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                              bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xsetting)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xclass_)).apply ((xmsg))).xget_flags)).apply)) ((xresult)))
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ("unseen") ("deleted") ("filed") ("answered") ("forwarded") ("edited") ("resent"))))
                          bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xlabel)))
                        (((unsupported)).apply ((xclass_)) ((((unsupported)).apply (((xmailbox).xmboxMessage)) (((xmailbox).xMMDFMessage)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xclass_)).apply ((xmsg))).xget_flags)).apply)) ("ODA"))
                xtest_babyl_to_mh.write
                  [xself]
                    memory > xpairs
                    memory > xmsg
                    seq > @
                      seq
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("unseen") ((((unsupported)).apply ("unseen"))))) ((((unsupported)).apply ("deleted") ((((unsupported)).apply)))) ((((unsupported)).apply ("filed") ((((unsupported)).apply)))) ((((unsupported)).apply ("answered") ((((unsupported)).apply ("replied"))))) ((((unsupported)).apply ("forwarded") ((((unsupported)).apply)))) ((((unsupported)).apply ("edited") ((((unsupported)).apply)))) ((((unsupported)).apply ("resent") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsetting)) ((xresult)))) ((xpairs)))
                          seq
                            xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                            bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xsetting)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMHMessage)).apply ((xmsg))).xget_sequences)).apply)) ((xresult)))
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ("unseen") ("deleted") ("filed") ("answered") ("forwarded") ("edited") ("resent"))))
                          bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xlabel)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmailbox).xMHMessage)).apply ((xmsg))).xget_sequences)).apply)) ((((unsupported)).apply ("unseen") ("replied"))))
                xtest_babyl_to_babyl.write
                  [xself]
                    memory > xmsg
                    memory > xmsg2
                    seq > @
                      seq
                        xmsg.write ((((xmailbox).xBabylMessage)).apply ((x_sample_message)))
                        bogusForceDataize.write ((((xmsg).xupdate_visible)).apply)
                        (((unsupported)).apply ((xlabel)) ((((unsupported)).apply ("unseen") ("deleted") ("filed") ("answered") ("forwarded") ("edited") ("resent"))))
                          bogusForceDataize.write ((((xmsg).xadd_label)).apply ((xlabel)))
                        xmsg2.write ((((xmailbox).xBabylMessage)).apply ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg2).xget_labels)).apply)) ((((unsupported)).apply ("unseen") ("deleted") ("filed") ("answered") ("forwarded") ("edited") ("resent"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xmsg).xget_visible)).apply).xkeys)).apply)) ((((((((xmsg2).xget_visible)).apply).xkeys)).apply)))
                        (((unsupported)).apply ((xkey)) ((((((((xmsg).xget_visible)).apply).xkeys)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xmsg).xget_visible)).apply)) ((xkey)))) ((((unsupported)).apply (((((xmsg2).xget_visible)).apply)) ((xkey)))))
            (((unsupported)).apply ((xTestBase)))
              seq
                x_test_read.write
                  [xself xproxy]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply)) ("bar"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply)) ("ar"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply (2))) ("ba"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply ((1.neg)))) ("ar"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply (1000))) ("r"))
                x_test_readline.write
                  [xself xproxy]
                    memory > xlinesep
                    seq > @
                      seq
                        xlinesep.write (((((xos).xlinesep).xencode)).apply)
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) (("foo".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) (("bar".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) (("fred".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) ("bob"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) (("o".add (xlinesep))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply ((6.add (2.mul (((xlen)).apply (((xos).xlinesep)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply)) (("fred".add (xlinesep))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply ((6.add (2.mul (((xlen)).apply (((xos).xlinesep)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply (2))) ("fr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadline)).apply ((10.neg)))) (("ed".add (xlinesep))))
                x_test_readlines.write
                  [xself xproxy]
                    memory > xlinesep
                    seq > @
                      seq
                        xlinesep.write (((((xos).xlinesep).xencode)).apply)
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadlines)).apply)) ((((unsupported)).apply (("foo".add (xlinesep))) (("bar".add (xlinesep))) (("fred".add (xlinesep))) ("bob"))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadlines)).apply (2))) ((((unsupported)).apply (("foo".add (xlinesep))))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply ((3.add (((xlen)).apply ((xlinesep))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadlines)).apply ((4.add (((xlen)).apply ((xlinesep))))))) ((((unsupported)).apply (("bar".add (xlinesep))) (("fred".add (xlinesep))))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xreadlines)).apply (1000))) ((((unsupported)).apply ((xlinesep)) (("bar".add (xlinesep))) (("fred".add (xlinesep))) ("bob"))))
                x_test_iteration.write
                  [xself xproxy]
                    memory > xiterator
                    memory > xlinesep
                    seq > @
                      seq
                        xlinesep.write (((((xos).xlinesep).xencode)).apply)
                        bogusForceDataize.write ((((xproxy).xseek)).apply (0))
                        xiterator.write (((xiter)).apply ((xproxy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xiterator)))) (("foo".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xiterator)))) (("bar".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xiterator)))) (("fred".add (xlinesep))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xiterator)))) ("bob"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xiterator)))
                x_test_seek_and_tell.write
                  [xself xproxy]
                    memory > xlinesep
                    seq > @
                      seq
                        xlinesep.write (((((xos).xlinesep).xencode)).apply)
                        bogusForceDataize.write ((((xproxy).xseek)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xtell)).apply)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply ((((xlen)).apply ((xlinesep)))))) ((xlinesep)))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (2) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply ((1.add (((xlen)).apply ((xlinesep))))))) (("r".add (xlinesep))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (((3.neg).sub (((xlen)).apply ((xlinesep))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply (3))) ("bar"))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (2) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xread)).apply)) (((("o".add (xlinesep)).add "bar").add (xlinesep))))
                        bogusForceDataize.write ((((xproxy).xseek)).apply (100))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xproxy).xread)).apply)))
                x_test_close.write
                  [xself xproxy]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xproxy).xclosed)))
                        bogusForceDataize.write ((((xproxy).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xproxy).xclosed)))
                        bogusForceDataize.write ((((xproxy).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xproxy).xclosed)))
            (((unsupported)).apply ((xTestProxyFileBase)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_path)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((xself).x_file)) ((((xopen)).apply (((xself).x_path)) ("wb+"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                xtest_initialize.write
                  [xself]
                    memory > xpos
                    memory > xproxy0
                    memory > xproxy1
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ("foo"))
                        xpos.write (((((xself).x_file).xtell)).apply)
                        xproxy0.write ((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy0).xtell)).apply)) ((xpos)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_file).xtell)).apply)) ((xpos)))
                        xproxy1.write ((((xmailbox).x_ProxyFile)).apply (((xself).x_file)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy1).xtell)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_file).xtell)).apply)) ((xpos)))
                xtest_read.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ("bar"))
                        bogusForceDataize.write ((((xself).x_test_read)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
                xtest_readline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%sfred%sbob".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_readline)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
                xtest_readlines.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%sfred%sbob".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_readlines)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
                xtest_iteration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%sfred%sbob".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_iteration)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
                xtest_seek_and_tell.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%s".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_seek_and_tell)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
                xtest_close.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%s".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_close)).apply (((((xmailbox).x_ProxyFile)).apply (((xself).x_file)))))
            (((unsupported)).apply ((xTestProxyFileBase)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_path)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((xself).x_file)) ((((xopen)).apply (((xself).x_path)) ("wb+"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_delete_recursively)).apply (((xself).x_path)))
                xtest_initialize.write
                  [xself]
                    memory > xproxy
                    memory > xpos
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply ((("foo".add ((xos).xlinesep)).add "bar")) ("ascii"))))
                        xpos.write (((((xself).x_file).xtell)).apply)
                        xproxy.write ((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (2) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xproxy).xtell)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).x_file).xtell)).apply)) ((xpos)))
                xtest_read.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply ("***bar***") ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_read)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (3) (6))))
                xtest_readline.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("!!!!!foo%sbar%sfred%sbob!!!!!".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_readline)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (5) ((18.add (3.mul (((xlen)).apply (((xos).xlinesep)))))))))
                xtest_readlines.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("foo%sbar%sfred%sbob?????".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_readlines)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (0) ((13.add (3.mul (((xlen)).apply (((xos).xlinesep)))))))))
                xtest_iteration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("____foo%sbar%sfred%sbob####".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_iteration)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (4) ((17.add (3.mul (((xlen)).apply (((xos).xlinesep)))))))))
                xtest_seek_and_tell.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("(((foo%sbar%s$$$".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_seek_and_tell)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (3) ((9.add (2.mul (((xlen)).apply (((xos).xlinesep)))))))))
                xtest_close.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).x_file).xwrite)).apply ((((xbytes)).apply (("&foo%sbar%s^".mod (((unsupported)).apply (((xos).xlinesep)) (((xos).xlinesep))))) ("ascii"))))
                        bogusForceDataize.write ((((xself).x_test_close)).apply (((((xmailbox).x_PartialFile)).apply (((xself).x_file)) (1) ((6.add (3.mul (((xlen)).apply (((xos).xlinesep)))))))))
            xFROM_.write "From some.body@dummy.domain  Sat Jul 24 13:43:35 2004n"
            xDUMMY_MESSAGE.write (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_dir)) (((xsupport).xTESTFN)))
                        (((((xos).xpath).xisdir)).apply (((xself).x_dir))).if
                          bogusForceDataize.write ((((xsupport).xrmtree)).apply (((xself).x_dir)))
                          (((((xos).xpath).xisfile)).apply (((xself).x_dir))).if
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).x_dir)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).x_dir)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("cur"))))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("tmp"))))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("new"))))
                        (((unsupported)).apply (((xself).x_counter)) (1))
                        (((unsupported)).apply (((xself).x_msgfiles)) ((((unsupported)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xlist)).apply ((((xmap)).apply (((xos).xunlink)) (((xself).x_msgfiles)))))
                        bogusForceDataize.write ((((xsupport).xrmdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("cur"))))
                        bogusForceDataize.write ((((xsupport).xrmdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("tmp"))))
                        bogusForceDataize.write ((((xsupport).xrmdir)).apply ((((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("new"))))
                        bogusForceDataize.write ((((xsupport).xrmdir)).apply (((xself).x_dir)))
                xcreateMessage.write
                  [xself xdir xmbox]
                    memory > xfilename
                    memory > xtmpname
                    memory > xnewname
                    memory > xt
                    memory > xpid
                    seq > @
                      (((unsupported)).apply)
                        xt.write (((xint)).apply ((((((xtime).xtime)).apply).mod 1000000)))
                        xpid.write ((xself).x_counter)
                        (((unsupported)).apply (((xself).x_counter)) (1))
                        xfilename.write (((".".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xt)))) ((((xstr)).apply ((xpid)))) ("myhostname") ("mydomain"))))
                        xtmpname.write (((((xos).xpath).xjoin)).apply (((xself).x_dir)) ("tmp") ((xfilename)))
                        xnewname.write (((((xos).xpath).xjoin)).apply (((xself).x_dir)) ((xdir)) ((xfilename)))
                        (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("w"))) ((xfp)))
                          seq
                            bogusForceDataize.write (((((xself).x_msgfiles).xappend)).apply ((xtmpname)))
                            (xmbox).if
                              bogusForceDataize.write ((((xfp).xwrite)).apply ((xFROM_)))
                            bogusForceDataize.write ((((xfp).xwrite)).apply ((xDUMMY_MESSAGE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xPermissionError)))))
                          bogusForceDataize.write ((((xos).xlink)).apply ((xtmpname)) ((xnewname)))
                          (((unsupported)).apply ((((xopen)).apply ((xnewname)) ("w"))) ((xfp)))
                            bogusForceDataize.write ((((xfp).xwrite)).apply ((xDUMMY_MESSAGE)))
                        bogusForceDataize.write (((((xself).x_msgfiles).xappend)).apply ((xnewname)))
                        (((unsupported)).apply ((xtmpname)))
                xtest_empty_maildir.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xmbox)) (((((xmailbox).xMaildir)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                xtest_nonempty_maildir_cur.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreateMessage)).apply ("cur"))
                        (((unsupported)).apply (((xself).xmbox)) (((((xmailbox).xMaildir)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                xtest_nonempty_maildir_new.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreateMessage)).apply ("new"))
                        (((unsupported)).apply (((xself).xmbox)) (((((xmailbox).xMaildir)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                xtest_nonempty_maildir_both.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcreateMessage)).apply ("cur"))
                        bogusForceDataize.write ((((xself).xcreateMessage)).apply ("new"))
                        (((unsupported)).apply (((xself).xmbox)) (((((xmailbox).xMaildir)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xself).xmbox).xnext)).apply)))
            x_sample_message.write (((unsupported)).apply)
            x_bytes_sample_message.write ((((x_sample_message).xencode)).apply ("ascii"))
            x_sample_headers.write (((unsupported)).apply ("Return-Path") ("<gkj@gregorykjohnson.com>") ("X-Original-To") ("gkj+person@localhost") ("Delivered-To") ("gkj+person@localhost") ("Received") ((((unsupported)).apply)) ("Delivered-To") ("gkj@sundance.gregorykjohnson.com") ("Received") ((((unsupported)).apply)) ("Received") ((((unsupported)).apply)) ("Received") ((((unsupported)).apply)) ("Date") ("Wed, 13 Jul 2005 17:23:11 -0400") ("From") ("\"Gregory K. Johnson\" <gkj@gregorykjohnson.com>") ("To") ("gkj@gregorykjohnson.com") ("Subject") ("Sample message") ("Mime-Version") ("1.0") ("Content-Type") ("multipart/mixed; boundary=\"NMuMz9nt05w80d4+\"") ("Content-Disposition") ("inline") ("User-Agent") ("Mutt/1.5.9i"))
            x_sample_payloads.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("linesep") ("fcntl"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xmailbox)) ((xblacklist)))
            xtest_main.write
              []
                memory > xtests
                seq > @
                  seq
                    xtests.write (((unsupported)).apply ((xTestMailboxSuperclass)) ((xTestMaildir)) ((xTestMbox)) ((xTestMMDF)) ((xTestMH)) ((xTestBabyl)) ((xTestMessage)) ((xTestMaildirMessage)) ((xTestMboxMessage)) ((xTestMHMessage)) ((xTestBabylMessage)) ((xTestMMDFMessage)) ((xTestMessageConversion)) ((xTestProxyFile)) ((xTestPartialFile)) ((xMaildirTestCase)) ((xTestFakeMailBox)) ((xMiscTestCase)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtests)))))
                    bogusForceDataize.write ((((xsupport).xreap_children)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)