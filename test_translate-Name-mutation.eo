memory > xTemplateSyntaxError
memory > xLocalizeNode
memory > xtemplate
memory > xTranslationTransTagTests
memory > xLocal
memory > xmark_safe
memory > xname
memory > xSimpleTestCase
memory > xContext
memory > xinspect
memory > xtrans_real
memory > xtranslation
memory > xrepr
memory > xtrans_setup
memory > xargs
memory > xMultipleLocaleActivationTransTagTests
memory > xTemplate
memory > xpartial
memory > xMultipleLocaleActivationTestCase
memory > xsetup_func
memory > xkwargs
[] > test_translate
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_syntax_error_duplicate_option
        memory > xlibraries
        memory > xbase_setup
        memory > xtest_i18n09
        memory > xtest_repr
        memory > xtest_i18n22
        memory > xtest_trans_tag_using_a_string_that_looks_like_str_fmt
        memory > xtest_syntax_error_no_arguments
        memory > xget_template
        memory > xtest_i18n36
        memory > xtest_i18n06
        memory > xtest_i18n20
        memory > xtest_i18n24
        memory > xtest_syntax_error_context_as
        memory > xtest_i18n35
        memory > xtest_syntax_error_bad_option
        memory > xtest_multiple_locale_trans
        memory > xtest_syntax_error_context_noop
        memory > xtest_i18n01
        memory > xtest_template_tags_pgettext
        memory > xtest_i18n23
        memory > xtest_multiple_locale_deactivate_trans
        memory > xtest_i18n25
        memory > xtag_name
        memory > xtest_single_locale_activation
        memory > xtest_syntax_error_missing_context
        memory > xtest_multiple_locale_direct_switch_trans
        memory > xtest_syntax_error_missing_assignment
        memory > xsetup
        memory > xtest_i18n02
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xsetup.write
              [xtemplates]
                memory > xtags
                memory > xdecorator
                memory > xtrans_setup2
                memory > xtranslate_setup
                seq > @
                  (((unsupported)).apply)
                    xtranslate_setup.write (((xbase_setup)).apply ((xtemplates)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                    xtrans_setup2.write (((xbase_setup)).apply ((((unsupported)).apply ((xname)) (((((xtemplate).xreplace)).apply ("{% translate ") ("{% trans "))) ((((unsupported)).apply ((xname)) ((xtemplate)))) (((((xtemplates).xitems)).apply)))))
                    xtags.write (((unsupported)).apply ("trans") ((xtrans_setup)) ("translate") ((xtranslate_setup)))
                    xdecorator.write
                      [xfunc]
                        memory > xinner
                        seq > @
                          seq
                            xinner.write
                              [xself]
                                memory > xsignature
                                seq > @
                                  (((unsupported)).apply)
                                    xsignature.write ((((xinspect).xsignature)).apply ((xfunc)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xtag_name)) ((xsetup_func)))) (((((xtags).xitems)).apply)))
                                      (((unsupported)).apply ("tag_name") (((xsignature).xparameters))).if
                                        bogusForceDataize.write (((((xsetup_func)).apply ((((unsupported)).apply ((xpartial)) ((xfunc)) ((xtag_name)))))).apply ((xself)))
                                        bogusForceDataize.write (((((xsetup_func)).apply ((xfunc)))).apply ((xself)))
                            (((unsupported)).apply ((xinner)))
                    (((unsupported)).apply ((xdecorator)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xlibraries.write (((unsupported)).apply ("i18n") ("django.templatetags.i18n"))
                xtest_i18n01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n01"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("xxxyyyxxx"))
                xtest_i18n02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n02"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("xxxyyyxxx"))
                xtest_i18n06.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n06"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Seite nicht gefunden"))
                xtest_i18n09.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n09"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Page not found"))
                xtest_i18n20.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n20") ((((unsupported)).apply ("andrew") ("a & b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("a &amp; b"))
                xtest_i18n22.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n22") ((((unsupported)).apply ("andrew") ((((xmark_safe)).apply ("a & b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("a & b"))
                xtest_i18n23.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n23"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("nicht gefunden"))
                xtest_i18n24.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n24"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("SEITE NICHT GEFUNDEN"))
                xtest_i18n25.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n25") ((((unsupported)).apply ("somevar") ("Page not found"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("SEITE NICHT GEFUNDEN"))
                xtest_i18n35.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Seite nicht gefunden"))
                xtest_i18n36.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n36"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Page not found"))
                xtest_syntax_error_no_arguments.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("'{}' takes at least one argument".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_bad_option.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("Unknown argument for '{}' tag: 'badoption'".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_missing_assignment.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("No argument provided to the '{}' tag for the as option.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_missing_context.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("No argument provided to the '{}' tag for the context option.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_context_as.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Invalid argument 'as' provided to the '{tag_name}' tag for the context option"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_context_noop.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Invalid argument 'noop' provided to the '{tag_name}' tag for the context option"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_syntax_error_duplicate_option.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "The 'noop' option was specified more than once."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_trans_tag_using_a_string_that_looks_like_str_fmt.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("%s"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtag_name.write "trans"
                xget_template.write
                  [xself xtemplate_string]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply (((((xtemplate_string).xreplace)).apply ("{{% translate ") (((("{{% {}".xformat)).apply (((xself).xtag_name)))))))))
                xtest_template_tags_pgettext.write
                  [xself]
                    memory > xt
                    memory > xrendered
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xtrans_real).x_active)) ((((xLocal)).apply)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context \"nonexistent\" %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("May"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context \"month name\" %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context \"verb\" %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context message_context %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("month name"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context message_context %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("verb"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context message_context|lower %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("MONTH NAME"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context message_context|lower %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("VERB"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" context \"month name\" as var %}Value: {{ var }}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Value: Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate \"May\" as var context \"verb\" %}Value: {{ var }}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Value: Kann"))
            (((unsupported)).apply ((xTranslationTransTagTests)))
              xtag_name.write "translate"
            (((unsupported)).apply ((xMultipleLocaleActivationTestCase)))
              seq
                xtag_name.write "trans"
                xget_template.write
                  [xself xtemplate_string]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply (((((xtemplate_string).xreplace)).apply ("{{% translate ") (((("{{% {}".xformat)).apply (((xself).xtag_name)))))))))
                xtest_single_locale_activation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xget_template)).apply ("{% load i18n %}{% translate 'Yes' %}")).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Oui"))
                xtest_multiple_locale_trans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate 'No' %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply (((xself).x_old_language)))) (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_deactivate_trans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate 'No' %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_direct_switch_trans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% translate 'No' %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
            (((unsupported)).apply ((xMultipleLocaleActivationTransTagTests)))
              xtag_name.write "translate"
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_repr.write
                [xself]
                  memory > xnode
                  seq > @
                    seq
                      xnode.write (((unsupported)).apply ((xLocalizeNode)) ((((unsupported)).apply)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xnode)))) ("<LocalizeNode>"))