memory > xAttributeError
memory > xHttpResponseNotAllowed
memory > xinitkwargs
memory > xTemplateResponse
memory > xhasattr
memory > xm
memory > xHttpResponseRedirect
memory > xgetattr
memory > xsetattr
memory > xHttpResponsePermanentRedirect
memory > xresponse_kwargs
memory > xreverse
memory > xTemplateResponseMixin
memory > xall
memory > xContextMixin
memory > xh
memory > xvalue
memory > xView
memory > xHttpResponse
memory > xargs
memory > xHttpResponseGone
memory > xImproperlyConfigured
memory > xkwargs
memory > xTypeError
memory > xmethod
memory > xkey
memory > xasyncio
memory > xlogging
[] > base
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xput
        memory > xrender_to_response
        memory > xlogger
        memory > xget
        memory > xview_is_async
        memory > xget_template_names
        memory > xresponse_class
        memory > xcontent_type
        memory > xpatch
        memory > x_allowed_methods
        memory > xhttp_method_names
        memory > xas_view
        memory > xsetup
        memory > xpost
        memory > xget_redirect_url
        memory > xdelete
        memory > xpattern_name
        memory > xdispatch
        memory > xurl
        memory > xtemplate_engine
        memory > xhead
        memory > xquery_string
        memory > xget_context_data
        memory > xtemplate_name
        memory > x__init__
        memory > xextra_context
        memory > xpermanent
        memory > xoptions
        memory > xhttp_method_not_allowed
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.request"))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xextra_context.write "None: is there a None literal in the EO language?"
                xget_context_data.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ((xself)) ("view"))
                        (((unsupported)).apply (((xself).xextra_context)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xkwargs).xupdate)).apply (((xself).xextra_context)))
                        (((unsupported)).apply ((xkwargs)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xhttp_method_names.write (((unsupported)).apply ("get") ("post") ("put") ("patch") ("delete") ("head") ("options") ("trace"))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xkwargs).xitems)).apply)))
                          bogusForceDataize.write (((xsetattr)).apply ((xself)) ((xkey)) ((xvalue)))
                xview_is_async.write
                  [xcls]
                    memory > xis_async
                    memory > xhandlers
                    seq > @
                      (((unsupported)).apply)
                        xhandlers.write (((unsupported)).apply ((((xgetattr)).apply ((xcls)) ((xmethod)))) ((xmethod)) (((xcls).xhttp_method_names)) ((((xmethod).neq "options").and (((xhasattr)).apply ((xcls)) ((xmethod))))))
                        ((xhandlers).not).if
                          (((unsupported)).apply (FALSE))
                        xis_async.write ((((xasyncio).xiscoroutinefunction)).apply ((((unsupported)).apply ((xhandlers)) (0))))
                        ((((xall)).apply ((((unsupported)).apply ((((((xasyncio).xiscoroutinefunction)).apply ((xh))).eq (xis_async))) ((xh)) ((((unsupported)).apply ((xhandlers)) ((((unsupported)).apply (1)))))))).not).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply ("{cls.__qualname__} HTTP handlers must either be all sync or all async."))))
                        (((unsupported)).apply ((xis_async)))
                xas_view.write
                  [xcls]
                    memory > xview
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((xkey)) ((xinitkwargs)))
                          seq
                            (((unsupported)).apply ((xkey)) (((xcls).xhttp_method_names))).if
                              (((unsupported)).apply ((((xTypeError)).apply (("The method name %s is not accepted as a keyword argument to %s().".mod (((unsupported)).apply ((xkey)) (((xcls).x__name__))))))))
                            ((((xhasattr)).apply ((xcls)) ((xkey))).not).if
                              (((unsupported)).apply ((((xTypeError)).apply (("%s() received an invalid keyword %r. as_view only accepts arguments that are already attributes of the class.".mod (((unsupported)).apply (((xcls).x__name__)) ((xkey))))))))
                        xview.write
                          [xrequest]
                            memory > xself
                            seq > @
                              (((unsupported)).apply)
                                xself.write (((xcls)).apply ((((unsupported)).apply ((xinitkwargs)))))
                                bogusForceDataize.write ((((xself).xsetup)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                ((((xhasattr)).apply ((xself)) ("request")).not).if
                                  (((unsupported)).apply ((((xAttributeError)).apply (("%s instance has no 'request' attribute. Did you override setup() and forget to call super()?".mod ((xcls).x__name__))))))
                                (((unsupported)).apply (((((xself).xdispatch)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xview).xview_class)) ((xcls)))
                        (((unsupported)).apply (((xview).xview_initkwargs)) ((xinitkwargs)))
                        (((unsupported)).apply (((xview).x__doc__)) (((xcls).x__doc__)))
                        (((unsupported)).apply (((xview).x__module__)) (((xcls).x__module__)))
                        (((unsupported)).apply (((xview).x__annotations__)) ((((xcls).xdispatch).x__annotations__)))
                        bogusForceDataize.write (((((xview).x__dict__).xupdate)).apply ((((xcls).xdispatch).x__dict__)))
                        ((xcls).xview_is_async).if
                          (((unsupported)).apply (((xview).x_is_coroutine)) ((((xasyncio).xcoroutines).x_is_coroutine)))
                        (((unsupported)).apply ((xview)))
                xsetup.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((((xhasattr)).apply ((xself)) ("get")).and ((((xhasattr)).apply ((xself)) ("head")).not)).if
                          (((unsupported)).apply (((xself).xhead)) (((xself).xget)))
                        (((unsupported)).apply (((xself).xrequest)) ((xrequest)))
                        (((unsupported)).apply (((xself).xargs)) ((xargs)))
                        (((unsupported)).apply (((xself).xkwargs)) ((xkwargs)))
                xdispatch.write
                  [xself xrequest]
                    memory > xhandler
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xrequest).xmethod).xlower)).apply)) (((xself).xhttp_method_names))).if
                          xhandler.write (((xgetattr)).apply ((xself)) ((((((xrequest).xmethod).xlower)).apply)) (((xself).xhttp_method_not_allowed)))
                          xhandler.write ((xself).xhttp_method_not_allowed)
                        (((unsupported)).apply ((((xhandler)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xhttp_method_not_allowed.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xlogger).xwarning)) ("Method Not Allowed (%s): %s") (((xrequest).xmethod)) (((xrequest).xpath)) ((((unsupported)).apply ("status_code") (405) ("request") ((xrequest)))))
                        (((unsupported)).apply ((((xHttpResponseNotAllowed)).apply (((((xself).x_allowed_methods)).apply)))))
                xoptions.write
                  [xself xrequest]
                    memory > xresponse
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xresponse.write (((xHttpResponse)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Allow"))) ((((", ".xjoin)).apply (((((xself).x_allowed_methods)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ("0"))
                        ((xself).xview_is_async).if
                          seq
                            xfunc.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xresponse)))
                            (((unsupported)).apply ((((xfunc)).apply)))
                          (((unsupported)).apply ((xresponse)))
                x_allowed_methods.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((((xm).xupper)).apply)) ((xm)) (((xself).xhttp_method_names)) ((((xhasattr)).apply ((xself)) ((xm)))))))
            (((unsupported)).apply)
              seq
                unsupported
                xtemplate_name.write "None: is there a None literal in the EO language?"
                xtemplate_engine.write "None: is there a None literal in the EO language?"
                xresponse_class.write (xTemplateResponse)
                xcontent_type.write "None: is there a None literal in the EO language?"
                xrender_to_response.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xresponse_kwargs).xsetdefault)).apply ("content_type") (((xself).xcontent_type)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xresponse_class)) (((xself).xrequest)) (((((xself).xget_template_names)).apply)) ((xcontext)) (((xself).xtemplate_engine)) ((((unsupported)).apply ((xresponse_kwargs)))))))
                xget_template_names.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xtemplate_name)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply ("TemplateResponseMixin requires either a definition of 'template_name' or an implementation of 'get_template_names()'"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xtemplate_name)))))
            (((unsupported)).apply ((xTemplateResponseMixin)) ((xContextMixin)) ((xView)))
              seq
                (((unsupported)).apply)
                xget.write
                  [xself xrequest]
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        xcontext.write ((((xself).xget_context_data)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((((xself).xrender_to_response)).apply ((xcontext)))))
            (((unsupported)).apply ((xView)))
              seq
                unsupported
                xpermanent.write FALSE
                xurl.write "None: is there a None literal in the EO language?"
                xpattern_name.write "None: is there a None literal in the EO language?"
                xquery_string.write FALSE
                xget_redirect_url.write
                  [xself]
                    memory > xargs
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xself).xurl).if
                          xurl.write (((xself).xurl).mod (xkwargs))
                          ((xself).xpattern_name).if
                            xurl.write (((unsupported)).apply ((xreverse)) (((xself).xpattern_name)) ((xargs)) ((xkwargs)))
                            (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xargs.write ((((((xself).xrequest).xMETA).xget)).apply ("QUERY_STRING") (""))
                        ((xargs).and ((xself).xquery_string)).if
                          xurl.write ("%s?%s".mod (((unsupported)).apply ((xurl)) ((xargs))))
                        (((unsupported)).apply ((xurl)))
                xget.write
                  [xself xrequest]
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        xurl.write ((((xself).xget_redirect_url)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (xurl).if
                          ((xself).xpermanent).if
                            (((unsupported)).apply ((((xHttpResponsePermanentRedirect)).apply ((xurl)))))
                            (((unsupported)).apply ((((xHttpResponseRedirect)).apply ((xurl)))))
                          seq
                            (((unsupported)).apply (((xlogger).xwarning)) ("Gone: %s") (((xrequest).xpath)) ((((unsupported)).apply ("status_code") (410) ("request") ((xrequest)))))
                            (((unsupported)).apply ((((xHttpResponseGone)).apply)))
                xhead.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xpost.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xoptions.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xdelete.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xput.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xpatch.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))