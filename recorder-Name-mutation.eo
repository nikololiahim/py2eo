memory > xApps
memory > xDatabaseError
memory > xeditor
memory > xnow
memory > xMigrationSchemaMissing
memory > xcursor
memory > xmigration
memory > xexc
memory > xmodels
[] > recorder
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmigration_qs
        memory > xhas_table
        memory > xMigration
        memory > xapplied_migrations
        memory > xrecord_unapplied
        memory > xflush
        memory > x__init__
        memory > xrecord_applied
        memory > xensure_schema
        memory > x_migration_class
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x_migration_class.write "None: is there a None literal in the EO language?"
                xMigration.write
                  [xcls]
                    memory > x__str__
                    memory > xdb_table
                    memory > xapps
                    memory > xapplied
                    memory > xapp_label
                    memory > xapp2
                    memory > xname
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).x_migration_class)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xmodels).xModel)))
                              seq
                                xapp2.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                                xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                                xapplied.write (((unsupported)).apply (((xmodels).xDateTimeField)) ((xnow)))
                                (((unsupported)).apply)
                                  seq
                                    xapps.write (((xApps)).apply)
                                    xapp_label.write "migrations"
                                    xdb_table.write "django_migrations"
                                x__str__.write
                                  [xself]
                                    seq > @
                                      (((unsupported)).apply (("Migration %s for %s".mod (((unsupported)).apply (((xself).xname)) (((xself).xapp))))))
                            (((unsupported)).apply (((xcls).x_migration_class)) ((xMigration)))
                        (((unsupported)).apply (((xcls).x_migration_class)))
                x__init__.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply (((xself).xconnection)) ((xconnection)))
                xmigration_qs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xself).xMigration).xobjects).xusing)).apply ((((xself).xconnection).xalias)))))
                xhas_table.write
                  [xself]
                    memory > xtables
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xconnection).xcursor)).apply)) ((xcursor)))
                          xtables.write ((((((xself).xconnection).xintrospection).xtable_names)).apply ((xcursor)))
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xMigration).x_meta).xdb_table)) ((xtables)))))
                xensure_schema.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((((xself).xhas_table)).apply).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xDatabaseError)))
                          (((unsupported)).apply ((((((xself).xconnection).xschema_editor)).apply)) ((xeditor)))
                            bogusForceDataize.write ((((xeditor).xcreate_model)).apply (((xself).xMigration)))
                          (((unsupported)).apply ((((xMigrationSchemaMissing)).apply (("Unable to create the django_migrations table (%s)".mod (xexc))))))
                xapplied_migrations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xself).xhas_table)).apply).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xmigration).xapp)) (((xmigration).xname)))) ((xmigration)) ((xmigration)) (((xself).xmigration_qs)))))
                          (((unsupported)).apply ((((unsupported)).apply)))
                xrecord_applied.write
                  [xself xapp xname]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xensure_schema)).apply)
                        (((unsupported)).apply ((((xself).xmigration_qs).xcreate)) ((xapp)) ((xname)))
                xrecord_unapplied.write
                  [xself xapp xname]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xensure_schema)).apply)
                        bogusForceDataize.write ((((((unsupported)).apply ((((xself).xmigration_qs).xfilter)) ((xapp)) ((xname))).xdelete)).apply)
                xflush.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((((((xself).xmigration_qs).xall)).apply).xdelete)).apply)