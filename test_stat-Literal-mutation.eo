memory > ximport_fresh_module
memory > xValueError
memory > xstr
memory > xsocket
memory > xvalue
memory > xNotImplementedError
memory > xerr
memory > xopen
memory > xcallable
memory > xint
memory > xs
memory > xsorted
memory > xe
memory > xunittest
memory > xblockdev
memory > xmodestr
memory > xTestFilemode
memory > xst_mode
memory > xhasattr
memory > xOSError
memory > xTESTFN
memory > xos
memory > xgetattr
memory > xPermissionError
memory > xfuncname
memory > x__name__
memory > xkey
[] > test_stat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_devices
        memory > xtest_link
        memory > xtest_module_attributes
        memory > xformats
        memory > xformat_funcs
        memory > xtest_socket
        memory > xtest_directory
        memory > xpermission_bits
        memory > xget_mode
        memory > xc_stat
        memory > xstatmod
        memory > xstat_struct
        memory > xsetUp
        memory > xtest_mode
        memory > xassertS_IS
        memory > xfile_flags
        memory > xpy_stat
        memory > xtest_file_attribute_constants
        memory > xtearDown
        memory > xtest_fifo
        memory > xfile_attributes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xc_stat.write (((unsupported)).apply ((ximport_fresh_module)) ("stat") ((((unsupported)).apply ("_stat"))))
            xpy_stat.write (((unsupported)).apply ((ximport_fresh_module)) ("stat") ((((unsupported)).apply ("_stat"))))
            (((unsupported)).apply)
              seq
                xstatmod.write "None: is there a None literal in the EO language?"
                xfile_flags.write (((unsupported)).apply ("SF_APPEND") ("SF_ARCHIVED") ("SF_IMMUTABLE") ("SF_NOUNLINK") ("SF_SNAPSHOT") ("UF_APPEND") ("UF_COMPRESSED") ("UF_HIDDEN") ("UF_IMMUTABLE") ("UF_NODUMP") ("UF_NOUNLINK") ("UF_OPAQUE"))
                xformats.write (((unsupported)).apply ("S_IFBLK") ("S_IFCHR") ("S_IFDIR") ("S_IFIFO") ("S_IFLNK") ("S_IFREG") ("S_IFSOCK") ("S_IFDOOR") ("S_IFPORT") ("S_IFWHT"))
                xformat_funcs.write (((unsupported)).apply ("S_ISBLK") ("S_ISCHR") ("S_ISDIR") ("S_ISFIFO") ("S_ISLNK") ("S_ISREG") ("S_ISSOCK") ("S_ISDOOR") ("S_ISPORT") ("S_ISWHT"))
                xstat_struct.write (((unsupported)).apply ("ST_MODE") (0) ("ST_INO") (1) ("ST_DEV") (2) ("ST_NLINK") (3) ("ST_UID") (4) ("ST_GID") (5) ("ST_SIZE") (6) ("ST_ATIME") (7) ("ST_MTIME") (8) ("ST_CTIME") (9))
                xpermission_bits.write (((unsupported)).apply ("S_ISUID") (2048) ("S_ISGID") (1024) ("S_ENFMT") (1024) ("S_ISVTX") (512) ("S_IRWXU") (448) ("S_IRUSR") (256) ("S_IREAD") (256) ("S_IWUSR") (128) ("S_IWRITE") (128) ("S_IXUSR") (64) ("S_IEXEC") (64) ("S_IRWXG") (56) ("S_IRGRP") (32) ("S_IWGRP") (16) ("S_IXGRP") (8) ("S_IRWXO") (7) ("S_IROTH") (4) ("S_IWOTH") (2) ("S_IXOTH") (1))
                xfile_attributes.write (((unsupported)).apply ("FILE_ATTRIBUTE_ARCHIVE") (32) ("FILE_ATTRIBUTE_COMPRESSED") (2048) ("FILE_ATTRIBUTE_DEVICE") (64) ("FILE_ATTRIBUTE_DIRECTORY") (16) ("FILE_ATTRIBUTE_ENCRYPTED") (16384) ("FILE_ATTRIBUTE_HIDDEN") (2) ("FILE_ATTRIBUTE_INTEGRITY_STREAM") (32768) ("FILE_ATTRIBUTE_NORMAL") (128) ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED") (8192) ("FILE_ATTRIBUTE_NO_SCRUB_DATA") (131072) ("FILE_ATTRIBUTE_OFFLINE") (4096) ("FILE_ATTRIBUTE_READONLY") (1) ("FILE_ATTRIBUTE_REPARSE_POINT") (1024) ("FILE_ATTRIBUTE_SPARSE_FILE") (512) ("FILE_ATTRIBUTE_SYSTEM") (4) ("FILE_ATTRIBUTE_TEMPORARY") (256) ("FILE_ATTRIBUTE_VIRTUAL") (65536))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xOSError)))
                        bogusForceDataize.write ((((xos).xremove)).apply ((xTESTFN)))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply ((xTESTFN)))
                xtearDown.write (xsetUp)
                xget_mode.write
                  [xself xfname xlstat]
                    memory > xst_mode
                    memory > xmodestr
                    seq > @
                      (((unsupported)).apply)
                        (xlstat).if
                          xst_mode.write (((((xos).xlstat)).apply ((xfname))).xst_mode)
                          xst_mode.write (((((xos).xstat)).apply ((xfname))).xst_mode)
                        xmodestr.write (((((xself).xstatmod).xfilemode)).apply ((xst_mode)))
                        (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))))
                xassertS_IS.write
                  [xself xname xmode]
                    memory > xtestname
                    memory > xfunc
                    memory > xfmt
                    seq > @
                      seq
                        xfmt.write (((xgetattr)).apply (((xself).xstatmod)) (("S_IF".add ((((xname).xlstrip)).apply ("F")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IFMT)).apply ((xmode)))) ((xfmt)))
                        xtestname.write ("S_IS".add (xname))
                        (((unsupported)).apply ((xfuncname)) (((xself).xformat_funcs)))
                          seq
                            xfunc.write (((xgetattr)).apply (((xself).xstatmod)) ((xfuncname)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xfunc)) ("None: is there a None literal in the EO language?")).if
                              seq
                                ((xfuncname).eq (xtestname)).if
                                  (((unsupported)).apply ((((xValueError)).apply ((xfuncname)))))
                                (((unsupported)).apply)
                            ((xfuncname).eq (xtestname)).if
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfunc)).apply ((xmode)))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xfunc)).apply ((xmode)))))
                xtest_mode.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("w"))))
                        (((xos).xname).eq "posix").if
                          seq
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (448))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("-rwx------"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("REG") ((xst_mode)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IMODE)).apply ((xst_mode)))) ((((xself).xstatmod).xS_IRWXU)))
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (56))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("----rwx---"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("REG") ((xst_mode)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IMODE)).apply ((xst_mode)))) ((((xself).xstatmod).xS_IRWXG)))
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (7))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("-------rwx"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("REG") ((xst_mode)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IMODE)).apply ((xst_mode)))) ((((xself).xstatmod).xS_IRWXO)))
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (292))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("REG") ((xst_mode)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("-r--r--r--"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IMODE)).apply ((xst_mode)))) (292))
                          seq
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (448))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) ((((unsupported)).apply (3))))) ("-rw"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("REG") ((xst_mode)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xstatmod).xS_IFMT)).apply ((xst_mode)))) ((((xself).xstatmod).xS_IFREG)))
                xtest_directory.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xTESTFN)))
                        bogusForceDataize.write ((((xos).xchmod)).apply ((xTESTFN)) (448))
                        (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                        bogusForceDataize.write ((((xself).xassertS_IS)).apply ("DIR") ((xst_mode)))
                        (((xos).xname).eq "posix").if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("drwx------"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) (0))) ("d"))
                xtest_link.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xOSError)) ((xNotImplementedError)))))
                          bogusForceDataize.write ((((xos).xsymlink)).apply (((((xos).xgetcwd)).apply)) ((xTESTFN)))
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ((((xstr)).apply ((xerr)))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) (0))) ("l"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("LNK") ((xst_mode)))
                xtest_fifo.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xmkfifo)).apply ((xTESTFN)) (448))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("os.mkfifo(): %s".mod (xe))))
                        (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodestr)) ("prwx------"))
                        bogusForceDataize.write ((((xself).xassertS_IS)).apply ("FIFO") ((xst_mode)))
                xtest_devices.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((((xos).xpath).xexists)).apply (((xos).xdevnull))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) ((((unsupported)).apply (((xself).xget_mode)) (((xos).xdevnull)) (FALSE))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) (0))) ("c"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("CHR") ((xst_mode)))
                        (((unsupported)).apply ((xblockdev)) ((((unsupported)).apply ("/dev/sda") ("/dev/hda"))))
                          (((((xos).xpath).xexists)).apply ((xblockdev))).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) ((((unsupported)).apply (((xself).xget_mode)) ((xblockdev)) (FALSE))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) (0))) ("b"))
                              bogusForceDataize.write ((((xself).xassertS_IS)).apply ("BLK") ((xst_mode)))
                              (((unsupported)).apply)
                xtest_socket.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_UNIX)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xbind)).apply ((xTESTFN)))
                            (((unsupported)).apply ((((unsupported)).apply ((xst_mode)) ((xmodestr)))) (((((xself).xget_mode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmodestr)) (0))) ("s"))
                            bogusForceDataize.write ((((xself).xassertS_IS)).apply ("SOCK") ((xst_mode)))
                xtest_module_attributes.write
                  [xself]
                    memory > xmodvalue
                    memory > xfunc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xself).xstat_struct).xitems)).apply)))
                          seq
                            xmodvalue.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((xmodvalue)) ((xkey)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xself).xpermission_bits).xitems)).apply)))
                          seq
                            xmodvalue.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((xmodvalue)) ((xkey)))
                        (((unsupported)).apply ((xkey)) (((xself).xfile_flags)))
                          seq
                            xmodvalue.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmodvalue)) ((xint)))
                        (((unsupported)).apply ((xkey)) (((xself).xformats)))
                          seq
                            xmodvalue.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmodvalue)) ((xint)))
                        (((unsupported)).apply ((xkey)) (((xself).xformat_funcs)))
                          seq
                            xfunc.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcallable)).apply ((xfunc)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (0))) (0))
                xtest_file_attribute_constants.write
                  [xself]
                    memory > xmodvalue
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((xsorted)).apply ((((((xself).xfile_attributes).xitems)).apply)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply (((xself).xstatmod)) ((xkey)))) ((xkey)))
                            xmodvalue.write (((xgetattr)).apply (((xself).xstatmod)) ((xkey)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((xmodvalue)) ((xkey)))
            (((unsupported)).apply ((xTestFilemode)) (((xunittest).xTestCase)))
              xstatmod.write (xc_stat)
            (((unsupported)).apply ((xTestFilemode)) (((xunittest).xTestCase)))
              xstatmod.write (xpy_stat)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)