memory > xts
memory > xAttributeError
memory > xBytesIO
memory > xValueError
memory > xfmt
memory > xrange
memory > xb
memory > xproto
memory > xbinascii
memory > xopen
memory > xuse_builtin_types
memory > xos
memory > xUnicodeEncodeError
memory > xhash
memory > xobject
memory > xN
memory > xcopy
memory > xtoken
memory > xdatetime
memory > xdata
memory > xpickle
memory > xlist
memory > xxml_encoding
memory > xbom
memory > xsort_keys
memory > xobjects
memory > xcollections
memory > xbytearray
memory > xrepr
memory > xint
memory > xcodecs
memory > xOverflowError
memory > xx
memory > xoperator
memory > xi
memory > xstruct
memory > xUID
memory > xsupport
memory > xbytes
memory > xpl
memory > xtuple
memory > xRecursionError
memory > xDeprecationWarning
memory > xchr
memory > xencoding
memory > xplistlib
memory > xname
memory > xunittest
memory > xlen
memory > xdict
memory > xj
memory > xisinstance
memory > xfp
memory > xTypeError
memory > x__name__
memory > xa
[] > test_plistlib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xTESTDATA
        memory > xtest_uid_hash
        memory > xtest_dump_invalid_format
        memory > xtest_load_singletons
        memory > xtest_keyed_archive_data
        memory > xtest_load_int
        memory > xtest_identity
        memory > xtest_io
        memory > xtest_appleformatting
        memory > xtearDown
        memory > xtest_unsupported
        memory > xtest_modified_uid_negative
        memory > xtest_uid_data
        memory > xtest__all__
        memory > xtest_nonstandard_refs_size
        memory > xtest_uid_index
        memory > xtest_invalidreal
        memory > xtest_bytes
        memory > xtest_dump_duplicates
        memory > xtest_invalid_uid
        memory > xtest_uid_pickle
        memory > xtest_create
        memory > xtest_uid_repr
        memory > x_create
        memory > xtest_dataobject_deprecated
        memory > xtest_nondictroot
        memory > xtest_invaliddict
        memory > xtest_uid_eq
        memory > xtest_xml_plist_with_entity_decl
        memory > xtest_xml_encodings
        memory > xtest_invalid_binary
        memory > xtest_bytes_deprecated
        memory > xtest_non_bmp_characters
        memory > xtest_tuple_members
        memory > xtest_skipkeys
        memory > xtest_integer_notations
        memory > xINVALID_BINARY_PLISTS
        memory > xtest_uid
        memory > xdecode
        memory > xXML_PLIST_WITH_ENTITY
        memory > xtest_dict_members
        memory > xtest_appleformattingfromliteral
        memory > xtest_indentation_dict
        memory > xtest_keysort
        memory > xtest_deep_nesting
        memory > xtest_indentation_dict_mix
        memory > xtest_io_deprecated
        memory > xtest_int
        memory > xtest_keysort_bytesio
        memory > xtest_controlcharacters
        memory > xtest_bytearray
        memory > xtest_keys_no_string
        memory > xtest_invalid_type
        memory > xtest_lone_surrogates
        memory > xtest_invalidinteger
        memory > xALL_FORMATS
        memory > xtest_list_members
        memory > xtest_large_timestamp
        memory > xtest_modified_uid_huge
        memory > xtest_load_invalid_file
        memory > xtest_cycles
        memory > xtest_uid_copy
        memory > xtest_bytesio
        memory > xtest_indentation_array
        memory > xtest_invalidarray
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xALL_FORMATS.write (((unsupported)).apply (((xplistlib).xFMT_XML)) (((xplistlib).xFMT_BINARY)))
            xTESTDATA.write (((unsupported)).apply (((xplistlib).xFMT_XML)) (((((xbinascii).xa2b_base64)).apply ((((unsupported)).apply)))) (((xplistlib).xFMT_BINARY)) (((((xbinascii).xa2b_base64)).apply ((((unsupported)).apply)))) ("KEYED_ARCHIVE") (((((xbinascii).xa2b_base64)).apply ((((unsupported)).apply)))))
            xXML_PLIST_WITH_ENTITY.write (((unsupported)).apply)
            xINVALID_BINARY_PLISTS.write (((unsupported)).apply ((((unsupported)).apply ("too short data") (""))) ((((unsupported)).apply ("too large offset_table_offset and offset_size = 1") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x2a"))) ((((unsupported)).apply ("too large offset_table_offset and nonstandard offset_size") ("x00x00x00x08x00x00x00x00x00x00x03x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x2c"))) ((((unsupported)).apply ("integer overflow in offset_table_offset") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00xffxffxffxffxffxffxffxff"))) ((((unsupported)).apply ("too large top_object") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("integer overflow in top_object") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01xffxffxffxffxffxffxffxffx00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("too large num_objects and offset_size = 1") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00xffx00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("too large num_objects and nonstandard offset_size") ("x00x00x00x08x00x00x00x00x00x00x03x01x00x00x00x00x00x00x00xffx00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("extremally large num_objects (32 bit)") ("x00x08x00x00x00x00x00x00x01x01x00x00x00x00x7fxffxffxffx00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("extremally large num_objects (64 bit)") ("x00x08x00x00x00x00x00x00x01x01x00x00x00xffxffxffxffxffx00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("integer overflow in num_objects") ("x00x08x00x00x00x00x00x00x01x01xffxffxffxffxffxffxffxffx00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("offset_size = 0") ("x00x08x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("ref_size = 0") ("xa1x01x00x08x0ax00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0b"))) ((((unsupported)).apply ("too large offset") ("x00x2ax00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("integer overflow in offset") ("x00xffxffxffxffxffxffxffxffx00x00x00x00x00x00x08x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x09"))) ((((unsupported)).apply ("too large array size") ("xafx00x01xffx00x08x0cx00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0d"))) ((((unsupported)).apply ("extremally large array size (32-bit)") ("xafx02x7fxffxffxffx01x00x08x0fx00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x10"))) ((((unsupported)).apply ("extremally large array size (64-bit)") ("xafx03x00x00x00xffxffxffxffxffx01x00x08x13x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x14"))) ((((unsupported)).apply ("integer overflow in array size") ("xafx03xffxffxffxffxffxffxffxffx01x00x08x13x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x14"))) ((((unsupported)).apply ("too large reference index") ("xa1x02x00x08x0ax00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0b"))) ((((unsupported)).apply ("integer overflow in reference index") ("xa1xffxffxffxffxffxffxffxffx00x08x11x00x00x00x00x00x00x01x08x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x12"))) ((((unsupported)).apply ("too large bytes size") ("x4fx00x23x41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0c"))) ((((unsupported)).apply ("extremally large bytes size (32-bit)") ("x4fx02x7fxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0f"))) ((((unsupported)).apply ("extremally large bytes size (64-bit)") ("x4fx03x00x00x00xffxffxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x13"))) ((((unsupported)).apply ("integer overflow in bytes size") ("x4fx03xffxffxffxffxffxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x13"))) ((((unsupported)).apply ("too large ASCII size") ("x5fx00x23x41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0c"))) ((((unsupported)).apply ("extremally large ASCII size (32-bit)") ("x5fx02x7fxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0f"))) ((((unsupported)).apply ("extremally large ASCII size (64-bit)") ("x5fx03x00x00x00xffxffxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x13"))) ((((unsupported)).apply ("integer overflow in ASCII size") ("x5fx03xffxffxffxffxffxffxffxffx41x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x13"))) ((((unsupported)).apply ("invalid ASCII") ("x51xffx08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0a"))) ((((unsupported)).apply ("too large UTF-16 size") ("x6fx00x13x20xacx00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0e"))) ((((unsupported)).apply ("extremally large UTF-16 size (32-bit)") ("x6fx02x4fxffxffxffx20xacx00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x11"))) ((((unsupported)).apply ("extremally large UTF-16 size (64-bit)") ("x6fx03x00x00x00xffxffxffxffxffx20xacx00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x15"))) ((((unsupported)).apply ("integer overflow in UTF-16 size") ("x6fx03xffxffxffxffxffxffxffxffx20xacx00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x15"))) ((((unsupported)).apply ("invalid UTF-16") ("x61xd8x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0b"))) ((((unsupported)).apply ("non-hashable key") ("xd1x01x01xa0x08x0bx00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x02x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0c"))) ((((unsupported)).apply ("too large datetime (datetime overflow)") ("x33x42x50x00x00x00x00x00x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x11"))) ((((unsupported)).apply ("too large datetime (timedelta overflow)") ("x33x42xe0x00x00x00x00x00x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x11"))) ((((unsupported)).apply ("invalid datetime (Infinity)") ("x33x7fxf0x00x00x00x00x00x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x11"))) ((((unsupported)).apply ("invalid datetime (NaN)") ("x33x7fxf8x00x00x00x00x00x00x08x00x00x00x00x00x00x01x01x00x00x00x00x00x00x00x01x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x11"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                x_create.write
                  [xself xfmt]
                    memory > xpl
                    seq > @
                      (((unsupported)).apply)
                        xpl.write (((unsupported)).apply ((xdict)) ("Doodah") ((((unsupported)).apply ("A") ("B") (12) (32.5) ((((unsupported)).apply (1) (2) (3))))) (0.5) (728) (((((unsupported)).apply (2) (63)).sub 44)) (((((unsupported)).apply (2) (63)).sub 44)) ((5.neg)) (((((unsupported)).apply).neg)) ((((unsupported)).apply ((xdict)) ("<hello & 'hi' there!>") ("Mxe4ssig, Maxdf") (TRUE) (FALSE) ((((unsupported)).apply ((xdict)) (17) (32.5) ((((unsupported)).apply (1) (2) ("text"))))))) ("<binary gunk>") (("<lots of binary gunk>0123".mul 10)) ((((unsupported)).apply (("<lots of binary gunk>0123".mul 10)))) (((((xdatetime).xdatetime)).apply (2004) (10) (26) (10) (33) (33))) ((((xdict)).apply)) ((((xlist)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("xc5benraa"))) ("That was a unicode key."))
                        (((unsupported)).apply ((xpl)))
                xtest_create.write
                  [xself]
                    memory > xpl
                    seq > @
                      seq
                        xpl.write ((((xself).x_create)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpl)) ("aString"))) ("Doodah"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpl)) ("aDict"))) ("aFalseValue"))) (FALSE))
                xtest_io.write
                  [xself]
                    memory > xpl2
                    memory > xpl
                    seq > @
                      seq
                        xpl.write ((((xself).x_create)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xfp)))
                          bogusForceDataize.write ((((xplistlib).xdump)).apply ((xpl)) ((xfp)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("rb"))) ((xfp)))
                          xpl2.write ((((xplistlib).xload)).apply ((xfp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) (((xplistlib).xdump)) ((xpl)) ("filename"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) (((xplistlib).xload)) ("filename"))
                xtest_invalid_type.write
                  [xself]
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ((((xobject)).apply)))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                xtest_invalid_uid.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xUID)).apply ("not an int"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xUID)).apply ((((unsupported)).apply (2) (64))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xUID)).apply ((19.neg)))
                xtest_int.write
                  [xself]
                    memory > xpl2
                    memory > xdata2
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((xpl)) ((((unsupported)).apply (0) (((((unsupported)).apply (2) (8)).sub 1)) ((((unsupported)).apply (2) (8))) (((((unsupported)).apply (2) (16)).sub 1)) ((((unsupported)).apply (2) (16))) (((((unsupported)).apply (2) (32)).sub 1)) ((((unsupported)).apply (2) (32))) (((((unsupported)).apply (2) (63)).sub 1)) (((((unsupported)).apply (2) (64)).sub 1)) (1) (((((unsupported)).apply (2) (63)).neg)))))
                          (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpl)) ((xfmt)))))
                              seq
                                xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                                xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpl2)) ((xint)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl)) ((xpl2)))
                                xdata2.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl2)) ((xfmt)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xdata2)))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((xpl)) ((((unsupported)).apply (((((unsupported)).apply (2) (64)).sub 1)) (((((unsupported)).apply (2) (127)).sub 1)) (((((unsupported)).apply (2) (64)).neg)) (((((unsupported)).apply (2) (127)).neg)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpl)) ((xfmt)))))
                              (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                xtest_bytearray.write
                  [xself]
                    memory > xpl2
                    memory > xdata2
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xpl)) ((((unsupported)).apply ("<binary gunk>") (("<lots of binary gunk>0123".mul 10)))))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpl)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((((xbytearray)).apply ((xpl)))) ((xfmt)))
                              xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpl2)) ((xbytes)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((xpl)))
                              xdata2.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl2)) ((xfmt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xdata2)))
                xtest_bytes.write
                  [xself]
                    memory > xpl2
                    memory > xdata2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write ((((xself).x_create)).apply)
                        xdata.write ((((xplistlib).xdumps)).apply ((xpl)))
                        xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                        xdata2.write ((((xplistlib).xdumps)).apply ((xpl2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xdata2)))
                xtest_indentation_array.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("test") ("aaaaaa"))))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply (((((xplistlib).xdumps)).apply ((xdata)))))) ((xdata)))
                xtest_indentation_dict.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ("1") ((((unsupported)).apply ("2") ((((unsupported)).apply ("3") ((((unsupported)).apply ("4") ((((unsupported)).apply ("5") ((((unsupported)).apply ("6") ((((unsupported)).apply ("7") ((((unsupported)).apply ("8") ((((unsupported)).apply ("9") ("aaaaaa"))))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply (((((xplistlib).xdumps)).apply ((xdata)))))) ((xdata)))
                xtest_indentation_dict_mix.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ("1") ((((unsupported)).apply ("2") ((((unsupported)).apply ((((unsupported)).apply ("3") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("test") ("aaaaaa"))))))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply (((((xplistlib).xdumps)).apply ((xdata)))))) ((xdata)))
                xtest_uid.write
                  [xself]
                    memory > xdict_data
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xUID)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xdata)) (((xplistlib).xFMT_BINARY)))))) ((xdata)))
                        xdict_data.write (((unsupported)).apply ("uid0") ((((xUID)).apply (0))) ("uid2") ((((xUID)).apply (2))) ("uid8") ((((xUID)).apply ((((unsupported)).apply (2) (8))))) ("uid16") ((((xUID)).apply ((((unsupported)).apply (2) (16))))) ("uid32") ((((xUID)).apply ((((unsupported)).apply (2) (32))))) ("uid63") ((((xUID)).apply ((((unsupported)).apply (2) (63))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xdict_data)) (((xplistlib).xFMT_BINARY)))))) ((xdict_data)))
                xtest_uid_data.write
                  [xself]
                    memory > xuid
                    seq > @
                      seq
                        xuid.write (((xUID)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuid).xdata)) (1))
                xtest_uid_eq.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xUID)).apply (1))) ((((xUID)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xUID)).apply (1))) ((((xUID)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xUID)).apply (1))) ("not uid"))
                xtest_uid_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xUID)).apply (1))))) ((((xhash)).apply ((((xUID)).apply (1))))))
                xtest_uid_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xUID)).apply (1))))) ("UID(1)"))
                xtest_uid_index.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xindex)).apply ((((xUID)).apply (1))))) (1))
                xtest_uid_pickle.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).sub 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpickle).xloads)).apply ((((unsupported)).apply (((xpickle).xdumps)) ((((xUID)).apply (19))) ((xproto)))))) ((((xUID)).apply (19))))
                xtest_uid_copy.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy).xcopy)).apply ((((xUID)).apply (1))))) ((((xUID)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy).xdeepcopy)).apply ((((xUID)).apply (1))))) ((((xUID)).apply (1))))
                xtest_appleformatting.write
                  [xself]
                    memory > xdata
                    memory > xpl
                    seq > @
                      (((unsupported)).apply ((xuse_builtin_types)) ((((unsupported)).apply (TRUE) (FALSE))))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)) ((xuse_builtin_types)))))
                            seq
                              xpl.write (((unsupported)).apply (((xplistlib).xloads)) ((((unsupported)).apply ((xTESTDATA)) ((xfmt)))) ((xuse_builtin_types)))
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((((unsupported)).apply ((xTESTDATA)) ((xfmt)))) ("generated data was not identical to Apple's output"))
                xtest_appleformattingfromliteral.write
                  [xself]
                    memory > xpl2
                    memory > xpl
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xpl.write (((unsupported)).apply (((xself).x_create)) ((xfmt)))
                              xpl2.write (((unsupported)).apply (((xplistlib).xloads)) ((((unsupported)).apply ((xTESTDATA)) ((xfmt)))) ((xfmt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))) ("generated data was not identical to Apple's output"))
                              xpl2.write ((((xplistlib).xloads)).apply ((((unsupported)).apply ((xTESTDATA)) ((xfmt)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))) ("generated data was not identical to Apple's output"))
                xtest_bytesio.write
                  [xself]
                    memory > xpl2
                    memory > xb
                    memory > xpl
                    seq > @
                      (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                          seq
                            xb.write (((xBytesIO)).apply)
                            xpl.write (((unsupported)).apply (((xself).x_create)) ((xfmt)))
                            (((unsupported)).apply (((xplistlib).xdump)) ((xpl)) ((xb)) ((xfmt)))
                            xpl2.write (((unsupported)).apply (((xplistlib).xload)) ((((xBytesIO)).apply (((((xb).xgetvalue)).apply)))) ((xfmt)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                            xpl2.write ((((xplistlib).xload)).apply ((((xBytesIO)).apply (((((xb).xgetvalue)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                xtest_keysort_bytesio.write
                  [xself]
                    memory > xpl2
                    memory > xb
                    memory > xpl
                    seq > @
                      seq
                        xpl.write ((((xcollections).xOrderedDict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("b"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("a"))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("c"))) (3))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((xsort_keys)) ((((unsupported)).apply (FALSE) (TRUE))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)) ((xsort_keys)))))
                              seq
                                xb.write (((xBytesIO)).apply)
                                (((unsupported)).apply (((xplistlib).xdump)) ((xpl)) ((xb)) ((xfmt)) ((xsort_keys)))
                                xpl2.write (((unsupported)).apply (((xplistlib).xload)) ((((xBytesIO)).apply (((((xb).xgetvalue)).apply)))) (((xcollections).xOrderedDict)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                                (xsort_keys).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpl2).xkeys)).apply)))) ((((unsupported)).apply ("a") ("b") ("c"))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpl2).xkeys)).apply)))) ((((unsupported)).apply ("b") ("a") ("c"))))
                xtest_keysort.write
                  [xself]
                    memory > xpl2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write ((((xcollections).xOrderedDict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("b"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("a"))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpl)) ("c"))) (3))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((xsort_keys)) ((((unsupported)).apply (FALSE) (TRUE))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)) ((xsort_keys)))))
                              seq
                                xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)) ((xsort_keys)))
                                xpl2.write (((unsupported)).apply (((xplistlib).xloads)) ((xdata)) (((xcollections).xOrderedDict)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                                (xsort_keys).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpl2).xkeys)).apply)))) ((((unsupported)).apply ("a") ("b") ("c"))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpl2).xkeys)).apply)))) ((((unsupported)).apply ("b") ("a") ("c"))))
                xtest_keys_no_string.write
                  [xself]
                    memory > xb
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply (42) ("aNumber"))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              xb.write (((xBytesIO)).apply)
                              (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xplistlib).xdump)) ((xpl)) ((xb)) ((xfmt)))
                xtest_skipkeys.write
                  [xself]
                    memory > xpl2
                    memory > xfp
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply (42) ("aNumber") ("snake") ("aWord"))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)) (TRUE) (FALSE))
                              xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ("snake") ("aWord"))))
                              xfp.write (((xBytesIO)).apply)
                              (((unsupported)).apply (((xplistlib).xdump)) ((xpl)) ((xfp)) ((xfmt)) (TRUE) (FALSE))
                              xdata.write ((((xfp).xgetvalue)).apply)
                              xpl2.write ((((xplistlib).xloads)).apply (((((xfp).xgetvalue)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ("snake") ("aWord"))))
                xtest_tuple_members.write
                  [xself]
                    memory > xpl2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ("first") ((((unsupported)).apply (1) (2))) ("second") ((((unsupported)).apply (1) (2))) ("third") ((((unsupported)).apply (3) (4))))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ("first") ((((unsupported)).apply (1) (2))) ("second") ((((unsupported)).apply (1) (2))) ("third") ((((unsupported)).apply (3) (4))))))
                              ((xfmt).neq ((xplistlib).xFMT_BINARY)).if
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xpl2)) ("first"))) ((((unsupported)).apply ((xpl2)) ("second"))))
                xtest_list_members.write
                  [xself]
                    memory > xpl2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ("first") ((((unsupported)).apply (1) (2))) ("second") ((((unsupported)).apply (1) (2))) ("third") ((((unsupported)).apply (3) (4))))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ("first") ((((unsupported)).apply (1) (2))) ("second") ((((unsupported)).apply (1) (2))) ("third") ((((unsupported)).apply (3) (4))))))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xpl2)) ("first"))) ((((unsupported)).apply ((xpl2)) ("second"))))
                xtest_dict_members.write
                  [xself]
                    memory > xpl2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ("first") ((((unsupported)).apply ("a") (1))) ("second") ((((unsupported)).apply ("a") (1))) ("third") ((((unsupported)).apply ("b") (2))))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ("first") ((((unsupported)).apply ("a") (1))) ("second") ((((unsupported)).apply ("a") (1))) ("third") ((((unsupported)).apply ("b") (2))))))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xpl2)) ("first"))) ((((unsupported)).apply ((xpl2)) ("second"))))
                xtest_controlcharacters.write
                  [xself]
                    memory > xtestString
                    memory > xc
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (128))))
                        seq
                          xc.write (((xchr)).apply ((xi)))
                          xtestString.write ("string containing %s".mod (xc))
                          (((xi).geq 32).or (((unsupported)).apply ((xc)) ("rnt"))).if
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xtestString)) (((xplistlib).xFMT_XML)))
                              ((xc).neq "r").if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((xdata)))) ((xtestString)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              (((unsupported)).apply (((xplistlib).xdumps)) ((xtestString)) (((xplistlib).xFMT_XML)))
                          (((unsupported)).apply (((xplistlib).xdumps)) ((xtestString)) (((xplistlib).xFMT_BINARY)))
                xtest_non_bmp_characters.write
                  [xself]
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ("python") ("U0001f40d"))
                        (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xpl)) ((xfmt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((xdata)))) ((xpl)))
                xtest_lone_surrogates.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnicodeEncodeError)))))
                              (((unsupported)).apply (((xplistlib).xdumps)) ("ud8ff") ((xfmt)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnicodeEncodeError)))))
                              (((unsupported)).apply (((xplistlib).xdumps)) ("udcff") ((xfmt)))
                xtest_nondictroot.write
                  [xself]
                    memory > xresult1
                    memory > xresult2
                    memory > xtest1
                    memory > xtest2
                    seq > @
                      (((unsupported)).apply ((xfmt)) ((xALL_FORMATS)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                          seq
                            xtest1.write "abc"
                            xtest2.write (((unsupported)).apply (1) (2) (3) ("abc"))
                            xresult1.write ((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xtest1)) ((xfmt)))))
                            xresult2.write ((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xtest2)) ((xfmt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest1)) ((xresult1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest2)) ((xresult2)))
                xtest_invalidarray.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xi)) ((((unsupported)).apply ("<key>key inside an array</key>") ("<key>key inside an array2</key><real>3</real>") ("<true/><key>key inside an array3</key>"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xplistlib).xloads)) ((((("<plist><array>%s</array></plist>".mod (xi)).xencode)).apply)))
                xtest_invaliddict.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xi)) ((((unsupported)).apply ("<key><true/>k</key><string>compound key</string>") ("<key>single key</key>") ("<string>missing key</string>") ("<key>k1</key><string>v1</string><real>5.3</real><key>k1</key><key>k2</key><string>double key</string>"))))
                        seq
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xplistlib).xloads)) ((((("<plist><dict>%s</dict></plist>".mod (xi)).xencode)).apply)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xplistlib).xloads)) ((((("<plist><array><dict>%s</dict></array></plist>".mod (xi)).xencode)).apply)))
                xtest_invalidinteger.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xplistlib).xloads)) ("<plist><integer>not integer</integer></plist>"))
                xtest_invalidreal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xplistlib).xloads)) ("<plist><integer>not real</integer></plist>"))
                xtest_integer_notations.write
                  [xself]
                    memory > xvalue
                    memory > xpl
                    seq > @
                      seq
                        xpl.write "<plist><integer>456</integer></plist>"
                        xvalue.write ((((xplistlib).xloads)).apply ((xpl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) (456))
                        xpl.write "<plist><integer>0xa</integer></plist>"
                        xvalue.write ((((xplistlib).xloads)).apply ((xpl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) (10))
                        xpl.write "<plist><integer>0123</integer></plist>"
                        xvalue.write ((((xplistlib).xloads)).apply ((xpl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) (123))
                xtest_xml_encodings.write
                  [xself]
                    memory > xpl2
                    memory > xbase
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xbase.write (((unsupported)).apply ((xTESTDATA)) (((xplistlib).xFMT_XML)))
                        (((unsupported)).apply ((((unsupported)).apply ((xxml_encoding)) ((xencoding)) ((xbom)))) ((((unsupported)).apply ((((unsupported)).apply ("utf-8") ("utf-8") (((xcodecs).xBOM_UTF8)))) ((((unsupported)).apply ("utf-16") ("utf-16-le") (((xcodecs).xBOM_UTF16_LE)))) ((((unsupported)).apply ("utf-16") ("utf-16-be") (((xcodecs).xBOM_UTF16_BE)))))))
                          seq
                            xpl.write (((unsupported)).apply (((xself).x_create)) (((xplistlib).xFMT_XML)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xencoding)))))
                              seq
                                xdata.write ((((xbase).xreplace)).apply ("UTF-8") ((xxml_encoding)))
                                xdata.write ((xbom).sub (((((((xdata).xdecode)).apply ("utf-8")).xencode)).apply ((xencoding))))
                                xpl2.write ((((xplistlib).xloads)).apply ((xdata)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xpl)))) ((((xdict)).apply ((xpl2)))))
                xtest_dump_invalid_format.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        (((unsupported)).apply (((xplistlib).xdumps)) ((((unsupported)).apply)) ("blah"))
                xtest_load_invalid_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply (((xplistlib).xInvalidFileException)))))
                        bogusForceDataize.write ((((xplistlib).xloads)).apply ("these are not plist file contents"))
                xtest_modified_uid_negative.write
                  [xself]
                    memory > xneg_uid
                    seq > @
                      seq
                        xneg_uid.write (((xUID)).apply (1))
                        (((unsupported)).apply (((xneg_uid).xdata)) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xplistlib).xdumps)) ((xneg_uid)) (((xplistlib).xFMT_BINARY)))
                xtest_modified_uid_huge.write
                  [xself]
                    memory > xhuge_uid
                    seq > @
                      seq
                        xhuge_uid.write (((xUID)).apply (1))
                        (((unsupported)).apply (((xhuge_uid).xdata)) ((((unsupported)).apply (2) (64))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOverflowError)))))
                          (((unsupported)).apply (((xplistlib).xdumps)) ((xhuge_uid)) (((xplistlib).xFMT_BINARY)))
                xtest_xml_plist_with_entity_decl.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xplistlib).xInvalidFileException)) ("XML entity declarations are not supported"))))
                        (((unsupported)).apply (((xplistlib).xloads)) ((xXML_PLIST_WITH_ENTITY)) (((xplistlib).xFMT_XML)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xdecode.write
                  [xoffset_size xref_size]
                    memory > xoffsets
                    memory > xoffset
                    memory > xdata
                    memory > xtail
                    seq > @
                      (((unsupported)).apply)
                        xdata.write (((unsupported)).apply ("bplist00"))
                        xoffset.write 8
                        xoffsets.write (((unsupported)).apply)
                        (((unsupported)).apply ((xx)) ((xobjects)))
                          seq
                            bogusForceDataize.write ((((xoffsets).xappend)).apply (((((xoffset).xto_bytes)).apply ((xoffset_size)) ("big"))))
                            bogusForceDataize.write ((((xdata).xappend)).apply ((xx)))
                            (((unsupported)).apply ((xoffset)) ((((xlen)).apply ((xx)))))
                        xtail.write ((((xstruct).xpack)).apply (">6xBBQQQ") ((xoffset_size)) ((xref_size)) ((((xlen)).apply ((xobjects)))) (0) ((xoffset)))
                        bogusForceDataize.write ((((xdata).xextend)).apply ((xoffsets)))
                        bogusForceDataize.write ((((xdata).xappend)).apply ((xtail)))
                        (((unsupported)).apply ((((unsupported)).apply (((xplistlib).xloads)) (((("".xjoin)).apply ((xdata)))) (((xplistlib).xFMT_BINARY)))))
                xtest_nonstandard_refs_size.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "bplist00xd1x00x00x01x00x00x02QaQbx00x00x08x00x00x0fx00x00x11x00x00x00x00x00x00x03x03x00x00x00x00x00x00x00x03x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x13"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((xdata)))) ((((unsupported)).apply ("a") ("b"))))
                xtest_dump_duplicates.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xx)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) (TRUE) (12345) (123.45) ("abcde") ("абвгд") ("abcde") (((((xdatetime).xdatetime)).apply (2004) (10) (26) (10) (33) (33))) (((((xplistlib).xData)).apply ("abcde"))) ((((xbytearray)).apply ("abcde"))) ((((unsupported)).apply (12) (345))) ((((unsupported)).apply (12) (345))) ((((unsupported)).apply ("12") (345))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)))))
                          seq
                            xdata.write (((unsupported)).apply (((xplistlib).xdumps)) (((((unsupported)).apply ((xx))).mul 1000)) (((xplistlib).xFMT_BINARY)))
                            bogusForceDataize.write ((((xself).xassertLess)).apply ((((xlen)).apply ((xdata)))) (1100) ((((xrepr)).apply ((xdata)))))
                xtest_identity.write
                  [xself]
                    memory > xx
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xx)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) (TRUE) (12345) (123.45) ("abcde") ("abcde") (((((xdatetime).xdatetime)).apply (2004) (10) (26) (10) (33) (33))) (((((xplistlib).xData)).apply ("abcde"))) ((((xbytearray)).apply ("abcde"))) ((((unsupported)).apply (12) (345))) ((((unsupported)).apply (12) (345))) ((((unsupported)).apply ("12") (345))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)))))
                          seq
                            xdata.write (((unsupported)).apply (((xplistlib).xdumps)) (((((unsupported)).apply ((xx))).mul 2)) (((xplistlib).xFMT_BINARY)))
                            (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xplistlib).xloads)).apply ((xdata)))))
                            (((xisinstance)).apply ((xx)) ((xtuple))).if
                              xx.write (((xlist)).apply ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                xtest_cycles.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xa).xappend)).apply ((xa)))
                        xb.write ((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xa)) (((xplistlib).xFMT_BINARY)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xb)) (0))) ((xb)))
                        xa.write (((unsupported)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((((unsupported)).apply ((xa)) (0)).xappend)).apply ((xa)))
                        xb.write ((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xa)) (((xplistlib).xFMT_BINARY)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) (0))) ((xb)))
                        xa.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("x"))) ((xa)))
                        xb.write ((((xplistlib).xloads)).apply ((((unsupported)).apply (((xplistlib).xdumps)) ((xa)) (((xplistlib).xFMT_BINARY)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xb)) ("x"))) ((xb)))
                xtest_deep_nesting.write
                  [xself]
                    memory > xresult
                    memory > xchunks
                    seq > @
                      (((unsupported)).apply ((xN)) ((((unsupported)).apply (300) (100000))))
                        seq
                          xchunks.write (((unsupported)).apply (("xa1".sub (((((xi).sub 1).xto_bytes)).apply (4) ("big")))) ((xi)) ((((xrange)).apply ((xN)))))
                          (((unsupported)).apply ((xRecursionError)))
                            xresult.write (((unsupported)).apply (((xself).xdecode)) ((((unsupported)).apply ((xchunks)))) ("x54seed") (4) (4))
                            seq
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xresult)) ((xlist)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) (1))
                                  xresult.write (((unsupported)).apply ((xresult)) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("seed"))
                xtest_large_timestamp.write
                  [xself]
                    memory > xd
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xts)) ((((unsupported)).apply ((((((unsupported)).apply (2) (31)).neg).sub 1)) ((((unsupported)).apply (2) (31))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xts)))))
                          seq
                            xd.write ((((((xdatetime).xdatetime).xutcfromtimestamp)).apply (0)).sub (((unsupported)).apply (((xdatetime).xtimedelta)) ((xts))))
                            xdata.write (((unsupported)).apply (((xplistlib).xdumps)) ((xd)) (((xplistlib).xFMT_BINARY)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((xdata)))) ((xd)))
                xtest_load_singletons.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xself).xdecode)).apply ("x00"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xself).xdecode)).apply ("x08"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xself).xdecode)).apply ("x09"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x0f"))) (""))
                xtest_load_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x10x00"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x10xfe"))) (254))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x11xfexdc"))) (65244))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x12xfexdcxbax98"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x13x01x23x45x67x89xabxcdxef"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xdecode)).apply ("x13xfexdcxbax98x76x54x32x10"))) (((((unsupported)).apply).neg)))
                xtest_unsupported.write
                  [xself]
                    memory > xunsupported
                    seq > @
                      seq
                        xunsupported.write (((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (1) (8))))) ((((unsupported)).apply ((((xrange)).apply (10) (15))))) (32) (33) ((((unsupported)).apply ((((xrange)).apply (36) (51))))) ((((unsupported)).apply ((((xrange)).apply (52) (64))))))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (112) (144) (176) (192) (224) (240))))
                          bogusForceDataize.write ((((xunsupported).xextend)).apply ((((unsupported)).apply (((xi).sub (xj))) ((xj)) ((((xrange)).apply (16))))))
                        (((unsupported)).apply ((xtoken)) ((xunsupported)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ("token {token:02x}"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xplistlib).xInvalidFileException)))))
                              bogusForceDataize.write ((((xself).xdecode)).apply (((((xbytes)).apply ((((unsupported)).apply ((xtoken))))).sub ("x00".mul 16))))
                xtest_invalid_binary.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xdata)))) ((xINVALID_BINARY_PLISTS)))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((xname)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply (((xplistlib).xInvalidFileException)))))
                            (((unsupported)).apply (((xplistlib).xloads)) (("bplist00".sub (xdata))) (((xplistlib).xFMT_BINARY)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_io_deprecated.write
                  [xself]
                    memory > xpl2
                    memory > xpl_out
                    memory > xpl_in
                    seq > @
                      seq
                        xpl_in.write (((unsupported)).apply ("key") (42) ("sub") ((((unsupported)).apply ("key") (9) ("alt") ("value") ("data") ("buffer"))))
                        xpl_out.write (((unsupported)).apply ("key") (42) ("sub") ((((unsupported)).apply ("key") (9) ("alt") ("value") ("data") (((((xplistlib).xData)).apply ("buffer"))))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xplistlib).xwritePlist)).apply ((xpl_in)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xpl2.write ((((xplistlib).xreadPlist)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl_out)) ((xpl2)))
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xfp)))
                          (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                            bogusForceDataize.write ((((xplistlib).xwritePlist)).apply ((xpl_in)) ((xfp)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("rb"))) ((xfp)))
                          (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                            xpl2.write ((((xplistlib).xreadPlist)).apply ((xfp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl_out)) ((xpl2)))
                xtest_bytes_deprecated.write
                  [xself]
                    memory > xpl2
                    memory > xdata2
                    memory > xdata
                    memory > xpl
                    seq > @
                      seq
                        xpl.write (((unsupported)).apply ("key") (42) ("sub") ((((unsupported)).apply ("key") (9) ("alt") ("value") ("data") ("buffer"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xdata.write ((((xplistlib).xwritePlistToBytes)).apply ((xpl)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xpl2.write ((((xplistlib).xreadPlistFromBytes)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpl2)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpl2)) ((((unsupported)).apply ((xdict)) (42) ((((unsupported)).apply ((xdict)) (9) ("value") (((((xplistlib).xData)).apply ("buffer"))))))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xdata2.write ((((xplistlib).xwritePlistToBytes)).apply ((xpl2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xdata2)))
                xtest_dataobject_deprecated.write
                  [xself]
                    memory > xcur
                    memory > xbuf
                    memory > xin_data
                    memory > xout_data
                    seq > @
                      seq
                        xin_data.write (((unsupported)).apply ("key") (((((xplistlib).xData)).apply ("hello"))))
                        xout_data.write (((unsupported)).apply ("key") ("hello"))
                        xbuf.write ((((xplistlib).xdumps)).apply ((xin_data)))
                        xcur.write ((((xplistlib).xloads)).apply ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xout_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xin_data)))
                        xcur.write (((unsupported)).apply (((xplistlib).xloads)) ((xbuf)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xout_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xin_data)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xcur.write ((((xplistlib).xreadPlistFromBytes)).apply ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xout_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xin_data)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_keyed_archive_data.write
                [xself]
                  memory > xdata
                  seq > @
                    seq
                      xdata.write (((unsupported)).apply ("$version") (100000) ("$objects") ((((unsupported)).apply ("$null") ((((unsupported)).apply ("pytype") (1) ("$class") ((((xUID)).apply (2))) ("NS.string") ("KeyArchive UID Test"))) ((((unsupported)).apply ("$classname") ("OC_BuiltinPythonUnicode") ("$classes") ((((unsupported)).apply ("OC_BuiltinPythonUnicode") ("OC_PythonUnicode") ("NSString") ("NSObject"))) ("$classhints") ((((unsupported)).apply ("OC_PythonString") ("NSString"))))))) ("$archiver") ("NSKeyedArchiver") ("$top") ((((unsupported)).apply ("root") ((((xUID)).apply (1))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplistlib).xloads)).apply ((((unsupported)).apply ((xTESTDATA)) ("KEYED_ARCHIVE"))))) ((xdata)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("PlistFormat") ("PLISTHEADER"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xplistlib)) ((xblacklist)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)