memory > xthreading
memory > xhttp
memory > xClassWithAnnotation
memory > xfunc
memory > xre
memory > xx
memory > xsys
memory > xy
memory > xobject
memory > xDocXMLRPCServer
memory > xunittest
memory > xTestClass
memory > x__name__
[] > test_docxmlrpc
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_valid_get_response
        memory > xtest_system_methods
        memory > xtest_annotations
        memory > xtest_invalid_get_response
        memory > xtest_lambda
        memory > xtest_server_title_escape
        memory > xmake_server
        memory > xtest_autolink_dotted_methods
        memory > xmake_request_and_skipIf
        memory > xtearDown
        memory > xtest_autolinking
        memory > xsetUp
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xmake_request_and_skipIf.write
              [xcondition xreason]
                memory > xdecorator
                seq > @
                  seq
                    ((xcondition).not).if
                      (((unsupported)).apply ((((unsupported)).apply ((xfunc)))))
                    xdecorator.write
                      [xfunc]
                        memory > xmake_request_and_skip
                        seq > @
                          seq
                            xmake_request_and_skip.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                                    bogusForceDataize.write (((((xself).xclient).xgetresponse)).apply)
                                    (((unsupported)).apply (((((xunittest).xSkipTest)).apply ((xreason)))))
                            (((unsupported)).apply ((xmake_request_and_skip)))
                    (((unsupported)).apply ((xdecorator)))
            xmake_server.write
              []
                memory > xmethod_annotation
                memory > xtest_method
                memory > xannotation
                memory > xserv
                memory > xadd
                seq > @
                  seq
                    xserv.write (((unsupported)).apply ((xDocXMLRPCServer)) ((((unsupported)).apply ("localhost") (0))) (FALSE))
                    (((unsupported)).apply)
                      seq
                        bogusForceDataize.write ((((xserv).xset_server_title)).apply ("DocXMLRPCServer Test Documentation"))
                        bogusForceDataize.write ((((xserv).xset_server_name)).apply ("DocXMLRPCServer Test Docs"))
                        bogusForceDataize.write ((((xserv).xset_server_documentation)).apply ("This is an XML-RPC server's documentation, but the server can be used by POSTing to /RPC2. Try self.add, too."))
                        (((unsupported)).apply ((xobject)))
                          xtest_method.write
                            [xself xarg]
                              seq > @
                                seq
                                  unsupported
                                  (((unsupported)).apply (((xself).xarg)) ((xarg)))
                        bogusForceDataize.write ((((xserv).xregister_introspection_functions)).apply)
                        bogusForceDataize.write ((((xserv).xregister_instance)).apply ((((xTestClass)).apply)))
                        xadd.write
                          [xx xy]
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply (((xx).add (xy))))
                        xannotation.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply ((xx)))
                        (((unsupported)).apply)
                          xmethod_annotation.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((((xx).xdecode)).apply)))
                        bogusForceDataize.write ((((xserv).xregister_function)).apply ((xadd)))
                        bogusForceDataize.write ((((xserv).xregister_function)).apply ((((unsupported)).apply (((xx).sub (xy))))))
                        bogusForceDataize.write ((((xserv).xregister_function)).apply ((xannotation)))
                        bogusForceDataize.write ((((xserv).xregister_instance)).apply ((((xClassWithAnnotation)).apply)))
                        (((unsupported)).apply ((xserv)))
                      seq
                        bogusForceDataize.write ((((xserv).xserver_close)).apply)
                        (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xPORT
                    seq > @
                      seq
                        (((unsupported)).apply (((xDocXMLRPCServer).x_send_traceback_header)) (TRUE))
                        (((unsupported)).apply (((xself).xserv)) ((((xmake_server)).apply)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((((xself).xserv).xserve_forever)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        xPORT.write (((unsupported)).apply ((((xself).xserv).xserver_address)) (1))
                        (((unsupported)).apply (((xself).xclient)) ((((((xhttp).xclient).xHTTPConnection)).apply (("localhost:%d".mod (xPORT))))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xclose)).apply)
                        (((unsupported)).apply (((xDocXMLRPCServer).x_send_traceback_header)) (FALSE))
                        bogusForceDataize.write (((((xself).xserv).xshutdown)).apply)
                        bogusForceDataize.write (((((xself).xthread).xjoin)).apply)
                        bogusForceDataize.write (((((xself).xserv).xserver_close)).apply)
                xtest_valid_get_response.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write (((((xself).xclient).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("Content-type"))) ("text/html"))
                        bogusForceDataize.write ((((xresponse).xread)).apply)
                xtest_invalid_get_response.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/spam"))
                        xresponse.write (((((xself).xclient).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus)) (404))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("Content-type"))) ("text/plain"))
                        bogusForceDataize.write ((((xresponse).xread)).apply)
                xtest_lambda.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write (((((xself).xclient).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<dl><dt><a name=\"-&lt;lambda&gt;\"><strong>&lt;lambda&gt;</strong></a>(x, y)</dt></dl>") (((((xresponse).xread)).apply)))
                xtest_autolinking.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write ((((((((xself).xclient).xgetresponse)).apply).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<dl><dt><a name=\"-add\"><strong>add</strong></a>(x, y)</dt><dd><tt>Add&nbsp;two&nbsp;instances&nbsp;together.&nbsp;This&nbsp;follows&nbsp;<a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP008</a>,&nbsp;but&nbsp;has&nbsp;nothing<br>nto&nbsp;do&nbsp;with&nbsp;<a href=\"http://www.rfc-editor.org/rfc/rfc1952.txt\">RFC1952</a>.&nbsp;Case&nbsp;should&nbsp;matter:&nbsp;pEp008&nbsp;and&nbsp;rFC1952.&nbsp;&nbsp;Things<br>nthat&nbsp;start&nbsp;with&nbsp;http&nbsp;and&nbsp;ftp&nbsp;should&nbsp;be&nbsp;auto-linked,&nbsp;too:<br>n<a href=\"http://google.com\">http://google.com</a>.</tt></dd></dl>") ((xresponse)))
                xtest_system_methods.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write ((((((((xself).xclient).xgetresponse)).apply).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<dl><dt><a name=\"-system.methodHelp\"><strong>system.methodHelp</strong></a>(method_name)</dt><dd><tt><a href=\"#-system.methodHelp\">system.methodHelp</a>('add')&nbsp;=&gt;&nbsp;\"Adds&nbsp;two&nbsp;integers&nbsp;together\"<br>n&nbsp;<br>nReturns&nbsp;a&nbsp;string&nbsp;containing&nbsp;documentation&nbsp;for&nbsp;the&nbsp;specified&nbsp;method.</tt></dd></dl>n<dl><dt><a name=\"-system.methodSignature\"><strong>system.methodSignature</strong></a>(method_name)</dt><dd><tt><a href=\"#-system.methodSignature\">system.methodSignature</a>('add')&nbsp;=&gt;&nbsp;[double,&nbsp;int,&nbsp;int]<br>n&nbsp;<br>nReturns&nbsp;a&nbsp;list&nbsp;describing&nbsp;the&nbsp;signature&nbsp;of&nbsp;the&nbsp;method.&nbsp;In&nbsp;the<br>nabove&nbsp;example,&nbsp;the&nbsp;add&nbsp;method&nbsp;takes&nbsp;two&nbsp;integers&nbsp;as&nbsp;arguments<br>nand&nbsp;returns&nbsp;a&nbsp;double&nbsp;result.<br>n&nbsp;<br>nThis&nbsp;server&nbsp;does&nbsp;NOT&nbsp;support&nbsp;system.methodSignature.</tt></dd></dl>") ((xresponse)))
                xtest_autolink_dotted_methods.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write (((((xself).xclient).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Try&nbsp;self.<strong>add</strong>,&nbsp;too.") (((((xresponse).xread)).apply)))
                xtest_annotations.write
                  [xself]
                    memory > xresponse
                    memory > xdocstring
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xself).xclient).xrequest)).apply ("GET") ("/"))
                        xresponse.write (((((xself).xclient).xgetresponse)).apply)
                        xdocstring.write (((((xsys).xflags).xoptimize).geq 2).if "" "<dd><tt>Use&nbsp;function&nbsp;annotations.</tt></dd>")
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((("<dl><dt><a name=\"-annotation\"><strong>annotation</strong></a>(x: int)</dt>".add (xdocstring)).add "</dl>n<dl><dt><a name=\"-method_annotation\"><strong>method_annotation</strong></a>(x: bytes)</dt></dl>")) (((((xresponse).xread)).apply)))
                xtest_server_title_escape.write
                  [xself]
                    memory > xdocumentation
                    memory > xtitle
                    memory > xgenerated
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xset_server_title)).apply ("test_title<script>"))
                        bogusForceDataize.write (((((xself).xserv).xset_server_documentation)).apply ("test_documentation<script>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("test_title<script>") ((((xself).xserv).xserver_title)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("test_documentation<script>") ((((xself).xserv).xserver_documentation)))
                        xgenerated.write (((((xself).xserv).xgenerate_html_documentation)).apply)
                        xtitle.write (((((((xre).xsearch)).apply ("<title>(.+?)</title>") ((xgenerated))).xgroup)).apply)
                        xdocumentation.write (((((((xre).xsearch)).apply ("<p><tt>(.+?)</tt></p>") ((xgenerated))).xgroup)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<title>Python: test_title&lt;script&gt;</title>") ((xtitle)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p><tt>test_documentation&lt;script&gt;</tt></p>") ((xdocumentation)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)