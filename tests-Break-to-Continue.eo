memory > xvalue
memory > x_
memory > xKeyError
memory > xopen
memory > xi18n_patterns
memory > xlocale
memory > x__file__
memory > xapp_dir
memory > xgettext_lazy
memory > xContext
memory > xlang
memory > xnpgettext
memory > xI18nForm
memory > xforms
memory > xCompany
memory > xAppConfig
memory > xdatetime
memory > xSelectDateForm
memory > xexpected
memory > xpickle
memory > xlist
memory > xdecimal
memory > xsanitize_strftime_format
memory > xto_language
memory > xget_format
memory > xtrans_real
memory > xtranslation
memory > ximport_module
memory > xlocalize_input
memory > xto_locale
memory > xstr
memory > xget_language_bidi
memory > xnickname
memory > xreset_format_cache
memory > xTestCase
memory > xlanguage_code
memory > xtrans_null
memory > xngettext
memory > xrange
memory > xwatch_for_translation_changes
memory > xtempfile
memory > xcheck_for_language
memory > xpath
memory > xPath
memory > xtype
memory > xactivate
memory > xignore_warnings
memory > xsettings
memory > xint
memory > xre
memory > xtranslation_file_changed
memory > xAppModuleStub
memory > xLANG_INFO
memory > xgettext
memory > xpgettext
memory > xnpgettext_lazy
memory > xLocal
memory > xget_language_from_request
memory > xiter_format_modules
memory > xRequestFactory
memory > xround_away_from_one
memory > xsuper
memory > xRemovedInDjango50Warning
memory > xget_language_info
memory > xlocalize
memory > xformat_name
memory > xoverride_settings
memory > xsanitize_separators
memory > xtuple
memory > xmark_safe
memory > xtime_format
memory > xargs
memory > xOSError
memory > xlanguage
memory > xos
memory > xsideeffect_str
memory > xSafeString
memory > xLookupError
memory > xmock
memory > xTemplate
memory > xCompanyForm
memory > xdeactivate
memory > xget_language
memory > x_format_cache
memory > xlanguage_name
memory > xTestModel
memory > xngettext_lazy
memory > xkwargs
memory > xlen
memory > xSimpleTestCase
memory > xdate_format
memory > xResolutionOrderI18NTests
memory > xyear
memory > xkey
[] > tests
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_override_decorator
        memory > xtest_app_translation
        memory > xtest_check_for_language
        memory > xtest_get_language_from_path_null
        memory > xtest_iter_format_modules
        memory > xtest_locale_independent
        memory > xtest_format_arbitrary_settings
        memory > xtest_to_language
        memory > xtest_unknown_language_code
        memory > xtest_fallback_language_code
        memory > xtest_i18n_locale_paths
        memory > xtest_subsequent_code_fallback_language
        memory > xtest_i18n_local_locale
        memory > xpatch_formats
        memory > xtest_to_locale
        memory > xtest_round_away_from_one
        memory > xtest_language_bidi_null
        memory > xtest_false_like_locale_formats
        memory > xtest_i18n_patterns_returns_list
        memory > xtest_i18n_app_dirs
        memory > xtest_localized_input
        memory > xtest_admin_javascript_supported_input_formats
        memory > xtest_multiple_plurals_per_language
        memory > xtest_lazy_pickle
        memory > xtest_ngettext_lazy_bool
        memory > xtest_get_supported_language_variant_real
        memory > xtest_get_language_from_request_null
        memory > xtest_cache_resetting
        memory > xtest_ngettext_lazy_pickle
        memory > xtest_get_supported_language_variant_null
        memory > xtest_localized_language_info
        memory > xtest_page_with_dash
        memory > xtest_parse_language_cookie
        memory > xrf
        memory > xtest_get_language_from_path_real
        memory > xtest_lazy
        memory > xtest_safestr
        memory > xtest_non_django_language
        memory > xtest_language_bidi
        memory > xtest_parse_literal_http_header
        memory > xhere
        memory > xtest_specific_language_codes
        memory > xtest_parse_spec_http_header
        memory > xextended_locale_paths
        memory > xtest_plural
        memory > xtest_pgettext
        memory > xtest_check_for_language_null
        memory > xtest_resets_cache_with_mo_files
        memory > xsetUp
        memory > xtest_override_exit
        memory > xtest_ngettext_lazy
        memory > xtest_sub_locales
        memory > xgettext_module
        memory > xtest_override
        memory > xtest_get_language_from_request
        memory > xtest_other_lang_with_prefix
        memory > xtest_plural_non_django_language
        memory > xtest_special_fallback_language
        memory > xtest_maclines
        memory > xtest_all_format_strings
        memory > xtest_django_fallback
        memory > xtest_get_format_modules_lang
        memory > xtest_localized_input_func
        memory > xtest_ngettext_lazy_format_style
        memory > xassertGettext
        memory > xtest_l10n_disabled
        memory > xtest_no_redirect_on_404
        memory > xtest_localized_as_text_as_hidden_input
        memory > xtest_i18n_enabled
        memory > xtest_locale_paths_translation
        memory > x__init__
        memory > xtest_sparse_territory_catalog
        memory > xtest_translation_loading
        memory > xtest_english_fallback
        memory > xnformat
        memory > xtest_sanitize_strftime_format
        memory > xtest_support_for_deprecated_chinese_language_codes
        memory > xtest_ignores_non_mo_files
        memory > xtest_bug14894_translation_activate_thread_safety
        memory > xtest_sanitize_separators
        memory > xtest_locale_paths_override_app_translation
        memory > xtest_i18n_disabled
        memory > xtest_plural_null
        memory > xtest_unprefixed_language_other_than_accept_language
        memory > xtest_iter_format_modules_stability
        memory > xtest_l10n_enabled
        memory > xtest_localized_off_numbers
        memory > xtest_i18n_app_dirs_ignore_django_apps
        memory > xtest_unknown_only_country_code
        memory > xtest_safe_status
        memory > xtest_sanitize_strftime_format_with_escaped_percent
        memory > xtest_empty_value
        memory > xtearDown
        memory > xtest_get_custom_format
        memory > xtest_streaming_response
        memory > xtest_lazy_objects
        memory > xtest_localize_templatetag_and_filter
        memory > xtest_unknown_language_code_and_country_code
        memory > xpatchGettextFind
        memory > xtest_default_lang_without_prefix
        memory > xtest_failure_finding_default_mo_files
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xhere.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xabspath)).apply ((x__file__)))))
            xextended_locale_paths.write (((xsettings).xLOCALE_PATHS).add (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xhere)) ("other") ("locale")))))
            (((unsupported)).apply)
              x__init__.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write (((((xself).x__dict__).xupdate)).apply ((xkwargs)))
            xpatch_formats.write
              [xlang]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xsettings).xitems)).apply)))
                      (((unsupported)).apply ((((unsupported)).apply ((x_format_cache)) ((((unsupported)).apply ((xkey)) ((xlang)))))) ((xvalue)))
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      bogusForceDataize.write (((xreset_format_cache)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_plural.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%(num)d year") ("%(num)d years") (0)).mod (((unsupported)).apply ("num") (0)))) ("0 année"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%(num)d year") ("%(num)d years") (2)).mod (((unsupported)).apply ("num") (2)))) ("2 années"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%(size)d byte") ("%(size)d bytes") (0)).mod (((unsupported)).apply ("size") (0)))) ("0 octet"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%(size)d byte") ("%(size)d bytes") (2)).mod (((unsupported)).apply ("size") (2)))) ("2 octets"))
                xtest_plural_null.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write ((xtrans_null).xngettext)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xg)).apply ("%(num)d year") ("%(num)d years") (0)).mod (((unsupported)).apply ("num") (0)))) ("0 years"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xg)).apply ("%(num)d year") ("%(num)d years") (1)).mod (((unsupported)).apply ("num") (1)))) ("1 year"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xg)).apply ("%(num)d year") ("%(num)d years") (2)).mod (((unsupported)).apply ("num") (2)))) ("2 years"))
                xtest_multiple_plurals_per_language.write
                  [xself]
                    memory > xfrench
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%d singular") ("%d plural") (0)).mod 0)) ("0 pluriel1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%d singular") ("%d plural") (1)).mod 1)) ("1 singulier"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xngettext)).apply ("%d singular") ("%d plural") (2)).mod 2)) ("2 pluriel2"))
                        xfrench.write ((((xtrans_real).xcatalog)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfrench).x_catalog)) ((((unsupported)).apply ("%d singular") (0))))) ("%d singulier"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfrench).x_catalog)) ((((unsupported)).apply ("%(num)d hour") (0))))) ("%(num)d heure"))
                xtest_override.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xactivate)).apply ("de"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((((xtranslation).xoverride)).apply ("pl"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("pl"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("de"))
                            (((unsupported)).apply (((((xtranslation).xoverride)).apply ("None: is there a None literal in the EO language?"))))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xget_language)).apply)))
                                (((unsupported)).apply (((((xtranslation).xoverride)).apply ("pl"))))
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xget_language)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("de"))
                          bogusForceDataize.write (((xdeactivate)).apply)
                xtest_override_decorator.write
                  [xself]
                    memory > xfunc_pl
                    memory > xfunc_none
                    seq > @
                      seq
                        xfunc_pl.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("pl"))
                        xfunc_none.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xget_language)).apply)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xactivate)).apply ("de"))
                            bogusForceDataize.write (((xfunc_pl)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("de"))
                            bogusForceDataize.write (((xfunc_none)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("de"))
                          bogusForceDataize.write (((xdeactivate)).apply)
                xtest_override_exit.write
                  [xself]
                    memory > xfunc_pl
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((xactivate)).apply ("fr"))
                        xfunc_pl.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xdeactivate)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xactivate)).apply ("en"))
                            bogusForceDataize.write (((xfunc_pl)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("en"))
                          bogusForceDataize.write (((xdeactivate)).apply)
                xtest_lazy_objects.write
                  [xself]
                    memory > xd
                    memory > xs4
                    memory > xs1
                    memory > xs
                    memory > xs2
                    memory > xs3
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xs.write (((xgettext_lazy)).apply ("Add %(name)s"))
                        xd.write (((unsupported)).apply ("name") ("Ringo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Add Ringo") (((xs).mod (xd))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Ringo hinzufxfcgen") (((xs).mod (xd))))
                            (((unsupported)).apply (((((xtranslation).xoverride)).apply ("pl"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dodaj Ringo") (((xs).mod (xd))))
                        xs1.write (((xgettext_lazy)).apply ("Add %(name)s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xs1)))
                        xs2.write (((xgettext_lazy)).apply ("Add %(name)s"))
                        xs3.write (((xgettext_lazy)).apply ("Add %(name)s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs2)) ((xs3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xs2)))
                        xs4.write (((xgettext_lazy)).apply ("Some other string"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xs)) ((xs4)))
                xtest_lazy_pickle.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    seq > @
                      seq
                        xs1.write (((xgettext_lazy)).apply ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xs1)))) ("test"))
                        xs2.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xs1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xs2)))) ("test"))
                xtest_ngettext_lazy.write
                  [xself]
                    memory > xsimple_with_format
                    memory > xcomplex_context_nonlazy
                    memory > xsimple_context_with_format
                    memory > xsimple_without_format
                    memory > xcomplex_deferred
                    memory > xcomplex_nonlazy
                    memory > xcomplex_context_deferred
                    seq > @
                      (((unsupported)).apply)
                        xsimple_with_format.write (((xngettext_lazy)).apply ("%d good result") ("%d good results"))
                        xsimple_context_with_format.write (((xnpgettext_lazy)).apply ("Exclamation") ("%d good result") ("%d good results"))
                        xsimple_without_format.write (((xngettext_lazy)).apply ("good result") ("good results"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_with_format).mod 1)) ("1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_with_format).mod 4)) ("4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_context_with_format).mod 1)) ("1 gutes Resultat!"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_context_with_format).mod 4)) ("4 guten Resultate!"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_without_format).mod 1)) ("gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsimple_without_format).mod 4)) ("guten Resultate"))
                        xcomplex_nonlazy.write (((xngettext_lazy)).apply ("Hi %(name)s, %(num)d good result") ("Hi %(name)s, %(num)d good results") (4))
                        xcomplex_deferred.write (((xngettext_lazy)).apply ("Hi %(name)s, %(num)d good result") ("Hi %(name)s, %(num)d good results") ("num"))
                        xcomplex_context_nonlazy.write (((xnpgettext_lazy)).apply ("Greeting") ("Hi %(name)s, %(num)d good result") ("Hi %(name)s, %(num)d good results") (4))
                        xcomplex_context_deferred.write (((xnpgettext_lazy)).apply ("Greeting") ("Hi %(name)s, %(num)d good result") ("Hi %(name)s, %(num)d good results") ("num"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_nonlazy).mod (((unsupported)).apply ("num") (4) ("name") ("Jim")))) ("Hallo Jim, 4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_deferred).mod (((unsupported)).apply ("name") ("Jim") ("num") (1)))) ("Hallo Jim, 1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_deferred).mod (((unsupported)).apply ("name") ("Jim") ("num") (5)))) ("Hallo Jim, 5 guten Resultate"))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Your dictionary lacks key"))))
                              unsupported
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_context_nonlazy).mod (((unsupported)).apply ("num") (4) ("name") ("Jim")))) ("Willkommen Jim, 4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_context_deferred).mod (((unsupported)).apply ("name") ("Jim") ("num") (1)))) ("Willkommen Jim, 1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcomplex_context_deferred).mod (((unsupported)).apply ("name") ("Jim") ("num") (5)))) ("Willkommen Jim, 5 guten Resultate"))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Your dictionary lacks key"))))
                              unsupported
                xtest_ngettext_lazy_format_style.write
                  [xself]
                    memory > xsimple_with_format
                    memory > xcomplex_context_nonlazy
                    memory > xsimple_context_with_format
                    memory > xcomplex_deferred
                    memory > xcomplex_nonlazy
                    memory > xcomplex_context_deferred
                    seq > @
                      (((unsupported)).apply)
                        xsimple_with_format.write (((xngettext_lazy)).apply ("{} good result") ("{} good results"))
                        xsimple_context_with_format.write (((xnpgettext_lazy)).apply ("Exclamation") ("{} good result") ("{} good results"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsimple_with_format).xformat)).apply (1))) ("1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsimple_with_format).xformat)).apply (4))) ("4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsimple_context_with_format).xformat)).apply (1))) ("1 gutes Resultat!"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsimple_context_with_format).xformat)).apply (4))) ("4 guten Resultate!"))
                        xcomplex_nonlazy.write (((xngettext_lazy)).apply ("Hi {name}, {num} good result") ("Hi {name}, {num} good results") (4))
                        xcomplex_deferred.write (((xngettext_lazy)).apply ("Hi {name}, {num} good result") ("Hi {name}, {num} good results") ("num"))
                        xcomplex_context_nonlazy.write (((xnpgettext_lazy)).apply ("Greeting") ("Hi {name}, {num} good result") ("Hi {name}, {num} good results") (4))
                        xcomplex_context_deferred.write (((xnpgettext_lazy)).apply ("Greeting") ("Hi {name}, {num} good result") ("Hi {name}, {num} good results") ("num"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_nonlazy).xformat)) (4) ("Jim"))) ("Hallo Jim, 4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_deferred).xformat)) ("Jim") (1))) ("Hallo Jim, 1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_deferred).xformat)) ("Jim") (5))) ("Hallo Jim, 5 guten Resultate"))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Your dictionary lacks key"))))
                              (((unsupported)).apply (((xcomplex_deferred).xformat)) ("Jim"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_context_nonlazy).xformat)) (4) ("Jim"))) ("Willkommen Jim, 4 guten Resultate"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_context_deferred).xformat)) ("Jim") (1))) ("Willkommen Jim, 1 gutes Resultat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcomplex_context_deferred).xformat)) ("Jim") (5))) ("Willkommen Jim, 5 guten Resultate"))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Your dictionary lacks key"))))
                              (((unsupported)).apply (((xcomplex_context_deferred).xformat)) ("Jim"))
                xtest_ngettext_lazy_bool.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xngettext_lazy)).apply ("%d good result") ("%d good results"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xngettext_lazy)).apply ("") (""))))
                xtest_ngettext_lazy_pickle.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    seq > @
                      seq
                        xs1.write (((xngettext_lazy)).apply ("%d good result") ("%d good results"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs1).mod 1)) ("1 good result"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs1).mod 8)) ("8 good results"))
                        xs2.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xs1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs2).mod 1)) ("1 good result"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs2).mod 8)) ("8 good results"))
                xtest_pgettext.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xtrans_real).x_active)) ((((xLocal)).apply)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpgettext)).apply ("unexisting") ("May"))) ("May"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpgettext)).apply ("month name") ("May"))) ("Mai"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpgettext)).apply ("verb") ("May"))) ("Kann"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnpgettext)).apply ("search") ("%d result") ("%d results") (4)).mod 4)) ("4 Resultate"))
                xtest_empty_value.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((((xgettext)).apply (""))))
                            xs.write (((xmark_safe)).apply (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xgettext)).apply ((xs)))))
                xtest_safe_status.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xtrans_real).x_active)) ((((xLocal)).apply)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        xs1.write (((xmark_safe)).apply ("Password"))
                        xs2.write (((xmark_safe)).apply ("May"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xgettext)).apply ((xs1)))))) ((xSafeString)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xpgettext)).apply ("month name") ((xs2)))))) ((xSafeString)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("aPassword") (((((xSafeString)).apply ("a")).add (xs1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Passworda") (((xs1).add (((xSafeString)).apply ("a")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Passworda") (((xs1).add (((xmark_safe)).apply ("a")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("aPassword") (((((xmark_safe)).apply ("a")).add (xs1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("as") (((((xmark_safe)).apply ("a")).add (((xmark_safe)).apply ("s")))))
                xtest_maclines.write
                  [xself]
                    memory > xca_translation
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xca_translation.write ((((xtrans_real).xtranslation)).apply ("ca"))
                        (((unsupported)).apply ((((unsupported)).apply (((xca_translation).x_catalog)) ("MacnEOFn"))) ("Catalan MacnEOFn"))
                        (((unsupported)).apply ((((unsupported)).apply (((xca_translation).x_catalog)) ("WinnEOFn"))) ("Catalan WinnEOFn"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("ca") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Catalan MacnEOFn") ((((xgettext)).apply ("MacrEOFr"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Catalan WinnEOFn") ((((xgettext)).apply ("WinrnEOFrn"))))
                xtest_to_locale.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("en") ("en"))) ((((unsupported)).apply ("EN") ("en"))) ((((unsupported)).apply ("en-us") ("en_US"))) ((((unsupported)).apply ("EN-US") ("en_US"))) ((((unsupported)).apply ("en_US") ("en_US"))) ((((unsupported)).apply ("sr-latn") ("sr_Latn"))) ((((unsupported)).apply ("sr-LATN") ("sr_Latn"))) ((((unsupported)).apply ("sr_Latn") ("sr_Latn"))) ((((unsupported)).apply ("ber-MA") ("ber_MA"))) ((((unsupported)).apply ("BER-MA") ("ber_MA"))) ((((unsupported)).apply ("BER_MA") ("ber_MA"))) ((((unsupported)).apply ("ber_MA") ("ber_MA"))) ((((unsupported)).apply ("nl-nl-x-informal") ("nl_NL-x-informal"))) ((((unsupported)).apply ("NL-NL-X-INFORMAL") ("nl_NL-x-informal"))) ((((unsupported)).apply ("sr-latn-x-informal") ("sr_Latn-x-informal"))) ((((unsupported)).apply ("SR-LATN-X-INFORMAL") ("sr_Latn-x-informal"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlang)) ((xlocale)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlang)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xto_locale)).apply ((xlang)))) ((xlocale)))
                xtest_to_language.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xto_language)).apply ("en_US"))) ("en-us"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xto_language)).apply ("sr_Lat"))) ("sr-lat"))
                xtest_language_bidi.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_language_bidi)).apply)) (FALSE))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_language_bidi)).apply)) (FALSE))
                xtest_language_bidi_null.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xtrans_null).xget_language_bidi)).apply)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ("he"))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_language_bidi)).apply)) (TRUE))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).x_old_language)) ((((xget_language)).apply)))
                        (((unsupported)).apply (((xself).x_old_translations)) (((xtrans_real).x_translations)))
                        bogusForceDataize.write (((xdeactivate)).apply)
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xtrans_real).x_translations)) (((xself).x_old_translations)))
                        bogusForceDataize.write (((xactivate)).apply (((xself).x_old_language)))
                xtest_translation_loading.write
                  [xself]
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("en") ("local country person"))) ((((unsupported)).apply ("en_AU") ("aussie"))) ((((unsupported)).apply ("en_NZ") ("kiwi"))) ((((unsupported)).apply ("en_CA") ("canuck"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlanguage)) ((x_)))) ((xtests)))
                          bogusForceDataize.write (((xactivate)).apply ((xlanguage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xlanguage)) ((xnickname)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlanguage)))))
                            seq
                              bogusForceDataize.write (((xactivate)).apply ((xlanguage)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("local country person"))) ((xnickname)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xsplit
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_old_language)) ((((xget_language)).apply)))
                        (((unsupported)).apply (((xself).x_translations)) (((xtrans_real).x_translations)))
                        (((unsupported)).apply ((xstr)))
                          xsplit.write
                            [xself]
                              memory > xres
                              seq > @
                                (((unsupported)).apply)
                                  xres.write ((((xstr).xsplit)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                  (((unsupported)).apply ((((unsupported)).apply (((xtrans_real).x_translations)) ("en-YY"))) ("None: is there a None literal in the EO language?"))
                                  (((unsupported)).apply ((xres)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply ((((xsideeffect_str)).apply ("en-XX"))) ("None: is there a None literal in the EO language?"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xtrans_real).x_translations)) (((xself).x_translations)))
                        bogusForceDataize.write (((xactivate)).apply (((xself).x_old_language)))
                xtest_bug14894_translation_activate_thread_safety.write
                  [xself]
                    memory > xtranslation_count
                    seq > @
                      seq
                        xtranslation_count.write (((xlen)).apply (((xtrans_real).x_translations)))
                        bogusForceDataize.write ((((xtranslation).xactivate)).apply ("pl"))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xtranslation_count)) ((((xlen)).apply (((xtrans_real).x_translations)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).xn)) (((((xdecimal).xDecimal)).apply ("66666.666"))))
                        (((unsupported)).apply (((xself).xf)) (99999.999))
                        (((unsupported)).apply (((xself).xd)) (((((xdatetime).xdate)).apply (2009) (12) (31))))
                        (((unsupported)).apply (((xself).xdt)) (((((xdatetime).xdatetime)).apply (2009) (12) (31) (20) (50))))
                        (((unsupported)).apply (((xself).xt)) (((((xdatetime).xtime)).apply (10) (15) (48))))
                        (((unsupported)).apply (((xself).xlong)) (10000))
                        (((unsupported)).apply (((xself).xctxt)) ((((xContext)).apply ((((unsupported)).apply ("n") (((xself).xn)) ("t") (((xself).xt)) ("d") (((xself).xd)) ("dt") (((xself).xdt)) ("f") (((xself).xf)) ("l") (((xself).xlong)))))))
                xtest_all_format_strings.write
                  [xself]
                    memory > xall_locales
                    memory > xsome_date
                    memory > xsome_datetime
                    seq > @
                      seq
                        xall_locales.write ((((xLANG_INFO).xkeys)).apply)
                        xsome_date.write ((((xdatetime).xdate)).apply (2017) (10) (14))
                        xsome_datetime.write ((((xdatetime).xdatetime)).apply (2017) (10) (14) (10) (23))
                        (((unsupported)).apply ((xlocale)) ((xall_locales)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlocale)))) (((((xtranslation).xoverride)).apply ((xlocale)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("2017") ((((xdate_format)).apply ((xsome_date)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("23") ((((xtime_format)).apply ((xsome_datetime)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("2017") ((((unsupported)).apply ((xdate_format)) ((xsome_datetime)) ((((xget_format)).apply ("DATETIME_FORMAT"))))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("2017") ((((unsupported)).apply ((xdate_format)) ((xsome_date)) ((((xget_format)).apply ("YEAR_MONTH_FORMAT"))))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("14") ((((unsupported)).apply ((xdate_format)) ((xsome_date)) ((((xget_format)).apply ("MONTH_DAY_FORMAT"))))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("2017") ((((unsupported)).apply ((xdate_format)) ((xsome_date)) ((((xget_format)).apply ("SHORT_DATE_FORMAT"))))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("2017") ((((unsupported)).apply ((xdate_format)) ((xsome_datetime)) ((((xget_format)).apply ("SHORT_DATETIME_FORMAT"))))))
                xtest_locale_independent.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.66") ((((unsupported)).apply ((xnformat)) (((xself).xn)) (".") (2) (3) (","))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666A6") ((((unsupported)).apply ((xnformat)) (((xself).xn)) ("A") (1) (1) ("B"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666") ((((unsupported)).apply ((xnformat)) (((xself).xn)) ("X") (0) (1) ("Y"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66,666.66") ((((unsupported)).apply ((xnformat)) (((xself).xn)) (".") (2) (3) (","))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("6B6B6B6B6A6") ((((unsupported)).apply ((xnformat)) (((xself).xn)) ("A") (1) (1) ("B"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("-66666.6") ((((unsupported)).apply ((xnformat)) ((66666.666.neg)) (".") (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("-66666.0") ((((unsupported)).apply ((xnformat)) ((((xint)).apply ("-66666"))) (".") (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000.0") ((((unsupported)).apply ((xnformat)) (((xself).xlong)) (".") (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10,00,00,000.00") ((((unsupported)).apply ((xnformat)) (100000000.00) (".") (2) ((((unsupported)).apply (3) (2) (0))) (","))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("1,0,00,000,0000.00") ((((unsupported)).apply ((xnformat)) (10000000000.00) (".") (2) ((((unsupported)).apply (4) (3) (2) (1) (0))) (","))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000,00,000.00") ((((unsupported)).apply ((xnformat)) (1000000000.00) (".") (2) ((((unsupported)).apply (3) (2) ((1.neg)))) (","))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000") ((((unsupported)).apply ((xnformat)) (((xself).xlong)) (".") (0) (0) (TRUE))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("31.12.2009 в 20:50") (((((((xTemplate)).apply ("{{ dt|date:\"d.m.Y в H:i\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("⌚ 10:15") (((((((xTemplate)).apply ("{{ t|time:\"⌚ H:i\" }}")).xrender)).apply (((xself).xctxt)))))
                xtest_l10n_disabled.write
                  [xself]
                    memory > xform
                    memory > xform2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("ca") (TRUE))))
                          seq
                            (((unsupported)).apply (((xself).xmaxDiff)) (3000))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("N j, Y") ((((xget_format)).apply ("DATE_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) ((((xget_format)).apply ("FIRST_DAY_OF_WEEK"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (".") ((((xget_format)).apply ("DECIMAL_SEPARATOR"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10:15 a.m.") ((((xtime_format)).apply (((xself).xt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Des. 31, 2009") ((((xdate_format)).apply (((xself).xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("desembre 2009") ((((xdate_format)).apply (((xself).xd)) ("YEAR_MONTH_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009 8:50 p.m.") ((((xdate_format)).apply (((xself).xdt)) ("SHORT_DATETIME_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("No localizable") ((((xlocalize)).apply ("No localizable"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.666") ((((xlocalize)).apply (((xself).xn)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999.999") ((((xlocalize)).apply (((xself).xf)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000") ((((xlocalize)).apply (((xself).xlong)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Des. 31, 2009") ((((xlocalize)).apply (((xself).xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Des. 31, 2009, 8:50 p.m.") ((((xlocalize)).apply (((xself).xdt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999.999") (((((((xTemplate)).apply ("{{ f }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Des. 31, 2009") (((((((xTemplate)).apply ("{{ d }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Des. 31, 2009, 8:50 p.m.") (((((((xTemplate)).apply ("{{ dt }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.67") (((((((xTemplate)).apply ("{{ n|floatformat:\"2u\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("100000.0") (((((((xTemplate)).apply ("{{ f|floatformat:\"u\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.67") (((((((xTemplate)).apply ("{{ n|floatformat:\"2gu\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("100000.0") (((((((xTemplate)).apply ("{{ f|floatformat:\"ug\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10:15 a.m.") (((((((xTemplate)).apply ("{{ t|time:\"TIME_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009") (((((((xTemplate)).apply ("{{ d|date:\"SHORT_DATE_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009 8:50 p.m.") (((((((xTemplate)).apply ("{{ dt|date:\"SHORT_DATETIME_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                            xform.write (((xI18nForm)).apply ((((unsupported)).apply ("decimal_field") ("66666,666") ("float_field") ("99999,999") ("date_field") ("31/12/2009") ("datetime_field") ("31/12/2009 20:50") ("time_field") ("20:50") ("integer_field") ("1.234"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("Introduxefu un nxfamero."))) ((((unsupported)).apply (((xform).xerrors)) ("float_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("Introduxefu un nxfamero."))) ((((unsupported)).apply (((xform).xerrors)) ("decimal_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("Introduxefu una data vxe0lida."))) ((((unsupported)).apply (((xform).xerrors)) ("date_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("Introduxefu una data/hora vxe0lides."))) ((((unsupported)).apply (((xform).xerrors)) ("datetime_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("Introduxefu un nxfamero enter."))) ((((unsupported)).apply (((xform).xerrors)) ("integer_field"))))
                            xform2.write (((xSelectDateForm)).apply ((((unsupported)).apply ("date_field_month") ("12") ("date_field_day") ("31") ("date_field_year") ("2009"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform2).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform2).xcleaned_data)) ("date_field"))))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<select name=\"mydate_month\" id=\"id_mydate_month\"><option value=\"\">---</option><option value=\"1\">gener</option><option value=\"2\">febrer</option><option value=\"3\">marxe7</option><option value=\"4\">abril</option><option value=\"5\">maig</option><option value=\"6\">juny</option><option value=\"7\">juliol</option><option value=\"8\">agost</option><option value=\"9\">setembre</option><option value=\"10\">octubre</option><option value=\"11\">novembre</option><option value=\"12\" selected>desembre</option></select><select name=\"mydate_day\" id=\"id_mydate_day\"><option value=\"\">---</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option><option value=\"11\">11</option><option value=\"12\">12</option><option value=\"13\">13</option><option value=\"14\">14</option><option value=\"15\">15</option><option value=\"16\">16</option><option value=\"17\">17</option><option value=\"18\">18</option><option value=\"19\">19</option><option value=\"20\">20</option><option value=\"21\">21</option><option value=\"22\">22</option><option value=\"23\">23</option><option value=\"24\">24</option><option value=\"25\">25</option><option value=\"26\">26</option><option value=\"27\">27</option><option value=\"28\">28</option><option value=\"29\">29</option><option value=\"30\">30</option><option value=\"31\" selected>31</option></select><select name=\"mydate_year\" id=\"id_mydate_year\"><option value=\"\">---</option><option value=\"2009\" selected>2009</option><option value=\"2010\">2010</option><option value=\"2011\">2011</option><option value=\"2012\">2012</option><option value=\"2013\">2013</option><option value=\"2014\">2014</option><option value=\"2015\">2015</option><option value=\"2016\">2016</option><option value=\"2017\">2017</option><option value=\"2018\">2018</option></select>") (((((((unsupported)).apply (((xforms).xSelectDateWidget)) ((((xrange)).apply (2009) (2019)))).xrender)).apply ("mydate") (((((xdatetime).xdate)).apply (2009) (12) (31))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) (1) ("!"))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.67") (((((((xTemplate)).apply ("{{ n|floatformat:\"2u\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("100000.0") (((((((xTemplate)).apply ("{{ f|floatformat:\"u\" }}")).xrender)).apply (((xself).xctxt)))))
                xtest_false_like_locale_formats.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ("!"))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("xa0") ((((xget_format)).apply ("THOUSAND_SEPARATOR"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("xa0") ((((xget_format)).apply ("THOUSAND_SEPARATOR"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (0))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xget_format)).apply ("FIRST_DAY_OF_WEEK"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xget_format)).apply ("FIRST_DAY_OF_WEEK"))))
                xtest_l10n_enabled.write
                  [xself]
                    memory > xform4
                    memory > xform3
                    memory > xform5
                    memory > xform6
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmaxDiff)) (3000))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("ca") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("j de F de Y") ((((xget_format)).apply ("DATE_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((((xget_format)).apply ("FIRST_DAY_OF_WEEK"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (",") ((((xget_format)).apply ("DECIMAL_SEPARATOR"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("10:15") ((((xtime_format)).apply (((xself).xt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de desembre de 2009") ((((xdate_format)).apply (((xself).xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("desembre del 2009") ((((xdate_format)).apply (((xself).xd)) ("YEAR_MONTH_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("31/12/2009 20:50") ((((xdate_format)).apply (((xself).xdt)) ("SHORT_DATETIME_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("No localizable") ((((xlocalize)).apply ("No localizable"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66.666,666") ((((xlocalize)).apply (((xself).xn)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99.999,999") ((((xlocalize)).apply (((xself).xf)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10.000") ((((xlocalize)).apply (((xself).xlong)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("True") ((((xlocalize)).apply (TRUE))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666,666") ((((xlocalize)).apply (((xself).xn)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999,999") ((((xlocalize)).apply (((xself).xf)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000") ((((xlocalize)).apply (((xself).xlong)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de desembre de 2009") ((((xlocalize)).apply (((xself).xd)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de desembre de 2009 a les 20:50") ((((xlocalize)).apply (((xself).xdt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66.666,666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99.999,999") (((((((xTemplate)).apply ("{{ f }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10.000") (((((((xTemplate)).apply ("{{ l }}")).xrender)).apply (((xself).xctxt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                xform3.write (((xI18nForm)).apply ((((unsupported)).apply ("decimal_field") ("66.666,666") ("float_field") ("99.999,999") ("date_field") ("31/12/2009") ("datetime_field") ("31/12/2009 20:50") ("time_field") ("20:50") ("integer_field") ("1.234"))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform3).xis_valid)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdecimal).xDecimal)).apply ("66666.666"))) ((((unsupported)).apply (((xform3).xcleaned_data)) ("decimal_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (99999.999) ((((unsupported)).apply (((xform3).xcleaned_data)) ("float_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform3).xcleaned_data)) ("date_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdatetime)).apply (2009) (12) (31) (20) (50))) ((((unsupported)).apply (((xform3).xcleaned_data)) ("datetime_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xtime)).apply (20) (50))) ((((unsupported)).apply (((xform3).xcleaned_data)) ("time_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (1234) ((((unsupported)).apply (((xform3).xcleaned_data)) ("integer_field"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666,666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999,999") (((((((xTemplate)).apply ("{{ f }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de desembre de 2009") (((((((xTemplate)).apply ("{{ d }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de desembre de 2009 a les 20:50") (((((((xTemplate)).apply ("{{ dt }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666,67") (((((((xTemplate)).apply ("{{ n|floatformat:2 }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("100000,0") (((((((xTemplate)).apply ("{{ f|floatformat }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66.666,67") (((((((xTemplate)).apply ("{{ n|floatformat:\"2g\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("100.000,0") (((((((xTemplate)).apply ("{{ f|floatformat:\"g\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10:15") (((((((xTemplate)).apply ("{{ t|time:\"TIME_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31/12/2009") (((((((xTemplate)).apply ("{{ d|date:\"SHORT_DATE_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("31/12/2009 20:50") (((((((xTemplate)).apply ("{{ dt|date:\"SHORT_DATETIME_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdate_format)).apply ((((((xdatetime).xdatetime).xnow)).apply)) ("DATE_FORMAT"))) (((((((xTemplate)).apply ("{% now \"DATE_FORMAT\" %}")).xrender)).apply (((xself).xctxt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                              seq
                                xform4.write (((xI18nForm)).apply ((((unsupported)).apply ("decimal_field") ("66666,666") ("float_field") ("99999,999") ("date_field") ("31/12/2009") ("datetime_field") ("31/12/2009 20:50") ("time_field") ("20:50") ("integer_field") ("1234"))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform4).xis_valid)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdecimal).xDecimal)).apply ("66666.666"))) ((((unsupported)).apply (((xform4).xcleaned_data)) ("decimal_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (99999.999) ((((unsupported)).apply (((xform4).xcleaned_data)) ("float_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform4).xcleaned_data)) ("date_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdatetime)).apply (2009) (12) (31) (20) (50))) ((((unsupported)).apply (((xform4).xcleaned_data)) ("datetime_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xtime)).apply (20) (50))) ((((unsupported)).apply (((xform4).xcleaned_data)) ("time_field"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (1234) ((((unsupported)).apply (((xform4).xcleaned_data)) ("integer_field"))))
                            xform5.write (((xSelectDateForm)).apply ((((unsupported)).apply ("date_field_month") ("12") ("date_field_day") ("31") ("date_field_year") ("2009"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform5).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform5).xcleaned_data)) ("date_field"))))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<select name=\"mydate_day\" id=\"id_mydate_day\"><option value=\"\">---</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option><option value=\"11\">11</option><option value=\"12\">12</option><option value=\"13\">13</option><option value=\"14\">14</option><option value=\"15\">15</option><option value=\"16\">16</option><option value=\"17\">17</option><option value=\"18\">18</option><option value=\"19\">19</option><option value=\"20\">20</option><option value=\"21\">21</option><option value=\"22\">22</option><option value=\"23\">23</option><option value=\"24\">24</option><option value=\"25\">25</option><option value=\"26\">26</option><option value=\"27\">27</option><option value=\"28\">28</option><option value=\"29\">29</option><option value=\"30\">30</option><option value=\"31\" selected>31</option></select><select name=\"mydate_month\" id=\"id_mydate_month\"><option value=\"\">---</option><option value=\"1\">gener</option><option value=\"2\">febrer</option><option value=\"3\">marxe7</option><option value=\"4\">abril</option><option value=\"5\">maig</option><option value=\"6\">juny</option><option value=\"7\">juliol</option><option value=\"8\">agost</option><option value=\"9\">setembre</option><option value=\"10\">octubre</option><option value=\"11\">novembre</option><option value=\"12\" selected>desembre</option></select><select name=\"mydate_year\" id=\"id_mydate_year\"><option value=\"\">---</option><option value=\"2009\" selected>2009</option><option value=\"2010\">2010</option><option value=\"2011\">2011</option><option value=\"2012\">2012</option><option value=\"2013\">2013</option><option value=\"2014\">2014</option><option value=\"2015\">2015</option><option value=\"2016\">2016</option><option value=\"2017\">2017</option><option value=\"2018\">2018</option></select>") (((((((unsupported)).apply (((xforms).xSelectDateWidget)) ((((xrange)).apply (2009) (2019)))).xrender)).apply ("mydate") (((((xdatetime).xdate)).apply (2009) (12) (31))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("ru") (TRUE))))
                          bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<select name=\"mydate_day\" id=\"id_mydate_day\"><option value=\"\">---</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option><option value=\"11\">11</option><option value=\"12\">12</option><option value=\"13\">13</option><option value=\"14\">14</option><option value=\"15\">15</option><option value=\"16\">16</option><option value=\"17\">17</option><option value=\"18\">18</option><option value=\"19\">19</option><option value=\"20\">20</option><option value=\"21\">21</option><option value=\"22\">22</option><option value=\"23\">23</option><option value=\"24\">24</option><option value=\"25\">25</option><option value=\"26\">26</option><option value=\"27\">27</option><option value=\"28\">28</option><option value=\"29\">29</option><option value=\"30\">30</option><option value=\"31\" selected>31</option></select><select name=\"mydate_month\" id=\"id_mydate_month\"><option value=\"\">---</option><option value=\"1\">u042fu043du0432u0430u0440u044c</option><option value=\"2\">u0424u0435u0432u0440u0430u043bu044c</option><option value=\"3\">u041cu0430u0440u0442</option><option value=\"4\">u0410u043fu0440u0435u043bu044c</option><option value=\"5\">u041cu0430u0439</option><option value=\"6\">u0418u044eu043du044c</option><option value=\"7\">u0418u044eu043bu044c</option><option value=\"8\">u0410u0432u0433u0443u0441u0442</option><option value=\"9\">u0421u0435u043du0442u044fu0431u0440u044c</option><option value=\"10\">u041eu043au0442u044fu0431u0440u044c</option><option value=\"11\">u041du043eu044fu0431u0440u044c</option><option value=\"12\" selected>u0414u0435u043au0430u0431u0440u044c</option></select><select name=\"mydate_year\" id=\"id_mydate_year\"><option value=\"\">---</option><option value=\"2009\" selected>2009</option><option value=\"2010\">2010</option><option value=\"2011\">2011</option><option value=\"2012\">2012</option><option value=\"2013\">2013</option><option value=\"2014\">2014</option><option value=\"2015\">2015</option><option value=\"2016\">2016</option><option value=\"2017\">2017</option><option value=\"2018\">2018</option></select>") (((((((unsupported)).apply (((xforms).xSelectDateWidget)) ((((xrange)).apply (2009) (2019)))).xrender)).apply ("mydate") (((((xdatetime).xdate)).apply (2009) (12) (31))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("en") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("N j, Y") ((((xget_format)).apply ("DATE_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) ((((xget_format)).apply ("FIRST_DAY_OF_WEEK"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (".") ((((xget_format)).apply ("DECIMAL_SEPARATOR"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dec. 31, 2009") ((((xdate_format)).apply (((xself).xd)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("December 2009") ((((xdate_format)).apply (((xself).xd)) ("YEAR_MONTH_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009 8:50 p.m.") ((((xdate_format)).apply (((xself).xdt)) ("SHORT_DATETIME_FORMAT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("No localizable") ((((xlocalize)).apply ("No localizable"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66,666.666") ((((xlocalize)).apply (((xself).xn)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99,999.999") ((((xlocalize)).apply (((xself).xf)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10,000") ((((xlocalize)).apply (((xself).xlong)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.666") ((((xlocalize)).apply (((xself).xn)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999.999") ((((xlocalize)).apply (((xself).xf)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10000") ((((xlocalize)).apply (((xself).xlong)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dec. 31, 2009") ((((xlocalize)).apply (((xself).xd)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dec. 31, 2009, 8:50 p.m.") ((((xlocalize)).apply (((xself).xdt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66,666.666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99,999.999") (((((((xTemplate)).apply ("{{ f }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("10,000") (((((((xTemplate)).apply ("{{ l }}")).xrender)).apply (((xself).xctxt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("99999.999") (((((((xTemplate)).apply ("{{ f }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dec. 31, 2009") (((((((xTemplate)).apply ("{{ d }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("Dec. 31, 2009, 8:50 p.m.") (((((((xTemplate)).apply ("{{ dt }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66666.67") (((((((xTemplate)).apply ("{{ n|floatformat:2 }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("100000.0") (((((((xTemplate)).apply ("{{ f|floatformat }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("66,666.67") (((((((xTemplate)).apply ("{{ n|floatformat:\"2g\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("100,000.0") (((((((xTemplate)).apply ("{{ f|floatformat:\"g\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009") (((((((xTemplate)).apply ("{{ d|date:\"SHORT_DATE_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("12/31/2009 8:50 p.m.") (((((((xTemplate)).apply ("{{ dt|date:\"SHORT_DATETIME_FORMAT\" }}")).xrender)).apply (((xself).xctxt)))))
                            xform5.write (((xI18nForm)).apply ((((unsupported)).apply ("decimal_field") ("66666.666") ("float_field") ("99999.999") ("date_field") ("12/31/2009") ("datetime_field") ("12/31/2009 20:50") ("time_field") ("20:50") ("integer_field") ("1234"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform5).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdecimal).xDecimal)).apply ("66666.666"))) ((((unsupported)).apply (((xform5).xcleaned_data)) ("decimal_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (99999.999) ((((unsupported)).apply (((xform5).xcleaned_data)) ("float_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform5).xcleaned_data)) ("date_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdatetime)).apply (2009) (12) (31) (20) (50))) ((((unsupported)).apply (((xform5).xcleaned_data)) ("datetime_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xtime)).apply (20) (50))) ((((unsupported)).apply (((xform5).xcleaned_data)) ("time_field"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (1234) ((((unsupported)).apply (((xform5).xcleaned_data)) ("integer_field"))))
                            xform6.write (((xSelectDateForm)).apply ((((unsupported)).apply ("date_field_month") ("12") ("date_field_day") ("31") ("date_field_year") ("2009"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform6).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdate)).apply (2009) (12) (31))) ((((unsupported)).apply (((xform6).xcleaned_data)) ("date_field"))))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<select name=\"mydate_month\" id=\"id_mydate_month\"><option value=\"\">---</option><option value=\"1\">January</option><option value=\"2\">February</option><option value=\"3\">March</option><option value=\"4\">April</option><option value=\"5\">May</option><option value=\"6\">June</option><option value=\"7\">July</option><option value=\"8\">August</option><option value=\"9\">September</option><option value=\"10\">October</option><option value=\"11\">November</option><option value=\"12\" selected>December</option></select><select name=\"mydate_day\" id=\"id_mydate_day\"><option value=\"\">---</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option><option value=\"11\">11</option><option value=\"12\">12</option><option value=\"13\">13</option><option value=\"14\">14</option><option value=\"15\">15</option><option value=\"16\">16</option><option value=\"17\">17</option><option value=\"18\">18</option><option value=\"19\">19</option><option value=\"20\">20</option><option value=\"21\">21</option><option value=\"22\">22</option><option value=\"23\">23</option><option value=\"24\">24</option><option value=\"25\">25</option><option value=\"26\">26</option><option value=\"27\">27</option><option value=\"28\">28</option><option value=\"29\">29</option><option value=\"30\">30</option><option value=\"31\" selected>31</option></select><select name=\"mydate_year\" id=\"id_mydate_year\"><option value=\"\">---</option><option value=\"2009\" selected>2009</option><option value=\"2010\">2010</option><option value=\"2011\">2011</option><option value=\"2012\">2012</option><option value=\"2013\">2013</option><option value=\"2014\">2014</option><option value=\"2015\">2015</option><option value=\"2016\">2016</option><option value=\"2017\">2017</option><option value=\"2018\">2018</option></select>") (((((((unsupported)).apply (((xforms).xSelectDateWidget)) ((((xrange)).apply (2009) (2019)))).xrender)).apply ("mydate") (((((xdatetime).xdate)).apply (2009) (12) (31))))))
                xtest_sub_locales.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de-at") (TRUE))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ("66.666,666") (((((((xTemplate)).apply ("{{ n }}")).xrender)).apply (((xself).xctxt)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("es-us") (TRUE))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ("31 de Diciembre de 2009") ((((xdate_format)).apply (((xself).xd)))))
                xtest_localized_input.write
                  [xself]
                    memory > xform6
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmaxDiff)) (1200))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de-at") (TRUE))))
                          seq
                            xform6.write (((xCompanyForm)).apply ((((unsupported)).apply ("name") ("acme") ("date_added") (((((xdatetime).xdatetime)).apply (2009) (12) (31) (6) (0) (0))) ("cents_paid") (((((xdecimal).xDecimal)).apply ("59.47"))) ("products_delivered") (12000))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform6).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform6).xas_ul)).apply)) ("<li><label for=\"id_name\">Name:</label><input id=\"id_name\" type=\"text\" name=\"name\" value=\"acme\"    maxlength=\"50\" required></li><li><label for=\"id_date_added\">Date added:</label><input type=\"text\" name=\"date_added\" value=\"31.12.2009 06:00:00\"    id=\"id_date_added\" required></li><li><label for=\"id_cents_paid\">Cents paid:</label><input type=\"text\" name=\"cents_paid\" value=\"59,47\" id=\"id_cents_paid\"    required></li><li><label for=\"id_products_delivered\">Products delivered:</label><input type=\"text\" name=\"products_delivered\" value=\"12000\"    id=\"id_products_delivered\" required></li>"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlocalize_input)).apply (((((xdatetime).xdatetime)).apply (2009) (12) (31) (6) (0) (0))))) ("31.12.2009 06:00:00"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdatetime).xdatetime)).apply (2009) (12) (31) (6) (0) (0))) ((((unsupported)).apply (((xform6).xcleaned_data)) ("date_added"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              bogusForceDataize.write ((((xself).xassertInHTML)).apply ("<input type=\"text\" name=\"products_delivered\" value=\"12.000\" id=\"id_products_delivered\" required>") (((((xform6).xas_ul)).apply)))
                xtest_localized_input_func.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (TRUE) ("True"))) ((((unsupported)).apply (((((xdatetime).xdate)).apply (1) (1) (1))) ("0001-01-01"))) ((((unsupported)).apply (((((xdatetime).xdatetime)).apply (1) (1) (1))) ("0001-01-01 00:00:00"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlocalize_input)).apply ((xvalue)))) ((xexpected)))
                xtest_sanitize_strftime_format.write
                  [xself]
                    memory > xdt
                    memory > xfmt
                    seq > @
                      (((unsupported)).apply ((xyear)) ((((unsupported)).apply (1) (99) (999) (1000))))
                        seq
                          xdt.write ((((xdatetime).xdate)).apply ((xyear)) (1) (1))
                          (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("%C") (("%02d".mod (((unsupported)).apply ((xyear)) (100)))))) ((((unsupported)).apply ("%F") (("%04d-01-01".mod (xyear))))) ((((unsupported)).apply ("%G") (("%04d".mod (xyear))))) ((((unsupported)).apply ("%Y") (("%04d".mod (xyear))))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xyear)) ((xfmt)))))
                              seq
                                xfmt.write (((xsanitize_strftime_format)).apply ((xfmt)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdt).xstrftime)).apply ((xfmt)))) ((xexpected)))
                xtest_sanitize_strftime_format_with_escaped_percent.write
                  [xself]
                    memory > xdt
                    memory > xfmt
                    seq > @
                      seq
                        xdt.write ((((xdatetime).xdate)).apply (1) (1) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("%%C") ("%C"))) ((((unsupported)).apply ("%%F") ("%F"))) ((((unsupported)).apply ("%%G") ("%G"))) ((((unsupported)).apply ("%%Y") ("%Y"))) ((((unsupported)).apply ("%%%%C") ("%%C"))) ((((unsupported)).apply ("%%%%F") ("%%F"))) ((((unsupported)).apply ("%%%%G") ("%%G"))) ((((unsupported)).apply ("%%%%Y") ("%%Y"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfmt)))))
                            seq
                              xfmt.write (((xsanitize_strftime_format)).apply ((xfmt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdt).xstrftime)).apply ((xfmt)))) ((xexpected)))
                        (((unsupported)).apply ((xyear)) ((((unsupported)).apply (1) (99) (999) (1000))))
                          seq
                            xdt.write ((((xdatetime).xdate)).apply ((xyear)) (1) (1))
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("%%%C") (("%%%02d".mod (((unsupported)).apply ((xyear)) (100)))))) ((((unsupported)).apply ("%%%F") (("%%%04d-01-01".mod (xyear))))) ((((unsupported)).apply ("%%%G") (("%%%04d".mod (xyear))))) ((((unsupported)).apply ("%%%Y") (("%%%04d".mod (xyear))))) ((((unsupported)).apply ("%%%%%C") (("%%%%%02d".mod (((unsupported)).apply ((xyear)) (100)))))) ((((unsupported)).apply ("%%%%%F") (("%%%%%04d-01-01".mod (xyear))))) ((((unsupported)).apply ("%%%%%G") (("%%%%%04d".mod (xyear))))) ((((unsupported)).apply ("%%%%%Y") (("%%%%%04d".mod (xyear))))))))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xyear)) ((xfmt)))))
                                seq
                                  xfmt.write (((xsanitize_strftime_format)).apply ((xfmt)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdt).xstrftime)).apply ((xfmt)))) ((xexpected)))
                xtest_sanitize_separators.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply (123))) (123))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("ru") (TRUE))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1xa0234xa0567"))) ("1234567"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("77xa0777,777"))) ("77777.777"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("12 345"))) ("12345"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("77 777,777"))) ("77777.777"))
                            (((unsupported)).apply (((((xtranslation).xoverride)).apply ("None: is there a None literal in the EO language?"))))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE) ("."))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("12xa0345"))) ("12xa0345"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                          (((unsupported)).apply ((((unsupported)).apply ((xpatch_formats)) ((((xget_language)).apply)) (".") (","))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("10.234"))) ("10234"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("10.10"))) ("10.10"))
                        (((unsupported)).apply ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (","))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1001,10"))) ("1001.10"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1001.10"))) ("1001.10"))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (",") (".") (TRUE))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1.001,10"))) ("1001.10"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1001,10"))) ("1001.10"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1001.10"))) ("1001.10"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsanitize_separators)).apply ("1,001.10"))) ("1.001.10"))
                xtest_iter_format_modules.write
                  [xself]
                    memory > xdefault_mod
                    memory > xtest_mod2
                    memory > xtest_mod
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdefault_mod.write (((ximport_module)).apply ("django.conf.locale.de.formats"))
                        xtest_mod.write (((ximport_module)).apply ("i18n.other.locale.de.formats"))
                        xtest_mod2.write (((ximport_module)).apply ("i18n.other2.locale.de.formats"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de-at") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xiter_format_modules)).apply ("de"))))) ((((unsupported)).apply ((xdefault_mod)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xiter_format_modules)).apply ("de") ("i18n.other.locale"))))) ((((unsupported)).apply ((xtest_mod)) ((xdefault_mod)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xiter_format_modules)).apply ("de") ((((unsupported)).apply ("i18n.other.locale") ("i18n.other2.locale"))))))) ((((unsupported)).apply ((xtest_mod)) ((xtest_mod2)) ((xdefault_mod)))))
                xtest_iter_format_modules_stability.write
                  [xself]
                    memory > xen_gb_format_mod
                    memory > xen_format_mod
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xen_format_mod.write (((ximport_module)).apply ("django.conf.locale.en.formats"))
                        xen_gb_format_mod.write (((ximport_module)).apply ("django.conf.locale.en_GB.formats"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xiter_format_modules)).apply ("en-gb"))))) ((((unsupported)).apply ((xen_gb_format_mod)) ((xen_format_mod)))))
                xtest_get_format_modules_lang.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (".") ((((unsupported)).apply ((xget_format)) ("DECIMAL_SEPARATOR") ("en"))))
                xtest_localize_templatetag_and_filter.write
                  [xself]
                    memory > xoutput3
                    memory > xcontext
                    memory > xtemplate4
                    memory > xexpected_localized
                    memory > xtemplate1
                    memory > xoutput1
                    memory > xexpected_unlocalized
                    memory > xtemplate2
                    memory > xoutput2
                    memory > xtemplate3
                    memory > xoutput4
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcontext.write (((xContext)).apply ((((unsupported)).apply ("int") (1455) ("float") (3.14) ("date") (((((xdatetime).xdate)).apply (2016) (12) (31))))))
                        xtemplate1.write (((xTemplate)).apply ("{% load l10n %}{% localize %}{{ int }}/{{ float }}/{{ date }}{% endlocalize %}; {% localize on %}{{ int }}/{{ float }}/{{ date }}{% endlocalize %}"))
                        xtemplate2.write (((xTemplate)).apply ("{% load l10n %}{{ int }}/{{ float }}/{{ date }}; {% localize off %}{{ int }}/{{ float }}/{{ date }};{% endlocalize %} {{ int }}/{{ float }}/{{ date }}"))
                        xtemplate3.write (((xTemplate)).apply ("{% load l10n %}{{ int }}/{{ float }}/{{ date }}; {{ int|unlocalize }}/{{ float|unlocalize }}/{{ date|unlocalize }}"))
                        xtemplate4.write (((xTemplate)).apply ("{% load l10n %}{{ int }}/{{ float }}/{{ date }}; {{ int|localize }}/{{ float|localize }}/{{ date|localize }}"))
                        xexpected_localized.write "1.455/3,14/31. Dezember 2016"
                        xexpected_unlocalized.write "1455/3.14/Dez. 31, 2016"
                        xoutput1.write ((("; ".xjoin)).apply ((((unsupported)).apply ((xexpected_localized)) ((xexpected_localized)))))
                        xoutput2.write ((("; ".xjoin)).apply ((((unsupported)).apply ((xexpected_localized)) ((xexpected_unlocalized)) ((xexpected_localized)))))
                        xoutput3.write ((("; ".xjoin)).apply ((((unsupported)).apply ((xexpected_localized)) ((xexpected_unlocalized)))))
                        xoutput4.write ((("; ".xjoin)).apply ((((unsupported)).apply ((xexpected_unlocalized)) ((xexpected_localized)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE) ("N j, Y") (".") (0) (TRUE))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate1).xrender)).apply ((xcontext)))) ((xoutput1)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate4).xrender)).apply ((xcontext)))) ((xoutput4)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (TRUE))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate1).xrender)).apply ((xcontext)))) ((xoutput1)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate2).xrender)).apply ((xcontext)))) ((xoutput2)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate3).xrender)).apply ((xcontext)))) ((xoutput3)))
                xtest_localized_off_numbers.write
                  [xself]
                    memory > xtemplate
                    memory > xcontext
                    seq > @
                      seq
                        unsupported
                        xtemplate.write (((xTemplate)).apply ("{% load l10n %}{% localize off %}{{ int }}/{{ float }}/{{ decimal }}{% endlocalize %}"))
                        xcontext.write (((xContext)).apply ((((unsupported)).apply ("int") (1455) ("float") (3.14) ("decimal") (((((xdecimal).xDecimal)).apply ("24.1567"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (",") (TRUE) ("°") (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate).xrender)).apply ((xcontext)))) ("1455/3.14/24.1567"))
                        (((unsupported)).apply ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) (FALSE) (",") (TRUE) ("°") (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtemplate).xrender)).apply ((xcontext)))) ("1455/3.14/24.1567"))
                xtest_localized_as_text_as_hidden_input.write
                  [xself]
                    memory > xtemplate_as_text
                    memory > xcontext
                    memory > xtemplate
                    memory > xform
                    memory > xtemplate_as_hidden
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmaxDiff)) (1200))
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de-at") (TRUE))))
                          seq
                            xtemplate.write (((xTemplate)).apply ("{% load l10n %}{{ form.date_added }}; {{ form.cents_paid }}"))
                            xtemplate_as_text.write (((xTemplate)).apply ("{% load l10n %}{{ form.date_added.as_text }}; {{ form.cents_paid.as_text }}"))
                            xtemplate_as_hidden.write (((xTemplate)).apply ("{% load l10n %}{{ form.date_added.as_hidden }}; {{ form.cents_paid.as_hidden }}"))
                            xform.write (((xCompanyForm)).apply ((((unsupported)).apply ("name") ("acme") ("date_added") (((((xdatetime).xdatetime)).apply (2009) (12) (31) (6) (0) (0))) ("cents_paid") (((((xdecimal).xDecimal)).apply ("59.47"))) ("products_delivered") (12000))))
                            xcontext.write (((xContext)).apply ((((unsupported)).apply ("form") ((xform)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xtemplate).xrender)).apply ((xcontext)))) ("<input id=\"id_date_added\" name=\"date_added\" type=\"text\" value=\"31.12.2009 06:00:00\" required>;<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"text\" value=\"59,47\" required>"))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xtemplate_as_text).xrender)).apply ((xcontext)))) ("<input id=\"id_date_added\" name=\"date_added\" type=\"text\" value=\"31.12.2009 06:00:00\" required>;<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"text\" value=\"59,47\" required>"))
                            bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xtemplate_as_hidden).xrender)).apply ((xcontext)))) ("<input id=\"id_date_added\" name=\"date_added\" type=\"hidden\" value=\"31.12.2009 06:00:00\">;<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"hidden\" value=\"59,47\">"))
                xtest_format_arbitrary_settings.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_format)).apply ("DEBUG"))) ("DEBUG"))
                xtest_get_custom_format.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xreset_format_cache)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("i18n.other.locale"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("fr") (TRUE))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("d/m/Y CUSTOM") ((((xget_format)).apply ("CUSTOM_DAY_FORMAT"))))
                xtest_admin_javascript_supported_input_formats.write
                  [xself]
                    memory > xregex
                    memory > xformatter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xregex.write ((((xre).xcompile)).apply ("%([^BcdHImMpSwxXyY%])"))
                        (((unsupported)).apply ((((unsupported)).apply ((xlanguage_code)) ((xlanguage_name)))) (((xsettings).xLANGUAGES)))
                          (((unsupported)).apply ((xformat_name)) ((((unsupported)).apply ("DATE_INPUT_FORMATS") ("TIME_INPUT_FORMATS") ("DATETIME_INPUT_FORMATS"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlanguage_code)) ((xformat_name)))))
                              seq
                                xformatter.write (((unsupported)).apply ((((unsupported)).apply ((xget_format)) ((xformat_name)) ((xlanguage_code)))) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xregex).xfindall)).apply ((xformatter)))) ((((unsupported)).apply)) (("%s locale's %s uses an unsupported format code.".mod (((unsupported)).apply ((xlanguage_code)) ((xformat_name))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrf.write (((xRequestFactory)).apply)
                xtest_english_fallback.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Image"))) ("Bild"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("en"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Image"))) ("Image"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("en-us"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Image"))) ("Image"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("en-ca"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Image"))) ("Image"))
                xtest_parse_spec_http_header.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("de") ((((unsupported)).apply ((((unsupported)).apply ("de") (1.0))))))) ((((unsupported)).apply ("en-AU") ((((unsupported)).apply ((((unsupported)).apply ("en-au") (1.0))))))) ((((unsupported)).apply ("es-419") ((((unsupported)).apply ((((unsupported)).apply ("es-419") (1.0))))))) ((((unsupported)).apply ("*;q=1.00") ((((unsupported)).apply ((((unsupported)).apply ("*") (1.0))))))) ((((unsupported)).apply ("en-AU;q=0.123") ((((unsupported)).apply ((((unsupported)).apply ("en-au") (0.123))))))) ((((unsupported)).apply ("en-au;q=0.5") ((((unsupported)).apply ((((unsupported)).apply ("en-au") (0.5))))))) ((((unsupported)).apply ("en-au;q=1.0") ((((unsupported)).apply ((((unsupported)).apply ("en-au") (1.0))))))) ((((unsupported)).apply ("da, en-gb;q=0.25, en;q=0.5") ((((unsupported)).apply ((((unsupported)).apply ("da") (1.0))) ((((unsupported)).apply ("en") (0.5))) ((((unsupported)).apply ("en-gb") (0.25))))))) ((((unsupported)).apply ("en-au-xx") ((((unsupported)).apply ((((unsupported)).apply ("en-au-xx") (1.0))))))) ((((unsupported)).apply ("de,en-au;q=0.75,en-us;q=0.5,en;q=0.25,es;q=0.125,fa;q=0.125") ((((unsupported)).apply ((((unsupported)).apply ("de") (1.0))) ((((unsupported)).apply ("en-au") (0.75))) ((((unsupported)).apply ("en-us") (0.5))) ((((unsupported)).apply ("en") (0.25))) ((((unsupported)).apply ("es") (0.125))) ((((unsupported)).apply ("fa") (0.125))))))) ((((unsupported)).apply ("*") ((((unsupported)).apply ((((unsupported)).apply ("*") (1.0))))))) ((((unsupported)).apply ("de;q=0.") ((((unsupported)).apply ((((unsupported)).apply ("de") (0.0))))))) ((((unsupported)).apply ("en; q=1,") ((((unsupported)).apply ((((unsupported)).apply ("en") (1.0))))))) ((((unsupported)).apply ("en; q=1.0, * ; q=0.5") ((((unsupported)).apply ((((unsupported)).apply ("en") (1.0))) ((((unsupported)).apply ("*") (0.5))))))) ((((unsupported)).apply ("en-gb;q=1.0000") ((((unsupported)).apply)))) ((((unsupported)).apply ("en;q=0.1234") ((((unsupported)).apply)))) ((((unsupported)).apply ("en;q=.2") ((((unsupported)).apply)))) ((((unsupported)).apply ("abcdefghi-au") ((((unsupported)).apply)))) ((((unsupported)).apply ("**") ((((unsupported)).apply)))) ((((unsupported)).apply ("en,,gb") ((((unsupported)).apply)))) ((((unsupported)).apply ("en-au;q=0.1.0") ((((unsupported)).apply)))) ((((unsupported)).apply ((("X".mul 97).add "Z,en")) ((((unsupported)).apply)))) ((((unsupported)).apply ("da, en-gb;q=0.8, en;q=0.7,#") ((((unsupported)).apply)))) ((((unsupported)).apply ("de;q=2.0") ((((unsupported)).apply)))) ((((unsupported)).apply ("de;q=0.a") ((((unsupported)).apply)))) ((((unsupported)).apply ("12-345") ((((unsupported)).apply)))) ((((unsupported)).apply ("") ((((unsupported)).apply)))) ((((unsupported)).apply ("en;q=1e0") ((((unsupported)).apply)))) ((((unsupported)).apply ("en-au;q=１.０") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtrans_real).xparse_accept_lang_header)).apply ((xvalue)))) ((((xtuple)).apply ((xexpected)))))
                xtest_parse_literal_http_header.write
                  [xself]
                    memory > xr
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xg.write (xget_language_from_request)
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("pt-br"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt-br") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("pt"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("es,de"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("es") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("es-ar,de"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("es-ar") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("es-us"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("es"))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-hans,de"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("zh-hans"))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("NL"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("nl") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("fy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("fy") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("ia"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("ia") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("sr-latn"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("sr-latn") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-hans"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("zh-hans") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-hant"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("zh-hant") ((((xg)).apply ((xr)))))
                xtest_support_for_deprecated_chinese_language_codes.write
                  [xself]
                    memory > xr
                    memory > xg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xg.write (xget_language_from_request)
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-cn,en"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("zh-hans"))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-tw,en"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("zh-hant"))
                xtest_special_fallback_language.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("zh-my,en"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language_from_request)).apply ((xr)))) ("zh-hans"))
                xtest_subsequent_code_fallback_language.write
                  [xself]
                    memory > xr
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("zh-Hans-CN") ("zh-hans"))) ((((unsupported)).apply ("zh-hans-mo") ("zh-hans"))) ((((unsupported)).apply ("zh-hans-HK") ("zh-hans"))) ((((unsupported)).apply ("zh-Hant-HK") ("zh-hant"))) ((((unsupported)).apply ("zh-hant-tw") ("zh-hant"))) ((((unsupported)).apply ("zh-hant-SG") ("zh-hant"))))
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("{value},en"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language_from_request)).apply ((xr)))) ((xexpected)))
                xtest_parse_language_cookie.write
                  [xself]
                    memory > xr
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xg.write (xget_language_from_request)
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply (((xsettings).xLANGUAGE_COOKIE_NAME)) ("pt-br"))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt-br") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply (((xsettings).xLANGUAGE_COOKIE_NAME)) ("pt"))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply (((xsettings).xLANGUAGE_COOKIE_NAME)) ("es"))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("de"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("es") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply (((xsettings).xLANGUAGE_COOKIE_NAME)) ("es-us"))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("es"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply (((xsettings).xLANGUAGE_COOKIE_NAME)) ("zh-hans"))))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("de"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xr)))) ("zh-hans"))
                xtest_get_supported_language_variant_real.write
                  [xself]
                    memory > xg
                    seq > @
                      (((unsupported)).apply)
                        xg.write ((xtrans_real).xget_supported_language_variant)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("en"))) ("en"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("en-gb"))) ("en"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("de"))) ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("de-at"))) ("de-at"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("de-ch"))) ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("pt-br"))) ("pt-br"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("pt"))) ("pt-br"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("pt-pt"))) ("pt-br"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          (((unsupported)).apply ((xg)) ("pt") (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          (((unsupported)).apply ((xg)) ("pt-pt") (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("xyz"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("xy-zz"))
                xtest_get_supported_language_variant_null.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write ((xtrans_null).xget_supported_language_variant)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply (((xsettings).xLANGUAGE_CODE)))) (((xsettings).xLANGUAGE_CODE)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("pt"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("de"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("de-at"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          (((unsupported)).apply ((xg)) ("de") (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          (((unsupported)).apply ((xg)) ("de-at") (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xLookupError)))))
                          bogusForceDataize.write (((xg)).apply ("xyz"))
                xtest_get_language_from_path_real.write
                  [xself]
                    memory > xtests
                    memory > xg
                    seq > @
                      (((unsupported)).apply)
                        xg.write ((xtrans_real).xget_language_from_path)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("/pl/") ("pl"))) ((((unsupported)).apply ("/pl") ("pl"))) ((((unsupported)).apply ("/xyz/") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("/en/") ("en"))) ((((unsupported)).apply ("/en-gb/") ("en"))) ((((unsupported)).apply ("/en-latn-us/") ("en-latn-us"))) ((((unsupported)).apply ("/en-Latn-US/") ("en-Latn-US"))) ((((unsupported)).apply ("/de/") ("de"))) ((((unsupported)).apply ("/de-1996/") ("de-1996"))) ((((unsupported)).apply ("/de-at/") ("de-at"))) ((((unsupported)).apply ("/de-ch/") ("de"))) ((((unsupported)).apply ("/de-ch-1901/") ("de-ch-1901"))) ((((unsupported)).apply ("/de-simple-page-test/") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("/i-mingo/") ("i-mingo"))) ((((unsupported)).apply ("/kl-tunumiit/") ("kl-tunumiit"))) ((((unsupported)).apply ("/nan-hani-tw/") ("nan-hani-tw"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xlanguage)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpath)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xpath)))) ((xlanguage)))
                xtest_get_language_from_path_null.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write ((xtrans_null).xget_language_from_path)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xg)).apply ("/pl/"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xg)).apply ("/pl"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xg)).apply ("/xyz/"))))
                xtest_cache_resetting.write
                  [xself]
                    memory > xr
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xg.write (xget_language_from_request)
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("pt-br"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt-br") ((((xg)).apply ((xr)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((((unsupported)).apply ("en") ("English"))))))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ("pt-br") ((((xg)).apply ((xr)))))
                xtest_i18n_patterns_returns_list.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (FALSE))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xi18n_patterns)).apply ((((unsupported)).apply)))) ((xlist)))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) (TRUE))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xi18n_patterns)).apply ((((unsupported)).apply)))) ((xlist)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        bogusForceDataize.write (((xactivate)).apply ("de"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xdeactivate)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xassertGettext.write
                  [xself xmsgid xmsgstr]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((xgettext)).apply ((xmsgid)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xmsgstr)) ((xresult)) (("The string '%s' isn't in the translation of '%s'; the actual result is '%s'.".mod (((unsupported)).apply ((xmsgstr)) ((xmsgid)) ((xresult))))))
            (((unsupported)).apply ((xResolutionOrderI18NTests)))
              xtest_app_translation.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xassertGettext)).apply ("Date/time") ("Datum/Zeit"))
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("append") ("i18n.resolution"))))))
                        seq
                          bogusForceDataize.write (((xactivate)).apply ("de"))
                          bogusForceDataize.write ((((xself).xassertGettext)).apply ("Date/time") ("Datum/Zeit"))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("remove") ("django.contrib.admin.apps.SimpleAdminConfig"))))))
                            seq
                              bogusForceDataize.write (((xactivate)).apply ("de"))
                              bogusForceDataize.write ((((xself).xassertGettext)).apply ("Date/time") ("Datum/Zeit (APP)"))
            (((unsupported)).apply ((xResolutionOrderI18NTests)) ((((unsupported)).apply ((xoverride_settings)) ((xextended_locale_paths)))))
              seq
                xtest_locale_paths_translation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertGettext)).apply ("Time") ("LOCALE_PATHS"))
                xtest_locale_paths_override_app_translation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("i18n.resolution"))))))
                        bogusForceDataize.write ((((xself).xassertGettext)).apply ("Time") ("LOCALE_PATHS"))
            (((unsupported)).apply ((xResolutionOrderI18NTests)))
              xtest_django_fallback.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Date/time"))) ("Datum/Zeit"))
            (((unsupported)).apply ((xResolutionOrderI18NTests)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("i18n.territorial_fallback"))))))
              xtest_sparse_territory_catalog.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply)
                      (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de-de"))))
                        seq
                          bogusForceDataize.write ((((xself).xassertGettext)).apply ("Test 1 (en)") ("(de-de)"))
                          bogusForceDataize.write ((((xself).xassertGettext)).apply ("Test 2 (en)") ("(de)"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_lazy.write
                  [xself]
                    memory > xtm
                    seq > @
                      seq
                        xtm.write (((xTestModel)).apply)
                        bogusForceDataize.write ((((xtm).xsave)).apply)
                xtest_safestr.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ((xCompany)) (12) (1))
                        (((unsupported)).apply (((xc).xname)) ((((xSafeString)).apply ("Iñtërnâtiônàlizætiøn1"))))
                        bogusForceDataize.write ((((xc).xsave)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_localized_language_info.write
                  [xself]
                    memory > xli
                    seq > @
                      seq
                        xli.write (((xget_language_info)).apply ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("code"))) ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("name_local"))) ("Deutsch"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("name"))) ("German"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xli)) ("bidi"))) (FALSE))
                xtest_unknown_language_code.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Unknown language code xx"))))
                          bogusForceDataize.write (((xget_language_info)).apply ("xx"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("xx"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("Title"))) ("Title"))
                xtest_unknown_only_country_code.write
                  [xself]
                    memory > xli
                    seq > @
                      seq
                        xli.write (((xget_language_info)).apply ("de-xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("code"))) ("de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("name_local"))) ("Deutsch"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("name"))) ("German"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xli)) ("bidi"))) (FALSE))
                xtest_unknown_language_code_and_country_code.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ("Unknown language code xx-xx and xx"))))
                        bogusForceDataize.write (((xget_language_info)).apply ("xx-xx"))
                xtest_fallback_language_code.write
                  [xself]
                    memory > xli
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xli.write (((xget_language_info)).apply ("zh-my"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("code"))) ("zh-hans"))
                        xli.write (((xget_language_info)).apply ("zh-hans"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xli)) ("code"))) ("zh-hans"))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ((((unsupported)).apply ((((unsupported)).apply ("en") ("English"))) ((((unsupported)).apply ("fr") ("French"))))) ((((unsupported)).apply ("django.middleware.locale.LocaleMiddleware") ("django.middleware.common.CommonMiddleware"))) ("i18n.urls"))))
              xtest_streaming_response.write
                [xself]
                  memory > xresponse
                  seq > @
                    seq
                      xresponse.write (((((xself).xclient).xget)).apply ("/fr/streaming/"))
                      bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Oui/Non"))
                      xresponse.write (((((xself).xclient).xget)).apply ("/en/streaming/"))
                      bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Yes/No"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ((((unsupported)).apply ((((unsupported)).apply ("en") ("English"))) ((((unsupported)).apply ("de") ("German"))) ((((unsupported)).apply ("fr") ("French"))))) ((((unsupported)).apply ("django.middleware.locale.LocaleMiddleware") ("django.middleware.common.CommonMiddleware"))) ("i18n.urls_default_unprefixed") ("en"))))
              seq
                xtest_default_lang_without_prefix.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/simple/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xcontent)) ("Yes"))
                xtest_other_lang_with_prefix.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/fr/simple/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xcontent)) ("Oui"))
                xtest_unprefixed_language_other_than_accept_language.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ("/simple/") ("fr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xcontent)) ("Yes"))
                xtest_page_with_dash.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/de-simple-page-test/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xcontent)) ("Yes"))
                xtest_no_redirect_on_404.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/group1/group2/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                        xresponse.write (((((xself).xclient).xget)).apply ("/nonexistent/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE) ((((unsupported)).apply ((((unsupported)).apply ("bg") ("Bulgarian"))) ((((unsupported)).apply ("en-us") ("English"))) ((((unsupported)).apply ("pt-br") ("Portuguese (Brazil)"))))) ((((unsupported)).apply ("django.middleware.locale.LocaleMiddleware") ("django.middleware.common.CommonMiddleware"))) ("i18n.urls"))))
              seq
                xrf.write (((xRequestFactory)).apply)
                xtest_check_for_language.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("en"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("en-us"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("en-US"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("en_US"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("be"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("be@latin"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("sr-RS@latin"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_for_language)).apply ("sr-RS@12345"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("en-ü"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("enx00"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("be@ "))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("tr-TR.UTF-8"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("tr-TR.UTF8"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_for_language)).apply ("de-DE.utf-8"))))
                xtest_check_for_language_null.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((xtrans_null).xcheck_for_language)).apply ("en"))) (TRUE))
                xtest_get_language_from_request.write
                  [xself]
                    memory > xlang
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("en-US,en;q=0.8,bg;q=0.6,ru;q=0.4"))))
                        xlang.write (((xget_language_from_request)).apply ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("en-us") ((xlang)))
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("bg-bg,en-US;q=0.8,en;q=0.6,ru;q=0.4"))))
                        xlang.write (((xget_language_from_request)).apply ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("bg") ((xlang)))
                xtest_get_language_from_request_null.write
                  [xself]
                    memory > xlang
                    seq > @
                      seq
                        xlang.write ((((xtrans_null).xget_language_from_request)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlang)) ("en"))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ("de"))))
                          seq
                            xlang.write ((((xtrans_null).xget_language_from_request)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlang)) ("de"))
                xtest_specific_language_codes.write
                  [xself]
                    memory > xlang
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("pt,en-US;q=0.8,en;q=0.6,ru;q=0.4"))))
                        xlang.write (((xget_language_from_request)).apply ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt-br") ((xlang)))
                        xr.write (((((xself).xrf).xget)).apply ("/"))
                        (((unsupported)).apply (((xr).xCOOKIES)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xr).xMETA)) ((((unsupported)).apply ("HTTP_ACCEPT_LANGUAGE") ("pt-pt,en-US;q=0.8,en;q=0.6,ru;q=0.4"))))
                        xlang.write (((xget_language_from_request)).apply ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pt-br") ((xlang)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).xgettext_find_builtin)) (((xgettext_module).xfind)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xgettext_module).xfind)) (((xself).xgettext_find_builtin)))
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xpatchGettextFind.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xgettext_module).xfind)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                xtest_failure_finding_default_mo_files.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xpatchGettextFind)).apply)
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))))
                          bogusForceDataize.write (((xactivate)).apply ("en"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xtest_non_django_language.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("xxx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgettext)).apply ("year"))) ("reay"))
                xtest_check_for_language.write
                  [xself]
                    memory > xapp_config
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xapp_dir)))
                          seq
                            bogusForceDataize.write ((((xos).xmakedirs)).apply ((((((xos).xpath).xjoin)).apply ((xapp_dir)) ("locale") ("dummy_Lang") ("LC_MESSAGES"))))
                            bogusForceDataize.write ((((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xapp_dir)) ("locale") ("dummy_Lang") ("LC_MESSAGES") ("django.mo"))) ("w")).xclose)).apply)
                            xapp_config.write (((xAppConfig)).apply ("dummy_app") ((((unsupported)).apply ((xAppModuleStub)) ((((unsupported)).apply ((xapp_dir)))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("django.apps.apps.get_app_configs") ((((unsupported)).apply ((xapp_config)))))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_for_language)).apply ("dummy-lang"))) (TRUE))
                xtest_plural_non_django_language.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_language)).apply)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xngettext)).apply ("year") ("years") (2))) ("years"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) (TRUE))))
              seq
                xtest_i18n_disabled.write
                  [xself]
                    memory > xmocked_sender
                    seq > @
                      (((unsupported)).apply)
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                        bogusForceDataize.write (((((xmocked_sender).xwatch_dir).xassert_not_called)).apply)
                xtest_i18n_enabled.write
                  [xself]
                    memory > xmocked_sender
                    seq > @
                      seq
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xmocked_sender).xwatch_dir).xcall_count)) (1))
                xtest_i18n_locale_paths.write
                  [xself]
                    memory > xmocked_sender
                    seq > @
                      seq
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xapp_dir)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ((xapp_dir)))))))
                              bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                            bogusForceDataize.write (((((xmocked_sender).xwatch_dir).xassert_any_call)).apply ((((xPath)).apply ((xapp_dir)))) ("**/*.mo"))
                xtest_i18n_app_dirs.write
                  [xself]
                    memory > xmocked_sender
                    memory > xproject_dir
                    seq > @
                      seq
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("tests.i18n.sampleproject"))))))
                          bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                        xproject_dir.write ((((((xPath)).apply ((x__file__))).xparent).div "sampleproject").div "locale")
                        bogusForceDataize.write (((((xmocked_sender).xwatch_dir).xassert_any_call)).apply ((xproject_dir)) ("**/*.mo"))
                xtest_i18n_app_dirs_ignore_django_apps.write
                  [xself]
                    memory > xmocked_sender
                    seq > @
                      seq
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("django.contrib.admin"))))))
                          bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                        bogusForceDataize.write (((((xmocked_sender).xwatch_dir).xassert_called_once_with)).apply ((((xPath)).apply ("locale"))) ("**/*.mo"))
                xtest_i18n_local_locale.write
                  [xself]
                    memory > xlocale_dir
                    memory > xmocked_sender
                    seq > @
                      seq
                        xmocked_sender.write ((((xmock).xMagicMock)).apply)
                        bogusForceDataize.write (((xwatch_for_translation_changes)).apply ((xmocked_sender)))
                        xlocale_dir.write (((((xPath)).apply ((x__file__))).xparent).div "locale")
                        bogusForceDataize.write (((((xmocked_sender).xwatch_dir).xassert_any_call)).apply ((xlocale_dir)) ("**/*.mo"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xgettext_translations)) ((((((xgettext_module).x_translations).xcopy)).apply)))
                        (((unsupported)).apply (((xself).xtrans_real_translations)) ((((((xtrans_real).x_translations).xcopy)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xgettext).x_translations)) (((xself).xgettext_translations)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) (((xself).xtrans_real_translations)))
                xtest_ignores_non_mo_files.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply (((xgettext_module).x_translations)) ((((unsupported)).apply ("foo") ("bar"))))
                        xpath.write (((xPath)).apply ("test.py"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xtranslation_file_changed)).apply ("None: is there a None literal in the EO language?") ((xpath)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgettext_module).x_translations)) ((((unsupported)).apply ("foo") ("bar"))))
                xtest_resets_cache_with_mo_files.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply (((xgettext_module).x_translations)) ((((unsupported)).apply ("foo") ("bar"))))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply ("foo") ("bar"))))
                        (((unsupported)).apply (((xtrans_real).x_default)) (1))
                        (((unsupported)).apply (((xtrans_real).x_active)) (FALSE))
                        xpath.write (((xPath)).apply ("test.mo"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtranslation_file_changed)).apply ("None: is there a None literal in the EO language?") ((xpath)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgettext_module).x_translations)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xtrans_real).x_default)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtrans_real).x_active)) ((xLocal)))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_round_away_from_one.write
                [xself]
                  memory > xtests
                  seq > @
                    seq
                      xtests.write (((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (0.0) (0))) ((((unsupported)).apply (0.25) (0))) ((((unsupported)).apply (0.5) (0))) ((((unsupported)).apply (0.75) (0))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1.0) (1))) ((((unsupported)).apply (1.25) (2))) ((((unsupported)).apply (1.5) (2))) ((((unsupported)).apply (1.75) (2))) ((((unsupported)).apply ((0.0.neg)) (0))) ((((unsupported)).apply ((0.25.neg)) ((1.neg)))) ((((unsupported)).apply ((0.5.neg)) ((1.neg)))) ((((unsupported)).apply ((0.75.neg)) ((1.neg)))) ((((unsupported)).apply ((1.neg)) ((1.neg)))) ((((unsupported)).apply ((1.0.neg)) ((1.neg)))) ((((unsupported)).apply ((1.25.neg)) ((2.neg)))) ((((unsupported)).apply ((1.5.neg)) ((2.neg)))) ((((unsupported)).apply ((1.75.neg)) ((2.neg)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround_away_from_one)).apply ((xvalue)))) ((xexpected)))