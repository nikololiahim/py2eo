memory > xValueError
memory > xIntegerField
memory > xFloatField
memory > xsuper
memory > xAggregate
memory > xStatAggregate
[] > statistics
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xempty_result_set_value
        memory > x__all__
        memory > x__init__
        memory > xoutput_field
        memory > xfunction
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("CovarPop") ("Corr") ("RegrAvgX") ("RegrAvgY") ("RegrCount") ("RegrIntercept") ("RegrR2") ("RegrSlope") ("RegrSXX") ("RegrSXY") ("RegrSYY") ("StatAggregate"))
            (((unsupported)).apply ((xAggregate)))
              seq
                xoutput_field.write (((xFloatField)).apply)
                x__init__.write
                  [xself xy xx xoutput_field xfilter xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((xx).not).or ((xy).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Both y and x must be provided."))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xy)) ((xx)) ((xoutput_field)) ((xfilter)) ((xdefault)))
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "CORR"
            (((unsupported)).apply ((xStatAggregate)))
              x__init__.write
                [xself xy xx xsample xfilter xdefault]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((xself).xfunction)) (((xsample).if "COVAR_SAMP" "COVAR_POP")))
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xy)) ((xx)) ((xfilter)) ((xdefault)))
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_AVGX"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_AVGY"
            (((unsupported)).apply ((xStatAggregate)))
              seq
                xfunction.write "REGR_COUNT"
                xoutput_field.write (((xIntegerField)).apply)
                xempty_result_set_value.write 0
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_INTERCEPT"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_R2"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_SLOPE"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_SXX"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_SXY"
            (((unsupported)).apply ((xStatAggregate)))
              xfunction.write "REGR_SYY"