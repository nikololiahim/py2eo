memory > xthreading
memory > xb
memory > xqueue
memory > xsched
memory > xTimer
memory > xx
memory > xsupport
memory > xpriority
memory > xunittest
memory > x__name__
memory > xa
[] > test_sched
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_run_non_blocking
        memory > xadvance
        memory > xsleep
        memory > xtime
        memory > xtest_priority
        memory > xtest_cancel
        memory > xtest_enter_concurrent
        memory > xtest_empty
        memory > xtest_args_kwargs
        memory > xtest_cancel_concurrent
        memory > xtest_queue
        memory > xTIMEOUT
        memory > xtest_enter
        memory > x__init__
        memory > xtest_enterabs
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xTIMEOUT.write 10
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_cond)) (((((xthreading).xCondition)).apply)))
                        (((unsupported)).apply (((xself).x_time)) (1))
                        (((unsupported)).apply (((xself).x_stop)) (1))
                xtime.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_cond)))
                        (((unsupported)).apply (((xself).x_time)))
                xsleep.write
                  [xself xt]
                    seq > @
                      seq
                        (((unsupported)).apply (((xt).geq 0)))
                        (((unsupported)).apply (((xself).x_cond)))
                          seq
                            (((unsupported)).apply ((xt)) (((xself).x_time)))
                            while.
                              (((xself).x_stop).less (xt))
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).x_time)) (((xself).x_stop)))
                                    bogusForceDataize.write (((((xself).x_cond).xwait)).apply)
                            (((unsupported)).apply (((xself).x_time)) ((xt)))
                xadvance.write
                  [xself xt]
                    seq > @
                      seq
                        (((unsupported)).apply (((xt).geq 0)))
                        (((unsupported)).apply (((xself).x_cond)))
                          seq
                            (((unsupported)).apply (((xself).x_stop)) ((xt)))
                            bogusForceDataize.write (((((xself).x_cond).xnotify_all)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_enter.write
                  [xself]
                    memory > xscheduler
                    memory > xfun
                    memory > xz
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0.5) (0.4) (0.3) (0.2) (0.1))))
                          xz.write ((((xscheduler).xenter)).apply ((xx)) (1) ((xfun)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply (0.1) (0.2) (0.3) (0.4) (0.5))))
                xtest_enterabs.write
                  [xself]
                    memory > xscheduler
                    memory > xfun
                    memory > xz
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0.05) (0.04) (0.03) (0.02) (0.01))))
                          xz.write ((((xscheduler).xenterabs)).apply ((xx)) (1) ((xfun)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply (0.01) (0.02) (0.03) (0.04) (0.05))))
                xtest_enter_concurrent.write
                  [xself]
                    memory > xtimer
                    memory > xz
                    memory > xq
                    memory > xfun
                    memory > xt
                    memory > xscheduler
                    seq > @
                      seq
                        xq.write ((((xqueue).xQueue)).apply)
                        xfun.write ((xq).xput)
                        xtimer.write (((xTimer)).apply)
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtimer).xtime)) (((xtimer).xsleep)))
                        bogusForceDataize.write ((((xscheduler).xenter)).apply (1) (1) ((xfun)) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xscheduler).xenter)).apply (3) (1) ((xfun)) ((((unsupported)).apply (3))))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) (((xscheduler).xrun)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (4) (5) (2))))
                          xz.write ((((xscheduler).xenter)).apply (((xx).sub 1)) (1) ((xfun)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (3))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (4))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (5))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1000))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xt)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimer).xtime)).apply)) (5))
                xtest_priority.write
                  [xself]
                    memory > xscheduler
                    memory > xfun
                    memory > xz
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        (((unsupported)).apply ((xpriority)) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                          xz.write ((((xscheduler).xenterabs)).apply (0.01) ((xpriority)) ((xfun)) ((((unsupported)).apply ((xpriority)))))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                xtest_cancel.write
                  [xself]
                    memory > xscheduler
                    memory > xl
                    memory > xfun
                    memory > xevent1
                    memory > xevent5
                    memory > xevent2
                    memory > xevent4
                    memory > xevent3
                    memory > xnow
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        xnow.write ((((xtime).xtime)).apply)
                        xevent1.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.01)) (1) ((xfun)) ((((unsupported)).apply (0.01))))
                        xevent2.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.02)) (1) ((xfun)) ((((unsupported)).apply (0.02))))
                        xevent3.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.03)) (1) ((xfun)) ((((unsupported)).apply (0.03))))
                        xevent4.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.04)) (1) ((xfun)) ((((unsupported)).apply (0.04))))
                        xevent5.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.05)) (1) ((xfun)) ((((unsupported)).apply (0.05))))
                        bogusForceDataize.write ((((xscheduler).xcancel)).apply ((xevent1)))
                        bogusForceDataize.write ((((xscheduler).xcancel)).apply ((xevent5)))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply (0.02) (0.03) (0.04))))
                xtest_cancel_concurrent.write
                  [xself]
                    memory > xtimer
                    memory > xq
                    memory > xfun
                    memory > xevent1
                    memory > xevent5
                    memory > xevent2
                    memory > xevent4
                    memory > xevent3
                    memory > xnow
                    memory > xt
                    memory > xscheduler
                    seq > @
                      seq
                        xq.write ((((xqueue).xQueue)).apply)
                        xfun.write ((xq).xput)
                        xtimer.write (((xTimer)).apply)
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtimer).xtime)) (((xtimer).xsleep)))
                        xnow.write ((((xtimer).xtime)).apply)
                        xevent1.write ((((xscheduler).xenterabs)).apply (((xnow).add 1)) (1) ((xfun)) ((((unsupported)).apply (1))))
                        xevent2.write ((((xscheduler).xenterabs)).apply (((xnow).add 2)) (1) ((xfun)) ((((unsupported)).apply (2))))
                        xevent4.write ((((xscheduler).xenterabs)).apply (((xnow).add 4)) (1) ((xfun)) ((((unsupported)).apply (4))))
                        xevent5.write ((((xscheduler).xenterabs)).apply (((xnow).add 5)) (1) ((xfun)) ((((unsupported)).apply (5))))
                        xevent3.write ((((xscheduler).xenterabs)).apply (((xnow).add 3)) (1) ((xfun)) ((((unsupported)).apply (3))))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) (((xscheduler).xrun)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xscheduler).xcancel)).apply ((xevent2)))
                        bogusForceDataize.write ((((xscheduler).xcancel)).apply ((xevent5)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (3))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xTIMEOUT)))) (4))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xtimer).xadvance)).apply (1000))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xt)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtimer).xtime)).apply)) (4))
                xtest_empty.write
                  [xself]
                    memory > xscheduler
                    memory > xfun
                    memory > xz
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xscheduler).xempty)).apply)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0.05) (0.04) (0.03) (0.02) (0.01))))
                          xz.write ((((xscheduler).xenterabs)).apply ((xx)) (1) ((xfun)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xscheduler).xempty)).apply)))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xscheduler).xempty)).apply)))
                xtest_queue.write
                  [xself]
                    memory > xe3
                    memory > xscheduler
                    memory > xe4
                    memory > xfun
                    memory > xe2
                    memory > xe5
                    memory > xnow
                    memory > xl
                    memory > xe1
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        xnow.write ((((xtime).xtime)).apply)
                        xe5.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.05)) (1) ((xfun)))
                        xe1.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.01)) (1) ((xfun)))
                        xe2.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.02)) (1) ((xfun)))
                        xe4.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.04)) (1) ((xfun)))
                        xe3.write ((((xscheduler).xenterabs)).apply (((xnow).add 0.03)) (1) ((xfun)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xscheduler).xqueue)) ((((unsupported)).apply ((xe1)) ((xe2)) ((xe3)) ((xe4)) ((xe5)))))
                xtest_args_kwargs.write
                  [xself]
                    memory > xseq
                    memory > xscheduler
                    memory > xfun
                    memory > xnow
                    seq > @
                      seq
                        xseq.write (((unsupported)).apply)
                        xfun.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xseq).xappend)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        xnow.write ((((xtime).xtime)).apply)
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        bogusForceDataize.write ((((xscheduler).xenterabs)).apply ((xnow)) (1) ((xfun)))
                        (((unsupported)).apply (((xscheduler).xenterabs)) ((xnow)) (1) ((xfun)) ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply (((xscheduler).xenterabs)) ((xnow)) (1) ((xfun)) ((((unsupported)).apply ("a") ("b"))))
                        (((unsupported)).apply (((xscheduler).xenterabs)) ((xnow)) (1) ((xfun)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("foo") (3))))
                        bogusForceDataize.write ((((xscheduler).xrun)).apply)
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xseq)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("foo") (3))))))))
                xtest_run_non_blocking.write
                  [xself]
                    memory > xscheduler
                    memory > xfun
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xfun.write (((unsupported)).apply (((((xl).xappend)).apply ((xx)))))
                        xscheduler.write ((((xsched).xscheduler)).apply (((xtime).xtime)) (((xtime).xsleep)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (10) (9) (8) (7) (6))))
                          bogusForceDataize.write ((((xscheduler).xenter)).apply ((xx)) (1) ((xfun)) ((((unsupported)).apply ((xx)))))
                        (((unsupported)).apply (((xscheduler).xrun)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)