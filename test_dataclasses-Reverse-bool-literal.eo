memory > xd
memory > xk
memory > xinspect
memory > xGeneric
memory > xD
memory > xC
memory > xtoken
memory > xfield
memory > xmake_dataclass
memory > xInitVar
memory > xSimpleNameSpace
memory > xinit_base
memory > xcomplex
memory > xAttributeError
memory > xClassVar
memory > xc
memory > xNotDataClass
memory > xget_type_hints
memory > xexpected
memory > xpickle
memory > xlist
memory > xPoint3D
memory > xenumerate
memory > xSubclass
memory > xempty
memory > xz
memory > xTuple
memory > xValueError
memory > xNonDataDerived
memory > xstr
memory > xQ
memory > xres_no_defined_hash
memory > xlabel
memory > xC0
memory > xis_dataclass
memory > xusers
memory > xg
memory > xBase
memory > xOrderedDict
memory > xfields
memory > xt
memory > xB
memory > xdataclass
memory > xcompare
memory > xdeque
memory > xS
memory > xrange
memory > xtotal_ordering
memory > xb
memory > xDerived
memory > xDate
memory > xT
memory > xnew_field
memory > xreplace
memory > xUserId
memory > xeq
memory > xBar
memory > xcase
memory > xStopIteration
memory > xl
memory > xKeyError
memory > xField
memory > xfn
memory > xproto
memory > xbase
memory > xPoint3Dv1
memory > xP
memory > xcontent
memory > xgroup
memory > xnamedtuple
memory > xhash_
memory > xdataclass_module_2_str
memory > xTypeVar
memory > xinit_derived
memory > xasdict
memory > xtypestr
memory > xFoo
memory > xCustomError
memory > xfrozen
memory > xkw
memory > xBaz
memory > xtype
memory > xGroupTuple
memory > xdataclass_textanno
memory > xclassname
memory > xf
memory > xw
memory > xset
memory > xrepr
memory > xint
memory > xGroupDict
memory > xBase2
memory > xException
memory > xsample
memory > xdataclass_module_2
memory > xhasattr
memory > xDict
memory > xx
memory > xbad_field
memory > xi
memory > xF
memory > xR
memory > xmonth
memory > xbuiltins
memory > xsuper
memory > xs
memory > xunsafe_hash
memory > xList
memory > xm
memory > xtuple
memory > xres_defined_hash
memory > xsorted
memory > xDeprecationWarning
memory > xfloat
memory > xDataDerived
memory > xcls
memory > xobj
memory > xFrozenInstanceError
memory > xPoint
memory > xC1
memory > xintermediate_class
memory > xAny
memory > xchild
memory > xgetattr
memory > xid
memory > xMock
memory > xParent
memory > xiter
memory > xe
memory > xdataclass_module_1
memory > xvars
memory > xday
memory > xE
memory > xChild
memory > xnon_empty
memory > xname
memory > xunittest
memory > xresult
memory > xLabeledBox
memory > xidx
memory > xy
memory > xhash
memory > xBase1
memory > xinit_param
memory > xnext
memory > xobject
memory > xA
memory > xtyp
memory > xastuple
memory > xorder
memory > xMISSING
memory > xdataclass_module_1_str
memory > xOptional
memory > xfield_name
memory > xdict
memory > xj
memory > xMutable
memory > xUser
memory > xlen
memory > xUnion
memory > xTypeError
memory > xGroupList
memory > x__name__
memory > xyear
memory > xselfx
memory > xa
[] > test_dataclasses
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_hash_no_args
        memory > xtest_helper_asdict_builtin_containers
        memory > xtest_non_descriptor
        memory > xtest_field_repr
        memory > xtest_overwrite_hash
        memory > xtest_set_name
        memory > xtest_no_mutate_namespace
        memory > xtest_class_var_no_default
        memory > xtest_helper_astuple_builtin_object_containers
        memory > xtest_helper_fields_with_class_instance
        memory > xtest_invalid_type_specification
        memory > xtest_helper_asdict_namedtuple_derived
        memory > xtest_docstring_two_fields
        memory > xtest_init_var
        memory > xtest_default_factory_not_called_if_value_given
        memory > xtest_eq_only
        memory > xtest_missing_default_factory
        memory > xtest_0_field_compare
        memory > xtest_docstring_deque_field_with_default_factory
        memory > xtest_recursive_repr_indirection
        memory > xtest_class_var_default_factory
        memory > xtest_helper_astuple_raises_on_classes
        memory > xtest_inherit_nonfrozen_from_empty_frozen
        memory > xtest_inherit_nonfrozen_from_empty
        memory > xtest_post_init_staticmethod
        memory > xtest_isnt_initvar
        memory > xtest_not_in_repr
        memory > xtest_helper_astuple_builtin_containers
        memory > xtest_hash_field_rules
        memory > xtest_field_default_default_factory_error
        memory > xtest_invalid_field_name
        memory > xtest_post_init_classmethod
        memory > xtest_existing_docstring_not_overridden
        memory > xtest_field_named_like_builtin
        memory > xtest_one_field_no_default
        memory > xtest_eq_order
        memory > xtest_helper_astuple_nested
        memory > xtest_functools_total_ordering
        memory > xtest_funny_class_names_names
        memory > xtest_field_metadata_custom_mapping
        memory > xtest_inherit_frozen_from_nonfrozen
        memory > xtest_simple_compare
        memory > xtest_generic_dynamic
        memory > xtest_items_in_dicts
        memory > xtest_simple
        memory > xtest_not_in_compare
        memory > xtest_non_frozen_normal_derived
        memory > xtest_default_factory
        memory > xtest_underscore_field_names
        memory > xtest_is_dataclass_when_getattr_always_returns
        memory > xtest_helper_astuple_copy_values
        memory > xtest_helper_asdict_raises_on_classes
        memory > xtest_classvar
        memory > xtest_overwriting_frozen
        memory > xtest_no_fields
        memory > xtest_generic_extending
        memory > xtest_alternate_classmethod_constructor
        memory > xtest_docstring_one_field_with_default
        memory > xtest_overwriting_init
        memory > xtest_frozen_hash
        memory > xtest_repr
        memory > xtest_inherit
        memory > xassertDocStrEqual
        memory > xtest
        memory > xtest_text_annotations
        memory > xtest_lookup_on_class
        memory > xtest_init_in_order
        memory > xtest_init_var_no_default
        memory > xtest_base_has_init
        memory > xtest_docstring_list_field_with_default_factory
        memory > xtest_helper_asdict_copy_values
        memory > xtest_lookup_on_instance
        memory > xtest_docstring_deque_field
        memory > xtest_other_params
        memory > xtest_hash_rules
        memory > xtest_duplicate_field_names
        memory > xtest_inherit_nonfrozen_from_frozen
        memory > xtest_helper_asdict_namedtuple
        memory > xtest_initvar_is_specified
        memory > xtest_intermediate_non_dataclass
        memory > xtest_isnt_classvar
        memory > xtest_class_marker
        memory > xtest_compare_subclasses
        memory > xtest_helper_astuple
        memory > xtest_no_types
        memory > xtest_dont_include_other_annotations
        memory > xtest_frozen
        memory > xtest_field_named_object_frozen
        memory > xtest_helper_asdict_namedtuple_key
        memory > xtest_field_without_annotation_but_annotation_in_base
        memory > xtest_default_factory_derived
        memory > xtest_classvar_default_factory
        memory > xtest_init_false_no_default
        memory > xtest_helper_asdict_builtin_object_containers
        memory > xtest_recursive_repr_indirection_two
        memory > xtest_class_var_frozen
        memory > xtest_field_order
        memory > xtest_field_without_annotation
        memory > xtest_helper_astuple_factory
        memory > xtest_function_annotations
        memory > xtest_post_init_super
        memory > xtest_docstring_one_field
        memory > xtest_helper_asdict_nested
        memory > xtest_recursive_repr_misc_attrs
        memory > xtest_class_var
        memory > xtest_init_var_preserve_type
        memory > xtest_field_named_object
        memory > xtest_inherit_from_normal_class
        memory > xtest_no_fields_but_member_variable
        memory > xtest_recursive_repr
        memory > xtest_default_factory_with_no_init
        memory > xtest_docstring_three_fields
        memory > xtest_init_var_inheritance
        memory > xtest_initvar
        memory > xtest_disallowed_mutable_defaults
        memory > xtest_field_named_like_builtin_frozen
        memory > xtest_field_without_annotation_but_annotation_in_base_not_dataclass
        memory > xtest_init_var_default_factory
        memory > xtest_deliberately_mutable_defaults
        memory > xtest_derived_added_field
        memory > xtest_no_options
        memory > xtest_field_metadata_mapping
        memory > xtest_classvar_module_level_import
        memory > xtest_overwriting_eq
        memory > xtest_1_field_compare
        memory > xtest_post_init
        memory > xtest_no_init
        memory > xtest_initvar_with_default_value
        memory > xtest_overwriting_order
        memory > xtest_base
        memory > xtest_base_dataclass
        memory > xtest_init_var_with_default
        memory > xtest_helper_fields_exception
        memory > xtest_helper_asdict_factory
        memory > xtest_class_attrs
        memory > xtest_field_named_self
        memory > xtest_keyword_field_names
        memory > xtest_unsafe_hash
        memory > xtest_docstring_list_field
        memory > xtest_helper_astuple_namedtuple
        memory > xtest_named_init_params
        memory > xtest_helper_asdict
        memory > xtest_dataclassses_pickleable
        memory > xtest_0_field_hash
        memory > xtest_field_default
        memory > xtest_non_identifier_field_names
        memory > xtest_invalid_object
        memory > xtest_is_dataclass
        memory > xtest_no_repr
        memory > xtest_class_var_with_default
        memory > xtest_overwrite_fields_in_derived_class
        memory > xtest_not_tuple
        memory > xtest_1_field_hash
        memory > xtest_field_metadata_default
        memory > xtest_dynamic_class_creation_using_field
        memory > xtest_recursive_repr_two_attrs
        memory > xtest_two_fields_one_default
        memory > xtest_dynamic_class_creation
        memory > xtest_docstring_one_field_with_default_none
        memory > xtest_field_no_default
        memory > xtest_generic_dataclasses
        memory > xtest_no_eq
        memory > xtest_missing_repr
        memory > xtest_docstring_no_fields
        memory > xtest_overwriting_repr
        memory > xtest_not_other_dataclass
        memory > xtest_missing_default
        memory > xtest_no_order
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_no_fields.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                        xo.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xC)))))) (0))
                xtest_no_fields_but_member_variable.write
                  [xself]
                    memory > xo
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          xi.write 0
                        xo.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xC)))))) (0))
                xtest_one_field_no_default.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        xo.write (((xC)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xx)) (42))
                xtest_field_default_default_factory_error.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "cannot specify both default and default_factory"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xdataclass)))
                            (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) (1) ((xint)))))
                xtest_field_repr.write
                  [xself]
                    memory > xrepr_output
                    memory > xint_field
                    memory > xexpected_output
                    seq > @
                      seq
                        xint_field.write (((unsupported)).apply ((xfield)) (1) (TRUE) (FALSE))
                        (((unsupported)).apply (((xint_field).xname)) ("id"))
                        xrepr_output.write (((xrepr)).apply ((xint_field)))
                        xexpected_output.write "Field(name='id',type=None,default=1,default_factory={MISSING!r},init=True,repr=False,hash=None,compare=True,metadata=mappingproxy({}),_field_type=None)"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrepr_output)) ((xexpected_output)))
                xtest_named_init_params.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        xo.write (((unsupported)).apply ((xC)) (32))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xx)) (32))
                xtest_two_fields_one_default.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                        xo.write (((xC)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xo).xx)) (((xo).xy)))) ((((unsupported)).apply (3) (0))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("non-default argument 'y' follows default argument"))))
                          (((unsupported)).apply ((xdataclass)))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)) (0))
                              (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("non-default argument 'y' follows default argument"))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xint)) (0))
                            (((unsupported)).apply ((xB)) ((xdataclass)))
                              (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("non-default argument 'y' follows default argument"))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              seq
                                (((unsupported)).apply ((xx)) ((xint)))
                                (((unsupported)).apply ((xy)) ((xint)))
                            (((unsupported)).apply ((xB)) ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xint)) (0))
                xtest_overwrite_hash.write
                  [xself]
                    memory > x__eq__
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (301))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (100))))) (301))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (100))))) ((((xhash)).apply ((((unsupported)).apply (100))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __hash__"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            x__hash__.write
                              [xself]
                                seq > @
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself]
                                seq > @
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (10))))) ((((xhash)).apply ((((unsupported)).apply (10))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __hash__"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__eq__.write
                                [xself]
                                  seq > @
                              x__hash__.write
                                [xself]
                                  seq > @
                xtest_overwrite_fields_in_derived_class.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xAny)) (15.0))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                        (((unsupported)).apply ((xBase)) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xz)) ((xint)) (10))
                            (((unsupported)).apply ((xx)) ((xint)) (15))
                        xo.write (((xBase)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xo)))) ("TestCase.test_overwrite_fields_in_derived_class.<locals>.Base(x=15.0, y=0)"))
                        xo.write (((xC1)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xo)))) ("TestCase.test_overwrite_fields_in_derived_class.<locals>.C1(x=15, y=0, z=10)"))
                        xo.write (((unsupported)).apply ((xC1)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xo)))) ("TestCase.test_overwrite_fields_in_derived_class.<locals>.C1(x=5, y=0, z=10)"))
                xtest_field_named_self.write
                  [xself]
                    memory > xfirst
                    memory > xc
                    memory > xsig
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xself)) ((xstr)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xself)) ("foo"))
                        xsig.write ((((xinspect).xsignature)).apply (((xC).x__init__)))
                        xfirst.write (((xnext)).apply ((((xiter)).apply (((xsig).xparameters)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ("self") ((xfirst)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xselfx)) ((xstr)))
                        xsig.write ((((xinspect).xsignature)).apply (((xC).x__init__)))
                        xfirst.write (((xnext)).apply ((((xiter)).apply (((xsig).xparameters)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("self") ((xfirst)))
                xtest_field_named_object.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xobject)) ((xstr)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xobject)) ("foo"))
                xtest_field_named_object_frozen.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xobject)) ((xstr)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xobject)) ("foo"))
                xtest_field_named_like_builtin.write
                  [xself]
                    memory > xc
                    memory > xattributes
                    memory > xbuiltins_names
                    memory > xC
                    memory > xexclusions
                    seq > @
                      seq
                        xexclusions.write (((unsupported)).apply ("None") ("True") ("False"))
                        xbuiltins_names.write (((xsorted)).apply ((((unsupported)).apply ((xb)) ((xb)) ((((((xbuiltins).x__dict__).xkeys)).apply)) (((((((xb).xstartswith)).apply ("__")).not).and (((unsupported)).apply ((xb)) ((xexclusions))))))))
                        xattributes.write (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xstr)))) ((xname)) ((xbuiltins_names)))
                        xC.write (((xmake_dataclass)).apply ("C") ((xattributes)))
                        xc.write (((xC)).apply ((((unsupported)).apply ((((unsupported)).apply ((xname)) ((xname)) ((xbuiltins_names)))))))
                        (((unsupported)).apply ((xname)) ((xbuiltins_names)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xc)) ((xname)))) ((xname)))
                xtest_field_named_like_builtin_frozen.write
                  [xself]
                    memory > xc
                    memory > xattributes
                    memory > xbuiltins_names
                    memory > xC
                    memory > xexclusions
                    seq > @
                      seq
                        xexclusions.write (((unsupported)).apply ("None") ("True") ("False"))
                        xbuiltins_names.write (((xsorted)).apply ((((unsupported)).apply ((xb)) ((xb)) ((((((xbuiltins).x__dict__).xkeys)).apply)) (((((((xb).xstartswith)).apply ("__")).not).and (((unsupported)).apply ((xb)) ((xexclusions))))))))
                        xattributes.write (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xstr)))) ((xname)) ((xbuiltins_names)))
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((xattributes)) (TRUE))
                        xc.write (((xC)).apply ((((unsupported)).apply ((((unsupported)).apply ((xname)) ((xname)) ((xbuiltins_names)))))))
                        (((unsupported)).apply ((xname)) ((xbuiltins_names)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xc)) ((xname)))) ((xname)))
                xtest_0_field_compare.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xC0)) ((xC1)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcls)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcls)).apply)) ((((xcls)).apply)))
                              (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).less (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).greater (xb))))) ((((unsupported)).apply (((xa).geq (xb))))))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not supported between instances of '{cls.__name__}' and '{cls.__name__}'"))))
                                    bogusForceDataize.write (((xfn)).apply ((((xcls)).apply)) ((((xcls)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xC)).apply)) ((((xC)).apply)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xC)).apply)) ((((xC)).apply)))
                xtest_1_field_compare.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xC0)) ((xC1)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcls)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcls)).apply (1))) ((((xcls)).apply (1))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xcls)).apply (0))) ((((xcls)).apply (1))))
                              (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).less (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).greater (xb))))) ((((unsupported)).apply (((xa).geq (xb))))))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not supported between instances of '{cls.__name__}' and '{cls.__name__}'"))))
                                    bogusForceDataize.write (((xfn)).apply ((((xcls)).apply (0))) ((((xcls)).apply (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xC)).apply (0))) ((((xC)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xC)).apply (0))) ((((xC)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xC)).apply (1))) ((((xC)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (1))))
                xtest_simple_compare.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xC0)) ((xC1)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcls)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcls)).apply (0) (0))) ((((xcls)).apply (0) (0))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcls)).apply (1) (2))) ((((xcls)).apply (1) (2))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xcls)).apply (1) (0))) ((((xcls)).apply (0) (0))))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xcls)).apply (1) (0))) ((((xcls)).apply (1) (1))))
                              (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).less (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).greater (xb))))) ((((unsupported)).apply (((xa).geq (xb))))))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not supported between instances of '{cls.__name__}' and '{cls.__name__}'"))))
                                    bogusForceDataize.write (((xfn)).apply ((((xcls)).apply (0) (0))) ((((xcls)).apply (0) (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).eq (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).geq (xb))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (0) (0))) ((((xC)).apply (0) (0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).less (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).neq (xb))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (0) (0))) ((((xC)).apply (0) (1))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (0) (1))) ((((xC)).apply (1) (0))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (1) (0))) ((((xC)).apply (1) (1))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).greater (xb))))) ((((unsupported)).apply (((xa).geq (xb))))) ((((unsupported)).apply (((xa).neq (xb))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (0) (1))) ((((xC)).apply (0) (0))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (1) (0))) ((((xC)).apply (0) (1))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((((xC)).apply (1) (1))) ((((xC)).apply (1) (0))))))
                xtest_compare_subclasses.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((((unsupported)).apply ((xfn)) ((xexpected)))))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).eq (xb))))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((xa).neq (xb))))) (TRUE))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfn)).apply ((((xB)).apply (0))) ((((xC)).apply (0))))) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xfn)))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xa).less (xb))))) ((((unsupported)).apply (((xa).leq (xb))))) ((((unsupported)).apply (((xa).greater (xb))))) ((((unsupported)).apply (((xa).geq (xb))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xidx)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("not supported between instances of 'B' and 'C'"))))
                              bogusForceDataize.write (((xfn)).apply ((((xB)).apply (0))) ((((xC)).apply (0))))
                xtest_eq_order.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xeq)) ((xorder)) ((xresult)))) ((((unsupported)).apply ((((unsupported)).apply (FALSE) (FALSE) ("neither"))) ((((unsupported)).apply (FALSE) (TRUE) ("exception"))) ((((unsupported)).apply (TRUE) (FALSE) ("eq_only"))) ((((unsupported)).apply (TRUE) (TRUE) ("both"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xeq)) ((xorder)))))
                          ((xresult).eq "exception").if
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("eq must be false if order is false"))))
                              (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) ((xeq)) ((xorder)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) ((xeq)) ((xorder)))))
                              ((xresult).eq "neither").if
                                seq
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__eq__") (((xC).x__dict__)))
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__lt__") (((xC).x__dict__)))
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__le__") (((xC).x__dict__)))
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__gt__") (((xC).x__dict__)))
                                  bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__ge__") (((xC).x__dict__)))
                                ((xresult).eq "both").if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ("__eq__") (((xC).x__dict__)))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ("__lt__") (((xC).x__dict__)))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ("__le__") (((xC).x__dict__)))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ("__gt__") (((xC).x__dict__)))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ("__ge__") (((xC).x__dict__)))
                                  ((xresult).eq "eq_only").if
                                    seq
                                      bogusForceDataize.write ((((xself).xassertIn)).apply ("__eq__") (((xC).x__dict__)))
                                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__lt__") (((xC).x__dict__)))
                                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__le__") (((xC).x__dict__)))
                                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__gt__") (((xC).x__dict__)))
                                      bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__ge__") (((xC).x__dict__)))
                                    (((unsupported)).apply (FALSE) ("unknown result {result!r}"))
                xtest_field_no_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((xfield)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (5)).xx)) (5))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument: 'x'"))))
                          bogusForceDataize.write (((xC)).apply)
                xtest_field_default.write
                  [xself]
                    memory > xc
                    memory > xdefault
                    seq > @
                      seq
                        xdefault.write (((xobject)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xobject)) ((((unsupported)).apply ((xfield)) ((xdefault)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xC).xx)) ((xdefault)))
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (10))
                        (((unsupported)).apply ((((unsupported)).apply (((xc).xx)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xc).xx)) ((xdefault)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xC)).apply).xx)) ((xdefault)))
                xtest_not_in_repr.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xC)).apply)
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestCase.test_not_in_repr.<locals>.C()"))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE))))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xc.write (((xC)).apply (10) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestCase.test_not_in_repr.<locals>.C(y=20)"))
                xtest_not_in_compare.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) (0))
                            (((unsupported)).apply ((xy)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply)) ((((xC)).apply (0) (20))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1) (10))) ((((xC)).apply (1) (20))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (3))) ((((xC)).apply (4) (10))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (3) (10))) ((((xC)).apply (4) (10))))
                xtest_hash_field_rules.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xhash_)) ((xcompare)) ((xresult)))) ((((unsupported)).apply ((((unsupported)).apply (TRUE) (FALSE) ("field"))) ((((unsupported)).apply (TRUE) (TRUE) ("field"))) ((((unsupported)).apply (FALSE) (FALSE) ("absent"))) ((((unsupported)).apply (FALSE) (TRUE) ("absent"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) ("absent"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) ("field"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xhash_)) ((xcompare)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                              (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) ((xcompare)) ((xhash_)) (5))))
                            ((xresult).eq "field").if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (5))))) ((((xhash)).apply ((((unsupported)).apply (5))))))
                              ((xresult).eq "absent").if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (5))))) ((((xhash)).apply ((((unsupported)).apply)))))
                                (((unsupported)).apply (FALSE) ("unknown result {result!r}"))
                xtest_init_false_no_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((((xC)).apply).x__dict__)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                            (((unsupported)).apply ((xz)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE))))
                            (((unsupported)).apply ((xt)) ((xint)) (10))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("z") (((((xC)).apply (0)).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((((xC)).apply (5))))) ((((unsupported)).apply ("t") (10) ("x") (5) ("y") (0))))
                xtest_class_marker.write
                  [xself]
                    memory > xthe_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xstr)) ((((unsupported)).apply ((xfield)) (FALSE) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply ((xz)) ((xstr)) ((((unsupported)).apply ((xfield)) (FALSE))))
                        xthe_fields.write (((xfields)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xthe_fields)) ((xtuple)))
                        (((unsupported)).apply ((xf)) ((xthe_fields)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xf)))) ((xField)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xf).xname)) (((xC).x__annotations__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xthe_fields)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (0)).xname)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (0)).xtype)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xC)) ("x"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xthe_fields)) (0)).xinit)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xthe_fields)) (0)).xrepr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (1)).xname)) ("y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (1)).xtype)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xgetattr)).apply ((xC)) ("y"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((xthe_fields)) (1)).xinit)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xthe_fields)) (1)).xrepr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (2)).xname)) ("z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xthe_fields)) (2)).xtype)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xC)) ("z"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xthe_fields)) (2)).xinit)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((xthe_fields)) (2)).xrepr)))
                xtest_field_order.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xa)) ((xstr)) ("B:a"))
                            (((unsupported)).apply ((xb)) ((xstr)) ("B:b"))
                            (((unsupported)).apply ((xc)) ((xstr)) ("B:c"))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          (((unsupported)).apply ((xb)) ((xstr)) ("C:b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xf).xname)) (((xf).xdefault)))) ((xf)) ((((xfields)).apply ((xC)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("B:a"))) ((((unsupported)).apply ("b") ("C:b"))) ((((unsupported)).apply ("c") ("B:c"))))))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          (((unsupported)).apply ((xc)) ((xstr)) ("D:c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xf).xname)) (((xf).xdefault)))) ((xf)) ((((xfields)).apply ((xD)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("B:a"))) ((((unsupported)).apply ("b") ("B:b"))) ((((unsupported)).apply ("c") ("D:c"))))))
                        (((unsupported)).apply ((xD)) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xa)) ((xstr)) ("E:a"))
                            (((unsupported)).apply ((xd)) ((xstr)) ("E:d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xf).xname)) (((xf).xdefault)))) ((xf)) ((((xfields)).apply ((xE)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("E:a"))) ((((unsupported)).apply ("b") ("B:b"))) ((((unsupported)).apply ("c") ("D:c"))) ((((unsupported)).apply ("d") ("E:d"))))))
                xtest_class_attrs.write
                  [xself]
                    memory > xdefault
                    seq > @
                      seq
                        xdefault.write (((xobject)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE))))
                            (((unsupported)).apply ((xz)) ((xobject)) ((xdefault)))
                            (((unsupported)).apply ((xt)) ((xint)) ((((unsupported)).apply ((xfield)) (100))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xC)) ("x"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xC)) ("y"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xC).xz)) ((xdefault)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xt)) (100))
                xtest_disallowed_mutable_defaults.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xtyp)) ((xempty)) ((xnon_empty)))) ((((unsupported)).apply ((((unsupported)).apply ((xlist)) ((((unsupported)).apply)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xdict)) ((((unsupported)).apply)) ((((unsupported)).apply (0) (1))))) ((((unsupported)).apply ((xset)) ((((xset)).apply)) ((((xset)).apply ((((unsupported)).apply (1))))))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtyp)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mutable default {typ} for field x is not allowed"))))
                              (((unsupported)).apply ((xdataclass)))
                                (((unsupported)).apply ((xx)) ((xtyp)) ((xempty)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mutable default {typ} for field y is not allowed"))))
                              (((unsupported)).apply ((xdataclass)))
                                (((unsupported)).apply ((xy)) ((xtyp)) ((xnon_empty)))
                            (((unsupported)).apply ((xtyp)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mutable default .*Subclass'> for field z is not allowed"))))
                              (((unsupported)).apply ((xdataclass)))
                                (((unsupported)).apply ((xz)) ((xtyp)) ((((xSubclass)).apply)))
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xz)) ((((unsupported)).apply ((xClassVar)) ((xtyp)))) ((((xtyp)).apply)))
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xtyp)))) ((((xSubclass)).apply)))
                xtest_deliberately_mutable_defaults.write
                  [xself]
                    memory > xo2
                    memory > x__init__
                    memory > xlst
                    memory > xo1
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xl)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xMutable)))
                        xlst.write (((xMutable)).apply)
                        xo1.write (((xC)).apply ((xlst)))
                        xo2.write (((xC)).apply ((xlst)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xo1)) ((xo2)))
                        bogusForceDataize.write ((((((xo1).xx).xl).xextend)).apply ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xo1)) ((xo2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xo1).xx).xl)) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xo1).xx)) (((xo2).xx)))
                xtest_no_options.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xdataclass)).apply)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (42)).xx)) (42))
                xtest_not_tuple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xPoint)).apply (1) (2))) ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xPoint)).apply (1) (3))) ((((xC)).apply (1) (3))))
                xtest_not_other_dataclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                            (((unsupported)).apply ((xz)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xyear)) ((xint)))
                            (((unsupported)).apply ((xmonth)) ((xint)))
                            (((unsupported)).apply ((xday)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xPoint3D)).apply (2017) (6) (3))) ((((xDate)).apply (2017) (6) (3))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xPoint3D)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("unpack"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))) ((((xPoint3D)).apply (4) (5) (6))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) (0))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                            (((unsupported)).apply ((xz)) ((xint)) (0))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xPoint3D)).apply (0) (0) (0))) ((((xPoint3Dv1)).apply)))
                xtest_function_annotations.write
                  [xself]
                    memory > xvalidate_class
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xf.write (((xF)).apply)
                        xvalidate_class.write
                          [xcls]
                            memory > xsignature
                            memory > xparams
                            memory > xparam
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcls).x__annotations__)) ("i"))) ((xint)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcls).x__annotations__)) ("j"))) ((xstr)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcls).x__annotations__)) ("k"))) ((xF)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcls).x__annotations__)) ("l"))) ((xfloat)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcls).x__annotations__)) ("z"))) ((xcomplex)))
                                xsignature.write ((((xinspect).xsignature)).apply (((xcls).x__init__)))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xsignature).xreturn_annotation)) ("None: is there a None literal in the EO language?"))
                                xparams.write (((xiter)).apply ((((((xsignature).xparameters).xvalues)).apply)))
                                xparam.write (((xnext)).apply ((xparams)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xname)) ("self"))
                                xparam.write (((xnext)).apply ((xparams)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xname)) ("i"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xparam).xannotation)) ((xint)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xdefault)) ((((xinspect).xParameter).xempty)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xkind)) ((((xinspect).xParameter).xPOSITIONAL_OR_KEYWORD)))
                                xparam.write (((xnext)).apply ((xparams)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xname)) ("j"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xparam).xannotation)) ((xstr)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xdefault)) ((((xinspect).xParameter).xempty)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xkind)) ((((xinspect).xParameter).xPOSITIONAL_OR_KEYWORD)))
                                xparam.write (((xnext)).apply ((xparams)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xname)) ("k"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xparam).xannotation)) ((xF)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xkind)) ((((xinspect).xParameter).xPOSITIONAL_OR_KEYWORD)))
                                xparam.write (((xnext)).apply ((xparams)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xname)) ("l"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xparam).xannotation)) ((xfloat)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparam).xkind)) ((((xinspect).xParameter).xPOSITIONAL_OR_KEYWORD)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xparams)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            (((unsupported)).apply ((xj)) ((xstr)))
                            (((unsupported)).apply ((xk)) ((xF)) ((xf)))
                            (((unsupported)).apply ((xl)) ((xfloat)) ((((unsupported)).apply ((xfield)) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply ((xz)) ((xcomplex)) ((((unsupported)).apply ((xfield)) ((3.add (((unsupported)).apply))) (FALSE))))
                        bogusForceDataize.write (((xvalidate_class)).apply ((xC)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE) (TRUE))))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            (((unsupported)).apply ((xj)) ((xstr)))
                            (((unsupported)).apply ((xk)) ((xF)) ((xf)))
                            (((unsupported)).apply ((xl)) ((xfloat)) ((((unsupported)).apply ((xfield)) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply ((xz)) ((xcomplex)) ((((unsupported)).apply ((xfield)) ((3.add (((unsupported)).apply))) (FALSE))))
                        bogusForceDataize.write (((xvalidate_class)).apply ((xC)))
                xtest_missing_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) ((xMISSING)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument"))))
                          bogusForceDataize.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument"))))
                          bogusForceDataize.write (((xD)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xD).x__dict__)))
                xtest_missing_default_factory.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) ((xMISSING)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument"))))
                          bogusForceDataize.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) ((xMISSING)) ((xMISSING)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument"))))
                          bogusForceDataize.write (((xD)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xD).x__dict__)))
                xtest_missing_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply ("MISSING_TYPE object") ((((xrepr)).apply ((xMISSING)))))
                xtest_dont_include_other_annotations.write
                  [xself]
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            xfoo.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (4))
                            xbar.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xC).x__annotations__)))) ((((unsupported)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xC)).apply (10)).xfoo)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xbar)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xi)) (10))
                xtest_post_init.write
                  [xself]
                    memory > x__post_init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          x__post_init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xCustomError)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCustomError)))))
                          bogusForceDataize.write (((xC)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)) (10))
                            x__post_init__.write
                              [xself]
                                seq > @
                                  (((xself).xi).eq 10).if
                                    (((unsupported)).apply ((((xCustomError)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCustomError)))))
                          bogusForceDataize.write (((xC)).apply)
                        bogusForceDataize.write (((xC)).apply (5))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          x__post_init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xCustomError)).apply)))
                        bogusForceDataize.write (((xC)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) (0))
                            x__post_init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (2)).xx)) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) (0))
                            x__post_init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          bogusForceDataize.write (((xC)).apply)
                xtest_post_init_super.write
                  [xself]
                    memory > x__post_init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__post_init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xCustomError)).apply)))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          x__post_init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xx)) (5))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          x__post_init__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((((xsuper)).apply).x__post_init__)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCustomError)))))
                          bogusForceDataize.write (((xC)).apply)
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCustomError)))))
                          bogusForceDataize.write (((xC)).apply)
                xtest_post_init_staticmethod.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    memory > xflag
                    seq > @
                      seq
                        xflag.write FALSE
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                            x__post_init__.write
                              []
                                memory > xflag
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    xflag.write TRUE
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xflag)))
                        xc.write (((xC)).apply (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (3) (4))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xflag)))
                xtest_post_init_classmethod.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    memory > xflag
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            xflag.write FALSE
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                            x__post_init__.write
                              [xcls]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xcls).xflag)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xC).xflag)))
                        xc.write (((xC)).apply (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (3) (4))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xC).xflag)))
                xtest_class_var.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (10))
                            (((unsupported)).apply ((xz)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (1000))
                            (((unsupported)).apply ((xw)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (2000))
                            (((unsupported)).apply ((xt)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (3000))
                            (((unsupported)).apply ((xs)) ((xClassVar)) (4000))
                        xc.write (((xC)).apply (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestCase.test_class_var.<locals>.C(x=5, y=10)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xC)))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xC).x__annotations__)))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xw)) (2000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xt)) (3000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xs)) (4000))
                        (((unsupported)).apply (((xC).xz)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1001))
                        xc.write (((xC)).apply (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (20) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1001))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xw)) (2000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xt)) (3000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xs)) (4000))
                xtest_class_var_no_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                xtest_class_var_default_factory.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot have a default factory"))))
                        seq
                          (((unsupported)).apply ((xdataclass)))
                            (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xint)))))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                xtest_class_var_with_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) (10))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xfield)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) (10))
                xtest_class_var_frozen.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (10))
                            (((unsupported)).apply ((xz)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (1000))
                            (((unsupported)).apply ((xw)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (2000))
                            (((unsupported)).apply ((xt)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (3000))
                        xc.write (((xC)).apply (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply (5))))) ("TestCase.test_class_var_frozen.<locals>.C(x=5, y=10)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xC)))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xC).x__annotations__)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xw)) (2000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xt)) (3000))
                        (((unsupported)).apply (((xC).xz)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1001))
                        xc.write (((xC)).apply (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (20) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (1001))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xw)) (2000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xt)) (3000))
                xtest_init_var_no_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xInitVar)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                xtest_init_var_default_factory.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot have a default factory"))))
                        seq
                          (((unsupported)).apply ((xdataclass)))
                            (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xInitVar)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xint)))))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                xtest_init_var_with_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xInitVar)) ((xint)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) (10))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xInitVar)) ((xint)))) ((((unsupported)).apply ((xfield)) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) (10))
                xtest_init_var.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xinit_param)) ((((unsupported)).apply ((xInitVar)) ((xint)))) ("None: is there a None literal in the EO language?"))
                            x__post_init__.write
                              [xself xinit_param]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)).apply (((xself).xx)) (((xinit_param).mul 2)))
                        xc.write (((unsupported)).apply ((xC)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (20))
                xtest_init_var_preserve_type.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xInitVar)) ((xint))).xtype)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xInitVar)) ((xint)))))) ("dataclasses.InitVar[int]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xInitVar)) ((((unsupported)).apply ((xList)) ((xint)))))))) ("dataclasses.InitVar[typing.List[int]]"))
                xtest_init_var_inheritance.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xinit_base)) ((((unsupported)).apply ((xInitVar)) ((xint)))))
                        xb.write (((xBase)).apply (0) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xb)))) ((((unsupported)).apply ("x") (0))))
                        (((unsupported)).apply ((xBase)) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xy)) ((xint)))
                            (((unsupported)).apply ((xinit_derived)) ((((unsupported)).apply ((xInitVar)) ((xint)))))
                            x__post_init__.write
                              [xself xinit_base xinit_derived]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xx)) ((((xself).xx).add (xinit_base))))
                                    (((unsupported)).apply (((xself).xy)) ((((xself).xy).add (xinit_derived))))
                        xc.write (((xC)).apply (10) (11) (50) (51))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xc)))) ((((unsupported)).apply ("x") (21) ("y") (101))))
                xtest_default_factory.write
                  [xself]
                    memory > xc0
                    memory > xc1
                    memory > xl
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)))))
                        xc0.write (((xC)).apply (3))
                        xc1.write (((xC)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc0).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc0).xy)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc0)) ((xc1)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xc0).xy)) (((xc1).xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xC)).apply (5) ((((unsupported)).apply (1))))))) ((((unsupported)).apply (5) ((((unsupported)).apply (1))))))
                        xl.write (((unsupported)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xlist)) ((((unsupported)).apply ((xfield)) ((((unsupported)).apply ((xl)))))))
                        xc0.write (((xC)).apply (3))
                        xc1.write (((xC)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc0).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc0).xy)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc0)) ((xc1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xc0).xy)) (((xc1).xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xC)).apply (5) ((((unsupported)).apply (1))))))) ((((unsupported)).apply (5) ((((unsupported)).apply (1))))))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply)))) ("TestCase.test_default_factory.<locals>.C()"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xx)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xx)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xC)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply)))) ((((xhash)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xC)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply)) ((((xC)).apply ((((unsupported)).apply (1))))))
                xtest_default_factory_with_no_init.write
                  [xself]
                    memory > xfactory
                    seq > @
                      seq
                        xfactory.write (((xMock)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xfactory)) (FALSE))))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfactory).xcall_count)) (1))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfactory).xcall_count)) (2))
                xtest_default_factory_not_called_if_value_given.write
                  [xself]
                    memory > xfactory
                    seq > @
                      seq
                        xfactory.write (((xMock)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) ((((unsupported)).apply ((xfield)) ((xfactory)))))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfactory).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xx)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfactory).xcall_count)) (1))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfactory).xcall_count)) (2))
                xtest_default_factory_derived.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xdict)) ((((unsupported)).apply ((xfield)) ((xdict)))))
                        (((unsupported)).apply ((xFoo)) ((xdataclass)))
                          (((unsupported)).apply ((xy)) ((xint)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xFoo)).apply).xx)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xBar)).apply).xx)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xBar)).apply).xy)) (1))
                        (((unsupported)).apply ((xFoo)) ((xdataclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xBaz)).apply).xx)) ((((unsupported)).apply)))
                xtest_intermediate_non_dataclass.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((xA)))
                          (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          (((unsupported)).apply ((xz)) ((xint)))
                        xc.write (((xC)).apply (1) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xz)))) ((((unsupported)).apply (1) (3))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("object has no attribute"))))
                          unsupported
                        (((unsupported)).apply ((xC)))
                          (((unsupported)).apply ((xt)) ((xint)))
                        xd.write (((xD)).apply (4) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xd).xx)) (((xd).xz)))) ((((unsupported)).apply (4) (5))))
                xtest_classvar_default_factory.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot have a default factory"))))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xint)))))
                xtest_is_dataclass.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply ((xNotDataClass)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply ((((xNotDataClass)).apply)))))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xd)) ((xC)))
                            (((unsupported)).apply ((xe)) ((xint)))
                        xc.write (((xC)).apply (10))
                        xd.write (((xD)).apply ((xc)) (4))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_dataclass)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_dataclass)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply (((xc).xx)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_dataclass)).apply (((xd).xd)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply (((xd).xe)))))
                xtest_is_dataclass_when_getattr_always_returns.write
                  [xself]
                    memory > x__getattr__
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__getattr__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply ((xA)))))
                        xa.write (((xA)).apply)
                        (((unsupported)).apply)
                        xb.write (((xB)).apply)
                        (((unsupported)).apply (((xb).x__dataclass_fields__)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xobj)) ((((unsupported)).apply ((xa)) ((xb)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_dataclass)).apply ((xobj)))))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be called on dataclass instances"))))
                                bogusForceDataize.write (((xasdict)).apply ((xobj)))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be called on dataclass instances"))))
                                bogusForceDataize.write (((xastuple)).apply ((xobj)))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be called on dataclass instances"))))
                                (((unsupported)).apply ((xreplace)) ((xobj)) (0))
                xtest_helper_fields_with_class_instance.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfields)).apply ((xC)))) ((((xfields)).apply ((((xC)).apply (0) (0.0))))))
                xtest_helper_fields_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass type or instance"))))
                          bogusForceDataize.write (((xfields)).apply (0))
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass type or instance"))))
                          bogusForceDataize.write (((xfields)).apply ((xC)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass type or instance"))))
                          bogusForceDataize.write (((xfields)).apply ((((xC)).apply)))
                xtest_helper_asdict.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xc.write (((xC)).apply (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xc)))) ((((unsupported)).apply ("x") (1) ("y") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xc)))) ((((xasdict)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xasdict)).apply ((xc)))) ((((xasdict)).apply ((xc)))))
                        (((unsupported)).apply (((xc).xx)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xc)))) ((((unsupported)).apply ("x") (42) ("y") (2))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xasdict)).apply ((xc)))))) ((xdict)))
                xtest_helper_asdict_raises_on_classes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          bogusForceDataize.write (((xasdict)).apply ((xC)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          bogusForceDataize.write (((xasdict)).apply ((xint)))
                xtest_helper_asdict_copy_values.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xinitial
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xList)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xlist)))))
                        xinitial.write (((unsupported)).apply)
                        xc.write (((xC)).apply (1) ((xinitial)))
                        xd.write (((xasdict)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("y"))) ((xinitial)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xd)) ("y"))) ((xinitial)))
                        xc.write (((xC)).apply (1))
                        xd.write (((xasdict)).apply ((xc)))
                        bogusForceDataize.write ((((((unsupported)).apply ((xd)) ("y")).xappend)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xy)) ((((unsupported)).apply)))
                xtest_helper_asdict_nested.write
                  [xself]
                    memory > xd
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xtoken)) ((xint)))
                            (((unsupported)).apply ((xgroup)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xname)) ((xstr)))
                            (((unsupported)).apply ((xid)) ((xUserId)))
                        xu.write (((xUser)).apply ("Joe") ((((xUserId)).apply (123) (1))))
                        xd.write (((xasdict)).apply ((xu)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("name") ("Joe") ("id") ((((unsupported)).apply ("token") (123) ("group") (1))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xasdict)).apply ((xu)))) ((((xasdict)).apply ((xu)))))
                        (((unsupported)).apply ((((xu).xid).xgroup)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xu)))) ((((unsupported)).apply ("name") ("Joe") ("id") ((((unsupported)).apply ("token") (123) ("group") (2))))))
                xtest_helper_asdict_builtin_containers.write
                  [xself]
                    memory > xgl
                    memory > xgt
                    memory > xb
                    memory > xgd
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xname)) ((xstr)))
                            (((unsupported)).apply ((xid)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xList)) ((xUser)))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xUser)) ((((unsupported)).apply)))))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xDict)) ((((unsupported)).apply ((xstr)) ((xUser)))))))
                        xa.write (((xUser)).apply ("Alice") (1))
                        xb.write (((xUser)).apply ("Bob") (2))
                        xgl.write (((xGroupList)).apply (0) ((((unsupported)).apply ((xa)) ((xb)))))
                        xgt.write (((xGroupTuple)).apply (0) ((((unsupported)).apply ((xa)) ((xb)))))
                        xgd.write (((xGroupDict)).apply (0) ((((unsupported)).apply ("first") ((xa)) ("second") ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xgl)))) ((((unsupported)).apply ("id") (0) ("users") ((((unsupported)).apply ((((unsupported)).apply ("name") ("Alice") ("id") (1))) ((((unsupported)).apply ("name") ("Bob") ("id") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xgt)))) ((((unsupported)).apply ("id") (0) ("users") ((((unsupported)).apply ((((unsupported)).apply ("name") ("Alice") ("id") (1))) ((((unsupported)).apply ("name") ("Bob") ("id") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xgd)))) ((((unsupported)).apply ("id") (0) ("users") ((((unsupported)).apply ("first") ((((unsupported)).apply ("name") ("Alice") ("id") (1))) ("second") ((((unsupported)).apply ("name") ("Bob") ("id") (2))))))))
                xtest_helper_asdict_builtin_object_containers.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xd)) ((xobject)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xchild)) ((xChild)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((((xParent)).apply ((((xChild)).apply ((((unsupported)).apply (1))))))))) ((((unsupported)).apply ("child") ((((unsupported)).apply ("d") ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((((xParent)).apply ((((xChild)).apply ((((unsupported)).apply (1) (2))))))))) ((((unsupported)).apply ("child") ((((unsupported)).apply ("d") ((((unsupported)).apply (1) (2))))))))
                xtest_helper_asdict_factory.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xc.write (((xC)).apply (1) (2))
                        xd.write (((unsupported)).apply ((xasdict)) ((xc)) ((xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("x") (1))) ((((unsupported)).apply ("y") (2))))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xd)) ((((unsupported)).apply ((xasdict)) ((xc)) ((xOrderedDict)))))
                        (((unsupported)).apply (((xc).xx)) (42))
                        xd.write (((unsupported)).apply ((xasdict)) ((xc)) ((xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("x") (42))) ((((unsupported)).apply ("y") (2))))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xd)))) ((xOrderedDict)))
                xtest_helper_asdict_namedtuple.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xnamedtuple)).apply ("T") ("a b c"))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xstr)))
                            (((unsupported)).apply ((xy)) ((xT)))
                        xc.write (((xC)).apply ("outer") ((((xT)).apply (1) ((((xC)).apply ("inner") ((((xT)).apply (11) (12) (13))))) (2))))
                        xd.write (((xasdict)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("x") ("outer") ("y") ((((xT)).apply (1) ((((unsupported)).apply ("x") ("inner") ("y") ((((xT)).apply (11) (12) (13))))) (2))))))
                        xd.write (((unsupported)).apply ((xasdict)) ((xc)) ((xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("x") ("outer") ("y") ((((xT)).apply (1) ((((unsupported)).apply ("x") ("inner") ("y") ((((xT)).apply (11) (12) (13))))) (2))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xd)))) ((xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("y"))) (1))))) ((xOrderedDict)))
                xtest_helper_asdict_namedtuple_key.write
                  [xself]
                    memory > xc
                    memory > xT
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ((xdict)))
                        xT.write (((xnamedtuple)).apply ("T") ("a"))
                        xc.write (((xC)).apply ((((unsupported)).apply ((((xT)).apply ("an a"))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((xc)))) ((((unsupported)).apply ("f") ((((unsupported)).apply ((((unsupported)).apply ((xT)) ("an a"))) (0))))))
                xtest_helper_asdict_namedtuple_derived.write
                  [xself]
                    memory > xt
                    memory > xd
                    memory > xc
                    memory > xmy_a
                    seq > @
                      seq
                        (((unsupported)).apply ((((xnamedtuple)).apply ("Tbase") ("a"))))
                          xmy_a.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xa)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ((xT)))
                        xt.write (((xT)).apply (6))
                        xc.write (((xC)).apply ((xt)))
                        xd.write (((xasdict)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("f") ((((unsupported)).apply ((xT)) (6))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xd)) ("f"))) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xd)) ("f")).xmy_a)).apply)) (6))
                xtest_helper_astuple.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                        xc.write (((xC)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xc)))) ((((unsupported)).apply (1) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xc)))) ((((xastuple)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xastuple)).apply ((xc)))) ((((xastuple)).apply ((xc)))))
                        (((unsupported)).apply (((xc).xy)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xc)))) ((((unsupported)).apply (1) (42))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xastuple)).apply ((xc)))))) ((xtuple)))
                xtest_helper_astuple_raises_on_classes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          bogusForceDataize.write (((xastuple)).apply ((xC)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          bogusForceDataize.write (((xastuple)).apply ((xint)))
                xtest_helper_astuple_copy_values.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xinitial
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xList)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xlist)))))
                        xinitial.write (((unsupported)).apply)
                        xc.write (((xC)).apply (1) ((xinitial)))
                        xt.write (((xastuple)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) (1))) ((xinitial)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xt)) (1))) ((xinitial)))
                        xc.write (((xC)).apply (1))
                        xt.write (((xastuple)).apply ((xc)))
                        bogusForceDataize.write ((((((unsupported)).apply ((xt)) (1)).xappend)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xy)) ((((unsupported)).apply)))
                xtest_helper_astuple_nested.write
                  [xself]
                    memory > xt
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xtoken)) ((xint)))
                            (((unsupported)).apply ((xgroup)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xname)) ((xstr)))
                            (((unsupported)).apply ((xid)) ((xUserId)))
                        xu.write (((xUser)).apply ("Joe") ((((xUserId)).apply (123) (1))))
                        xt.write (((xastuple)).apply ((xu)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((unsupported)).apply ("Joe") ((((unsupported)).apply (123) (1))))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xastuple)).apply ((xu)))) ((((xastuple)).apply ((xu)))))
                        (((unsupported)).apply ((((xu).xid).xgroup)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xu)))) ((((unsupported)).apply ("Joe") ((((unsupported)).apply (123) (2))))))
                xtest_helper_astuple_builtin_containers.write
                  [xself]
                    memory > xgl
                    memory > xgt
                    memory > xb
                    memory > xgd
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xname)) ((xstr)))
                            (((unsupported)).apply ((xid)) ((xint)))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xList)) ((xUser)))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xUser)) ((((unsupported)).apply)))))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xid)) ((xint)))
                            (((unsupported)).apply ((xusers)) ((((unsupported)).apply ((xDict)) ((((unsupported)).apply ((xstr)) ((xUser)))))))
                        xa.write (((xUser)).apply ("Alice") (1))
                        xb.write (((xUser)).apply ("Bob") (2))
                        xgl.write (((xGroupList)).apply (0) ((((unsupported)).apply ((xa)) ((xb)))))
                        xgt.write (((xGroupTuple)).apply (0) ((((unsupported)).apply ((xa)) ((xb)))))
                        xgd.write (((xGroupDict)).apply (0) ((((unsupported)).apply ("first") ((xa)) ("second") ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xgl)))) ((((unsupported)).apply (0) ((((unsupported)).apply ((((unsupported)).apply ("Alice") (1))) ((((unsupported)).apply ("Bob") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xgt)))) ((((unsupported)).apply (0) ((((unsupported)).apply ((((unsupported)).apply ("Alice") (1))) ((((unsupported)).apply ("Bob") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xgd)))) ((((unsupported)).apply (0) ((((unsupported)).apply ("first") ((((unsupported)).apply ("Alice") (1))) ("second") ((((unsupported)).apply ("Bob") (2))))))))
                xtest_helper_astuple_builtin_object_containers.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xd)) ((xobject)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xchild)) ((xChild)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xParent)).apply ((((xChild)).apply ((((unsupported)).apply (1))))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((((xParent)).apply ((((xChild)).apply ((((unsupported)).apply (1) (2))))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))))
                xtest_helper_astuple_factory.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xNT
                    memory > xnt
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xNT.write (((xnamedtuple)).apply ("NT") ("x y"))
                        xnt.write
                          [xlst]
                            seq > @
                              (((unsupported)).apply ((((xNT)).apply ((((unsupported)).apply ((xlst)))))))
                        xc.write (((xC)).apply (1) (2))
                        xt.write (((unsupported)).apply ((xastuple)) ((xc)) ((xnt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xNT)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xt)) ((((unsupported)).apply ((xastuple)) ((xc)) ((xnt)))))
                        (((unsupported)).apply (((xc).xx)) (42))
                        xt.write (((unsupported)).apply ((xastuple)) ((xc)) ((xnt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xNT)).apply (42) (2))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xt)))) ((xNT)))
                xtest_helper_astuple_namedtuple.write
                  [xself]
                    memory > xt
                    memory > xc
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xnamedtuple)).apply ("T") ("a b c"))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xstr)))
                            (((unsupported)).apply ((xy)) ((xT)))
                        xc.write (((xC)).apply ("outer") ((((xT)).apply (1) ((((xC)).apply ("inner") ((((xT)).apply (11) (12) (13))))) (2))))
                        xt.write (((xastuple)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((unsupported)).apply ("outer") ((((xT)).apply (1) ((((unsupported)).apply ("inner") ((((unsupported)).apply (11) (12) (13))))) (2))))))
                        xt.write (((unsupported)).apply ((xastuple)) ((xc)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((unsupported)).apply ("outer") ((((xT)).apply (1) ((((unsupported)).apply ("inner") ((((xT)).apply (11) (12) (13))))) (2))))))
                xtest_dynamic_class_creation.write
                  [xself]
                    memory > xcls1
                    memory > xcls
                    memory > xcls_dict
                    seq > @
                      seq
                        xcls_dict.write (((unsupported)).apply ("__annotations__") ((((unsupported)).apply ("x") ((xint)) ("y") ((xint)))))
                        xcls.write (((xtype)).apply ("C") ((((unsupported)).apply)) ((xcls_dict)))
                        xcls1.write (((xdataclass)).apply ((xcls)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcls1)) ((xcls)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((((xcls)).apply (1) (2))))) ((((unsupported)).apply ("x") (1) ("y") (2))))
                xtest_dynamic_class_creation_using_field.write
                  [xself]
                    memory > xcls1
                    memory > xcls
                    memory > xcls_dict
                    seq > @
                      seq
                        xcls_dict.write (((unsupported)).apply ("__annotations__") ((((unsupported)).apply ("x") ((xint)) ("y") ((xint)))) ("y") ((((unsupported)).apply ((xfield)) (5))))
                        xcls.write (((xtype)).apply ("C") ((((unsupported)).apply)) ((xcls_dict)))
                        xcls1.write (((xdataclass)).apply ((xcls)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcls1)) ((xcls)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xasdict)).apply ((((xcls1)).apply (1))))) ((((unsupported)).apply ("x") (1) ("y") (5))))
                xtest_init_in_order.write
                  [xself]
                    memory > xcalls
                    memory > xc
                    memory > xsetattr
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xa)) ((xint)))
                            (((unsupported)).apply ((xb)) ((xint)) ((((xfield)).apply)))
                            (((unsupported)).apply ((xc)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                            (((unsupported)).apply ((xd)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)))))
                            (((unsupported)).apply ((xe)) ((xint)) ((((unsupported)).apply ((xfield)) (4) (FALSE))))
                            (((unsupported)).apply ((xf)) ((xint)) (4))
                        xcalls.write (((unsupported)).apply)
                        xsetattr.write
                          [xself xname xvalue]
                            seq > @
                              bogusForceDataize.write ((((xcalls).xappend)).apply ((((unsupported)).apply ((xname)) ((xvalue)))))
                        (((unsupported)).apply (((xC).x__setattr__)) ((xsetattr)))
                        xc.write (((xC)).apply (0) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ((xcalls)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ((xcalls)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("c") ((((unsupported)).apply)))) ((((unsupported)).apply ((xcalls)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("d") ((((unsupported)).apply)))) ((((unsupported)).apply ((xcalls)) (3))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("e") (4))) ((xcalls)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("f") (4))) ((((unsupported)).apply ((xcalls)) (4))))
                xtest_items_in_dicts.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xa)) ((xint)))
                            (((unsupported)).apply ((xb)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)) (FALSE))))
                            (((unsupported)).apply ((xc)) ((xlist)) ((((unsupported)).apply ((xfield)) ((xlist)))))
                            (((unsupported)).apply ((xd)) ((xint)) ((((unsupported)).apply ((xfield)) (4) (FALSE))))
                            (((unsupported)).apply ((xe)) ((xint)) (0))
                        xc.write (((xC)).apply (0))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("a") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("b") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("c") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("d") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xd)) (4))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("e") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xe)) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("a") (((xc).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xa)) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("b") (((xc).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xb)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("c") (((xc).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xc)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("d") (((xc).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("e") (((xc).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xe)) (0))
                xtest_alternate_classmethod_constructor.write
                  [xself]
                    memory > xfrom_file
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            xfrom_file.write
                              [xcls xfilename]
                                memory > xvalue_in_file
                                seq > @
                                  (((unsupported)).apply)
                                    xvalue_in_file.write 20
                                    (((unsupported)).apply ((((xcls)).apply ((xvalue_in_file)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xC).xfrom_file)).apply ("filename")).xx)) (20))
                xtest_field_metadata_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (0))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("does not support item assignment"))))
                          (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("test"))) (3))
                xtest_field_metadata_mapping.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xdataclass)))
                            (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) (0))))
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("foo"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("foo"))) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("does not support item assignment"))))
                          (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("test"))) (3))
                        xd.write (((unsupported)).apply ("test") (10) ("bar") ("42") (3) ("three"))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("test"))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("bar"))) ("42"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) (3))) ("three"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("foo"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("foo"))) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("baz"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("does not support item assignment"))))
                          (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("test"))) (3))
                xtest_field_metadata_custom_mapping.write
                  [xself]
                    memory > x__getitem__
                    memory > x__len__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write (((((xself).x__dict__).xupdate)).apply ((xkw)))
                            x__getitem__.write
                              [xself xitem]
                                seq > @
                                  seq
                                    ((xitem).eq "xyzzy").if
                                      (((unsupported)).apply ("plugh"))
                                    (((unsupported)).apply ((((xgetattr)).apply ((xself)) ((xitem)))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x__dict__).x__len__)).apply)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) ((((unsupported)).apply ((xSimpleNameSpace)) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("a"))) (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xfields)).apply ((xC)))) (0)).xmetadata)) ("xyzzy"))) ("plugh"))
                xtest_generic_dataclasses.write
                  [xself]
                    memory > xbox
                    memory > xAlias
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xcontent)) ((xT)))
                            (((unsupported)).apply ((xlabel)) ((xstr)) ("<unknown>"))
                        xbox.write (((xLabeledBox)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbox).xcontent)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbox).xlabel)) ("<unknown>"))
                        xAlias.write (((unsupported)).apply ((xList)) ((((unsupported)).apply ((xLabeledBox)) ((xint)))))
                xtest_generic_extending.write
                  [xself]
                    memory > xc
                    memory > xS
                    memory > xT
                    memory > xAlias
                    memory > xnew_method
                    seq > @
                      seq
                        xS.write (((xTypeVar)).apply ("S"))
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xT)) ((xS)))))) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xT)))
                            (((unsupported)).apply ((xy)) ((xS)))
                        (((unsupported)).apply ((((unsupported)).apply ((xBase)) ((((unsupported)).apply ((xint)) ((xT)))))) ((xdataclass)))
                          (((unsupported)).apply ((xnew_field)) ((xstr)))
                        xAlias.write (((unsupported)).apply ((xDataDerived)) ((xstr)))
                        xc.write (((xAlias)).apply (0) ("test1") ("test2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xastuple)).apply ((xc)))) ((((unsupported)).apply (0) ("test1") ("test2"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xBase)) ((((unsupported)).apply ((xint)) ((xT)))))))
                          xnew_method.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xy)))
                        xAlias.write (((unsupported)).apply ((xNonDataDerived)) ((xfloat)))
                        xc.write (((xAlias)).apply (10) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xnew_method)).apply)) (1.0))
                xtest_generic_dynamic.write
                  [xself]
                    memory > xChild
                    memory > xAlias
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xT)))
                        xChild.write (((unsupported)).apply ((xmake_dataclass)) ("Child") ((((unsupported)).apply ((((unsupported)).apply ("y") ((xT)))) ((((unsupported)).apply ("z") ((((unsupported)).apply ((xOptional)) ((xT)))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ((xParent)) ((xint)))) ((((unsupported)).apply ((xGeneric)) ((xT)))))) ((((unsupported)).apply ("other") (42))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xChild)) ((xint)))).apply (1) (2)).xz)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xChild)) ((xint)))).apply (1) (2) (3)).xz)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xChild)) ((xint)))).apply (1) (2) (3)).xother)) (42))
                        xAlias.write (((unsupported)).apply ((xChild)) ((xT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xAlias)) ((xint)))).apply (1) (2)).xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xChild).x__mro__)) ((((unsupported)).apply ((xChild)) ((xParent)) ((xGeneric)) ((xobject)))))
                xtest_dataclassses_pickleable.write
                  [xself]
                    memory > xanother_new_sample
                    memory > xnew_sample
                    memory > xsamples
                    memory > xq
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (0))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) ((((unsupported)).apply ((xfield)) (0) (FALSE))))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xList)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xlist)))))
                        xq.write (((xQ)).apply (1))
                        (((unsupported)).apply (((xq).xy)) (2))
                        xsamples.write (((unsupported)).apply ((((xP)).apply (1))) ((((xP)).apply (1) (2))) ((((xQ)).apply (1))) ((xq)) ((((xR)).apply (1))) ((((xR)).apply (1) ((((unsupported)).apply (2) (3) (4))))))
                        (((unsupported)).apply ((xsample)) ((xsamples)))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsample)) ((xproto)))))
                              seq
                                xnew_sample.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xsample)) ((xproto)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsample).xx)) (((xnew_sample).xx)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsample).xy)) (((xnew_sample).xy)))
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xsample)) ((xnew_sample)))
                                (((unsupported)).apply (((xnew_sample).xx)) (42))
                                xanother_new_sample.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xnew_sample)) ((xproto)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_sample).xx)) (((xanother_new_sample).xx)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsample).xy)) (((xanother_new_sample).xy)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_field_without_annotation.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'f' is a field but has no type annotation"))))
                        (((unsupported)).apply ((xdataclass)))
                          xf.write (((xfield)).apply)
                xtest_field_without_annotation_but_annotation_in_base.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'f' is a field but has no type annotation"))))
                          (((unsupported)).apply ((xB)) ((xdataclass)))
                            xf.write (((xfield)).apply)
                xtest_field_without_annotation_but_annotation_in_base_not_dataclass.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xf)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("'f' is a field but has no type annotation"))))
                          (((unsupported)).apply ((xB)) ((xdataclass)))
                            xf.write (((xfield)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertDocStrEqual.write
                  [xself xa xb]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xreplace)).apply (" ") (""))) (((((xb).xreplace)).apply (" ") (""))))
                xtest_existing_docstring_not_overridden.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            unsupported
                            (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__doc__)) ("Lorem ipsum"))
                xtest_docstring_no_fields.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C()"))
                xtest_docstring_one_field.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:int)"))
                xtest_docstring_two_fields.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:int, y:int)"))
                xtest_docstring_three_fields.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                            (((unsupported)).apply ((xz)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:int, y:int, z:str)"))
                xtest_docstring_one_field_with_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) (3))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:int=3)"))
                xtest_docstring_one_field_with_default_none.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((((xtype)).apply ("None: is there a None literal in the EO language?"))))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:Union[int, NoneType]=None)"))
                xtest_docstring_list_field.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xList)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:List[int])"))
                xtest_docstring_list_field_with_default_factory.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xList)) ((xint)))) ((((unsupported)).apply ((xfield)) ((xlist)))))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:List[int]=<factory>)"))
                xtest_docstring_deque_field.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xdeque)))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:collections.deque)"))
                xtest_docstring_deque_field_with_default_factory.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xdeque)) ((((unsupported)).apply ((xfield)) ((xdeque)))))
                        bogusForceDataize.write ((((xself).xassertDocStrEqual)).apply (((xC).x__doc__)) ("C(x:collections.deque=<factory>)"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_base_has_init.write
                  [xself]
                    memory > xc
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xz)) (100))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) (0))
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (10))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("z") ((((xvars)).apply ((xc)))))
                        (((unsupported)).apply ((xB)) ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          (((unsupported)).apply ((xx)) ((xint)) (10))
                        xc.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xz)) (100))
                xtest_no_init.write
                  [xself]
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)) (FALSE))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xi)) ((xint)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xi)) (0))
                        (((unsupported)).apply ((xdataclass)) (FALSE))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xi)) ((xint)) (2))
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xi)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xi)) (3))
                xtest_overwriting_init.write
                  [xself]
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((2.mul (xx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (3)).xx)) (6))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((2.mul (xx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (4)).xx)) (8))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((2.mul (xx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (5)).xx)) (10))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_repr.write
                  [xself]
                    memory > xo
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply ((xB)) ((xdataclass)))
                          (((unsupported)).apply ((xy)) ((xint)) (10))
                        xo.write (((xC)).apply (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xo)))) ("TestRepr.test_repr.<locals>.C(x=4, y=10)"))
                        (((unsupported)).apply ((xC)) ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xD)).apply)))) ("TestRepr.test_repr.<locals>.D(x=20, y=10)"))
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xi)) ((xint)))
                            (((unsupported)).apply ((xdataclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xC).xD)).apply (0))))) ("TestRepr.test_repr.<locals>.C.D(i=0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((xC).xE)).apply)))) ("TestRepr.test_repr.<locals>.C.E()"))
                xtest_no_repr.write
                  [xself]
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("{__name__}.TestRepr.test_no_repr.<locals>.C object at") ((((xrepr)).apply ((((xC)).apply (3))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("C-class"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply (3))))) ("C-class"))
                xtest_overwriting_repr.write
                  [xself]
                    memory > x__repr__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply (0))))) ("x"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply (0))))) ("x"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xC)).apply (0))))) ("x"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_no_eq.write
                  [xself]
                    memory > x__eq__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (0))) ((((xC)).apply (0))))
                        xc.write (((xC)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ((xc)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((xother).eq 10)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (3))) (10))
                xtest_overwriting_eq.write
                  [xself]
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((xother).eq 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1))) (3))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (1))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((xother).eq 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1))) (4))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (1))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((xother).eq 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1))) (5))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (1))) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_functools_total_ordering.write
                  [xself]
                    memory > x__lt__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtotal_ordering)) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xx).geq (xother))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xC)).apply (0))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xC)).apply (0))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xC)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xC)).apply (0))) (1))
                xtest_no_order.write
                  [xself]
                    memory > x__lt__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__le__") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__lt__") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__ge__") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__gt__") (((xC).x__dict__)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__le__") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__ge__") (((xC).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__gt__") (((xC).x__dict__)))
                xtest_overwriting_order.write
                  [xself]
                    memory > x__lt__
                    memory > x__le__
                    memory > x__ge__
                    memory > x__gt__
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __lt__.*using functools.total_ordering"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__lt__.write
                                [xself]
                                  seq > @
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __le__.*using functools.total_ordering"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__le__.write
                                [xself]
                                  seq > @
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __gt__.*using functools.total_ordering"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__gt__.write
                                [xself]
                                  seq > @
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __ge__.*using functools.total_ordering"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__ge__.write
                                [xself]
                                  seq > @
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_unsafe_hash.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (1) ("foo"))))) ((((xhash)).apply ((((unsupported)).apply (1) ("foo"))))))
                xtest_hash_rules.write
                  [xself]
                    memory > xtest
                    memory > xnon_bool
                    seq > @
                      seq
                        xnon_bool.write
                          [xvalue]
                            seq > @
                              seq
                                (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                (xvalue).if
                                  (((unsupported)).apply ((((unsupported)).apply (3))))
                                (((unsupported)).apply (0))
                        xtest.write
                          [xcase xunsafe_hash xeq xfrozen xwith_hash xresult]
                            memory > x__hash__
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)) ((xunsafe_hash)) ((xeq)) ((xfrozen)))))
                                seq
                                  ((xresult).neq "exception").if
                                    (xwith_hash).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) ((xunsafe_hash)) ((xeq)) ((xfrozen)))))
                                        x__hash__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply (0))
                                      (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) ((xunsafe_hash)) ((xeq)) ((xfrozen)))))
                                  ((xresult).eq "fn").if
                                    seq
                                      bogusForceDataize.write ((((xself).xassertIn)).apply ("__hash__") (((xC).x__dict__)))
                                      bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((unsupported)).apply (((xC).x__dict__)) ("__hash__"))))
                                    ((xresult).eq "").if
                                      ((xwith_hash).not).if
                                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__hash__") (((xC).x__dict__)))
                                      ((xresult).eq "none").if
                                        seq
                                          bogusForceDataize.write ((((xself).xassertIn)).apply ("__hash__") (((xC).x__dict__)))
                                          bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply (((xC).x__dict__)) ("__hash__"))))
                                        ((xresult).eq "exception").if
                                          seq
                                            (((unsupported)).apply ((xwith_hash)))
                                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __hash__"))))
                                              (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) ((xunsafe_hash)) ((xeq)) ((xfrozen)))))
                                                x__hash__.write
                                                  [xself]
                                                    seq > @
                                                      (((unsupported)).apply (0))
                                          (((unsupported)).apply (FALSE) ("unknown result {result!r}"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((((unsupported)).apply ((xunsafe_hash)) ((xeq)) ((xfrozen)) ((xres_no_defined_hash)) ((xres_defined_hash)))))) ((((xenumerate)).apply ((((unsupported)).apply ((((unsupported)).apply (FALSE) (FALSE) (FALSE) ("") (""))) ((((unsupported)).apply (FALSE) (FALSE) (TRUE) ("") (""))) ((((unsupported)).apply (FALSE) (TRUE) (FALSE) ("none") (""))) ((((unsupported)).apply (FALSE) (TRUE) (TRUE) ("fn") (""))) ((((unsupported)).apply (TRUE) (FALSE) (FALSE) ("fn") ("exception"))) ((((unsupported)).apply (TRUE) (FALSE) (TRUE) ("fn") ("exception"))) ((((unsupported)).apply (TRUE) (TRUE) (FALSE) ("fn") ("exception"))) ((((unsupported)).apply (TRUE) (TRUE) (TRUE) ("fn") ("exception"))))) (1))))
                          seq
                            bogusForceDataize.write (((xtest)).apply ((xcase)) ((xunsafe_hash)) ((xeq)) ((xfrozen)) (FALSE) ((xres_no_defined_hash)))
                            bogusForceDataize.write (((xtest)).apply ((xcase)) ((xunsafe_hash)) ((xeq)) ((xfrozen)) (TRUE) ((xres_defined_hash)))
                            bogusForceDataize.write (((xtest)).apply ((xcase)) ((((xnon_bool)).apply ((xunsafe_hash)))) ((((xnon_bool)).apply ((xeq)))) ((((xnon_bool)).apply ((xfrozen)))) (FALSE) ((xres_no_defined_hash)))
                            bogusForceDataize.write (((xtest)).apply ((xcase)) ((((xnon_bool)).apply ((xunsafe_hash)))) ((((xnon_bool)).apply ((xeq)))) ((((xnon_bool)).apply ((xfrozen)))) (TRUE) ((xres_defined_hash)))
                xtest_eq_only.write
                  [xself]
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xi).eq ((xother).xi))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xi).eq ((xother).xi))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (1.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (1))))) ((((xhash)).apply ((((xC)).apply (1.0))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE) (TRUE))))
                          seq
                            (((unsupported)).apply ((xi)) ((xint)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (((((xself).xi).eq 3).and (((xself).xi).eq ((xother).xi)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC)).apply (3))) ((((xC)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xC)).apply (1))) ((((xC)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (1))))) ((((xhash)).apply ((((xC)).apply (1.0))))))
                xtest_0_field_hash.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply)))) ((((xhash)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply)))) ((((xhash)).apply ((((unsupported)).apply)))))
                xtest_1_field_hash.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (4))))) ((((xhash)).apply ((((unsupported)).apply (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (42))))) ((((xhash)).apply ((((unsupported)).apply (42))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xx)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (4))))) ((((xhash)).apply ((((unsupported)).apply (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (42))))) ((((xhash)).apply ((((unsupported)).apply (42))))))
                xtest_hash_no_args.write
                  [xself]
                    memory > x__hash__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (301))
                        (((unsupported)).apply ((((unsupported)).apply ((xfrozen)) ((xeq)) ((xbase)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xobject)) ("unhashable"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xBase)) ("unhashable"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) ((xobject)) ("object"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (FALSE) ((xBase)) ("base"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) ((xobject)) ("unhashable"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) ((xBase)) ("unhashable"))) ((((unsupported)).apply (FALSE) ("None: is there a None literal in the EO language?") ((xobject)) ("unhashable"))) ((((unsupported)).apply (FALSE) ("None: is there a None literal in the EO language?") ((xBase)) ("unhashable"))) ((((unsupported)).apply (FALSE) (FALSE) ((xobject)) ("object"))) ((((unsupported)).apply (FALSE) (FALSE) ((xBase)) ("base"))) ((((unsupported)).apply (FALSE) (TRUE) ((xobject)) ("unhashable"))) ((((unsupported)).apply (FALSE) (TRUE) ((xBase)) ("unhashable"))) ((((unsupported)).apply (TRUE) ("None: is there a None literal in the EO language?") ((xobject)) ("tuple"))) ((((unsupported)).apply (TRUE) ("None: is there a None literal in the EO language?") ((xBase)) ("tuple"))) ((((unsupported)).apply (TRUE) (FALSE) ((xobject)) ("object"))) ((((unsupported)).apply (TRUE) (FALSE) ((xBase)) ("base"))) ((((unsupported)).apply (TRUE) (TRUE) ((xobject)) ("tuple"))) ((((unsupported)).apply (TRUE) (TRUE) ((xBase)) ("tuple"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfrozen)) ((xeq)) ((xbase)) ((xexpected)))))
                            seq
                              ((((unsupported)).apply ((xfrozen)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xeq)) ("None: is there a None literal in the EO language?"))).if
                                (((unsupported)).apply ((xbase)) ((xdataclass)))
                                  (((unsupported)).apply ((xi)) ((xint)))
                                (((unsupported)).apply ((xfrozen)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((xbase)) ((((unsupported)).apply ((xdataclass)) ((xeq)))))
                                    (((unsupported)).apply ((xi)) ((xint)))
                                  (((unsupported)).apply ((xeq)) ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)).apply ((xbase)) ((((unsupported)).apply ((xdataclass)) ((xfrozen)))))
                                      (((unsupported)).apply ((xi)) ((xint)))
                                    (((unsupported)).apply ((xbase)) ((((unsupported)).apply ((xdataclass)) ((xfrozen)) ((xeq)))))
                                      (((unsupported)).apply ((xi)) ((xint)))
                              ((xexpected).eq "unhashable").if
                                seq
                                  xc.write (((xC)).apply (10))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("unhashable type"))))
                                    bogusForceDataize.write (((xhash)).apply ((xc)))
                                ((xexpected).eq "base").if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (10))))) (301))
                                  ((xexpected).eq "object").if
                                    bogusForceDataize.write ((((xself).xassertIs)).apply (((xC).x__hash__)) (((xobject).x__hash__)))
                                    ((xexpected).eq "tuple").if
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((((xC)).apply (42))))) ((((xhash)).apply ((((unsupported)).apply (42))))))
                                      (((unsupported)).apply (FALSE) ("unknown value for expected={expected!r}"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_frozen.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xi)) ((xint)))
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xi)) (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          (((unsupported)).apply (((xc).xi)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xi)) (10))
                xtest_inherit.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xi)) ((xint)))
                        (((unsupported)).apply ((xC)) ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xj)) ((xint)))
                        xd.write (((xD)).apply (0) (10))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          (((unsupported)).apply (((xd).xi)) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          (((unsupported)).apply (((xd).xj)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xi)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xj)) (10))
                xtest_inherit_nonfrozen_from_empty_frozen.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot inherit non-frozen dataclass from a frozen one"))))
                          (((unsupported)).apply ((xC)) ((xdataclass)))
                            (((unsupported)).apply ((xj)) ((xint)))
                xtest_inherit_nonfrozen_from_empty.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                        (((unsupported)).apply ((xC)) ((xdataclass)))
                          (((unsupported)).apply ((xj)) ((xint)))
                        xd.write (((xD)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xj)) (3))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) ((xC)))
                xtest_inherit_nonfrozen_from_frozen.write
                  [xself]
                    memory > xI
                    seq > @
                      (((unsupported)).apply ((xintermediate_class)) ((((unsupported)).apply (TRUE) (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xintermediate_class)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                              (((unsupported)).apply ((xi)) ((xint)))
                            (xintermediate_class).if
                              (((unsupported)).apply ((xC)))
                              xI.write (xC)
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot inherit non-frozen dataclass from a frozen one"))))
                              (((unsupported)).apply ((xI)) ((xdataclass)))
                xtest_inherit_frozen_from_nonfrozen.write
                  [xself]
                    memory > xI
                    seq > @
                      (((unsupported)).apply ((xintermediate_class)) ((((unsupported)).apply (TRUE) (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xintermediate_class)))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xi)) ((xint)))
                            (xintermediate_class).if
                              (((unsupported)).apply ((xC)))
                              xI.write (xC)
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("cannot inherit frozen dataclass from a non-frozen one"))))
                              (((unsupported)).apply ((xI)) ((((unsupported)).apply ((xdataclass)) (TRUE))))
                xtest_inherit_from_normal_class.write
                  [xself]
                    memory > xd
                    memory > xI
                    seq > @
                      (((unsupported)).apply ((xintermediate_class)) ((((unsupported)).apply (TRUE) (FALSE))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xintermediate_class)))))
                            seq
                              (((unsupported)).apply)
                              (xintermediate_class).if
                                (((unsupported)).apply ((xC)))
                                xI.write (xC)
                              (((unsupported)).apply ((xI)) ((((unsupported)).apply ((xdataclass)) (TRUE))))
                                (((unsupported)).apply ((xi)) ((xint)))
                          xd.write (((xD)).apply (10))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                            (((unsupported)).apply (((xd).xi)) (5))
                xtest_non_frozen_normal_derived.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) (10))
                        (((unsupported)).apply ((xD)))
                        xs.write (((xS)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xy)) (10))
                        (((unsupported)).apply (((xs).xcached)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          (((unsupported)).apply (((xs).xx)) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFrozenInstanceError)))))
                          (((unsupported)).apply (((xs).xy)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xy)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xcached)) (TRUE))
                xtest_overwriting_frozen.write
                  [xself]
                    memory > x__delattr__
                    memory > x__setattr__
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __setattr__"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__setattr__.write
                                [xself]
                                  seq > @
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot overwrite attribute __delattr__"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                            seq
                              (((unsupported)).apply ((xx)) ((xint)))
                              x__delattr__.write
                                [xself]
                                  seq > @
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (FALSE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            x__setattr__.write
                              [xself xname xvalue]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("x"))) (((xvalue).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xx)) (20))
                xtest_frozen_hash.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          (((unsupported)).apply ((xx)) ((xAny)))
                        bogusForceDataize.write (((xhash)).apply ((((xC)).apply (3))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("unhashable type"))))
                          bogusForceDataize.write (((xhash)).apply ((((xC)).apply ((((unsupported)).apply)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_simple.write
                  [xself]
                    memory > xc
                    memory > x__slots__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            x__slots__.write (((unsupported)).apply ("x"))
                            (((unsupported)).apply ((xx)) ((xAny)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() missing 1 required positional argument: 'x'"))))
                          bogusForceDataize.write (((xC)).apply)
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (10))
                        (((unsupported)).apply (((xc).xx)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (5))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("'C' object has no attribute 'y'"))))
                          (((unsupported)).apply (((xc).xy)) (5))
                xtest_derived_added_field.write
                  [xself]
                    memory > xd
                    memory > x__slots__
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            x__slots__.write (((unsupported)).apply ("x"))
                            (((unsupported)).apply ((xx)) ((xAny)))
                        (((unsupported)).apply ((xBase)) ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xd.write (((xDerived)).apply (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xd).xx)) (((xd).xy)))) ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply (((xd).xz)) (10))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_set_name.write
                  [xself]
                    memory > x__set_name__
                    memory > x__get__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__set_name__.write
                              [xself xowner xname]
                                seq > @
                                  (((unsupported)).apply (((xself).xname)) (((xname).add "x")))
                            x__get__.write
                              [xself xinstance xowner]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply (1))
                                    (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xc)) ((xint)) ((((xD)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC).xc).xname)) ("cx"))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xc)) ((xint)) ((((unsupported)).apply ((xfield)) ((((xD)).apply)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC).xc).xname)) ("cx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xc)) (1))
                xtest_non_descriptor.write
                  [xself]
                    memory > x__set_name__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__set_name__.write
                            [xself xowner xname]
                              seq > @
                                (((unsupported)).apply (((xself).xname)) (((xname).add "x")))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xc)) ((xint)) ((((unsupported)).apply ((xfield)) ((((xD)).apply)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xC).xc).xname)) ("cx"))
                xtest_lookup_on_instance.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xd.write (((xD)).apply)
                        (((unsupported)).apply (((xd).x__set_name__)) ((((xMock)).apply)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) ((xd)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xd).x__set_name__).xcall_count)) (0))
                xtest_lookup_on_class.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xD).x__set_name__)) ((((xMock)).apply)))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xi)) ((xint)) ((((unsupported)).apply ((xfield)) ((((xD)).apply)) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xD).x__set_name__).xcall_count)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_classvar.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtypestr)) ((((unsupported)).apply ("ClassVar[int]") ("ClassVar [int] ClassVar [int]") ("ClassVar") (" ClassVar ") ("typing.ClassVar[int]") ("typing.ClassVar[str]") (" typing.ClassVar[str]") ("typing .ClassVar[str]") ("typing. ClassVar[str]") ("typing.ClassVar [str]") ("typing.ClassVar [ str]") ("typing.ClassVar.[int]") ("typing.ClassVar+"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtypestr)))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xtypestr)))
                            bogusForceDataize.write (((xC)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("x") (((xC).x__dict__)))
                xtest_isnt_classvar.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtypestr)) ((((unsupported)).apply ("CV") ("t.ClassVar") ("t.ClassVar[int]") ("typing..ClassVar[int]") ("Classvar") ("Classvar[int]") ("typing.ClassVarx[int]") ("typong.ClassVar[int]") ("dataclasses.ClassVar[int]") ("typingxClassVar[str]"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtypestr)))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xtypestr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xx)) (10))
                xtest_initvar.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtypestr)) ((((unsupported)).apply ("InitVar[int]") ("InitVar [int] InitVar [int]") ("InitVar") (" InitVar ") ("dataclasses.InitVar[int]") ("dataclasses.InitVar[str]") (" dataclasses.InitVar[str]") ("dataclasses .InitVar[str]") ("dataclasses. InitVar[str]") ("dataclasses.InitVar [str]") ("dataclasses.InitVar [ str]") ("dataclasses.InitVar.[int]") ("dataclasses.InitVar+"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtypestr)))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xtypestr)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("object has no attribute 'x'"))))
                              unsupported
                xtest_isnt_initvar.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtypestr)) ((((unsupported)).apply ("IV") ("dc.InitVar") ("xdataclasses.xInitVar") ("typing.xInitVar[int]"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtypestr)))))
                          seq
                            (((unsupported)).apply ((xdataclass)))
                              (((unsupported)).apply ((xx)) ((xtypestr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply (10)).xx)) (10))
                xtest_classvar_module_level_import.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xm)) ((((unsupported)).apply ((xdataclass_module_1)) ((xdataclass_module_1_str)) ((xdataclass_module_2)) ((xdataclass_module_2_str)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xm)))))
                            seq
                              ((xm).xUSING_STRINGS).if
                                xc.write ((((xm).xCV)).apply (10))
                                xc.write ((((xm).xCV)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcv0)) (20))
                              xc.write ((((xm).xIV)).apply (0) (1) (2) (3) (4))
                              (((unsupported)).apply ((xfield_name)) ((((unsupported)).apply ("iv0") ("iv1") ("iv2") ("iv3"))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield_name)))))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("object has no attribute '{field_name}'"))))
                                    bogusForceDataize.write (((xgetattr)).apply ((xc)) ((xfield_name)))
                              ((xm).xUSING_STRINGS).if
                                seq
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ("not_iv4") (((xc).x__dict__)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xnot_iv4)) (4))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("not_iv4") (((xc).x__dict__)))
                xtest_text_annotations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply (((xdataclass_textanno).xBar)))) ((((unsupported)).apply ("foo") (((xdataclass_textanno).xFoo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((((xdataclass_textanno).xBar).x__init__)))) ((((unsupported)).apply ("foo") (((xdataclass_textanno).xFoo)) ("return") ((((xtype)).apply ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_simple.write
                  [xself]
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") ((xint)) ((((unsupported)).apply ((xfield)) (5))))))) ((((unsupported)).apply ("add_one") ((((unsupported)).apply ((((xself).xx).add 1)))))))
                        xc.write (((xC)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (10) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xadd_one)).apply)) (11))
                xtest_no_mutate_namespace.write
                  [xself]
                    memory > xns
                    memory > xC
                    seq > @
                      seq
                        xns.write (((unsupported)).apply)
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") ((xint)) ((((unsupported)).apply ((xfield)) (5))))))) ((xns)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xns)) ((((unsupported)).apply)))
                xtest_base.write
                  [xself]
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))))) ((((unsupported)).apply ((xBase1)) ((xBase2)))))
                        xc.write (((xC)).apply (2))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xBase1)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xBase2)))
                xtest_base_dataclass.write
                  [xself]
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xx)) ((xint)))
                        (((unsupported)).apply)
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("y") ((xint)))))) ((((unsupported)).apply ((xBase1)) ((xBase2)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("required positional"))))
                          xc.write (((xC)).apply (2))
                        xc.write (((xC)).apply (1) (2))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xBase1)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xBase2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)))) ((((unsupported)).apply (1) (2))))
                xtest_init_var.write
                  [xself]
                    memory > xpost_init
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        xpost_init.write
                          [xself xy]
                            seq > @
                              (((unsupported)).apply (((xself).xx)) ((xy)))
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") ((((unsupported)).apply ((xInitVar)) ((xint)))))))) ((((unsupported)).apply ("__post_init__") ((xpost_init)))))
                        xc.write (((xC)).apply (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xc)))) ((((unsupported)).apply ("x") (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xc)))))) (1))
                xtest_class_var.write
                  [xself]
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        xC.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") ((((unsupported)).apply ((xClassVar)) ((xint)))) (10))) ((((unsupported)).apply ("z") ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xfield)) (20))))))))
                        xc.write (((xC)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xc)))) ((((unsupported)).apply ("x") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xfields)).apply ((xc)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xy)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xz)) (20))
                xtest_other_params.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") ((((unsupported)).apply ((xClassVar)) ((xint)))) (10))) ((((unsupported)).apply ("z") ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xfield)) (20))))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__init__") ((((xvars)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__repr__") ((((xvars)).apply ((xC)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("unexpected keyword argument"))))
                          xC.write (((unsupported)).apply ((xmake_dataclass)) ("C") ((((unsupported)).apply)) (FALSE))
                xtest_no_types.write
                  [xself]
                    memory > xC
                    memory > xc
                    seq > @
                      seq
                        xC.write (((xmake_dataclass)).apply ("Point") ((((unsupported)).apply ("x") ("y") ("z"))))
                        xc.write (((xC)).apply (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xc)))) ((((unsupported)).apply ("x") (1) ("y") (2) ("z") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__annotations__)) ((((unsupported)).apply ("x") ("typing.Any") ("y") ("typing.Any") ("z") ("typing.Any"))))
                        xC.write (((xmake_dataclass)).apply ("Point") ((((unsupported)).apply ("x") ((((unsupported)).apply ("y") ((xint)))) ("z"))))
                        xc.write (((xC)).apply (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xc)))) ((((unsupported)).apply ("x") (1) ("y") (2) ("z") (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__annotations__)) ((((unsupported)).apply ("x") ("typing.Any") ("y") ((xint)) ("z") ("typing.Any"))))
                xtest_invalid_type_specification.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xbad_field)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (1) (2) (3) (4))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_field)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Invalid field: "))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ("a") ((xbad_field)))))
                        (((unsupported)).apply ((xbad_field)) ((((unsupported)).apply ((xfloat)) ((((unsupported)).apply ((xx)))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_field)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("has no len()"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ("a") ((xbad_field)))))
                xtest_duplicate_field_names.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfield)) ((((unsupported)).apply ("a") ("ab"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield)))))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Field name duplicated"))))
                            bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((xfield)) ("a") ((xfield)))))
                xtest_keyword_field_names.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfield)) ((((unsupported)).apply ("for") ("async") ("await") ("as"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must not be keywords"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ("a") ((xfield)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must not be keywords"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((xfield)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must not be keywords"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((xfield)) ("a"))))
                xtest_non_identifier_field_names.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfield)) ((((unsupported)).apply ("()") ("x,y") ("*") ("2@3") ("") ("little johnny tables"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must be valid identifiers"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ("a") ((xfield)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must be valid identifiers"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((xfield)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must be valid identifiers"))))
                              bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ((xfield)) ("a"))))
                xtest_underscore_field_names.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xmake_dataclass)).apply ("C") ((((unsupported)).apply ("_") ("_a") ("a_a") ("a_"))))
                xtest_funny_class_names_names.write
                  [xself]
                    memory > xC
                    seq > @
                      (((unsupported)).apply ((xclassname)) ((((unsupported)).apply ("()") ("x,y") ("*") ("2@3") (""))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xclassname)))))
                          seq
                            xC.write (((xmake_dataclass)).apply ((xclassname)) ((((unsupported)).apply ("a") ("b"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__name__)) ((xclassname)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest.write
                  [xself]
                    memory > xc
                    memory > xc1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xc.write (((xC)).apply (1) (2))
                        xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc1).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc1).xy)) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xreplace)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xreplace)) ((xc)) ((xc)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc1).xx)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc1).xy)) (2))
                xtest_frozen.write
                  [xself]
                    memory > xc
                    memory > xc1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                            (((unsupported)).apply ((xz)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE) (10))))
                            (((unsupported)).apply ((xt)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE) (100))))
                        xc.write (((xC)).apply (1) (2))
                        xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc).xx)) (((xc).xy)) (((xc).xz)) (((xc).xt)))) ((((unsupported)).apply (1) (2) (10) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc1).xx)) (((xc1).xy)) (((xc1).xz)) (((xc1).xt)))) ((((unsupported)).apply (3) (2) (10) (100))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("init=False"))))
                          (((unsupported)).apply ((xreplace)) ((xc)) (3) (20) (50))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("init=False"))))
                          seq
                            (((unsupported)).apply ((xreplace)) ((xc)) (20))
                            (((unsupported)).apply ((xreplace)) ((xc)) (3) (20) (50))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xFrozenInstanceError)) ("cannot assign to field 'x'"))))
                          (((unsupported)).apply (((xc1).xx)) (3))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() got an unexpected keyword argument 'a'"))))
                          xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (20) (5))
                xtest_invalid_field_name.write
                  [xself]
                    memory > xc
                    memory > xc1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        xc.write (((xC)).apply (1) (2))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() got an unexpected keyword argument 'z'"))))
                          xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (3))
                xtest_invalid_object.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdataclass)) (TRUE))))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          (((unsupported)).apply ((xreplace)) ((xC)) (3))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("dataclass instance"))))
                          (((unsupported)).apply ((xreplace)) (0) (3))
                xtest_no_init.write
                  [xself]
                    memory > xc
                    memory > xc1
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((xint)) ((((unsupported)).apply ((xfield)) (FALSE) (10))))
                        xc.write (((xC)).apply (1))
                        (((unsupported)).apply (((xc).xy)) (20))
                        xc1.write (((unsupported)).apply ((xreplace)) ((xc)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xc1).xx)) (((xc1).xy)))) ((((unsupported)).apply (5) (10))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("init=False"))))
                          (((unsupported)).apply ((xreplace)) ((xc)) (2) (30))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("init=False"))))
                          (((unsupported)).apply ((xreplace)) ((xc)) (30))
                xtest_classvar.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (1000))
                        xc.write (((xC)).apply (1))
                        xd.write (((xC)).apply (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xc).xy)) (((xd).xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xy)) (1000))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("__init__() got an unexpected keyword argument 'y'"))))
                          (((unsupported)).apply ((xreplace)) ((xc)) (30))
                        (((unsupported)).apply ((xreplace)) ((xc)) (5))
                xtest_initvar_is_specified.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xInitVar)) ((xint)))))
                            x__post_init__.write
                              [xself xy]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((xy)))
                        xc.write (((xC)).apply (1) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (10))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("InitVar 'y' must be specified with replace()"))))
                          (((unsupported)).apply ((xreplace)) ((xc)) (3))
                        xc.write (((unsupported)).apply ((xreplace)) ((xc)) (3) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xx)) (15))
                xtest_initvar_with_default_value.write
                  [xself]
                    memory > x__post_init__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xx)) ((xint)))
                            (((unsupported)).apply ((xy)) ((((unsupported)).apply ((xInitVar)) ((xint)))) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xz)) ((((unsupported)).apply ((xInitVar)) ((xint)))) (42))
                            x__post_init__.write
                              [xself xy xz]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((xy)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply (((xself).xx)) ((xy)))
                                    (((unsupported)).apply ((xz)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply (((xself).xx)) ((xz)))
                        xc.write (((unsupported)).apply ((xC)) (1) (10) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreplace)).apply ((xc)))) ((((unsupported)).apply ((xC)) (12))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreplace)) ((xc)) (4))) ((((unsupported)).apply ((xC)) (12) (4) (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreplace)) ((xc)) (4) (1))) ((((unsupported)).apply ((xC)) (12) (4) (1))))
                xtest_recursive_repr.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("C"))
                        xc.write (((xC)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xc).xf)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestReplace.test_recursive_repr.<locals>.C(f=...)"))
                xtest_recursive_repr_two_attrs.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xf)) ("C"))
                            (((unsupported)).apply ((xg)) ("C"))
                        xc.write (((xC)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xc).xf)) ((xc)))
                        (((unsupported)).apply (((xc).xg)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestReplace.test_recursive_repr_two_attrs.<locals>.C(f=..., g=...)"))
                xtest_recursive_repr_indirection.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("D"))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("C"))
                        xc.write (((xC)).apply ("None: is there a None literal in the EO language?"))
                        xd.write (((xD)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xc).xf)) ((xd)))
                        (((unsupported)).apply (((xd).xf)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestReplace.test_recursive_repr_indirection.<locals>.C(f=TestReplace.test_recursive_repr_indirection.<locals>.D(f=...))"))
                xtest_recursive_repr_indirection_two.write
                  [xself]
                    memory > xc
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("D"))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("E"))
                        (((unsupported)).apply ((xdataclass)))
                          (((unsupported)).apply ((xf)) ("C"))
                        xc.write (((xC)).apply ("None: is there a None literal in the EO language?"))
                        xd.write (((xD)).apply ("None: is there a None literal in the EO language?"))
                        xe.write (((xE)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xc).xf)) ((xd)))
                        (((unsupported)).apply (((xd).xf)) ((xe)))
                        (((unsupported)).apply (((xe).xf)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestReplace.test_recursive_repr_indirection_two.<locals>.C(f=TestReplace.test_recursive_repr_indirection_two.<locals>.D(f=TestReplace.test_recursive_repr_indirection_two.<locals>.E(f=...)))"))
                xtest_recursive_repr_misc_attrs.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xdataclass)))
                          seq
                            (((unsupported)).apply ((xf)) ("C"))
                            (((unsupported)).apply ((xg)) ((xint)))
                        xc.write (((xC)).apply ("None: is there a None literal in the EO language?") (1))
                        (((unsupported)).apply (((xc).xf)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("TestReplace.test_recursive_repr_misc_attrs.<locals>.C(f=..., g=1)"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)