memory > xNode
memory > xUnicodeDecodeError
memory > xclone
memory > xrange
memory > xdom
memory > xproto
memory > xtext
memory > xrepr
memory > xsupport
memory > xn2
memory > xHandler
memory > x__name__
memory > xn1
memory > xcopy
memory > xtext2
memory > xelm2b
memory > xc3
memory > xpickle
memory > xlist
memory > xparse
memory > xorig
memory > xsplitter
memory > xpi
memory > xValueError
memory > xstr
memory > xio
memory > xc2
memory > xfile
memory > xDocument
memory > xelm
memory > xtext1
memory > xxml
memory > xparseString
memory > xopen
memory > xhasattr
memory > xsample
memory > xdoc
memory > xgetDOMImplementation
memory > xi
memory > xtuple
memory > xfrag
memory > xelm2a
memory > xelem
memory > xname
memory > xunittest
memory > xisinstance
memory > xc1
memory > xlen
[] > test_minidom
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestParseProcessingInstructions
        memory > xtestInsertBeforeFragment
        memory > xtestAttrListItemNS
        memory > xtestNormalizeDeleteAndCombine
        memory > xtestExceptionOnSpacesInXMLNSValue
        memory > xtestImportDocumentDeep
        memory > xtestCloneElementDeep
        memory > xtestRemoveAttributeNode
        memory > xtestProcessingInstructionNameError
        memory > xtestRemoveAttr
        memory > xtestComment
        memory > xtestAAA
        memory > xtestProcessingInstructionRepr
        memory > xcalled
        memory > xcreate_doc_without_doctype
        memory > xtestAttrList__setitem__
        memory > xtestAddAttr
        memory > xtest_toprettyxml_with_adjacent_text_nodes
        memory > xtestElementReprAndStrUnicode
        memory > xtestChildNodes
        memory > xcreate_doc_with_doctype
        memory > xcreate_nonempty_doctype
        memory > xtest_toprettyxml_preserves_content_of_text_node
        memory > xcheck_import_document
        memory > xtestElementReprAndStr
        memory > xtestGetAttributeNS
        memory > xtestParseString
        memory > xtestParents
        memory > xtestLegalChildren
        memory > xtestElement
        memory > xtestUnlink
        memory > xtestGetAttrList
        memory > xtestDocumentElement
        memory > xtest_toprettyxml_with_text_nodes
        memory > xtestTooManyDocumentElements
        memory > xtestCreateElementNS
        memory > xtestSetIdAttributeNS
        memory > xtestAttrListKeysNS
        memory > xtest_toprettyxml_with_cdata
        memory > xtestRenameElement
        memory > xtestTextNodeRepr
        memory > xtestReplaceChildFragment
        memory > xcheck_clone_attribute
        memory > xtestWriteXML
        memory > xsample2
        memory > xtestCloneDocumentDeep
        memory > xtestImportDocumentTypeShallow
        memory > xtestPickledDocument
        memory > xtestSetIdAttribute
        memory > xtestImportDocumentTypeDeep
        memory > xtestNormalizeDeleteWithTwoNonTextSiblings
        memory > xget_empty_nodelist_from_elements_by_tagName_ns_helper
        memory > xtestSetIdAttributeNode
        memory > xtestHasChildNodes
        memory > xtestChangeAttr
        memory > xtestHasAttribute
        memory > xtestParseAttributes
        memory > xtestAttrListKeys
        memory > xtestRenameAttribute
        memory > xtestGetAttrValues
        memory > xcheckRenameNodeSharedConstraints
        memory > xtestCreateAttributeNS
        memory > xtestDeepcopiedDocument
        memory > xtestCloneElementShallow
        memory > xassert_recursive_equal
        memory > xtestCloneDocumentTypeDeepNotOk
        memory > xtestAppendChild
        memory > xtestSetAttrValueandNodeValue
        memory > xtestParse
        memory > xcheck_clone_pi
        memory > xtestRenameOther
        memory > xtestCloneDocumentShallow
        memory > xtestBug1433694
        memory > xtestCloneDocumentTypeShallowNotOk
        memory > xtestGetAttributeNode
        memory > xtestProcessingInstruction
        memory > xcheckWholeText
        memory > xtestContext
        memory > xtestDocRemoveChild
        memory > xtestNodeListItem
        memory > xtestAttrListItem
        memory > xtestRemoveNamedItemNS
        memory > xtestNormalizeDeleteWithPrevSibling
        memory > xtestNormalizeDeleteWithNextSibling
        memory > xtestEncodings
        memory > xtestWriteText
        memory > xtestReplaceWholeText
        memory > xtestGetAttribute
        memory > xcheck_clone_node_entity
        memory > xtestClonePIDeep
        memory > xhandle
        memory > xtest_toxml_with_attributes_ordered
        memory > xtestCloneNodeEntity
        memory > xtestDeleteAttr
        memory > xtestAttrListLength
        memory > xtest_toprettyxml_with_attributes_ordered
        memory > xtestPatch1094164
        memory > xtestNormalize
        memory > xtestInsertBefore
        memory > xtestWholeText
        memory > xconfirm
        memory > xtestAAB
        memory > xtest_minidom_attribute_order
        memory > xtestCloneDocumentTypeShallowOk
        memory > x_setupCloneElement
        memory > xtestSiblings
        memory > xtestSchemaType
        memory > xtestRemoveNamedItem
        memory > xtestFirstChild
        memory > xtstfile
        memory > xtestAltNewline
        memory > xtestUserData
        memory > xtest_cdata_parsing
        memory > xtestParseAttributeNamespaces
        memory > xtestClonePIShallow
        memory > xtestRemoveAttrNS
        memory > xtestEmptyXMLNSValue
        memory > xtestNonZero
        memory > xtestNamedNodeMapSetItem
        memory > xtestCloneAttributeShallow
        memory > xtestGetEmptyNodeListFromElementsByTagNameNS
        memory > xtestDocumentAsyncAttr
        memory > xtestTextRepr
        memory > xtestAttrListValues
        memory > xtestAttrList__getitem__
        memory > xtestElementReprAndStrUnicodeNS
        memory > xtestAttributeRepr
        memory > xtestCloneAttributeDeep
        memory > xtestSerializeCommentNodeWithDoubleHyphen
        memory > xtestParseFromBinaryFile
        memory > xtestParseElementNamespaces
        memory > xtestAttrListItems
        memory > xtestParseElement
        memory > xtestGetElementsByTagName
        memory > xtestAppendChildFragment
        memory > xtestGetElementsByTagNameNS
        memory > xtestBug0777884
        memory > xtestNormalizeCombineAndNextSibling
        memory > x_create_fragment_test_nodes
        memory > xtestImportDocumentShallow
        memory > xtestParseFromTextFile
        memory > xtestGetAttrLength
        memory > x_testCloneElementCopiesAttributes
        memory > xtestNormalizeRecursion
        memory > xtestCloneDocumentTypeDeepOk
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xtstfile.write (((unsupported)).apply (((xsupport).xfindfile)) ("test.xml") ("xmltestdata"))
            xsample2.write "<?xml version='1.0' encoding='us-ascii'?>n<!DOCTYPE doc PUBLIC 'http://xml.python.org/public' 'http://xml.python.org/system' [n  <!ELEMENT e EMPTY>n  <!ENTITY ent SYSTEM 'http://xml.python.org/entity'>n]><doc attr='value'> textn<?pi sample?> <!-- comment --> <e/> </doc>"
            xcreate_doc_without_doctype.write
              [xdoctype]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((((((xgetDOMImplementation)).apply).xcreateDocument)).apply ("None: is there a None literal in the EO language?") ("doc") ((xdoctype)))))
            xcreate_nonempty_doctype.write
              []
                memory > xnotation
                memory > xdoctype
                memory > xentity
                seq > @
                  seq
                    xdoctype.write ((((((xgetDOMImplementation)).apply).xcreateDocumentType)).apply ("doc") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xdoctype).xentities).x_seq)) ((((unsupported)).apply)))
                    (((unsupported)).apply ((((xdoctype).xnotations).x_seq)) ((((unsupported)).apply)))
                    xnotation.write ((((((xxml).xdom).xminidom).xNotation)).apply ("my-notation") ("None: is there a None literal in the EO language?") ("http://xml.python.org/notations/my"))
                    bogusForceDataize.write ((((((xdoctype).xnotations).x_seq).xappend)).apply ((xnotation)))
                    xentity.write ((((((xxml).xdom).xminidom).xEntity)).apply ("my-entity") ("None: is there a None literal in the EO language?") ("http://xml.python.org/entities/my") ("my-notation"))
                    (((unsupported)).apply (((xentity).xversion)) ("1.0"))
                    (((unsupported)).apply (((xentity).xencoding)) ("utf-8"))
                    (((unsupported)).apply (((xentity).xactualEncoding)) ("us-ascii"))
                    bogusForceDataize.write ((((((xdoctype).xentities).x_seq).xappend)).apply ((xentity)))
                    (((unsupported)).apply ((xdoctype)))
            xcreate_doc_with_doctype.write
              []
                memory > xdoc
                memory > xdoctype
                seq > @
                  seq
                    xdoctype.write (((xcreate_nonempty_doctype)).apply)
                    xdoc.write (((xcreate_doc_without_doctype)).apply ((xdoctype)))
                    (((unsupported)).apply (((((((xdoctype).xentities).xitem)).apply (0)).xownerDocument)) ((xdoc)))
                    (((unsupported)).apply (((((((xdoctype).xnotations).xitem)).apply (0)).xownerDocument)) ((xdoc)))
                    (((unsupported)).apply ((xdoc)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xconfirm.write
                  [xself xtest xtestname]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xtest)) ((xtestname)))
                xcheckWholeText.write
                  [xself xnode xs]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((xnode).xwholeText)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xt).eq (xs))) (("looking for %r, found %r".mod (((unsupported)).apply ((xs)) ((xt))))))
                xtestDocumentAsyncAttr.write
                  [xself]
                    memory > xdoc
                    seq > @
                      seq
                        xdoc.write (((xDocument)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xdoc).xasync_)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xDocument).xasync_)))
                xtestParseFromBinaryFile.write
                  [xself]
                    memory > xdom
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply ((xtstfile)) ("rb"))) ((xfile)))
                        seq
                          xdom.write (((xparse)).apply ((xfile)))
                          bogusForceDataize.write ((((xdom).xunlink)).apply)
                          bogusForceDataize.write ((((xself).xconfirm)).apply ((((xisinstance)).apply ((xdom)) ((xDocument)))))
                xtestParseFromTextFile.write
                  [xself]
                    memory > xdom
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xtstfile)) ("r") ("iso-8859-1"))) ((xfile)))
                        seq
                          xdom.write (((xparse)).apply ((xfile)))
                          bogusForceDataize.write ((((xdom).xunlink)).apply)
                          bogusForceDataize.write ((((xself).xconfirm)).apply ((((xisinstance)).apply ((xdom)) ((xDocument)))))
                xtestGetElementsByTagName.write
                  [xself]
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparse)).apply ((xtstfile)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xdom).xgetElementsByTagName)).apply ("LI")).eq (((((xdom).xdocumentElement).xgetElementsByTagName)).apply ("LI")))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestInsertBefore.write
                  [xself]
                    memory > xdom
                    memory > xnelem
                    memory > xnelem2
                    memory > xelem
                    memory > xroot
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<doc><foo/></doc>"))
                        xroot.write ((xdom).xdocumentElement)
                        xelem.write (((unsupported)).apply (((xroot).xchildNodes)) (0))
                        xnelem.write ((((xdom).xcreateElement)).apply ("element"))
                        bogusForceDataize.write ((((xroot).xinsertBefore)).apply ((xnelem)) ((xelem)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2)).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (0))) ((xnelem)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (0))) ((xnelem)))).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (1))) ((xelem)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (1))) ((xelem)))).and (((unsupported)).apply (((xroot).xfirstChild)) ((xnelem)))).and (((unsupported)).apply (((xroot).xlastChild)) ((xelem)))).and (((((xroot).xtoxml)).apply).eq "<doc><element/><foo/></doc>"))) ("testInsertBefore -- node properly placed in tree"))
                        xnelem.write ((((xdom).xcreateElement)).apply ("element"))
                        bogusForceDataize.write ((((xroot).xinsertBefore)).apply ((xnelem)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 3).and ((((xroot).xchildNodes).xlength).eq 3)).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (1))) ((xelem)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (1))) ((xelem)))).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (2))) ((xnelem)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (2))) ((xnelem)))).and (((unsupported)).apply (((xroot).xlastChild)) ((xnelem)))).and (((unsupported)).apply (((xnelem).xpreviousSibling)) ((xelem)))).and (((((xroot).xtoxml)).apply).eq "<doc><element/><foo/><element/></doc>"))) ("testInsertBefore -- node properly placed in tree"))
                        xnelem2.write ((((xdom).xcreateElement)).apply ("bar"))
                        bogusForceDataize.write ((((xroot).xinsertBefore)).apply ((xnelem2)) ((xnelem)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 4).and ((((xroot).xchildNodes).xlength).eq 4)).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (2))) ((xnelem2)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (2))) ((xnelem2)))).and (((unsupported)).apply ((((unsupported)).apply (((xroot).xchildNodes)) (3))) ((xnelem)))).and (((unsupported)).apply ((((((xroot).xchildNodes).xitem)).apply (3))) ((xnelem)))).and (((unsupported)).apply (((xnelem2).xnextSibling)) ((xnelem)))).and (((unsupported)).apply (((xnelem).xpreviousSibling)) ((xnelem2)))).and (((((xroot).xtoxml)).apply).eq "<doc><element/><foo/><bar/><element/></doc>"))) ("testInsertBefore -- node properly placed in tree"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                x_create_fragment_test_nodes.write
                  [xself]
                    memory > xc3
                    memory > xorig
                    memory > xc2
                    memory > xdom
                    memory > xfrag
                    memory > xc1
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<doc/>"))
                        xorig.write ((((xdom).xcreateTextNode)).apply ("original"))
                        xc1.write ((((xdom).xcreateTextNode)).apply ("foo"))
                        xc2.write ((((xdom).xcreateTextNode)).apply ("bar"))
                        xc3.write ((((xdom).xcreateTextNode)).apply ("bat"))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xappendChild)).apply ((xorig)))
                        xfrag.write ((((xdom).xcreateDocumentFragment)).apply)
                        bogusForceDataize.write ((((xfrag).xappendChild)).apply ((xc1)))
                        bogusForceDataize.write ((((xfrag).xappendChild)).apply ((xc2)))
                        bogusForceDataize.write ((((xfrag).xappendChild)).apply ((xc3)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xorig)) ((xc1)) ((xc2)) ((xc3)) ((xfrag)))))
                xtestInsertBeforeFragment.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xorig)) ((xc1)) ((xc2)) ((xc3)) ((xfrag)))) (((((xself).x_create_fragment_test_nodes)).apply)))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xinsertBefore)).apply ((xfrag)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xtuple)).apply ((((xdom).xdocumentElement).xchildNodes))).eq (((unsupported)).apply ((xorig)) ((xc1)) ((xc2)) ((xc3))))) ("insertBefore(<fragment>, None)"))
                        bogusForceDataize.write ((((xfrag).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xorig)) ((xc1)) ((xc2)) ((xc3)) ((xfrag)))) (((((xself).x_create_fragment_test_nodes)).apply)))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xinsertBefore)).apply ((xfrag)) ((xorig)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xtuple)).apply ((((xdom).xdocumentElement).xchildNodes))).eq (((unsupported)).apply ((xc1)) ((xc2)) ((xc3)) ((xorig))))) ("insertBefore(<fragment>, orig)"))
                        bogusForceDataize.write ((((xfrag).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAppendChild.write
                  [xself]
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparse)).apply ((xtstfile)))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xappendChild)).apply (((((xdom).xcreateComment)).apply ("Hello"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply ((((xdom).xdocumentElement).xchildNodes)) ((1.neg))).xnodeName).eq "#comment")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply ((((xdom).xdocumentElement).xchildNodes)) ((1.neg))).xdata).eq "Hello")))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAppendChildFragment.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xorig)) ((xc1)) ((xc2)) ((xc3)) ((xfrag)))) (((((xself).x_create_fragment_test_nodes)).apply)))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xappendChild)).apply ((xfrag)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xtuple)).apply ((((xdom).xdocumentElement).xchildNodes))).eq (((unsupported)).apply ((xorig)) ((xc1)) ((xc2)) ((xc3))))) ("appendChild(<fragment>)"))
                        bogusForceDataize.write ((((xfrag).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestReplaceChildFragment.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xorig)) ((xc1)) ((xc2)) ((xc3)) ((xfrag)))) (((((xself).x_create_fragment_test_nodes)).apply)))
                        bogusForceDataize.write (((((xdom).xdocumentElement).xreplaceChild)).apply ((xfrag)) ((xorig)))
                        bogusForceDataize.write ((((xorig).xunlink)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xtuple)).apply ((((xdom).xdocumentElement).xchildNodes))).eq (((unsupported)).apply ((xc1)) ((xc2)) ((xc3))))) ("replaceChild(<fragment>)"))
                        bogusForceDataize.write ((((xfrag).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestLegalChildren.write
                  [xself]
                    memory > xnodemap
                    memory > xelem
                    memory > xtext
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xelem.write ((((xdom).xcreateElement)).apply ("element"))
                        xtext.write ((((xdom).xcreateTextNode)).apply ("text"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xdom).xappendChild)) ((xtext)))
                        bogusForceDataize.write ((((xdom).xappendChild)).apply ((xelem)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xdom).xinsertBefore)) ((xtext)) ((xelem)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xdom).xreplaceChild)) ((xtext)) ((xelem)))
                        xnodemap.write ((xelem).xattributes)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xnodemap).xsetNamedItem)) ((xtext)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xnodemap).xsetNamedItemNS)) ((xtext)))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply ((xtext)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestNamedNodeMapSetItem.write
                  [xself]
                    memory > xelem
                    memory > xa
                    memory > xdom
                    memory > xattrs
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xelem.write ((((xdom).xcreateElement)).apply ("element"))
                        xattrs.write ((xelem).xattributes)
                        (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("foo"))) ("bar"))
                        xa.write ((((xattrs).xitem)).apply (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xa).xownerDocument)) ((xdom)))) ("NamedNodeMap.__setitem__() sets ownerDocument"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xa).xownerElement)) ((xelem)))) ("NamedNodeMap.__setitem__() sets ownerElement"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa).xvalue).eq "bar")) ("NamedNodeMap.__setitem__() sets value"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa).xnodeValue).eq "bar")) ("NamedNodeMap.__setitem__() sets nodeValue"))
                        bogusForceDataize.write ((((xelem).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestNonZero.write
                  [xself]
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparse)).apply ((xtstfile)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((xdom)))
                        bogusForceDataize.write ((((xdom).xappendChild)).apply (((((xdom).xcreateComment)).apply ("foo"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((xdom).xchildNodes)) ((1.neg))).xchildNodes).not)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestUnlink.write
                  [xself]
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparse)).apply ((xtstfile)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xdom).xchildNodes)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xdom).xchildNodes)))
                xtestContext.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xparse)).apply ((xtstfile)))) ((xdom)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xdom).xchildNodes)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xdom).xchildNodes)))
                xtestElement.write
                  [xself]
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        bogusForceDataize.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xdom).xdocumentElement)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAAA.write
                  [xself]
                    memory > xel
                    memory > xdom
                    memory > xa
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<abc/>"))
                        xel.write ((xdom).xdocumentElement)
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam") ("jam2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xel).xtoxml)).apply).eq "<abc spam=\"jam2\"/>")) ("testAAA"))
                        xa.write ((((xel).xgetAttributeNode)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xa).xownerDocument)) ((xdom)))) ("setAttribute() sets ownerDocument"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xa).xownerElement)) (((xdom).xdocumentElement)))) ("setAttribute() sets ownerElement"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAAB.write
                  [xself]
                    memory > xel
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<abc/>"))
                        xel.write ((xdom).xdocumentElement)
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam") ("jam"))
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam") ("jam2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xel).xtoxml)).apply).eq "<abc spam=\"jam2\"/>")) ("testAAB"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAddAttr.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("def") ("ghi"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xchild).xgetAttribute)).apply ("def")).eq "ghi")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((xchild).xattributes)) ("def")).xvalue).eq "ghi")))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("jkl") ("mno"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xchild).xgetAttribute)).apply ("jkl")).eq "mno")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((xchild).xattributes)) ("jkl")).xvalue).eq "mno")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 2)))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("def") ("newval"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xchild).xgetAttribute)).apply ("def")).eq "newval")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((xchild).xattributes)) ("def")).xvalue).eq "newval")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 2)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestDeleteAttr.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 0)))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("def") ("ghi"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 1)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchild).xattributes)) ("def"))))))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 0)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestRemoveAttr.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("def") ("ghi"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xchild).xremoveAttribute)) ("foo"))
                        bogusForceDataize.write ((((xchild).xremoveAttribute)).apply ("def"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 0)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestRemoveAttrNS.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElementNS)).apply ("http://www.python.org") ("python:abc"))))
                        bogusForceDataize.write ((((xchild).xsetAttributeNS)).apply ("http://www.w3.org") ("xmlns:python") ("http://www.python.org"))
                        bogusForceDataize.write ((((xchild).xsetAttributeNS)).apply ("http://www.python.org") ("python:abcattr") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xchild).xremoveAttributeNS)) ("foo") ("http://www.python.org"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 2)))
                        bogusForceDataize.write ((((xchild).xremoveAttributeNS)).apply ("http://www.python.org") ("abcattr"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 1)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestRemoveAttributeNode.write
                  [xself]
                    memory > xdom
                    memory > xnode
                    memory > xnode2
                    memory > xdom2
                    memory > xchild
                    memory > xchild2
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("foo"))))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("spam") ("jam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xchild).xattributes))).eq 1)))
                        xnode.write ((((xchild).xgetAttributeNode)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xchild).xremoveAttributeNode)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xnode)) (((((xchild).xremoveAttributeNode)).apply ((xnode)))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xchild).xattributes))).eq 0).and (((unsupported)).apply (((((xchild).xgetAttributeNode)).apply ("spam"))) ("None: is there a None literal in the EO language?")))))
                        xdom2.write (((xDocument)).apply)
                        xchild2.write ((((xdom2).xappendChild)).apply (((((xdom2).xcreateElement)).apply ("foo"))))
                        xnode2.write ((((xchild2).xgetAttributeNode)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xchild2).xremoveAttributeNode)) ((xnode2)))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestHasAttribute.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("foo"))))
                        bogusForceDataize.write ((((xchild).xsetAttribute)).apply ("spam") ("jam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xchild).xhasAttribute)).apply ("spam"))))
                xtestChangeAttr.write
                  [xself]
                    memory > xel
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<abc/>"))
                        xel.write ((xdom).xdocumentElement)
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam") ("jam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xel).xattributes))).eq 1)))
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam") ("bam"))
                        bogusForceDataize.write ((((xel).xsetIdAttribute)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xlen)).apply (((xel).xattributes))).eq 1).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xvalue).eq "bam")).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xnodeValue).eq "bam")).and (((((xel).xgetAttribute)).apply ("spam")).eq "bam")).and (((((xel).xgetAttributeNode)).apply ("spam")).xisId))))
                        (((unsupported)).apply ((((unsupported)).apply (((xel).xattributes)) ("spam"))) ("ham"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xlen)).apply (((xel).xattributes))).eq 1).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xvalue).eq "ham")).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xnodeValue).eq "ham")).and (((((xel).xgetAttribute)).apply ("spam")).eq "ham")).and ((((unsupported)).apply (((xel).xattributes)) ("spam")).xisId))))
                        bogusForceDataize.write ((((xel).xsetAttribute)).apply ("spam2") ("bam"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((xlen)).apply (((xel).xattributes))).eq 2).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xvalue).eq "ham")).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xnodeValue).eq "ham")).and (((((xel).xgetAttribute)).apply ("spam")).eq "ham")).and (((((unsupported)).apply (((xel).xattributes)) ("spam2")).xvalue).eq "bam")).and (((((unsupported)).apply (((xel).xattributes)) ("spam2")).xnodeValue).eq "bam")).and (((((xel).xgetAttribute)).apply ("spam2")).eq "bam"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xel).xattributes)) ("spam2"))) ("bam2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((xlen)).apply (((xel).xattributes))).eq 2).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xvalue).eq "ham")).and (((((unsupported)).apply (((xel).xattributes)) ("spam")).xnodeValue).eq "ham")).and (((((xel).xgetAttribute)).apply ("spam")).eq "ham")).and (((((unsupported)).apply (((xel).xattributes)) ("spam2")).xvalue).eq "bam2")).and (((((unsupported)).apply (((xel).xattributes)) ("spam2")).xnodeValue).eq "bam2")).and (((((xel).xgetAttribute)).apply ("spam2")).eq "bam2"))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestGetAttrList.write
                  [xself]
                    seq > @
                xtestGetAttrValues.write
                  [xself]
                    seq > @
                xtestGetAttrLength.write
                  [xself]
                    seq > @
                xtestGetAttribute.write
                  [xself]
                    memory > xchild
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElementNS)).apply ("http://www.python.org") ("python:abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xchild).xgetAttribute)).apply ("missing"))) (""))
                xtestGetAttributeNS.write
                  [xself]
                    memory > xchild
                    memory > xchild2
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xchild.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElementNS)).apply ("http://www.python.org") ("python:abc"))))
                        bogusForceDataize.write ((((xchild).xsetAttributeNS)).apply ("http://www.w3.org") ("xmlns:python") ("http://www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xchild).xgetAttributeNS)).apply ("http://www.w3.org") ("python"))) ("http://www.python.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xchild).xgetAttributeNS)).apply ("http://www.w3.org") ("other"))) (""))
                        xchild2.write ((((xchild).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xchild2).xgetAttributeNS)).apply ("http://www.python.org") ("missing"))) (""))
                xtestGetAttributeNode.write
                  [xself]
                    seq > @
                xtestGetElementsByTagNameNS.write
                  [xself]
                    memory > xd
                    memory > xelems
                    memory > xdom
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        xdom.write (((xparseString)).apply ((xd)))
                        xelems.write ((((xdom).xgetElementsByTagNameNS)).apply ("http://pyxml.sf.net/minidom") ("myelem"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((xlen)).apply ((xelems))).eq 1).and (((((unsupported)).apply ((xelems)) (0)).xnamespaceURI).eq "http://pyxml.sf.net/minidom")).and (((((unsupported)).apply ((xelems)) (0)).xlocalName).eq "myelem")).and (((((unsupported)).apply ((xelems)) (0)).xprefix).eq "minidom")).and (((((unsupported)).apply ((xelems)) (0)).xtagName).eq "minidom:myelem")).and (((((unsupported)).apply ((xelems)) (0)).xnodeName).eq "minidom:myelem"))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xget_empty_nodelist_from_elements_by_tagName_ns_helper.write
                  [xself xdoc xnsuri xlname]
                    memory > xnodelist
                    seq > @
                      seq
                        xnodelist.write ((((xdoc).xgetElementsByTagNameNS)).apply ((xnsuri)) ((xlname)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply ((xnodelist))).eq 0)))
                xtestGetEmptyNodeListFromElementsByTagNameNS.write
                  [xself]
                    memory > xdoc
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("http://xml.python.org/namespaces/a") ("localname"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("*") ("splat"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("http://xml.python.org/namespaces/a") ("*"))
                        xdoc.write (((xparseString)).apply ("<doc xmlns=\"http://xml.python.org/splat\"><e/></doc>"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("http://xml.python.org/splat") ("not-there"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("*") ("not-there"))
                        bogusForceDataize.write ((((xself).xget_empty_nodelist_from_elements_by_tagName_ns_helper)).apply ((xdoc)) ("http://somewhere.else.net/not-there") ("e"))
                xtestElementReprAndStr.write
                  [xself]
                    memory > xstring1
                    memory > xel
                    memory > xstring2
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xel.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        xstring1.write (((xrepr)).apply ((xel)))
                        xstring2.write (((xstr)).apply ((xel)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xstring1).eq (xstring2))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestElementReprAndStrUnicode.write
                  [xself]
                    memory > xstring1
                    memory > xel
                    memory > xstring2
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xel.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        xstring1.write (((xrepr)).apply ((xel)))
                        xstring2.write (((xstr)).apply ((xel)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xstring1).eq (xstring2))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestElementReprAndStrUnicodeNS.write
                  [xself]
                    memory > xstring1
                    memory > xel
                    memory > xstring2
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xel.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElementNS)).apply ("http://www.slashdot.org") ("slash:abc"))))
                        xstring1.write (((xrepr)).apply ((xel)))
                        xstring2.write (((xstr)).apply ((xel)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xstring1).eq (xstring2))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply ("slash:abc") ((xstring1)))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestAttributeRepr.write
                  [xself]
                    memory > xel
                    memory > xnode
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xel.write ((((xdom).xappendChild)).apply (((((xdom).xcreateElement)).apply ("abc"))))
                        xnode.write ((((xel).xsetAttribute)).apply ("abc") ("def"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xstr)).apply ((xnode))).eq (((xrepr)).apply ((xnode))))))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestTextNodeRepr.write
                  [xself]
                    seq > @
                xtestWriteXML.write
                  [xself]
                    memory > xdomstr
                    memory > xstr
                    memory > xdom
                    seq > @
                      seq
                        xstr.write "<?xml version=\"1.0\" ?><a b=\"c\"/>"
                        xdom.write (((xparseString)).apply ((xstr)))
                        xdomstr.write ((((xdom).xtoxml)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xstr).eq (xdomstr))))
                xtestAltNewline.write
                  [xself]
                    memory > xdomstr
                    memory > xstr
                    memory > xdom
                    seq > @
                      seq
                        xstr.write "<?xml version=\"1.0\" ?>n<a b=\"c\"/>n"
                        xdom.write (((xparseString)).apply ((xstr)))
                        xdomstr.write (((unsupported)).apply (((xdom).xtoprettyxml)) ("rn"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xdomstr).eq ((((xstr).xreplace)).apply ("n") ("rn")))))
                xtest_toprettyxml_with_text_nodes.write
                  [xself]
                    memory > xdecl
                    seq > @
                      seq
                        xdecl.write "<?xml version=\"1.0\" ?>n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xparseString)).apply ("<B>A</B>")).xtoprettyxml)).apply)) (((xdecl).add "<B>A</B>n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xparseString)).apply ("<C>A<B>A</B></C>")).xtoprettyxml)).apply)) (((xdecl).add "<C>ntAnt<B>A</B>n</C>n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xparseString)).apply ("<C><B>A</B>A</C>")).xtoprettyxml)).apply)) (((xdecl).add "<C>nt<B>A</B>ntAn</C>n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xparseString)).apply ("<C><B>A</B><B>A</B></C>")).xtoprettyxml)).apply)) (((xdecl).add "<C>nt<B>A</B>nt<B>A</B>n</C>n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xparseString)).apply ("<C><B>A</B>A<B>A</B></C>")).xtoprettyxml)).apply)) (((xdecl).add "<C>nt<B>A</B>ntAnt<B>A</B>n</C>n")))
                xtest_toprettyxml_with_adjacent_text_nodes.write
                  [xself]
                    memory > xelem
                    memory > xdecl
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xelem.write ((((xdom).xcreateElement)).apply ("elem"))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply (((((xdom).xcreateTextNode)).apply ("TEXT"))))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply (((((xdom).xcreateTextNode)).apply ("TEXT"))))
                        bogusForceDataize.write ((((xdom).xappendChild)).apply ((xelem)))
                        xdecl.write "<?xml version=\"1.0\" ?>n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdom).xtoprettyxml)).apply)) (((xdecl).add "<elem>ntTEXTntTEXTn</elem>n")))
                xtest_toprettyxml_preserves_content_of_text_node.write
                  [xself]
                    memory > xdom2
                    memory > xdom
                    seq > @
                      (((unsupported)).apply ((xstr)) ((((unsupported)).apply ("<B>A</B>") ("<A><B>C</B></A>"))))
                        seq
                          xdom.write (((xparseString)).apply ((xstr)))
                          xdom2.write (((xparseString)).apply (((((xdom).xtoprettyxml)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((((unsupported)).apply (((((xdom).xgetElementsByTagName)).apply ("B"))) (0)).xchildNodes)) (0)).xtoxml)).apply)) (((((((unsupported)).apply (((((unsupported)).apply (((((xdom2).xgetElementsByTagName)).apply ("B"))) (0)).xchildNodes)) (0)).xtoxml)).apply)))
                xtestProcessingInstruction.write
                  [xself]
                    memory > xpi
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<e><?mypi tn data tn ?></e>"))
                        xpi.write (((xdom).xdocumentElement).xfirstChild)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((((xpi).xtarget).eq "mypi").and (((xpi).xdata).eq "data tn ")).and (((xpi).xnodeName).eq "mypi")).and (((xpi).xnodeType).eq ((xNode).xPROCESSING_INSTRUCTION_NODE))).and (((unsupported)).apply (((xpi).xattributes)) ("None: is there a None literal in the EO language?"))).and (((((xpi).xhasChildNodes)).apply).not)).and ((((xlen)).apply (((xpi).xchildNodes))).eq 0)).and (((unsupported)).apply (((xpi).xfirstChild)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((xpi).xlastChild)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((xpi).xlocalName)) ("None: is there a None literal in the EO language?"))).and (((xpi).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE)))))
                xtestProcessingInstructionRepr.write
                  [xself]
                    seq > @
                xtestTextRepr.write
                  [xself]
                    seq > @
                xtestWriteText.write
                  [xself]
                    seq > @
                xtestDocumentElement.write
                  [xself]
                    seq > @
                xtestTooManyDocumentElements.write
                  [xself]
                    memory > xdoc
                    memory > xelem
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xelem.write ((((xdoc).xcreateElement)).apply ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xHierarchyRequestErr)) (((xdoc).xappendChild)) ((xelem)))
                        bogusForceDataize.write ((((xelem).xunlink)).apply)
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestCreateElementNS.write
                  [xself]
                    seq > @
                xtestCreateAttributeNS.write
                  [xself]
                    seq > @
                xtestParse.write
                  [xself]
                    seq > @
                xtestParseString.write
                  [xself]
                    seq > @
                xtestComment.write
                  [xself]
                    seq > @
                xtestAttrListItem.write
                  [xself]
                    seq > @
                xtestAttrListItems.write
                  [xself]
                    seq > @
                xtestAttrListItemNS.write
                  [xself]
                    seq > @
                xtestAttrListKeys.write
                  [xself]
                    seq > @
                xtestAttrListKeysNS.write
                  [xself]
                    seq > @
                xtestRemoveNamedItem.write
                  [xself]
                    memory > xattrs
                    memory > xa1
                    memory > xa2
                    memory > xdoc
                    memory > xe
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc a=''/>"))
                        xe.write ((xdoc).xdocumentElement)
                        xattrs.write ((xe).xattributes)
                        xa1.write ((((xe).xgetAttributeNode)).apply ("a"))
                        xa2.write ((((xattrs).xremoveNamedItem)).apply ("a"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xa1).xisSameNode)).apply ((xa2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xattrs).xremoveNamedItem)) ("a"))
                xtestRemoveNamedItemNS.write
                  [xself]
                    memory > xattrs
                    memory > xa1
                    memory > xa2
                    memory > xdoc
                    memory > xe
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc xmlns:a='http://xml.python.org/' a:b=''/>"))
                        xe.write ((xdoc).xdocumentElement)
                        xattrs.write ((xe).xattributes)
                        xa1.write ((((xe).xgetAttributeNodeNS)).apply ("http://xml.python.org/") ("b"))
                        xa2.write ((((xattrs).xremoveNamedItemNS)).apply ("http://xml.python.org/") ("b"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xa1).xisSameNode)).apply ((xa2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xattrs).xremoveNamedItemNS)) ("http://xml.python.org/") ("b"))
                xtestAttrListValues.write
                  [xself]
                    seq > @
                xtestAttrListLength.write
                  [xself]
                    seq > @
                xtestAttrList__getitem__.write
                  [xself]
                    seq > @
                xtestAttrList__setitem__.write
                  [xself]
                    seq > @
                xtestSetAttrValueandNodeValue.write
                  [xself]
                    seq > @
                xtestParseElement.write
                  [xself]
                    seq > @
                xtestParseAttributes.write
                  [xself]
                    seq > @
                xtestParseElementNamespaces.write
                  [xself]
                    seq > @
                xtestParseAttributeNamespaces.write
                  [xself]
                    seq > @
                xtestParseProcessingInstructions.write
                  [xself]
                    seq > @
                xtestChildNodes.write
                  [xself]
                    seq > @
                xtestFirstChild.write
                  [xself]
                    seq > @
                xtestHasChildNodes.write
                  [xself]
                    memory > xdoc
                    memory > xdom2
                    memory > xdoc2
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<doc><foo/></doc>"))
                        xdoc.write ((xdom).xdocumentElement)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xdoc).xhasChildNodes)).apply)))
                        xdom2.write (((xparseString)).apply ("<doc/>"))
                        xdoc2.write ((xdom2).xdocumentElement)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xdoc2).xhasChildNodes)).apply)))
                x_testCloneElementCopiesAttributes.write
                  [xself xe1 xe2 xtest]
                    memory > xa2
                    memory > xattrs1
                    memory > xa1
                    memory > xkeys1
                    memory > xattrs2
                    memory > xkeys2
                    seq > @
                      seq
                        xattrs1.write ((xe1).xattributes)
                        xattrs2.write ((xe2).xattributes)
                        xkeys1.write (((xlist)).apply (((((xattrs1).xkeys)).apply)))
                        xkeys2.write (((xlist)).apply (((((xattrs2).xkeys)).apply)))
                        bogusForceDataize.write ((((xkeys1).xsort)).apply)
                        bogusForceDataize.write ((((xkeys2).xsort)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xkeys1).eq (xkeys2))) ("clone of element has same attribute keys"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xkeys1)))))))
                          seq
                            xa1.write ((((xattrs1).xitem)).apply ((xi)))
                            xa2.write ((((xattrs2).xitem)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((unsupported)).apply ((xa1)) ((xa2))).and (((xa1).xvalue).eq ((xa2).xvalue))).and (((xa1).xnodeValue).eq ((xa2).xnodeValue))).and (((xa1).xnamespaceURI).eq ((xa2).xnamespaceURI))).and (((xa1).xlocalName).eq ((xa2).xlocalName)))) ("clone of attribute node has proper attribute values"))
                            bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xa2).xownerElement)) ((xe2)))) ("clone of attribute node correctly owned"))
                x_setupCloneElement.write
                  [xself xdeep]
                    memory > xclone
                    memory > xroot
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xparseString)).apply ("<doc attr='value'><foo/></doc>"))
                        xroot.write ((xdom).xdocumentElement)
                        xclone.write ((((xroot).xcloneNode)).apply ((xdeep)))
                        bogusForceDataize.write ((((xself).x_testCloneElementCopiesAttributes)).apply ((xroot)) ((xclone)) (("testCloneElement".add (((xdeep).and "Deep").or "Shallow"))))
                        (((unsupported)).apply (((xroot).xtagName)) (((xroot).xnodeName)) ("MODIFIED"))
                        bogusForceDataize.write ((((xroot).xsetAttribute)).apply ("attr") ("NEW VALUE"))
                        bogusForceDataize.write ((((xroot).xsetAttribute)).apply ("added") ("VALUE"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xclone)))))
                xtestCloneElementShallow.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xclone)))) (((((xself).x_setupCloneElement)).apply (0))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xlen)).apply (((xclone).xchildNodes))).eq 0).and ((((xclone).xchildNodes).xlength).eq 0)).and (((unsupported)).apply (((xclone).xparentNode)) ("None: is there a None literal in the EO language?"))).and (((((xclone).xtoxml)).apply).eq "<doc attr=\"value\"/>"))) ("testCloneElementShallow"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestCloneElementDeep.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdom)) ((xclone)))) (((((xself).x_setupCloneElement)).apply (1))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xlen)).apply (((xclone).xchildNodes))).eq 1).and ((((xclone).xchildNodes).xlength).eq 1)).and (((unsupported)).apply (((xclone).xparentNode)) ("None: is there a None literal in the EO language?"))).and (((((xclone).xtoxml)).apply).eq "<doc attr=\"value\"><foo/></doc>"))) ("testCloneElementDeep"))
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xtestCloneDocumentShallow.write
                  [xself]
                    memory > xdoc
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<?xml version='1.0'?>n<!-- comment --><!DOCTYPE doc [n<!NOTATION notation SYSTEM 'http://xml.python.org/'>n]>n<doc attr='value'/>"))
                        xdoc2.write ((((xdoc).xcloneNode)).apply (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply ((xdoc2)) ("None: is there a None literal in the EO language?"))) ("testCloneDocumentShallow: shallow cloning of documents makes no sense!"))
                xtestCloneDocumentDeep.write
                  [xself]
                    memory > xdoc
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<?xml version='1.0'?>n<!-- comment --><!DOCTYPE doc [n<!NOTATION notation SYSTEM 'http://xml.python.org/'>n]>n<doc attr='value'/>"))
                        xdoc2.write ((((xdoc).xcloneNode)).apply (1))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xdoc).xisSameNode)).apply ((xdoc2))).or ((((xdoc2).xisSameNode)).apply ((xdoc)))).not)) ("testCloneDocumentDeep: document objects not distinct"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xdoc).xchildNodes))).eq (((xlen)).apply (((xdoc2).xchildNodes))))) ("testCloneDocumentDeep: wrong number of Document children"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xdoc2).xdocumentElement).xnodeType).eq ((xNode).xELEMENT_NODE))) ("testCloneDocumentDeep: documentElement not an ELEMENT_NODE"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xdoc2).xdocumentElement).xownerDocument).xisSameNode)).apply ((xdoc2)))) ("testCloneDocumentDeep: documentElement owner is not new document"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xdoc).xdocumentElement).xisSameNode)).apply (((xdoc2).xdocumentElement))).not)) ("testCloneDocumentDeep: documentElement should not be shared"))
                        (((unsupported)).apply (((xdoc).xdoctype)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xself).xconfirm)).apply (((((xdoc2).xdoctype).xnodeType).eq ((xNode).xDOCUMENT_TYPE_NODE))) ("testCloneDocumentDeep: doctype not a DOCUMENT_TYPE_NODE"))
                            bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xdoc2).xdoctype).xownerDocument).xisSameNode)).apply ((xdoc2)))))
                            bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xdoc).xdoctype).xisSameNode)).apply (((xdoc2).xdoctype))).not)))
                xtestCloneDocumentTypeDeepOk.write
                  [xself]
                    memory > xcn
                    memory > xclone
                    memory > xse
                    memory > xce
                    memory > xdoctype
                    memory > xsn
                    seq > @
                      seq
                        xdoctype.write (((xcreate_nonempty_doctype)).apply)
                        xclone.write ((((xdoctype).xcloneNode)).apply (1))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((unsupported)).apply ((xclone)) ("None: is there a None literal in the EO language?")).and (((xclone).xnodeName).eq ((xdoctype).xnodeName))).and (((xclone).xname).eq ((xdoctype).xname))).and (((xclone).xpublicId).eq ((xdoctype).xpublicId))).and (((xclone).xsystemId).eq ((xdoctype).xsystemId))).and ((((xlen)).apply (((xclone).xentities))).eq (((xlen)).apply (((xdoctype).xentities))))).and (((unsupported)).apply ((((((xclone).xentities).xitem)).apply ((((xlen)).apply (((xclone).xentities)))))) ("None: is there a None literal in the EO language?"))).and ((((xlen)).apply (((xclone).xnotations))).eq (((xlen)).apply (((xdoctype).xnotations))))).and (((unsupported)).apply ((((((xclone).xnotations).xitem)).apply ((((xlen)).apply (((xclone).xnotations)))))) ("None: is there a None literal in the EO language?"))).and ((((xlen)).apply (((xclone).xchildNodes))).eq 0))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xdoctype).xentities)))))))
                          seq
                            xse.write (((((xdoctype).xentities).xitem)).apply ((xi)))
                            xce.write (((((xclone).xentities).xitem)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((((xse).xisSameNode)).apply ((xce))).not).and (((((xce).xisSameNode)).apply ((xse))).not)).and (((xce).xnodeName).eq ((xse).xnodeName))).and (((xce).xnotationName).eq ((xse).xnotationName))).and (((xce).xpublicId).eq ((xse).xpublicId))).and (((xce).xsystemId).eq ((xse).xsystemId))).and (((xce).xencoding).eq ((xse).xencoding))).and (((xce).xactualEncoding).eq ((xse).xactualEncoding))).and (((xce).xversion).eq ((xse).xversion)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xdoctype).xnotations)))))))
                          seq
                            xsn.write (((((xdoctype).xnotations).xitem)).apply ((xi)))
                            xcn.write (((((xclone).xnotations).xitem)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((xsn).xisSameNode)).apply ((xcn))).not).and (((((xcn).xisSameNode)).apply ((xsn))).not)).and (((xcn).xnodeName).eq ((xsn).xnodeName))).and (((xcn).xpublicId).eq ((xsn).xpublicId))).and (((xcn).xsystemId).eq ((xsn).xsystemId)))))
                xtestCloneDocumentTypeDeepNotOk.write
                  [xself]
                    memory > xdoc
                    memory > xclone
                    seq > @
                      seq
                        xdoc.write (((xcreate_doc_with_doctype)).apply)
                        xclone.write (((((xdoc).xdoctype).xcloneNode)).apply (1))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply ((xclone)) ("None: is there a None literal in the EO language?"))) ("testCloneDocumentTypeDeepNotOk"))
                xtestCloneDocumentTypeShallowOk.write
                  [xself]
                    memory > xdoctype
                    memory > xclone
                    seq > @
                      seq
                        xdoctype.write (((xcreate_nonempty_doctype)).apply)
                        xclone.write ((((xdoctype).xcloneNode)).apply (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((unsupported)).apply ((xclone)) ("None: is there a None literal in the EO language?")).and (((xclone).xnodeName).eq ((xdoctype).xnodeName))).and (((xclone).xname).eq ((xdoctype).xname))).and (((xclone).xpublicId).eq ((xdoctype).xpublicId))).and (((xclone).xsystemId).eq ((xdoctype).xsystemId))).and ((((xlen)).apply (((xclone).xentities))).eq 0)).and (((unsupported)).apply ((((((xclone).xentities).xitem)).apply (0))) ("None: is there a None literal in the EO language?"))).and ((((xlen)).apply (((xclone).xnotations))).eq 0)).and (((unsupported)).apply ((((((xclone).xnotations).xitem)).apply (0))) ("None: is there a None literal in the EO language?"))).and ((((xlen)).apply (((xclone).xchildNodes))).eq 0))))
                xtestCloneDocumentTypeShallowNotOk.write
                  [xself]
                    memory > xdoc
                    memory > xclone
                    seq > @
                      seq
                        xdoc.write (((xcreate_doc_with_doctype)).apply)
                        xclone.write (((((xdoc).xdoctype).xcloneNode)).apply (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply ((xclone)) ("None: is there a None literal in the EO language?"))) ("testCloneDocumentTypeShallowNotOk"))
                xcheck_import_document.write
                  [xself xdeep xtestName]
                    memory > xdoc1
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc1.write (((xparseString)).apply ("<doc/>"))
                        xdoc2.write (((xparseString)).apply ("<doc/>"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotSupportedErr)) (((xdoc1).ximportNode)) ((xdoc2)) ((xdeep)))
                xtestImportDocumentShallow.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_import_document)).apply (0) ("testImportDocumentShallow"))
                xtestImportDocumentDeep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_import_document)).apply (1) ("testImportDocumentDeep"))
                xtestImportDocumentTypeShallow.write
                  [xself]
                    memory > xsrc
                    memory > xtarget
                    seq > @
                      seq
                        xsrc.write (((xcreate_doc_with_doctype)).apply)
                        xtarget.write (((xcreate_doc_without_doctype)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotSupportedErr)) (((xtarget).ximportNode)) (((xsrc).xdoctype)) (0))
                xtestImportDocumentTypeDeep.write
                  [xself]
                    memory > xsrc
                    memory > xtarget
                    seq > @
                      seq
                        xsrc.write (((xcreate_doc_with_doctype)).apply)
                        xtarget.write (((xcreate_doc_without_doctype)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotSupportedErr)) (((xtarget).ximportNode)) (((xsrc).xdoctype)) (1))
                xcheck_clone_attribute.write
                  [xself xdeep xtestName]
                    memory > xattr
                    memory > xdoc
                    memory > xclone
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc attr='value'/>"))
                        xattr.write (((((xdoc).xdocumentElement).xgetAttributeNode)).apply ("attr"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xattr)) ("None: is there a None literal in the EO language?"))
                        xclone.write ((((xattr).xcloneNode)).apply ((xdeep)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xclone).xisSameNode)).apply ((xattr))).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xattr).xisSameNode)).apply ((xclone))).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xclone).xownerElement)) ("None: is there a None literal in the EO language?"))) (((xtestName).add ": ownerElement should be None")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xclone).xownerDocument).xisSameNode)).apply (((xattr).xownerDocument)))) (((xtestName).add ": ownerDocument does not match")))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xclone).xspecified)) (((xtestName).add ": cloned attribute must have specified == True")))
                xtestCloneAttributeShallow.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_clone_attribute)).apply (0) ("testCloneAttributeShallow"))
                xtestCloneAttributeDeep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_clone_attribute)).apply (1) ("testCloneAttributeDeep"))
                xcheck_clone_pi.write
                  [xself xdeep xtestName]
                    memory > xpi
                    memory > xdoc
                    memory > xclone
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<?target data?><doc/>"))
                        xpi.write ((xdoc).xfirstChild)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpi).xnodeType)) (((xNode).xPROCESSING_INSTRUCTION_NODE)))
                        xclone.write ((((xpi).xcloneNode)).apply ((xdeep)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xclone).xtarget).eq ((xpi).xtarget)).and (((xclone).xdata).eq ((xpi).xdata)))))
                xtestClonePIShallow.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_clone_pi)).apply (0) ("testClonePIShallow"))
                xtestClonePIDeep.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_clone_pi)).apply (1) ("testClonePIDeep"))
                xcheck_clone_node_entity.write
                  [xself xclone_document]
                    memory > xhandler
                    memory > xclone
                    memory > xdocument
                    memory > xentity
                    memory > xhandle
                    memory > xdoctype
                    memory > xoperation
                    memory > xdst
                    seq > @
                      seq
                        xdocument.write ((((((xxml).xdom).xminidom).xparseString)).apply (((((((unsupported)).apply).xstrip)).apply)))
                        (((unsupported)).apply)
                          xhandle.write
                            [xself xoperation xkey xdata xsrc xdst]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xoperation)) ((xoperation)))
                                  (((unsupported)).apply (((xself).xkey)) ((xkey)))
                                  (((unsupported)).apply (((xself).xdata)) ((xdata)))
                                  (((unsupported)).apply (((xself).xsrc)) ((xsrc)))
                                  (((unsupported)).apply (((xself).xdst)) ((xdst)))
                        xhandler.write (((xHandler)).apply)
                        xdoctype.write ((xdocument).xdoctype)
                        xentity.write (((unsupported)).apply (((xdoctype).xentities)) ("smile"))
                        bogusForceDataize.write ((((xentity).xsetUserData)).apply ("key") ("data") ((xhandler)))
                        (xclone_document).if
                          seq
                            xclone.write (((unsupported)).apply (((xdocument).xcloneNode)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xclone).xdocumentElement).xfirstChild).xwholeText)) ("Don't let entities make you frown ☺"))
                            xoperation.write ((((xxml).xdom).xUserDataHandler).xNODE_IMPORTED)
                            xdst.write (((unsupported)).apply ((((xclone).xdoctype).xentities)) ("smile"))
                          seq
                            (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xdoctype)) ("ownerDocument") ("None: is there a None literal in the EO language?"))))
                              xclone.write (((unsupported)).apply (((xdoctype).xcloneNode)) (TRUE))
                            xoperation.write ((((xxml).xdom).xUserDataHandler).xNODE_CLONED)
                            xdst.write (((unsupported)).apply (((xclone).xentities)) ("smile"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xoperation)) ((xoperation)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xkey)) ("key"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xdata)) ("data"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xhandler).xsrc)) ((xentity)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xhandler).xdst)) ((xdst)))
                xtestCloneNodeEntity.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_clone_node_entity)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_clone_node_entity)).apply (TRUE))
                xtestNormalize.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("first"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("second"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2))) ("testNormalize -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xlen)).apply (((xroot).xchildNodes))).eq 1).and ((((xroot).xchildNodes).xlength).eq 1)).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and ((((xroot).xfirstChild).xdata).eq "firstsecond"))) ("testNormalize -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 0).and ((((xroot).xchildNodes).xlength).eq 0))) ("testNormalize -- single empty node removed"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeCombineAndNextSibling.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("first"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("second"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateElement)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 3).and ((((xroot).xchildNodes).xlength).eq 3))) ("testNormalizeCombineAndNextSibling -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2)).and ((((xroot).xfirstChild).xdata).eq "firstsecond")).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xnextSibling)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((xroot).xlastChild).xpreviousSibling)) (((xroot).xfirstChild)))).and (((unsupported)).apply ((((xroot).xlastChild).xnextSibling)) ("None: is there a None literal in the EO language?")))) ("testNormalizeCombinedAndNextSibling -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeDeleteWithPrevSibling.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("first"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2))) ("testNormalizeDeleteWithPrevSibling -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((xlen)).apply (((xroot).xchildNodes))).eq 1).and ((((xroot).xchildNodes).xlength).eq 1)).and ((((xroot).xfirstChild).xdata).eq "first")).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xnextSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((xroot).xfirstChild).xpreviousSibling)) ("None: is there a None literal in the EO language?")))) ("testNormalizeDeleteWithPrevSibling -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeDeleteWithNextSibling.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("second"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2))) ("testNormalizeDeleteWithNextSibling -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((xlen)).apply (((xroot).xchildNodes))).eq 1).and ((((xroot).xchildNodes).xlength).eq 1)).and ((((xroot).xfirstChild).xdata).eq "second")).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xnextSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((xroot).xfirstChild).xpreviousSibling)) ("None: is there a None literal in the EO language?")))) ("testNormalizeDeleteWithNextSibling -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeDeleteWithTwoNonTextSiblings.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateElement)).apply ("i"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateElement)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 3).and ((((xroot).xchildNodes).xlength).eq 3))) ("testNormalizeDeleteWithTwoSiblings -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2)).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xnextSibling)) (((xroot).xlastChild)))).and (((unsupported)).apply ((((xroot).xfirstChild).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((xroot).xlastChild).xpreviousSibling)) (((xroot).xfirstChild)))).and (((unsupported)).apply ((((xroot).xlastChild).xnextSibling)) ("None: is there a None literal in the EO language?")))) ("testNormalizeDeleteWithTwoSiblings -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeDeleteAndCombine.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("second"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("fourth"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xlen)).apply (((xroot).xchildNodes))).eq 5).and ((((xroot).xchildNodes).xlength).eq 5))) ("testNormalizeDeleteAndCombine -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((xlen)).apply (((xroot).xchildNodes))).eq 1).and ((((xroot).xchildNodes).xlength).eq 1)).and (((unsupported)).apply (((xroot).xfirstChild)) (((xroot).xlastChild)))).and ((((xroot).xfirstChild).xdata).eq "secondfourth")).and (((unsupported)).apply ((((xroot).xfirstChild).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((xroot).xfirstChild).xnextSibling)) ("None: is there a None literal in the EO language?")))) ("testNormalizeDeleteAndCombine -- result"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNormalizeRecursion.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc><o><i/>t</o><o><o>t2</o>t3</o></doc>"))
                        xroot.write ((xdoc).xdocumentElement)
                        bogusForceDataize.write ((((((unsupported)).apply (((xroot).xchildNodes)) (0)).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((((unsupported)).apply (((xroot).xchildNodes)) (0)).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("x"))))
                        bogusForceDataize.write ((((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("x2"))))
                        bogusForceDataize.write ((((((unsupported)).apply (((xroot).xchildNodes)) (1)).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("x3"))))
                        bogusForceDataize.write ((((xroot).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply (""))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 3).and ((((xroot).xchildNodes).xlength).eq 3)).and ((((xlen)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes))).eq 4)).and ((((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes).xlength).eq 4)).and ((((xlen)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes))).eq 3)).and ((((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes).xlength).eq 3)).and ((((xlen)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xchildNodes))).eq 2)).and ((((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xchildNodes).xlength).eq 2))) ("testNormalize2 -- preparation"))
                        bogusForceDataize.write ((((xdoc).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((xlen)).apply (((xroot).xchildNodes))).eq 2).and ((((xroot).xchildNodes).xlength).eq 2)).and ((((xlen)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes))).eq 2)).and ((((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes).xlength).eq 2)).and ((((xlen)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes))).eq 2)).and ((((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes).xlength).eq 2)).and ((((xlen)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xchildNodes))).eq 1)).and ((((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xchildNodes).xlength).eq 1))) ("testNormalize2 -- childNodes lengths"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (1)).xdata).eq "tx").and (((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xchildNodes)) (0)).xdata).eq "t2x2")).and (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (1)).xdata).eq "t3x3"))) ("testNormalize2 -- joined text fields"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (1)).xnextSibling)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (1)).xpreviousSibling)) ((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (0))))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (0)).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (0)).xnextSibling)) ((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (0)).xchildNodes)) (1))))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (1)).xnextSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (1)).xpreviousSibling)) ((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0))))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (0)).xnextSibling)) ((((unsupported)).apply (((((unsupported)).apply (((xroot).xchildNodes)) (1)).xchildNodes)) (1)))))) ("testNormalize2 -- sibling pointers"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestBug0777884.write
                  [xself]
                    memory > xdoc
                    memory > xtext
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<o>text</o>"))
                        xtext.write (((unsupported)).apply ((((xdoc).xdocumentElement).xchildNodes)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtext).xnodeType)) (((xNode).xTEXT_NODE)))
                        bogusForceDataize.write ((((xtext).xnormalize)).apply)
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestBug1433694.write
                  [xself]
                    memory > xdoc
                    memory > xnode
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<o><i/>t</o>"))
                        xnode.write ((xdoc).xdocumentElement)
                        (((unsupported)).apply (((((unsupported)).apply (((xnode).xchildNodes)) (1)).xnodeValue)) (""))
                        bogusForceDataize.write ((((xnode).xnormalize)).apply)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((unsupported)).apply (((xnode).xchildNodes)) ((1.neg))).xnextSibling)) ("None: is there a None literal in the EO language?"))) ("Final child's .nextSibling should be None"))
                xtestSiblings.write
                  [xself]
                    memory > xdoc
                    memory > xroot
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc><?pi?>text?<elm/></doc>"))
                        xroot.write ((xdoc).xdocumentElement)
                        (((unsupported)).apply ((((unsupported)).apply ((xpi)) ((xtext)) ((xelm)))) (((xroot).xchildNodes)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((unsupported)).apply (((xpi).xnextSibling)) ((xtext))).and (((unsupported)).apply (((xpi).xpreviousSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((xtext).xnextSibling)) ((xelm)))).and (((unsupported)).apply (((xtext).xpreviousSibling)) ((xpi)))).and (((unsupported)).apply (((xelm).xnextSibling)) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((xelm).xpreviousSibling)) ((xtext))))) ("testSiblings"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestParents.write
                  [xself]
                    memory > xdoc
                    memory > xelm1
                    memory > xroot
                    memory > xelm3
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc><elm1><elm2/><elm2><elm3/></elm2></elm1></doc>"))
                        xroot.write ((xdoc).xdocumentElement)
                        xelm1.write (((unsupported)).apply (((xroot).xchildNodes)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xelm2a)) ((xelm2b)))) (((xelm1).xchildNodes)))
                        xelm3.write (((unsupported)).apply (((xelm2b).xchildNodes)) (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((unsupported)).apply (((xroot).xparentNode)) ((xdoc))).and (((unsupported)).apply (((xelm1).xparentNode)) ((xroot)))).and (((unsupported)).apply (((xelm2a).xparentNode)) ((xelm1)))).and (((unsupported)).apply (((xelm2b).xparentNode)) ((xelm1)))).and (((unsupported)).apply (((xelm3).xparentNode)) ((xelm2b))))) ("testParents"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestNodeListItem.write
                  [xself]
                    memory > xdoc
                    memory > xdocelem
                    memory > xchildren
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc><e/><e/></doc>"))
                        xchildren.write ((xdoc).xchildNodes)
                        xdocelem.write (((unsupported)).apply ((xchildren)) (0))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((unsupported)).apply ((((unsupported)).apply ((xchildren)) (0))) (((((xchildren).xitem)).apply (0)))).and (((unsupported)).apply (((((xchildren).xitem)).apply (1))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply ((((((xdocelem).xchildNodes).xitem)).apply (0))) ((((unsupported)).apply (((xdocelem).xchildNodes)) (0))))).and (((unsupported)).apply ((((((xdocelem).xchildNodes).xitem)).apply (1))) ((((unsupported)).apply (((xdocelem).xchildNodes)) (1))))).and (((unsupported)).apply ((((((((((xdocelem).xchildNodes).xitem)).apply (0)).xchildNodes).xitem)).apply (0))) ("None: is there a None literal in the EO language?")))) ("test NodeList.item()"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestEncodings.write
                  [xself]
                    memory > xdoc
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<foo>&#x20ac;</foo>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply)) ("<?xml version=\"1.0\" ?><foo>u20ac</foo>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply ("utf-8"))) ("<?xml version=\"1.0\" encoding=\"utf-8\"?><foo>xe2x82xac</foo>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply ("iso-8859-15"))) ("<?xml version=\"1.0\" encoding=\"iso-8859-15\"?><foo>xa4</foo>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply ("us-ascii"))) ("<?xml version=\"1.0\" encoding=\"us-ascii\"?><foo>&#8364;</foo>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply ("utf-16"))) (((("<?xml version=\"1.0\" encoding=\"utf-16\"?><foo>u20ac</foo>".xencode)).apply ("utf-16"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) ((xparseString)) ("<franxe7ais>Comment xe7a va ? Trxe8s bien ?</franxe7ais>"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                (((unsupported)).apply)
                  seq
                    xcalled.write 0
                    xhandle.write
                      [xself xoperation xkey xdata xsrc xdst]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xdst).xsetUserData)).apply ((xkey)) (((xdata).add 1)) ((xself)))
                            bogusForceDataize.write ((((xsrc).xsetUserData)).apply ((xkey)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((xself).xcalled)) (1))
                xtestUserData.write
                  [xself]
                    memory > xn
                    memory > xc
                    memory > xhandler
                    memory > xdom
                    seq > @
                      seq
                        xdom.write (((xDocument)).apply)
                        xn.write ((((xdom).xcreateElement)).apply ("e"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((xn).xgetUserData)).apply ("foo"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xn).xsetUserData)).apply ("foo") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((xn).xgetUserData)).apply ("foo"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xn).xsetUserData)).apply ("foo") (12) (12))
                        bogusForceDataize.write ((((xn).xsetUserData)).apply ("bar") (13) (13))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xn).xgetUserData)).apply ("foo")).eq 12)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xn).xgetUserData)).apply ("bar")).eq 13)))
                        bogusForceDataize.write ((((xn).xsetUserData)).apply ("foo") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((xn).xgetUserData)).apply ("foo"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xn).xgetUserData)).apply ("bar")).eq 13)))
                        xhandler.write ((((xself).xUserDataHandler)).apply)
                        bogusForceDataize.write ((((xn).xsetUserData)).apply ("bar") (12) ((xhandler)))
                        xc.write ((((xn).xcloneNode)).apply (1))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xhandler).xcalled).and (((unsupported)).apply (((((xn).xgetUserData)).apply ("bar"))) ("None: is there a None literal in the EO language?"))).and (((((xc).xgetUserData)).apply ("bar")).eq 13))))
                        bogusForceDataize.write ((((xn).xunlink)).apply)
                        bogusForceDataize.write ((((xc).xunlink)).apply)
                        bogusForceDataize.write ((((xdom).xunlink)).apply)
                xcheckRenameNodeSharedConstraints.write
                  [xself xdoc xnode]
                    memory > xdoc2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNamespaceErr)) (((xdoc).xrenameNode)) ((xnode)) ("http://xml.python.org/ns") ("xmlns:foo"))
                        xdoc2.write (((xparseString)).apply ("<doc/>"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xWrongDocumentErr)) (((xdoc2).xrenameNode)) ((xnode)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("foo"))
                xtestRenameAttribute.write
                  [xself]
                    memory > xdoc
                    memory > xattrmap
                    memory > xelem
                    memory > xattr
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc a='v'/>"))
                        xelem.write ((xdoc).xdocumentElement)
                        xattrmap.write ((xelem).xattributes)
                        xattr.write (((unsupported)).apply (((xelem).xattributes)) ("a"))
                        xattr.write ((((xdoc).xrenameNode)).apply ((xattr)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("b"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((((xattr).xname).eq "b").and (((xattr).xnodeName).eq "b")).and (((unsupported)).apply (((xattr).xlocalName)) ("None: is there a None literal in the EO language?"))).and (((xattr).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE))).and (((unsupported)).apply (((xattr).xprefix)) ("None: is there a None literal in the EO language?"))).and (((xattr).xvalue).eq "v")).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("a"))) ("None: is there a None literal in the EO language?"))).and (((((((xelem).xgetAttributeNode)).apply ("b")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ("b")).xisSameNode)).apply ((xattr)))).and (((((xattr).xownerDocument).xisSameNode)).apply ((xdoc)))).and (((((xattr).xownerElement).xisSameNode)).apply ((xelem))))))
                        xattr.write ((((xdoc).xrenameNode)).apply ((xattr)) ("http://xml.python.org/ns") ("c"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((((xattr).xname).eq "c").and (((xattr).xnodeName).eq "c")).and (((xattr).xlocalName).eq "c")).and (((xattr).xnamespaceURI).eq "http://xml.python.org/ns")).and (((unsupported)).apply (((xattr).xprefix)) ("None: is there a None literal in the EO language?"))).and (((xattr).xvalue).eq "v")).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("a"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("b"))) ("None: is there a None literal in the EO language?"))).and (((((((xelem).xgetAttributeNode)).apply ("c")).xisSameNode)).apply ((xattr)))).and (((((((xelem).xgetAttributeNodeNS)).apply ("http://xml.python.org/ns") ("c")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ("c")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ((((unsupported)).apply ("http://xml.python.org/ns") ("c")))).xisSameNode)).apply ((xattr))))))
                        xattr.write ((((xdoc).xrenameNode)).apply ((xattr)) ("http://xml.python.org/ns2") ("p:d"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((((((((((xattr).xname).eq "p:d").and (((xattr).xnodeName).eq "p:d")).and (((xattr).xlocalName).eq "d")).and (((xattr).xnamespaceURI).eq "http://xml.python.org/ns2")).and (((xattr).xprefix).eq "p")).and (((xattr).xvalue).eq "v")).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("a"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("b"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("c"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNodeNS)).apply ("http://xml.python.org/ns") ("c"))) ("None: is there a None literal in the EO language?"))).and (((((((xelem).xgetAttributeNode)).apply ("p:d")).xisSameNode)).apply ((xattr)))).and (((((((xelem).xgetAttributeNodeNS)).apply ("http://xml.python.org/ns2") ("d")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ("p:d")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ((((unsupported)).apply ("http://xml.python.org/ns2") ("d")))).xisSameNode)).apply ((xattr))))))
                        xattr.write ((((xdoc).xrenameNode)).apply ((xattr)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("e"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((((((((((xattr).xname).eq "e").and (((xattr).xnodeName).eq "e")).and (((unsupported)).apply (((xattr).xlocalName)) ("None: is there a None literal in the EO language?"))).and (((xattr).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE))).and (((unsupported)).apply (((xattr).xprefix)) ("None: is there a None literal in the EO language?"))).and (((xattr).xvalue).eq "v")).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("a"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("b"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("c"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNode)).apply ("p:d"))) ("None: is there a None literal in the EO language?"))).and (((unsupported)).apply (((((xelem).xgetAttributeNodeNS)).apply ("http://xml.python.org/ns") ("c"))) ("None: is there a None literal in the EO language?"))).and (((((((xelem).xgetAttributeNode)).apply ("e")).xisSameNode)).apply ((xattr)))).and ((((((unsupported)).apply ((xattrmap)) ("e")).xisSameNode)).apply ((xattr))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNamespaceErr)) (((xdoc).xrenameNode)) ((xattr)) ("http://xml.python.org/ns") ("xmlns"))
                        bogusForceDataize.write ((((xself).xcheckRenameNodeSharedConstraints)).apply ((xdoc)) ((xattr)))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestRenameElement.write
                  [xself]
                    memory > xdoc
                    memory > xelem
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc/>"))
                        xelem.write ((xdoc).xdocumentElement)
                        xelem.write ((((xdoc).xrenameNode)).apply ((xelem)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("a"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xelem).xtagName).eq "a").and (((xelem).xnodeName).eq "a")).and (((unsupported)).apply (((xelem).xlocalName)) ("None: is there a None literal in the EO language?"))).and (((xelem).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE))).and (((unsupported)).apply (((xelem).xprefix)) ("None: is there a None literal in the EO language?"))).and (((((xelem).xownerDocument).xisSameNode)).apply ((xdoc))))))
                        xelem.write ((((xdoc).xrenameNode)).apply ((xelem)) ("http://xml.python.org/ns") ("b"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xelem).xtagName).eq "b").and (((xelem).xnodeName).eq "b")).and (((xelem).xlocalName).eq "b")).and (((xelem).xnamespaceURI).eq "http://xml.python.org/ns")).and (((unsupported)).apply (((xelem).xprefix)) ("None: is there a None literal in the EO language?"))).and (((((xelem).xownerDocument).xisSameNode)).apply ((xdoc))))))
                        xelem.write ((((xdoc).xrenameNode)).apply ((xelem)) ("http://xml.python.org/ns2") ("p:c"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xelem).xtagName).eq "p:c").and (((xelem).xnodeName).eq "p:c")).and (((xelem).xlocalName).eq "c")).and (((xelem).xnamespaceURI).eq "http://xml.python.org/ns2")).and (((xelem).xprefix).eq "p")).and (((((xelem).xownerDocument).xisSameNode)).apply ((xdoc))))))
                        xelem.write ((((xdoc).xrenameNode)).apply ((xelem)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("d"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((((xelem).xtagName).eq "d").and (((xelem).xnodeName).eq "d")).and (((unsupported)).apply (((xelem).xlocalName)) ("None: is there a None literal in the EO language?"))).and (((xelem).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE))).and (((unsupported)).apply (((xelem).xprefix)) ("None: is there a None literal in the EO language?"))).and (((((xelem).xownerDocument).xisSameNode)).apply ((xdoc))))))
                        bogusForceDataize.write ((((xself).xcheckRenameNodeSharedConstraints)).apply ((xdoc)) ((xelem)))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestRenameOther.write
                  [xself]
                    memory > xdoc
                    memory > xnode
                    seq > @
                      seq
                        xdoc.write (((((((((xxml).xdom).xminidom).xgetDOMImplementation)).apply).xcreateDocument)).apply ((((xxml).xdom).xEMPTY_NAMESPACE)) ("e") ("None: is there a None literal in the EO language?"))
                        xnode.write ((((xdoc).xcreateComment)).apply ("comment"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotSupportedErr)) (((xdoc).xrenameNode)) ((xnode)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("foo"))
                        bogusForceDataize.write ((((xdoc).xunlink)).apply)
                xtestWholeText.write
                  [xself]
                    memory > xtext2
                    memory > xsplitter
                    memory > xtext
                    memory > xelem
                    memory > xdoc
                    memory > xx
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc>a</doc>"))
                        xelem.write ((xdoc).xdocumentElement)
                        xtext.write (((unsupported)).apply (((xelem).xchildNodes)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtext).xnodeType)) (((xNode).xTEXT_NODE)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("a"))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply (((((xdoc).xcreateTextNode)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("ab"))
                        bogusForceDataize.write ((((xelem).xinsertBefore)).apply (((((xdoc).xcreateCDATASection)).apply ("c"))) ((xtext)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("cab"))
                        xsplitter.write ((((xdoc).xcreateComment)).apply ("comment"))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply ((xsplitter)))
                        xtext2.write ((((xdoc).xcreateTextNode)).apply ("d"))
                        bogusForceDataize.write ((((xelem).xappendChild)).apply ((xtext2)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("cab"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("d"))
                        xx.write ((((xdoc).xcreateElement)).apply ("x"))
                        bogusForceDataize.write ((((xelem).xreplaceChild)).apply ((xx)) ((xsplitter)))
                        xsplitter.write (xx)
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("cab"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("d"))
                        xx.write ((((xdoc).xcreateProcessingInstruction)).apply ("y") ("z"))
                        bogusForceDataize.write ((((xelem).xreplaceChild)).apply ((xx)) ((xsplitter)))
                        xsplitter.write (xx)
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("cab"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("d"))
                        bogusForceDataize.write ((((xelem).xremoveChild)).apply ((xsplitter)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("cabd"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("cabd"))
                xtestPatch1094164.write
                  [xself]
                    memory > xdoc
                    memory > xe
                    memory > xelem
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc><e/></doc>"))
                        xelem.write ((xdoc).xdocumentElement)
                        xe.write ((xelem).xfirstChild)
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xe).xparentNode)) ((xelem)))) ("Before replaceChild()"))
                        bogusForceDataize.write ((((xelem).xreplaceChild)).apply ((xe)) ((xe)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((xe).xparentNode)) ((xelem)))) ("After replaceChild()"))
                xtestReplaceWholeText.write
                  [xself]
                    memory > xsetup
                    memory > xtext
                    seq > @
                      seq
                        xsetup.write
                          []
                            memory > xtext2
                            memory > xsplitter
                            memory > xtext1
                            memory > xdoc
                            memory > xelem
                            seq > @
                              seq
                                xdoc.write (((xparseString)).apply ("<doc>a<e/>d</doc>"))
                                xelem.write ((xdoc).xdocumentElement)
                                xtext1.write ((xelem).xfirstChild)
                                xtext2.write ((xelem).xlastChild)
                                xsplitter.write ((xtext1).xnextSibling)
                                bogusForceDataize.write ((((xelem).xinsertBefore)).apply (((((xdoc).xcreateTextNode)).apply ("b"))) ((xsplitter)))
                                bogusForceDataize.write ((((xelem).xinsertBefore)).apply (((((xdoc).xcreateCDATASection)).apply ("c"))) ((xtext1)))
                                (((unsupported)).apply ((((unsupported)).apply ((xdoc)) ((xelem)) ((xtext1)) ((xsplitter)) ((xtext2)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdoc)) ((xelem)) ((xtext1)) ((xsplitter)) ((xtext2)))) ((((xsetup)).apply)))
                        xtext.write ((((xtext1).xreplaceWholeText)).apply ("new content"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("new content"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("d"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xelem).xchildNodes))).eq 3)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdoc)) ((xelem)) ((xtext1)) ((xsplitter)) ((xtext2)))) ((((xsetup)).apply)))
                        xtext.write ((((xtext2).xreplaceWholeText)).apply ("new content"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext)) ("new content"))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext1)) ("cab"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xlen)).apply (((xelem).xchildNodes))).eq 5)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdoc)) ((xelem)) ((xtext1)) ((xsplitter)) ((xtext2)))) ((((xsetup)).apply)))
                        xtext.write ((((xtext1).xreplaceWholeText)).apply (""))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply ((xtext2)) ("d"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).and ((((xlen)).apply (((xelem).xchildNodes))).eq 2))))
                xtestSchemaType.write
                  [xself]
                    memory > xt
                    memory > xdoc
                    memory > xnames
                    memory > xelem
                    memory > xa
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<!DOCTYPE doc [n  <!ENTITY e1 SYSTEM 'http://xml.python.org/e1'>n  <!ENTITY e2 SYSTEM 'http://xml.python.org/e2'>n  <!ATTLIST doc id   ID       #IMPLIED n                ref  IDREF    #IMPLIED n                refs IDREFS   #IMPLIED n                enum (a|b)    #IMPLIED n                ent  ENTITY   #IMPLIED n                ents ENTITIES #IMPLIED n                nm   NMTOKEN  #IMPLIED n                nms  NMTOKENS #IMPLIED n                text CDATA    #IMPLIED n    >n]><doc id='name' notid='name' text='splat!' enum='b'       ref='name' refs='name name' ent='e1' ents='e1 e2'       nm='123' nms='123 abc' />"))
                        xelem.write ((xdoc).xdocumentElement)
                        xt.write ((xelem).xschemaType)
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((unsupported)).apply (((xt).xname)) ("None: is there a None literal in the EO language?")).and (((xt).xnamespace).eq (((xxml).xdom).xEMPTY_NAMESPACE)))))
                        xnames.write ((("id notid text enum ref refs ent ents nm nms".xsplit)).apply)
                        (((unsupported)).apply ((xname)) ((xnames)))
                          seq
                            xa.write ((((xelem).xgetAttributeNode)).apply ((xname)))
                            xt.write ((xa).xschemaType)
                            bogusForceDataize.write ((((xself).xconfirm)).apply (((((xhasattr)).apply ((xt)) ("name")).and (((xt).xnamespace).eq (((xxml).xdom).xEMPTY_NAMESPACE)))))
                xtestSetIdAttribute.write
                  [xself]
                    memory > xa1
                    memory > xa2
                    memory > xdoc
                    memory > xa3
                    memory > xe
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<doc a1='v' a2='w'/>"))
                        xe.write ((xdoc).xdocumentElement)
                        xa1.write ((((xe).xgetAttributeNode)).apply ("a1"))
                        xa2.write ((((xe).xgetAttributeNode)).apply ("a2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?")).and (((xa1).xisId).not)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttribute)).apply ("a1"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((xa1).xisId)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttribute)).apply ("a2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))).and ((xa1).xisId)).and ((xa2).xisId))))
                        xa3.write ((((xdoc).xcreateAttribute)).apply ("a1"))
                        (((unsupported)).apply (((xa3).xvalue)) ("v"))
                        bogusForceDataize.write ((((xe).xsetAttributeNode)).apply ((xa3)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?")).and ((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))).and (((xa1).xisId).not)).and ((xa2).xisId)).and (((xa3).xisId).not))))
                        bogusForceDataize.write ((((xdoc).xrenameNode)).apply ((xa2)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("an"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w")))).and ((xa2).xisId))))
                xtestSetIdAttributeNS.write
                  [xself]
                    memory > xa1
                    memory > xNS1
                    memory > xa2
                    memory > xdoc
                    memory > xa3
                    memory > xe
                    memory > xNS2
                    seq > @
                      seq
                        xNS1.write "http://xml.python.org/ns1"
                        xNS2.write "http://xml.python.org/ns2"
                        xdoc.write (((xparseString)).apply ((((("<doc xmlns:ns1='".add (xNS1)).add "' xmlns:ns2='").add (xNS2)).add "' ns1:a1='v' ns2:a2='w'/>")))
                        xe.write ((xdoc).xdocumentElement)
                        xa1.write ((((xe).xgetAttributeNodeNS)).apply ((xNS1)) ("a1"))
                        xa2.write ((((xe).xgetAttributeNodeNS)).apply ((xNS2)) ("a2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?")).and (((xa1).xisId).not)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttributeNS)).apply ((xNS1)) ("a1"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((xa1).xisId)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttributeNS)).apply ((xNS2)) ("a2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))).and ((xa1).xisId)).and ((xa2).xisId))))
                        xa3.write ((((xdoc).xcreateAttributeNS)).apply ((xNS1)) ("a1"))
                        (((unsupported)).apply (((xa3).xvalue)) ("v"))
                        bogusForceDataize.write ((((xe).xsetAttributeNode)).apply ((xa3)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa1).xisId).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xa2).xisId)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa3).xisId).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xdoc).xrenameNode)).apply ((xa2)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("an"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w")))).and ((xa2).xisId))))
                xtestSetIdAttributeNode.write
                  [xself]
                    memory > xa1
                    memory > xNS1
                    memory > xa2
                    memory > xdoc
                    memory > xa3
                    memory > xe
                    memory > xNS2
                    seq > @
                      seq
                        xNS1.write "http://xml.python.org/ns1"
                        xNS2.write "http://xml.python.org/ns2"
                        xdoc.write (((xparseString)).apply ((((("<doc xmlns:ns1='".add (xNS1)).add "' xmlns:ns2='").add (xNS2)).add "' ns1:a1='v' ns2:a2='w'/>")))
                        xe.write ((xdoc).xdocumentElement)
                        xa1.write ((((xe).xgetAttributeNodeNS)).apply ((xNS1)) ("a1"))
                        xa2.write ((((xe).xgetAttributeNodeNS)).apply ((xNS2)) ("a2"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?")).and (((xa1).xisId).not)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttributeNode)).apply ((xa1)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((xa1).xisId)).and (((xa2).xisId).not))))
                        bogusForceDataize.write ((((xe).xsetIdAttributeNode)).apply ((xa2)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("v")))).and ((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))).and ((xa1).xisId)).and ((xa2).xisId))))
                        xa3.write ((((xdoc).xcreateAttributeNS)).apply ((xNS1)) ("a1"))
                        (((unsupported)).apply (((xa3).xvalue)) ("v"))
                        bogusForceDataize.write ((((xe).xsetAttributeNode)).apply ((xa3)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w"))))))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa1).xisId).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply (((xa2).xisId)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xa3).xisId).not)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((unsupported)).apply (((((xdoc).xgetElementById)).apply ("v"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xdoc).xrenameNode)).apply ((xa2)) ((((xxml).xdom).xEMPTY_NAMESPACE)) ("an"))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((((xe).xisSameNode)).apply (((((xdoc).xgetElementById)).apply ("w")))).and ((xa2).xisId))))
                xassert_recursive_equal.write
                  [xself xdoc xdoc2]
                    memory > xstack
                    memory > xno2
                    memory > xe1
                    memory > xno1
                    memory > xe2
                    seq > @
                      seq
                        xstack.write (((unsupported)).apply ((((unsupported)).apply ((xdoc)) ((xdoc2)))))
                        while.
                          (xstack)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xn1)) ((xn2)))) (((((xstack).xpop)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn1).xnodeType)) (((xn2).xnodeType)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xn1).xchildNodes)))) ((((xlen)).apply (((xn2).xchildNodes)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn1).xnodeName)) (((xn2).xnodeName)))
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xn1).xisSameNode)).apply ((xn2)))))
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xn2).xisSameNode)).apply ((xn1)))))
                                (((xn1).xnodeType).eq ((xNode).xDOCUMENT_TYPE_NODE)).if
                                  seq
                                    bogusForceDataize.write (((xlen)).apply (((xn1).xentities)))
                                    bogusForceDataize.write (((xlen)).apply (((xn2).xentities)))
                                    bogusForceDataize.write (((xlen)).apply (((xn1).xnotations)))
                                    bogusForceDataize.write (((xlen)).apply (((xn2).xnotations)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xn1).xentities)))) ((((xlen)).apply (((xn2).xentities)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xn1).xnotations)))) ((((xlen)).apply (((xn2).xnotations)))))
                                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xn1).xnotations)))))))
                                      seq
                                        xno1.write (((((xn1).xnotations).xitem)).apply ((xi)))
                                        xno2.write (((((xn1).xnotations).xitem)).apply ((xi)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xno1).xname)) (((xno2).xname)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xno1).xpublicId)) (((xno2).xpublicId)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xno1).xsystemId)) (((xno2).xsystemId)))
                                        bogusForceDataize.write ((((xstack).xappend)).apply ((((unsupported)).apply ((xno1)) ((xno2)))))
                                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xn1).xentities)))))))
                                      seq
                                        xe1.write (((((xn1).xentities).xitem)).apply ((xi)))
                                        xe2.write (((((xn2).xentities).xitem)).apply ((xi)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xnotationName)) (((xe2).xnotationName)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xpublicId)) (((xe2).xpublicId)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe1).xsystemId)) (((xe2).xsystemId)))
                                        bogusForceDataize.write ((((xstack).xappend)).apply ((((unsupported)).apply ((xe1)) ((xe2)))))
                                (((xn1).xnodeType).neq ((xNode).xDOCUMENT_NODE)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xn1).xownerDocument).xisSameNode)).apply ((xdoc)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xn2).xownerDocument).xisSameNode)).apply ((xdoc2)))))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xn1).xchildNodes)))))))
                                  bogusForceDataize.write ((((xstack).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply (((xn1).xchildNodes)) ((xi)))) ((((unsupported)).apply (((xn2).xchildNodes)) ((xi)))))))
                xtestPickledDocument.write
                  [xself]
                    memory > xdoc
                    memory > xs
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ((xsample)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply (2) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xs.write ((((xpickle).xdumps)).apply ((xdoc)) ((xproto)))
                            xdoc2.write ((((xpickle).xloads)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassert_recursive_equal)).apply ((xdoc)) ((xdoc2)))
                xtestDeepcopiedDocument.write
                  [xself]
                    memory > xdoc
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ((xsample)))
                        xdoc2.write ((((xcopy).xdeepcopy)).apply ((xdoc)))
                        bogusForceDataize.write ((((xself).xassert_recursive_equal)).apply ((xdoc)) ((xdoc2)))
                xtestSerializeCommentNodeWithDoubleHyphen.write
                  [xself]
                    memory > xdoc
                    seq > @
                      seq
                        xdoc.write (((xcreate_doc_without_doctype)).apply)
                        bogusForceDataize.write ((((xdoc).xappendChild)).apply (((((xdoc).xcreateComment)).apply ("foo--bar"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xdoc).xtoxml)))
                xtestEmptyXMLNSValue.write
                  [xself]
                    memory > xdoc
                    memory > xdoc2
                    seq > @
                      seq
                        xdoc.write (((xparseString)).apply ("<element xmlns=''>n<foo/>n</element>"))
                        xdoc2.write (((xparseString)).apply (((((xdoc).xtoxml)).apply)))
                        bogusForceDataize.write ((((xself).xconfirm)).apply ((((xdoc2).xnamespaceURI).eq (((xxml).xdom).xEMPTY_NAMESPACE))))
                xtestExceptionOnSpacesInXMLNSValue.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Unsupported syntax"))))
                        bogusForceDataize.write (((xparseString)).apply ("<element xmlns:abc=\"http:abc.com/de f g/hi/j k\"><abc:foo /></element>"))
                xtestDocRemoveChild.write
                  [xself]
                    memory > xnum_children_after
                    memory > xdoc
                    memory > xtitle_tag
                    memory > xnum_children_before
                    seq > @
                      seq
                        xdoc.write (((xparse)).apply ((xtstfile)))
                        xtitle_tag.write (((unsupported)).apply ((((((xdoc).xdocumentElement).xgetElementsByTagName)).apply ("TITLE"))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xxml).xdom).xNotFoundErr)) (((xdoc).xremoveChild)) ((xtitle_tag)))
                        xnum_children_before.write (((xlen)).apply (((xdoc).xchildNodes)))
                        bogusForceDataize.write ((((xdoc).xremoveChild)).apply ((((unsupported)).apply (((xdoc).xchildNodes)) (0))))
                        xnum_children_after.write (((xlen)).apply (((xdoc).xchildNodes)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xnum_children_after).eq ((xnum_children_before).sub 1))))
                xtestProcessingInstructionNameError.write
                  [xself]
                    memory > xdoc
                    memory > xpi
                    seq > @
                      seq
                        xdoc.write (((xparse)).apply ((xtstfile)))
                        xpi.write ((((xdoc).xcreateProcessingInstruction)).apply ("y") ("z"))
                        (((unsupported)).apply (((xpi).xnodeValue)) ("crash"))
                xtest_minidom_attribute_order.write
                  [xself]
                    memory > xdoc
                    memory > xxml_str
                    memory > xoutput
                    seq > @
                      seq
                        xxml_str.write "<?xml version=\"1.0\" ?><curriculum status=\"public\" company=\"example\"/>"
                        xdoc.write (((xparseString)).apply ((xxml_str)))
                        xoutput.write ((((xio).xStringIO)).apply)
                        bogusForceDataize.write ((((xdoc).xwritexml)).apply ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xgetvalue)).apply)) ((xxml_str)))
                xtest_toxml_with_attributes_ordered.write
                  [xself]
                    memory > xdoc
                    memory > xxml_str
                    seq > @
                      seq
                        xxml_str.write "<?xml version=\"1.0\" ?><curriculum status=\"public\" company=\"example\"/>"
                        xdoc.write (((xparseString)).apply ((xxml_str)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoxml)).apply)) ((xxml_str)))
                xtest_toprettyxml_with_attributes_ordered.write
                  [xself]
                    memory > xdoc
                    memory > xxml_str
                    seq > @
                      seq
                        xxml_str.write "<?xml version=\"1.0\" ?><curriculum status=\"public\" company=\"example\"/>"
                        xdoc.write (((xparseString)).apply ((xxml_str)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoprettyxml)).apply)) ("<?xml version=\"1.0\" ?>n<curriculum status=\"public\" company=\"example\"/>n"))
                xtest_toprettyxml_with_cdata.write
                  [xself]
                    memory > xdoc
                    memory > xxml_str
                    seq > @
                      seq
                        xxml_str.write "<?xml version=\"1.0\" ?><root><node><![CDATA[</data>]]></node></root>"
                        xdoc.write (((xparseString)).apply ((xxml_str)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdoc).xtoprettyxml)).apply)) ("<?xml version=\"1.0\" ?>n<root>nt<node><![CDATA[</data>]]></node>n</root>n"))
                xtest_cdata_parsing.write
                  [xself]
                    memory > xdom2
                    memory > xxml_str
                    memory > xdom1
                    seq > @
                      seq
                        xxml_str.write "<?xml version=\"1.0\" ?><root><node><![CDATA[</data>]]></node></root>"
                        xdom1.write (((xparseString)).apply ((xxml_str)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply (((((unsupported)).apply (((((xdom1).xgetElementsByTagName)).apply ("node"))) (0)).xfirstChild)) ("</data>"))
                        xdom2.write (((xparseString)).apply (((((xdom1).xtoprettyxml)).apply)))
                        bogusForceDataize.write ((((xself).xcheckWholeText)).apply (((((unsupported)).apply (((((xdom2).xgetElementsByTagName)).apply ("node"))) (0)).xfirstChild)) ("</data>"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)