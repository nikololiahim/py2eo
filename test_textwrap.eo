memory > xlist
memory > xValueError
memory > xstr
memory > xTextWrapper
memory > xindent
memory > xfill
memory > xdedent
memory > xrepr
memory > xi
memory > xwrap
memory > xexpect
memory > x__name__
memory > xrange
memory > xshorten
memory > xzip
memory > xunittest
memory > xBaseTestCase
memory > xkwargs
memory > xisinstance
memory > xline
memory > xlen
[] > test_textwrap
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_roundtrip_spaces
        memory > xtest_hyphenated
        memory > xtest_wrap_short
        memory > xtext
        memory > xtest_drop_whitespace_false_whitespace_only_with_indent
        memory > xcheck_wrap
        memory > xtest_whitespace
        memory > xtest_width_too_small_for_placeholder
        memory > xtest_drop_whitespace_leading_whitespace
        memory > xtest_indent_nomargin_default
        memory > xtest_split
        memory > xtest_subsequent_indent
        memory > xtest_drop_whitespace_whitespace_only
        memory > xtest_roundtrip_mixed
        memory > xtest_bad_width
        memory > xtest_em_dash
        memory > xtest_dedent_preserve_internal_tabs
        memory > xtest_funky_hyphens
        memory > xtest_spaces
        memory > xcheck_shorten
        memory > xtest_break_on_hyphens
        memory > xassertUnchanged
        memory > xtest_simple
        memory > xcheck
        memory > xtest_indent_explicit_default
        memory > xtest_drop_whitespace_whitespace_indent
        memory > xtest_max_lines_long
        memory > xtest_placeholder_backtrack
        memory > xtest_non_breaking_space
        memory > xROUNDTRIP_CASES
        memory > xtest_drop_whitespace_false_whitespace_only
        memory > xtest_dedent_uneven
        memory > xtest_indent_empty_lines
        memory > xtest_drop_whitespace_whitespace_line
        memory > xtest_drop_whitespace_whitespace_only_with_indent
        memory > xsetUp
        memory > xtest_break_long
        memory > xtest_punct_hyphens
        memory > xtest_dedent_declining
        memory > xtest_narrow_non_breaking_space
        memory > xtest_fill
        memory > xCASES
        memory > xtest_empty_string
        memory > xtest_nobreak_long
        memory > xtest_unix_options
        memory > xtest_indent_nomargin_explicit_default
        memory > xtest_dedent_preserve_margin_tabs
        memory > xtest_initial_indent
        memory > xtest_indent_no_lines
        memory > xcheck_split
        memory > xtest_funky_parens
        memory > xtest_wrap_short_1line
        memory > xtest_indent_default
        memory > xtest_placeholder
        memory > xtest_dedent_nomargin
        memory > xtest_indent_nomargin_all_lines
        memory > xtest_fix_sentence_endings
        memory > xtest_first_word_too_long_but_placeholder_fits
        memory > xshow
        memory > xtest_no_split_at_umlaut
        memory > xtest_dedent_even
        memory > xtest_indent_all_lines
        memory > xtest_umlaut_followed_by_dash
        memory > xtest_empty_string_with_initial_indent
        memory > xtest_roundtrip_tabs
        memory > xtest_drop_whitespace_false
        memory > xtest_hyphenated_numbers
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xshow.write
                  [xself xtextin]
                    memory > xresult
                    seq > @
                      seq
                        (((xisinstance)).apply ((xtextin)) ((xlist))).if
                          seq
                            xresult.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xtextin)))))))
                              bogusForceDataize.write ((((xresult).xappend)).apply (("  %d: %r".mod (((unsupported)).apply ((xi)) ((((unsupported)).apply ((xtextin)) ((xi))))))))
                            xresult.write ((xresult).if ((("n".xjoin)).apply ((xresult))) "  no lines")
                          (((xisinstance)).apply ((xtextin)) ((xstr))).if
                            xresult.write ("  %sn".mod (((xrepr)).apply ((xtextin))))
                        (((unsupported)).apply ((xresult)))
                xcheck.write
                  [xself xresult xexpect]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpect)) (("expected:n%snbut got:n%s".mod (((unsupported)).apply (((((xself).xshow)).apply ((xexpect)))) (((((xself).xshow)).apply ((xresult))))))))
                xcheck_wrap.write
                  [xself xtext xwidth xexpect]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((xwrap)).apply ((xtext)) ((xwidth)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                xcheck_split.write
                  [xself xtext xexpect]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write (((((xself).xwrapper).x_split)).apply ((xtext)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpect)) (("nexpected %rnbut got  %r".mod (((unsupported)).apply ((xexpect)) ((xresult))))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xwrapper)) ((((unsupported)).apply ((xTextWrapper)) (45))))
                xtest_simple.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Hello there, how are you this fine day?  I'm glad to hear it!"
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (12) ((((unsupported)).apply ("Hello there,") ("how are you") ("this fine") ("day?  I'm") ("glad to hear") ("it!"))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (42) ((((unsupported)).apply ("Hello there, how are you this fine day?") ("I'm glad to hear it!"))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (80) ((((unsupported)).apply ((xtext)))))
                xtest_empty_string.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ("") (6) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ("") (6) ((((unsupported)).apply)) (FALSE))
                xtest_empty_string_with_initial_indent.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcheck_wrap)) ("") (6) ((((unsupported)).apply)) ("++"))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ("") (6) ((((unsupported)).apply)) ("++") (FALSE))
                xtest_whitespace.write
                  [xself]
                    memory > xwrapper
                    memory > xexpect
                    memory > xresult
                    memory > xtext
                    seq > @
                      seq
                        xtext.write (((unsupported)).apply)
                        xexpect.write (((unsupported)).apply ("This is a paragraph that already has line") ("breaks.  But some of its lines are much") ("longer than the others, so it needs to be") ("wrapped.  Some lines are  tabbed too.  What a") ("mess!"))
                        xwrapper.write (((unsupported)).apply ((xTextWrapper)) (45) (TRUE))
                        xresult.write ((((xwrapper).xwrap)).apply ((xtext)))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                        xresult.write ((((xwrapper).xfill)).apply ((xtext)))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) (((("n".xjoin)).apply ((xexpect)))))
                        xtext.write "tTesttdefaulttttabsize."
                        xexpect.write (((unsupported)).apply ("        Test    default         tabsize."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (80) ((xexpect)))
                        xtext.write "tTesttcustomtttabsize."
                        xexpect.write (((unsupported)).apply ("    Test    custom      tabsize."))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (80) ((xexpect)) (4))
                xtest_fix_sentence_endings.write
                  [xself]
                    memory > xwrapper
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xwrapper.write (((unsupported)).apply ((xTextWrapper)) (60) (TRUE))
                        xtext.write "A short line. Note the single space."
                        xexpect.write (((unsupported)).apply ("A short line.  Note the single space."))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        xtext.write "Well, Doctor? What do you think?"
                        xexpect.write (((unsupported)).apply ("Well, Doctor?  What do you think?"))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        xtext.write "Well, Doctor?nWhat do you think?"
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        xtext.write "I say, chaps! Anyone for \"tennis?\"nHmmph!"
                        xexpect.write (((unsupported)).apply ("I say, chaps!  Anyone for \"tennis?\"  Hmmph!"))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        (((unsupported)).apply (((xwrapper).xwidth)) (20))
                        xexpect.write (((unsupported)).apply ("I say, chaps!") ("Anyone for \"tennis?\"") ("Hmmph!"))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        xtext.write "And she said, \"Go to hell!\"nCan you believe that?"
                        xexpect.write (((unsupported)).apply ("And she said, \"Go to") ("hell!\"  Can you") ("believe that?"))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        (((unsupported)).apply (((xwrapper).xwidth)) (60))
                        xexpect.write (((unsupported)).apply ("And she said, \"Go to hell!\"  Can you believe that?"))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                        xtext.write "File stdio.h is nice."
                        xexpect.write (((unsupported)).apply ("File stdio.h is nice."))
                        bogusForceDataize.write ((((xself).xcheck)).apply (((((xwrapper).xwrap)).apply ((xtext)))) ((xexpect)))
                xtest_wrap_short.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "This is anshort paragraph."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (20) ((((unsupported)).apply ("This is a short") ("paragraph."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (40) ((((unsupported)).apply ("This is a short paragraph."))))
                xtest_wrap_short_1line.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "This is a short line."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (30) ((((unsupported)).apply ("This is a short line."))))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (30) ((((unsupported)).apply ("(1) This is a short line."))) ("(1) "))
                xtest_hyphenated.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "this-is-a-useful-feature-for-reformatting-posts-from-tim-peters'ly"
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (40) ((((unsupported)).apply ("this-is-a-useful-feature-for-") ("reformatting-posts-from-tim-peters'ly"))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (41) ((((unsupported)).apply ("this-is-a-useful-feature-for-") ("reformatting-posts-from-tim-peters'ly"))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (42) ((((unsupported)).apply ("this-is-a-useful-feature-for-reformatting-") ("posts-from-tim-peters'ly"))))
                        xexpect.write ((("this-|is-|a-|useful-|feature-|for-|reformatting-|posts-|from-|tim-|peters'ly".xsplit)).apply ("|"))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (1) ((xexpect)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ((xtext)) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("e-mail") ((((unsupported)).apply ("e-mail"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("Jelly-O") ((((unsupported)).apply ("Jelly-O"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("half-a-crown") (((("half-|a-|crown".xsplit)).apply ("|"))))
                xtest_hyphenated_numbers.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Python 1.0.0 was released on 1994-01-26.  Python 1.0.1 wasnreleased on 1994-02-15."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (30) ((((unsupported)).apply ("Python 1.0.0 was released on") ("1994-01-26.  Python 1.0.1 was") ("released on 1994-02-15."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (40) ((((unsupported)).apply ("Python 1.0.0 was released on 1994-01-26.") ("Python 1.0.1 was released on 1994-02-15."))))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (1) (((((xtext).xsplit)).apply)) (FALSE))
                        xtext.write "I do all my shopping at 7-11."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (25) ((((unsupported)).apply ("I do all my shopping at") ("7-11."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (27) ((((unsupported)).apply ("I do all my shopping at") ("7-11."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (29) ((((unsupported)).apply ("I do all my shopping at 7-11."))))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (1) (((((xtext).xsplit)).apply)) (FALSE))
                xtest_em_dash.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Em-dashes should be written -- thus."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (25) ((((unsupported)).apply ("Em-dashes should be") ("written -- thus."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (29) ((((unsupported)).apply ("Em-dashes should be written") ("-- thus."))))
                        xexpect.write (((unsupported)).apply ("Em-dashes should be written --") ("thus."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (30) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (35) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (36) ((((unsupported)).apply ("Em-dashes should be written -- thus."))))
                        xtext.write "You can also do--this or even---this."
                        xexpect.write (((unsupported)).apply ("You can also do") ("--this or even") ("---this."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (15) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (16) ((xexpect)))
                        xexpect.write (((unsupported)).apply ("You can also do--") ("this or even---") ("this."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (17) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (19) ((xexpect)))
                        xexpect.write (((unsupported)).apply ("You can also do--this or even") ("---this."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (29) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (31) ((xexpect)))
                        xexpect.write (((unsupported)).apply ("You can also do--this or even---") ("this."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (32) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (35) ((xexpect)))
                        xtext.write "Here's an -- em-dash and--here's another---and another!"
                        xexpect.write (((unsupported)).apply ("Here's") (" ") ("an") (" ") ("--") (" ") ("em-") ("dash") (" ") ("and") ("--") ("here's") (" ") ("another") ("---") ("and") (" ") ("another!"))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ((xtext)) ((xexpect)))
                        xtext.write "and then--bam!--he was gone"
                        xexpect.write (((unsupported)).apply ("and") (" ") ("then") ("--") ("bam!") ("--") ("he") (" ") ("was") (" ") ("gone"))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ((xtext)) ((xexpect)))
                xtest_unix_options.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "You should use the -n option, or --dry-run in its long form."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (20) ((((unsupported)).apply ("You should use the") ("-n option, or --dry-") ("run in its long") ("form."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (21) ((((unsupported)).apply ("You should use the -n") ("option, or --dry-run") ("in its long form."))))
                        xexpect.write (((unsupported)).apply ("You should use the -n option, or") ("--dry-run in its long form."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (32) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (34) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (35) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (38) ((xexpect)))
                        xexpect.write (((unsupported)).apply ("You should use the -n option, or --dry-") ("run in its long form."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (39) ((xexpect)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (41) ((xexpect)))
                        xexpect.write (((unsupported)).apply ("You should use the -n option, or --dry-run") ("in its long form."))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (42) ((xexpect)))
                        xtext.write "the -n option, or --dry-run or --dryrun"
                        xexpect.write (((unsupported)).apply ("the") (" ") ("-n") (" ") ("option,") (" ") ("or") (" ") ("--dry-") ("run") (" ") ("or") (" ") ("--dryrun"))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ((xtext)) ((xexpect)))
                xtest_funky_hyphens.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("what the--hey!") ((((unsupported)).apply ("what") (" ") ("the") ("--") ("hey!"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("what the--") ((((unsupported)).apply ("what") (" ") ("the--"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("what the--.") ((((unsupported)).apply ("what") (" ") ("the--."))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("--text--.") ((((unsupported)).apply ("--text--."))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("--option") ((((unsupported)).apply ("--option"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("--option-opt") ((((unsupported)).apply ("--option-") ("opt"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("foo --option-opt bar") ((((unsupported)).apply ("foo") (" ") ("--option-") ("opt") (" ") ("bar"))))
                xtest_punct_hyphens.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("the 'wibble-wobble' widget") ((((unsupported)).apply ("the") (" ") ("'wibble-") ("wobble'") (" ") ("widget"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("the \"wibble-wobble\" widget") ((((unsupported)).apply ("the") (" ") ("\"wibble-") ("wobble\"") (" ") ("widget"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("the (wibble-wobble) widget") ((((unsupported)).apply ("the") (" ") ("(wibble-") ("wobble)") (" ") ("widget"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("the ['wibble-wobble'] widget") ((((unsupported)).apply ("the") (" ") ("['wibble-") ("wobble']") (" ") ("widget"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("what-d'you-call-it.") (((("what-d'you-|call-|it.".xsplit)).apply ("|"))))
                xtest_funky_parens.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("foo (--option) bar") ((((unsupported)).apply ("foo") (" ") ("(--option)") (" ") ("bar"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("foo (bar) baz") ((((unsupported)).apply ("foo") (" ") ("(bar)") (" ") ("baz"))))
                        bogusForceDataize.write ((((xself).xcheck_split)).apply ("blah (ding dong), wubba") ((((unsupported)).apply ("blah") (" ") ("(ding") (" ") ("dong),") (" ") ("wubba"))))
                xtest_drop_whitespace_false.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write " This is a    sentence with     much whitespace."
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (10) ((((unsupported)).apply (" This is a") ("    ") ("sentence ") ("with     ") ("much white") ("space."))) (FALSE))
                xtest_drop_whitespace_false_whitespace_only.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_wrap)) ("   ") (6) ((((unsupported)).apply ("   "))) (FALSE))
                xtest_drop_whitespace_false_whitespace_only_with_indent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_wrap)) ("   ") (6) ((((unsupported)).apply ("     "))) (FALSE) ("  "))
                xtest_drop_whitespace_whitespace_only.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_wrap)).apply ("  ") (6) ((((unsupported)).apply)))
                xtest_drop_whitespace_leading_whitespace.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write " This is a sentence with leading whitespace."
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (50) ((((unsupported)).apply (" This is a sentence with leading whitespace."))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (30) ((((unsupported)).apply (" This is a sentence with") ("leading whitespace."))))
                xtest_drop_whitespace_whitespace_line.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "abcd    efgh"
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (6) ((((unsupported)).apply ("abcd") ("    ") ("efgh"))) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (6) ((((unsupported)).apply ("abcd") ("efgh"))))
                xtest_drop_whitespace_whitespace_only_with_indent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_wrap)) ("  ") (6) ((((unsupported)).apply)) ("++"))
                xtest_drop_whitespace_whitespace_indent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_wrap)) ("abcd efgh") (6) ((((unsupported)).apply ("  abcd") ("  efgh"))) ("  ") ("  "))
                xtest_split.write
                  [xself]
                    memory > xresult
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Hello there -- you goof-ball, use the -b option!"
                        xresult.write (((((xself).xwrapper).x_split)).apply ((xtext)))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((((unsupported)).apply ("Hello") (" ") ("there") (" ") ("--") (" ") ("you") (" ") ("goof-") ("ball,") (" ") ("use") (" ") ("the") (" ") ("-b") (" ") ("option!"))))
                xtest_break_on_hyphens.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "yaba daba-doo"
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (10) ((((unsupported)).apply ("yaba daba-") ("doo"))) (TRUE))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (10) ((((unsupported)).apply ("yaba") ("daba-doo"))) (FALSE))
                xtest_bad_width.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Whatever, it doesn't matter."
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xwrap)) ((xtext)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xwrap)) ((xtext)) ((1.neg)))
                xtest_no_split_at_umlaut.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Die Empfxe4nger-Auswahl"
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (13) ((((unsupported)).apply ("Die") ("Empfxe4nger-") ("Auswahl"))))
                xtest_umlaut_followed_by_dash.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "aa xe4xe4-xe4xe4"
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply ((xtext)) (7) ((((unsupported)).apply ("aa xe4xe4-") ("xe4xe4"))))
                xtest_non_breaking_space.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "This is a sentence with non-breakingN{NO-BREAK SPACE}space."
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (20) ((((unsupported)).apply ("This is a sentence") ("with non-") ("breakingN{NO-BREAK SPACE}space."))) (TRUE))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (20) ((((unsupported)).apply ("This is a sentence") ("with") ("non-breakingN{NO-BREAK SPACE}space."))) (FALSE))
                xtest_narrow_non_breaking_space.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "This is a sentence with non-breakingN{NARROW NO-BREAK SPACE}space."
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (20) ((((unsupported)).apply ("This is a sentence") ("with non-") ("breakingN{NARROW NO-BREAK SPACE}space."))) (TRUE))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (20) ((((unsupported)).apply ("This is a sentence") ("with") ("non-breakingN{NARROW NO-BREAK SPACE}space."))) (FALSE))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtext.write "Hello there, how are you this fine day?  I'm glad to hear it!"
                xtest_simple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello [...]"))) (0))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello [...]"))) (1))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello there,") ("how [...]"))) (2))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (13) ((((unsupported)).apply ("Hello there,") ("how are [...]"))) (2))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (80) ((((unsupported)).apply (((xself).xtext)))) (1))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello there,") ("how are you") ("this fine") ("day?  I'm") ("glad to hear") ("it!"))) (6))
                xtest_spaces.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello there,") ("how are you") ("this fine") ("day? [...]"))) (4))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (6) ((((unsupported)).apply ("Hello") ("[...]"))) (2))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((((xself).xtext).add (" ".mul 10))) (12) ((((unsupported)).apply ("Hello there,") ("how are you") ("this fine") ("day?  I'm") ("glad to hear") ("it!"))) (6))
                xtest_placeholder.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello..."))) (1) ("..."))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Hello there,") ("how are..."))) (2) ("..."))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xwrap)) (((xself).xtext)) (16) ("    ") (1) (" [truncated]..."))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xwrap)) (((xself).xtext)) (16) ("    ") (2) (" [truncated]..."))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (16) ((((unsupported)).apply ("    Hello there,") ("  [truncated]..."))) (2) ("    ") ("  ") (" [truncated]..."))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (16) ((((unsupported)).apply ("  [truncated]..."))) (1) ("  ") ("    ") (" [truncated]..."))
                        (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (80) ((((unsupported)).apply (((xself).xtext)))) ((".".mul 1000)))
                xtest_placeholder_backtrack.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Good grief Python features are advancing quickly!"
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((xtext)) (12) ((((unsupported)).apply ("Good grief") ("Python*****"))) (3) ("*****"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xwrapper)) ((((xTextWrapper)).apply)))
                        (((unsupported)).apply (((xself).xtext)) ((((unsupported)).apply)))
                xtest_break_long.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply (((xself).xtext)) (30) ((((unsupported)).apply ("Did you say \"supercalifragilis") ("ticexpialidocious?\" How *do*") ("you spell that odd word,") ("anyways?"))))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply (((xself).xtext)) (50) ((((unsupported)).apply ("Did you say \"supercalifragilisticexpialidocious?\"") ("How *do* you spell that odd word, anyways?"))))
                        (((unsupported)).apply (((xself).xcheck_wrap)) ((("-".mul 10).add "hello")) (10) ((((unsupported)).apply ("----------") ("               h") ("               e") ("               l") ("               l") ("               o"))) ((" ".mul 15)))
                        bogusForceDataize.write ((((xself).xcheck_wrap)).apply (((xself).xtext)) (12) ((((unsupported)).apply ("Did you say ") ("\"supercalifr") ("agilisticexp") ("ialidocious?") ("\" How *do*") ("you spell") ("that odd") ("word,") ("anyways?"))))
                xtest_nobreak_long.write
                  [xself]
                    memory > xexpect
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xwrapper).xbreak_long_words)) (0))
                        (((unsupported)).apply ((((xself).xwrapper).xwidth)) (30))
                        xexpect.write (((unsupported)).apply ("Did you say") ("\"supercalifragilisticexpialidocious?\"") ("How *do* you spell that odd") ("word, anyways?"))
                        xresult.write (((((xself).xwrapper).xwrap)).apply (((xself).xtext)))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                        xresult.write (((unsupported)).apply ((xwrap)) (((xself).xtext)) (30) (0))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                xtest_max_lines_long.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_wrap)) (((xself).xtext)) (12) ((((unsupported)).apply ("Did you say ") ("\"supercalifr") ("agilisticexp") ("[...]"))) (4))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtext)) ((((unsupported)).apply)))
                xtest_fill.write
                  [xself]
                    memory > xexpect
                    memory > xresult
                    seq > @
                      seq
                        xexpect.write (((unsupported)).apply)
                        xresult.write (((xfill)).apply (((xself).xtext)) (40))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                xtest_initial_indent.write
                  [xself]
                    memory > xexpect
                    memory > xresult
                    seq > @
                      seq
                        xexpect.write (((unsupported)).apply ("     This paragraph will be filled,") ("first without any indentation, and then") ("with some (including a hanging indent)."))
                        xresult.write (((unsupported)).apply ((xwrap)) (((xself).xtext)) (40) ("     "))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                        xexpect.write ((("n".xjoin)).apply ((xexpect)))
                        xresult.write (((unsupported)).apply ((xfill)) (((xself).xtext)) (40) ("     "))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                xtest_subsequent_indent.write
                  [xself]
                    memory > xexpect
                    memory > xresult
                    seq > @
                      seq
                        xexpect.write (((unsupported)).apply)
                        xresult.write (((unsupported)).apply ((xfill)) (((xself).xtext)) (40) ("  * ") ("    "))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertUnchanged.write
                  [xself xtext]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtext)) ((((xdedent)).apply ((xtext)))))
                xtest_dedent_nomargin.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Hello there.nHow are you?nOh good, I'm glad."
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                        xtext.write "Hello there.nnBoo!"
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                        xtext.write "Hello there.n  This is indented."
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                        xtext.write "Hello there.nn  Boo!n"
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                xtest_dedent_even.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "  Hello there.n  How are ya?n  Oh good."
                        xexpect.write "Hello there.nHow are ya?nOh good."
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  Hello there.nn  How are ya?n  Oh good.n"
                        xexpect.write "Hello there.nnHow are ya?nOh good.n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  Hello there.n  n  How are ya?n  Oh good.n"
                        xexpect.write "Hello there.nnHow are ya?nOh good.n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                xtest_dedent_uneven.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write (((unsupported)).apply)
                        xexpect.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  Foon    Barnn   Bazn"
                        xexpect.write "Foon  Barnn Bazn"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  Foon    Barn n   Bazn"
                        xexpect.write "Foon  Barnn Bazn"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                xtest_dedent_declining.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "     Foon    Barn"
                        xexpect.write " FoonBarn"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "     Foonn    Barn"
                        xexpect.write " FoonnBarn"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "     Foon    n    Barn"
                        xexpect.write " FoonnBarn"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                xtest_dedent_preserve_internal_tabs.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "  hellottheren  how aretyou?"
                        xexpect.write "hellottherenhow aretyou?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xexpect)))))
                xtest_dedent_preserve_margin_tabs.write
                  [xself]
                    memory > xexpect
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "  hello therenthow are you?"
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                        xtext.write "        hello therenthow are you?"
                        bogusForceDataize.write ((((xself).xassertUnchanged)).apply ((xtext)))
                        xtext.write "thello therenthow are you?"
                        xexpect.write "hello therenhow are you?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  thello theren  thow are you?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  t  hello theren  t  how are you?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  thello theren  t  how are you?"
                        xexpect.write "hello theren  how are you?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
                        xtext.write "  thello theren   thow are you?n tI'm fine, thanks"
                        xexpect.write " thello theren  thow are you?ntI'm fine, thanks"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpect)) ((((xdedent)).apply ((xtext)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xROUNDTRIP_CASES.write (((unsupported)).apply ("Hi.nThis is a test.nTesting.") ("Hi.nThis is a test.nnTesting.") ("nHi.nThis is a test.nTesting.n"))
                xCASES.write ((xROUNDTRIP_CASES).add (((unsupported)).apply ("Hi.rnThis is a test.rnTesting.rn") ("nHi.rnThis is a test.nrnTesting.rnn")))
                xtest_indent_nomargin_default.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtext)) (((xself).xCASES)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) (""))) ((xtext)))
                xtest_indent_nomargin_explicit_default.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtext)) (((xself).xCASES)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ("") ("None: is there a None literal in the EO language?"))) ((xtext)))
                xtest_indent_nomargin_all_lines.write
                  [xself]
                    memory > xpredicate
                    seq > @
                      seq
                        xpredicate.write (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xtext)) (((xself).xCASES)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ("") ((xpredicate)))) ((xtext)))
                xtest_indent_no_lines.write
                  [xself]
                    memory > xpredicate
                    seq > @
                      seq
                        xpredicate.write (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xtext)) (((xself).xCASES)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ("    ") ((xpredicate)))) ((xtext)))
                xtest_roundtrip_spaces.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtext)) (((xself).xROUNDTRIP_CASES)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdedent)).apply ((((xindent)).apply ((xtext)) ("    "))))) ((xtext)))
                xtest_roundtrip_tabs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtext)) (((xself).xROUNDTRIP_CASES)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdedent)).apply ((((xindent)).apply ((xtext)) ("tt"))))) ((xtext)))
                xtest_roundtrip_mixed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtext)) (((xself).xROUNDTRIP_CASES)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdedent)).apply ((((xindent)).apply ((xtext)) (" t  t "))))) ((xtext)))
                xtest_indent_default.write
                  [xself]
                    memory > xexpected
                    memory > xprefix
                    seq > @
                      seq
                        xprefix.write "  "
                        xexpected.write (((unsupported)).apply ("  Hi.n  This is a test.n  Testing.") ("  Hi.n  This is a test.nn  Testing.") ("n  Hi.n  This is a test.n  Testing.n") ("  Hi.rn  This is a test.rn  Testing.rn") ("n  Hi.rn  This is a test.nrn  Testing.rnn"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((xexpect)))) ((((xzip)).apply (((xself).xCASES)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ((xprefix)))) ((xexpect)))
                xtest_indent_explicit_default.write
                  [xself]
                    memory > xexpected
                    memory > xprefix
                    seq > @
                      seq
                        xprefix.write "  "
                        xexpected.write (((unsupported)).apply ("  Hi.n  This is a test.n  Testing.") ("  Hi.n  This is a test.nn  Testing.") ("n  Hi.n  This is a test.n  Testing.n") ("  Hi.rn  This is a test.rn  Testing.rn") ("n  Hi.rn  This is a test.nrn  Testing.rnn"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((xexpect)))) ((((xzip)).apply (((xself).xCASES)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ((xprefix)) ("None: is there a None literal in the EO language?"))) ((xexpect)))
                xtest_indent_all_lines.write
                  [xself]
                    memory > xexpected
                    memory > xprefix
                    memory > xpredicate
                    seq > @
                      seq
                        xprefix.write "  "
                        xexpected.write (((unsupported)).apply ("  Hi.n  This is a test.n  Testing.") ("  Hi.n  This is a test.n  n  Testing.") ("  n  Hi.n  This is a test.n  Testing.n") ("  Hi.rn  This is a test.rn  Testing.rn") ("  n  Hi.rn  This is a test.n  rn  Testing.rn  n"))
                        xpredicate.write (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((xexpect)))) ((((xzip)).apply (((xself).xCASES)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ((xprefix)) ((xpredicate)))) ((xexpect)))
                xtest_indent_empty_lines.write
                  [xself]
                    memory > xexpected
                    memory > xprefix
                    memory > xpredicate
                    seq > @
                      seq
                        xprefix.write "  "
                        xexpected.write (((unsupported)).apply ("Hi.nThis is a test.nTesting.") ("Hi.nThis is a test.n  nTesting.") ("  nHi.nThis is a test.nTesting.n") ("Hi.rnThis is a test.rnTesting.rn") ("  nHi.rnThis is a test.n  rnTesting.rn  n"))
                        xpredicate.write (((unsupported)).apply ((((((xline).xstrip)).apply).not)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((xexpect)))) ((((xzip)).apply (((xself).xCASES)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xindent)).apply ((xtext)) ((xprefix)) ((xpredicate)))) ((xexpect)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xcheck_shorten.write
                  [xself xtext xwidth xexpect]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xresult.write (((xshorten)).apply ((xtext)) ((xwidth)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xcheck)).apply ((xresult)) ((xexpect)))
                xtest_simple.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Hello there, how are you this fine day? I'm glad to hear it!"
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ((xtext)) (18) ("Hello there, [...]"))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ((xtext)) ((((xlen)).apply ((xtext)))) ((xtext)))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ((xtext)) (((((xlen)).apply ((xtext))).sub 1)) ("Hello there, how are you this fine day? I'm glad to [...]"))
                xtest_placeholder.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write "Hello there, how are you this fine day? I'm glad to hear it!"
                        (((unsupported)).apply (((xself).xcheck_shorten)) ((xtext)) (17) ("Hello there,$$") ("$$"))
                        (((unsupported)).apply (((xself).xcheck_shorten)) ((xtext)) (18) ("Hello there, how$$") ("$$"))
                        (((unsupported)).apply (((xself).xcheck_shorten)) ((xtext)) (18) ("Hello there, $$") (" $$"))
                        (((unsupported)).apply (((xself).xcheck_shorten)) ((xtext)) ((((xlen)).apply ((xtext)))) ((xtext)) ("$$"))
                        (((unsupported)).apply (((xself).xcheck_shorten)) ((xtext)) (((((xlen)).apply ((xtext))).sub 1)) ("Hello there, how are you this fine day? I'm glad to hear$$") ("$$"))
                xtest_empty_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_shorten)).apply ("") (6) (""))
                xtest_whitespace.write
                  [xself]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ((xtext)) (62) ("This is a paragraph that already has line breaks and tabs too."))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ((xtext)) (61) ("This is a paragraph that already has line breaks and [...]"))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ("hello      world!  ") (12) ("hello world!"))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ("hello      world!  ") (11) ("hello [...]"))
                        bogusForceDataize.write ((((xself).xcheck_shorten)).apply ("hello      world!  ") (10) ("[...]"))
                xtest_width_too_small_for_placeholder.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xshorten)) (("x".mul 20)) (8) ("(......)"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xshorten)) (("x".mul 20)) (8) ("(.......)"))
                xtest_first_word_too_long_but_placeholder_fits.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_shorten)).apply ("Helloo") (5) ("[...]"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)