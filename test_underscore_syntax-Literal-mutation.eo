memory > xContext
memory > xtranslation
memory > xTemplate
memory > xMultipleLocaleActivationTestCase
memory > xSimpleTestCase
[] > test_underscore_syntax
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_multiple_locale_loadi18n
        memory > xtest_single_locale_activation
        memory > xtest_multiple_locale
        memory > xtest_multiple_locale_filter_direct_switch
        memory > xtest_multiple_locale_loadi18n_direct_switch
        memory > xtest_multiple_locale_loadi18n_deactivate
        memory > xtest_i18n14
        memory > xtest_multiple_locale_direct_switch
        memory > xtest_i18n13
        memory > xtest_multiple_locale_filter_deactivate
        memory > xlibraries
        memory > xtest_multiple_locale_filter
        memory > xtest_i18n16
        memory > xtest_i18n15
        memory > xtest_multiple_locale_deactivate
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xMultipleLocaleActivationTestCase)))
              seq
                xtest_single_locale_activation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xTemplate)).apply ("{{ _('Yes') }}")).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Oui"))
                xtest_multiple_locale_filter.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply (((xself).x_old_language)))) (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("nee"))
                xtest_multiple_locale_filter_deactivate.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("nee"))
                xtest_multiple_locale_filter_direct_switch.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("nee"))
                xtest_multiple_locale.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply (((xself).x_old_language)))) (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_deactivate.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          xt.write (((xTemplate)).apply ("{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_direct_switch.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_loadi18n.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply (((xself).x_old_language)))) (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_loadi18n_deactivate.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_loadi18n_direct_switch.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write (((xTemplate)).apply ("{% load i18n %}{{ _('No') }}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                unsupported
                xlibraries.write (((unsupported)).apply ("i18n") ("django.templatetags.i18n"))
                xtest_i18n13.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n13"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Passwort"))
                xtest_i18n14.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n14"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("foo Passwort Passwort"))
                xtest_i18n15.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n15") ((((unsupported)).apply ("absent") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Passwort"))
                xtest_i18n16.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n16"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("<"))