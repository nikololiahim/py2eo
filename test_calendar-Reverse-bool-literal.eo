memory > xsecs
memory > xrange
memory > xcalendar
memory > xIndexError
memory > xcolor
memory > xset
memory > xtime
memory > xm
memory > xgetattr
memory > xy
memory > xfilter
memory > xd
memory > xassert_python_failure
memory > xCustomHTMLCal
memory > xstdout
memory > xstyle
memory > xrc
memory > xdatetime
memory > xlist
memory > xassert_python_ok
memory > xz
memory > xValueError
memory > xstr
memory > xout
memory > xreversed
memory > xMonthCalendarTestCase
memory > xsum
memory > xx
memory > xi
memory > xsupport
memory > xsys
memory > xstderr
memory > xlocale
memory > xargs
memory > xos
memory > xday
memory > xunittest
memory > xattr
memory > xline
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
[] > test_calendar
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xresult_2004_text
        memory > xtest_prmonth
        memory > xtest_no_range
        memory > xconv
        memory > xtest_option_width
        memory > xassertFailure
        memory > xtearDown
        memory > xtest_pryear
        memory > xtest_format
        memory > xtest_thirteenth_month
        memory > xtest_formatmonthname
        memory > xtest_several_leapyears_in_range
        memory > xtest_one_leapday_lower_boundary
        memory > xtest_output_current_year
        memory > xtest__all__
        memory > xtest_no_leapdays
        memory > xresult_2004_01_text
        memory > xtest_setfirstweekday
        memory > xtest_december
        memory > xtest_itermonthdays
        memory > xtest_yeardayscalendar
        memory > xtest_january
        memory > xtest_html_output_year_encoding
        memory > xtest_output_year
        memory > xtest_february_leap
        memory > xtest_itermonthdays3
        memory > xtest_help
        memory > xtest_output
        memory > xtest_months
        memory > xtest_locale_calendars
        memory > xtest_days
        memory > xtest_illegal_month_reported
        memory > xtest_illegal_arguments
        memory > xtest_zeroth_month
        memory > xtest_prweek
        memory > xtest_itermonthdays4
        memory > xtest_output_htmlcalendar_encoding_utf8
        memory > xtest_formatweekheader_short
        memory > xtest_option_type
        memory > xtest_option_locale
        memory > xcheck_htmlcalendar_encoding
        memory > xtest_formatweek
        memory > xtest_enumerate_weekdays
        memory > xtest_formatmonthname_with_year
        memory > xTIMESTAMPS
        memory > xtest_february_nonleap
        memory > xtest_illegal_weekday_reported
        memory > xsetUp
        memory > xdefault_format
        memory > xtest_no_leapdays_upper_boundary
        memory > xtest_yeardatescalendar
        memory > xtest_formatmonth
        memory > xtest_timegm
        memory > xtest_february
        memory > xresult_0_text
        memory > xresult_0_02_text
        memory > xresult_2004_days
        memory > xtest_output_htmlcalendar_encoding_ascii
        memory > xtest_formatmonthname_without_year
        memory > xtest_format_year_head
        memory > xtest_html_output_year_css
        memory > xtest_output_textcalendar
        memory > xtest_april
        memory > xrun_ok
        memory > xtest_output_htmlcalendar_encoding_default
        memory > xtest_isleap
        memory > xresult_2004_dates
        memory > xtest_option_lines
        memory > xtest_option_months
        memory > xtest_format_year
        memory > xtest_option_spacing
        memory > xcheck_weeks
        memory > xtest_html_output_current_year
        memory > xnormalize_calendar
        memory > xtest_option_encoding
        memory > xtest_output_month
        memory > xresult_2004_html
        memory > xtest_formatweekheader_long
        memory > xtest_itermonthdays2
        memory > xfirstweekday
        memory > xtest_formatweek_head
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xresult_0_02_text.write (((unsupported)).apply)
            xresult_0_text.write (((unsupported)).apply)
            xresult_2004_01_text.write (((unsupported)).apply)
            xresult_2004_text.write (((unsupported)).apply)
            xdefault_format.write (((unsupported)).apply ((xdict)) ("year") ("month") ("ascii"))
            xresult_2004_html.write (((unsupported)).apply)
            xresult_2004_days.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (1) (2) (3) (4))) ((((unsupported)).apply (5) (6) (7) (8) (9) (10) (11))) ((((unsupported)).apply (12) (13) (14) (15) (16) (17) (18))) ((((unsupported)).apply (19) (20) (21) (22) (23) (24) (25))) ((((unsupported)).apply (26) (27) (28) (29) (30) (31) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (0) (0) (0) (1))) ((((unsupported)).apply (2) (3) (4) (5) (6) (7) (8))) ((((unsupported)).apply (9) (10) (11) (12) (13) (14) (15))) ((((unsupported)).apply (16) (17) (18) (19) (20) (21) (22))) ((((unsupported)).apply (23) (24) (25) (26) (27) (28) (29))))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))) ((((unsupported)).apply (8) (9) (10) (11) (12) (13) (14))) ((((unsupported)).apply (15) (16) (17) (18) (19) (20) (21))) ((((unsupported)).apply (22) (23) (24) (25) (26) (27) (28))) ((((unsupported)).apply (29) (30) (31) (0) (0) (0) (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (1) (2) (3) (4))) ((((unsupported)).apply (5) (6) (7) (8) (9) (10) (11))) ((((unsupported)).apply (12) (13) (14) (15) (16) (17) (18))) ((((unsupported)).apply (19) (20) (21) (22) (23) (24) (25))) ((((unsupported)).apply (26) (27) (28) (29) (30) (0) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (0) (0) (1) (2))) ((((unsupported)).apply (3) (4) (5) (6) (7) (8) (9))) ((((unsupported)).apply (10) (11) (12) (13) (14) (15) (16))) ((((unsupported)).apply (17) (18) (19) (20) (21) (22) (23))) ((((unsupported)).apply (24) (25) (26) (27) (28) (29) (30))) ((((unsupported)).apply (31) (0) (0) (0) (0) (0) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2) (3) (4) (5) (6))) ((((unsupported)).apply (7) (8) (9) (10) (11) (12) (13))) ((((unsupported)).apply (14) (15) (16) (17) (18) (19) (20))) ((((unsupported)).apply (21) (22) (23) (24) (25) (26) (27))) ((((unsupported)).apply (28) (29) (30) (0) (0) (0) (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (1) (2) (3) (4))) ((((unsupported)).apply (5) (6) (7) (8) (9) (10) (11))) ((((unsupported)).apply (12) (13) (14) (15) (16) (17) (18))) ((((unsupported)).apply (19) (20) (21) (22) (23) (24) (25))) ((((unsupported)).apply (26) (27) (28) (29) (30) (31) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (0) (0) (0) (1))) ((((unsupported)).apply (2) (3) (4) (5) (6) (7) (8))) ((((unsupported)).apply (9) (10) (11) (12) (13) (14) (15))) ((((unsupported)).apply (16) (17) (18) (19) (20) (21) (22))) ((((unsupported)).apply (23) (24) (25) (26) (27) (28) (29))) ((((unsupported)).apply (30) (31) (0) (0) (0) (0) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (1) (2) (3) (4) (5))) ((((unsupported)).apply (6) (7) (8) (9) (10) (11) (12))) ((((unsupported)).apply (13) (14) (15) (16) (17) (18) (19))) ((((unsupported)).apply (20) (21) (22) (23) (24) (25) (26))) ((((unsupported)).apply (27) (28) (29) (30) (0) (0) (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0) (0) (1) (2) (3))) ((((unsupported)).apply (4) (5) (6) (7) (8) (9) (10))) ((((unsupported)).apply (11) (12) (13) (14) (15) (16) (17))) ((((unsupported)).apply (18) (19) (20) (21) (22) (23) (24))) ((((unsupported)).apply (25) (26) (27) (28) (29) (30) (31))))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))) ((((unsupported)).apply (8) (9) (10) (11) (12) (13) (14))) ((((unsupported)).apply (15) (16) (17) (18) (19) (20) (21))) ((((unsupported)).apply (22) (23) (24) (25) (26) (27) (28))) ((((unsupported)).apply (29) (30) (0) (0) (0) (0) (0))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (1) (2) (3) (4) (5))) ((((unsupported)).apply (6) (7) (8) (9) (10) (11) (12))) ((((unsupported)).apply (13) (14) (15) (16) (17) (18) (19))) ((((unsupported)).apply (20) (21) (22) (23) (24) (25) (26))) ((((unsupported)).apply (27) (28) (29) (30) (31) (0) (0))))))))
            xresult_2004_dates.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("12/29/03 12/30/03 12/31/03 01/01/04 01/02/04 01/03/04 01/04/04") ("01/05/04 01/06/04 01/07/04 01/08/04 01/09/04 01/10/04 01/11/04") ("01/12/04 01/13/04 01/14/04 01/15/04 01/16/04 01/17/04 01/18/04") ("01/19/04 01/20/04 01/21/04 01/22/04 01/23/04 01/24/04 01/25/04") ("01/26/04 01/27/04 01/28/04 01/29/04 01/30/04 01/31/04 02/01/04"))) ((((unsupported)).apply ("01/26/04 01/27/04 01/28/04 01/29/04 01/30/04 01/31/04 02/01/04") ("02/02/04 02/03/04 02/04/04 02/05/04 02/06/04 02/07/04 02/08/04") ("02/09/04 02/10/04 02/11/04 02/12/04 02/13/04 02/14/04 02/15/04") ("02/16/04 02/17/04 02/18/04 02/19/04 02/20/04 02/21/04 02/22/04") ("02/23/04 02/24/04 02/25/04 02/26/04 02/27/04 02/28/04 02/29/04"))) ((((unsupported)).apply ("03/01/04 03/02/04 03/03/04 03/04/04 03/05/04 03/06/04 03/07/04") ("03/08/04 03/09/04 03/10/04 03/11/04 03/12/04 03/13/04 03/14/04") ("03/15/04 03/16/04 03/17/04 03/18/04 03/19/04 03/20/04 03/21/04") ("03/22/04 03/23/04 03/24/04 03/25/04 03/26/04 03/27/04 03/28/04") ("03/29/04 03/30/04 03/31/04 04/01/04 04/02/04 04/03/04 04/04/04"))))) ((((unsupported)).apply ((((unsupported)).apply ("03/29/04 03/30/04 03/31/04 04/01/04 04/02/04 04/03/04 04/04/04") ("04/05/04 04/06/04 04/07/04 04/08/04 04/09/04 04/10/04 04/11/04") ("04/12/04 04/13/04 04/14/04 04/15/04 04/16/04 04/17/04 04/18/04") ("04/19/04 04/20/04 04/21/04 04/22/04 04/23/04 04/24/04 04/25/04") ("04/26/04 04/27/04 04/28/04 04/29/04 04/30/04 05/01/04 05/02/04"))) ((((unsupported)).apply ("04/26/04 04/27/04 04/28/04 04/29/04 04/30/04 05/01/04 05/02/04") ("05/03/04 05/04/04 05/05/04 05/06/04 05/07/04 05/08/04 05/09/04") ("05/10/04 05/11/04 05/12/04 05/13/04 05/14/04 05/15/04 05/16/04") ("05/17/04 05/18/04 05/19/04 05/20/04 05/21/04 05/22/04 05/23/04") ("05/24/04 05/25/04 05/26/04 05/27/04 05/28/04 05/29/04 05/30/04") ("05/31/04 06/01/04 06/02/04 06/03/04 06/04/04 06/05/04 06/06/04"))) ((((unsupported)).apply ("05/31/04 06/01/04 06/02/04 06/03/04 06/04/04 06/05/04 06/06/04") ("06/07/04 06/08/04 06/09/04 06/10/04 06/11/04 06/12/04 06/13/04") ("06/14/04 06/15/04 06/16/04 06/17/04 06/18/04 06/19/04 06/20/04") ("06/21/04 06/22/04 06/23/04 06/24/04 06/25/04 06/26/04 06/27/04") ("06/28/04 06/29/04 06/30/04 07/01/04 07/02/04 07/03/04 07/04/04"))))) ((((unsupported)).apply ((((unsupported)).apply ("06/28/04 06/29/04 06/30/04 07/01/04 07/02/04 07/03/04 07/04/04") ("07/05/04 07/06/04 07/07/04 07/08/04 07/09/04 07/10/04 07/11/04") ("07/12/04 07/13/04 07/14/04 07/15/04 07/16/04 07/17/04 07/18/04") ("07/19/04 07/20/04 07/21/04 07/22/04 07/23/04 07/24/04 07/25/04") ("07/26/04 07/27/04 07/28/04 07/29/04 07/30/04 07/31/04 08/01/04"))) ((((unsupported)).apply ("07/26/04 07/27/04 07/28/04 07/29/04 07/30/04 07/31/04 08/01/04") ("08/02/04 08/03/04 08/04/04 08/05/04 08/06/04 08/07/04 08/08/04") ("08/09/04 08/10/04 08/11/04 08/12/04 08/13/04 08/14/04 08/15/04") ("08/16/04 08/17/04 08/18/04 08/19/04 08/20/04 08/21/04 08/22/04") ("08/23/04 08/24/04 08/25/04 08/26/04 08/27/04 08/28/04 08/29/04") ("08/30/04 08/31/04 09/01/04 09/02/04 09/03/04 09/04/04 09/05/04"))) ((((unsupported)).apply ("08/30/04 08/31/04 09/01/04 09/02/04 09/03/04 09/04/04 09/05/04") ("09/06/04 09/07/04 09/08/04 09/09/04 09/10/04 09/11/04 09/12/04") ("09/13/04 09/14/04 09/15/04 09/16/04 09/17/04 09/18/04 09/19/04") ("09/20/04 09/21/04 09/22/04 09/23/04 09/24/04 09/25/04 09/26/04") ("09/27/04 09/28/04 09/29/04 09/30/04 10/01/04 10/02/04 10/03/04"))))) ((((unsupported)).apply ((((unsupported)).apply ("09/27/04 09/28/04 09/29/04 09/30/04 10/01/04 10/02/04 10/03/04") ("10/04/04 10/05/04 10/06/04 10/07/04 10/08/04 10/09/04 10/10/04") ("10/11/04 10/12/04 10/13/04 10/14/04 10/15/04 10/16/04 10/17/04") ("10/18/04 10/19/04 10/20/04 10/21/04 10/22/04 10/23/04 10/24/04") ("10/25/04 10/26/04 10/27/04 10/28/04 10/29/04 10/30/04 10/31/04"))) ((((unsupported)).apply ("11/01/04 11/02/04 11/03/04 11/04/04 11/05/04 11/06/04 11/07/04") ("11/08/04 11/09/04 11/10/04 11/11/04 11/12/04 11/13/04 11/14/04") ("11/15/04 11/16/04 11/17/04 11/18/04 11/19/04 11/20/04 11/21/04") ("11/22/04 11/23/04 11/24/04 11/25/04 11/26/04 11/27/04 11/28/04") ("11/29/04 11/30/04 12/01/04 12/02/04 12/03/04 12/04/04 12/05/04"))) ((((unsupported)).apply ("11/29/04 11/30/04 12/01/04 12/02/04 12/03/04 12/04/04 12/05/04") ("12/06/04 12/07/04 12/08/04 12/09/04 12/10/04 12/11/04 12/12/04") ("12/13/04 12/14/04 12/15/04 12/16/04 12/17/04 12/18/04 12/19/04") ("12/20/04 12/21/04 12/22/04 12/23/04 12/24/04 12/25/04 12/26/04") ("12/27/04 12/28/04 12/29/04 12/30/04 12/31/04 01/01/05 01/02/05"))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xnormalize_calendar.write
                  [xself xs]
                    memory > xlines
                    memory > xneitherspacenordigit
                    seq > @
                      seq
                        xneitherspacenordigit.write
                          [xc]
                            seq > @
                              (((unsupported)).apply (((((((xc).xisspace)).apply).not).and (((((xc).xisdigit)).apply).not))))
                        xlines.write (((unsupported)).apply)
                        (((unsupported)).apply ((xline)) ((((unsupported)).apply (((xs).xsplitlines)) (FALSE))))
                          ((xline).and ((((xfilter)).apply ((xneitherspacenordigit)) ((xline))).not)).if
                            bogusForceDataize.write ((((xlines).xappend)).apply ((xline)))
                        (((unsupported)).apply ((xlines)))
                xcheck_htmlcalendar_encoding.write
                  [xself xreq xres]
                    memory > xcal
                    memory > xformat_
                    memory > xoutput
                    seq > @
                      seq
                        xcal.write ((((xcalendar).xHTMLCalendar)).apply)
                        xformat_.write ((((xdefault_format).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xformat_)) ("encoding"))) (((xreq).or "utf-8")))
                        xoutput.write (((unsupported)).apply (((xcal).xformatyearpage)) (2004) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((((((((xresult_2004_html).xformat)).apply ((((unsupported)).apply ((xformat_))))).xencode)).apply ((xres)))))
                xtest_output.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xnormalize_calendar)).apply (((((xcalendar).xcalendar)).apply (2004))))) (((((xself).xnormalize_calendar)).apply ((xresult_2004_text)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xnormalize_calendar)).apply (((((xcalendar).xcalendar)).apply (0))))) (((((xself).xnormalize_calendar)).apply ((xresult_0_text)))))
                xtest_output_textcalendar.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatyear)).apply (2004))) ((xresult_2004_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatyear)).apply (0))) ((xresult_0_text)))
                xtest_output_htmlcalendar_encoding_ascii.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_htmlcalendar_encoding)).apply ("ascii") ("ascii"))
                xtest_output_htmlcalendar_encoding_utf8.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_htmlcalendar_encoding)).apply ("utf-8") ("utf-8"))
                xtest_output_htmlcalendar_encoding_default.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_htmlcalendar_encoding)).apply ("None: is there a None literal in the EO language?") (((((xsys).xgetdefaultencoding)).apply)))
                xtest_yeardatescalendar.write
                  [xself]
                    memory > xshrink
                    seq > @
                      seq
                        xshrink.write
                          [xcal]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((" ".xjoin)).apply ((((unsupported)).apply (((("{:02d}/{:02d}/{}".xformat)).apply (((xd).xmonth)) (((xd).xday)) ((((unsupported)).apply ((((xstr)).apply (((xd).xyear)))) ((((unsupported)).apply ((2.neg)))))))) ((xd)) ((xz)))))) ((xz)) ((xy)))) ((xy)) ((xx)))) ((xx)) ((xcal)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xshrink)).apply ((((((((xcalendar).xCalendar)).apply).xyeardatescalendar)).apply (2004))))) ((xresult_2004_dates)))
                xtest_yeardayscalendar.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xCalendar)).apply).xyeardayscalendar)).apply (2004))) ((xresult_2004_days)))
                xtest_formatweekheader_short.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatweekheader)).apply (2))) ("Mo Tu We Th Fr Sa Su"))
                xtest_formatweekheader_long.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatweekheader)).apply (9))) ("  Monday   Tuesday  Wednesday  Thursday   Friday   Saturday   Sunday "))
                xtest_formatmonth.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatmonth)).apply (2004) (1))) ((xresult_2004_01_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xcalendar).xTextCalendar)).apply).xformatmonth)).apply (0) (2))) ((xresult_0_02_text)))
                xtest_formatmonthname_with_year.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((xcalendar).xHTMLCalendar)).apply).xformatmonthname)) (2004) (1) (TRUE))) ("<tr><th colspan=\"7\" class=\"month\">January 2004</th></tr>"))
                xtest_formatmonthname_without_year.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((((xcalendar).xHTMLCalendar)).apply).xformatmonthname)) (2004) (1) (FALSE))) ("<tr><th colspan=\"7\" class=\"month\">January</th></tr>"))
                xtest_prweek.write
                  [xself]
                    memory > xweek
                    seq > @
                      (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xout)))
                        seq
                          xweek.write (((unsupported)).apply ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (2) (1))) ((((unsupported)).apply (3) (2))) ((((unsupported)).apply (4) (3))) ((((unsupported)).apply (5) (4))) ((((unsupported)).apply (6) (5))) ((((unsupported)).apply (7) (6))))
                          bogusForceDataize.write (((((((xcalendar).xTextCalendar)).apply).xprweek)).apply ((xweek)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) (" 1  2  3  4  5  6  7"))
                xtest_prmonth.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xout)))
                        seq
                          bogusForceDataize.write (((((((xcalendar).xTextCalendar)).apply).xprmonth)).apply (2004) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ((xresult_2004_01_text)))
                xtest_pryear.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xout)))
                        seq
                          bogusForceDataize.write (((((((xcalendar).xTextCalendar)).apply).xpryear)).apply (2004))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ((xresult_2004_text)))
                xtest_format.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xout)))
                        seq
                          (((unsupported)).apply (((xcalendar).xformat)) ((((unsupported)).apply ("1") ("2") ("3"))) (3) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xout).xgetvalue)).apply).xstrip)).apply)) ("1   2   3"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_isleap.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xisleap)).apply (2000))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xisleap)).apply (2001))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xisleap)).apply (2002))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xisleap)).apply (2003))) (0))
                xtest_setfirstweekday.write
                  [xself]
                    memory > xorig
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xcalendar).xsetfirstweekday)) ("flabber"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcalendar).xsetfirstweekday)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xcalendar).xsetfirstweekday)) (200))
                        xorig.write ((((xcalendar).xfirstweekday)).apply)
                        bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply (((xcalendar).xSUNDAY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xfirstweekday)).apply)) (((xcalendar).xSUNDAY)))
                        bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply (((xcalendar).xMONDAY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xfirstweekday)).apply)) (((xcalendar).xMONDAY)))
                        bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply ((xorig)))
                xtest_illegal_weekday_reported.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xcalendar).xIllegalWeekdayError)) ("123"))))
                        bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply (123))
                xtest_enumerate_weekdays.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((xcalendar).xday_abbr).x__getitem__)) ((10.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((xcalendar).xday_name).x__getitem__)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xd)) ((xd)) (((xcalendar).xday_abbr)))))) (7))
                xtest_days.write
                  [xself]
                    memory > xvalue
                    seq > @
                      (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("day_name") ("day_abbr"))))
                        seq
                          xvalue.write (((xgetattr)).apply ((xcalendar)) ((xattr)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xvalue)))) (7))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply)))))) (7))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((xvalue)))))) (7))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((1.neg)))))) ((((xlist)).apply ((((xreversed)).apply ((xvalue)))))))
                xtest_months.write
                  [xself]
                    memory > xvalue
                    seq > @
                      (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("month_name") ("month_abbr"))))
                        seq
                          xvalue.write (((xgetattr)).apply ((xcalendar)) ((xattr)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xvalue)))) (13))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply)))))) (13))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvalue)) (0))) (""))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((xvalue)))))) (13))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((1.neg)))))) ((((xlist)).apply ((((xreversed)).apply ((xvalue)))))))
                xtest_locale_calendars.write
                  [xself]
                    memory > xold_october
                    memory > xlocal_month
                    memory > xlocal_weekday
                    memory > xcal
                    memory > xnew_october
                    seq > @
                      seq
                        xold_october.write (((((((xcalendar).xTextCalendar)).apply).xformatmonthname)).apply (2010) (10) (10))
                        (((unsupported)).apply (((xlocale).xError)))
                          seq
                            xcal.write (((unsupported)).apply (((xcalendar).xLocaleTextCalendar)) (""))
                            xlocal_weekday.write ((((xcal).xformatweekday)).apply (1) (10))
                            xlocal_month.write ((((xcal).xformatmonthname)).apply (2010) (10) (10))
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("cannot set the system default locale"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xlocal_weekday)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xlocal_month)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlocal_weekday)))) (10))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xlen)).apply ((xlocal_month)))) (10))
                        xcal.write (((unsupported)).apply (((xcalendar).xLocaleHTMLCalendar)) (""))
                        xlocal_weekday.write ((((xcal).xformatweekday)).apply (1))
                        xlocal_month.write ((((xcal).xformatmonthname)).apply (2010) (10))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xlocal_weekday)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xlocal_month)) ((xstr)))
                        xnew_october.write (((((((xcalendar).xTextCalendar)).apply).xformatmonthname)).apply (2010) (10) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xold_october)) ((xnew_october)))
                xtest_itermonthdays3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xlist)).apply ((((((((xcalendar).xCalendar)).apply).xitermonthdays3)).apply (((xdatetime).xMAXYEAR)) (12))))
                xtest_itermonthdays4.write
                  [xself]
                    memory > xcal
                    memory > xdays
                    seq > @
                      seq
                        xcal.write (((unsupported)).apply (((xcalendar).xCalendar)) (3))
                        xdays.write (((xlist)).apply (((((xcal).xitermonthdays4)).apply (2001) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdays)) (0))) ((((unsupported)).apply (2001) (2) (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdays)) ((1.neg)))) ((((unsupported)).apply (2001) (2) (28) (2))))
                xtest_itermonthdays.write
                  [xself]
                    memory > xcal
                    memory > xdays
                    seq > @
                      seq
                        (((unsupported)).apply ((xfirstweekday)) ((((xrange)).apply (7))))
                          seq
                            xcal.write ((((xcalendar).xCalendar)).apply ((xfirstweekday)))
                            (((unsupported)).apply ((((unsupported)).apply ((xy)) ((xm)))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (9999) (12))))))
                              seq
                                xdays.write (((xlist)).apply (((((xcal).xitermonthdays)).apply ((xy)) ((xm)))))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((((xlen)).apply ((xdays)))) ((((unsupported)).apply (35) (42))))
                        xcal.write (((unsupported)).apply (((xcalendar).xCalendar)) (3))
                        xdays.write (((xlist)).apply (((((xcal).xitermonthdays)).apply (2001) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdays)) ((((xlist)).apply ((((xrange)).apply (1) (29))))))
                xtest_itermonthdays2.write
                  [xself]
                    memory > xcal
                    memory > xdays
                    seq > @
                      (((unsupported)).apply ((xfirstweekday)) ((((xrange)).apply (7))))
                        seq
                          xcal.write ((((xcalendar).xCalendar)).apply ((xfirstweekday)))
                          (((unsupported)).apply ((((unsupported)).apply ((xy)) ((xm)))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (9999) (12))))))
                            seq
                              xdays.write (((xlist)).apply (((((xcal).xitermonthdays2)).apply ((xy)) ((xm)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdays)) (0))) (1))) ((xfirstweekday)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdays)) ((1.neg)))) (1))) ((((xfirstweekday).sub 1).mod 7)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xoldfirstweekday)) (((((xcalendar).xfirstweekday)).apply)))
                        bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply (((xself).xfirstweekday)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xcalendar).xsetfirstweekday)).apply (((xself).xoldfirstweekday)))
                xcheck_weeks.write
                  [xself xyear xmonth xweeks]
                    memory > xcal
                    seq > @
                      seq
                        xcal.write ((((xcalendar).xmonthcalendar)).apply ((xyear)) ((xmonth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcal)))) ((((xlen)).apply ((xweeks)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xweeks)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xweeks)) ((xi)))) ((((xsum)).apply ((((unsupported)).apply (((xday).neq 0)) ((xday)) ((((unsupported)).apply ((xcal)) ((xi)))))))))
            (((unsupported)).apply ((xMonthCalendarTestCase)))
              seq
                xfirstweekday.write ((xcalendar).xMONDAY)
                xtest_february.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1999) (2) ((((unsupported)).apply (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2005) (2) ((((unsupported)).apply (6) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1987) (2) ((((unsupported)).apply (1) (7) (7) (7) (6))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1988) (2) ((((unsupported)).apply (7) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1972) (2) ((((unsupported)).apply (6) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2004) (2) ((((unsupported)).apply (1) (7) (7) (7) (7))))
                xtest_april.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1935) (4) ((((unsupported)).apply (7) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1975) (4) ((((unsupported)).apply (6) (7) (7) (7) (3))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1945) (4) ((((unsupported)).apply (1) (7) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1995) (4) ((((unsupported)).apply (2) (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1994) (4) ((((unsupported)).apply (3) (7) (7) (7) (6))))
                xtest_december.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1980) (12) ((((unsupported)).apply (7) (7) (7) (7) (3))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1987) (12) ((((unsupported)).apply (6) (7) (7) (7) (4))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1968) (12) ((((unsupported)).apply (1) (7) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1988) (12) ((((unsupported)).apply (4) (7) (7) (7) (6))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2017) (12) ((((unsupported)).apply (3) (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2068) (12) ((((unsupported)).apply (2) (7) (7) (7) (7) (1))))
            (((unsupported)).apply ((xMonthCalendarTestCase)))
              seq
                xfirstweekday.write ((xcalendar).xSUNDAY)
                xtest_february.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2009) (2) ((((unsupported)).apply (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1999) (2) ((((unsupported)).apply (6) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1997) (2) ((((unsupported)).apply (1) (7) (7) (7) (6))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2004) (2) ((((unsupported)).apply (7) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1960) (2) ((((unsupported)).apply (6) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1964) (2) ((((unsupported)).apply (1) (7) (7) (7) (7))))
                xtest_april.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1923) (4) ((((unsupported)).apply (7) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1918) (4) ((((unsupported)).apply (6) (7) (7) (7) (3))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1950) (4) ((((unsupported)).apply (1) (7) (7) (7) (7) (1))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1960) (4) ((((unsupported)).apply (2) (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1909) (4) ((((unsupported)).apply (3) (7) (7) (7) (6))))
                xtest_december.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (2080) (12) ((((unsupported)).apply (7) (7) (7) (7) (3))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1941) (12) ((((unsupported)).apply (6) (7) (7) (7) (4))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1923) (12) ((((unsupported)).apply (1) (7) (7) (7) (7) (2))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1948) (12) ((((unsupported)).apply (4) (7) (7) (7) (6))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1927) (12) ((((unsupported)).apply (3) (7) (7) (7) (7))))
                        bogusForceDataize.write ((((xself).xcheck_weeks)).apply (1995) (12) ((((unsupported)).apply (2) (7) (7) (7) (7) (1))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xTIMESTAMPS.write (((unsupported)).apply (0) (10) (100) (1000) (10000) (100000) (1000000) (1234567890) (1262304000) (1275785153))
                xtest_timegm.write
                  [xself]
                    memory > xtuple
                    seq > @
                      (((unsupported)).apply ((xsecs)) (((xself).xTIMESTAMPS)))
                        seq
                          xtuple.write ((((xtime).xgmtime)).apply ((xsecs)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsecs)) (((((xcalendar).xtimegm)).apply ((xtuple)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_january.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xmonthrange)).apply (2004) (1))) ((((unsupported)).apply (3) (31))))
                xtest_february_leap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xmonthrange)).apply (2004) (2))) ((((unsupported)).apply (6) (29))))
                xtest_february_nonleap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xmonthrange)).apply (2010) (2))) ((((unsupported)).apply (0) (28))))
                xtest_december.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xmonthrange)).apply (2004) (12))) ((((unsupported)).apply (2) (31))))
                xtest_zeroth_month.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcalendar).xIllegalMonthError)))))
                        bogusForceDataize.write ((((xcalendar).xmonthrange)).apply (2004) (0))
                xtest_thirteenth_month.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcalendar).xIllegalMonthError)))))
                        bogusForceDataize.write ((((xcalendar).xmonthrange)).apply (2004) (13))
                xtest_illegal_month_reported.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xcalendar).xIllegalMonthError)) ("65"))))
                        bogusForceDataize.write ((((xcalendar).xmonthrange)).apply (2004) (65))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_no_range.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xleapdays)).apply (2010) (2010))) (0))
                xtest_no_leapdays.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xleapdays)).apply (2010) (2011))) (0))
                xtest_no_leapdays_upper_boundary.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xleapdays)).apply (2010) (2012))) (0))
                xtest_one_leapday_lower_boundary.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xleapdays)).apply (2012) (2013))) (1))
                xtest_several_leapyears_in_range.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcalendar).xleapdays)).apply (1997) (2020))) (5))
            xconv.write
              [xs]
                seq > @
                  (((unsupported)).apply ((((((((xs).xreplace)).apply ("n") (((xos).xlinesep))).xencode)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xrun_ok.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xassert_python_ok)).apply ("-m") ("calendar") ((((unsupported)).apply ((xargs)))))) (1))))
                xassertFailure.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xstdout)) ((xstderr)))) ((((xassert_python_failure)).apply ("-m") ("calendar") ((((unsupported)).apply ((xargs)))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("usage:") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (2))
                xtest_help.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply ("-h"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("usage:") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("calendar.py") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("--help") ((xstdout)))
                xtest_illegal_arguments.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-z"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("spam"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("2004") ("spam"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-t") ("html") ("2004") ("1"))
                xtest_output_current_year.write
                  [xself]
                    memory > xstdout
                    memory > xyear
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply)
                        xyear.write ((((((xdatetime).xdatetime).xnow)).apply).xyear)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((" %s".mod (xyear)).xencode)).apply)) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("January") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Mo Tu We Th Fr Sa Su") ((xstdout)))
                xtest_output_year.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply ("2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) ((((xconv)).apply ((xresult_2004_text)))))
                xtest_output_month.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply ("2004") ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) ((((xconv)).apply ((xresult_2004_01_text)))))
                xtest_option_encoding.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-e"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--encoding"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--encoding") ("utf-16-le") ("2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) (((((xresult_2004_text).xencode)).apply ("utf-16-le"))))
                xtest_option_locale.write
                  [xself]
                    memory > xlang
                    memory > xstdout
                    memory > xenc
                    memory > xoldlocale
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-L"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--locale"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-L") ("en"))
                        (((unsupported)).apply ((((unsupported)).apply ((xlang)) ((xenc)))) (((((xlocale).xgetdefaultlocale)).apply)))
                        xlang.write ((xlang).or "C")
                        xenc.write ((xenc).or "UTF-8")
                        (((unsupported)).apply ((((unsupported)).apply (((xlocale).xError)) ((xValueError)))))
                          seq
                            xoldlocale.write ((((xlocale).xgetlocale)).apply (((xlocale).xLC_TIME)))
                            (((unsupported)).apply)
                              bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_TIME)) ((((unsupported)).apply ((xlang)) ((xenc)))))
                              bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_TIME)) ((xoldlocale)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("cannot set the system default locale"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--locale") ((xlang)) ("--encoding") ((xenc)) ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((("2004".xencode)).apply ((xenc)))) ((xstdout)))
                xtest_option_width.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-w"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--width"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-w") ("spam"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--width") ("3") ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Mon Tue Wed Thu Fri Sat Sun") ((xstdout)))
                xtest_option_lines.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-l"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--lines"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-l") ("spam"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--lines") ("2") ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("DecembernnMo Tu We"))) ((xstdout)))
                xtest_option_spacing.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-s"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--spacing"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-s") ("spam"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--spacing") ("8") ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Su        Mo") ((xstdout)))
                xtest_option_months.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-m"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--month"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-m") ("spam"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--months") ("1") ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("nMo Tu We Th Fr Sa Sun"))) ((xstdout)))
                xtest_option_type.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-t"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("--type"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-t") ("spam"))
                        xstdout.write ((((xself).xrun_ok)).apply ("--type") ("text") ("2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) ((((xconv)).apply ((xresult_2004_text)))))
                        xstdout.write ((((xself).xrun_ok)).apply ("--type") ("html") ("2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstdout)) ((((unsupported)).apply (6))))) ("<?xml "))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<title>Calendar for 2004</title>") ((xstdout)))
                xtest_html_output_current_year.write
                  [xself]
                    memory > xstdout
                    memory > xyear
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply ("--type") ("html"))
                        xyear.write ((((((xdatetime).xdatetime).xnow)).apply).xyear)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((("<title>Calendar for %s</title>".mod (xyear)).xencode)).apply)) ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<tr><th colspan=\"7\" class=\"month\">January</th></tr>") ((xstdout)))
                xtest_html_output_year_encoding.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        xstdout.write ((((xself).xrun_ok)).apply ("-t") ("html") ("--encoding") ("ascii") ("2004"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstdout)) ((((((((xresult_2004_html).xformat)).apply ((((unsupported)).apply ((xdefault_format))))).xencode)).apply ("ascii"))))
                xtest_html_output_year_css.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-t") ("html") ("-c"))
                        bogusForceDataize.write ((((xself).xassertFailure)).apply ("-t") ("html") ("--css"))
                        xstdout.write ((((xself).xrun_ok)).apply ("-t") ("html") ("--css") ("custom.css") ("2004"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<link rel=\"stylesheet\" type=\"text/css\" href=\"custom.css\" />") ((xstdout)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("mdays") ("January") ("February") ("EPOCH") ("MONDAY") ("TUESDAY") ("WEDNESDAY") ("THURSDAY") ("FRIDAY") ("SATURDAY") ("SUNDAY") ("different_locale") ("c") ("prweek") ("week") ("format") ("formatstring") ("main") ("monthlen") ("prevmonth") ("nextmonth"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xcalendar)) ((xblacklist)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xcssclass_year_head
                    memory > xcssclasses_weekday_head
                    memory > xcssclass_month_head
                    memory > xcssclass_year
                    memory > xcssclass_month
                    memory > xcssclasses
                    seq > @
                      seq
                        (((unsupported)).apply (((xcalendar).xHTMLCalendar)))
                          seq
                            xcssclasses.write (((unsupported)).apply (((xstyle).add " text-nowrap")) ((xstyle)) ((((xcalendar).xHTMLCalendar).xcssclasses)))
                            xcssclasses_weekday_head.write (((unsupported)).apply ("red") ("blue") ("green") ("lilac") ("yellow") ("orange") ("pink"))
                            xcssclass_month_head.write "text-center month-head"
                            xcssclass_month.write "text-center month"
                            xcssclass_year.write "text-italic "
                            xcssclass_year_head.write "lead "
                        (((unsupported)).apply (((xself).xcal)) ((((xCustomHTMLCal)).apply)))
                xtest_formatmonthname.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply ("class=\"text-center month-head\"") ((((((xself).xcal).xformatmonthname)).apply (2017) (5))))
                xtest_formatmonth.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply ("class=\"text-center month\"") ((((((xself).xcal).xformatmonth)).apply (2017) (5))))
                xtest_formatweek.write
                  [xself]
                    memory > xweeks
                    seq > @
                      seq
                        xweeks.write (((((xself).xcal).xmonthdays2calendar)).apply (2017) (5))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("class=\"wed text-nowrap\"") ((((((xself).xcal).xformatweek)).apply ((((unsupported)).apply ((xweeks)) (0))))))
                xtest_formatweek_head.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((((xself).xcal).xformatweekheader)).apply)
                        (((unsupported)).apply ((xcolor)) ((((xself).xcal).xcssclasses_weekday_head)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply (("<th class=\"%s\">".mod (xcolor))) ((xheader)))
                xtest_format_year.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"%s\">".mod (((xself).xcal).xcssclass_year))) ((((((xself).xcal).xformatyear)).apply (2017))))
                xtest_format_year_head.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (("<tr><th colspan=\"%d\" class=\"%s\">%s</th></tr>".mod (((unsupported)).apply (3) ((((xself).xcal).xcssclass_year_head)) (2017)))) ((((((xself).xcal).xformatyear)).apply (2017))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)