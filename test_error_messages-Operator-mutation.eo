memory > xTimeField
memory > xDecimalField
memory > xBooleanField
memory > xValidationError
memory > xTestCase
memory > xURLField
memory > xCharField
memory > xAssertFormErrorsMixin
memory > xMultipleChoiceField
memory > xRegexField
memory > xargs
memory > xSplitDateTimeField
memory > xkwargs
memory > xcm
memory > xContext
memory > xstr
memory > xChoiceModel
memory > xFileField
memory > xChoiceField
memory > xIntegerField
memory > xSimpleUploadedFile
memory > xEmailField
memory > xTestForm
memory > xFloatField
memory > xDateTimeField
memory > xmark_safe
memory > xutils
memory > xForm
memory > xTemplate
memory > xDateField
memory > xe
memory > xModelChoiceField
memory > xSomeForm
memory > xCustomErrorList
memory > xGenericIPAddressField
memory > xModelMultipleChoiceField
memory > xSimpleTestCase
[] > test_error_messages
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_floatfield
        memory > xtest_subclassing_errorlist
        memory > xtest_generic_ipaddressfield
        memory > xtest_integerfield
        memory > xtest_multiplechoicefield
        memory > xtest_filefield
        memory > xtest_modelchoicefield_value_placeholder
        memory > xtest_timefield
        memory > xtest_urlfield
        memory > xtest_charfield
        memory > xtest_emailfield
        memory > xassertFormErrors
        memory > xtest_error_messages_escaping
        memory > xtest_booleanfield
        memory > xtest_modelchoicefield
        memory > xtest_decimalfield
        memory > xtest_datefield
        memory > xtest_regexfield
        memory > xtest_choicefield
        memory > xtest_datetimefield
        memory > xtest_splitdatetimefield
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              xassertFormErrors.write
                [xself xexpected xthe_callable]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))) ((xcm)))
                        bogusForceDataize.write (((xthe_callable)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessages)) ((xexpected)))
            (((unsupported)).apply ((xSimpleTestCase)) ((xAssertFormErrorsMixin)))
              seq
                xtest_charfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("min_length") ("LENGTH %(show_value)s, MIN LENGTH %(limit_value)s") ("max_length") ("LENGTH %(show_value)s, MAX LENGTH %(limit_value)s"))
                        xf.write (((unsupported)).apply ((xCharField)) (5) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 4, MIN LENGTH 5"))) (((xf).xclean)) ("1234"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 11, MAX LENGTH 10"))) (((xf).xclean)) ("12345678901"))
                xtest_integerfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("min_value") ("MIN VALUE IS %(limit_value)s") ("max_value") ("MAX VALUE IS %(limit_value)s"))
                        xf.write (((unsupported)).apply ((xIntegerField)) (5) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MIN VALUE IS 5"))) (((xf).xclean)) ("4"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX VALUE IS 10"))) (((xf).xclean)) ("11"))
                xtest_floatfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("min_value") ("MIN VALUE IS %(limit_value)s") ("max_value") ("MAX VALUE IS %(limit_value)s"))
                        xf.write (((unsupported)).apply ((xFloatField)) (5) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MIN VALUE IS 5"))) (((xf).xclean)) ("4"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX VALUE IS 10"))) (((xf).xclean)) ("11"))
                xtest_decimalfield.write
                  [xself]
                    memory > xe
                    memory > xf2
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("min_value") ("MIN VALUE IS %(limit_value)s") ("max_value") ("MAX VALUE IS %(limit_value)s") ("max_digits") ("MAX DIGITS IS %(max)s") ("max_decimal_places") ("MAX DP IS %(max)s") ("max_whole_digits") ("MAX DIGITS BEFORE DP IS %(max)s"))
                        xf.write (((unsupported)).apply ((xDecimalField)) (5) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MIN VALUE IS 5"))) (((xf).xclean)) ("4"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX VALUE IS 10"))) (((xf).xclean)) ("11"))
                        xf2.write (((unsupported)).apply ((xDecimalField)) (4) (2) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX DIGITS IS 4"))) (((xf2).xclean)) ("123.45"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX DP IS 2"))) (((xf2).xclean)) ("1.234"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("MAX DIGITS BEFORE DP IS 2"))) (((xf2).xclean)) ("123.4"))
                xtest_datefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID"))
                        xf.write (((unsupported)).apply ((xDateField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                xtest_timefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID"))
                        xf.write (((unsupported)).apply ((xTimeField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                xtest_datetimefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID"))
                        xf.write (((unsupported)).apply ((xDateTimeField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                xtest_regexfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("min_length") ("LENGTH %(show_value)s, MIN LENGTH %(limit_value)s") ("max_length") ("LENGTH %(show_value)s, MAX LENGTH %(limit_value)s"))
                        xf.write (((unsupported)).apply ((xRegexField)) ("^[0-9]-$") (5) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abcde"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 4, MIN LENGTH 5"))) (((xf).xclean)) ("1234"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 11, MAX LENGTH 10"))) (((xf).xclean)) ("12345678901"))
                xtest_emailfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("min_length") ("LENGTH %(show_value)s, MIN LENGTH %(limit_value)s") ("max_length") ("LENGTH %(show_value)s, MAX LENGTH %(limit_value)s"))
                        xf.write (((unsupported)).apply ((xEmailField)) (8) (10) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abcdefgh"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 7, MIN LENGTH 8"))) (((xf).xclean)) ("a@b.com"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("LENGTH 11, MAX LENGTH 10"))) (((xf).xclean)) ("aye@bee.com"))
                xtest_filefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("missing") ("MISSING") ("empty") ("EMPTY FILE"))
                        xf.write (((unsupported)).apply ((xFileField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("EMPTY FILE"))) (((xf).xclean)) ((((xSimpleUploadedFile)).apply ("name") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("EMPTY FILE"))) (((xf).xclean)) ((((xSimpleUploadedFile)).apply ("name") (""))))
                xtest_urlfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID") ("max_length") ("\"%(value)s\" has more than %(limit_value)d characters."))
                        xf.write (((unsupported)).apply ((xURLField)) ((xe)) (17))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID"))) (((xf).xclean)) ("abc.c"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("\"http://djangoproject.com\" has more than 17 characters."))) (((xf).xclean)) ("djangoproject.com"))
                xtest_booleanfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED"))
                        xf.write (((unsupported)).apply ((xBooleanField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                xtest_choicefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid_choice") ("%(value)s IS INVALID CHOICE"))
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("aye"))))) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("b IS INVALID CHOICE"))) (((xf).xclean)) ("b"))
                xtest_multiplechoicefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid_choice") ("%(value)s IS INVALID CHOICE") ("invalid_list") ("NOT A LIST"))
                        xf.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("aye"))))) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("NOT A LIST"))) (((xf).xclean)) ("b"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("b IS INVALID CHOICE"))) (((xf).xclean)) ((((unsupported)).apply ("b"))))
                xtest_splitdatetimefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid_date") ("INVALID DATE") ("invalid_time") ("INVALID TIME"))
                        xf.write (((unsupported)).apply ((xSplitDateTimeField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID DATE") ("INVALID TIME"))) (((xf).xclean)) ((((unsupported)).apply ("a") ("b"))))
                xtest_generic_ipaddressfield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid") ("INVALID IP ADDRESS"))
                        xf.write (((unsupported)).apply ((xGenericIPAddressField)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID IP ADDRESS"))) (((xf).xclean)) ("127.0.0"))
                xtest_subclassing_errorlist.write
                  [xself]
                    memory > x__str__
                    memory > xas_divs
                    memory > xform2
                    memory > xbirthday
                    memory > xclean
                    memory > xlast_name
                    memory > xform1
                    memory > xfirst_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xfirst_name.write (((xCharField)).apply)
                            xlast_name.write (((xCharField)).apply)
                            xbirthday.write (((xDateField)).apply)
                            xclean.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xValidationError)).apply ("I like to be awkward."))))
                        (((unsupported)).apply (((xutils).xErrorList)))
                          seq
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((((xself).xas_divs)).apply)))
                            xas_divs.write
                              [xself]
                                seq > @
                                  seq
                                    ((xself).not).if
                                      (((unsupported)).apply (""))
                                    (((unsupported)).apply ((((xmark_safe)).apply (("<div class=\"error\">%s</div>".mod ((("".xjoin)).apply ((((unsupported)).apply (("<p>%s</p>".mod (xe))) ((xe)) ((xself))))))))))
                        xform1.write (((xTestForm)).apply ((((unsupported)).apply ("first_name") ("John"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply (((((unsupported)).apply ((xform1)) ("last_name")).xerrors)))) ("<ul class=\"errorlist\"><li>This field is required.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply (((xform1).xerrors)) ("__all__"))))) ("<ul class=\"errorlist nonfield\"><li>I like to be awkward.</li></ul>"))
                        xform2.write (((unsupported)).apply ((xTestForm)) ((((unsupported)).apply ("first_name") ("John"))) ((xCustomErrorList)))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply (((((unsupported)).apply ((xform2)) ("last_name")).xerrors)))) ("<div class=\"error\"><p>This field is required.</p></div>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((unsupported)).apply (((xform2).xerrors)) ("__all__"))))) ("<div class=\"error\"><p>I like to be awkward.</p></div>"))
                xtest_error_messages_escaping.write
                  [xself]
                    memory > xt
                    memory > xfield
                    memory > xf
                    seq > @
                      seq
                        xt.write (((xTemplate)).apply ("{{ form.errors }}"))
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("one") ("One"))))))
                        xf.write (((xSomeForm)).apply ((((unsupported)).apply ("field") ("<script>"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<ul class=\"errorlist\"><li>field<ul class=\"errorlist\"><li>Select a valid choice. &lt;script&gt; is not one of the available choices.</li></ul></li></ul>"))
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((unsupported)).apply ((xMultipleChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("one") ("One"))))))
                        xf.write (((xSomeForm)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply ("<script>"))))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<ul class=\"errorlist\"><li>field<ul class=\"errorlist\"><li>Select a valid choice. &lt;script&gt; is not one of the available choices.</li></ul></li></ul>"))
                        (((unsupported)).apply ((xForm)))
                          xfield.write (((xModelMultipleChoiceField)).apply ((((((xChoiceModel).xobjects).xall)).apply)))
                        xf.write (((xSomeForm)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply ("<script>"))))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("form") ((xf)))))))) ("<ul class=\"errorlist\"><li>field<ul class=\"errorlist\"><li>“&lt;script&gt;” is not a valid value.</li></ul></li></ul>"))
            (((unsupported)).apply ((xTestCase)) ((xAssertFormErrorsMixin)))
              seq
                xtest_modelchoicefield.write
                  [xself]
                    memory > xe
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((((xChoiceModel).xobjects).xcreate)) (1) ("a"))
                        (((unsupported)).apply ((((xChoiceModel).xobjects).xcreate)) (2) ("b"))
                        (((unsupported)).apply ((((xChoiceModel).xobjects).xcreate)) (3) ("c"))
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid_choice") ("INVALID CHOICE"))
                        xf.write (((unsupported)).apply ((xModelChoiceField)) ((((((xChoiceModel).xobjects).xall)).apply)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("INVALID CHOICE"))) (((xf).xclean)) ("4"))
                        xe.write (((unsupported)).apply ("required") ("REQUIRED") ("invalid_choice") ("%(value)s IS INVALID CHOICE") ("invalid_list") ("NOT A LIST OF VALUES"))
                        xf.write (((unsupported)).apply ((xModelMultipleChoiceField)) ((((((xChoiceModel).xobjects).xall)).apply)) ((xe)))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("REQUIRED"))) (((xf).xclean)) (""))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("NOT A LIST OF VALUES"))) (((xf).xclean)) ("3"))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("4 IS INVALID CHOICE"))) (((xf).xclean)) ((((unsupported)).apply ("4"))))
                xtest_modelchoicefield_value_placeholder.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xModelChoiceField)) ((((((xChoiceModel).xobjects).xall)).apply)) ((((unsupported)).apply ("invalid_choice") ("\"%(value)s\" is not one of the available choices."))))
                        bogusForceDataize.write ((((xself).xassertFormErrors)).apply ((((unsupported)).apply ("\"invalid\" is not one of the available choices."))) (((xf).xclean)) ("invalid"))