memory > xhints
memory > xconnection
memory > xProjectState
memory > xmigrations
memory > xoverride_settings
memory > xeditor
memory > xMigrateEverythingRouter
memory > xAgnosticRouter
memory > xmodels
memory > xMigrateNothingRouter
memory > xOperationTestBase
[] > test_multidb
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdatabases
        memory > xtest_run_python_migrate_foo_router_without_hints
        memory > xtest_run_python_migrate_nothing_router
        memory > xtest_create_model2
        memory > x_test_create_model
        memory > x_test_run_python
        memory > x_test_run_sql
        memory > xallow_migrate
        memory > xtest_create_model
        memory > xtest_create_model3
        memory > xtest_run_sql_migrate_foo_router_with_hints
        memory > xtest_run_sql_migrate_foo_router_without_hints
        memory > xtest_run_python_migrate_foo_router_with_hints
        memory > xtest_run_sql_migrate_nothing_router
        memory > xtest_create_model4
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xallow_migrate.write
                  [xself xdb xapp_label]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xallow_migrate.write
                  [xself xdb xapp_label]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xallow_migrate.write
                  [xself xdb xapp_label]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (TRUE))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xallow_migrate.write
                  [xself xdb xapp_label]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xhints).xget)).apply ("foo") (FALSE))))
            (((unsupported)).apply ((xOperationTestBase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                x_test_create_model.write
                  [xself xapp_label xshould_run]
                    memory > xnew_state
                    memory > xoperation
                    memory > xproject_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xoperation.write ((((xmigrations).xCreateModel)).apply ("Pony") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xproject_state.write (xProjectState)
                        xnew_state.write ((xproject_state).xclone)
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ((xapp_label)) ((xnew_state)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply (("%s_pony".mod (xapp_label))))
                        (((unsupported)).apply (((xconnection).xschema_editor)) ((xeditor)))
                          bogusForceDataize.write ((((xoperation).xdatabase_forwards)).apply ((xapp_label)) ((xeditor)) ((xproject_state)) ((xnew_state)))
                        (xshould_run).if
                          bogusForceDataize.write ((((xself).xassertTableExists)).apply (("%s_pony".mod (xapp_label))))
                          bogusForceDataize.write ((((xself).xassertTableNotExists)).apply (("%s_pony".mod (xapp_label))))
                        (((unsupported)).apply (((xconnection).xschema_editor)) ((xeditor)))
                          bogusForceDataize.write ((((xoperation).xdatabase_backwards)).apply ((xapp_label)) ((xeditor)) ((xnew_state)) ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply (("%s_pony".mod (xapp_label))))
                xtest_create_model.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo") (TRUE))
                xtest_create_model2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo2") (FALSE))
                xtest_create_model3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo3") (TRUE))
                xtest_create_model4.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xAgnosticRouter)) ((xAgnosticRouter)))))))
                          (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo4") (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xMigrateNothingRouter)) ((xMigrateEverythingRouter)))))))
                          (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo4") (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xMigrateEverythingRouter)) ((xMigrateNothingRouter)))))))
                          (((unsupported)).apply (((xself).x_test_create_model)) ("test_mltdb_crmo4") (TRUE))
                x_test_run_sql.write
                  [xself xapp_label xshould_run xhints]
                    memory > xPony
                    memory > xnew_state
                    memory > xproject_state
                    memory > xsql
                    memory > xoperation
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xMigrateEverythingRouter)))))))
                          xproject_state.write ((((xself).xset_up_test_model)).apply ((xapp_label)))
                        xsql.write ((((((unsupported)).apply).xformat)).apply ((xapp_label)))
                        xoperation.write (((unsupported)).apply (((xmigrations).xRunSQL)) ((xsql)) (((xhints).or (((unsupported)).apply))))
                        xnew_state.write ((xproject_state).xclone)
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ((xapp_label)) ((xnew_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnew_state)) ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xproject_state).xapps).xget_model)).apply ((xapp_label)) ("Pony")).xobjects).xcount)) (0))
                        (((unsupported)).apply (((xconnection).xschema_editor)) ((xeditor)))
                          bogusForceDataize.write ((((xoperation).xdatabase_forwards)).apply ((xapp_label)) ((xeditor)) ((xproject_state)) ((xnew_state)))
                        xPony.write (((((xproject_state).xapps).xget_model)).apply ((xapp_label)) ("Pony"))
                        (xshould_run).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPony).xobjects).xcount)) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPony).xobjects).xcount)) (0))
                xtest_run_sql_migrate_nothing_router.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_sql)) ("test_mltdb_runsql") (FALSE))
                xtest_run_sql_migrate_foo_router_without_hints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_sql)) ("test_mltdb_runsql2") (FALSE))
                xtest_run_sql_migrate_foo_router_with_hints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_sql)) ("test_mltdb_runsql3") (TRUE) ((((unsupported)).apply ("foo") (TRUE))))
                x_test_run_python.write
                  [xself xapp_label xshould_run xhints]
                    memory > xinner_method
                    memory > xPony
                    memory > xoperation
                    memory > xnew_state
                    memory > xproject_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((xMigrateEverythingRouter)))))))
                          xproject_state.write ((((xself).xset_up_test_model)).apply ((xapp_label)))
                        xinner_method.write
                          [xmodels xschema_editor]
                            memory > xPony
                            seq > @
                              seq
                                xPony.write ((((xmodels).xget_model)).apply ((xapp_label)) ("Pony"))
                                (((unsupported)).apply ((((xPony).xobjects).xcreate)) (1) (3.55))
                                (((unsupported)).apply ((((xPony).xobjects).xcreate)) (5))
                        xoperation.write (((unsupported)).apply (((xmigrations).xRunPython)) ((xinner_method)) (((xhints).or (((unsupported)).apply))))
                        xnew_state.write ((xproject_state).xclone)
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ((xapp_label)) ((xnew_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnew_state)) ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xproject_state).xapps).xget_model)).apply ((xapp_label)) ("Pony")).xobjects).xcount)) (0))
                        (((unsupported)).apply (((xconnection).xschema_editor)) ((xeditor)))
                          bogusForceDataize.write ((((xoperation).xdatabase_forwards)).apply ((xapp_label)) ((xeditor)) ((xproject_state)) ((xnew_state)))
                        xPony.write (((((xproject_state).xapps).xget_model)).apply ((xapp_label)) ("Pony"))
                        (xshould_run).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPony).xobjects).xcount)) (2))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPony).xobjects).xcount)) (0))
                xtest_run_python_migrate_nothing_router.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_python)) ("test_mltdb_runpython") (FALSE))
                xtest_run_python_migrate_foo_router_without_hints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_python)) ("test_mltdb_runpython2") (FALSE))
                xtest_run_python_migrate_foo_router_with_hints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_test_run_python)) ("test_mltdb_runpython3") (TRUE) ((((unsupported)).apply ("foo") (TRUE))))