memory > xtypes
memory > xfalse
memory > xdecimal
memory > xValueError
memory > xstr
memory > xexec
memory > xrange
memory > xeval
memory > xtype
memory > xrepr
memory > xX
memory > xi
memory > xcompile
memory > xascii
memory > xDeprecationWarning
memory > xSyntaxError
memory > xnext
memory > xast
memory > xformat
memory > xunittest
memory > xNameError
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_fstring
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_docstring
        memory > xtest_backslashes_in_string_part
        memory > xtest_ast_line_numbers_multiline_fstring
        memory > xtest_side_effect_order
        memory > xtest_parens_in_expressions
        memory > xtest_double_braces
        memory > xa_global
        memory > xtest_compile_time_concat_errors
        memory > xassertAllRaise
        memory > xtest_locals
        memory > xtest_walrus
        memory > xtest_unterminated_string
        memory > xtest_missing_variable
        memory > xtest_many_expressions
        memory > xtest_comments
        memory > xtest_newlines_in_expressions
        memory > xtest_str_format_differences
        memory > xtest_del
        memory > xtest_ast_line_numbers
        memory > xtest_literal_eval
        memory > xtest_invalid_string_prefixes
        memory > xtest__format__lookup
        memory > xtest_ast_line_numbers_nested
        memory > xtest_compile_time_concat
        memory > xtest_loop
        memory > xtest_multiple_vars
        memory > xtest_closure
        memory > xtest_ast_line_numbers_multiple_formattedvalues
        memory > xtest_no_backslashes_in_expression_part
        memory > xtest_global
        memory > xtest_mismatched_braces
        memory > xtest_ast
        memory > xtest_nested_fstrings
        memory > xtest_shadowed_global
        memory > xtest_equal_equal
        memory > xtest_expressions_with_triple_quoted_strings
        memory > xtest_misformed_unicode_character_name
        memory > xtest_mismatched_parens
        memory > xtest_if_conditional
        memory > xtest_leading_trailing_spaces
        memory > xtest_ast_compile_time_concat
        memory > xtest_lambda
        memory > xtest_ast_line_numbers_duplicate_expression
        memory > xtest_literal
        memory > xtest_missing_expression
        memory > xtest_debug_conversion
        memory > xtest_backslash_char
        memory > xtest_assignment
        memory > xtest_yield
        memory > xtest_no_escapes_for_braces
        memory > xtest_errors
        memory > xtest_dict
        memory > xtest_missing_format_spec
        memory > xtest_format_specifier_expressions
        memory > xtest_conversions
        memory > xtest_arguments
        memory > xtest_empty_format_specifier
        memory > xtest_not_equal
        memory > xtest_call
        memory > xtest_yield_send
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xa_global.write "global variable"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertAllRaise.write
                  [xself xexception_type xregex xerror_strings]
                    seq > @
                      (((unsupported)).apply ((xstr)) ((xerror_strings)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xstr)))))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xexception_type)) ((xregex)))))
                            bogusForceDataize.write (((xeval)).apply ((xstr)))
                xtest__format__lookup.write
                  [xself]
                    memory > xx
                    memory > x__format__
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__format__.write
                            [xself xspec]
                              seq > @
                                (((unsupported)).apply ("class"))
                        xx.write (((xX)).apply)
                        xy.write (((xX)).apply)
                        (((unsupported)).apply (((xy).x__format__)) (((((xtypes).xMethodType)).apply ((((unsupported)).apply ("instance"))) ((xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{y}") ((((xformat)).apply ((xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{y}") ("class"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xx)))) ((((xformat)).apply ((xy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).x__format__)).apply (""))) ("class"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xy).x__format__)).apply (""))) ("instance"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xtype)).apply ((xx))).x__format__)).apply ((xx)) (""))) ("class"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xtype)).apply ((xy))).x__format__)).apply ((xy)) (""))) ("class"))
                xtest_ast.write
                  [xself]
                    memory > xc
                    memory > x__call__
                    memory > xt
                    memory > xexpr
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xcalled)) ((xfalse)))
                            x__call__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xcalled)) (TRUE))
                                    (((unsupported)).apply (4))
                        xx.write (((xX)).apply)
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        xc.write (((xcompile)).apply ((xt)) ("") ("exec"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xx).xcalled)))
                        bogusForceDataize.write (((xexec)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xx).xcalled)))
                xtest_ast_line_numbers.write
                  [xself]
                    memory > xt
                    memory > xexpr
                    memory > xbinop
                    seq > @
                      seq
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xt)))) (((xast).xModule)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xt).xbody)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (0))))) (((xast).xAssign)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (1))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xlineno)) (3))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                xtest_ast_line_numbers_multiple_formattedvalues.write
                  [xself]
                    memory > xexpr
                    memory > xbinop2
                    memory > xt
                    memory > xbinop1
                    seq > @
                      seq
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xt)))) (((xast).xModule)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xt).xbody)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (0))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (1))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3)).xlineno)) (3))
                        xbinop1.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop1)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop1).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop1).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop1).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop1).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop1).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop1).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop1).xcol_offset)) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop1).xleft).xcol_offset)) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop1).xright).xcol_offset)) (12))
                        xbinop2.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop2)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop2).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop2).xop)))) (((xast).xAdd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop2).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop2).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop2).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop2).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop2).xcol_offset)) (23))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop2).xleft).xcol_offset)) (23))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop2).xright).xcol_offset)) (27))
                xtest_ast_line_numbers_nested.write
                  [xself]
                    memory > xt
                    memory > xcall
                    memory > xexpr
                    memory > xbinop
                    seq > @
                      seq
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xt)))) (((xast).xModule)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xt).xbody)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (0))))) (((xast).xAssign)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (1))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xlineno)) (3))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xbinop).xright).xvalues)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((xbinop).xright).xvalues)) (0))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((xbinop).xright).xvalues)) (0)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((xbinop).xright).xvalues)) (1))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((xbinop).xright).xvalues)) (2))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((xbinop).xright).xvalues)) (2)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xbinop).xright).xvalues)) (0)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xbinop).xright).xvalues)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xbinop).xright).xvalues)) (2)).xlineno)) (3))
                        xcall.write ((((unsupported)).apply ((((xbinop).xright).xvalues)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xcall)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcall).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcall).xcol_offset)) (11))
                xtest_ast_line_numbers_duplicate_expression.write
                  [xself]
                    memory > xt
                    memory > xexpr
                    memory > xbinop
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xt)))) (((xast).xModule)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xt).xbody)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (0))))) (((xast).xAssign)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (1))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (4))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (3)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (4)).xlineno)) (3))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (4)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                xtest_ast_line_numbers_multiline_fstring.write
                  [xself]
                    memory > xt
                    memory > xexpr
                    memory > xbinop
                    seq > @
                      seq
                        xexpr.write (((unsupported)).apply)
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xt)))) (((xast).xModule)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xt).xbody)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (0))))) (((xast).xAssign)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (0)).xlineno)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply (((xt).xbody)) (1))))) (((xast).xExpr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xvalue)))) (((xast).xJoinedStr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1))))) (((xast).xFormattedValue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2))))) (((xast).xConstant)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xvalue)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xlineno)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xt).xbody)) (1)).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (0)).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xcol_offset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (2)).xcol_offset)) (0))
                        xbinop.write ((((unsupported)).apply ((((((unsupported)).apply (((xt).xbody)) (1)).xvalue).xvalues)) (1)).xvalue)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xbinop)))) (((xast).xBinOp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xleft)))) (((xast).xName)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xop)))) (((xast).xMult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xbinop).xright)))) (((xast).xCall)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xlineno)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xlineno)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xlineno)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbinop).xcol_offset)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xleft).xcol_offset)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbinop).xright).xcol_offset)) (7))
                xtest_docstring.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              unsupported
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xf).x__doc__)))
                        xg.write
                          []
                            seq > @
                              unsupported
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xg).x__doc__)))
                xtest_literal_eval.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("malformed node or string"))))
                        bogusForceDataize.write ((((xast).xliteral_eval)).apply ("f'x'"))
                xtest_ast_compile_time_concat.write
                  [xself]
                    memory > xt
                    memory > xx
                    memory > xexpr
                    memory > xc
                    seq > @
                      seq
                        xx.write (((unsupported)).apply (""))
                        xexpr.write "x[0] = 'foo' f'{3}'"
                        xt.write ((((xast).xparse)).apply ((xexpr)))
                        xc.write (((xcompile)).apply ((xt)) ("") ("exec"))
                        bogusForceDataize.write (((xexec)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xx)) (0))) ("foo3"))
                xtest_compile_time_concat_errors.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("cannot mix bytes and nonbytes literals") ((((unsupported)).apply ("f'' b''") ("b'' f''"))))
                xtest_literal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a") ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (" ") (" "))
                xtest_unterminated_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: unterminated string") ((((unsupported)).apply ("f'{\"x'") ("f'{\"x}'") ("f'{(\"x'") ("f'{(\"x}'"))))
                xtest_mismatched_parens.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: closing parenthesis '}' does not match opening parenthesis '('") ((((unsupported)).apply ("f'{((}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: closing parenthesis ')' does not match opening parenthesis '['") ((((unsupported)).apply ("f'{a[4)}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: closing parenthesis ']' does not match opening parenthesis '('") ((((unsupported)).apply ("f'{a(4]}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: closing parenthesis '}' does not match opening parenthesis '['") ((((unsupported)).apply ("f'{a[4}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: closing parenthesis '}' does not match opening parenthesis '('") ((((unsupported)).apply ("f'{a(4}'"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ((("f'{".add ("(".mul 500)).add "}'")))
                xtest_double_braces.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{") ("a{"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{b") ("{b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{b") ("a{b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("}}") ("}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a}}") ("a}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("}}b") ("}b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a}}b") ("a}b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{}}") ("{}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{}}") ("a{}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{b}}") ("{b}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{}}c") ("{}c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{b}}") ("a{b}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{}}c") ("a{}c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{b}}c") ("{b}c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("a{{b}}c") ("a{b}c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{{10}") ("{10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("}}{10}") ("}10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("}}{{{10}") ("}{10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("}}a{{{10}") ("}a{10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10}{{") ("10{"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10}}}") ("10}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10}}}{{") ("10}{"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10}}}a{{}") ("10}a{}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"{{}}\"}") ("{{}}"))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xTypeError)) ("unhashable type") ((((unsupported)).apply ("f'{ {{}} }'"))))
                xtest_compile_time_concat.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write "def"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("abc## {x}ghi") ("abc## defghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("abc{x}ghi") ("abcdefghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("abc{x}ghi{x:4}") ("abcdefghidef "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}{x}") ("{x}def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x{x}") ("{xdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}{x}") ("{x}def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{x}}{x}") ("{{x}}def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{{x{x}") ("{{xdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x}}{x}") ("x}}def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}x}}") ("defx}}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}") ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}") ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}") ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}2") ("def2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1{x}2") ("1def2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1{x}") ("1def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}-{x}") ("def-def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (""))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: expecting '}'") ((((unsupported)).apply ("f'{3' f'}'"))))
                xtest_comments.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("#") ("hash"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"#\"}") ("#"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[\"#\"]}") ("hash"))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string expression part cannot include '#'") ((((unsupported)).apply ("f'{1#}'") ("f'{3(#)}'") ("f'{#}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: unmatched ')'") ((((unsupported)).apply ("f'{)#}'"))))
                xtest_many_expressions.write
                  [xself]
                    memory > xwidth
                    memory > xbuild_fstr
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        xbuild_fstr.write
                          [xn xextra]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((("f'".add ("{x} ".mul (xn))).add (xextra)).add "'")))
                        xx.write "X"
                        xwidth.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (250) (260))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((((xbuild_fstr)).apply ((xi)))))) ((((xx).add " ").mul (xi))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply (((((xbuild_fstr)).apply (255)).mul 256)))) ((((xx).add " ").mul (255.mul 256))))
                        xs.write (((xbuild_fstr)).apply (253) ("{x:{width}} "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xs)))) ((((xx).add " ").mul 254)))
                        xs.write ("f'{1}' 'x' 'y'".mul 1024)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xs)))) (("1xy".mul 1024)))
                xtest_format_specifier_expressions.write
                  [xself]
                    memory > xvalue
                    memory > xwidth
                    memory > xprecision
                    seq > @
                      seq
                        xwidth.write 10
                        xprecision.write 4
                        xvalue.write ((((xdecimal).xDecimal)).apply ("12.34567"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("result: {value:{width}.{precision}}") ("result:      12.35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("result: {value:{width!r}.{precision}}") ("result:      12.35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("result: {value:{width:0}.{precision:1}}") ("result:      12.35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("result: {value:{1}{0:0}.{precision:1}}") ("result:      12.35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("result: {value:{ 1}{ 0:0}.{ precision:1}}") ("result:      12.35"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10:#{1}0x}") ("       0xa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10:{\"#\"}1{0}{\"x\"}}") ("       0xa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{-10:-{\"#\"}1{0}x}") ("      -0xa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{-10:{\"-\"}#{1}0{\"x\"}}") ("      -0xa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{10:#{3 != {4:5} and width}x}") ("       0xa"))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: expecting '}'") ((((unsupported)).apply ("f'{\"s\"!r{\":10\"}}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("invalid syntax") ((((unsupported)).apply ("f'{4:{/5}}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: expressions nested too deeply") ((((unsupported)).apply ("f'result: {value:{width:{0}}.{precision:1}}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: invalid conversion character") ((((unsupported)).apply ("f'{\"s\"!{\"r\"}}'"))))
                xtest_side_effect_order.write
                  [xself]
                    memory > xx
                    memory > x__format__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xi)) (0))
                            x__format__.write
                              [xself xspec]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xi)) (1))
                                    (((unsupported)).apply ((((xstr)).apply (((xself).xi)))))
                        xx.write (((xX)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x} {x}") ("1 2"))
                xtest_missing_expression.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: empty expression not allowed") ((((unsupported)).apply ("f'{}'") ("f'{ }'f' {} '") ("f'{!r}'") ("f'{ !r}'") ("f'{10:{ }}'") ("f' { } '") ("f'''{tfrn}'''") ("f'{!x}'") ("f'{ !xr}'") ("f'{!x:}'") ("f'{!x:a}'") ("f'{ !xr:}'") ("f'{ !xr:a}'") ("f'{!}'") ("f'{:}'") ("f'{!'") ("f'{!s:'") ("f'{:'") ("f'{:x'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("invalid character in identifier") ((((unsupported)).apply ("f'''{xa0}'''") ("xa0"))))
                xtest_parens_in_expressions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3,}") ("(3,)"))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("invalid syntax") ((((unsupported)).apply ("f'{,}'") ("f'{,}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: unmatched ')'") ((((unsupported)).apply ("f'{3)+(4}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("EOL while scanning string literal") ((((unsupported)).apply ("f'{n}'"))))
                xtest_backslashes_in_string_part.write
                  [xself]
                    memory > xvalue
                    memory > xAMPERSAND
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("t") ("t"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("t") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("t") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}t") ("2t"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}t{3}") ("2t3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("t{3}") ("t3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("u0394") ("u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("u0394") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("u0394") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}u0394") ("2u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}u0394{3}") ("2u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("u0394{3}") ("u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("U00000394") ("u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("U00000394") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("U00000394") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}U00000394") ("2u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}U00000394{3}") ("2u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("U00000394{3}") ("u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{GREEK CAPITAL LETTER DELTA}") ("u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}N{GREEK CAPITAL LETTER DELTA}") ("2u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}N{GREEK CAPITAL LETTER DELTA}{3}") ("2u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{GREEK CAPITAL LETTER DELTA}{3}") ("u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("2N{GREEK CAPITAL LETTER DELTA}") ("2u0394"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("2N{GREEK CAPITAL LETTER DELTA}3") ("2u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{GREEK CAPITAL LETTER DELTA}3") ("u03943"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x20") (" "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x20") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x20") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}x20") ("2 "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2}x20{3}") ("2 3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x20{3}") (" 3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("2x20") ("2 "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("2x203") ("2 3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x203") (" 3"))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xvalue.write (((xeval)).apply ("f'{6*7}'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{6*7}") ((((unsupported)).apply)))
                        xAMPERSAND.write "spam"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{AMPERSAND}") ("&"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{AMPERSAND}") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_misformed_unicode_character_name.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ((((unsupported)).apply)) ((((unsupported)).apply ("f'N'") ("f'N{'") ("f'N{GREEK CAPITAL LETTER DELTA'") ("'N'") ("'N{'") ("'N{GREEK CAPITAL LETTER DELTA'"))))
                xtest_no_backslashes_in_expression_part.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string expression part cannot include a backslash") ((((unsupported)).apply ("f'{'a'}'") ("f'{t3}'") ("f'{}'") ("rf'{'a'}'") ("rf'{t3}'") ("rf'{}'") ("rf'{\"N{LEFT CURLY BRACKET}\"}'") ("f'{n}'"))))
                xtest_no_escapes_for_braces.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x7b1+1}}") ("{1+1}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x7b1+1") ("{1+1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("u007b1+1") ("{1+1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("N{LEFT CURLY BRACKET}1+1N{RIGHT CURLY BRACKET}") ("{1+1}"))
                xtest_newlines_in_expressions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0}") ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ("7"))
                xtest_lambda.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 5
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(lambda y:x*y)(\"8\")!r}") ("'88888'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(lambda y:x*y)(\"8\")!r:10}") ("'88888'   "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(lambda y:x*y)(\"8\"):10}") ("88888     "))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("unexpected EOF while parsing") ((((unsupported)).apply ("f'{lambda x:x}'"))))
                xtest_yield.write
                  [xself]
                    memory > xg
                    memory > xfn
                    seq > @
                      seq
                        xfn.write
                          [xy]
                            seq > @
                              unsupported
                        xg.write (((xfn)).apply (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg)))) (8))
                xtest_yield_send.write
                  [xself]
                    memory > xg
                    memory > xfn
                    memory > xthe_lambda
                    seq > @
                      seq
                        xfn.write
                          [xx]
                            seq > @
                              (((unsupported)).apply ("x:{yield (lambda i: x * i)}"))
                        xg.write (((xfn)).apply (10))
                        xthe_lambda.write (((xnext)).apply ((xg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xthe_lambda)).apply (4))) (40))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xg).xsend)).apply ("string"))) ("x:string"))
                xtest_expressions_with_triple_quoted_strings.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{'''x'''}") ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{'''eric's'''}") ("eric's"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"x\" \"\"\"eric\"s\"\"\" \"y\"}") ("xeric\"sy"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"x\" \"\"\"eric\"s\"\"\"}") ("xeric\"s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"\"\"eric\"s\"\"\" \"y\"}") ("eric\"sy"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"\"\"x\"\"\" \"\"\"eric\"s\"\"\" \"y\"}") ("xeric\"sy"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"\"\"x\"\"\" \"\"\"eric\"s\"\"\" \"\"\"y\"\"\"}") ("xeric\"sy"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{r\"\"\"x\"\"\" \"\"\"eric\"s\"\"\" \"\"\"y\"\"\"}") ("xeric\"sy"))
                xtest_multiple_vars.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write 98
                        xy.write "abc"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}{y}") ("98abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x}{y}") ("X98abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}X{y}") ("98Xabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}{y}X") ("98abcX"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x}Y{y}") ("X98Yabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x}{y}Y") ("X98abcY"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}X{y}Y") ("98XabcY"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x}Y{y}Z") ("X98YabcZ"))
                xtest_closure.write
                  [xself]
                    memory > xouter
                    seq > @
                      seq
                        xouter.write
                          [xx]
                            memory > xinner
                            seq > @
                              seq
                                xinner.write
                                  []
                                    seq > @
                                      (((unsupported)).apply ("x:{x}"))
                                (((unsupported)).apply ((xinner)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xouter)).apply ("987"))).apply)) ("x:987"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xouter)).apply (7))).apply)) ("x:7"))
                xtest_arguments.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xf
                    seq > @
                      seq
                        xy.write 2
                        xf.write
                          [xx xwidth]
                            seq > @
                              (((unsupported)).apply ("x={x*y:{width}}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("foo") (10))) ("x=foofoo    "))
                        xx.write "bar"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (10) (10))) ("x=        20"))
                xtest_locals.write
                  [xself]
                    memory > xvalue
                    seq > @
                      seq
                        xvalue.write 123
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("v:{value}") ("v:123"))
                xtest_missing_variable.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                        unsupported
                xtest_missing_format_spec.write
                  [xself]
                    memory > x__format__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__format__.write
                            [xself xspec]
                              seq > @
                                seq
                                  ((xspec).not).if
                                    (((unsupported)).apply ("*"))
                                  (((unsupported)).apply ((xspec)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{O():x}") ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{O()}") ("*"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{O():}") ("*"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3:}") ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3!s:}") ("3"))
                xtest_global.write
                  [xself]
                    memory > xa_local
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global}") ("g:global variable"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global!r}") ("g:'global variable'"))
                        xa_local.write "local variable"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global} l:{a_local}") ("g:global variable l:local variable"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global!r}") ("g:'global variable'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global} l:{a_local!r}") ("g:global variable l:'local variable'"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("module 'unittest' from") ("{unittest}"))
                xtest_shadowed_global.write
                  [xself]
                    memory > xa_global
                    memory > xa_local
                    seq > @
                      seq
                        xa_global.write "really a local"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global}") ("g:really a local"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global!r}") ("g:'really a local'"))
                        xa_local.write "local variable"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global} l:{a_local}") ("g:really a local l:local variable"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global!r}") ("g:'really a local'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("g:{a_global} l:{a_local!r}") ("g:really a local l:'local variable'"))
                xtest_call.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xx]
                            seq > @
                              (((unsupported)).apply (("x=".add (((xstr)).apply ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{foo(10)}") ("x=10"))
                xtest_nested_fstrings.write
                  [xself]
                    memory > xy
                    seq > @
                      seq
                        xy.write 5
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{f\"{0}\"*3}") ("000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{f\"{y}\"*3}") ("555"))
                xtest_invalid_string_prefixes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("unexpected EOF while parsing") ((((unsupported)).apply ("fu''") ("uf''") ("Fu''") ("fU''") ("Uf''") ("uF''") ("ufr''") ("urf''") ("fur''") ("fru''") ("rfu''") ("ruf''") ("FUR''") ("Fur''") ("fb''") ("fB''") ("Fb''") ("FB''") ("bf''") ("bF''") ("Bf''") ("BF''"))))
                xtest_leading_trailing_spaces.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{ 3}") ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{  3}") ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3 }") ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3  }") ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("expr={ {x: y for x, y in [(1, 2), ]}}") ("expr={1: 2}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("expr={ {x: y for x, y in [(1, 2), ]} }") ("expr={1: 2}"))
                xtest_not_equal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3!=4}") ("True"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3!=4:}") ("True"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3!=4!s}") ("True"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3!=4!s:.3}") ("Tru"))
                xtest_equal_equal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0==1}") ("false"))
                xtest_conversions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3.14:10.10}") ("      3.14"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3.14!s:10.10}") ("3.14      "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3.14!r:10.10}") ("3.14      "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3.14!a:10.10}") ("3.14      "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"a\"}") ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"a\"!r}") ("'a'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"a\"!a}") ("'a'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"a!r\"}") ("a!r"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3.14:!<10.10}") ("3.14!!!!!!"))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: invalid conversion character") ((((unsupported)).apply ("f'{3!g}'") ("f'{3!A}'") ("f'{3!3}'") ("f'{3!G}'") ("f'{3!!}'") ("f'{3!:}'") ("f'{3! s}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: expecting '}'") ((((unsupported)).apply ("f'{x!s{y}}'") ("f'{3!ss}'") ("f'{3!ss:}'") ("f'{3!ss:s}'"))))
                xtest_assignment.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("invalid syntax") ((((unsupported)).apply ("f'' = 3") ("f'{0}' = x") ("f'{x}' = x"))))
                xtest_del.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("invalid syntax") ((((unsupported)).apply ("del f''") ("del '' f''"))))
                xtest_mismatched_braces.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: single '}' is not allowed") ((((unsupported)).apply ("f'{{}'") ("f'{{}}}'") ("f'}'") ("f'x}'") ("f'x}x'") ("f'u007b}'") ("f'{3:}>10}'") ("f'{3:}}>10}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xSyntaxError)) ("f-string: expecting '}'") ((((unsupported)).apply ("f'{3:{{>10}'") ("f'{3'") ("f'{3!'") ("f'{3:'") ("f'{3!s'") ("f'{3!s:'") ("f'{3!s:3'") ("f'x{'") ("f'x{x'") ("f'{x'") ("f'{3:s'") ("f'{{{'") ("f'{{}}{'") ("f'{'"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"{\"}") ("{"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"}\"}") ("}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3:{\"}\"}>10}") ("}}}}}}}}}3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{2:{\"{\"}>10}") ("{{{{{{{{{2"))
                xtest_if_conditional.write
                  [xself]
                    memory > xtest_fstring
                    memory > xtest_concat_non_empty
                    memory > xtest_concat_empty
                    seq > @
                      seq
                        xtest_fstring.write
                          [xx xexpected]
                            memory > xflag
                            seq > @
                              seq
                                xflag.write 0
                                "{x}".if
                                  xflag.write 1
                                  xflag.write 2
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xflag)) ((xexpected)))
                        xtest_concat_empty.write
                          [xx xexpected]
                            memory > xflag
                            seq > @
                              seq
                                xflag.write 0
                                "{x}".if
                                  xflag.write 1
                                  xflag.write 2
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xflag)) ((xexpected)))
                        xtest_concat_non_empty.write
                          [xx xexpected]
                            memory > xflag
                            seq > @
                              seq
                                xflag.write 0
                                " {x}".if
                                  xflag.write 1
                                  xflag.write 2
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xflag)) ((xexpected)))
                        bogusForceDataize.write (((xtest_fstring)).apply ("") (2))
                        bogusForceDataize.write (((xtest_fstring)).apply (" ") (1))
                        bogusForceDataize.write (((xtest_concat_empty)).apply ("") (2))
                        bogusForceDataize.write (((xtest_concat_empty)).apply (" ") (1))
                        bogusForceDataize.write (((xtest_concat_non_empty)).apply ("") (1))
                        bogusForceDataize.write (((xtest_concat_non_empty)).apply (" ") (1))
                xtest_empty_format_specifier.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write "test"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x}") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x:}") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x!s:}") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x!r:}") ("'test'"))
                xtest_str_format_differences.write
                  [xself]
                    memory > xd
                    memory > xa
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("a") ("string") (0) ("integer"))
                        xa.write 0
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[0]}") ("integer"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[\"a\"]}") ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[a]}") ("integer"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("{d[a]}".xformat)) ((xd)))) ("string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("{d[0]}".xformat)) ((xd)))) ("integer"))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xTypeError)) ("unsupported") ((((unsupported)).apply ("f'{(lambda: 0):x}'") ("f'{(0,):x}'"))))
                        bogusForceDataize.write ((((xself).xassertAllRaise)).apply ((xValueError)) ("Unknown format code") ((((unsupported)).apply ("f'{1000:j}'") ("f'{1000:j}'"))))
                xtest_loop.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("i:{i}") (("i:".add (((xstr)).apply ((xi))))))
                xtest_dict.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("\"") ("dquote") ("'") ("squote") ("foo") ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[\"'\"]}") ("squote"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d['\"']}") ("dquote"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d[\"foo\"]}") ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{d['foo']}") ("bar"))
                xtest_backslash_char.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((((unsupported)).apply)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((((unsupported)).apply)))) (""))
                xtest_debug_conversion.write
                  [xself]
                    memory > xpi
                    memory > xtenπ
                    memory > xf
                    memory > xx
                    memory > x__format__
                    memory > x__repr__
                    seq > @
                      seq
                        xx.write "A string"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=}") (("x=".add (((xrepr)).apply ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x =}") (("x =".add (((xrepr)).apply ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!s}") (("x=".add (((xstr)).apply ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!r}") (("x=".add (((xrepr)).apply ((xx))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!a}") (("x=".add (((xascii)).apply ((xx))))))
                        xx.write 2.71828
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=:.2f}") (("x=".add (((xformat)).apply ((xx)) (".2f")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=:}") (("x=".add (((xformat)).apply ((xx)) ("")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!r:^20}") (("x=".add (((xformat)).apply ((((xrepr)).apply ((xx)))) ("^20")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!s:^20}") (("x=".add (((xformat)).apply ((((xstr)).apply ((xx)))) ("^20")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x=!a:^20}") (("x=".add (((xformat)).apply ((((xascii)).apply ((xx)))) ("^20")))))
                        xx.write 9
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{3*x+15=}") ("3*x+15=42"))
                        xtenπ.write 31.4
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{tenπ=:.2f}") ("tenπ=31.40"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"Σ\"=}") ("\"Σ\"='Σ'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{f\"{3.1415=:.1f}\":*^20}") ("*****3.1415=3.1*****"))
                        xpi.write "π"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("alpha α {pi=} ω omega") ("alpha α pi='π' ω omega"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ("n3n=3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0==1}") ("false"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0!=1}") ("True"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0<=1}") ("True"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{0>=1}") ("false"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(x:=\"5\")}") ("5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(x:=5)}") ("5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{\"=\"}") ("="))
                        xx.write 20
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x:=10}") ("        20"))
                        xf.write
                          [xa]
                            memory > xx
                            memory > xoldx
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xoldx.write (xx)
                                xx.write (xa)
                                (((unsupported)).apply ((xoldx)))
                        xx.write 0
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{f(a=\"3=\")}") ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("3="))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{f(a=4)}") ("3="))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (4))
                        (((unsupported)).apply)
                          seq
                            x__format__.write
                              [xself xs]
                                seq > @
                                  (((unsupported)).apply ("FORMAT-{s}"))
                            x__repr__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("REPR"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=}") ("C()=REPR"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=!r}") ("C()=REPR"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=:}") ("C()=FORMAT-"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=: }") ("C()=FORMAT- "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=:x}") ("C()=FORMAT-x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{C()=!r:*^20}") ("C()=********REPR********"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("f'{C=]'"))
                        xx.write "foo"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x=}Y") ((("Xx=".add (((xrepr)).apply ((xx)))).add "Y")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x  =}Y") ((("Xx  =".add (((xrepr)).apply ((xx)))).add "Y")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x=  }Y") ((("Xx=  ".add (((xrepr)).apply ((xx)))).add "Y")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("X{x  =  }Y") ((("Xx  =  ".add (((xrepr)).apply ((xx)))).add "Y")))
                xtest_walrus.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write 20
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{x:=10}") ("        20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{(x:=10)}") ("10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (10))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)