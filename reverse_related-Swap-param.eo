memory > xAttributeError
memory > xValueError
memory > xstr
memory > xexceptions
memory > xtype
memory > xx
memory > xsuper
memory > xhash
memory > xForeignObjectRel
memory > xManyToOneRel
memory > xbool
memory > xNotImplemented
memory > xFieldCacheMixin
memory > xmake_hashable
memory > xgetattr
memory > xisinstance
memory > xlen
[] > reverse_related
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_lookup
        memory > xget_extra_restriction
        memory > xget_internal_type
        memory > xis_relation
        memory > xmany_to_one
        memory > xget_path_info
        memory > xset_field_name
        memory > xempty_strings_allowed
        memory > x__getstate__
        memory > xeditable
        memory > xget_accessor_name
        memory > x__init__
        memory > xconcrete
        memory > xauto_created
        memory > xpath_infos
        memory > x__eq__
        memory > x__repr__
        memory > xone_to_one
        memory > xget_related_field
        memory > xtarget_field
        memory > xremote_field
        memory > xget_cache_name
        memory > xis_hidden
        memory > xmany_to_many
        memory > xone_to_many
        memory > xhidden
        memory > xdb_type
        memory > xget_joining_columns
        memory > xget_choices
        memory > x__hash__
        memory > xname
        memory > xrelated_model
        memory > xidentity
        memory > xnull
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
            seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xFieldCacheMixin)))
              seq
                (((unsupported)).apply)
                xauto_created.write TRUE
                xconcrete.write FALSE
                xeditable.write FALSE
                xis_relation.write TRUE
                xnull.write TRUE
                xempty_strings_allowed.write FALSE
                x__init__.write
                  [xself xfield xto xrelated_name xrelated_query_name xlimit_choices_to xparent_link xon_delete]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfield)) ((xfield)))
                        (((unsupported)).apply (((xself).xmodel)) ((xto)))
                        (((unsupported)).apply (((xself).xrelated_name)) ((xrelated_name)))
                        (((unsupported)).apply (((xself).xrelated_query_name)) ((xrelated_query_name)))
                        (((unsupported)).apply (((xself).xlimit_choices_to)) (((((unsupported)).apply ((xlimit_choices_to)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) (xlimit_choices_to))))
                        (((unsupported)).apply (((xself).xparent_link)) ((xparent_link)))
                        (((unsupported)).apply (((xself).xon_delete)) ((xon_delete)))
                        (((unsupported)).apply (((xself).xsymmetrical)) (FALSE))
                        (((unsupported)).apply (((xself).xmultiple)) (TRUE))
                xhidden.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xis_hidden)).apply)))
                xname.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xfield).xrelated_query_name)).apply)))
                xremote_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfield)))
                xtarget_field.write
                  [xself]
                    memory > xtarget_fields
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtarget_fields.write ((((unsupported)).apply (((xself).xpath_infos)) ((1.neg))).xtarget_fields)
                        ((((xlen)).apply ((xtarget_fields))).greater 1).if
                          (((unsupported)).apply (((((xexceptions).xFieldError)).apply ("Can't use target_field for multicolumn relations."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtarget_fields)) (0))))
                xrelated_model.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((((xself).xfield).xmodel).not).if
                          (((unsupported)).apply ((((xAttributeError)).apply ("This property can't be accessed before self.field.contribute_to_class has been called."))))
                        (((unsupported)).apply ((((xself).xfield).xmodel)))
                xmany_to_many.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xfield).xmany_to_many)))
                xmany_to_one.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xfield).xone_to_many)))
                xone_to_many.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xfield).xmany_to_one)))
                xone_to_one.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xfield).xone_to_one)))
                xget_lookup.write
                  [xself xlookup_name]
                    seq > @
                      (((unsupported)).apply ((((((xself).xfield).xget_lookup)).apply ((xlookup_name)))))
                xget_internal_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xfield).xget_internal_type)).apply)))
                xdb_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xfield).xdb_type)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s.%s>".mod (((unsupported)).apply (((((xtype)).apply ((xself))).x__name__)) (((((xself).xrelated_model).x_meta).xapp_label)) (((((xself).xrelated_model).x_meta).xmodel_name))))))
                xidentity.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfield)) (((xself).xmodel)) (((xself).xrelated_name)) (((xself).xrelated_query_name)) ((((xmake_hashable)).apply (((xself).xlimit_choices_to)))) (((xself).xparent_link)) (((xself).xon_delete)) (((xself).xsymmetrical)) (((xself).xmultiple)))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xother)) (((xself).x__class__))).not).if
                          (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply ((((xself).xidentity).eq ((xother).xidentity))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xidentity)))))
                x__getstate__.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        xstate.write (((((xself).x__dict__).xcopy)).apply)
                        bogusForceDataize.write ((((xstate).xpop)).apply ("path_infos") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xstate)))
                xget_choices.write
                  [xself xinclude_blank xblank_choice xlimit_choices_to xordering]
                    memory > xqs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xlimit_choices_to.write ((xlimit_choices_to).or ((xself).xlimit_choices_to))
                        xqs.write ((((((xself).xrelated_model).x_default_manager).xcomplex_filter)).apply ((xlimit_choices_to)))
                        (xordering).if
                          xqs.write ((((xqs).xorder_by)).apply ((((unsupported)).apply ((xordering)))))
                        (((unsupported)).apply (((xinclude_blank).if (xblank_choice) ((((unsupported)).apply).add (((unsupported)).apply ((((unsupported)).apply (((xx).xpk)) ((((xstr)).apply ((xx)))))) ((xx)) ((xqs)))))))
                xis_hidden.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xbool)).apply (((xself).xrelated_name))).and ((((unsupported)).apply (((xself).xrelated_name)) ((1.neg))).eq "+"))))
                xget_joining_columns.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xfield).xget_reverse_joining_columns)).apply)))
                xget_extra_restriction.write
                  [xself xalias xrelated_alias]
                    seq > @
                      (((unsupported)).apply ((((((xself).xfield).xget_extra_restriction)).apply ((xrelated_alias)) ((xalias)))))
                xset_field_name.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfield_name)) ("None: is there a None literal in the EO language?"))
                xget_accessor_name.write
                  [xself xmodel]
                    memory > xopts
                    seq > @
                      (((unsupported)).apply)
                        xopts.write ((xmodel).if ((xmodel).x_meta) (((xself).xrelated_model).x_meta))
                        xmodel.write ((xmodel).or ((xself).xrelated_model))
                        ((xself).xmultiple).if
                          (((xself).xsymmetrical).and ((xmodel).eq ((xself).xmodel))).if
                            (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((xself).xrelated_name).if
                          (((unsupported)).apply (((xself).xrelated_name)))
                        (((unsupported)).apply ((((xself).xmultiple).if (((xopts).xmodel_name).add "_set") "")))
                xget_path_info.write
                  [xself xfiltered_relation]
                    seq > @
                      (((unsupported)).apply)
                        (xfiltered_relation).if
                          (((unsupported)).apply ((((((xself).xfield).xget_reverse_path_info)).apply ((xfiltered_relation)))))
                          (((unsupported)).apply ((((xself).xfield).xreverse_path_infos)))
                xpath_infos.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget_path_info)).apply)))
                xget_cache_name.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget_accessor_name)).apply)))
            (((unsupported)).apply ((xForeignObjectRel)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfield xto xfield_name xrelated_name xrelated_query_name xlimit_choices_to xparent_link xon_delete]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfield)) ((xto)) ((xrelated_name)) ((xrelated_query_name)) ((xlimit_choices_to)) ((xparent_link)) ((xon_delete)))
                        (((unsupported)).apply (((xself).xfield_name)) ((xfield_name)))
                x__getstate__.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        xstate.write ((((((xsuper)).apply).x__getstate__)).apply)
                        bogusForceDataize.write ((((xstate).xpop)).apply ("related_model") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xstate)))
                xidentity.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xsuper)).apply).xidentity).add (((unsupported)).apply (((xself).xfield_name))))))
                xget_related_field.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfield.write ((((((xself).xmodel).x_meta).xget_field)).apply (((xself).xfield_name)))
                        (((xfield).xconcrete).not).if
                          (((unsupported)).apply (((((xexceptions).xFieldDoesNotExist)).apply (("No related field named '%s'".mod ((xself).xfield_name))))))
                        (((unsupported)).apply ((xfield)))
                xset_field_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xfield_name)) ((((xself).xfield_name).or (((((xself).xmodel).x_meta).xpk).xname))))
            (((unsupported)).apply ((xManyToOneRel)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfield xto xfield_name xrelated_name xrelated_query_name xlimit_choices_to xparent_link xon_delete]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfield)) ((xto)) ((xfield_name)) ((xrelated_name)) ((xrelated_query_name)) ((xlimit_choices_to)) ((xparent_link)) ((xon_delete)))
                        (((unsupported)).apply (((xself).xmultiple)) (FALSE))
            (((unsupported)).apply ((xForeignObjectRel)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfield xto xrelated_name xrelated_query_name xlimit_choices_to xsymmetrical xthrough xthrough_fields xdb_constraint]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfield)) ((xto)) ((xrelated_name)) ((xrelated_query_name)) ((xlimit_choices_to)))
                        ((xthrough).and ((xdb_constraint).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Can't supply a through model and db_constraint=False"))))
                        (((unsupported)).apply (((xself).xthrough)) ((xthrough)))
                        ((xthrough_fields).and ((xthrough).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Cannot specify through_fields without a through model"))))
                        (((unsupported)).apply (((xself).xthrough_fields)) ((xthrough_fields)))
                        (((unsupported)).apply (((xself).xsymmetrical)) ((xsymmetrical)))
                        (((unsupported)).apply (((xself).xdb_constraint)) ((xdb_constraint)))
                xidentity.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xsuper)).apply).xidentity).add (((unsupported)).apply (((xself).xthrough)) ((((xmake_hashable)).apply (((xself).xthrough_fields)))) (((xself).xdb_constraint))))))
                xget_related_field.write
                  [xself]
                    memory > xfield
                    memory > xopts
                    memory > xrel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xopts.write (((xself).xthrough).x_meta)
                        ((xself).xthrough_fields).if
                          xfield.write ((((xopts).xget_field)).apply ((((unsupported)).apply (((xself).xthrough_fields)) (0))))
                          (((unsupported)).apply ((xfield)) (((xopts).xfields)))
                            seq
                              xrel.write (((xgetattr)).apply ((xfield)) ("remote_field") ("None: is there a None literal in the EO language?"))
                              ((xrel).and (((xrel).xmodel).eq ((xself).xmodel))).if
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xfield).xforeign_related_fields)) (0))))