memory > xlist
memory > xROUND_HALF_UP
memory > xKeyError
memory > xreversed
memory > xtimesince
memory > xContext
memory > xstrip_tags
memory > xtypes
memory > xchildren
memory > xround
memory > xconditional_escape
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xpformat
memory > xenumerate
memory > xValueError
memory > xformats
memory > xavoid_wrapping
memory > xquote
memory > xsign
memory > xstr
memory > xSafeData
memory > xngettext
memory > xTruncator
memory > xunwrap
memory > xescapejs
memory > xpart
memory > xIndexError
memory > xStopIteration
memory > xInvalidOperation
memory > xiri_to_uri
memory > xgettext
memory > xrepr
memory > xint
memory > xre
memory > xyes
memory > xdigit
memory > xException
memory > xplural_suffix
memory > xnormalize_newlines
memory > xlinecontinues
memory > xOverflowError
memory > xx
memory > xitemgetter
memory > xi
memory > xmaybe
memory > xm
memory > xtuple
memory > xmark_safe
memory > xsorted
memory > xfloat
memory > xescape
memory > xtime_format
memory > xargs
memory > xobj
memory > xexponent
memory > xslice
memory > xitem
memory > xgetattr
memory > xv
memory > xtimeuntil
memory > xiter
memory > xe
memory > xformat
memory > xDecimal
memory > xwrap
memory > xnext
memory > xphone2numeric
memory > xLibrary
memory > xsingular_suffix
memory > xVARIABLE_ATTRIBUTE_SEPARATOR
memory > xkwargs
memory > xabs
memory > xisinstance
memory > xline
memory > xlen
memory > xTypeError
memory > xno
[] > defaultfilters
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtimeuntil_filter
        memory > xjoin
        memory > xsafeseq
        memory > xrandom_module
        memory > xupper
        memory > x_urlize
        memory > xstriptags
        memory > xtruncatewords_html
        memory > xslugify
        memory > xlower
        memory > xtruncatechars_html
        memory > xlinecontinuesbr
        memory > xcut
        memory > xurlize
        memory > xcenter
        memory > xlength
        memory > xunordered_list
        memory > xsafe
        memory > x_slugify
        memory > xyesno
        memory > xdefault_if_none
        memory > xlinenumbers
        memory > xlength_is
        memory > xdictsort
        memory > xurlizetrunc
        memory > x_json_script
        memory > xurlencode
        memory > xescape_filter
        memory > xpluralize
        memory > xtruncatewords
        memory > xfloatformat
        memory > xwordwrap
        memory > xdictsortreversed
        memory > xdefault
        memory > x_property_resolver
        memory > xforce_escape
        memory > xdate
        memory > xrandom
        memory > xfilesizeformat
        memory > xtimesince_filter
        memory > xmake_list
        memory > xlinecontinues_filter
        memory > xget_digit
        memory > xregister
        memory > xtruncatechars
        memory > xljust
        memory > xlast
        memory > xtime
        memory > xrjust
        memory > xphone2numeric_filter
        memory > xtitle
        memory > xstringfilter
        memory > xescapejs_filter
        memory > xjson_script
        memory > xcapfirst
        memory > xadd
        memory > xfirst
        memory > xstringformat
        memory > xaddslashes
        memory > xdivisibleby
        memory > xiriencode
        memory > xwordcount
        memory > xslice_filter
        memory > xpprint
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xregister.write (((xLibrary)).apply)
            xstringfilter.write
              [xfunc]
                memory > x_dec
                seq > @
                  seq
                    (((unsupported)).apply)
                    x_dec.write
                      [xfirst]
                        memory > xresult
                        seq > @
                          (((unsupported)).apply)
                            xfirst.write (((xstr)).apply ((xfirst)))
                            xresult.write (((xfunc)).apply ((xfirst)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                            ((((xisinstance)).apply ((xfirst)) ((xSafeData))).and (((xgetattr)).apply ((((xunwrap)).apply ((xfunc)))) ("is_safe") (FALSE))).if
                              xresult.write (((xmark_safe)).apply ((xresult)))
                            (((unsupported)).apply ((xresult)))
                    (((unsupported)).apply ((x_dec)))
            xaddslashes.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((((((((xvalue).xreplace)).apply ("\\") ("\\\\")).xreplace)).apply ("\"") ("\\\"")).xreplace)).apply ("'") ("\\'"))))
            xcapfirst.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((xvalue).and (((((((unsupported)).apply ((xvalue)) (0)).xupper)).apply).add (((unsupported)).apply ((xvalue)) ((((unsupported)).apply (1))))))))
            xescapejs_filter.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xescapejs)).apply ((xvalue)))))
            xjson_script.write
              [xvalue xelement_id]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((x_json_script)).apply ((xvalue)) ((xelement_id)))))
            xfloatformat.write
              [xtext xarg]
                memory > xd
                memory > xnumber
                memory > xinput_val
                memory > xrounded_d
                memory > xprec
                memory > xp
                memory > xunits
                memory > xforce_grouping
                memory > xdigits
                memory > xlast_char
                memory > xm
                memory > xexp
                memory > xtupl
                memory > xuse_l10n
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xforce_grouping.write FALSE
                    xuse_l10n.write TRUE
                    (((xisinstance)).apply ((xarg)) ((xstr))).if
                      seq
                        xlast_char.write (((unsupported)).apply ((xarg)) ((1.neg)))
                        (((unsupported)).apply ((((unsupported)).apply ((xarg)) ((((unsupported)).apply ((2.neg)))))) ((((unsupported)).apply ("gu") ("ug")))).if
                          seq
                            xforce_grouping.write TRUE
                            xuse_l10n.write FALSE
                            xarg.write ((((unsupported)).apply ((xarg)) ((((unsupported)).apply ((2.neg))))).or (1.neg))
                          ((xlast_char).eq "g").if
                            seq
                              xforce_grouping.write TRUE
                              xarg.write ((((unsupported)).apply ((xarg)) ((((unsupported)).apply ((1.neg))))).or (1.neg))
                            ((xlast_char).eq "u").if
                              seq
                                xuse_l10n.write FALSE
                                xarg.write ((((unsupported)).apply ((xarg)) ((((unsupported)).apply ((1.neg))))).or (1.neg))
                    (((unsupported)).apply ((xInvalidOperation)))
                      seq
                        xinput_val.write (((xrepr)).apply ((xtext)))
                        xd.write (((xDecimal)).apply ((xinput_val)))
                      (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xInvalidOperation)) ((xTypeError)))))
                        xd.write (((xDecimal)).apply ((((xstr)).apply ((((xfloat)).apply ((xtext)))))))
                        (((unsupported)).apply (""))
                    (((unsupported)).apply ((xValueError)))
                      xp.write (((xint)).apply ((xarg)))
                      (((unsupported)).apply ((xinput_val)))
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)) ((xInvalidOperation)))))
                      xm.write ((((xint)).apply ((xd))).sub (xd))
                      (((unsupported)).apply ((xinput_val)))
                    (((xm).not).and ((xp).less 0)).if
                      (((unsupported)).apply ((((xmark_safe)).apply ((((unsupported)).apply (((xformats).xnumber_format)) (("%d".mod (((xint)).apply ((xd))))) (0) ((xuse_l10n)) ((xforce_grouping)))))))
                    xexp.write ((((((xDecimal)).apply (1)).xscaleb)).apply (((((xabs)).apply ((xp))).neg)))
                    xtupl.write ((((xd).xas_tuple)).apply)
                    xunits.write (((xlen)).apply ((((unsupported)).apply ((xtupl)) (1))))
                    (((unsupported)).apply ((xunits)) (((xm).if ((((unsupported)).apply ((xtupl)) (2)).neg) (((unsupported)).apply ((xtupl)) (2)))))
                    xprec.write (((((xabs)).apply ((xp))).add (xunits)).add 1)
                    xrounded_d.write ((((xd).xquantize)).apply ((xexp)) ((xROUND_HALF_UP)) ((((unsupported)).apply ((xContext)) ((xprec)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xsign)) ((xdigits)) ((xexponent)))) (((((xrounded_d).xas_tuple)).apply)))
                    xdigits.write (((unsupported)).apply ((((xstr)).apply ((xdigit)))) ((xdigit)) ((((xreversed)).apply ((xdigits)))))
                    while.
                      ((((xlen)).apply ((xdigits))).leq (((xabs)).apply ((xexponent))))
                      [unused]
                        seq > @
                          bogusForceDataize.write ((((xdigits).xappend)).apply ("0"))
                    bogusForceDataize.write ((((xdigits).xinsert)).apply (((xexponent).neg)) ("."))
                    ((xsign).and (xrounded_d)).if
                      bogusForceDataize.write ((((xdigits).xappend)).apply ("-"))
                    xnumber.write ((("".xjoin)).apply ((((xreversed)).apply ((xdigits)))))
                    (((unsupported)).apply ((((xmark_safe)).apply ((((unsupported)).apply (((xformats).xnumber_format)) ((xnumber)) ((((xabs)).apply ((xp)))) ((xuse_l10n)) ((xforce_grouping)))))))
            xiriencode.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xiri_to_uri)).apply ((xvalue)))))
            xlinenumbers.write
              [xvalue xautoescape]
                memory > xwidth
                memory > xlines
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xlines.write ((((xvalue).xsplit)).apply ("n"))
                    xwidth.write (((xstr)).apply ((((xlen)).apply ((((xstr)).apply ((((xlen)).apply ((xlines)))))))))
                    (((xautoescape).not).or (((xisinstance)).apply ((xvalue)) ((xSafeData)))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xline)))) ((((xenumerate)).apply ((xlines)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlines)) ((xi)))) (((("%0".add (xwidth)).add "d. %s").mod (((unsupported)).apply (((xi).add 1)) ((xline))))))
                      (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xline)))) ((((xenumerate)).apply ((xlines)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlines)) ((xi)))) (((("%0".add (xwidth)).add "d. %s").mod (((unsupported)).apply (((xi).add 1)) ((((xescape)).apply ((xline))))))))
                    (((unsupported)).apply ((((xmark_safe)).apply (((("n".xjoin)).apply ((xlines)))))))
            xlower.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xvalue).xlower)).apply)))
            xmake_list.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xlist)).apply ((xvalue)))))
            xslugify.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((x_slugify)).apply ((xvalue)))))
            xstringformat.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xvalue)) ((xtuple))).if
                      xvalue.write (((xstr)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      (((unsupported)).apply ((("%".add (((xstr)).apply ((xarg)))).mod (xvalue))))
                      (((unsupported)).apply (""))
            xtitle.write
              [xvalue]
                memory > xt
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xt.write ((((xre).xsub)).apply ("([a-z])'([A-Z])") ((((unsupported)).apply (((((((unsupported)).apply ((xm)) (0)).xlower)).apply)))) (((((xvalue).xtitle)).apply)))
                    (((unsupported)).apply (((((xre).xsub)).apply ("d([A-Z])") ((((unsupported)).apply (((((((unsupported)).apply ((xm)) (0)).xlower)).apply)))) ((xt)))))
            xtruncatechars.write
              [xvalue xarg]
                memory > xlength
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xValueError)))
                      xlength.write (((xint)).apply ((xarg)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply (((((((xTruncator)).apply ((xvalue))).xchars)).apply ((xlength)))))
            xtruncatechars_html.write
              [xvalue xarg]
                memory > xlength
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      xlength.write (((xint)).apply ((xarg)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply (((((xTruncator)).apply ((xvalue))).xchars)) ((xlength)) (TRUE))))
            xtruncatewords.write
              [xvalue xarg]
                memory > xlength
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      xlength.write (((xint)).apply ((xarg)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply (((((xTruncator)).apply ((xvalue))).xwords)) ((xlength)) (" …"))))
            xtruncatewords_html.write
              [xvalue xarg]
                memory > xlength
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      xlength.write (((xint)).apply ((xarg)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply (((((xTruncator)).apply ((xvalue))).xwords)) ((xlength)) (TRUE) (" …"))))
            xupper.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xvalue).xupper)).apply)))
            xurlencode.write
              [xvalue xsafe]
                memory > xkwargs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xkwargs.write (((unsupported)).apply)
                    (((unsupported)).apply ((xsafe)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("safe"))) ((xsafe)))
                    (((unsupported)).apply ((((xquote)).apply ((xvalue)) ((((unsupported)).apply ((xkwargs)))))))
            xurlize.write
              [xvalue xautoescape]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xmark_safe)).apply ((((unsupported)).apply ((x_urlize)) ((xvalue)) (TRUE) ((xautoescape)))))))
            xurlizetrunc.write
              [xvalue xlimit xautoescape]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xmark_safe)).apply ((((unsupported)).apply ((x_urlize)) ((xvalue)) ((((xint)).apply ((xlimit)))) (TRUE) ((xautoescape)))))))
            xwordcount.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xlen)).apply (((((xvalue).xsplit)).apply)))))
            xwordwrap.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xwrap)).apply ((xvalue)) ((((xint)).apply ((xarg)))))))
            xljust.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xvalue).xljust)).apply ((((xint)).apply ((xarg)))))))
            xrjust.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xvalue).xrjust)).apply ((((xint)).apply ((xarg)))))))
            xcenter.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xvalue).xcenter)).apply ((((xint)).apply ((xarg)))))))
            xcut.write
              [xvalue xarg]
                memory > xsafe
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xsafe.write (((xisinstance)).apply ((xvalue)) ((xSafeData)))
                    xvalue.write ((((xvalue).xreplace)).apply ((xarg)) (""))
                    ((xsafe).and ((xarg).neq ";")).if
                      (((unsupported)).apply ((((xmark_safe)).apply ((xvalue)))))
                    (((unsupported)).apply ((xvalue)))
            xescape_filter.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xconditional_escape)).apply ((xvalue)))))
            xforce_escape.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xescape)).apply ((xvalue)))))
            xlinecontinues_filter.write
              [xvalue xautoescape]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xautoescape.write ((xautoescape).and ((((xisinstance)).apply ((xvalue)) ((xSafeData))).not))
                    (((unsupported)).apply ((((xmark_safe)).apply ((((xlinecontinues)).apply ((xvalue)) ((xautoescape)))))))
            xlinecontinuesbr.write
              [xvalue xautoescape]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xautoescape.write ((xautoescape).and ((((xisinstance)).apply ((xvalue)) ((xSafeData))).not))
                    xvalue.write (((xnormalize_newlines)).apply ((xvalue)))
                    (xautoescape).if
                      xvalue.write (((xescape)).apply ((xvalue)))
                    (((unsupported)).apply ((((xmark_safe)).apply (((((xvalue).xreplace)).apply ("n") ("<br>"))))))
            xsafe.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xmark_safe)).apply ((xvalue)))))
            xsafeseq.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((((xmark_safe)).apply ((xobj)))) ((xobj)) ((xvalue)))))
            xstriptags.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xstrip_tags)).apply ((xvalue)))))
            x_property_resolver.write
              [xarg]
                memory > xresolve
                memory > xparts
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      bogusForceDataize.write (((xfloat)).apply ((xarg)))
                      seq
                        ((((unsupported)).apply (((xVARIABLE_ATTRIBUTE_SEPARATOR).add "_")) ((xarg))).or ((((unsupported)).apply ((xarg)) (0)).eq "_")).if
                          (((unsupported)).apply ((((xAttributeError)).apply ("Access to private variables is forbidden."))))
                        xparts.write ((((xarg).xsplit)).apply ((xVARIABLE_ATTRIBUTE_SEPARATOR)))
                        xresolve.write
                          [xvalue]
                            seq > @
                              seq
                                (((unsupported)).apply ((xpart)) ((xparts)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xIndexError)) ((xKeyError)) ((xTypeError)) ((xValueError)))))
                                    xvalue.write (((unsupported)).apply ((xvalue)) ((xpart)))
                                    xvalue.write (((xgetattr)).apply ((xvalue)) ((xpart)))
                                (((unsupported)).apply ((xvalue)))
                        (((unsupported)).apply ((xresolve)))
                      (((unsupported)).apply ((((xitemgetter)).apply ((xarg)))))
            xdictsort.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xTypeError)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xsorted)) ((xvalue)) ((((x_property_resolver)).apply ((xarg)))))))
                      (((unsupported)).apply (""))
            xdictsortreversed.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xTypeError)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xsorted)) ((xvalue)) ((((x_property_resolver)).apply ((xarg)))) (TRUE))))
                      (((unsupported)).apply (""))
            xfirst.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xIndexError)))
                      (((unsupported)).apply ((((unsupported)).apply ((xvalue)) (0))))
                      (((unsupported)).apply (""))
            xjoin.write
              [xvalue xarg xautoescape]
                memory > xdata
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xTypeError)))
                      seq
                        (xautoescape).if
                          xvalue.write (((unsupported)).apply ((((xconditional_escape)).apply ((xv)))) ((xv)) ((xvalue)))
                        xdata.write ((((((xconditional_escape)).apply ((xarg))).xjoin)).apply ((xvalue)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((xmark_safe)).apply ((xdata)))))
            xlast.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xIndexError)))
                      (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((1.neg)))))
                      (((unsupported)).apply (""))
            xlength.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      (((unsupported)).apply ((((xlen)).apply ((xvalue)))))
                      (((unsupported)).apply (0))
            xlength_is.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      (((unsupported)).apply (((((xlen)).apply ((xvalue))).eq (((xint)).apply ((xarg))))))
                      (((unsupported)).apply (""))
            xrandom.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xrandom_module).xchoice)).apply ((xvalue)))))
            xslice_filter.write
              [xvalue xarg]
                memory > xbits
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      seq
                        xbits.write (((unsupported)).apply)
                        (((unsupported)).apply ((xx)) (((((((xstr)).apply ((xarg))).xsplit)).apply (":"))))
                          ((xx).not).if
                            bogusForceDataize.write ((((xbits).xappend)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xbits).xappend)).apply ((((xint)).apply ((xx)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((((xslice)).apply ((((unsupported)).apply ((xbits)))))))))
                      (((unsupported)).apply ((xvalue)))
            xunordered_list.write
              [xvalue xautoescape]
                memory > xwalk_items
                memory > xlist_formatter
                memory > xescaper
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (xautoescape).if
                      xescaper.write (xconditional_escape)
                      xescaper.write
                        [xx]
                          seq > @
                            (((unsupported)).apply ((xx)))
                    xwalk_items.write
                      [xitem_list]
                        memory > xitem_iterator
                        memory > xnext_item
                        memory > xitem
                        seq > @
                          seq
                            xitem_iterator.write (((xiter)).apply ((xitem_list)))
                            (((unsupported)).apply ((xStopIteration)))
                              seq
                                xitem.write (((xnext)).apply ((xitem_iterator)))
                                while.
                                  TRUE
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xStopIteration)))
                                          xnext_item.write (((xnext)).apply ((xitem_iterator)))
                                          seq
                                            (((unsupported)).apply ((((unsupported)).apply ((xitem)) ("None: is there a None literal in the EO language?"))))
                                            (((unsupported)).apply)
                                        (((xisinstance)).apply ((xnext_item)) ((((unsupported)).apply ((xlist)) ((xtuple)) (((xtypes).xGeneratorType))))).if
                                          (((unsupported)).apply ((xTypeError)))
                                            bogusForceDataize.write (((xiter)).apply ((xnext_item)))
                                            seq
                                              (((unsupported)).apply ((((unsupported)).apply ((xitem)) ((xnext_item)))))
                                              xitem.write (((xnext)).apply ((xitem_iterator)))
                                              (((unsupported)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xitem)) ("None: is there a None literal in the EO language?"))))
                                        xitem.write (xnext_item)
                    xlist_formatter.write
                      [xitem_list xtabs]
                        memory > xoutput
                        memory > xsublist
                        memory > xindent
                        seq > @
                          (((unsupported)).apply)
                            xindent.write ("t".mul (xtabs))
                            xoutput.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xitem)) ((xchildren)))) ((((xwalk_items)).apply ((xitem_list)))))
                              seq
                                xsublist.write ""
                                (xchildren).if
                                  xsublist.write ("n%s<ul>n%sn%s</ul>n%s".mod (((unsupported)).apply ((xindent)) ((((xlist_formatter)).apply ((xchildren)) (((xtabs).add 1)))) ((xindent)) ((xindent))))
                                bogusForceDataize.write ((((xoutput).xappend)).apply (("%s<li>%s%s</li>".mod (((unsupported)).apply ((xindent)) ((((xescaper)).apply ((xitem)))) ((xsublist))))))
                            (((unsupported)).apply (((("n".xjoin)).apply ((xoutput)))))
                    (((unsupported)).apply ((((xmark_safe)).apply ((((xlist_formatter)).apply ((xvalue)))))))
            xadd.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      (((unsupported)).apply (((((xint)).apply ((xvalue))).add (((xint)).apply ((xarg))))))
                      (((unsupported)).apply ((xException)))
                        (((unsupported)).apply (((xvalue).add (xarg))))
                        (((unsupported)).apply (""))
            xget_digit.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      seq
                        xarg.write (((xint)).apply ((xarg)))
                        xvalue.write (((xint)).apply ((xvalue)))
                      (((unsupported)).apply ((xvalue)))
                    ((xarg).less 1).if
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((xIndexError)))
                      (((unsupported)).apply ((((xint)).apply ((((unsupported)).apply ((((xstr)).apply ((xvalue)))) (((xarg).neg)))))))
                      (((unsupported)).apply (0))
            xdate.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("")))).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((xAttributeError)))
                      (((unsupported)).apply (((((xformats).xdate_format)).apply ((xvalue)) ((xarg)))))
                      (((unsupported)).apply ((xAttributeError)))
                        (((unsupported)).apply ((((xformat)).apply ((xvalue)) ((xarg)))))
                        (((unsupported)).apply (""))
            xtime.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("")))).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xTypeError)))))
                      (((unsupported)).apply (((((xformats).xtime_format)).apply ((xvalue)) ((xarg)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xTypeError)))))
                        (((unsupported)).apply ((((xtime_format)).apply ((xvalue)) ((xarg)))))
                        (((unsupported)).apply (""))
            xtimesince_filter.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    ((xvalue).not).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      seq
                        (xarg).if
                          (((unsupported)).apply ((((xtimesince)).apply ((xvalue)) ((xarg)))))
                        (((unsupported)).apply ((((xtimesince)).apply ((xvalue)))))
                      (((unsupported)).apply (""))
            xtimeuntil_filter.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    ((xvalue).not).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      (((unsupported)).apply ((((xtimeuntil)).apply ((xvalue)) ((xarg)))))
                      (((unsupported)).apply (""))
            xdefault.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((xvalue).or (xarg))))
            xdefault_if_none.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xarg)))
                    (((unsupported)).apply ((xvalue)))
            xdivisibleby.write
              [xvalue xarg]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((((xint)).apply ((xvalue))).mod (((xint)).apply ((xarg)))).eq 0)))
            xyesno.write
              [xvalue xarg]
                memory > xbits
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xarg)) ("None: is there a None literal in the EO language?")).if
                      xarg.write (((xgettext)).apply ("yes,no,maybe"))
                    xbits.write ((((xarg).xsplit)).apply (","))
                    ((((xlen)).apply ((xbits))).less 2).if
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((xValueError)))
                      (((unsupported)).apply ((((unsupported)).apply ((xyes)) ((xno)) ((xmaybe)))) ((xbits)))
                      (((unsupported)).apply ((((unsupported)).apply ((xyes)) ((xno)) ((xmaybe)))) ((((unsupported)).apply ((((unsupported)).apply ((xbits)) (0))) ((((unsupported)).apply ((xbits)) (1))) ((((unsupported)).apply ((xbits)) (1))))))
                    (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xmaybe)))
                    (xvalue).if
                      (((unsupported)).apply ((xyes)))
                    (((unsupported)).apply ((xno)))
            xfilesizeformat.write
              [xbytes_]
                memory > xnegative
                memory > xvalue
                memory > xfilesize_number_format
                memory > xMB
                memory > xKB
                memory > xGB
                memory > xTB
                memory > xPB
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)) ((xUnicodeDecodeError)))))
                      xbytes_.write (((xint)).apply ((xbytes_)))
                      seq
                        xvalue.write ((((xngettext)).apply ("%(size)d byte") ("%(size)d bytes") (0)).mod (((unsupported)).apply ("size") (0)))
                        (((unsupported)).apply ((((xavoid_wrapping)).apply ((xvalue)))))
                    xfilesize_number_format.write
                      [xvalue]
                        seq > @
                          (((unsupported)).apply (((((xformats).xnumber_format)).apply ((((xround)).apply ((xvalue)) (1))) (1))))
                    xKB.write (((unsupported)).apply (1) (10))
                    xMB.write (((unsupported)).apply (1) (20))
                    xGB.write (((unsupported)).apply (1) (30))
                    xTB.write (((unsupported)).apply (1) (40))
                    xPB.write (((unsupported)).apply (1) (50))
                    xnegative.write ((xbytes_).less 0)
                    (xnegative).if
                      xbytes_.write ((xbytes_).neg)
                    ((xbytes_).less (xKB)).if
                      xvalue.write ((((xngettext)).apply ("%(size)d byte") ("%(size)d bytes") ((xbytes_))).mod (((unsupported)).apply ("size") ((xbytes_))))
                      ((xbytes_).less (xMB)).if
                        xvalue.write ((((xgettext)).apply ("%s KB")).mod (((xfilesize_number_format)).apply (((xbytes_).div (xKB)))))
                        ((xbytes_).less (xGB)).if
                          xvalue.write ((((xgettext)).apply ("%s MB")).mod (((xfilesize_number_format)).apply (((xbytes_).div (xMB)))))
                          ((xbytes_).less (xTB)).if
                            xvalue.write ((((xgettext)).apply ("%s GB")).mod (((xfilesize_number_format)).apply (((xbytes_).div (xGB)))))
                            ((xbytes_).less (xPB)).if
                              xvalue.write ((((xgettext)).apply ("%s TB")).mod (((xfilesize_number_format)).apply (((xbytes_).div (xTB)))))
                              xvalue.write ((((xgettext)).apply ("%s PB")).mod (((xfilesize_number_format)).apply (((xbytes_).div (xPB)))))
                    (xnegative).if
                      xvalue.write ("-%s".mod (xvalue))
                    (((unsupported)).apply ((((xavoid_wrapping)).apply ((xvalue)))))
            xpluralize.write
              [xvalue xarg]
                memory > xbits
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (",") ((xarg))).if
                      xarg.write (",".add (xarg))
                    xbits.write ((((xarg).xsplit)).apply (","))
                    ((((xlen)).apply ((xbits))).greater 2).if
                      (((unsupported)).apply (""))
                    (((unsupported)).apply ((((unsupported)).apply ((xsingular_suffix)) ((xplural_suffix)))) ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (2))))))
                    (((unsupported)).apply ((xValueError)) ((xTypeError)))
                      (((unsupported)).apply ((((((xfloat)).apply ((xvalue))).eq 1).if (xsingular_suffix) (xplural_suffix))))
                      (((unsupported)).apply ((xTypeError)))
                        (((unsupported)).apply ((((((xlen)).apply ((xvalue))).eq 1).if (xsingular_suffix) (xplural_suffix))))
                    (((unsupported)).apply (""))
            xphone2numeric_filter.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xphone2numeric)).apply ((xvalue)))))
            xpprint.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xException)))
                      (((unsupported)).apply ((((xpformat)).apply ((xvalue)))))
                      (((unsupported)).apply (("Error in formatting: %s: %s".mod (((unsupported)).apply ((((xe).x__class__).x__name__)) ((xe))))))