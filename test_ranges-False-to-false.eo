memory > xRangesModel
memory > xdisplay
memory > xrange
memory > xvalue
memory > x_
memory > xexceptions
memory > xlookup
memory > xSplitForm
memory > xDateTimeField
memory > xfilter_arg
memory > xDecimal
memory > xcm
memory > xSmallAutoFieldModel
memory > xfalse
memory > xfield
memory > xImportError
memory > xforms
memory > xtimezone
memory > xDateTimeTZRange
memory > xdatetime
memory > xlist
memory > xQueryDict
memory > xFunc
memory > xBigAutoFieldModel
memory > xValueError
memory > xSplitDateTimeRangeField
memory > xstr
memory > xRangeForm
memory > xexcepted_result
memory > xtimestamp
memory > xValue
memory > xi
memory > xF
memory > xfield_type
memory > xPostgreSQLSimpleTestCase
memory > xserializers
memory > xRangeMaxValueValidator
memory > xRangeLookupsModel
memory > xNumericRange
memory > xPostgreSQLTestCase
memory > xModel
memory > xDateField
memory > xjson
memory > xPostgreSQLModel
memory > xinvalid_bounds
memory > xDateRange
memory > xkwargs
memory > xDateTimeRangeForm
memory > xisolate_apps
memory > xRangeMinValueValidator
memory > xTypeError
[] > test_ranges
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_integer_incorrect_data_type
        memory > xtest_datetime_range
        memory > xtest_model_field_formfield_datetime_default_bounds
        memory > xtest_dumping
        memory > xtest_has_changed
        memory > xtest_range_object_boundaries_range_with_default_bounds
        memory > xtest_range_object_boundaries
        memory > xtest_datetime_form_initial_data
        memory > xtest_isnull
        memory > xtest_tuple_range_with_default_bounds
        memory > xtest_using_split_datetime_widget
        memory > xtest_continuous_range_fields_default_bounds
        memory > xtest_valid_dates
        memory > xtest_datetime_has_changed_last
        memory > xtest_datetime_form_as_table
        memory > xtest_decimal_lower_bound_higher
        memory > xtest_datetime_range_contains
        memory > xtest_date_lower_bound_higher
        memory > xtest_none
        memory > xtest_float_range
        memory > xtest_contained_by
        memory > xtest_tuple
        memory > xlower_dt
        memory > xtest_contains_range
        memory > xtest_model_field_formfield_integer
        memory > xtest_date_invalid_upper
        memory > xupper_date
        memory > xtest_get_field_display
        memory > xtest_invalid_default_bounds
        memory > xtest_overlap
        memory > xtest_date_range_datetime_field
        memory > xtest_datetime_lower_bound_higher
        memory > xtest_valid_integer
        memory > xtest_data
        memory > xtest_auto_field_contained_by
        memory > xtest_datetime_prepare_value
        memory > xtest_decimal_required
        memory > xtest_fully_lt
        memory > xtest_unbounded
        memory > xsetUpTestData
        memory > xtest_adjacent_to
        memory > xtest_exclude
        memory > xtest_exact
        memory > xpg_forms
        memory > xtest_model_field_formfield_date
        memory > xtest_not_gt
        memory > xtest_not_lt
        memory > xtest_decimal_field_contained_by
        memory > xpg_fields
        memory > xtest_datetime_open
        memory > xtest_min
        memory > xtest_null
        memory > xtest_model_field_formfield_datetime
        memory > xtest_decimal_incorrect_data_type
        memory > xtest_serialize_range_with_null
        memory > xtest_all_fields
        memory > xtest_date_range_contains
        memory > xtest_range_object
        memory > xtest_date_incorrect_data_type
        memory > xtest_datetime_incorrect_data_type
        memory > xtest_choices_tuple_list
        memory > xtest_decimal_invalid_upper
        memory > xtest_date_open
        memory > xtest_integer_lower_bound_higher
        memory > xtest_small_integer_field_contained_by
        memory > xtest_isempty
        memory > xtest_date_invalid_lower
        memory > xtest_integer_open
        memory > xtest_deconstruct
        memory > xtest_integer_invalid_lower
        memory > xtest_datetime_invalid_upper
        memory > xtest_loading
        memory > xtest_contains
        memory > xlower_date
        memory > xtest_decimal_open
        memory > xtest_valid_decimal
        memory > xtest_startswith_chaining
        memory > xtest_date_has_changed_last
        memory > xtest_range_widget
        memory > xtest_fully_gt
        memory > xtest_biginteger_range
        memory > xtest_f_ranges
        memory > xtest_valid_timestamps
        memory > xtest_model_field_formfield_biginteger
        memory > xtest_model_field_formfield_float
        memory > xtest_date_required
        memory > xtest_model_field_with_default_bounds
        memory > xtest_integer_required
        memory > xtest_startswith
        memory > xtest_small_auto_field_contained_by
        memory > xtest_datetime_has_changed_first
        memory > xtest_date_has_changed_first
        memory > xtest_model_set_on_base_field
        memory > xtest_rendering
        memory > xtest_big_auto_field_contained_by
        memory > xtest_max
        memory > xtest_bound_type
        memory > xtest_integer_range
        memory > xtest_empty
        memory > xupper_dt
        memory > xtest_decimal_invalid_lower
        memory > xtest_date_range
        memory > xtest_datetime_invalid_lower
        memory > xtest_endswith
        memory > xtest_datetime_required
        memory > xtest_integer_invalid_upper
        memory > xtest_discrete_range_fields_unsupported_default_bounds
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)) ((((xisolate_apps)).apply ("postgres_tests"))))
              seq
                xtest_get_field_display.write
                  [xself]
                    memory > xfield
                    memory > xinstance
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply (((xpg_fields).xIntegerRangeField)) ((((unsupported)).apply ((((unsupported)).apply ("1-50") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (25))) ("1-25"))) ((((unsupported)).apply ((((unsupported)).apply (26) (50))) ("26-50"))))))) ((((unsupported)).apply ((((unsupported)).apply (51) (100))) ("51-100"))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (25))) ("1-25"))) ((((unsupported)).apply ((((unsupported)).apply (26) (50))) ("26-50"))) ((((unsupported)).apply ((((unsupported)).apply (51) (100))) ("51-100"))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ("(1, 2)"))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ("[1, 2]"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xdisplay)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)) ((xdisplay)))))
                            seq
                              xinstance.write (((unsupported)).apply ((xModel)) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinstance).xget_field_display)).apply)) ((xdisplay)))
                xtest_discrete_range_fields_unsupported_default_bounds.write
                  [xself]
                    memory > xmsg
                    memory > xdiscrete_range_types
                    seq > @
                      seq
                        xdiscrete_range_types.write (((unsupported)).apply (((xpg_fields).xBigIntegerRangeField)) (((xpg_fields).xIntegerRangeField)) (((xpg_fields).xDateRangeField)))
                        (((unsupported)).apply ((xfield_type)) ((xdiscrete_range_types)))
                          seq
                            xmsg.write "Cannot use 'default_bounds' with {field_type.__name__}."
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                              (((unsupported)).apply ((xfield_type)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (51) (100))) ("51-100"))))) ("[]"))
                xtest_continuous_range_fields_default_bounds.write
                  [xself]
                    memory > xfield
                    memory > xcontinuous_range_types
                    seq > @
                      seq
                        xcontinuous_range_types.write (((unsupported)).apply (((xpg_fields).xDecimalRangeField)) (((xpg_fields).xDateTimeRangeField)))
                        (((unsupported)).apply ((xfield_type)) ((xcontinuous_range_types)))
                          seq
                            xfield.write (((unsupported)).apply ((xfield_type)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (51) (100))) ("51-100"))))) ("[]"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfield).xdefault_bounds)) ("[]"))
                xtest_invalid_default_bounds.write
                  [xself]
                    memory > xtests
                    memory > xmsg
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply (")]") (")[") ("](") ("])") ("([") ("[(") ("x") ("") ("None: is there a None literal in the EO language?"))
                        xmsg.write "default_bounds must be one of '[)', '(]', '()', or '[]'."
                        (((unsupported)).apply ((xinvalid_bounds)) ((xtests)))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply (((xpg_fields).xDecimalRangeField)) ((xinvalid_bounds)))
                xtest_deconstruct.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_fields).xDecimalRangeField)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                        xfield.write (((unsupported)).apply (((xpg_fields).xDecimalRangeField)) ("[]"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("default_bounds") ("[]"))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xtest_all_fields.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    memory > xnow
                    seq > @
                      seq
                        xnow.write ((((xtimezone).xnow)).apply)
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (0) (10))) ((((xNumericRange)).apply (10) (20))) ((((xNumericRange)).apply (20) (30))) ((((xDateTimeTZRange)).apply (((xnow).sub (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))) ((xnow)))) ((((xDateRange)).apply ((((((xnow).xdate)).apply).sub (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))) (((((xnow).xdate)).apply)))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xints)) (((xloaded).xints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xbigints)) (((xloaded).xbigints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdecimals)) (((xloaded).xdecimals)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xtimestamps)) (((xloaded).xtimestamps)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdates)) (((xloaded).xdates)))
                xtest_range_object.write
                  [xself]
                    memory > xr
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xr.write (((xNumericRange)).apply (0) (10))
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((xr)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) (((xloaded).xints)))
                xtest_tuple.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((((unsupported)).apply (0) (10))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xNumericRange)).apply (0) (10))) (((xloaded).xints)))
                xtest_tuple_range_with_default_bounds.write
                  [xself]
                    memory > xloaded
                    memory > xrange_
                    seq > @
                      seq
                        xrange_.write (((unsupported)).apply (((((xtimezone).xnow)).apply)) ((((((xtimezone).xnow)).apply).add (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((xrange_)) ((xrange_)))
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xloaded).xtimestamps_closed_bounds)) ((((xDateTimeTZRange)).apply ((((unsupported)).apply ((xrange_)) (0))) ((((unsupported)).apply ((xrange_)) (1))) ("[]"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xloaded).xtimestamps)) ((((xDateTimeTZRange)).apply ((((unsupported)).apply ((xrange_)) (0))) ((((unsupported)).apply ((xrange_)) (1))) ("[)"))))
                xtest_range_object_boundaries.write
                  [xself]
                    memory > xr
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xr.write (((xNumericRange)).apply (0) (10) ("[]"))
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((xr)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) (((xloaded).xdecimals)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (10) (((xloaded).xdecimals)))
                xtest_range_object_boundaries_range_with_default_bounds.write
                  [xself]
                    memory > xloaded
                    memory > xrange_
                    seq > @
                      seq
                        xrange_.write (((unsupported)).apply ((xDateTimeTZRange)) (((((xtimezone).xnow)).apply)) ((((((xtimezone).xnow)).apply).add (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))) ("()"))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((xrange_)))
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xloaded).xtimestamps_closed_bounds)) ((xrange_)))
                xtest_unbounded.write
                  [xself]
                    memory > xr
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xr.write (((xNumericRange)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("()"))
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((xr)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) (((xloaded).xdecimals)))
                xtest_empty.write
                  [xself]
                    memory > xr
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xr.write (((unsupported)).apply ((xNumericRange)) (TRUE))
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((xr)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) (((xloaded).xints)))
                xtest_null.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xRangesModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xloaded).xints)))
                xtest_model_set_on_base_field.write
                  [xself]
                    memory > xfield
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((xRangesModel)).apply)
                        xfield.write (((((xinstance).x_meta).xget_field)).apply ("ints"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfield).xmodel)) ((xRangesModel)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfield).xbase_field).xmodel)) ((xRangesModel)))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xtimestamps)) ((((unsupported)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (1) (1))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (1) (2) (1))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (1) (2) (12))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (1) (3))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (1) (3) (1))) ((((unsupported)).apply (((xdatetime).xdatetime)) (2016) (2) (2))))))
                        (((unsupported)).apply (((xcls).xaware_timestamps)) ((((unsupported)).apply (((((xtimezone).xmake_aware)).apply ((xtimestamp)))) ((xtimestamp)) (((xcls).xtimestamps)))))
                        (((unsupported)).apply (((xcls).xdates)) ((((unsupported)).apply ((((unsupported)).apply (((xdatetime).xdate)) (2016) (1) (1))) ((((unsupported)).apply (((xdatetime).xdate)) (2016) (1) (2))) ((((unsupported)).apply (((xdatetime).xdate)) (2016) (1) (3))) ((((unsupported)).apply (((xdatetime).xdate)) (2016) (1) (4))) ((((unsupported)).apply (((xdatetime).xdate)) (2016) (2) (2))) ((((unsupported)).apply (((xdatetime).xdate)) (2016) (2) (3))))))
                        (((unsupported)).apply (((xcls).xobj)) ((((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) (0))) ((((unsupported)).apply (((xcls).xdates)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) (1))) ((((unsupported)).apply (((xcls).xdates)) (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xtimestamps)) (0))) ((((unsupported)).apply (((xcls).xtimestamps)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xtimestamps)) (1))) ((((unsupported)).apply (((xcls).xtimestamps)) (2))))))))
                        (((unsupported)).apply (((xcls).xaware_obj)) ((((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) (0))) ((((unsupported)).apply (((xcls).xdates)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) (1))) ((((unsupported)).apply (((xcls).xdates)) (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xaware_timestamps)) (0))) ((((unsupported)).apply (((xcls).xaware_timestamps)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xtimestamps)) (1))) ((((unsupported)).apply (((xcls).xtimestamps)) (2))))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (3) (4))))
                          seq
                            (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) ((xi)))) ((((unsupported)).apply (((xcls).xdates)) (((xi).add 1)))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xtimestamps)) ((xi)))) ((((unsupported)).apply (((xcls).xtimestamps)) (((xi).add 1)))))))
                            (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xdates)) ((xi)))) ((((unsupported)).apply (((xcls).xdates)) (((xi).add 1)))))) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xaware_timestamps)) ((xi)))) ((((unsupported)).apply (((xcls).xaware_timestamps)) (((xi).add 1)))))))
                xtest_datetime_range_contains.write
                  [xself]
                    memory > xfilter_args
                    seq > @
                      seq
                        xfilter_args.write (((unsupported)).apply ((((unsupported)).apply (((xself).xtimestamps)) (1))) ((((unsupported)).apply (((xself).xaware_timestamps)) (1))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xtimestamps)) (1))) ((((unsupported)).apply (((xself).xtimestamps)) (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xaware_timestamps)) (1))) ((((unsupported)).apply (((xself).xaware_timestamps)) (2))))) ((((xValue)).apply ((((unsupported)).apply (((xself).xdates)) (0))))) ((((unsupported)).apply ((xFunc)) ((((xF)).apply ("dates"))) ("lower") ((((xDateTimeField)).apply)))) ((((xF)).apply ("timestamps_inner"))))
                        (((unsupported)).apply ((xfilter_arg)) ((xfilter_args)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfilter_arg)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xRangesModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("timestamps__contains") ((xfilter_arg)))))))) ((((unsupported)).apply (((xself).xobj)) (((xself).xaware_obj)))))
                xtest_date_range_contains.write
                  [xself]
                    memory > xfilter_args
                    seq > @
                      seq
                        xfilter_args.write (((unsupported)).apply ((((unsupported)).apply (((xself).xtimestamps)) (1))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xdates)) (1))) ((((unsupported)).apply (((xself).xdates)) (2))))) ((((unsupported)).apply ((xValue)) ((((unsupported)).apply (((xself).xdates)) (0))) ((((xDateField)).apply)))) ((((unsupported)).apply ((xFunc)) ((((xF)).apply ("timestamps"))) ("lower") ((((xDateField)).apply)))) ((((xF)).apply ("dates_inner"))))
                        (((unsupported)).apply ((xfilter_arg)) ((xfilter_args)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfilter_arg)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xRangesModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("dates__contains") ((xfilter_arg)))))))) ((((unsupported)).apply (((xself).xobj)) (((xself).xaware_obj)))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xobjs)) ((((((xRangesModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (0) (10))))) ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (5) (15))))) ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (0))))) ((((unsupported)).apply ((xRangesModel)) ((((unsupported)).apply ((xNumericRange)) (TRUE))))) ((((unsupported)).apply ((xRangesModel)) ("None: is there a None literal in the EO language?"))))))))
                xtest_exact.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (0) (10))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))))))
                xtest_isnull.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_isempty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))))))
                xtest_contains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (1))))))
                xtest_contains_range.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (3) (8))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))))))
                xtest_contained_by.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (0) (20))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (1))) ((((unsupported)).apply (((xself).xobjs)) (3))))))
                xtest_overlap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (3) (8))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (1))))))
                xtest_fully_lt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (5) (10))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (2))))))
                xtest_fully_gt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (5) (10))))) ((((unsupported)).apply)))
                xtest_not_lt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (5) (10))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (1))))))
                xtest_not_gt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (5) (10))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (2))))))
                xtest_adjacent_to.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) ((((xNumericRange)).apply (0) (5))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (1))) ((((unsupported)).apply (((xself).xobjs)) (2))))))
                xtest_startswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (0))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))))))
                xtest_endswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (0))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (2))))))
                xtest_startswith_chaining.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangesModel).xobjects).xfilter)) (0))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (1))))))
                xtest_bound_type.write
                  [xself]
                    memory > xdecimals
                    memory > xtests
                    seq > @
                      seq
                        xdecimals.write (((((xRangesModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (10))))) ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (10) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (5) (15))))) ((((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (5) (15) ("(]"))))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("lower_inc") (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (1))) ((((unsupported)).apply ((xdecimals)) (2))))))) ((((unsupported)).apply ("lower_inc") ((xfalse)) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (0))) ((((unsupported)).apply ((xdecimals)) (3))))))) ((((unsupported)).apply ("lower_inf") (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (0))))))) ((((unsupported)).apply ("lower_inf") ((xfalse)) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (1))) ((((unsupported)).apply ((xdecimals)) (2))) ((((unsupported)).apply ((xdecimals)) (3))))))) ((((unsupported)).apply ("upper_inc") (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (3))))))) ((((unsupported)).apply ("upper_inc") ((xfalse)) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (0))) ((((unsupported)).apply ((xdecimals)) (1))) ((((unsupported)).apply ((xdecimals)) (2))))))) ((((unsupported)).apply ("upper_inf") (TRUE) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (1))))))) ((((unsupported)).apply ("upper_inf") ((xfalse)) ((((unsupported)).apply ((((unsupported)).apply ((xdecimals)) (0))) ((((unsupported)).apply ((xdecimals)) (2))) ((((unsupported)).apply ((xdecimals)) (3))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xfilter_arg)) ((xexcepted_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)) ((xfilter_arg)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xRangesModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("decimals__%s".mod (xlookup))) ((xfilter_arg)))))))) ((xexcepted_result)))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xtest_date_range.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-01-01"))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-05-05"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xDateRange)).apply ("2015-01-01") ("2015-05-04"))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_date_range_datetime_field.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-01-01"))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-05-05"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xDateRange)).apply ("2015-01-01") ("2015-05-04"))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_datetime_range.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-01-01T09:00:00"))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ("2015-05-05T17:00:00"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xDateTimeTZRange)).apply ("2015-01-01T09:00") ("2015-05-04T23:55"))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_small_integer_field_contained_by.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (8))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (4))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply (4) (6))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (1))))))
                xtest_integer_range.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (5))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (99))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply (1) (98))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_biginteger_range.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (5))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (99))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply (1) (98))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_decimal_field_contained_by.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((((xDecimal)).apply ("1.33"))))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((((xDecimal)).apply ("2.88"))))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((((xDecimal)).apply ("99.17"))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply ((((xDecimal)).apply ("1.89"))) ((((xDecimal)).apply ("7.91"))))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (1))))))
                xtest_float_range.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (5))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (99))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply (1) (98))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_small_auto_field_contained_by.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((((xSmallAutoFieldModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((xSmallAutoFieldModel)).apply)) ((xi)) ((((xrange)).apply (1) (5))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xSmallAutoFieldModel).xobjects).xfilter)) ((((xNumericRange)).apply (((((unsupported)).apply ((xobjs)) (1)).xpk)) (((((unsupported)).apply ((xobjs)) (3)).xpk)))))) ((((unsupported)).apply ((xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_auto_field_contained_by.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((((xRangeLookupsModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((xRangeLookupsModel)).apply)) ((xi)) ((((xrange)).apply (1) (5))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xNumericRange)).apply (((((unsupported)).apply ((xobjs)) (1)).xpk)) (((((unsupported)).apply ((xobjs)) (3)).xpk)))))) ((((unsupported)).apply ((xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_big_auto_field_contained_by.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((((xBigAutoFieldModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((xBigAutoFieldModel)).apply)) ((xi)) ((((xrange)).apply (1) (5))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xBigAutoFieldModel).xobjects).xfilter)) ((((xNumericRange)).apply (((((unsupported)).apply ((xobjs)) (1)).xpk)) (((((unsupported)).apply ((xobjs)) (3)).xpk)))))) ((((unsupported)).apply ((xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_f_ranges.write
                  [xself]
                    memory > xobjs
                    memory > xparent
                    seq > @
                      seq
                        xparent.write (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((xNumericRange)).apply (0) (10))))
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (5) ((xparent)))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (99) ((xparent)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xfilter)) ((((xF)).apply ("parent__decimals"))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (0))))))
                xtest_exclude.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (5))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) (99))) ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xcreate)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xRangeLookupsModel).xobjects).xexclude)) ((((xNumericRange)).apply (0) (100))))) ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) (2))))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_data.write "[{\"fields\": {\"ints\": \"{\\\"upper\\\": \\\"10\\\", \\\"lower\\\": \\\"0\\\", \\\"bounds\\\": \\\"[)\\\"}\", \"decimals\": \"{\\\"empty\\\": true}\", \"bigints\": null, \"timestamps\": \"{\\\"upper\\\": \\\"2014-02-02T12:12:12+00:00\\\", \\\"lower\\\": \\\"2014-01-01T00:00:00+00:00\\\", \\\"bounds\\\": \\\"[)\\\"}\", \"timestamps_inner\": null, \"timestamps_closed_bounds\": \"{\\\"upper\\\": \\\"2014-02-02T12:12:12+00:00\\\", \\\"lower\\\": \\\"2014-01-01T00:00:00+00:00\\\", \\\"bounds\\\": \\\"()\\\"}\", \"dates\": \"{\\\"upper\\\": \\\"2014-02-02\\\", \\\"lower\\\": \\\"2014-01-01\\\", \\\"bounds\\\": \\\"[)\\\"}\", \"dates_inner\": null }, \"model\": \"postgres_tests.rangesmodel\", \"pk\": null}]"
                xlower_date.write ((((xdatetime).xdate)).apply (2014) (1) (1))
                xupper_date.write ((((xdatetime).xdate)).apply (2014) (2) (2))
                xlower_dt.write (((unsupported)).apply (((xdatetime).xdatetime)) (2014) (1) (1) (0) (0) (0) ((((xdatetime).xtimezone).xutc)))
                xupper_dt.write (((unsupported)).apply (((xdatetime).xdatetime)) (2014) (2) (2) (12) (12) (12) ((((xdatetime).xtimezone).xutc)))
                xtest_dumping.write
                  [xself]
                    memory > xinstance
                    memory > xcheck
                    memory > xdata
                    memory > xdumped
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (0) (10))) ((((unsupported)).apply ((xNumericRange)) (TRUE))) ((((xDateTimeTZRange)).apply (((xself).xlower_dt)) (((xself).xupper_dt)))) ((((unsupported)).apply ((xDateTimeTZRange)) (((xself).xlower_dt)) (((xself).xupper_dt)) ("()"))) ((((xDateRange)).apply (((xself).xlower_date)) (((xself).xupper_date)))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        xdumped.write ((((xjson).xloads)).apply ((xdata)))
                        (((unsupported)).apply ((xfield)) ((((unsupported)).apply ("ints") ("dates") ("timestamps") ("timestamps_closed_bounds"))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdumped)) (0))) ("fields"))) ((xfield)))) (((((xjson).xloads)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdumped)) (0))) ("fields"))) ((xfield)))))))
                        xcheck.write ((((xjson).xloads)).apply (((xself).xtest_data)))
                        (((unsupported)).apply ((xfield)) ((((unsupported)).apply ("ints") ("dates") ("timestamps") ("timestamps_closed_bounds"))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcheck)) (0))) ("fields"))) ((xfield)))) (((((xjson).xloads)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcheck)) (0))) ("fields"))) ((xfield)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdumped)) ((xcheck)))
                xtest_loading.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") (((xself).xtest_data)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xints)) ((((xNumericRange)).apply (0) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdecimals)) ((((unsupported)).apply ((xNumericRange)) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xinstance).xbigints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdates)) ((((xDateRange)).apply (((xself).xlower_date)) (((xself).xupper_date)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xtimestamps)) ((((xDateTimeTZRange)).apply (((xself).xlower_dt)) (((xself).xupper_dt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xtimestamps_closed_bounds)) ((((unsupported)).apply ((xDateTimeTZRange)) (((xself).xlower_dt)) (((xself).xupper_dt)) ("()"))))
                xtest_serialize_range_with_null.write
                  [xself]
                    memory > xinstance
                    memory > xnew_instance
                    memory > xdata
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (10))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        xnew_instance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") ((xdata)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_instance).xints)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (10))))
                        xinstance.write (((unsupported)).apply ((xRangesModel)) ((((xNumericRange)).apply (10) ("None: is there a None literal in the EO language?"))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        xnew_instance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") ((xdata)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_instance).xints)) ((((xNumericRange)).apply (10) ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              xtest_choices_tuple_list.write
                [xself]
                  memory > xfield
                  seq > @
                    seq
                      (((unsupported)).apply ((xPostgreSQLModel)))
                        xfield.write (((unsupported)).apply (((xpg_fields).xIntegerRangeField)) ((((unsupported)).apply ((((unsupported)).apply ("1-50") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (25))) ("1-25"))) ((((unsupported)).apply ((((unsupported)).apply (26) (50))) ("26-50"))))))) ((((unsupported)).apply ((((unsupported)).apply (51) (100))) ("51-100"))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_max.write
                  [xself]
                    memory > xvalidator
                    memory > xmsg
                    seq > @
                      seq
                        xvalidator.write (((xRangeMaxValueValidator)).apply (5))
                        bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply (0) (5))))
                        xmsg.write "Ensure that this range is completely less than or equal to 5."
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply (0) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("max_value"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xexceptions).xValidationError)) ((xmsg)))))
                          bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply (0) ("None: is there a None literal in the EO language?"))))
                xtest_min.write
                  [xself]
                    memory > xvalidator
                    memory > xmsg
                    seq > @
                      seq
                        xvalidator.write (((xRangeMinValueValidator)).apply (5))
                        bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply (10) (15))))
                        xmsg.write "Ensure that this range is completely greater than or equal to 5."
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply (0) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("min_value"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xexceptions).xValidationError)) ((xmsg)))))
                          bogusForceDataize.write (((xvalidator)).apply ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (10))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_valid_integer.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1") ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply (1) (2))))
                xtest_valid_decimal.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1.12345") ("2.001"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply ((((xDecimal)).apply ("1.12345"))) ((((xDecimal)).apply ("2.001"))))))
                xtest_valid_timestamps.write
                  [xself]
                    memory > xlower
                    memory > xfield
                    memory > xvalue
                    memory > xupper
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("01/01/2014 00:00:00") ("02/02/2014 12:12:12"))))
                        xlower.write ((((xdatetime).xdatetime)).apply (2014) (1) (1) (0) (0) (0))
                        xupper.write ((((xdatetime).xdatetime)).apply (2014) (2) (2) (12) (12) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateTimeTZRange)).apply ((xlower)) ((xupper)))))
                xtest_valid_dates.write
                  [xself]
                    memory > xlower
                    memory > xfield
                    memory > xvalue
                    memory > xupper
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("01/01/2014") ("02/02/2014"))))
                        xlower.write ((((xdatetime).xdate)).apply (2014) (1) (1))
                        xupper.write ((((xdatetime).xdate)).apply (2014) (2) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateRange)).apply ((xlower)) ((xupper)))))
                xtest_using_split_datetime_widget.write
                  [xself]
                    memory > xfield
                    memory > xbase_field
                    memory > xform
                    memory > xupper
                    memory > xlower
                    seq > @
                      seq
                        (((unsupported)).apply (((xpg_forms).xDateTimeRangeField)))
                          xbase_field.write ((xforms).xSplitDateTimeField)
                        (((unsupported)).apply (((xforms).xForm)))
                          xfield.write (((xSplitDateTimeRangeField)).apply)
                        xform.write (((xSplitForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((xform)))) ((((unsupported)).apply)))
                        xform.write (((xSplitForm)).apply ((((unsupported)).apply ("field_0_0") ("01/01/2014") ("field_0_1") ("00:00:00") ("field_1_0") ("02/02/2014") ("field_1_1") ("12:12:12"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        xlower.write ((((xdatetime).xdatetime)).apply (2014) (1) (1) (0) (0) (0))
                        xupper.write ((((xdatetime).xdatetime)).apply (2014) (2) (2) (12) (12) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xform).xcleaned_data)) ("field"))) ((((xDateTimeTZRange)).apply ((xlower)) ((xupper)))))
                xtest_none.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xIntegerRangeField)) ((xfalse)))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xvalue)))
                xtest_datetime_form_as_table.write
                  [xself]
                    memory > xdatetime_field
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xdatetime_field.write (((unsupported)).apply (((xpg_forms).xDateTimeRangeField)) (TRUE))
                        xform.write (((xDateTimeRangeForm)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_table)).apply)) ((((unsupported)).apply)))
                        xform.write (((xDateTimeRangeForm)).apply ((((unsupported)).apply ("datetime_field_0") ("2010-01-01 11:13:00") ("datetime_field_1") ("2020-12-12 16:59:00"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xform).xas_table)).apply)) ((((unsupported)).apply)))
                xtest_datetime_form_initial_data.write
                  [xself]
                    memory > xdatetime_field
                    memory > xform
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xdatetime_field.write (((unsupported)).apply (((xpg_forms).xDateTimeRangeField)) (TRUE))
                        xdata.write (((unsupported)).apply ((xQueryDict)) (TRUE))
                        bogusForceDataize.write ((((xdata).xupdate)).apply ((((unsupported)).apply ("datetime_field_0") ("2010-01-01 11:13:00") ("datetime_field_1") ("") ("initial-datetime_field_0") ("2010-01-01 10:12:00") ("initial-datetime_field_1") (""))))
                        xform.write (((unsupported)).apply ((xDateTimeRangeForm)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xhas_changed)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("initial-datetime_field_0"))) ("2010-01-01 11:13:00"))
                        xform.write (((unsupported)).apply ((xDateTimeRangeForm)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xform).xhas_changed)).apply)))
                xtest_rendering.write
                  [xself]
                    memory > xints
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xints.write ((((xpg_forms).xIntegerRangeField)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xRangeForm)).apply)))) ((((unsupported)).apply)))
                xtest_integer_lower_bound_higher.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("10") ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("The start of the range must not exceed the end of the range."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("bound_ordering"))
                xtest_integer_open.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") ("0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") (0))))
                xtest_integer_incorrect_data_type.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter two whole numbers."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid"))
                xtest_integer_invalid_lower.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("a") ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a whole number."))
                xtest_integer_invalid_upper.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xIntegerRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a whole number."))
                xtest_integer_required.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xIntegerRangeField)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("This field is required."))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply (1) ("None: is there a None literal in the EO language?"))))
                xtest_decimal_lower_bound_higher.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1.8") ("1.6"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("The start of the range must not exceed the end of the range."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("bound_ordering"))
                xtest_decimal_open.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") ("3.1415926"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply ("None: is there a None literal in the EO language?") ((((xDecimal)).apply ("3.1415926"))))))
                xtest_decimal_incorrect_data_type.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("1.6"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter two numbers."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid"))
                xtest_decimal_invalid_lower.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("a") ("3.1415926"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a number."))
                xtest_decimal_invalid_upper.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDecimalRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1.61803399") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a number."))
                xtest_decimal_required.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xDecimalRangeField)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("This field is required."))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1.61803399") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xNumericRange)).apply ((((xDecimal)).apply ("1.61803399"))) ("None: is there a None literal in the EO language?"))))
                xtest_date_lower_bound_higher.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2013-04-09") ("1976-04-16"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("The start of the range must not exceed the end of the range."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("bound_ordering"))
                xtest_date_open.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") ("2013-04-09"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateRange)).apply ("None: is there a None literal in the EO language?") (((((xdatetime).xdate)).apply (2013) (4) (9))))))
                xtest_date_incorrect_data_type.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter two valid dates."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid"))
                xtest_date_invalid_lower.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("a") ("2013-04-09"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a valid date."))
                xtest_date_invalid_upper.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2013-04-09") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a valid date."))
                xtest_date_required.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xDateRangeField)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("This field is required."))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("1976-04-16") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateRange)).apply (((((xdatetime).xdate)).apply (1976) (4) (16))) ("None: is there a None literal in the EO language?"))))
                xtest_date_has_changed_first.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xpg_forms).xDateRangeField)).apply).xhas_changed)).apply ((((unsupported)).apply ("2010-01-01") ("2020-12-12"))) ((((unsupported)).apply ("2010-01-31") ("2020-12-12"))))))
                xtest_date_has_changed_last.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xpg_forms).xDateRangeField)).apply).xhas_changed)).apply ((((unsupported)).apply ("2010-01-01") ("2020-12-12"))) ((((unsupported)).apply ("2010-01-01") ("2020-12-31"))))))
                xtest_datetime_lower_bound_higher.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2006-10-25 14:59") ("2006-10-25 14:58"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("The start of the range must not exceed the end of the range."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("bound_ordering"))
                xtest_datetime_open.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") ("2013-04-09 11:45"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateTimeTZRange)).apply ("None: is there a None literal in the EO language?") (((((xdatetime).xdatetime)).apply (2013) (4) (9) (11) (45))))))
                xtest_datetime_incorrect_data_type.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("2013-04-09 11:45"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter two valid date/times."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("invalid"))
                xtest_datetime_invalid_lower.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("45") ("2013-04-09 11:45"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a valid date/time."))
                xtest_datetime_invalid_upper.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2013-04-09 11:45") ("sweet pickles"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Enter a valid date/time."))
                xtest_datetime_required.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xDateTimeRangeField)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("This field is required."))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2013-04-09 11:45") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateTimeTZRange)).apply (((((xdatetime).xdatetime)).apply (2013) (4) (9) (11) (45))) ("None: is there a None literal in the EO language?"))))
                xtest_datetime_prepare_value.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      (((unsupported)).apply)
                        xfield.write ((((xpg_forms).xDateTimeRangeField)).apply)
                        xvalue.write ((((xfield).xprepare_value)).apply ((((xDateTimeTZRange)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2015) (5) (22) (16) (6) (33) ((((xdatetime).xtimezone).xutc)))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply (((((xdatetime).xdatetime)).apply (2015) (5) (22) (18) (6) (33))) ("None: is there a None literal in the EO language?"))))
                xtest_datetime_has_changed_first.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xpg_forms).xDateTimeRangeField)).apply).xhas_changed)).apply ((((unsupported)).apply ("2010-01-01 00:00") ("2020-12-12 00:00"))) ((((unsupported)).apply ("2010-01-31 23:00") ("2020-12-12 00:00"))))))
                xtest_datetime_has_changed_last.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xpg_forms).xDateTimeRangeField)).apply).xhas_changed)).apply ((((unsupported)).apply ("2010-01-01 00:00") ("2020-12-12 00:00"))) ((((unsupported)).apply ("2010-01-01 00:00") ("2020-12-31 23:00"))))))
                xtest_model_field_formfield_integer.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write ((((xpg_fields).xIntegerRangeField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xIntegerRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply)))
                xtest_model_field_formfield_biginteger.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write ((((xpg_fields).xBigIntegerRangeField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xIntegerRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply)))
                xtest_model_field_formfield_float.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((unsupported)).apply (((xpg_fields).xDecimalRangeField)) ("()"))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xDecimalRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply ("bounds") ("()"))))
                xtest_model_field_formfield_date.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write ((((xpg_fields).xDateRangeField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xDateRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply)))
                xtest_model_field_formfield_datetime.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write ((((xpg_fields).xDateTimeRangeField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xDateTimeRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply ("bounds") ((((xpg_fields).xranges).xCANONICAL_RANGE_BOUNDS)))))
                xtest_model_field_formfield_datetime_default_bounds.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((unsupported)).apply (((xpg_fields).xDateTimeRangeField)) ("[]"))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xpg_forms).xDateTimeRangeField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xrange_kwargs)) ((((unsupported)).apply ("bounds") ("[]"))))
                xtest_model_field_with_default_bounds.write
                  [xself]
                    memory > xlower
                    memory > xfield
                    memory > xvalue
                    memory > xupper
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xpg_forms).xDateTimeRangeField)) ("[]"))
                        xvalue.write ((((xfield).xclean)).apply ((((unsupported)).apply ("2014-01-01 00:00:00") ("2014-02-03 12:13:14"))))
                        xlower.write ((((xdatetime).xdatetime)).apply (2014) (1) (1) (0) (0) (0))
                        xupper.write ((((xdatetime).xdatetime)).apply (2014) (2) (3) (12) (13) (14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((xDateTimeTZRange)).apply ((xlower)) ((xupper)) ("[]"))))
                xtest_has_changed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xvalue)))) ((((unsupported)).apply ((((unsupported)).apply (((((xpg_forms).xDateRangeField)).apply)) ((((unsupported)).apply ("2010-01-01") ("2020-12-12"))))) ((((unsupported)).apply (((((xpg_forms).xDateTimeRangeField)).apply)) ((((unsupported)).apply ("2010-01-01 11:13") ("2020-12-12 14:52"))))) ((((unsupported)).apply (((((xpg_forms).xIntegerRangeField)).apply)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((((xpg_forms).xDecimalRangeField)).apply)) ((((unsupported)).apply ("1.12345") ("2.001"))))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((((xfield).x__class__).x__name__)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfield).xhas_changed)).apply ("None: is there a None literal in the EO language?") ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply ((((unsupported)).apply ((xvalue)) (0))) (""))) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply ("") ((((unsupported)).apply ((xvalue)) (1))))) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xfield).xhas_changed)).apply ((xvalue)) ((xvalue)))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              xtest_range_widget.write
                [xself]
                  memory > xdt_range
                  memory > xf
                  seq > @
                    seq
                      xf.write (((((xpg_forms).xranges).xDateTimeRangeField)).apply)
                      bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xf).xwidget).xrender)).apply ("datetimerange") (""))) ("<input type=\"text\" name=\"datetimerange_0\"><input type=\"text\" name=\"datetimerange_1\">"))
                      bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xf).xwidget).xrender)).apply ("datetimerange") ("None: is there a None literal in the EO language?"))) ("<input type=\"text\" name=\"datetimerange_0\"><input type=\"text\" name=\"datetimerange_1\">"))
                      xdt_range.write (((xDateTimeTZRange)).apply (((((xdatetime).xdatetime)).apply (2006) (1) (10) (7) (30))) (((((xdatetime).xdatetime)).apply (2006) (2) (12) (9) (50))))
                      bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xf).xwidget).xrender)).apply ("datetimerange") ((xdt_range)))) ("<input type=\"text\" name=\"datetimerange_0\" value=\"2006-01-10 07:30:00\"><input type=\"text\" name=\"datetimerange_1\" value=\"2006-02-12 09:50:00\">"))