memory > xd
memory > xlines
memory > xz
memory > xexec
memory > xrange
memory > xlastNum
memory > xany
memory > xcode
memory > xy
memory > xnum
memory > xc
memory > xtotal
memory > xinfo
memory > xh
memory > xb
memory > x_
memory > xcase
memory > xspam
memory > xx
memory > xi
memory > xloc
memory > xv
memory > xSyntaxError
memory > xtarget
memory > xunittest
memory > xobject
memory > x__
memory > xj
memory > xNameError
memory > xlen
memory > x__name__
memory > xa
[] > test_named_expressions
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_named_expression_scope_25
        memory > xtest_named_expression_invalid_comprehension_iterable_expression
        memory > xtest_named_expression_assignment_04
        memory > xtest_named_expression_invalid_16
        memory > xtest_named_expression_scope_01
        memory > xtest_named_expression_assignment_10
        memory > xtest_named_expression_invalid_rebinding_comprehension_iteration_variable
        memory > xtest_named_expression_scope_20
        memory > xtest_named_expression_invalid_03
        memory > xtest_named_expression_assignment_02
        memory > xtest_named_expression_scope_10
        memory > xtest_named_expression_invalid_14
        memory > xtest_named_expression_scope_08
        memory > xtest_named_expression_invalid_07
        memory > xtest_named_expression_scope_19
        memory > xtest_named_expression_assignment_06
        memory > xtest_named_expression_invalid_rebinding_comprehension_inner_loop
        memory > xtest_named_expression_scope_23
        memory > xtest_named_expression_scope_04
        memory > xtest_named_expression_assignment_03
        memory > xtest_named_expression_invalid_11
        memory > xtest_named_expression_assignment_14
        memory > xtest_named_expression_global_scope
        memory > xtest_named_expression_global_scope_no_global_keyword
        memory > xtest_named_expression_assignment_11
        memory > xtest_named_expression_scope_11
        memory > xtest_named_expression_invalid_15
        memory > xtest_named_expression_scope_22
        memory > xtest_named_expression_invalid_01
        memory > xtest_named_expression_scope_18
        memory > xtest_named_expression_assignment_07
        memory > xtest_named_expression_scope_07
        memory > xtest_named_expression_invalid_08
        memory > xtest_named_expression_assignment_15
        memory > xtest_named_expression_scope_03
        memory > xtest_named_expression_invalid_12
        memory > xtest_named_expression_invalid_04
        memory > xtest_named_expression_invalid_in_class_body
        memory > xtest_named_expression_assignment_08
        memory > xtest_named_expression_scope_21
        memory > xtest_named_expression_scope_06
        memory > xtest_named_expression_nonlocal_scope_no_nonlocal_keyword
        memory > xtest_named_expression_invalid_09
        memory > xtest_named_expression_nonlocal_scope
        memory > xtest_named_expression_invalid_17
        memory > xtest_named_expression_scope_02
        memory > xtest_named_expression_scope_17
        memory > xtest_named_expression_invalid_13
        memory > xtest_named_expression_scope_05
        memory > xtest_named_expression_invalid_10
        memory > xtest_named_expression_scope_24
        memory > xtest_named_expression_invalid_02
        memory > xtest_named_expression_assignment_13
        memory > xtest_named_expression_assignment_09
        memory > xGLOBAL_VAR
        memory > xtest_named_expression_scope_09
        memory > xtest_named_expression_invalid_06
        memory > xtest_named_expression_variable_reuse_in_comprehensions
        memory > xtest_named_expression_assignment_16
        memory > xtest_named_expression_assignment_01
        memory > xtest_named_expression_assignment_12
        memory > xtest_named_expression_assignment_05
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            xGLOBAL_VAR.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_named_expression_invalid_01.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "x := 0"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((xcode)))
                xtest_named_expression_invalid_02.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "x = y := 0"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_03.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "y := f(x)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_04.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "y0 = y1 := f(x)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_06.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "((a, b) := (1, 2))"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("cannot use assignment expressions with tuple"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_07.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "def spam(a = b := 42): pass"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_08.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "def spam(a: b := 42 = 5): pass"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_09.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "spam(a=b := 'c')"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_10.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "spam(x = y := f(x))"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_11.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "spam(a=1, b := 2)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("positional argument follows keyword argument"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_12.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "spam(a=1, (b := 2))"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("positional argument follows keyword argument"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_13.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "spam(a=1, (b := 2))"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("positional argument follows keyword argument"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_14.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "(x := lambda: y := 1)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_15.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "(lambda: x := 1)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("cannot use assignment expressions with lambda"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_16.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "[i + 1 for i in i := [1,2]]"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_17.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "[i := 0, j := 1 for i, j in [(1, 2), (3, 4)]]"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("invalid syntax"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_in_class_body.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("assignment expression within a comprehension cannot be used in a class body"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_rebinding_comprehension_iteration_variable.write
                  [xself]
                    memory > xcases
                    memory > xmsg
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("Local reuse") ("i") ("[i := 0 for i in range(5)]"))) ((((unsupported)).apply ("Nested reuse") ("j") ("[[(j := 0) for i in range(5)] for j in range(5)]"))) ((((unsupported)).apply ("Reuse inner loop target") ("j") ("[(j := 0) for i in range(5) for j in range(5)]"))) ((((unsupported)).apply ("Unpacking reuse") ("i") ("[i := 0 for i, j in [(0, 1)]]"))) ((((unsupported)).apply ("Reuse in loop condition") ("i") ("[i+1 for i in range(5) if (i := 0)]"))) ((((unsupported)).apply ("Unreachable reuse") ("i") ("[False or (i:=0) for i in range(5)]"))) ((((unsupported)).apply ("Unreachable nested reuse") ("i") ("[(i, j) for i in range(5) for j in range(5) if True or (i:=10)]"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((xtarget)) ((xcode)))) ((xcases)))
                          seq
                            xmsg.write "assignment expression cannot rebind comprehension iteration variable '{target}'"
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)))))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_invalid_rebinding_comprehension_inner_loop.write
                  [xself]
                    memory > xcases
                    memory > xmsg
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("Inner reuse") ("j") ("[i for i in range(5) if (j := 0) for j in range(5)]"))) ((((unsupported)).apply ("Inner unpacking reuse") ("j") ("[i for i in range(5) if (j := 0) for j, k in [(0, 1)]]"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((xtarget)) ((xcode)))) ((xcases)))
                          seq
                            xmsg.write "comprehension inner loop cannot rebind assignment expression target '{target}'"
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)))))
                              seq
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                  bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                  bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                  bogusForceDataize.write (((xexec)).apply ("lambda: {code}") ((((unsupported)).apply)))
                xtest_named_expression_invalid_comprehension_iterable_expression.write
                  [xself]
                    memory > xcases
                    memory > xmsg
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("Top level") ("[i for i in (i := range(5))]"))) ((((unsupported)).apply ("Inside tuple") ("[i for i in (2, 3, i := range(5))]"))) ((((unsupported)).apply ("Inside list") ("[i for i in [2, 3, i := range(5)]]"))) ((((unsupported)).apply ("Different name") ("[i for i in (j := range(5))]"))) ((((unsupported)).apply ("Lambda expression") ("[i for i in (lambda:(j := range(5)))()]"))) ((((unsupported)).apply ("Inner loop") ("[i for i in range(5) for j in (i := range(5))]"))) ((((unsupported)).apply ("Nested comprehension") ("[i for i in [j for j in (k := range(5))]]"))) ((((unsupported)).apply ("Nested comprehension condition") ("[i for i in [j for j in range(5) if (j := True)]]"))) ((((unsupported)).apply ("Nested comprehension body") ("[i for i in [(j := True) for j in range(5)]]"))))
                        xmsg.write "assignment expression cannot be used in a comprehension iterable expression"
                        (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((xcode)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((xmsg)))))
                                bogusForceDataize.write (((xexec)).apply ("lambda: {code}") ((((unsupported)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_named_expression_assignment_01.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (10))
                xtest_named_expression_assignment_02.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write 20
                        (((unsupported)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (20))
                xtest_named_expression_assignment_03.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((1.add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtotal)) (3))
                xtest_named_expression_assignment_04.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xinfo)) ((((unsupported)).apply (1) (2) (3))))
                xtest_named_expression_assignment_05.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (1))
                xtest_named_expression_assignment_06.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xz)) (0))
                xtest_named_expression_assignment_07.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xloc)) ((((unsupported)).apply (1) (2))))
                xtest_named_expression_assignment_08.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("eggs")).if
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xspam)) ("eggs"))
                        bogusForceDataize.write ((((xself).xfail)).apply ("variable was not assigned using named expression"))
                xtest_named_expression_assignment_09.write
                  [xself]
                    seq > @
                      (TRUE.and (((unsupported)).apply (TRUE))).if
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xspam)))
                        bogusForceDataize.write ((((xself).xfail)).apply ("variable was not assigned using named expression"))
                xtest_named_expression_assignment_10.write
                  [xself]
                    seq > @
                      ((((unsupported)).apply (10)).eq 10).if
                        bogusForceDataize.write ((((xself).xfail)).apply ("variable was not assigned using named expression"))
                xtest_named_expression_assignment_11.write
                  [xself]
                    memory > xinput_data
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xinput_data.write (((unsupported)).apply (1) (2) (3))
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) (((xx).div (xy))))) ((xx)) ((xinput_data)) (((((unsupported)).apply ((((xspam)).apply ((xx))))).greater 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply (1) (1) (1.0))) ((((unsupported)).apply (2) (2) (1.0))) ((((unsupported)).apply (3) (3) (1.0))))))
                xtest_named_expression_assignment_12.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xspam)).apply ((xx)))))) (((xx).div (xy))))) ((xx)) ((((xrange)).apply (1) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply (1) (1.0))) ((((unsupported)).apply (2) (1.0))) ((((unsupported)).apply (3) (1.0))) ((((unsupported)).apply (4) (1.0))))))
                xtest_named_expression_assignment_13.write
                  [xself]
                    memory > xlength
                    seq > @
                      seq
                        xlength.write (((xlen)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlength)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply (1) (2))))
                xtest_named_expression_assignment_14.write
                  [xself]
                    memory > xn
                    memory > xx
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write 9
                        xn.write 2
                        xx.write 3
                        while.
                          ((xa).greater (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xa)) (((xn).sub 1))))))))
                          [unused]
                            seq > @
                              xa.write (((unsupported)).apply (((((xn).sub 1).mul (xa)).add (xd))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (1))
                xtest_named_expression_assignment_15.write
                  [xself]
                    seq > @
                      seq
                        while.
                          (((unsupported)).apply (FALSE))
                          [unused]
                            seq > @
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (FALSE))
                xtest_named_expression_assignment_16.write
                  [xself]
                    memory > xfib
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply (1) (2))))
                        xfib.write (((unsupported)).apply ((((unsupported)).apply ((xa)))) ((((((unsupported)).apply ((xb))).add (((unsupported)).apply (((xa).add (xc))))).sub (xb))) ((x__)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfib)) ((((unsupported)).apply (1) (2) (2) (3) (3) (5) (5) (8) (8) (13) (13) (21))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_named_expression_scope_01.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xNameError)) ("name 'a' is not defined"))))
                          bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_named_expression_scope_02.write
                  [xself]
                    memory > xtotal
                    memory > xpartial_sums
                    seq > @
                      seq
                        xtotal.write 0
                        xpartial_sums.write (((unsupported)).apply ((((unsupported)).apply (((xtotal).add (xv))))) ((xv)) ((((xrange)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpartial_sums)) ((((unsupported)).apply (0) (1) (3) (6) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtotal)) (10))
                xtest_named_expression_scope_03.write
                  [xself]
                    memory > xcontainsOne
                    seq > @
                      seq
                        xcontainsOne.write (((xany)).apply ((((unsupported)).apply (((((unsupported)).apply ((xnum))).eq 1)) ((xnum)) ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcontainsOne)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlastNum)) (1))
                xtest_named_expression_scope_04.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xspam)).apply ((xx)))))) (((xx).div (xy))))) ((xx)) ((((xrange)).apply (1) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy)) (4))
                xtest_named_expression_scope_05.write
                  [xself]
                    memory > xinput_data
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xinput_data.write (((unsupported)).apply (1) (2) (3))
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) (((xx).div (xy))))) ((xx)) ((xinput_data)) (((((unsupported)).apply ((((xspam)).apply ((xx))))).greater 0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply (1) (1) (1.0))) ((((unsupported)).apply (2) (2) (1.0))) ((((unsupported)).apply (3) (3) (1.0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy)) (3))
                xtest_named_expression_scope_06.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xi)))) ((xi)) ((((xrange)).apply (3))))) ((xj)) ((((xrange)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (0) (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xspam)) (2))
                xtest_named_expression_scope_07.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xlen)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply (1) (2))))
                xtest_named_expression_scope_08.write
                  [xself]
                    memory > xres
                    memory > xeggs
                    memory > xspam
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xeggs.write
                          [xb]
                            seq > @
                              (((unsupported)).apply (((xb).mul 2)))
                        xres.write (((unsupported)).apply ((((xspam)).apply ((((unsupported)).apply ((((xeggs)).apply ((((unsupported)).apply ((xh)))))))))) ((xh)) ((((xrange)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (1))
                xtest_named_expression_scope_09.write
                  [xself]
                    memory > xres
                    memory > xeggs
                    memory > xspam
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xeggs.write
                          [xb]
                            seq > @
                              (((unsupported)).apply (((xb).mul 2)))
                        xres.write (((unsupported)).apply ((((xspam)).apply ((((unsupported)).apply ((((xeggs)).apply ((((unsupported)).apply ((xh)))))))))) ((xh)) ((((xrange)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (0) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (2))
                xtest_named_expression_scope_10.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1))) ((xi)) ((((xrange)).apply (2))))))) ((xj)) ((((xrange)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((unsupported)).apply (1) (1))))
                xtest_named_expression_scope_11.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((unsupported)).apply ((((unsupported)).apply ((xi)))) ((xi)) ((((xrange)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (0) (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xj)) (4))
                xtest_named_expression_scope_17.write
                  [xself]
                    memory > xres
                    memory > xb
                    seq > @
                      seq
                        xb.write 0
                        xres.write (((unsupported)).apply ((((unsupported)).apply (((xi).add (xb))))) ((xi)) ((((xrange)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (0) (1) (3) (6) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (10))
                xtest_named_expression_scope_18.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xres.write (((xspam)).apply ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (2))
                xtest_named_expression_scope_19.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xres.write (((xspam)).apply ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (2))
                xtest_named_expression_scope_20.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ((xa)))
                        xres.write (((unsupported)).apply ((xspam)) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (2))
                xtest_named_expression_scope_21.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply (((xa).add (xb))))
                        xres.write (((unsupported)).apply ((xspam)) ((((unsupported)).apply (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (2))
                xtest_named_expression_scope_22.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply (((xa).add (xb))))
                        xres.write (((unsupported)).apply ((xspam)) ((((unsupported)).apply (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (2))
                xtest_named_expression_scope_23.write
                  [xself]
                    memory > xspam
                    memory > xres
                    seq > @
                      seq
                        xspam.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply (((xa).add (xb))))
                        xres.write (((unsupported)).apply ((xspam)) ((((unsupported)).apply (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (2))
                xtest_named_expression_scope_24.write
                  [xself]
                    memory > xspam
                    memory > xa
                    seq > @
                      seq
                        xa.write 10
                        xspam.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply (20))
                        bogusForceDataize.write (((xspam)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (20))
                xtest_named_expression_scope_25.write
                  [xself]
                    memory > xns
                    memory > xcode
                    seq > @
                      seq
                        xns.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("a"))) (20))
                xtest_named_expression_variable_reuse_in_comprehensions.write
                  [xself]
                    memory > xrebinding
                    memory > xns
                    memory > xbody_ref
                    memory > xnested_ref
                    memory > xfilter_ref
                    memory > xcases
                    seq > @
                      seq
                        xrebinding.write "[x := i for i in range(3) if (x := i) or not x]"
                        xfilter_ref.write "[x := i for i in range(3) if x or not x]"
                        xbody_ref.write "[x for i in range(3) if (x := i) or not x]"
                        xnested_ref.write "[j for i in range(3) if x or not x for j in range(3) if (x := i)][:-3]"
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("Rebind global") ("x = 1; result = {rebinding}"))) ((((unsupported)).apply ("Rebind nonlocal") ("result, x = (lambda x=1: ({rebinding}, x))()"))) ((((unsupported)).apply ("Filter global") ("x = 1; result = {filter_ref}"))) ((((unsupported)).apply ("Filter nonlocal") ("result, x = (lambda x=1: ({filter_ref}, x))()"))) ((((unsupported)).apply ("Body global") ("x = 1; result = {body_ref}"))) ((((unsupported)).apply ("Body nonlocal") ("result, x = (lambda x=1: ({body_ref}, x))()"))) ((((unsupported)).apply ("Nested global") ("x = 1; result = {nested_ref}"))) ((((unsupported)).apply ("Nested nonlocal") ("result, x = (lambda x=1: ({nested_ref}, x))()"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcase)) ((xcode)))) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)))))
                            seq
                              xns.write (((unsupported)).apply)
                              bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("x"))) (2))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("result"))) ((((unsupported)).apply (0) (1) (2))))
                xtest_named_expression_global_scope.write
                  [xself]
                    memory > xGLOBAL_VAR
                    memory > xf
                    memory > xsentinel
                    seq > @
                      seq
                        xsentinel.write (((xobject)).apply)
                        (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xsentinel)))) ((x_)) ((((xrange)).apply (1))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xGLOBAL_VAR)) ((xsentinel)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xf)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xGLOBAL_VAR)) ((xsentinel)))
                          xGLOBAL_VAR.write "None: is there a None literal in the EO language?"
                xtest_named_expression_global_scope_no_global_keyword.write
                  [xself]
                    memory > xf
                    memory > xsentinel
                    seq > @
                      seq
                        xsentinel.write (((xobject)).apply)
                        xf.write
                          []
                            memory > xGLOBAL_VAR
                            seq > @
                              seq
                                xGLOBAL_VAR.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((((unsupported)).apply ((xsentinel)))) ((x_)) ((((xrange)).apply (1))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xGLOBAL_VAR)) ((xsentinel)))
                        bogusForceDataize.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xGLOBAL_VAR)) ("None: is there a None literal in the EO language?"))
                xtest_named_expression_nonlocal_scope.write
                  [xself]
                    memory > xf
                    memory > xsentinel
                    seq > @
                      seq
                        xsentinel.write (((xobject)).apply)
                        xf.write
                          []
                            memory > xg
                            memory > xnonlocal_var
                            seq > @
                              seq
                                xnonlocal_var.write "None: is there a None literal in the EO language?"
                                xg.write
                                  []
                                    seq > @
                                      seq
                                        (((unsupported)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xsentinel)))) ((x_)) ((((xrange)).apply (1))))
                                bogusForceDataize.write (((xg)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnonlocal_var)) ((xsentinel)))
                        bogusForceDataize.write (((xf)).apply)
                xtest_named_expression_nonlocal_scope_no_nonlocal_keyword.write
                  [xself]
                    memory > xf
                    memory > xsentinel
                    seq > @
                      seq
                        xsentinel.write (((xobject)).apply)
                        xf.write
                          []
                            memory > xg
                            memory > xnonlocal_var
                            seq > @
                              seq
                                xnonlocal_var.write "None: is there a None literal in the EO language?"
                                xg.write
                                  []
                                    seq > @
                                      (((unsupported)).apply ((((unsupported)).apply ((xsentinel)))) ((x_)) ((((xrange)).apply (1))))
                                bogusForceDataize.write (((xg)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnonlocal_var)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xf)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)