memory > xbyteorder
memory > xvalue
memory > xinput
memory > xunittest
memory > xkwargs
memory > xcm
memory > xarray
memory > xtp
memory > xc
memory > xexpected
memory > xdata
memory > xbits
memory > xformatcode
memory > xlil
memory > xExplodingBool
memory > xasy
memory > xValueError
memory > xabc
memory > xstr
memory > xxfmt
memory > xbp
memory > xfmt
memory > xt
memory > xBadIndex
memory > xhp
memory > xrange
memory > xmath
memory > xbytearray
memory > xprefix
memory > xStopIteration
memory > xdp
memory > xbase
memory > xip
memory > xIntTester
memory > xincr
memory > xbig
memory > xf
memory > xrandrange
memory > xint
memory > xle_bits
memory > xformat_pair
memory > xcode
memory > xOverflowError
memory > xIndexable
memory > xoperator
memory > xi
memory > xstruct
memory > xarg
memory > xsuper
memory > xsupport
memory > xsys
memory > xNotAnInt
memory > xs
memory > xbytes
memory > xtuple
memory > xcp
memory > xexp
memory > xfloat
memory > xcls
memory > xargs
memory > xOSError
memory > xobj
memory > xexpectedback
memory > xlp
memory > xnext
memory > xobject
memory > xmemoryview
memory > xj
memory > xlen
memory > xfp
memory > xTypeError
memory > x__name__
[] > test_struct
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xstring_reverse
        memory > xtest_nN_code
        memory > xtest_Struct_reinitialization
        memory > xtest_transitiveness
        memory > xtest_bool
        memory > xtest_integers
        memory > xtest_unpack_from
        memory > xtest_format_attr
        memory > xtest_p_code
        memory > xtest_boundary_error_message_with_large_offset
        memory > xtest_pack_into
        memory > xtest_1530559
        memory > xtest_construct
        memory > xtest_module_func
        memory > xtest_count_overflow
        memory > xtest_issue29802
        memory > xtest_half_float
        memory > xtest__sizeof__
        memory > xtest_length_hint
        memory > xiter_integer_formats
        memory > xtest_consistence
        memory > xtest_trailing_counter
        memory > xtest_iterate
        memory > xtest_boundary_error_message_with_negative_offset
        memory > xtest_arbitrary_buffer
        memory > xtest_unpack_with_buffer
        memory > xtest_isbigendian
        memory > xISBIGENDIAN
        memory > xtest_pack_into_fn
        memory > xinteger_codes
        memory > xbyteorders
        memory > xcheck_sizeof
        memory > xtest_issue35714
        memory > xtest_705836
        memory > xtest_calcsize
        memory > xbigendian_to_native
        memory > xtest_boundary_error_message
        memory > xtest_new_features
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xISBIGENDIAN.write (((xsys).xbyteorder).eq "big")
            xinteger_codes.write (((unsupported)).apply ("b") ("B") ("h") ("H") ("i") ("I") ("l") ("L") ("q") ("Q") ("n") ("N"))
            xbyteorders.write (((unsupported)).apply ("") ("@") ("=") ("<") (">") ("!"))
            xiter_integer_formats.write
              [xbyteorders]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xcode)) ((xinteger_codes)))
                      (((unsupported)).apply ((xbyteorder)) ((xbyteorders)))
                        seq
                          ((((unsupported)).apply ((xbyteorder)) ((((unsupported)).apply ("") ("@")))).and (((unsupported)).apply ((xcode)) ((((unsupported)).apply ("n") ("N"))))).if
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xbyteorder)))))
            xstring_reverse.write
              [xs]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((1.neg)))))))
            xbigendian_to_native.write
              [xvalue]
                seq > @
                  (xISBIGENDIAN).if
                    (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((xstring_reverse)).apply ((xvalue)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_isbigendian.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((xstruct).xpack)).apply ("=i") (1))) (0)).eq 0)) ((xISBIGENDIAN)))
                xtest_consistence.write
                  [xself]
                    memory > xsz
                    memory > xfmt
                    memory > xsz3
                    memory > xfmt3
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xcalcsize)) ("Z"))
                        xsz.write ((((xstruct).xcalcsize)).apply ("i"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsz).mul 3)) (((((xstruct).xcalcsize)).apply ("iii"))))
                        xfmt.write "cbxxxxxxhhhhiillffd?"
                        xfmt3.write "3c3b18x12h6i6l6f3d3?"
                        xsz.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                        xsz3.write ((((xstruct).xcalcsize)).apply ((xfmt3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsz).mul 3)) ((xsz3)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("iii") (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("i") (3) (3) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) ("i") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) ("P") ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("d") ("flap"))
                        xs.write ((((xstruct).xpack)).apply ("ii") (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("iii") ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("i") ((xs)))
                xtest_transitiveness.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xt
                    memory > xl
                    memory > xf
                    memory > xi
                    memory > xs
                    memory > xformat
                    memory > xh
                    memory > xb
                    seq > @
                      seq
                        xc.write "a"
                        xb.write 1
                        xh.write 255
                        xi.write 65535
                        xl.write 65536
                        xf.write 3.1415
                        xd.write 3.1415
                        xt.write TRUE
                        (((unsupported)).apply ((xprefix)) ((((unsupported)).apply ("") ("@") ("<") (">") ("=") ("!"))))
                          (((unsupported)).apply ((xformat)) ((((unsupported)).apply ("xcbhilfd?") ("xcBHILfd?"))))
                            seq
                              xformat.write ((xprefix).sub (xformat))
                              xs.write ((((xstruct).xpack)).apply ((xformat)) ((xc)) ((xb)) ((xh)) ((xi)) ((xl)) ((xf)) ((xd)) ((xt)))
                              (((unsupported)).apply ((((unsupported)).apply ((xcp)) ((xbp)) ((xhp)) ((xip)) ((xlp)) ((xfp)) ((xdp)) ((xtp)))) (((((xstruct).xunpack)).apply ((xformat)) ((xs)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcp)) ((xc)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbp)) ((xb)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhp)) ((xh)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xip)) ((xi)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlp)) ((xl)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((100.mul (xfp))))) ((((xint)).apply ((100.mul (xf))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((100.mul (xdp))))) ((((xint)).apply ((100.mul (xd))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtp)) ((xt)))
                xtest_new_features.write
                  [xself]
                    memory > xtests
                    memory > xres
                    memory > xrev
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("c") ("a") ("a") ("a") (0))) ((((unsupported)).apply ("xc") ("a") ("0a") ("0a") (0))) ((((unsupported)).apply ("cx") ("a") ("a0") ("a0") (0))) ((((unsupported)).apply ("s") ("a") ("a") ("a") (0))) ((((unsupported)).apply ("0s") ("helloworld") ("") ("") (1))) ((((unsupported)).apply ("1s") ("helloworld") ("h") ("h") (1))) ((((unsupported)).apply ("9s") ("helloworld") ("helloworl") ("helloworl") (1))) ((((unsupported)).apply ("10s") ("helloworld") ("helloworld") ("helloworld") (0))) ((((unsupported)).apply ("11s") ("helloworld") ("helloworld0") ("helloworld0") (1))) ((((unsupported)).apply ("20s") ("helloworld") (("helloworld".sub (10.mul "0"))) (("helloworld".sub (10.mul "0"))) (1))) ((((unsupported)).apply ("b") (7) ("7") ("7") (0))) ((((unsupported)).apply ("b") ((7.neg)) ("371") ("371") (0))) ((((unsupported)).apply ("B") (7) ("7") ("7") (0))) ((((unsupported)).apply ("B") (249) ("371") ("371") (0))) ((((unsupported)).apply ("h") (700) ("002274") ("274002") (0))) ((((unsupported)).apply ("h") ((700.neg)) ("375D") ("D375") (0))) ((((unsupported)).apply ("H") (700) ("002274") ("274002") (0))) ((((unsupported)).apply ("H") ((65536.sub 700)) ("375D") ("D375") (0))) ((((unsupported)).apply ("i") (70000000) ("004,035200") ("200035,004") (0))) ((((unsupported)).apply ("i") ((70000000.neg)) ("373323342200") ("200342323373") (0))) ((((unsupported)).apply ("I") (70000000) ("004,035200") ("200035,004") (0))) ((((unsupported)).apply ("I") (((((unsupported)).apply).sub 70000000)) ("373323342200") ("200342323373") (0))) ((((unsupported)).apply ("l") (70000000) ("004,035200") ("200035,004") (0))) ((((unsupported)).apply ("l") ((70000000.neg)) ("373323342200") ("200342323373") (0))) ((((unsupported)).apply ("L") (70000000) ("004,035200") ("200035,004") (0))) ((((unsupported)).apply ("L") (((((unsupported)).apply).sub 70000000)) ("373323342200") ("200342323373") (0))) ((((unsupported)).apply ("f") (2.0) ("@000000000") ("000000000@") (0))) ((((unsupported)).apply ("d") (2.0) ("@000000000000000000000") ("000000000000000000000@") (0))) ((((unsupported)).apply ("f") ((2.0.neg)) ("300000000000") ("000000000300") (0))) ((((unsupported)).apply ("d") ((2.0.neg)) ("300000000000000000000000") ("000000000000000000000300") (0))) ((((unsupported)).apply ("?") (0) ("0") ("0") (0))) ((((unsupported)).apply ("?") (3) ("1") ("1") (1))) ((((unsupported)).apply ("?") (TRUE) ("1") ("1") (0))) ((((unsupported)).apply ("?") ((((unsupported)).apply)) ("0") ("0") (1))) ((((unsupported)).apply ("?") ((((unsupported)).apply (1))) ("1") ("1") (1))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xarg)) ((xbig)) ((xlil)) ((xasy)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply ((xxfmt)) ((xexp)))) ((((unsupported)).apply ((((unsupported)).apply ((">".sub (xfmt))) ((xbig)))) ((((unsupported)).apply (("!".sub (xfmt))) ((xbig)))) ((((unsupported)).apply (("<".sub (xfmt))) ((xlil)))) ((((unsupported)).apply (("=".sub (xfmt))) ((((xISBIGENDIAN).and (xbig)).or (xlil))))))))
                            seq
                              xres.write ((((xstruct).xpack)).apply ((xxfmt)) ((xarg)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xexp)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xcalcsize)).apply ((xxfmt)))) ((((xlen)).apply ((xres)))))
                              xrev.write (((unsupported)).apply (((((xstruct).xunpack)).apply ((xxfmt)) ((xres)))) (0))
                              ((xrev).neq (xarg)).if
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((xasy)))
                xtest_calcsize.write
                  [xself]
                    memory > xnative_pairs
                    memory > xsize
                    memory > xunsigned_size
                    memory > xsigned_size
                    memory > xexpected_size
                    memory > xformat
                    seq > @
                      seq
                        xexpected_size.write (((unsupported)).apply ("b") (1) ("B") (1) ("h") (2) ("H") (2) ("i") (4) ("I") (4) ("l") (4) ("L") (4) ("q") (8) ("Q") (8))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xbyteorder)))) ((((xiter_integer_formats)).apply ((((unsupported)).apply ("=") ("<") (">") ("!"))))))
                          seq
                            xformat.write ((xbyteorder).sub (xcode))
                            xsize.write ((((xstruct).xcalcsize)).apply ((xformat)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsize)) ((((unsupported)).apply ((xexpected_size)) ((xcode)))))
                        xnative_pairs.write (((unsupported)).apply ("bB") ("hH") ("iI") ("lL") ("nN") ("qQ"))
                        (((unsupported)).apply ((xformat_pair)) ((xnative_pairs)))
                          (((unsupported)).apply ((xbyteorder)) ((((unsupported)).apply ("") ("@"))))
                            seq
                              xsigned_size.write ((((xstruct).xcalcsize)).apply (((xbyteorder).sub (((unsupported)).apply ((xformat_pair)) (0)))))
                              xunsigned_size.write ((((xstruct).xcalcsize)).apply (((xbyteorder).sub (((unsupported)).apply ((xformat_pair)) (1)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsigned_size)) ((xunsigned_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xcalcsize)).apply ("b"))) (1))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (2) (((((xstruct).xcalcsize)).apply ("h"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (4) (((((xstruct).xcalcsize)).apply ("l"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((((xstruct).xcalcsize)).apply ("h"))) (((((xstruct).xcalcsize)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((((xstruct).xcalcsize)).apply ("i"))) (((((xstruct).xcalcsize)).apply ("l"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (8) (((((xstruct).xcalcsize)).apply ("q"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((((xstruct).xcalcsize)).apply ("l"))) (((((xstruct).xcalcsize)).apply ("q"))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((((xstruct).xcalcsize)).apply ("n"))) (((((xstruct).xcalcsize)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((((xstruct).xcalcsize)).apply ("n"))) (((((xstruct).xcalcsize)).apply ("P"))))
                xtest_integers.write
                  [xself]
                    memory > xt
                    memory > xrun
                    memory > xtest_one
                    memory > x__init__
                    memory > xformat
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xunittest).xTestCase)))
                          seq
                            x__init__.write
                              [xself xformat]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((((xsuper)).apply ((xIntTester)) ((xself))).x__init__)) ("test_one"))
                                    (((unsupported)).apply (((xself).xformat)) ((xformat)))
                                    (((unsupported)).apply (((xself).xcode)) ((((unsupported)).apply ((xformat)) ((1.neg)))))
                                    (((unsupported)).apply (((xself).xbyteorder)) ((((unsupported)).apply ((xformat)) ((((unsupported)).apply ((1.neg)))))))
                                    ((((unsupported)).apply (((xself).xbyteorder)) ((xbyteorders))).not).if
                                      (((unsupported)).apply ((((xValueError)).apply (("unrecognized packing byteorder: %s".mod ((xself).xbyteorder))))))
                                    (((unsupported)).apply (((xself).xbytesize)) (((((xstruct).xcalcsize)).apply ((xformat)))))
                                    (((unsupported)).apply (((xself).xbitsize)) ((((xself).xbytesize).mul 8)))
                                    (((unsupported)).apply (((xself).xcode)) ((((xtuple)).apply ("bhilqn")))).if
                                      seq
                                        (((unsupported)).apply (((xself).xsigned)) (TRUE))
                                        (((unsupported)).apply (((xself).xmin_value)) (((((unsupported)).apply (2) ((((xself).xbitsize).sub 1))).neg)))
                                        (((unsupported)).apply (((xself).xmax_value)) (((((unsupported)).apply (2) ((((xself).xbitsize).sub 1))).sub 1)))
                                      (((unsupported)).apply (((xself).xcode)) ((((xtuple)).apply ("BHILQN")))).if
                                        seq
                                          (((unsupported)).apply (((xself).xsigned)) (FALSE))
                                          (((unsupported)).apply (((xself).xmin_value)) (0))
                                          (((unsupported)).apply (((xself).xmax_value)) (((((unsupported)).apply (2) (((xself).xbitsize))).sub 1)))
                                        (((unsupported)).apply ((((xValueError)).apply (("unrecognized format code: %s".mod ((xself).xcode))))))
                            xtest_one.write
                              [xself xx xpack xunpack xunhexlify]
                                memory > xretrieved
                                memory > xexpected
                                memory > xgot
                                memory > xformat
                                seq > @
                                  (((unsupported)).apply)
                                    xformat.write ((xself).xformat)
                                    (((unsupported)).apply (((xself).xmin_value)) ((xx)) (((xself).xmax_value))).if
                                      seq
                                        xexpected.write (xx)
                                        (((xself).xsigned).and ((xx).less 0)).if
                                          (((unsupported)).apply ((xexpected)) ((((unsupported)).apply (1) (((xself).xbitsize)))))
                                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xexpected)) (0))
                                        xexpected.write ("%x".mod (xexpected))
                                        ((((xlen)).apply ((xexpected))).and 1).if
                                          xexpected.write ("0".sub (xexpected))
                                        xexpected.write ((((xexpected).xencode)).apply ("ascii"))
                                        xexpected.write (((xunhexlify)).apply ((xexpected)))
                                        xexpected.write (("x00".mul (((xself).xbytesize).sub (((xlen)).apply ((xexpected))))).sub (xexpected))
                                        ((((xself).xbyteorder).eq "<").or ((((unsupported)).apply (((xself).xbyteorder)) ((((unsupported)).apply ("") ("@") ("=")))).and ((xISBIGENDIAN).not))).if
                                          xexpected.write (((xstring_reverse)).apply ((xexpected)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexpected)))) (((xself).xbytesize)))
                                        xgot.write (((xpack)).apply ((xformat)) ((xx)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                                        xretrieved.write (((unsupported)).apply ((((xunpack)).apply ((xformat)) ((xgot)))) (0))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xretrieved)))
                                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply (((xstruct).xerror)) ((xTypeError)))) ((xunpack)) ((xformat)) (("x01".sub (xgot))))
                                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xValueError)) (((xstruct).xerror)))) ((xpack)) ((xformat)) ((xx)))
                            xrun.write
                              [xself]
                                memory > xvalues
                                memory > x__index__
                                memory > xx
                                memory > x__int__
                                memory > x__init__
                                memory > xval
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                    xvalues.write (((unsupported)).apply)
                                    (((unsupported)).apply ((xexp)) ((((xrange)).apply ((((xself).xbitsize).sub 3)))))
                                      bogusForceDataize.write ((((xvalues).xappend)).apply ((((unsupported)).apply (1) ((xexp)))))
                                    (((unsupported)).apply ((xi)) ((((xrange)).apply (((xself).xbitsize)))))
                                      seq
                                        xval.write 0
                                        (((unsupported)).apply ((xj)) ((((xrange)).apply (((xself).xbytesize)))))
                                          xval.write ((((unsupported)).apply ((xval)) (8)).or (((xrandrange)).apply (256)))
                                        bogusForceDataize.write ((((xvalues).xappend)).apply ((xval)))
                                    bogusForceDataize.write ((((xvalues).xextend)).apply ((((unsupported)).apply (300) (700000) ((((xsys).xmaxsize).mul 4)))))
                                    (((unsupported)).apply ((xbase)) ((xvalues)))
                                      (((unsupported)).apply ((xval)) ((((unsupported)).apply (((xbase).neg)) ((xbase)))))
                                        (((unsupported)).apply ((xincr)) ((((unsupported)).apply ((1.neg)) (0) (1))))
                                          seq
                                            xx.write ((xval).sub (xincr))
                                            bogusForceDataize.write ((((xself).xtest_one)).apply ((xx)))
                                    (((unsupported)).apply)
                                      x__int__.write
                                        [xself]
                                          seq > @
                                            (((unsupported)).apply (42))
                                    (((unsupported)).apply ((xobject)))
                                      seq
                                        x__init__.write
                                          [xself xvalue]
                                            seq > @
                                              (((unsupported)).apply (((xself).x_value)) ((xvalue)))
                                        x__index__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply (((xself).x_value)))
                                    (((unsupported)).apply ((xobject)))
                                      seq
                                        x__index__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply ((xTypeError)))
                                        x__int__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply (42))
                                    bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ("a string"))
                                    bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ((xrandrange)))
                                    bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ((3.sub (((unsupported)).apply))))
                                    bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ((((xNotAnInt)).apply)))
                                    bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ((((xBadIndex)).apply)))
                                    (((unsupported)).apply ((xobj)) ((((unsupported)).apply ((((xIndexable)).apply (0))) ((((xIndexable)).apply (10))) ((((xIndexable)).apply (17))) ((((xIndexable)).apply (42))) ((((xIndexable)).apply (100))) ((((xIndexable)).apply (127))))))
                                      (((unsupported)).apply)
                                        bogusForceDataize.write ((((xstruct).xpack)).apply ((xformat)) ((xobj)))
                                        bogusForceDataize.write ((((xself).xfail)).apply ("integer code pack failed on object with '__index__' method"))
                                    (((unsupported)).apply ((xobj)) ((((unsupported)).apply ((((xIndexable)).apply ("a"))) ((((xIndexable)).apply ("b"))) ((((xIndexable)).apply ("None: is there a None literal in the EO language?"))) ((((xIndexable)).apply ((((unsupported)).apply ("a") (1))))) ((((xIndexable)).apply ((((unsupported)).apply (1) (2) (3))))))))
                                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack)) (((xself).xformat)) ((xobj)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xbyteorder)))) ((((xiter_integer_formats)).apply)))
                          seq
                            xformat.write ((xbyteorder).sub (xcode))
                            xt.write (((xIntTester)).apply ((xformat)))
                            bogusForceDataize.write ((((xt).xrun)).apply)
                xtest_nN_code.write
                  [xself]
                    memory > xassertStructError
                    memory > xformat
                    seq > @
                      seq
                        xassertStructError.write
                          [xfunc]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaises)).apply (((xstruct).xerror)))) ((xcm)))
                                  bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("bad char in struct format") ((((xstr)).apply (((xcm).xexception)))))
                        (((unsupported)).apply ((xcode)) ("nN"))
                          (((unsupported)).apply ((xbyteorder)) ((((unsupported)).apply ("=") ("<") (">") ("!"))))
                            seq
                              xformat.write ((xbyteorder).sub (xcode))
                              bogusForceDataize.write (((xassertStructError)).apply (((xstruct).xcalcsize)) ((xformat)))
                              bogusForceDataize.write (((xassertStructError)).apply (((xstruct).xpack)) ((xformat)) (0))
                              bogusForceDataize.write (((xassertStructError)).apply (((xstruct).xunpack)) ((xformat)) (""))
                xtest_p_code.write
                  [xself]
                    memory > xgot
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xinput)) ((xexpected)) ((xexpectedback)))) ((((unsupported)).apply ((((unsupported)).apply ("p") ("abc") ("x00") (""))) ((((unsupported)).apply ("1p") ("abc") ("x00") (""))) ((((unsupported)).apply ("2p") ("abc") ("x01a") ("a"))) ((((unsupported)).apply ("3p") ("abc") ("x02ab") ("ab"))) ((((unsupported)).apply ("4p") ("abc") ("x03abc") ("abc"))) ((((unsupported)).apply ("5p") ("abc") ("x03abcx00") ("abc"))) ((((unsupported)).apply ("6p") ("abc") ("x03abcx00x00") ("abc"))) ((((unsupported)).apply ("1000p") (("x".mul 1000)) (("xff".sub ("x".mul 999))) (("x".mul 255)))))))
                        seq
                          xgot.write ((((xstruct).xpack)).apply ((xcode)) ((xinput)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                          (((unsupported)).apply ((((unsupported)).apply ((xgot)))) (((((xstruct).xunpack)).apply ((xcode)) ((xgot)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpectedback)))
                xtest_705836.write
                  [xself]
                    memory > xbig
                    memory > xpacked
                    memory > xsmaller
                    memory > xunpacked
                    memory > xbigpacked
                    memory > xdelta
                    seq > @
                      seq
                        (((unsupported)).apply ((xbase)) ((((xrange)).apply (1) (33))))
                          seq
                            xdelta.write 0.5
                            while.
                              (((xbase).sub ((xdelta).div 2.0)).neq (xbase))
                              [unused]
                                seq > @
                                  (((unsupported)).apply ((xdelta)) (2.0))
                            xsmaller.write ((xbase).sub (xdelta))
                            xpacked.write ((((xstruct).xpack)).apply ("<f") ((xsmaller)))
                            xunpacked.write (((unsupported)).apply (((((xstruct).xunpack)).apply ("<f") ((xpacked)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbase)) ((xunpacked)))
                            xbigpacked.write ((((xstruct).xpack)).apply (">f") ((xsmaller)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbigpacked)) ((((xstring_reverse)).apply ((xpacked)))))
                            xunpacked.write (((unsupported)).apply (((((xstruct).xunpack)).apply (">f") ((xbigpacked)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbase)) ((xunpacked)))
                        xbig.write ((((unsupported)).apply (1) (24)).sub 1)
                        xbig.write ((((xmath).xldexp)).apply ((xbig)) ((127.sub 23)))
                        xpacked.write ((((xstruct).xpack)).apply (">f") ((xbig)))
                        xunpacked.write (((unsupported)).apply (((((xstruct).xunpack)).apply (">f") ((xpacked)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbig)) ((xunpacked)))
                        xbig.write ((((unsupported)).apply (1) (25)).sub 1)
                        xbig.write ((((xmath).xldexp)).apply ((xbig)) ((127.sub 24)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xstruct).xpack)) (">f") ((xbig)))
                xtest_1530559.write
                  [xself]
                    memory > xformat
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xbyteorder)))) ((((xiter_integer_formats)).apply)))
                          seq
                            xformat.write ((xbyteorder).sub (xcode))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ((xformat)) (1.0))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ((xformat)) (1.5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("P") (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("P") (1.5))
                xtest_unpack_from.write
                  [xself]
                    memory > xs
                    memory > xtest_string
                    memory > xfmt
                    memory > xdata
                    seq > @
                      seq
                        xtest_string.write "abcd01234"
                        xfmt.write "4s"
                        xs.write ((((xstruct).xStruct)).apply ((xfmt)))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          seq
                            xdata.write (((xcls)).apply ((xtest_string)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xunpack_from)).apply ((xdata)))) ((((unsupported)).apply ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xunpack_from)).apply ((xdata)) (2))) ((((unsupported)).apply ("cd01"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xunpack_from)).apply ((xdata)) (4))) ((((unsupported)).apply ("0123"))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (6))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xunpack_from)).apply ((xdata)) ((xi)))) ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xi)) (((xi).sub 4)))))))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (6) (((((xlen)).apply ((xtest_string))).sub 1)))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xs).xunpack_from)) ((xdata)) ((xi)))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          seq
                            xdata.write (((xcls)).apply ((xtest_string)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xdata)))) ((((unsupported)).apply ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xdata)) (2))) ((((unsupported)).apply ("cd01"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xdata)) (4))) ((((unsupported)).apply ("0123"))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (6))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xdata)) ((xi)))) ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xi)) (((xi).sub 4)))))))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (6) (((((xlen)).apply ((xtest_string))).sub 1)))))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack_from)) ((xfmt)) ((xdata)) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xs).xunpack_from)) ((xtest_string)) (2))) ((((unsupported)).apply ("cd01"))))
                xtest_pack_into.write
                  [xself]
                    memory > xfrom_buf
                    memory > xsb
                    memory > xfmt
                    memory > xwritable_buf
                    memory > xsmall_buf
                    memory > xs
                    memory > xtest_string
                    seq > @
                      seq
                        xtest_string.write "Reykjavik rocks, eow!"
                        xwritable_buf.write ((((xarray).xarray)).apply ("b") ((" ".mul 100)))
                        xfmt.write "21s"
                        xs.write ((((xstruct).xStruct)).apply ((xfmt)))
                        bogusForceDataize.write ((((xs).xpack_into)).apply ((xwritable_buf)) (0) ((xtest_string)))
                        xfrom_buf.write (((unsupported)).apply (((((xwritable_buf).xtobytes)).apply)) ((((unsupported)).apply ((((xlen)).apply ((xtest_string)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfrom_buf)) ((xtest_string)))
                        bogusForceDataize.write ((((xs).xpack_into)).apply ((xwritable_buf)) (10) ((xtest_string)))
                        xfrom_buf.write (((unsupported)).apply (((((xwritable_buf).xtobytes)).apply)) ((((unsupported)).apply (((((xlen)).apply ((xtest_string))).sub 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfrom_buf)) (((((unsupported)).apply ((xtest_string)) ((((unsupported)).apply (10)))).sub (xtest_string))))
                        xsmall_buf.write ((((xarray).xarray)).apply ("b") ((" ".mul 10)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) (((xstruct).xerror)))) (((xs).xpack_into)) ((xsmall_buf)) (0) ((xtest_string)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) (((xstruct).xerror)))) (((xs).xpack_into)) ((xsmall_buf)) (2) ((xtest_string)))
                        xsb.write (xsmall_buf)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) (((xstruct).xerror)))) (((xstruct).xpack_into)) ("") ((xsb)) ("None: is there a None literal in the EO language?"))
                xtest_pack_into_fn.write
                  [xself]
                    memory > xfrom_buf
                    memory > xfmt
                    memory > xpack_into
                    memory > xwritable_buf
                    memory > xsmall_buf
                    memory > xtest_string
                    seq > @
                      seq
                        xtest_string.write "Reykjavik rocks, eow!"
                        xwritable_buf.write ((((xarray).xarray)).apply ("b") ((" ".mul 100)))
                        xfmt.write "21s"
                        xpack_into.write (((unsupported)).apply (((((xstruct).xpack_into)).apply ((xfmt)) ((((unsupported)).apply ((xargs)))))))
                        bogusForceDataize.write (((xpack_into)).apply ((xwritable_buf)) (0) ((xtest_string)))
                        xfrom_buf.write (((unsupported)).apply (((((xwritable_buf).xtobytes)).apply)) ((((unsupported)).apply ((((xlen)).apply ((xtest_string)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfrom_buf)) ((xtest_string)))
                        bogusForceDataize.write (((xpack_into)).apply ((xwritable_buf)) (10) ((xtest_string)))
                        xfrom_buf.write (((unsupported)).apply (((((xwritable_buf).xtobytes)).apply)) ((((unsupported)).apply (((((xlen)).apply ((xtest_string))).sub 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfrom_buf)) (((((unsupported)).apply ((xtest_string)) ((((unsupported)).apply (10)))).sub (xtest_string))))
                        xsmall_buf.write ((((xarray).xarray)).apply ("b") ((" ".mul 10)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) (((xstruct).xerror)))) ((xpack_into)) ((xsmall_buf)) (0) ((xtest_string)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) (((xstruct).xerror)))) ((xpack_into)) ((xsmall_buf)) (2) ((xtest_string)))
                xtest_unpack_with_buffer.write
                  [xself]
                    memory > xdata1
                    memory > xdata2
                    seq > @
                      seq
                        xdata1.write ((((xarray).xarray)).apply ("B") ("x12x34x56x78"))
                        xdata2.write (((xmemoryview)).apply ("x12x34x56x78"))
                        (((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xdata1)) ((xdata2)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xvalue)))) (((((xstruct).xunpack)).apply (">I") ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) (305419896))
                xtest_bool.write
                  [xself]
                    memory > xfalse
                    memory > xunpackedFalse
                    memory > xtrueFormat
                    memory > xpackedFalse
                    memory > xunpackedTrue
                    memory > xpacked
                    memory > x__bool__
                    memory > xpackedTrue
                    memory > xtrue
                    memory > xfalseFormat
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__bool__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xOSError)))
                        (((unsupported)).apply ((xprefix)) (((((xtuple)).apply ("<>!=")).sub (((unsupported)).apply ("")))))
                          seq
                            xfalse.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("") (0))
                            xtrue.write (((unsupported)).apply ((((unsupported)).apply (1))) ("test") (5) ((1.neg)) (((((unsupported)).apply).sub 1)) (((((unsupported)).apply).div 2)))
                            xfalseFormat.write ((xprefix).sub ("?".mul (((xlen)).apply ((xfalse)))))
                            xpackedFalse.write ((((xstruct).xpack)).apply ((xfalseFormat)) ((((unsupported)).apply ((xfalse)))))
                            xunpackedFalse.write ((((xstruct).xunpack)).apply ((xfalseFormat)) ((xpackedFalse)))
                            xtrueFormat.write ((xprefix).sub ("?".mul (((xlen)).apply ((xtrue)))))
                            xpackedTrue.write ((((xstruct).xpack)).apply ((xtrueFormat)) ((((unsupported)).apply ((xtrue)))))
                            xunpackedTrue.write ((((xstruct).xunpack)).apply ((xtrueFormat)) ((xpackedTrue)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtrue)))) ((((xlen)).apply ((xunpackedTrue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xfalse)))) ((((xlen)).apply ((xunpackedFalse)))))
                            (((unsupported)).apply ((xt)) ((xunpackedFalse)))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((xt)))
                            (((unsupported)).apply ((xt)) ((xunpackedTrue)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xt)))
                            xpacked.write ((((xstruct).xpack)).apply (((xprefix).sub "?")) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xpacked)))) (((((xstruct).xcalcsize)).apply (((xprefix).sub "?")))))
                            ((((xlen)).apply ((xpacked))).neq 1).if
                              (((unsupported)).apply (((xself).xassertFalse)) ((xprefix)) (("encoded bool is not one byte: %r".mod (xpacked))))
                            (((unsupported)).apply ((xOSError)))
                              bogusForceDataize.write ((((xstruct).xpack)).apply (((xprefix).sub "?")) ((((xExplodingBool)).apply)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("Expected OSError: struct.pack(%r, ExplodingBool())".mod ((xprefix).sub "?"))))
                        (((unsupported)).apply ((xc)) ((((unsupported)).apply ("x01") ("x7f") ("xff") ("x0f") ("xf0"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((((xstruct).xunpack)).apply (">?") ((xc)))) (0))))
                xtest_count_overflow.write
                  [xself]
                    memory > xhugecount2
                    memory > xhugecount
                    seq > @
                      seq
                        xhugecount.write ((("{}b".xformat)).apply ((((xsys).xmaxsize).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xcalcsize)) ((xhugecount)))
                        xhugecount2.write ((("{}b{}H".xformat)).apply ((((unsupported)).apply (((xsys).xmaxsize)) (2))) ((((unsupported)).apply (((xsys).xmaxsize)) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xcalcsize)) ((xhugecount2)))
                xtest_trailing_counter.write
                  [xself]
                    memory > xstore
                    seq > @
                      seq
                        xstore.write ((((xarray).xarray)).apply ("b") ((" ".mul 100)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("12345"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("12345") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack_into)) ("12345") ((xstore)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack_from)) ("12345") ((xstore)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("c12345") ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("c12345") ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack_into)) ("c12345") ((xstore)) (0) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack_from)) ("c12345") ((xstore)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack)) ("14s42") ("spam and eggs"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack)) ("14s42") ("spam and eggs"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xpack_into)) ("14s42") ((xstore)) (0) ("spam and eggs"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xstruct).xunpack_from)) ("14s42") ((xstore)) (0))
                xtest_Struct_reinitialization.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xstruct).xStruct)).apply ("i"))
                        bogusForceDataize.write ((((xs).x__init__)).apply ("ii"))
                xcheck_sizeof.write
                  [xself xformat_str xnumber_of_codes]
                    memory > xtotalsize
                    seq > @
                      seq
                        xtotalsize.write ((((xsupport).xcalcobjsize)).apply ("2n3P"))
                        (((unsupported)).apply ((xtotalsize)) ((((((xstruct).xcalcsize)).apply ("P3n0P")).mul ((xnumber_of_codes).sub 1))))
                        bogusForceDataize.write ((((xsupport).xcheck_sizeof)).apply ((xself)) (((((xstruct).xStruct)).apply ((xformat_str)))) ((xtotalsize)))
                xtest__sizeof__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcode)) ((xinteger_codes)))
                          bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ((xcode)) (1))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("BHILfdspP") (9))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply (("B".mul 1234)) (1234))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("fd") (2))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("xxxxxxxxxxxxxx") (0))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("100H") (1))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("187s") (1))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("20p") (1))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("0s") (1))
                        bogusForceDataize.write ((((xself).xcheck_sizeof)).apply ("0c") (0))
                xtest_boundary_error_message.write
                  [xself]
                    memory > xregex1
                    memory > xregex2
                    seq > @
                      seq
                        xregex1.write "pack_into requires a buffer of at least 6 bytes for packing 1 bytes at offset 5 (actual buffer size is 1)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ((xregex1)))))
                          bogusForceDataize.write ((((xstruct).xpack_into)).apply ("b") ((((xbytearray)).apply (1))) (5) (1))
                        xregex2.write "unpack_from requires a buffer of at least 6 bytes for unpacking 1 bytes at offset 5 (actual buffer size is 1)"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ((xregex2)))))
                          bogusForceDataize.write ((((xstruct).xunpack_from)).apply ("b") ((((xbytearray)).apply (1))) (5))
                xtest_boundary_error_message_with_negative_offset.write
                  [xself]
                    memory > xbyte_list
                    seq > @
                      seq
                        xbyte_list.write (((xbytearray)).apply (10))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ("no space to pack 4 bytes at offset -2"))))
                          bogusForceDataize.write ((((xstruct).xpack_into)).apply ("<I") ((xbyte_list)) ((2.neg)) (123))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ("offset -11 out of range for 10-byte buffer"))))
                          bogusForceDataize.write ((((xstruct).xpack_into)).apply ("<B") ((xbyte_list)) ((11.neg)) (123))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ("not enough data to unpack 4 bytes at offset -2"))))
                          bogusForceDataize.write ((((xstruct).xunpack_from)).apply ("<I") ((xbyte_list)) ((2.neg)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ("offset -11 out of range for 10-byte buffer"))))
                          bogusForceDataize.write ((((xstruct).xunpack_from)).apply ("<B") ((xbyte_list)) ((11.neg)))
                xtest_boundary_error_message_with_large_offset.write
                  [xself]
                    memory > xregex1
                    memory > xregex2
                    seq > @
                      seq
                        xregex1.write (((("pack_into requires a buffer of at least ".sub (((xstr)).apply ((((xsys).xmaxsize).sub 4)))).sub " bytes for packing 4 bytes at offset ").sub (((xstr)).apply (((xsys).xmaxsize)))).sub " (actual buffer size is 10)")
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ((xregex1)))))
                          bogusForceDataize.write ((((xstruct).xpack_into)).apply ("<I") ((((xbytearray)).apply (10))) (((xsys).xmaxsize)) (1))
                        xregex2.write (((("unpack_from requires a buffer of at least ".sub (((xstr)).apply ((((xsys).xmaxsize).sub 4)))).sub " bytes for unpacking 4 bytes at offset ").sub (((xstr)).apply (((xsys).xmaxsize)))).sub " (actual buffer size is 10)")
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ((xregex2)))))
                          bogusForceDataize.write ((((xstruct).xunpack_from)).apply ("<I") ((((xbytearray)).apply (10))) (((xsys).xmaxsize)))
                xtest_issue29802.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xstruct).xunpack)).apply ("b") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstruct).xunpack)).apply ("b") ("a"))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))))))
                xtest_format_attr.write
                  [xself]
                    memory > xs
                    memory > xs2
                    seq > @
                      seq
                        xs.write ((((xstruct).xStruct)).apply ("=i2H"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xformat)) ("=i2H"))
                        xs2.write ((((xstruct).xStruct)).apply ((((((xs).xformat).xencode)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs2).xformat)) (((xs).xformat)))
                xtest_issue35714.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("0") ("20i") ("0"))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xstruct).xerror)) ("embedded null character"))))
                          bogusForceDataize.write ((((xstruct).xcalcsize)).apply ((xs)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_construct.write
                  [xself]
                    memory > xs
                    memory > x_check_iterator
                    memory > xit
                    seq > @
                      seq
                        x_check_iterator.write
                          [xit]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xabc).xIterator)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xabc).xIterable)))
                        xs.write ((((xstruct).xStruct)).apply (">ibcp"))
                        xit.write ((((xs).xiter_unpack)).apply (""))
                        bogusForceDataize.write (((x_check_iterator)).apply ((xit)))
                        xit.write ((((xs).xiter_unpack)).apply ("1234567"))
                        bogusForceDataize.write (((x_check_iterator)).apply ((xit)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xstruct).xerror)))))
                          bogusForceDataize.write ((((xs).xiter_unpack)).apply ("123456"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xstruct).xerror)))))
                          bogusForceDataize.write ((((xs).xiter_unpack)).apply ("12345678"))
                        xs.write ((((xstruct).xStruct)).apply (">"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xstruct).xerror)))))
                          bogusForceDataize.write ((((xs).xiter_unpack)).apply (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xstruct).xerror)))))
                          bogusForceDataize.write ((((xs).xiter_unpack)).apply ("12"))
                xtest_iterate.write
                  [xself]
                    memory > xs
                    memory > xit
                    memory > xb
                    seq > @
                      seq
                        xs.write ((((xstruct).xStruct)).apply (">IB"))
                        xb.write (((xbytes)).apply ((((xrange)).apply (1) (16))))
                        xit.write ((((xs).xiter_unpack)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (16909060) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (101124105) (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (185339150) (15))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                xtest_arbitrary_buffer.write
                  [xself]
                    memory > xs
                    memory > xit
                    memory > xb
                    seq > @
                      seq
                        xs.write ((((xstruct).xStruct)).apply (">IB"))
                        xb.write (((xbytes)).apply ((((xrange)).apply (1) (11))))
                        xit.write ((((xs).xiter_unpack)).apply ((((xmemoryview)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (16909060) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (101124105) (10))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                xtest_length_hint.write
                  [xself]
                    memory > xs
                    memory > xlh
                    memory > xit
                    memory > xb
                    seq > @
                      seq
                        xlh.write ((xoperator).xlength_hint)
                        xs.write ((((xstruct).xStruct)).apply (">IB"))
                        xb.write (((xbytes)).apply ((((xrange)).apply (1) (16))))
                        xit.write ((((xs).xiter_unpack)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlh)).apply ((xit)))) (3))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlh)).apply ((xit)))) (2))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlh)).apply ((xit)))) (1))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlh)).apply ((xit)))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlh)).apply ((xit)))) (0))
                xtest_module_func.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        xit.write ((((xstruct).xiter_unpack)).apply (">IB") ((((xbytes)).apply ((((xrange)).apply (1) (11))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (16909060) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (101124105) (10))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xit)))
                xtest_half_float.write
                  [xself]
                    memory > xformat_bits_float__roundingError_list
                    memory > xformat_bits_float__rounding_list
                    memory > xpacked
                    memory > xformat_bits__nan_list
                    memory > xformat_bits_float__cleanRoundtrip_list
                    memory > xformat_bits_float__doubleRoundingError_list
                    memory > xbe_bits
                    seq > @
                      seq
                        xformat_bits_float__cleanRoundtrip_list.write (((unsupported)).apply ((((unsupported)).apply ("x00x3c") (1.0))) ((((unsupported)).apply ("x00xc0") ((2.0.neg)))) ((((unsupported)).apply ("xffx7b") (65504.0))) ((((unsupported)).apply ("x00x04") ((((unsupported)).apply (2) ((14.neg)))))) ((((unsupported)).apply ("x01x00") ((((unsupported)).apply (2) ((24.neg)))))) ((((unsupported)).apply ("x00x00") (0.0))) ((((unsupported)).apply ("x00x80") ((0.0.neg)))) ((((unsupported)).apply ("x00x7c") ((((xfloat)).apply ("-inf"))))) ((((unsupported)).apply ("x00xfc") ((((xfloat)).apply ("-inf"))))) ((((unsupported)).apply ("x55x35") (0.333251953125))))
                        (((unsupported)).apply ((((unsupported)).apply ((xle_bits)) ((xf)))) ((xformat_bits_float__cleanRoundtrip_list)))
                          seq
                            xbe_bits.write (((unsupported)).apply ((xle_bits)) ((((unsupported)).apply ((1.neg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) ((((unsupported)).apply (((((xstruct).xunpack)).apply ("<e") ((xle_bits)))) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xle_bits)) (((((xstruct).xpack)).apply ("<e") ((xf)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) ((((unsupported)).apply (((((xstruct).xunpack)).apply (">e") ((xbe_bits)))) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbe_bits)) (((((xstruct).xpack)).apply (">e") ((xf)))))
                            (((xsys).xbyteorder).eq "little").if
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) ((((unsupported)).apply (((((xstruct).xunpack)).apply ("e") ((xle_bits)))) (0))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xle_bits)) (((((xstruct).xpack)).apply ("e") ((xf)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf)) ((((unsupported)).apply (((((xstruct).xunpack)).apply ("e") ((xbe_bits)))) (0))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbe_bits)) (((((xstruct).xpack)).apply ("e") ((xf)))))
                        xformat_bits__nan_list.write (((unsupported)).apply ((((unsupported)).apply ("<e") ("x01xfc"))) ((((unsupported)).apply ("<e") ("x00xfe"))) ((((unsupported)).apply ("<e") ("xffxff"))) ((((unsupported)).apply ("<e") ("x01x7c"))) ((((unsupported)).apply ("<e") ("x00x7e"))) ((((unsupported)).apply ("<e") ("xffx7f"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xformatcode)) ((xbits)))) ((xformat_bits__nan_list)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply (((((xstruct).xunpack)).apply ("<e") ((xbits)))) (0))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply (((((xstruct).xunpack)).apply (">e") ((((unsupported)).apply ((xbits)) ((((unsupported)).apply ((1.neg)))))))) (0))))))
                        xpacked.write ((((xstruct).xpack)).apply ("<e") (((xmath).xnan)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xpacked)) (1)).and 126)) (126))
                        xpacked.write ((((xstruct).xpack)).apply ("<e") ((((xmath).xnan).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xpacked)) (1)).and 126)) (126))
                        xformat_bits_float__rounding_list.write (((unsupported)).apply ((((unsupported)).apply (">e") ("x00x01") (((((unsupported)).apply (2.0) ((25.neg))).sub (((unsupported)).apply (2.0) ((35.neg))))))) ((((unsupported)).apply (">e") ("x00x00") ((((unsupported)).apply (2.0) ((25.neg)))))) ((((unsupported)).apply (">e") ("x00x00") ((((unsupported)).apply (2.0) ((26.neg)))))) ((((unsupported)).apply (">e") ("x03xff") (((((unsupported)).apply (2.0) ((14.neg))).sub (((unsupported)).apply (2.0) ((24.neg))))))) ((((unsupported)).apply (">e") ("x03xff") ((((((unsupported)).apply (2.0) ((14.neg))).sub (((unsupported)).apply (2.0) ((25.neg)))).sub (((unsupported)).apply (2.0) ((65.neg))))))) ((((unsupported)).apply (">e") ("x04x00") (((((unsupported)).apply (2.0) ((14.neg))).sub (((unsupported)).apply (2.0) ((25.neg))))))) ((((unsupported)).apply (">e") ("x04x00") ((((unsupported)).apply (2.0) ((14.neg)))))) ((((unsupported)).apply (">e") ("x3cx01") (((1.0.sub (((unsupported)).apply (2.0) ((11.neg)))).sub (((unsupported)).apply (2.0) ((16.neg))))))) ((((unsupported)).apply (">e") ("x3cx00") ((1.0.sub (((unsupported)).apply (2.0) ((11.neg))))))) ((((unsupported)).apply (">e") ("x3cx00") ((1.0.sub (((unsupported)).apply (2.0) ((12.neg))))))) ((((unsupported)).apply (">e") ("x7bxff") (65504))) ((((unsupported)).apply (">e") ("x7bxff") (65519))) ((((unsupported)).apply (">e") ("x80x01") ((((((unsupported)).apply (2.0) ((25.neg))).neg).sub (((unsupported)).apply (2.0) ((35.neg))))))) ((((unsupported)).apply (">e") ("x80x00") (((((unsupported)).apply (2.0) ((25.neg))).neg)))) ((((unsupported)).apply (">e") ("x80x00") (((((unsupported)).apply (2.0) ((26.neg))).neg)))) ((((unsupported)).apply (">e") ("xbcx01") ((((1.0.neg).sub (((unsupported)).apply (2.0) ((11.neg)))).sub (((unsupported)).apply (2.0) ((16.neg))))))) ((((unsupported)).apply (">e") ("xbcx00") (((1.0.neg).sub (((unsupported)).apply (2.0) ((11.neg))))))) ((((unsupported)).apply (">e") ("xbcx00") (((1.0.neg).sub (((unsupported)).apply (2.0) ((12.neg))))))) ((((unsupported)).apply (">e") ("xfbxff") ((65519.neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xformatcode)) ((xbits)) ((xf)))) ((xformat_bits_float__rounding_list)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbits)) (((((xstruct).xpack)).apply ((xformatcode)) ((xf)))))
                        xformat_bits_float__roundingError_list.write (((unsupported)).apply ((((unsupported)).apply (">e") (65520.0))) ((((unsupported)).apply (">e") (65536.0))) ((((unsupported)).apply (">e") ((((unsupported)).apply)))) ((((unsupported)).apply (">e") ((65520.0.neg)))) ((((unsupported)).apply (">e") ((65536.0.neg)))) ((((unsupported)).apply (">e") (((((unsupported)).apply).neg)))) ((((unsupported)).apply ("<e") (65520.0))) ((((unsupported)).apply ("<e") (65536.0))) ((((unsupported)).apply ("<e") ((((unsupported)).apply)))) ((((unsupported)).apply ("<e") ((65520.0.neg)))) ((((unsupported)).apply ("<e") ((65536.0.neg)))) ((((unsupported)).apply ("<e") (((((unsupported)).apply).neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xformatcode)) ((xf)))) ((xformat_bits_float__roundingError_list)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xstruct).xpack)) ((xformatcode)) ((xf)))
                        xformat_bits_float__doubleRoundingError_list.write (((unsupported)).apply ((((unsupported)).apply (">e") ("x67xff") (((((unsupported)).apply).mul (((unsupported)).apply (2) ((26.neg))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xformatcode)) ((xbits)) ((xf)))) ((xformat_bits_float__doubleRoundingError_list)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbits)) (((((xstruct).xpack)).apply ((xformatcode)) ((xf)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)