memory > xAttributeError
memory > xSomeOtherException
memory > xUTF8Class
memory > xSimpleTestCase
memory > xTypeError
memory > xTemplateSyntaxError
memory > xSomeClass
[] > test_filter_syntax
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_filter_syntax25
        memory > xtest_filter_syntax20
        memory > xtest_filter_syntax10
        memory > xtest_filter_syntax21
        memory > xtest_filter_syntax14
        memory > xtest_filter_syntax03
        memory > xtest_filter_syntax11
        memory > xtest_filter_syntax08
        memory > xtest_filter_syntax23
        memory > xtest_filter_syntax06
        memory > xtest_type_error_attribute
        memory > xtest_filter_syntax13
        memory > xtest_filter_syntax09
        memory > xtest_filter_syntax02
        memory > xtest_filter_syntax22
        memory > xtest_filter_syntax15
        memory > xtest_filter_syntax19
        memory > xtest_filter_syntax04
        memory > xtest_filter_syntax08_multi_line
        memory > xtest_filter_syntax17
        memory > xtest_filter_syntax01
        memory > xtest_filter_syntax18
        memory > xtest_filter_syntax07
        memory > xtest_filter_syntax05
        memory > xtest_filter_syntax24
        memory > xtest_filter_syntax16
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_filter_syntax01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax01") ((((unsupported)).apply ("var") ("Django is the greatest!"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("DJANGO IS THE GREATEST!"))
                xtest_filter_syntax02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax02") ((((unsupported)).apply ("var") ("Django is the greatest!"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("django is the greatest!"))
                xtest_filter_syntax03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax03") ((((unsupported)).apply ("var") ("Django is the greatest!"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("DJANGO IS THE GREATEST!"))
                xtest_filter_syntax04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax04") ((((unsupported)).apply ("var") ("Django is the greatest!"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("DJANGO IS THE GREATEST!"))
                xtest_filter_syntax05.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "Invalid filter: 'does_not_exist'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("filter-syntax05"))
                xtest_filter_syntax06.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ("Invalid filter: 'fil'"))))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("filter-syntax06"))
                xtest_filter_syntax07.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "Invalid block tag on line 1: 'nothing_to_see_here'. Did you forget to register or load this tag?"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("filter-syntax07"))
                xtest_filter_syntax08.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ("Empty block tag on line 1"))))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("filter-syntax08"))
                xtest_filter_syntax08_multi_line.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ("Empty block tag on line 3"))))
                          bogusForceDataize.write (((((xself).xengine).xget_template)).apply ("filter-syntax08-multi-line"))
                xtest_filter_syntax09.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax09") ((((unsupported)).apply ("var") ("Foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("f"))
                xtest_filter_syntax10.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax10") ((((unsupported)).apply ("var") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (" endquote\" hah"))
                xtest_filter_syntax11.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax11") ((((unsupported)).apply ("var") ("None: is there a None literal in the EO language?") ("var2") ("happy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("happy"))
                xtest_filter_syntax13.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax13") ((((unsupported)).apply ("var") ((xSomeClass)))))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("1INVALID2"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("12"))
                xtest_filter_syntax14.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSomeOtherException)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax14") ((((unsupported)).apply ("var") ((xSomeClass)))))
                xtest_filter_syntax15.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax15") ((((unsupported)).apply ("var") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("foobar"))
                xtest_filter_syntax16.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax16") ((((unsupported)).apply ("var") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("foonow"))
                xtest_filter_syntax17.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax17") ((((unsupported)).apply ("var") ((((unsupported)).apply ("a") ("b") ("c"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("abc"))
                xtest_filter_syntax18.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax18") ((((unsupported)).apply ("var") ((xUTF8Class)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("u0160u0110u0106u017du0107u017eu0161u0111"))
                xtest_filter_syntax19.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax19") ((((unsupported)).apply ("var") ("hello world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("hello …"))
                xtest_filter_syntax20.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                xtest_filter_syntax21.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax21") ((((unsupported)).apply ("var") ((xSomeClass)))))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("1INVALID2"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("12"))
                xtest_filter_syntax22.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax22") ((((unsupported)).apply ("var") ((xSomeClass)))))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("1INVALID2"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("12"))
                xtest_filter_syntax23.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSomeOtherException)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax23") ((((unsupported)).apply ("var") ((xSomeClass)))))
                xtest_filter_syntax24.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSomeOtherException)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax24") ((((unsupported)).apply ("var") ((xSomeClass)))))
                xtest_filter_syntax25.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("filter-syntax25") ((((unsupported)).apply ("var") ((xSomeClass)))))
                xtest_type_error_attribute.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template") ((((unsupported)).apply ("var") ((xSomeClass)))))