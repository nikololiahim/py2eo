memory > xRuntimeError
memory > xValueError
memory > xstr
memory > xBase
memory > xrange
memory > xb
memory > xBar
memory > xhasattr
memory > xRemovedInDjango50Warning
memory > xctx
memory > xSimpleTestCase
memory > xlist
memory > xKlazz
memory > xt
memory > xB
memory > xFoo
memory > xcached_property
memory > xcallable
memory > xrepr
memory > xint
memory > xClass
memory > xbytes
memory > xtuple
memory > xclassproperty
memory > xmocked
memory > xmock
memory > xdir
memory > xgetattr
memory > xlazy
memory > xSubClass
memory > xzip
memory > xattr
memory > xobject
memory > xA
memory > xTypeError
memory > xa
[] > test_functional
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_lazy_repr_int
        memory > xtest_lazy
        memory > xtest_classproperty_getter
        memory > xtest_lazy_object_to_string
        memory > xassertCachedPropertyWorks
        memory > xtest_cached_property_set_name_not_called
        memory > xtest_cached_property_auto_name
        memory > xtest_cached_property
        memory > xtest_cached_property_name_deprecation_warning
        memory > xtest_lazy_repr_text
        memory > xtest_classproperty_override_getter
        memory > xtest_cached_property_name
        memory > xtest_lazy_equality
        memory > xtest_cached_property_reuse_same_name
        memory > xtest_lazy_repr_bytes
        memory > xtest_lazy_bytes_and_str_result_classes
        memory > xtest_lazy_class_preparation_caching
        memory > xtest_lazy_add
        memory > xtest_lazy_base_class
        memory > xtest_lazy_base_class_override
        memory > xtest_cached_property_reuse_different_names
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_lazy.write
                  [xself]
                    memory > xt2
                    seq > @
                      seq
                        xt2.write (((xlazy)).apply ((((unsupported)).apply ((((xtuple)).apply ((((xrange)).apply (3))))))) ((xlist)) ((xtuple)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xzip)).apply ((((xt)).apply)) ((((xrange)).apply (3))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_lazy_base_class.write
                  [xself]
                    memory > xt
                    memory > xbase_method
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                          xbase_method.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xBase)))
                        xt.write (((((xlazy)).apply ((((unsupported)).apply ((((xKlazz)).apply)))) ((xKlazz)))).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("base_method") ((((xdir)).apply ((xt)))))
                xtest_lazy_base_class_override.write
                  [xself]
                    memory > xt
                    memory > xmethod
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                          xmethod.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("Base"))
                        (((unsupported)).apply ((xBase)))
                          xmethod.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("Klazz"))
                        xt.write (((((xlazy)).apply ((((unsupported)).apply ((((xKlazz)).apply)))) ((xBase)))).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xmethod)).apply)) ("Klazz"))
                xtest_lazy_object_to_string.write
                  [xself]
                    memory > xt
                    memory > x__str__
                    memory > x__bytes__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("Î am ā Ǩlâzz."))
                            x__bytes__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("xc3x8e am xc4x81 binary xc7xa8lxc3xa2zz."))
                        xt.write (((((xlazy)).apply ((((unsupported)).apply ((((xKlazz)).apply)))) ((xKlazz)))).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xt)))) ("Î am ā Ǩlâzz."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xt)))) ("xc3x8e am xc4x81 binary xc7xa8lxc3xa2zz."))
                xassertCachedPropertyWorks.write
                  [xself xattr xClass]
                    memory > xsubobj2
                    memory > xget
                    memory > xobj2
                    memory > xobj
                    memory > xsubobj
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xattr)))))
                        seq
                          xget.write
                            [xsource]
                              seq > @
                                (((unsupported)).apply ((((xgetattr)).apply ((xsource)) ((xattr)))))
                          xobj.write (((xClass)).apply)
                          (((unsupported)).apply ((xClass)))
                          xsubobj.write (((xSubClass)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xget)).apply ((xClass))).x__doc__)) ("Here is the docstring..."))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xget)).apply ((xSubClass))).x__doc__)) ("Here is the docstring..."))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget)).apply ((xobj)))) ((((xget)).apply ((xobj)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget)).apply ((xsubobj)))) ((((xget)).apply ((xsubobj)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xget)).apply ((xobj)))) (0))) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xget)).apply ((xsubobj)))) (0))) (1))
                          xobj2.write (((xClass)).apply)
                          xsubobj2.write (((xSubClass)).apply)
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xget)).apply ((xobj)))) ((((xget)).apply ((xobj2)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xget)).apply ((xsubobj)))) ((((xget)).apply ((xsubobj2)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xget)).apply ((xClass)))) ((xcached_property)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xget)).apply ((xSubClass)))) ((xcached_property)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcallable)).apply (((xobj).xother_value)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcallable)).apply (((xsubobj).xother_value)))))
                xtest_cached_property.write
                  [xself]
                    memory > xattrs
                    memory > xother_value
                    memory > x__foo__
                    memory > xother
                    memory > xvalue
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                          seq
                            xvalue.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            x__foo__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            xother_value.write
                              [xself]
                                seq > @
                                  seq
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            xother.write (((xcached_property)).apply ((xother_value)))
                        xattrs.write (((unsupported)).apply ("value") ("other") ("__foo__"))
                        (((unsupported)).apply ((xattr)) ((xattrs)))
                          bogusForceDataize.write ((((xself).xassertCachedPropertyWorks)).apply ((xattr)) ((xClass)))
                xtest_cached_property_name.write
                  [xself]
                    memory > xother
                    memory > xother_value
                    memory > xobj
                    memory > xother2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            xother_value.write
                              [xself]
                                seq > @
                                  seq
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            xother.write (((unsupported)).apply ((xcached_property)) ((xother_value)) ("other"))
                            xother2.write (((unsupported)).apply ((xcached_property)) ((xother_value)) ("different_name"))
                        bogusForceDataize.write ((((xself).xassertCachedPropertyWorks)).apply ("other") ((xClass)))
                        xobj.write (((xClass)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xobj)) ("different_name"))))
                xtest_cached_property_name_deprecation_warning.write
                  [xself]
                    memory > xvalue
                    memory > xmsg
                    seq > @
                      seq
                        xvalue.write
                          [xself]
                            seq > @
                              (((unsupported)).apply (1))
                        xmsg.write "The name argument is deprecated as it's unnecessary as of Python 3.6."
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          (((unsupported)).apply ((xcached_property)) ((xvalue)) ("other_name"))
                xtest_cached_property_auto_name.write
                  [xself]
                    memory > xother
                    memory > xother_value
                    memory > x__value
                    memory > xattrs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__value.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            xother_value.write
                              [xself]
                                seq > @
                                  seq
                                    unsupported
                                    (((unsupported)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                            xother.write (((xcached_property)).apply ((xother_value)))
                        xattrs.write (((unsupported)).apply ("_Class__value") ("other"))
                        (((unsupported)).apply ((xattr)) ((xattrs)))
                          bogusForceDataize.write ((((xself).xassertCachedPropertyWorks)).apply ((xattr)) ((xClass)))
                xtest_cached_property_reuse_different_names.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xctx)))
                          (((unsupported)).apply)
                            seq
                              xa.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply)
                              xb.write (xa)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xctx).xexception).x__context__)))) ((((xstr)).apply ((((xTypeError)).apply ("Cannot assign the same cached_property to two different names ('a' and 'b')."))))))
                xtest_cached_property_reuse_same_name.write
                  [xself]
                    memory > xcounter
                    memory > xb
                    memory > x_cp
                    memory > xcp
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcounter.write 0
                        x_cp.write
                          [x_self]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xcounter)) (1))
                                (((unsupported)).apply ((xcounter)))
                        (((unsupported)).apply)
                          xcp.write (x_cp)
                        (((unsupported)).apply)
                          xcp.write (x_cp)
                        xa.write (((xA)).apply)
                        xb.write (((xB)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xcp)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).xcp)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xcp)) (1))
                xtest_cached_property_set_name_not_called.write
                  [xself]
                    memory > xcp
                    memory > xmsg
                    seq > @
                      seq
                        xcp.write (((xcached_property)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xFoo).xcp)) ((xcp)))
                        xmsg.write "Cannot use cached_property instance without calling __set_name__() on it."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          unsupported
                xtest_lazy_add.write
                  [xself]
                    memory > xlazy_5
                    memory > xlazy_4
                    seq > @
                      seq
                        xlazy_4.write (((xlazy)).apply ((((unsupported)).apply (4))) ((xint)))
                        xlazy_5.write (((xlazy)).apply ((((unsupported)).apply (5))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xlazy_4)).apply).add (((xlazy_5)).apply))) (9))
                xtest_lazy_equality.write
                  [xself]
                    memory > xlazy_b
                    memory > xlazy_c
                    memory > xlazy_a
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlazy_a.write (((xlazy)).apply ((((unsupported)).apply (4))) ((xint)))
                        xlazy_b.write (((xlazy)).apply ((((unsupported)).apply (4))) ((xint)))
                        xlazy_c.write (((xlazy)).apply ((((unsupported)).apply (5))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlazy_a)).apply)) ((((xlazy_b)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlazy_b)).apply)) ((((xlazy_c)).apply)))
                xtest_lazy_repr_text.write
                  [xself]
                    memory > xlazy_obj
                    memory > xoriginal_object
                    seq > @
                      seq
                        xoriginal_object.write "Lazy translation text"
                        xlazy_obj.write (((xlazy)).apply ((((unsupported)).apply ((xoriginal_object)))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xoriginal_object)))) ((((xrepr)).apply ((((xlazy_obj)).apply)))))
                xtest_lazy_repr_int.write
                  [xself]
                    memory > xlazy_obj
                    memory > xoriginal_object
                    seq > @
                      seq
                        xoriginal_object.write 15
                        xlazy_obj.write (((xlazy)).apply ((((unsupported)).apply ((xoriginal_object)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xoriginal_object)))) ((((xrepr)).apply ((((xlazy_obj)).apply)))))
                xtest_lazy_repr_bytes.write
                  [xself]
                    memory > xlazy_obj
                    memory > xoriginal_object
                    seq > @
                      seq
                        xoriginal_object.write "Jxc3xbcst a strxc3xadng"
                        xlazy_obj.write (((xlazy)).apply ((((unsupported)).apply ((xoriginal_object)))) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xoriginal_object)))) ((((xrepr)).apply ((((xlazy_obj)).apply)))))
                xtest_lazy_class_preparation_caching.write
                  [xself]
                    memory > xlazified
                    memory > x__proxy__
                    seq > @
                      seq
                        xlazified.write (((xlazy)).apply ((((unsupported)).apply (0))) ((xint)))
                        x__proxy__.write ((((xlazified)).apply).x__class__)
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((x__proxy__)) ("__prepare_class__"))) ((xmocked)))
                          seq
                            bogusForceDataize.write (((xlazified)).apply)
                            bogusForceDataize.write ((((xmocked).xassert_not_called)).apply)
                xtest_lazy_bytes_and_str_result_classes.write
                  [xself]
                    memory > xlazy_obj
                    memory > xmsg
                    seq > @
                      seq
                        xlazy_obj.write (((xlazy)).apply ((((unsupported)).apply ("test"))) ((xstr)) ((xbytes)))
                        xmsg.write "Cannot call lazy() with both bytes and text return types."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlazy_obj)).apply)
                xtest_classproperty_getter.write
                  [xself]
                    memory > xfoo_attr
                    memory > x__init__
                    memory > xfoo
                    memory > xbar
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xfoo_attr.write 123
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xfoo_attr)) (456))
                            xfoo.write
                              [xcls]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xcls).xfoo_attr)))
                        (((unsupported)).apply)
                          seq
                            xbar.write (((xclassproperty)).apply)
                            xbar.write
                              [xcls]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (123))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xFoo).xfoo)) (123))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xFoo)).apply).xfoo)) (123))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBar).xbar)) (123))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xBar)).apply).xbar)) (123))
                xtest_classproperty_override_getter.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xfoo.write
                              [xcls]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (123))
                            xfoo.write
                              [xcls]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (456))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xFoo).xfoo)) (456))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xFoo)).apply).xfoo)) (456))