memory > xstring_at
memory > xVSI_MEM_FILESYSTEM_BASE_PATH
memory > xGDAL_RESAMPLE_ALGORITHMS
memory > xc_buffer
memory > xint
memory > xc_int
memory > xi
memory > xfloat
memory > xBandList
memory > xforce_bytes
memory > xjson
memory > xmin
memory > xTransformPoint
memory > xall
memory > xlist
memory > xenumerate
memory > xuuid
memory > xc_void_p
memory > xValueError
memory > xstr
memory > xDriver
memory > xforce_str
memory > xaddressof
memory > xVSI_DELETE_BUFFER_ON_READ
memory > xband_input
memory > xmax
memory > xerr
memory > xtype
memory > xbyref
memory > xsuper
memory > xc_char_p
memory > xsys
memory > xbytes
memory > xGDALException
memory > xjson_regex
memory > xSRSException
memory > xos
memory > xbnd
memory > xval
memory > xGDALRasterBase
memory > xc_double
memory > xVSI_TAKE_BUFFER_OWNERSHIP
memory > xGDALRaster
memory > xSpatialReference
memory > xhex
memory > xisinstance
memory > xlen
memory > xdict
memory > xVSI_FILESYSTEM_PREFIX
memory > xTypeError
memory > xkey
[] > source
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__repr__
        memory > xis_vsi_based
        memory > xskew
        memory > xsrid
        memory > xdriver
        memory > xtransform
        memory > xscale
        memory > x__init__
        memory > xname
        memory > xgeotransform
        memory > xwarp
        memory > x__str__
        memory > xindices
        memory > xclone
        memory > xinfo
        memory > xdestructor
        memory > xextent
        memory > xbands
        memory > xwidth
        memory > xx
        memory > x_flush
        memory > xorigin
        memory > x__del__
        memory > xy
        memory > xcapi
        memory > xheight
        memory > xvsi_buffer
        memory > xsrs
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xlist)))
              seq
                xindices.write (((unsupported)).apply ("origin") ((((unsupported)).apply (0) (3))) ("scale") ((((unsupported)).apply (1) (5))) ("skew") ((((unsupported)).apply (2) (4))))
                x__init__.write
                  [xself xraster xprop]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write (((unsupported)).apply (((xraster).xgeotransform)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xindices)) ((xprop)))) (0))))
                        xy.write (((unsupported)).apply (((xraster).xgeotransform)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xindices)) ((xprop)))) (1))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xx)) ((xy)))))
                        (((unsupported)).apply (((xself).x_raster)) ((xraster)))
                        (((unsupported)).apply (((xself).x_prop)) ((xprop)))
                xx.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) (0))))
                xx.write
                  [xself xvalue]
                    memory > xgtf
                    seq > @
                      (((unsupported)).apply)
                        xgtf.write (((xself).x_raster).xgeotransform)
                        (((unsupported)).apply ((((unsupported)).apply ((xgtf)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xindices)) (((xself).x_prop)))) (0))))) ((xvalue)))
                        (((unsupported)).apply ((((xself).x_raster).xgeotransform)) ((xgtf)))
                xy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xself)) (1))))
                xy.write
                  [xself xvalue]
                    memory > xgtf
                    seq > @
                      (((unsupported)).apply)
                        xgtf.write (((xself).x_raster).xgeotransform)
                        (((unsupported)).apply ((((unsupported)).apply ((xgtf)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xindices)) (((xself).x_prop)))) (1))))) ((xvalue)))
                        (((unsupported)).apply ((((xself).x_raster).xgeotransform)) ((xgtf)))
            (((unsupported)).apply ((xGDALRasterBase)))
              seq
                (((unsupported)).apply)
                xdestructor.write ((xcapi).xclose_ds)
                x__init__.write
                  [xself xds_input xwrite]
                    memory > xband
                    memory > xvsi_path
                    memory > xdriver
                    memory > xpapsz_options
                    memory > xoption
                    memory > xsize
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_write)) (((xwrite).if 1 0)))
                        bogusForceDataize.write ((((xDriver).xensure_registered)).apply)
                        ((((xisinstance)).apply ((xds_input)) ((xstr))).and ((((xjson_regex).xmatch)).apply ((xds_input)))).if
                          xds_input.write ((((xjson).xloads)).apply ((xds_input)))
                        (((xisinstance)).apply ((xds_input)) ((xstr))).if
                          seq
                            ((((((xds_input).xstartswith)).apply ((xVSI_FILESYSTEM_PREFIX))).not).and ((((((xos).xpath).xexists)).apply ((xds_input))).not)).if
                              (((unsupported)).apply ((((xGDALException)).apply (("Unable to read raster source input \"%s\".".mod (xds_input))))))
                            (((unsupported)).apply ((xGDALException)))
                              (((unsupported)).apply (((xself).x_ptr)) (((((xcapi).xopen_ds)).apply ((((xforce_bytes)).apply ((xds_input)))) (((xself).x_write)))))
                              (((unsupported)).apply ((((xGDALException)).apply (((("Could not open the datasource at \"{}\" ({}).".xformat)).apply ((xds_input)) ((xerr)))))))
                          (((xisinstance)).apply ((xds_input)) ((xbytes))).if
                            seq
                              (((unsupported)).apply (((xself).x_write)) (1))
                              xsize.write ((((xsys).xgetsizeof)).apply ((xds_input)))
                              (((unsupported)).apply (((xself).x_ds_input)) ((((xc_buffer)).apply ((xds_input)))))
                              xvsi_path.write (((((xos).xpath).xjoin)).apply ((xVSI_MEM_FILESYSTEM_BASE_PATH)) ((((xstr)).apply (((((xuuid).xuuid4)).apply)))))
                              bogusForceDataize.write ((((xcapi).xcreate_vsi_file_from_mem_buffer)).apply ((((xforce_bytes)).apply ((xvsi_path)))) ((((xbyref)).apply (((xself).x_ds_input)))) ((xsize)) ((xVSI_TAKE_BUFFER_OWNERSHIP)))
                              (((unsupported)).apply ((xGDALException)))
                                (((unsupported)).apply (((xself).x_ptr)) (((((xcapi).xopen_ds)).apply ((((xforce_bytes)).apply ((xvsi_path)))) (((xself).x_write)))))
                                seq
                                  bogusForceDataize.write ((((xcapi).xunlink_vsi_file)).apply ((((xforce_bytes)).apply ((xvsi_path)))))
                                  (((unsupported)).apply ((((xGDALException)).apply ("Failed creating VSI raster from the input buffer."))))
                            (((xisinstance)).apply ((xds_input)) ((xdict))).if
                              seq
                                (((unsupported)).apply (((xself).x_write)) (2))
                                xdriver.write (((xDriver)).apply (((((xds_input).xget)).apply ("driver") ("MEM"))))
                                ((((xdriver).xname).neq "MEM").and (((unsupported)).apply ("name") ((xds_input)))).if
                                  (((unsupported)).apply ((((xGDALException)).apply (((("Specify name for creation of raster with driver \"{}\".".xformat)).apply (((xdriver).xname)))))))
                                ((((unsupported)).apply ("width") ((xds_input))).or (((unsupported)).apply ("height") ((xds_input)))).if
                                  (((unsupported)).apply ((((xGDALException)).apply ("Specify width and height attributes for JSON or dict input."))))
                                (((unsupported)).apply ("srid") ((xds_input))).if
                                  (((unsupported)).apply ((((xGDALException)).apply ("Specify srid for JSON or dict input."))))
                                xpapsz_options.write (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xval)))) ((((((((xds_input).xget)).apply ("papsz_options") ((((unsupported)).apply))).xitems)).apply)))
                                  seq
                                    xoption.write ((("{}={}".xformat)).apply ((xkey)) ((xval)))
                                    bogusForceDataize.write ((((xpapsz_options).xappend)).apply ((((((((xoption).xupper)).apply).xencode)).apply)))
                                bogusForceDataize.write ((((xpapsz_options).xappend)).apply ("None: is there a None literal in the EO language?"))
                                xpapsz_options.write ((((xc_char_p).mul (((xlen)).apply ((xpapsz_options))))).apply ((((unsupported)).apply ((xpapsz_options)))))
                                (((unsupported)).apply (((xself).x_ptr)) (((((xcapi).xcreate_ds)).apply (((xdriver).x_ptr)) ((((xforce_bytes)).apply (((((xds_input).xget)).apply ("name") (""))))) ((((unsupported)).apply ((xds_input)) ("width"))) ((((unsupported)).apply ((xds_input)) ("height"))) (((((xds_input).xget)).apply ("nr_of_bands") ((((xlen)).apply (((((xds_input).xget)).apply ("bands") ((((unsupported)).apply)))))))) (((((xds_input).xget)).apply ("datatype") (6))) ((((xbyref)).apply ((xpapsz_options)))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xband_input)))) ((((xenumerate)).apply (((((xds_input).xget)).apply ("bands") ((((unsupported)).apply)))))))
                                  seq
                                    xband.write (((unsupported)).apply (((xself).xbands)) ((xi)))
                                    (((unsupported)).apply ("nodata_value") ((xband_input))).if
                                      seq
                                        (((unsupported)).apply (((xband).xnodata_value)) ((((unsupported)).apply ((xband_input)) ("nodata_value"))))
                                        ((((unsupported)).apply (((xband).xnodata_value)) ("None: is there a None literal in the EO language?")).and (((((unsupported)).apply ("data") ((xband_input))).or (((unsupported)).apply ("size") ((xband_input)))).or (((unsupported)).apply ("shape") ((xband_input))))).if
                                          (((unsupported)).apply (((xband).xdata)) ((((unsupported)).apply (((xband).xnodata_value)))) ((((unsupported)).apply (1) (1))))
                                    (((unsupported)).apply (((xband).xdata)) (((((xband_input).xget)).apply ("data"))) (((((xband_input).xget)).apply ("size"))) (((((xband_input).xget)).apply ("shape"))) (((((xband_input).xget)).apply ("offset"))))
                                (((unsupported)).apply (((xself).xsrs)) (((((xds_input).xget)).apply ("srid"))))
                                (((unsupported)).apply ("origin") ((xds_input))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((xself).xorigin).xx)) ((((xself).xorigin).xy)))) ((((unsupported)).apply ((xds_input)) ("origin"))))
                                (((unsupported)).apply ("scale") ((xds_input))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((xself).xscale).xx)) ((((xself).xscale).xy)))) ((((unsupported)).apply ((xds_input)) ("scale"))))
                                (((unsupported)).apply ("skew") ((xds_input))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((xself).xskew).xx)) ((((xself).xskew).xy)))) ((((unsupported)).apply ((xds_input)) ("skew"))))
                              (((xisinstance)).apply ((xds_input)) ((xc_void_p))).if
                                (((unsupported)).apply (((xself).x_ptr)) ((xds_input)))
                                (((unsupported)).apply ((((xGDALException)).apply (((("Invalid data source input type: \"{}\".".xformat)).apply ((((xtype)).apply ((xds_input)))))))))
                x__del__.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xis_vsi_based).if
                          bogusForceDataize.write ((((xcapi).xunlink_vsi_file)).apply ((((xforce_bytes)).apply (((xself).xname)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__del__)).apply)
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xname)))
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (("<Raster object at %s>".mod (((xhex)).apply ((((xaddressof)).apply (((xself).x_ptr))))))))
                x_flush.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).x_write).not).if
                          (((unsupported)).apply ((((xGDALException)).apply ("Raster needs to be opened in write mode to change values."))))
                        bogusForceDataize.write ((((xcapi).xflush_ds)).apply (((xself).x_ptr)))
                xvsi_buffer.write
                  [xself]
                    memory > xout_length
                    memory > xdat
                    seq > @
                      (((unsupported)).apply)
                        ((((xself).xis_vsi_based).and (((((xself).xname).xstartswith)).apply ((xVSI_MEM_FILESYSTEM_BASE_PATH)))).not).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xout_length.write (((xc_int)).apply)
                        xdat.write ((((xcapi).xget_mem_buffer_from_vsi_file)).apply ((((xforce_bytes)).apply (((xself).xname)))) ((((xbyref)).apply ((xout_length)))) ((xVSI_DELETE_BUFFER_ON_READ)))
                        (((unsupported)).apply ((((xstring_at)).apply ((xdat)) (((xout_length).xvalue)))))
                xis_vsi_based.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).x_ptr).and (((((xself).xname).xstartswith)).apply ((xVSI_FILESYSTEM_PREFIX))))))
                xname.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xforce_str)).apply (((((xcapi).xget_ds_description)).apply (((xself).x_ptr)))))))
                xdriver.write
                  [xself]
                    memory > xds_driver
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xds_driver.write ((((xcapi).xget_ds_driver)).apply (((xself).x_ptr)))
                        (((unsupported)).apply ((((xDriver)).apply ((xds_driver)))))
                xwidth.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xget_ds_xsize)).apply (((xself).x_ptr)))))
                xheight.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xget_ds_ysize)).apply (((xself).x_ptr)))))
                xsrs.write
                  [xself]
                    memory > xwkt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xSRSException)))
                          seq
                            xwkt.write ((((xcapi).xget_ds_projection_ref)).apply (((xself).x_ptr)))
                            ((xwkt).not).if
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((unsupported)).apply ((xSpatialReference)) ((xwkt)) ("wkt"))))
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xsrs.write
                  [xself xvalue]
                    memory > xsrs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xvalue)) ((xSpatialReference))).if
                          xsrs.write (xvalue)
                          (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xint)) ((xstr))))).if
                            xsrs.write (((xSpatialReference)).apply ((xvalue)))
                            (((unsupported)).apply ((((xValueError)).apply ("Could not create a SpatialReference from input."))))
                        bogusForceDataize.write ((((xcapi).xset_ds_projection_ref)).apply (((xself).x_ptr)) ((((((xsrs).xwkt).xencode)).apply)))
                        bogusForceDataize.write ((((xself).x_flush)).apply)
                xsrid.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xsrs).xsrid)))
                xsrid.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsrs)) ((xvalue)))
                xgeotransform.write
                  [xself]
                    memory > xgtf
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xgtf.write ((((xc_double).mul 6)).apply)
                        bogusForceDataize.write ((((xcapi).xget_ds_geotransform)).apply (((xself).x_ptr)) ((((xbyref)).apply ((xgtf)))))
                        (((unsupported)).apply ((((xlist)).apply ((xgtf)))))
                xgeotransform.write
                  [xself xvalues]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((((xlen)).apply ((xvalues))).neq 6).or ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xx)) ((((unsupported)).apply ((xint)) ((xfloat)))))) ((xx)) ((xvalues))))).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("Geotransform must consist of 6 numeric values."))))
                        xvalues.write ((((xc_double).mul 6)).apply ((((unsupported)).apply ((xvalues)))))
                        bogusForceDataize.write ((((xcapi).xset_ds_geotransform)).apply (((xself).x_ptr)) ((((xbyref)).apply ((xvalues)))))
                        bogusForceDataize.write ((((xself).x_flush)).apply)
                xorigin.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xTransformPoint)).apply ((xself)) ("origin"))))
                xscale.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xTransformPoint)).apply ((xself)) ("scale"))))
                xskew.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xTransformPoint)).apply ((xself)) ("skew"))))
                xextent.write
                  [xself]
                    memory > xxval
                    memory > xxmin
                    memory > xyval
                    memory > xymax
                    memory > xxmax
                    memory > xymin
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xxval.write ((((xself).xorigin).xx).add ((((xself).xscale).xx).mul ((xself).xwidth)))
                        xyval.write ((((xself).xorigin).xy).add ((((xself).xscale).xy).mul ((xself).xheight)))
                        xxmin.write (((xmin)).apply ((xxval)) ((((xself).xorigin).xx)))
                        xxmax.write (((xmax)).apply ((xxval)) ((((xself).xorigin).xx)))
                        xymin.write (((xmin)).apply ((xyval)) ((((xself).xorigin).xy)))
                        xymax.write (((xmax)).apply ((xyval)) ((((xself).xorigin).xy)))
                        (((unsupported)).apply ((((unsupported)).apply ((xxmin)) ((xymin)) ((xxmax)) ((xymax)))))
                xbands.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xBandList)).apply ((xself)))))
                xwarp.write
                  [xself xds_input xresampling xmax_error]
                    memory > xtarget
                    memory > xalgorithm
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("width") (((xself).xwidth)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("height") (((xself).xheight)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("srid") ((((xself).xsrs).xsrid)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("origin") (((xself).xorigin)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("scale") (((xself).xscale)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("skew") (((xself).xskew)))
                        bogusForceDataize.write ((((xds_input).xsetdefault)).apply ("driver") ((((xself).xdriver).xname)))
                        (((unsupported)).apply ("name") ((xds_input))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xds_input)) ("name"))) (((((xself).xname).add "_copy.").add (((xself).xdriver).xname))))
                        (((unsupported)).apply ("datatype") ((xds_input))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xds_input)) ("datatype"))) (((((((unsupported)).apply (((xself).xbands)) (0)).xdatatype)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xds_input)) ("bands"))) ((((unsupported)).apply ((((unsupported)).apply ("nodata_value") (((xbnd).xnodata_value)))) ((xbnd)) (((xself).xbands)))))
                        xtarget.write (((unsupported)).apply ((xGDALRaster)) ((xds_input)) (TRUE))
                        xalgorithm.write (((unsupported)).apply ((xGDAL_RESAMPLE_ALGORITHMS)) ((xresampling)))
                        bogusForceDataize.write ((((xcapi).xreproject_image)).apply (((xself).x_ptr)) (((((((xself).xsrs).xwkt).xencode)).apply)) (((xtarget).x_ptr)) (((((((xtarget).xsrs).xwkt).xencode)).apply)) ((xalgorithm)) (0.0) ((xmax_error)) ((((xc_void_p)).apply)) ((((xc_void_p)).apply)) ((((xc_void_p)).apply)))
                        bogusForceDataize.write ((((xtarget).x_flush)).apply)
                        (((unsupported)).apply ((xtarget)))
                xclone.write
                  [xself xname]
                    memory > xclone_name
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (xname).if
                          xclone_name.write (xname)
                          ((((xself).xdriver).xname).neq "MEM").if
                            xclone_name.write ((((xself).xname).add "_copy.").add (((xself).xdriver).xname))
                            xclone_name.write (((((xos).xpath).xjoin)).apply ((xVSI_MEM_FILESYSTEM_BASE_PATH)) ((((xstr)).apply (((((xuuid).xuuid4)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGDALRaster)) (((((xcapi).xcopy_ds)).apply ((((xself).xdriver).x_ptr)) ((((xforce_bytes)).apply ((xclone_name)))) (((xself).x_ptr)) ((((xc_int)).apply)) ((((xc_char_p)).apply)) ((((xc_void_p)).apply)) ((((xc_void_p)).apply)))) (((xself).x_write)))))
                xtransform.write
                  [xself xsrs xdriver xname xresampling xmax_error]
                    memory > xtarget
                    memory > xalgorithm
                    memory > xdata
                    memory > xtarget_srs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xalgorithm.write (((unsupported)).apply ((xGDAL_RESAMPLE_ALGORITHMS)) ((xresampling)))
                        (((xisinstance)).apply ((xsrs)) ((xSpatialReference))).if
                          xtarget_srs.write (xsrs)
                          (((xisinstance)).apply ((xsrs)) ((((unsupported)).apply ((xint)) ((xstr))))).if
                            xtarget_srs.write (((xSpatialReference)).apply ((xsrs)))
                            (((unsupported)).apply ((((xTypeError)).apply ("Transform only accepts SpatialReference, string, and integer objects."))))
                        ((((xtarget_srs).xsrid).eq ((xself).xsrid)).and (((xdriver).not).or ((xdriver).eq (((xself).xdriver).xname)))).if
                          (((unsupported)).apply (((((xself).xclone)).apply ((xname)))))
                        xtarget.write ((((xcapi).xauto_create_warped_vrt)).apply (((xself).x_ptr)) (((((((xself).xsrs).xwkt).xencode)).apply)) ((((((xtarget_srs).xwkt).xencode)).apply)) ((xalgorithm)) ((xmax_error)) ((((xc_void_p)).apply)))
                        xtarget.write (((xGDALRaster)).apply ((xtarget)))
                        xdata.write (((unsupported)).apply ("srid") (((xtarget_srs).xsrid)) ("width") (((xtarget).xwidth)) ("height") (((xtarget).xheight)) ("origin") ((((unsupported)).apply ((((xtarget).xorigin).xx)) ((((xtarget).xorigin).xy)))) ("scale") ((((unsupported)).apply ((((xtarget).xscale).xx)) ((((xtarget).xscale).xy)))) ("skew") ((((unsupported)).apply ((((xtarget).xskew).xx)) ((((xtarget).xskew).xy)))))
                        (xdriver).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("driver"))) ((xdriver)))
                        (xname).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("name"))) ((xname)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xwarp)) ((xdata)) ((xresampling)) ((xmax_error)))))
                xinfo.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((((xcapi).xget_ds_info)).apply (((xself).xptr)) ("None: is there a None literal in the EO language?")).xdecode)).apply)))