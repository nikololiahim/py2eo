+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > if-5
  [raiseme] > apply
    [x] > mkCopy
      x' > copy
      copy.< > @
    [] > newUID
      memory > cur
      seq > apply
        cur.write (cur.is-empty.if 2 (cur.add 1))
        cur
    [] > raiseEmpty
      [] > xclass
        1 > xid
    [] > raiseNothing
      [] > xclass
        0 > xid
    cage > xcurrent-exception
    cage > result
    cage > tmp
    cage > xconditionalCheck5
    goto > @
      [returnLabel]
        seq > @
          stdout "if-5\n"
          write.
            xconditionalCheck5
            []
              [raiseme] > apply
                cage > result
                cage > tmp
                cage > e0
                cage > xb2
                cage > xa
                goto > @
                  [returnLabel]
                    seq > @
                      stdout "xconditionalCheck5\n"
                      (xa).write (4)
                      (xb2).write (2)
                      [] > tmp1
                        memory > dddata
                        dddata.write (((xa).geq (xb))) > @
                      (e0).write (tmp1.dddata)
                      (e0).if
                        seq
                          (result).write (TRUE)
                          returnLabel.forward 0
                          TRUE
                        seq
                          (result).write (FALSE)
                          returnLabel.forward 0
                          TRUE
                      123
          tmp.write (((xconditionalCheck5)).apply raiseme)
          (tmp.@)
          (result).write (tmp.result)
          result
  apply 0 > @