memory > xsmin
memory > xValueError
memory > xGDALBand
memory > xbytearray
memory > xtempfile
memory > xopen
memory > xrepr
memory > xsstd
memory > xfloat
memory > xJSON_RASTER
memory > xnodata_value
memory > xlist
memory > xtmp_dir
memory > xdat
memory > xsmean
memory > xrange
memory > xx
memory > xzf
memory > xstruct
memory > xdriver
memory > xbytes
memory > xGDALException
memory > xsmax
memory > xnumpy
memory > xmock
memory > xos
memory > x__file__
memory > xsetattr
memory > xname
memory > xshutil
memory > xgeotransform
memory > xmemoryview
memory > xGDALRaster
memory > xSpatialReference
memory > xline
memory > xlen
memory > xSimpleTestCase
memory > xzipfile
memory > xsrs
memory > xcombo
memory > xmocked_clone
[] > test_raster
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_set_nodata_none_on_raster_creation
        memory > xtest_rs_extent
        memory > xtest_raster_info_accessor
        memory > xtest_rs_srs
        memory > xtest_geotransform_and_friends
        memory > xtest_rs_name_repr
        memory > xtest_vsi_invalid_buffer_error
        memory > xtest_band_statistics_empty_band
        memory > xtest_raster_warp
        memory > x_remove_aux_file
        memory > xtest_band_statistics_automatic_refresh
        memory > xtest_memory_based_raster_creation
        memory > xtest_band_statistics
        memory > xtest_offset_size_and_shape_on_raster_creation
        memory > xtest_rs_bands
        memory > xtest_vsi_vsizip_filesystem
        memory > xtest_band_data_setters
        memory > xtest_raster_transform
        memory > xsetUp
        memory > xtest_set_nodata_value_on_raster_creation
        memory > xtest_band_delete_nodata
        memory > xtest_read_mode_error
        memory > xtest_rs_srid
        memory > xtest_vsi_buffer_property
        memory > xtest_vsi_raster_deletion
        memory > xtest_rs_driver
        memory > xtest_rs_size
        memory > xtest_band_data_replication
        memory > xtest_vsi_raster_creation
        memory > xtest_geotransform_bad_inputs
        memory > xtest_file_based_raster_creation
        memory > xtest_nonexistent_file
        memory > xtest_raster_warp_nodata_zone
        memory > xtest_raster_transform_clone
        memory > xrs_path
        memory > xtest_band_data
        memory > xtest_raster_clone
        memory > xtest_compressed_file_based_raster_creation
        memory > xtest_raster_transform_clone_name
        memory > xtest_raster_metadata_property
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrs_path)) ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("../data/rasters/raster.tif"))))
                        (((unsupported)).apply (((xself).xrs)) ((((xGDALRaster)).apply (((xself).xrs_path)))))
                xtest_rs_name_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xrs_path)) ((((xself).xrs).xname)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply (((xself).xrs)))) ("<Raster object at 0xw+>"))
                xtest_rs_driver.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xdriver).xname)) ("GTiff"))
                xtest_rs_size.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xwidth)) (163))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xheight)) (174))
                xtest_rs_srs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xsrs).xsrid)) (3086))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xsrs).xunits)) ((((unsupported)).apply (1.0) ("metre"))))
                xtest_rs_srid.write
                  [xself]
                    memory > xrast
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("width") (16) ("height") (16) ("srid") (4326))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrast).xsrid)) (4326))
                        (((unsupported)).apply (((xrast).xsrid)) (3086))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrast).xsrid)) (3086))
                xtest_geotransform_and_friends.write
                  [xself]
                    memory > xrsmem
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xgeotransform)) ((((unsupported)).apply (511700.4680706557) (100.0) (0.0) (435103.3771231986) (0.0) ((100.0.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xorigin)) ((((unsupported)).apply (511700.4680706557) (435103.3771231986))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xorigin).xx)) (511700.4680706557))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xorigin).xy)) (435103.3771231986))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xscale)) ((((unsupported)).apply (100.0) ((100.0.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xscale).xx)) (100.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xscale).xy)) ((100.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xskew)) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xskew).xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xrs).xskew).xy)) (0))
                        xrsmem.write (((xGDALRaster)).apply ((xJSON_RASTER)))
                        (((unsupported)).apply (((xrsmem).xgeotransform)) ((((unsupported)).apply (0.0) (1.0) (2.0) (3.0) (4.0) (5.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xgeotransform)) ((((unsupported)).apply (0.0) (1.0) (2.0) (3.0) (4.0) (5.0))))
                        (((unsupported)).apply (((xrsmem).xgeotransform)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xgeotransform)) ((((unsupported)).apply ((((xfloat)).apply ((xx)))) ((xx)) ((((xrange)).apply (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xorigin)) ((((unsupported)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xorigin).xx)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xorigin).xy)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xscale)) ((((unsupported)).apply (1) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xscale).xx)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xscale).xy)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xskew)) ((((unsupported)).apply (2) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xskew).xx)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrsmem).xskew).xy)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xwidth)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrsmem).xheight)) (5))
                xtest_geotransform_bad_inputs.write
                  [xself]
                    memory > xrsmem
                    memory > xerror_geotransforms
                    memory > xmsg
                    seq > @
                      seq
                        xrsmem.write (((xGDALRaster)).apply ((xJSON_RASTER)))
                        xerror_geotransforms.write (((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2) (3) (4) (5) ("foo"))) ((((unsupported)).apply (1) (2) (3) (4) (5) (6) ("foo"))))
                        xmsg.write "Geotransform must consist of 6 numeric values."
                        (((unsupported)).apply ((xgeotransform)) ((xerror_geotransforms)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xgeotransform)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply (((xrsmem).xgeotransform)) ((xgeotransform)))
                xtest_rs_extent.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xrs).xextent)) ((((unsupported)).apply (511700.4680706557) (417703.3771231986) (528000.4680706557) (435103.3771231986))))
                xtest_rs_bands.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xself).xrs).xbands)))) (1))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((((xself).xrs).xbands)) (0))) ((xGDALBand)))
                xtest_memory_based_raster_creation.write
                  [xself]
                    memory > xrast
                    memory > xresult
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("width") (16) ("height") (16) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (256))) ("nodata_value") (255))))))))
                        xresult.write ((((((unsupported)).apply (((xrast).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xrange)).apply (256))))))
                xtest_file_based_raster_creation.write
                  [xself]
                    memory > xrstfile
                    memory > xrestored_raster
                    seq > @
                      seq
                        xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                        bogusForceDataize.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (((((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xdatatype)).apply)) ("driver") ("tif") ("name") (((xrstfile).xname)) ("width") (163) ("height") (174) ("nr_of_bands") (1) ("srid") (((((xself).xrs).xsrs).xwkt)) ("origin") ((((unsupported)).apply (((((xself).xrs).xorigin).xx)) (((((xself).xrs).xorigin).xy)))) ("scale") ((((unsupported)).apply (((((xself).xrs).xscale).xx)) (((((xself).xrs).xscale).xy)))) ("skew") ((((unsupported)).apply (((((xself).xrs).xskew).xx)) (((((xself).xrs).xskew).xy)))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") (((((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xdata)).apply)) ("nodata_value") (((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xnodata_value)))))))))
                        xrestored_raster.write (((xGDALRaster)).apply (((xrstfile).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrestored_raster).xsrs).xwkt).xreplace)).apply ("TOWGS84[0,0,0,0,0,0,0],") (""))) ((((((((xself).xrs).xsrs).xwkt).xreplace)).apply ("TOWGS84[0,0,0,0,0,0,0],") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrestored_raster).xgeotransform)) ((((xself).xrs).xgeotransform)))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply (((((((unsupported)).apply (((xrestored_raster).xbands)) (0)).xdata)).apply)) (((((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xdata)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xrestored_raster).xbands)) (0)).xdata)).apply)) (((((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xdata)).apply)))
                xtest_nonexistent_file.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Unable to read raster source input \"nonexistent.tif\"."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xGDALException)) ((xmsg)))))
                          bogusForceDataize.write (((xGDALRaster)).apply ("nonexistent.tif"))
                xtest_vsi_raster_creation.write
                  [xself]
                    memory > xtarget
                    memory > xresult
                    memory > xvsimem
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xrs_path)) ("rb"))) ((xdat)))
                          xvsimem.write (((xGDALRaster)).apply (((((xdat).xread)).apply)))
                        xresult.write ((((((unsupported)).apply (((xvsimem).xbands)) (0)).xdata)).apply)
                        xtarget.write ((((((unsupported)).apply ((((xself).xrs).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          seq
                            xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                            xtarget.write (((((((xtarget).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xtarget)))
                xtest_vsi_raster_deletion.write
                  [xself]
                    memory > xmsg
                    memory > xvsimem
                    memory > xpath
                    memory > xrst
                    seq > @
                      seq
                        xpath.write "/vsimem/raster.tif"
                        xvsimem.write (((xGDALRaster)).apply ((((unsupported)).apply ("name") ((xpath)) ("driver") ("tif") ("width") (4) ("height") (4) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (16))))))))))
                        xrst.write (((xGDALRaster)).apply ((xpath)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrst).xwidth)) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xvsimem)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrst)))))))
                        xmsg.write "Could not open the datasource at \"/vsimem/raster.tif\""
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xGDALException)) ((xmsg)))))
                          bogusForceDataize.write (((xGDALRaster)).apply ((xpath)))
                xtest_vsi_invalid_buffer_error.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Failed creating VSI raster from the input buffer."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xGDALException)) ((xmsg)))))
                          bogusForceDataize.write (((xGDALRaster)).apply ("not-a-raster-buffer"))
                xtest_vsi_buffer_property.write
                  [xself]
                    memory > xrast
                    memory > xresult
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("name") ("/vsimem/raster.tif") ("driver") ("tif") ("width") (4) ("height") (4) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (16))))))))))
                        xresult.write ((((((unsupported)).apply (((((xGDALRaster)).apply (((xrast).xvsi_buffer))).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xrange)).apply (16))))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xrs).xvsi_buffer)))
                xtest_vsi_vsizip_filesystem.write
                  [xself]
                    memory > xrst_path
                    memory > xrst_zipfile
                    memory > xrst
                    seq > @
                      seq
                        xrst_zipfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".zip"))
                        (((unsupported)).apply ((((unsupported)).apply (((xzipfile).xZipFile)) ((xrst_zipfile)) ("w"))) ((xzf)))
                          bogusForceDataize.write ((((xzf).xwrite)).apply (((xself).xrs_path)) ("raster.tif"))
                        xrst_path.write ("/vsizip/".add (((((xos).xpath).xjoin)).apply (((xrst_zipfile).xname)) ("raster.tif")))
                        xrst.write (((xGDALRaster)).apply ((xrst_path)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrst).xdriver).xname)) (((((xself).xrs).xdriver).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrst).xname)) ((xrst_path)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xrst).xis_vsi_based)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xrst).xvsi_buffer)))
                xtest_offset_size_and_shape_on_raster_creation.write
                  [xself]
                    memory > xrast
                    memory > xresult
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("width") (4) ("height") (4) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((unsupported)).apply (1))) ("offset") ((((unsupported)).apply (1) (1))) ("size") ((((unsupported)).apply (2) (2))) ("shape") ((((unsupported)).apply (1) (1))) ("nodata_value") (2))))))))
                        xresult.write ((((((unsupported)).apply (((xrast).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (2) (2) (2) (2) (2) (1) (1) (2) (2) (1) (1) (2) (2) (2) (2) (2))))
                xtest_set_nodata_value_on_raster_creation.write
                  [xself]
                    memory > xrast
                    memory > xresult
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("width") (2) ("height") (2) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("nodata_value") (23))))))))
                        xresult.write ((((((unsupported)).apply (((xrast).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (((((unsupported)).apply (23)).mul 4)))
                xtest_set_nodata_none_on_raster_creation.write
                  [xself]
                    memory > xrast
                    memory > xresult
                    seq > @
                      seq
                        xrast.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("width") (2) ("height") (2) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("nodata_value") ("None: is there a None literal in the EO language?"))))))))
                        xresult.write ((((((unsupported)).apply (((xrast).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (((((unsupported)).apply (0)).mul 4)))
                xtest_raster_metadata_property.write
                  [xself]
                    memory > xmetadata
                    memory > xsource
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xself).xrs).xmetadata)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("DEFAULT"))) ((((unsupported)).apply ("AREA_OR_POINT") ("Area"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("IMAGE_STRUCTURE"))) ((((unsupported)).apply ("INTERLEAVE") ("BAND"))))
                        xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("width") (2) ("height") (2) ("srid") (4326) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (4))) ("nodata_value") (99))))))))
                        xmetadata.write (((unsupported)).apply ("DEFAULT") ((((unsupported)).apply ("OWNER") ("Django") ("VERSION") ("1.0") ("AREA_OR_POINT") ("Point"))))
                        (((unsupported)).apply (((xsource).xmetadata)) ((xmetadata)))
                        (((unsupported)).apply (((((unsupported)).apply (((xsource).xbands)) (0)).xmetadata)) ((xmetadata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xsource).xmetadata)) ("DEFAULT"))) ((((unsupported)).apply ((xmetadata)) ("DEFAULT"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((xsource).xbands)) (0)).xmetadata)) ("DEFAULT"))) ((((unsupported)).apply ((xmetadata)) ("DEFAULT"))))
                        xmetadata.write (((unsupported)).apply ("DEFAULT") ((((unsupported)).apply ("VERSION") ("2.0"))))
                        (((unsupported)).apply (((xsource).xmetadata)) ((xmetadata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsource).xmetadata)) ("DEFAULT"))) ("VERSION"))) ("2.0"))
                        xmetadata.write (((unsupported)).apply ("DEFAULT") ((((unsupported)).apply ("OWNER") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((xsource).xmetadata)) ((xmetadata)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("OWNER") ((((unsupported)).apply (((xsource).xmetadata)) ("DEFAULT"))))
                xtest_raster_info_accessor.write
                  [xself]
                    memory > xinfos
                    memory > xinfo_lines
                    seq > @
                      seq
                        xinfos.write (((xself).xrs).xinfo)
                        xinfo_lines.write (((unsupported)).apply (((((xline).xstrip)).apply)) ((xline)) (((((xinfos).xsplit)).apply ("n"))) ((((((xline).xstrip)).apply).neq "")))
                        (((unsupported)).apply ((xline)) ((((unsupported)).apply ("Driver: GTiff/GeoTIFF") (((("Files: {}".xformat)).apply (((xself).xrs_path)))) ("Size is 163, 174") ("Origin = (511700.468070655711927,435103.377123198588379)") ("Pixel Size = (100.000000000000000,-100.000000000000000)") ("Metadata:") ("AREA_OR_POINT=Area") ("Image Structure Metadata:") ("INTERLEAVE=BAND") ("Band 1 Block=163x50 Type=Byte, ColorInterp=Gray") ("NoData Value=15"))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xline)) ((xinfo_lines)))
                        (((unsupported)).apply ((xline)) ((((unsupported)).apply ("Upper Left  (  511700.468,  435103.377) ( 82d51'46.1d\"W, 27d55' 1.5d\"N)") ("Lower Left  (  511700.468,  417703.377) ( 82d51'52.0d\"W, 27d45'37.5d\"N)") ("Upper Right (  528000.468,  435103.377) ( 82d41'48.8d\"W, 27d54'56.3d\"N)") ("Lower Right (  528000.468,  417703.377) ( 82d41'55.5d\"W, 27d45'32.2d\"N)") ("Center      (  519850.468,  426403.377) ( 82d46'50.6d\"W, 27d50'16.9d\"N)"))))
                          bogusForceDataize.write ((((xself).xassertRegex)).apply ((xinfos)) ((xline)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("NAD83 / Florida GDL Albers") ((xinfos)))
                xtest_compressed_file_based_raster_creation.write
                  [xself]
                    memory > xcompressed
                    memory > xrstfile
                    seq > @
                      seq
                        xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                        xcompressed.write (((((xself).xrs).xwarp)).apply ((((unsupported)).apply ("papsz_options") ((((unsupported)).apply ("compress") ("packbits"))) ("name") (((xrstfile).xname)))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((((xos).xpath).xgetsize)).apply (((xcompressed).xname)))) ((((((xos).xpath).xgetsize)).apply ((((xself).xrs).xname)))))
                        xcompressed.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("tif") ("name") (((xrstfile).xname)) ("width") (40) ("height") (40) ("srid") (3086) ("origin") ((((unsupported)).apply (500000) (400000))) ("scale") ((((unsupported)).apply (100) ((100.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply ((((unsupported)).apply (40) (2))))) ("nodata_value") (255))))) ("papsz_options") ((((unsupported)).apply ("compress") ("packbits") ("pixeltype") ("signedbyte") ("blockxsize") (23) ("blockysize") (23))))))
                        xcompressed.write (((xGDALRaster)).apply (((xcompressed).xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcompressed).xmetadata)) ("IMAGE_STRUCTURE"))) ("COMPRESSION"))) ("PACKBITS"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xcompressed).xbands)) (0)).xmetadata)) ("IMAGE_STRUCTURE"))) ("PIXELTYPE"))) ("SIGNEDBYTE"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Block=40x23") (((xcompressed).xinfo)))
                xtest_raster_warp.write
                  [xself]
                    memory > xtarget
                    memory > xresult
                    memory > xsource
                    memory > xdata
                    seq > @
                      seq
                        xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("MEM") ("name") ("sourceraster") ("width") (4) ("height") (4) ("nr_of_bands") (1) ("srid") (3086) ("origin") ((((unsupported)).apply (500000) (400000))) ("scale") ((((unsupported)).apply (100) ((100.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (16))) ("nodata_value") (255))))))))
                        xdata.write (((unsupported)).apply ("scale") ((((unsupported)).apply (200) ((200.neg)))) ("width") (2) ("height") (2))
                        xtarget.write ((((xsource).xwarp)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xwidth)) ((((unsupported)).apply ((xdata)) ("width"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xheight)) ((((unsupported)).apply ((xdata)) ("height"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xscale)) ((((unsupported)).apply ((xdata)) ("scale"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xtarget).xbands)) (0)).xdatatype)).apply)) (((((((unsupported)).apply (((xsource).xbands)) (0)).xdatatype)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xname)) ("sourceraster_copy.MEM"))
                        xresult.write ((((((unsupported)).apply (((xtarget).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (5) (7) (13) (15))))
                        xdata.write (((unsupported)).apply ("name") ("/path/to/targetraster.tif") ("datatype") (6))
                        xtarget.write ((((xsource).xwarp)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xtarget).xbands)) (0)).xdatatype)).apply)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xname)) ("/path/to/targetraster.tif"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtarget).xdriver).xname)) ("MEM"))
                        xresult.write ((((((unsupported)).apply (((xtarget).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply (0.0) (1.0) (2.0) (3.0) (4.0) (5.0) (6.0) (7.0) (8.0) (9.0) (10.0) (11.0) (12.0) (13.0) (14.0) (15.0))))
                xtest_raster_warp_nodata_zone.write
                  [xself]
                    memory > xresult
                    memory > xsource
                    seq > @
                      seq
                        xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("MEM") ("width") (4) ("height") (4) ("srid") (3086) ("origin") ((((unsupported)).apply (500000) (400000))) ("scale") ((((unsupported)).apply (100) ((100.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (16))) ("nodata_value") (23))))))))
                        xresult.write ((((((unsupported)).apply ((((((xsource).xwarp)).apply ((((unsupported)).apply ("origin") ((((unsupported)).apply (200000) (200000)))))).xbands)) (0)).xdata)).apply)
                        (xnumpy).if
                          xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (((((unsupported)).apply (23)).mul 16)))
                xtest_raster_clone.write
                  [xself]
                    memory > xclone
                    memory > xrstfile
                    memory > xtests
                    memory > xsource
                    seq > @
                      seq
                        xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("MEM") ("") (23))) ((((unsupported)).apply ("tif") (((xrstfile).xname)) (99))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdriver)) ((xname)) ((xnodata_value)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdriver)))))
                            seq
                              xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ((xdriver)) ("name") ((xname)) ("width") (4) ("height") (4) ("srid") (3086) ("origin") ((((unsupported)).apply (500000) (400000))) ("scale") ((((unsupported)).apply (100) ((100.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (16))) ("nodata_value") ((xnodata_value)))))))))
                              xclone.write ((((xsource).xclone)).apply)
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xclone).xname)) (((xsource).xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).x_write)) (((xsource).x_write)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xclone).xsrs).xsrid)) ((((xsource).xsrs).xsrid)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).xwidth)) (((xsource).xwidth)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).xheight)) (((xsource).xheight)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).xorigin)) (((xsource).xorigin)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).xscale)) (((xsource).xscale)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclone).xskew)) (((xsource).xskew)))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xclone)) ((xsource)))
                xtest_raster_transform.write
                  [xself]
                    memory > xndv
                    memory > xrstfile
                    memory > xresult
                    memory > xtests
                    memory > xtarget
                    memory > xsource
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply (3086) ("3086") ((((xSpatialReference)).apply (3086))))
                        (((unsupported)).apply ((xsrs)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xsrs)))))
                            seq
                              xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                              xndv.write 99
                              xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("tif") ("name") (((xrstfile).xname)) ("width") (5) ("height") (5) ("nr_of_bands") (1) ("srid") (4326) ("origin") ((((unsupported)).apply ((5.neg)) (5))) ("scale") ((((unsupported)).apply (2) ((2.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (25))) ("nodata_value") ((xndv)))))))))
                              xtarget.write ((((xsource).xtransform)).apply ((xsrs)))
                              xtarget.write (((xGDALRaster)).apply (((xtarget).xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtarget).xsrs).xsrid)) (3086))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xwidth)) (7))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xheight)) (7))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xtarget).xbands)) (0)).xdatatype)).apply)) (((((((unsupported)).apply (((xsource).xbands)) (0)).xdatatype)).apply)))
                              bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xtarget).xorigin)) (0))) (9124842.791079799) (3))
                              bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xtarget).xorigin)) (1))) (1589911.6476407414) (3))
                              bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xtarget).xscale)) (0))) (223824.82664250192) (3))
                              bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((unsupported)).apply (((xtarget).xscale)) (1))) ((223824.82664250192.neg)) (3))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xskew)) ((((unsupported)).apply (0) (0))))
                              xresult.write ((((((unsupported)).apply (((xtarget).xbands)) (0)).xdata)).apply)
                              (xnumpy).if
                                xresult.write (((((((xresult).xflatten)).apply).xtolist)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((unsupported)).apply ((xndv)) ((xndv)) ((xndv)) ((xndv)) (4) ((xndv)) ((xndv)) ((xndv)) ((xndv)) (2) (3) (9) ((xndv)) ((xndv)) ((xndv)) (1) (2) (8) (13) (19) ((xndv)) (0) (6) (6) (12) (18) (18) (24) ((xndv)) (10) (11) (16) (22) (23) ((xndv)) ((xndv)) ((xndv)) (15) (21) (22) ((xndv)) ((xndv)) ((xndv)) ((xndv)) (20) ((xndv)) ((xndv)) ((xndv)) ((xndv)))))
                xtest_raster_transform_clone.write
                  [xself]
                    memory > xrstfile
                    memory > xsource
                    seq > @
                      (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xGDALRaster)) ("clone"))) ((xmocked_clone)))
                        seq
                          xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                          xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("tif") ("name") (((xrstfile).xname)) ("width") (5) ("height") (5) ("nr_of_bands") (1) ("srid") (4326) ("origin") ((((unsupported)).apply ((5.neg)) (5))) ("scale") ((((unsupported)).apply (2) ((2.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (25))) ("nodata_value") (99))))))))
                          bogusForceDataize.write ((((xsource).xtransform)).apply (4326))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_clone).xcall_count)) (1))
                xtest_raster_transform_clone_name.write
                  [xself]
                    memory > xclone_name
                    memory > xtarget
                    memory > xrstfile
                    memory > xsource
                    seq > @
                      seq
                        xrstfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) (".tif"))
                        xsource.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("tif") ("name") (((xrstfile).xname)) ("width") (5) ("height") (5) ("nr_of_bands") (1) ("srid") (4326) ("origin") ((((unsupported)).apply ((5.neg)) (5))) ("scale") ((((unsupported)).apply (2) ((2.neg)))) ("skew") ((((unsupported)).apply (0) (0))) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (25))) ("nodata_value") (99))))))))
                        xclone_name.write (((xrstfile).xname).add "_respect_name.GTiff")
                        xtarget.write (((unsupported)).apply (((xsource).xtransform)) (4326) ((xclone_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarget).xname)) ((xclone_name)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrs_path.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("../data/rasters/raster.tif"))
                xtest_band_data.write
                  [xself]
                    memory > xband
                    memory > xrs
                    memory > xassert_array
                    memory > xdata
                    seq > @
                      seq
                        xrs.write (((xGDALRaster)).apply (((xself).xrs_path)))
                        xband.write (((unsupported)).apply (((xrs).xbands)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xwidth)) (163))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xheight)) (174))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xdescription)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xdatatype)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xband).xdatatype)) (TRUE))) ("GDT_Byte"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xcolor_interp)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xband).xcolor_interp)) (TRUE))) ("GCI_GrayIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xnodata_value)) (15))
                        (xnumpy).if
                          seq
                            xdata.write ((((xband).xdata)).apply)
                            xassert_array.write ((((xnumpy).xloadtxt)).apply ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("../data/rasters/raster.numpy.txt"))))
                            bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xdata)) ((xassert_array)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xdata).xshape)) ((((unsupported)).apply (((xband).xheight)) (((xband).xwidth)))))
                xtest_band_statistics.write
                  [xself]
                    memory > xband
                    memory > xrs
                    memory > xpam_file
                    memory > xrs_path
                    seq > @
                      (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmp_dir)))
                        seq
                          xrs_path.write (((((xos).xpath).xjoin)).apply ((xtmp_dir)) ("raster.tif"))
                          bogusForceDataize.write ((((xshutil).xcopyfile)).apply (((xself).xrs_path)) ((xrs_path)))
                          xrs.write (((xGDALRaster)).apply ((xrs_path)))
                          xband.write (((unsupported)).apply (((xrs).xbands)) (0))
                          xpam_file.write ((xrs_path).add ".aux.xml")
                          (((unsupported)).apply ((((unsupported)).apply ((xsmin)) ((xsmax)) ((xsmean)) ((xsstd)))) ((((unsupported)).apply (((xband).xstatistics)) (TRUE))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsmin)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsmax)) (9))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xsmean)) (2.842331288343558))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xsstd)) (2.3965567248965356))
                          (((unsupported)).apply ((((unsupported)).apply ((xsmin)) ((xsmax)) ((xsmean)) ((xsstd)))) ((((unsupported)).apply (((xband).xstatistics)) (FALSE) (TRUE))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsmin)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsmax)) (9))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xsmean)) (2.828326634228898))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xsstd)) (2.4260526986669095))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xmin)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xband).xmax)) (9))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xband).xmean)) (2.828326634228898))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xband).xstd)) (2.4260526986669095))
                          (((unsupported)).apply ((xrs)) ((xband)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisfile)).apply ((xpam_file)))))
                x_remove_aux_file.write
                  [xself]
                    memory > xpam_file
                    seq > @
                      seq
                        xpam_file.write (((xself).xrs_path).add ".aux.xml")
                        (((((xos).xpath).xisfile)).apply ((xpam_file))).if
                          bogusForceDataize.write ((((xos).xremove)).apply ((xpam_file)))
                xtest_read_mode_error.write
                  [xself]
                    memory > xband
                    memory > xrs
                    seq > @
                      seq
                        xrs.write (((unsupported)).apply ((xGDALRaster)) (((xself).xrs_path)) (FALSE))
                        xband.write (((unsupported)).apply (((xrs).xbands)) (0))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).x_remove_aux_file)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xGDALException)))))
                          bogusForceDataize.write (((xsetattr)).apply ((xband)) ("nodata_value") (10))
                xtest_band_data_setters.write
                  [xself]
                    memory > xblock
                    memory > xbandmemjson
                    memory > xrsmemjson
                    memory > xrsmem
                    memory > xpacked_block
                    memory > xbandmem
                    memory > xresult
                    seq > @
                      seq
                        xrsmem.write (((xGDALRaster)).apply ((((unsupported)).apply ("datatype") (1) ("driver") ("MEM") ("name") ("mem_rst") ("width") (10) ("height") (10) ("nr_of_bands") (1) ("srid") (4326))))
                        xbandmem.write (((unsupported)).apply (((xrsmem).xbands)) (0))
                        (((unsupported)).apply (((xbandmem).xnodata_value)) (99))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbandmem).xnodata_value)) (99))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((((xrange)).apply (100))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply (((((xbandmem).xdata)).apply)) ((((((((xnumpy).xarange)).apply (100)).xreshape)).apply (10) (10))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbandmem).xdata)).apply)) ((((xlist)).apply ((((xrange)).apply (100))))))
                        xblock.write (((xlist)).apply ((((xrange)).apply (100) (104))))
                        xpacked_block.write ((((xstruct).xpack)).apply (("<".add "B B B B")) ((((unsupported)).apply ((xblock)))))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((xblock)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        xresult.write (((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xresult)) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xblock)))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((xpacked_block)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        xresult.write (((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xresult)) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xblock)))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((((xbytes)).apply ((xpacked_block)))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        xresult.write (((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xresult)) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xblock)))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((((xbytearray)).apply ((xpacked_block)))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        xresult.write (((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xresult)) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xblock)))
                        bogusForceDataize.write ((((xbandmem).xdata)).apply ((((xmemoryview)).apply ((xpacked_block)))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        xresult.write (((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((xresult)) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xblock)))
                        (xnumpy).if
                          seq
                            bogusForceDataize.write ((((xbandmem).xdata)).apply (((((((unsupported)).apply (((xnumpy).xarray)) ((xblock)) ("int8")).xreshape)).apply (2) (2))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))
                            bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply ((((unsupported)).apply (((xbandmem).xdata)) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))) ((((((((xnumpy).xarray)).apply ((xblock))).xreshape)).apply (2) (2))))
                        xrsmemjson.write (((xGDALRaster)).apply ((xJSON_RASTER)))
                        xbandmemjson.write (((unsupported)).apply (((xrsmemjson).xbands)) (0))
                        (xnumpy).if
                          bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply (((((xbandmemjson).xdata)).apply)) ((((((((xnumpy).xarray)).apply ((((xrange)).apply (25)))).xreshape)).apply (5) (5))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbandmemjson).xdata)).apply)) ((((xlist)).apply ((((xrange)).apply (25))))))
                xtest_band_statistics_automatic_refresh.write
                  [xself]
                    memory > xband
                    memory > xrsmem
                    seq > @
                      seq
                        xrsmem.write (((xGDALRaster)).apply ((((unsupported)).apply ("srid") (4326) ("width") (2) ("height") (2) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") (((((unsupported)).apply (0)).mul 4)) ("nodata_value") (99))))))))
                        xband.write (((unsupported)).apply (((xrsmem).xbands)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xstatistics)).apply)) ((((unsupported)).apply (0) (0) (0) (0))))
                        bogusForceDataize.write ((((xband).xdata)).apply ((((unsupported)).apply (1) (1) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xstatistics)).apply)) ((((unsupported)).apply (0.0) (1.0) (0.5) (0.5))))
                        (((unsupported)).apply (((xband).xnodata_value)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xstatistics)).apply)) ((((unsupported)).apply (1.0) (1.0) (1.0) (0.0))))
                xtest_band_statistics_empty_band.write
                  [xself]
                    memory > xrsmem
                    seq > @
                      seq
                        xrsmem.write (((xGDALRaster)).apply ((((unsupported)).apply ("srid") (4326) ("width") (1) ("height") (1) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((unsupported)).apply (0))) ("nodata_value") (0))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xrsmem).xbands)) (0)).xstatistics)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_band_delete_nodata.write
                  [xself]
                    memory > xrsmem
                    seq > @
                      seq
                        xrsmem.write (((xGDALRaster)).apply ((((unsupported)).apply ("srid") (4326) ("width") (1) ("height") (1) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((unsupported)).apply (0))) ("nodata_value") (1))))))))
                        (((unsupported)).apply (((((unsupported)).apply (((xrsmem).xbands)) (0)).xnodata_value)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((unsupported)).apply (((xrsmem).xbands)) (0)).xnodata_value)))
                xtest_band_data_replication.write
                  [xself]
                    memory > xband
                    memory > xcombos
                    seq > @
                      seq
                        xband.write (((unsupported)).apply (((((xGDALRaster)).apply ((((unsupported)).apply ("srid") (4326) ("width") (3) ("height") (3) ("bands") ((((unsupported)).apply ((((unsupported)).apply ("data") ((((xrange)).apply (10) (19))) ("nodata_value") (0)))))))).xbands)) (0))
                        xcombos.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (1) (1))) (((((unsupported)).apply (1)).mul 9)))) ((((unsupported)).apply ((((xrange)).apply (3))) ((((unsupported)).apply (1) (3))) ((((unsupported)).apply (0) (0) (0) (1) (1) (1) (2) (2) (2))))) ((((unsupported)).apply ((((xrange)).apply (3))) ((((unsupported)).apply (3) (1))) ((((unsupported)).apply (0) (1) (2) (0) (1) (2) (0) (1) (2))))))
                        (((unsupported)).apply ((xcombo)) ((xcombos)))
                          seq
                            (((unsupported)).apply (((xband).xdata)) ((((unsupported)).apply ((xcombo)) (0))) ((((unsupported)).apply ((xcombo)) (1))))
                            (xnumpy).if
                              bogusForceDataize.write (((((xnumpy).xtesting).xassert_equal)).apply (((((xband).xdata)).apply)) ((((((((xnumpy).xarray)).apply ((((unsupported)).apply ((xcombo)) (2)))).xreshape)).apply (3) (3))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xband).xdata)).apply)) ((((xlist)).apply ((((unsupported)).apply ((xcombo)) (2))))))