memory > xelement
memory > xg
memory > xbytearray
memory > xopen
memory > xtuple
memory > xe
memory > xd
memory > xthreading
memory > xD
memory > xC
memory > xBoom2
memory > xUserClass
memory > xrun_unittest
memory > xscript_dir
memory > xGCTogglingTests
memory > xstdout
memory > xImportError
memory > xAttributeError
memory > xrc
memory > xc
memory > xcount
memory > xlist
memory > xassert_python_ok
memory > xscript
memory > xValueError
memory > ximport_module
memory > xZ
memory > xoldnc
memory > xwr
memory > xout
memory > xB
memory > xexec
memory > xUncollectable
memory > xrange
memory > xnc
memory > xh
memory > xb
memory > xverbose
memory > xst
memory > xerr
memory > xtextwrap
memory > xtemp_dir
memory > xprint
memory > xtype
memory > xBoom2_New
memory > xany
memory > xf
memory > xset
memory > xint
memory > xhasattr
memory > xtime
memory > xGC_Detector
memory > xoldc
memory > xx
memory > xi
memory > xmake_script
memory > xUserInt
memory > xsys
memory > xstderr
memory > xfloat
memory > xunlink
memory > xgc
memory > xTESTFN
memory > xGCCallbackTests
memory > xdir
memory > xobj
memory > xsubprocess
memory > xstrip_python_stderr
memory > xgarbage
memory > xweakref
memory > xUserIntSlots
memory > xv
memory > xid
memory > xunittest
memory > xC1055820
memory > xBoom_New
memory > xOuch
memory > xUserClassSlots
memory > xnext
memory > xGCTests
memory > xobject
memory > xsysconfig
memory > xA
memory > xBoom
memory > xisinstance
memory > xlen
memory > xdict
memory > xUserFloatSlots
memory > xstart_threads
memory > xTypeError
memory > x__name__
memory > xa
[] > test_gc
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_get_stats
        memory > xcb1
        memory > xtest_main
        memory > xtest_bug1055820d
        memory > xtest_bug1055820c
        memory > xtest_refcount_errors
        memory > xtest_gc_ordinary_module_at_shutdown
        memory > x__init__
        memory > xpreclean
        memory > xtest_del_newclass
        memory > xtest_bug21435
        memory > xtest_garbage_at_shutdown
        memory > xtest_boom2
        memory > xtest_global_del_SystemExit
        memory > xtest_legacy_finalizer_newclass
        memory > xwith_tp_del
        memory > xtest_del
        memory > xtest_method
        memory > xtest_collect_generations
        memory > xtest_tuple
        memory > xtest_collect
        memory > x__tp_del__
        memory > xtest_trashcan
        memory > xtest_class
        memory > xtest_newstyleclass
        memory > xtest_frame
        memory > xtest_newinstance
        memory > xsetUp
        memory > xtest_gc_main_module_at_shutdown
        memory > xtest_38379
        memory > xcb2
        memory > xtest_boom2_new
        memory > xtest_legacy_finalizer
        memory > xtest_trashcan_threads
        memory > xtest_collect_generation
        memory > xtest_get_objects_arguments
        memory > xtest_get_objects
        memory > xtest_get_count
        memory > xtest_boom_new
        memory > xtest_dict
        memory > xtest_freeze
        memory > xtest_saveall
        memory > xtest_is_tracked
        memory > xBUILD_WITH_NDEBUG
        memory > xtest_instance
        memory > xtest_function
        memory > xtest_get_referents
        memory > xtest_collect_garbage
        memory > xtearDown
        memory > xtest_bug1055820b
        memory > xtest_list
        memory > xtest_boom
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xwith_tp_del.write
                [xcls]
                  memory > x__new__
                  seq > @
                    seq
                      (((unsupported)).apply ((xobject)))
                        x__new__.write
                          [xcls]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xTypeError)).apply ("requires _testcapi.with_tp_del"))))
                      (((unsupported)).apply ((xC)))
            (((unsupported)).apply ((xobject)))
              x__init__.write
                [xself xi]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xi)) ((xi)))
                      (((unsupported)).apply (((xself).xloop)) ((xself)))
            (((unsupported)).apply ((xobject)))
              x__init__.write
                [xself]
                  memory > xit_happened
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xgc_happened)) (FALSE))
                      xit_happened.write
                        [xignored]
                          seq > @
                            (((unsupported)).apply (((xself).xgc_happened)) (TRUE))
                      (((unsupported)).apply (((xself).xwr)) (((((xweakref).xref)).apply ((((xC1055820)).apply (666))) ((xit_happened)))))
            (((unsupported)).apply ((xobject)) ((xwith_tp_del)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xpartner]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xpartner)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xpartner)) ((((unsupported)).apply ((xUncollectable)) ((xself)))))
                          (((unsupported)).apply (((xself).xpartner)) ((xpartner)))
                x__tp_del__.write
                  [xself]
                    seq > @
            (((((((xsysconfig).xget_config_vars)).apply).xget)).apply ("PY_CFLAGS") ("")).if
              xBUILD_WITH_NDEBUG.write (((unsupported)).apply ("-DNDEBUG") ((((unsupported)).apply (((((xsysconfig).xget_config_vars)).apply)) ("PY_CFLAGS"))))
              xBUILD_WITH_NDEBUG.write ((((xhasattr)).apply ((xsys)) ("gettotalrefcount")).not)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_list.write
                  [xself]
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xl).xappend)).apply ((xl)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (1))
                xtest_dict.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) ((xd)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (1))
                xtest_tuple.write
                  [xself]
                    memory > xt
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply)
                        xt.write (((unsupported)).apply ((xl)))
                        bogusForceDataize.write ((((xl).xappend)).apply ((xt)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xt)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (2))
                xtest_class.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xA).xa)) ((xA)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                xtest_newstyleclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                xtest_instance.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write (((xA)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                xtest_newinstance.write
                  [xself]
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                        xa.write (((xA)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        (((unsupported)).apply ((xlist)))
                        (((unsupported)).apply ((xB)) ((xA)))
                        xa.write (((xC)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        (((unsupported)).apply (((xA).xa)) ((((xA)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (0))
                xtest_method.write
                  [xself]
                    memory > x__init__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xinit)) (((xself).x__init__)))
                        xa.write (((xA)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                xtest_legacy_finalizer.write
                  [xself]
                    memory > xid_a
                    memory > x__tp_del__
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xwith_tp_del)))
                          x__tp_del__.write
                            [xself]
                              seq > @
                        (((unsupported)).apply)
                        xa.write (((xA)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        xid_a.write (((xid)).apply ((xa)))
                        xb.write (((xB)).apply)
                        (((unsupported)).apply (((xb).xb)) ((xb)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        (((unsupported)).apply ((xobj)) (((xgc).xgarbage)))
                          ((((xid)).apply ((xobj))).eq (xid_a)).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xobj).xa)))))
                              (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("didn't find obj in garbage (finalizer)"))
                        bogusForceDataize.write (((((xgc).xgarbage).xremove)).apply ((xobj)))
                xtest_legacy_finalizer_newclass.write
                  [xself]
                    memory > xid_a
                    memory > x__tp_del__
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)) ((xwith_tp_del)))
                          x__tp_del__.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xobject)))
                        xa.write (((xA)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        xid_a.write (((xid)).apply ((xa)))
                        xb.write (((xB)).apply)
                        (((unsupported)).apply (((xb).xb)) ((xb)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xgc).xcollect)).apply)) (0))
                        (((unsupported)).apply ((xobj)) (((xgc).xgarbage)))
                          ((((xid)).apply ((xobj))).eq (xid_a)).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xobj).xa)))))
                              (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("didn't find obj in garbage (finalizer)"))
                        bogusForceDataize.write (((((xgc).xgarbage).xremove)).apply ((xobj)))
                xtest_function.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("def f(): passn") ((xd)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (2))
                xtest_frame.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xf.write
                          []
                            memory > xframe
                            seq > @
                              xframe.write ((((xsys).x_getframe)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (1))
                xtest_saveall.write
                  [xself]
                    memory > xid_L
                    memory > xL
                    memory > xobj
                    memory > xdebug
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))
                        xL.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xL).xappend)).apply ((xL)))
                        xid_L.write (((xid)).apply ((xL)))
                        xdebug.write ((((xgc).xget_debug)).apply)
                        bogusForceDataize.write ((((xgc).xset_debug)).apply (((xdebug).or ((xgc).xDEBUG_SAVEALL))))
                        (((unsupported)).apply ((((unsupported)).apply ((xL)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xset_debug)).apply ((xdebug)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) (1))
                        xobj.write (((((xgc).xgarbage).xpop)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xid)).apply ((xobj)))) ((xid_L)))
                xtest_del.write
                  [xself]
                    memory > x__del__
                    memory > xthresholds
                    memory > xa
                    seq > @
                      seq
                        xthresholds.write ((((xgc).xget_threshold)).apply)
                        bogusForceDataize.write ((((xgc).xenable)).apply)
                        bogusForceDataize.write ((((xgc).xset_threshold)).apply (1))
                        (((unsupported)).apply)
                          x__del__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((xdir)).apply ((xself)))
                        xa.write (((xA)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xgc).xdisable)).apply)
                        bogusForceDataize.write ((((xgc).xset_threshold)).apply ((((unsupported)).apply ((xthresholds)))))
                xtest_del_newclass.write
                  [xself]
                    memory > x__del__
                    memory > xthresholds
                    memory > xa
                    seq > @
                      seq
                        xthresholds.write ((((xgc).xget_threshold)).apply)
                        bogusForceDataize.write ((((xgc).xenable)).apply)
                        bogusForceDataize.write ((((xgc).xset_threshold)).apply (1))
                        (((unsupported)).apply ((xobject)))
                          x__del__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((xdir)).apply ((xself)))
                        xa.write (((xA)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xgc).xdisable)).apply)
                        bogusForceDataize.write ((((xgc).xset_threshold)).apply ((((unsupported)).apply ((xthresholds)))))
                xtest_get_count.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) (((((xgc).xget_count)).apply)))
                        xx.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xe)) ((xf)))) (((((xgc).xget_count)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((xc)))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xe)) ((xf)))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xa)) (5))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xd)) ((xa)))
                xtest_collect_generations.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xx.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) (((((xgc).xget_count)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xe)) ((xf)))) (((((xgc).xget_count)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xg)) ((xh)) ((xi)))) (((((xgc).xget_count)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((xc)))) ((((unsupported)).apply (1) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xe)) ((xf)))) ((((unsupported)).apply (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ((xi)))) ((((unsupported)).apply (0) (0))))
                xtest_trashcan.write
                  [xself]
                    memory > xu
                    memory > xt
                    memory > xv
                    memory > x__del__
                    memory > xn
                    memory > xN
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xn.write 0
                            x__del__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xOuch).xn)) ((((xOuch).xn).sub 1)))
                                    ((((xOuch).xn).mod 17).eq 0).if
                                      bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xenable)).apply)
                        xN.write 150
                        (((unsupported)).apply ((xcount)) ((((xrange)).apply (2))))
                          seq
                            xt.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                              xt.write (((unsupported)).apply ((xt)) ((((xOuch)).apply)))
                            xu.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                              xu.write (((unsupported)).apply ((xu)) ((((xOuch)).apply)))
                            xv.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                              xv.write (((unsupported)).apply (1) ((xv)) (2) ((((xOuch)).apply)))
                        bogusForceDataize.write ((((xgc).xdisable)).apply)
                xtest_trashcan_threads.write
                  [xself]
                    memory > xmake_nested
                    memory > xNESTING
                    memory > xrun_thread
                    memory > xinits
                    memory > xexit
                    memory > x__init__
                    memory > x__del__
                    memory > xold_switchinterval
                    memory > xsleeper_gen
                    memory > xthreads
                    memory > xdels
                    memory > xt
                    memory > xN_THREADS
                    seq > @
                      seq
                        xNESTING.write 60
                        xN_THREADS.write 2
                        xsleeper_gen.write
                          []
                            seq > @
                              seq
                                unsupported
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  bogusForceDataize.write ((((xtime).xsleep)).apply (0.000001))
                        (((unsupported)).apply ((xlist)))
                          seq
                            xinits.write (((unsupported)).apply)
                            xdels.write (((unsupported)).apply)
                            x__init__.write
                              [xself xalist]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xself)) ((((unsupported)).apply)))) ((xalist)))
                                    bogusForceDataize.write (((((xC).xinits).xappend)).apply ("None: is there a None literal in the EO language?"))
                            x__del__.write
                              [xself]
                                memory > xg
                                seq > @
                                  seq
                                    bogusForceDataize.write (((((xC).xdels).xappend)).apply ("None: is there a None literal in the EO language?"))
                                    xg.write (((xsleeper_gen)).apply)
                                    bogusForceDataize.write (((xnext)).apply ((xg)))
                        xmake_nested.write
                          []
                            memory > xx
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xx.write (((xC)).apply ((((unsupported)).apply)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((xNESTING)))))
                                  xx.write (((unsupported)).apply ((((xC)).apply ((((unsupported)).apply ((xx)))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        xrun_thread.write
                          []
                            seq > @
                              seq
                                unsupported
                                while.
                                  ((xexit).not)
                                  [unused]
                                    seq > @
                                      bogusForceDataize.write (((xmake_nested)).apply)
                        xold_switchinterval.write ((((xsys).xgetswitchinterval)).apply)
                        bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            xexit.write (((unsupported)).apply)
                            xthreads.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN_THREADS)))))
                              seq
                                xt.write (((unsupported)).apply (((xthreading).xThread)) ((xrun_thread)))
                                bogusForceDataize.write ((((xthreads).xappend)).apply ((xt)))
                            (((unsupported)).apply ((((xstart_threads)).apply ((xthreads)) ((((unsupported)).apply (((((xexit).xappend)).apply (1))))))))
                              bogusForceDataize.write ((((xtime).xsleep)).apply (1.0))
                          bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((xold_switchinterval)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xC).xinits)))) ((((xlen)).apply (((xC).xdels)))))
                xtest_boom.write
                  [xself]
                    memory > x__getattr__
                    memory > xgarbagelen
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__getattr__.write
                            [xself xsomeattribute]
                              seq > @
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xattr)))))
                                  (((unsupported)).apply ((xAttributeError)))
                        xa.write (((xBoom)).apply)
                        xb.write (((xBoom)).apply)
                        (((unsupported)).apply (((xa).xattr)) ((xb)))
                        (((unsupported)).apply (((xb).xattr)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xgarbagelen.write (((xlen)).apply (((xgc).xgarbage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) ((xgarbagelen)))
                xtest_boom2.write
                  [xself]
                    memory > x__getattr__
                    memory > xb
                    memory > x__init__
                    memory > xgarbagelen
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) (0))
                            x__getattr__.write
                              [xself xsomeattribute]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xx)) (1))
                                    (((xself).xx).greater 1).if
                                      (((unsupported)).apply ((((unsupported)).apply (((xself).xattr)))))
                                    (((unsupported)).apply ((xAttributeError)))
                        xa.write (((xBoom2)).apply)
                        xb.write (((xBoom2)).apply)
                        (((unsupported)).apply (((xa).xattr)) ((xb)))
                        (((unsupported)).apply (((xb).xattr)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xgarbagelen.write (((xlen)).apply (((xgc).xgarbage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) ((xgarbagelen)))
                xtest_boom_new.write
                  [xself]
                    memory > x__getattr__
                    memory > xgarbagelen
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__getattr__.write
                            [xself xsomeattribute]
                              seq > @
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xattr)))))
                                  (((unsupported)).apply ((xAttributeError)))
                        xa.write (((xBoom_New)).apply)
                        xb.write (((xBoom_New)).apply)
                        (((unsupported)).apply (((xa).xattr)) ((xb)))
                        (((unsupported)).apply (((xb).xattr)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xgarbagelen.write (((xlen)).apply (((xgc).xgarbage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) ((xgarbagelen)))
                xtest_boom2_new.write
                  [xself]
                    memory > x__getattr__
                    memory > xb
                    memory > x__init__
                    memory > xgarbagelen
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) (0))
                            x__getattr__.write
                              [xself xsomeattribute]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xx)) (1))
                                    (((xself).xx).greater 1).if
                                      (((unsupported)).apply ((((unsupported)).apply (((xself).xattr)))))
                                    (((unsupported)).apply ((xAttributeError)))
                        xa.write (((xBoom2_New)).apply)
                        xb.write (((xBoom2_New)).apply)
                        (((unsupported)).apply (((xa).xattr)) ((xb)))
                        (((unsupported)).apply (((xb).xattr)) ((xa)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xgarbagelen.write (((xlen)).apply (((xgc).xgarbage)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xcollect)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) ((xgarbagelen)))
                xtest_get_referents.write
                  [xself]
                    memory > xexpected
                    memory > xgot
                    memory > xatuple
                    memory > xalist
                    memory > xadict
                    seq > @
                      seq
                        xalist.write (((unsupported)).apply (1) (3) (5))
                        xgot.write ((((xgc).xget_referents)).apply ((xalist)))
                        bogusForceDataize.write ((((xgot).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xalist)))
                        xatuple.write (((xtuple)).apply ((xalist)))
                        xgot.write ((((xgc).xget_referents)).apply ((xatuple)))
                        bogusForceDataize.write ((((xgot).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xalist)))
                        xadict.write (((unsupported)).apply (1) (3) (5) (7))
                        xexpected.write (((unsupported)).apply (1) (3) (5) (7))
                        xgot.write ((((xgc).xget_referents)).apply ((xadict)))
                        bogusForceDataize.write ((((xgot).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                        xgot.write ((((xgc).xget_referents)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (0) (0) (0))))
                        bogusForceDataize.write ((((xgot).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) (((((unsupported)).apply (0) (0)).sub (((xlist)).apply ((((xrange)).apply (5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xget_referents)).apply (1) ("a") ((((unsupported)).apply)))) ((((unsupported)).apply)))
                xtest_is_tracked.write
                  [xself]
                    memory > x__slots__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply (1.0))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((1.0.sub (((unsupported)).apply))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply (TRUE))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply (FALSE))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((((xbytearray)).apply ("a"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((xtype)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((xobject)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xgc).xis_tracked)).apply ((((xobject)).apply)))))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xint)))
                        (((unsupported)).apply)
                          x__slots__.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfloat)))
                          x__slots__.write (((unsupported)).apply)
                        (((unsupported)).apply ((xint)))
                          x__slots__.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((xgc)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((xUserClass)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xUserClass)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xUserInt)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xset)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xUserClassSlots)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xUserFloatSlots)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xUserIntSlots)).apply)))))
                xtest_bug1055820b.write
                  [xself]
                    memory > xc
                    memory > xouch
                    memory > xWRs
                    memory > xCs
                    memory > xcallback
                    seq > @
                      seq
                        xouch.write (((unsupported)).apply)
                        xcallback.write
                          [xignored]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xouch)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xwr)).apply)) ((xwr)) ((xWRs)))))
                        xCs.write (((unsupported)).apply ((((xC1055820)).apply ((xi)))) ((xi)) ((((xrange)).apply (2))))
                        xWRs.write (((unsupported)).apply (((((xweakref).xref)).apply ((xc)) ((xcallback)))) ((xc)) ((xCs)))
                        xc.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (0))
                        xCs.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (2))
                        (((unsupported)).apply ((xx)) ((xouch)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("None: is there a None literal in the EO language?"))
                xtest_bug21435.write
                  [xself]
                    memory > x__del__
                    memory > x__init__
                    memory > xdo_work
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((xx)))
                            x__del__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xattr)) ("None: is there a None literal in the EO language?"))
                        xdo_work.write
                          []
                            memory > xb
                            memory > xa
                            seq > @
                              seq
                                xa.write (((xA)).apply)
                                xb.write (((xB)).apply ((((xA)).apply)))
                                (((unsupported)).apply (((xa).xattr)) ((xb)))
                                (((unsupported)).apply (((xb).xattr)) ((xa)))
                        bogusForceDataize.write (((xdo_work)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_garbage_at_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xstderr
                    memory > xrun_command
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        xrun_command.write
                          [xcode]
                            memory > xp
                            seq > @
                              seq
                                xp.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-Wd") ("-c") ((xcode)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                                (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)).apply)))
                                bogusForceDataize.write (((((xp).xstdout).xclose)).apply)
                                bogusForceDataize.write (((((xp).xstderr).xclose)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xreturncode)) (0))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xstrip)).apply)) (""))
                                (((unsupported)).apply ((((xstrip_python_stderr)).apply ((xstderr)))))
                        xstderr.write (((xrun_command)).apply (((xcode).mod "0")))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ResourceWarning: gc: 2 uncollectable objects at shutdown; use") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("<X 'first'>") ((xstderr)))
                        xstderr.write (((xrun_command)).apply (((xcode).mod "gc.DEBUG_UNCOLLECTABLE")))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ResourceWarning: gc: 2 uncollectable objects at shutdown") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ("[<X 'first'>, <X 'second'>]") ((xstderr))).or (((unsupported)).apply ("[<X 'second'>, <X 'first'>]") ((xstderr))))) ((xstderr)))
                        xstderr.write (((xrun_command)).apply (((xcode).mod "gc.DEBUG_SAVEALL")))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("uncollectable objects at shutdown") ((xstderr)))
                xtest_gc_main_module_at_shutdown.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("__del__ called"))
                xtest_gc_ordinary_module_at_shutdown.write
                  [xself]
                    memory > xcode
                    memory > xmodule
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xtemp_dir)).apply)) ((xscript_dir)))
                          seq
                            xmodule.write (((unsupported)).apply)
                            xcode.write ((((unsupported)).apply).mod (((unsupported)).apply ((xscript_dir))))
                            bogusForceDataize.write (((xmake_script)).apply ((xscript_dir)) ("gctest") ((xmodule)))
                            (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ("-c") ((xcode)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("__del__ called"))
                xtest_global_del_SystemExit.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xunlink)) ((xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("w"))) ((xscript)))
                          bogusForceDataize.write ((((xscript).xwrite)).apply ((xcode)))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) ((((xassert_python_ok)).apply ((xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("__del__ called"))
                xtest_get_stats.write
                  [xself]
                    memory > xstats
                    memory > xnew
                    memory > xold
                    seq > @
                      seq
                        xstats.write ((((xgc).xget_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xstats)))) (3))
                        (((unsupported)).apply ((xst)) ((xstats)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xst)) ((xdict)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xst)))) ((((unsupported)).apply ("collected") ("collections") ("uncollectable"))))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((unsupported)).apply ((xst)) ("collected"))) (0))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((unsupported)).apply ((xst)) ("collections"))) (0))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((unsupported)).apply ((xst)) ("uncollectable"))) (0))
                        ((((xgc).xisenabled)).apply).if
                          seq
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xgc).xenable)))
                            bogusForceDataize.write ((((xgc).xdisable)).apply)
                        xold.write ((((xgc).xget_stats)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply (0))
                        xnew.write ((((xgc).xget_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (0))) ("collections"))) (((((unsupported)).apply ((((unsupported)).apply ((xold)) (0))) ("collections")).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (1))) ("collections"))) ((((unsupported)).apply ((((unsupported)).apply ((xold)) (1))) ("collections"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (2))) ("collections"))) ((((unsupported)).apply ((((unsupported)).apply ((xold)) (2))) ("collections"))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply (2))
                        xnew.write ((((xgc).xget_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (0))) ("collections"))) (((((unsupported)).apply ((((unsupported)).apply ((xold)) (0))) ("collections")).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (1))) ("collections"))) ((((unsupported)).apply ((((unsupported)).apply ((xold)) (1))) ("collections"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnew)) (2))) ("collections"))) (((((unsupported)).apply ((((unsupported)).apply ((xold)) (2))) ("collections")).sub 1)))
                xtest_freeze.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xfreeze)).apply)
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((xgc).xget_freeze_count)).apply)) (0))
                        bogusForceDataize.write ((((xgc).xunfreeze)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xget_freeze_count)).apply)) (0))
                xtest_get_objects.write
                  [xself]
                    memory > xl
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xl.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xl).xappend)).apply ((xl)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (2))))))))
                        (((unsupported)).apply (((xgc).xcollect)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (2))))))))
                        (((unsupported)).apply (((xgc).xcollect)) (1))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (2))))))))
                        (((unsupported)).apply (((xgc).xcollect)) (2))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((xelement)))) ((xelement)) ((((unsupported)).apply (((xgc).xget_objects)) (2))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_get_objects_arguments.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xgc).xget_objects)).apply)))) ((((xlen)).apply ((((unsupported)).apply (((xgc).xget_objects)) ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xgc).xget_objects)) (1000))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xgc).xget_objects)) ((1000.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xgc).xget_objects)) ("1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xgc).xget_objects)) (1.234))
                xtest_38379.write
                  [xself]
                    memory > xgetstats
                    memory > xt
                    memory > xzs
                    memory > x__init__
                    memory > x__del__
                    memory > xN
                    seq > @
                      seq
                        xN.write 100
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xme)) ((xself)))
                        (((unsupported)).apply ((xA)))
                          x__del__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((xzs).xappend)).apply ((xself)))
                        xzs.write (((unsupported)).apply)
                        xgetstats.write
                          []
                            memory > xd
                            seq > @
                              seq
                                xd.write (((unsupported)).apply (((((xgc).xget_stats)).apply)) ((1.neg)))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("collected"))) ((((unsupported)).apply ((xd)) ("uncollectable"))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xdisable)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoldc)) ((xoldnc)))) ((((xgetstats)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                          bogusForceDataize.write (((xA)).apply)
                        xt.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xnc)))) ((((xgetstats)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((2.mul (xN))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).sub (xoldc))) ((2.mul (xN))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnc).sub (xoldnc))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xoldc)) ((xoldnc)))) ((((unsupported)).apply ((xc)) ((xnc)))))
                        bogusForceDataize.write (((xZ)).apply)
                        xt.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xnc)))) ((((xgetstats)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).sub (xoldc))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnc).sub (xoldnc))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xoldc)) ((xoldnc)))) ((((unsupported)).apply ((xc)) ((xnc)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                          bogusForceDataize.write (((xA)).apply)
                        bogusForceDataize.write (((xZ)).apply)
                        xt.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xnc)))) ((((xgetstats)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).sub (xoldc))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnc).sub (xoldnc))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xoldc)) ((xoldnc)))) ((((unsupported)).apply ((xc)) ((xnc)))))
                        xt.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xnc)))) ((((xgetstats)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((2.mul (xN))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).sub (xoldc))) ((2.mul (xN))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnc).sub (xoldnc))) (0))
                        bogusForceDataize.write ((((xgc).xenable)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xenabled)) (((((xgc).xisenabled)).apply)))
                        bogusForceDataize.write ((((xgc).xdisable)).apply)
                        (((unsupported)).apply (((xself).xdebug)) (((((xgc).xget_debug)).apply)))
                        bogusForceDataize.write ((((xgc).xset_debug)).apply (0))
                        bogusForceDataize.write (((((xgc).xcallbacks).xappend)).apply (((xself).xcb1)))
                        bogusForceDataize.write (((((xgc).xcallbacks).xappend)).apply (((xself).xcb2)))
                        (((unsupported)).apply (((xself).xothergarbage)) ((((unsupported)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xvisit)))))
                        bogusForceDataize.write (((((xgc).xcallbacks).xremove)).apply (((xself).xcb1)))
                        bogusForceDataize.write (((((xgc).xcallbacks).xremove)).apply (((xself).xcb2)))
                        bogusForceDataize.write ((((xgc).xset_debug)).apply (((xself).xdebug)))
                        ((xself).xenabled).if
                          bogusForceDataize.write ((((xgc).xenable)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((xobj)) (((xgc).xgarbage)))
                          (((xisinstance)).apply ((xobj)) ((xUncollectable))).if
                            (((unsupported)).apply (((xobj).xpartner)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xothergarbage)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xpreclean.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xvisit)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xgarbage)) ((((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((((xself).xothergarbage).xappend)).apply ((xgarbage)))
                        (((unsupported)).apply (((xself).xvisit)) ((((unsupported)).apply)))
                xcb1.write
                  [xself xphase xinfo]
                    seq > @
                      bogusForceDataize.write (((((xself).xvisit).xappend)).apply ((((unsupported)).apply (1) ((xphase)) ((((xdict)).apply ((xinfo)))))))
                xcb2.write
                  [xself xphase xinfo]
                    memory > xuc
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xvisit).xappend)).apply ((((unsupported)).apply (2) ((xphase)) ((((xdict)).apply ((xinfo)))))))
                        (((xphase).eq "stop").and (((xhasattr)).apply ((xself)) ("cleanup"))).if
                          seq
                            xuc.write (((unsupported)).apply ((xe)) ((xe)) (((xgc).xgarbage)) ((((xisinstance)).apply ((xe)) ((xUncollectable)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xe)) ((xe)) (((xgc).xgarbage)) (((((xisinstance)).apply ((xe)) ((xUncollectable))).not)))))
                            (((unsupported)).apply ((xe)) ((xuc)))
                              (((unsupported)).apply (((xe).xpartner)) ("None: is there a None literal in the EO language?"))
                xtest_collect.write
                  [xself]
                    memory > xn
                    memory > xn1
                    memory > xinfo
                    memory > xn2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpreclean)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xn.write (((unsupported)).apply ((((unsupported)).apply ((xv)) (0))) ((xv)) (((xself).xvisit)))
                        xn1.write (((unsupported)).apply ((xi)) ((xi)) ((xn)) (((xi).eq 1)))
                        xn2.write (((unsupported)).apply ((xi)) ((xi)) ((xn)) (((xi).eq 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn1)) (((((unsupported)).apply (1)).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn2)) (((((unsupported)).apply (2)).mul 2)))
                        xn.write (((unsupported)).apply ((((unsupported)).apply ((xv)) (1))) ((xv)) (((xself).xvisit)))
                        xn1.write (((unsupported)).apply ((xi)) ((xi)) ((xn)) (((xi).eq "start")))
                        xn2.write (((unsupported)).apply ((xi)) ((xi)) ((xn)) (((xi).eq "stop")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn1)) (((((unsupported)).apply ("start")).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn2)) (((((unsupported)).apply ("stop")).mul 2)))
                        (((unsupported)).apply ((xv)) (((xself).xvisit)))
                          seq
                            xinfo.write (((unsupported)).apply ((xv)) (2))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("generation") ((xinfo)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("collected") ((xinfo)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("uncollectable") ((xinfo)))))
                xtest_collect_generation.write
                  [xself]
                    memory > xinfo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xpreclean)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply (2))
                        (((unsupported)).apply ((xv)) (((xself).xvisit)))
                          seq
                            xinfo.write (((unsupported)).apply ((xv)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xinfo)) ("generation"))) (2))
                xtest_collect_garbage.write
                  [xself]
                    memory > xinfo
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xpreclean)).apply)
                        bogusForceDataize.write (((xUncollectable)).apply)
                        bogusForceDataize.write (((xUncollectable)).apply)
                        bogusForceDataize.write (((xC1055820)).apply (666))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((xv)) (((xself).xvisit)))
                          seq
                            ((((unsupported)).apply ((xv)) (1)).neq "stop").if
                              (((unsupported)).apply)
                            xinfo.write (((unsupported)).apply ((xv)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xinfo)) ("collected"))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xinfo)) ("uncollectable"))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) (4))
                        (((unsupported)).apply ((xe)) (((xgc).xgarbage)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) ((xUncollectable)))
                        (((unsupported)).apply (((xself).xcleanup)) (TRUE))
                        (((unsupported)).apply (((xself).xvisit)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xgc).xgarbage)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((xv)) (((xself).xvisit)))
                          seq
                            ((((unsupported)).apply ((xv)) (1)).neq "stop").if
                              (((unsupported)).apply)
                            xinfo.write (((unsupported)).apply ((xv)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xinfo)) ("collected"))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xinfo)) ("uncollectable"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xgc).xgarbage)))) (0))
                xtest_refcount_errors.write
                  [xself]
                    memory > xcode
                    memory > xaddress_regex
                    memory > xp
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xpreclean)).apply)
                        bogusForceDataize.write (((ximport_module)).apply ("ctypes"))
                        (((unsupported)).apply)
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xp.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xp).xcommunicate)).apply)))
                        bogusForceDataize.write (((((xp).xstdout).xclose)).apply)
                        bogusForceDataize.write (((((xp).xstderr).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) ("gcmodule.c:[0-9]-: gc_decref: Assertion \"gc_get_refs(g) > 0\" failed."))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) ("refcount is too small"))
                        xaddress_regex.write "[0-9a-fA-Fx]-"
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) (("object address  : ".sub (xaddress_regex))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) ("object refcount : 1"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) (("object type     : ".sub (xaddress_regex))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) ("object type name: list"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xstderr)) ("object repr     : [1, 2, 3]"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xgc).xenable)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xgc).xdisable)).apply)
                xtest_bug1055820c.write
                  [xself]
                    memory > xdetector
                    memory > xouch
                    memory > xc0
                    memory > xc0wr
                    memory > xi
                    memory > xc2wr
                    memory > xcallback
                    memory > xc1
                    memory > xc2
                    memory > xjunk
                    seq > @
                      seq
                        xc0.write (((xC1055820)).apply (0))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xc1.write (((xC1055820)).apply (1))
                        (((unsupported)).apply (((xc1).xkeep_c0_alive)) ((xc0)))
                        (((unsupported)).apply ((((unsupported)).apply (((xc0).xloop)))))
                        xc2.write (((xC1055820)).apply (2))
                        xc2wr.write ((((xweakref).xref)).apply ((xc2)))
                        xouch.write (((unsupported)).apply)
                        xcallback.write
                          [xignored]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xouch)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xc2wr)).apply)))))
                        xc0wr.write ((((xweakref).xref)).apply ((xc0)) ((xcallback)))
                        (((unsupported)).apply ((xc0)) ((xc1)) ((xc2)) ("None: is there a None literal in the EO language?"))
                        xjunk.write (((unsupported)).apply)
                        xi.write 0
                        xdetector.write (((xGC_Detector)).apply)
                        while.
                          (((xdetector).xgc_happened).not)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xi)) (1))
                                ((xi).greater 10000).if
                                  bogusForceDataize.write ((((xself).xfail)).apply ("gc didn't happen after 10000 iterations"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (0))
                                bogusForceDataize.write ((((xjunk).xappend)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (1))
                        (((unsupported)).apply ((xx)) ((xouch)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("None: is there a None literal in the EO language?"))
                xtest_bug1055820d.write
                  [xself]
                    memory > xdetector
                    memory > xouch
                    memory > xd0
                    memory > xi
                    memory > xc2wr
                    memory > x__del__
                    memory > xc1
                    memory > xc2
                    memory > xjunk
                    seq > @
                      seq
                        xouch.write (((unsupported)).apply)
                        (((unsupported)).apply ((xC1055820)))
                          x__del__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply ((xouch)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xc2wr)).apply)))))
                        xd0.write (((xD)).apply (0))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xc1.write (((xC1055820)).apply (1))
                        (((unsupported)).apply (((xc1).xkeep_d0_alive)) ((xd0)))
                        (((unsupported)).apply ((((unsupported)).apply (((xd0).xloop)))))
                        xc2.write (((xC1055820)).apply (2))
                        xc2wr.write ((((xweakref).xref)).apply ((xc2)))
                        (((unsupported)).apply ((xd0)) ((xc1)) ((xc2)) ("None: is there a None literal in the EO language?"))
                        xdetector.write (((xGC_Detector)).apply)
                        xjunk.write (((unsupported)).apply)
                        xi.write 0
                        while.
                          (((xdetector).xgc_happened).not)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xi)) (1))
                                ((xi).greater 10000).if
                                  bogusForceDataize.write ((((xself).xfail)).apply ("gc didn't happen after 10000 iterations"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (0))
                                bogusForceDataize.write ((((xjunk).xappend)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xouch)))) (1))
                        (((unsupported)).apply ((xx)) ((xouch)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("None: is there a None literal in the EO language?"))
            xtest_main.write
              []
                memory > xenabled
                memory > xdebug
                seq > @
                  seq
                    xenabled.write ((((xgc).xisenabled)).apply)
                    bogusForceDataize.write ((((xgc).xdisable)).apply)
                    (((unsupported)).apply ((((((xgc).xisenabled)).apply).not)))
                    xdebug.write ((((xgc).xget_debug)).apply)
                    bogusForceDataize.write ((((xgc).xset_debug)).apply (((xdebug).and (((xgc).xDEBUG_LEAK).neg))))
                    (((unsupported)).apply)
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write (((xrun_unittest)).apply ((xGCTests)) ((xGCTogglingTests)) ((xGCCallbackTests)))
                      seq
                        bogusForceDataize.write ((((xgc).xset_debug)).apply ((xdebug)))
                        (xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("restoring automatic collection"))
                        bogusForceDataize.write ((((xgc).xenable)).apply)
                        (((unsupported)).apply (((((xgc).xisenabled)).apply)))
                        ((xenabled).not).if
                          bogusForceDataize.write ((((xgc).xdisable)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)