memory > xstdout
memory > xc
memory > ximportlib
memory > xcaptured_stdout
memory > xexec
memory > xeval
memory > xtempfile
memory > xopen
memory > xrmtree
memory > xascii
memory > xunlink
memory > xtmpd
memory > xAbstractSourceEncodingTest
memory > x__import__
memory > xlen
memory > xd
memory > xscript_helper
memory > xcompile
memory > xsys
memory > xsubprocess
memory > xTESTFN
memory > xos
memory > xv
memory > xSyntaxError
memory > x__file__
memory > xunittest
memory > xunload
memory > xfp
memory > x__name__
[] > test_source_encoding
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_second_non_utf8_coding_line
        memory > xtest_third_coding_line
        memory > xtest_second_coding_line
        memory > xtest_bad_coding
        memory > xtest_issue4626
        memory > xtest_default_coding
        memory > xtest_file_parse
        memory > xtest_utf8_bom
        memory > xcheck_script_output
        memory > xtest_compilestring
        memory > xtest_issue3297
        memory > xtest_first_non_utf8_coding_line
        memory > xtest_error_from_string
        memory > xtest_error_message
        memory > xtest_issue7820
        memory > xtest_double_coding_same_line
        memory > xtest_20731
        memory > xtest_first_coding_line
        memory > xtest_utf8_bom_and_utf8_coding_line
        memory > xtest_bad_coding2
        memory > xverify_bad_module
        memory > xtest_exec_valid_coding
        memory > xtest_issue2301
        memory > xtest_double_coding_line
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_compilestring.write
                  [xself]
                    memory > xc
                    memory > xd2
                    seq > @
                      seq
                        xc.write (((xcompile)).apply ("n# coding: utf-8nu = 'xc3xb3'n") ("dummy") ("exec"))
                        xd2.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xc)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("u"))) ("xf3"))
                xtest_issue2301.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xSyntaxError)))
                        bogusForceDataize.write (((xcompile)).apply ("# coding: cp932nprint 'x94x4e'") ("dummy") ("exec"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xv).xtext).xrstrip)).apply ("n"))) ("print 'u5e74'"))
                        bogusForceDataize.write ((((xself).xfail)).apply)
                xtest_issue4626.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xcompile)).apply ("# coding=latin-1nu00c6 = 'u00c6'") ("dummy") ("exec"))
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xc)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("xc6"))) ("xc6"))
                xtest_issue3297.write
                  [xself]
                    memory > xd
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xcompile)).apply ((((unsupported)).apply)) ("dummy") ("exec"))
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xc)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("a"))) ((((unsupported)).apply ((xd)) ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xd)) ("a"))))) ((((xlen)).apply ((((unsupported)).apply ((xd)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xascii)).apply ((((unsupported)).apply ((xd)) ("a"))))) ((((xascii)).apply ((((unsupported)).apply ((xd)) ("b"))))))
                xtest_issue7820.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("xffx20"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) ("xefxbbx20"))
                xtest_20731.write
                  [xself]
                    memory > xsub
                    memory > xerr
                    seq > @
                      seq
                        xsub.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("coding20731.py"))))) (((xsubprocess).xPIPE)))
                        xerr.write (((unsupported)).apply (((((xsub).xcommunicate)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsub).xreturncode)) (0))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("SyntaxError") ((xerr)))
                xtest_error_message.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcompile)).apply ("# -*- coding: iso-8859-15 -*-n") ("dummy") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("xefxbbxbfn") ("dummy") ("exec"))
                        bogusForceDataize.write (((xcompile)).apply ("xefxbbxbf# -*- coding: utf-8 -*-n") ("dummy") ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("fake"))))
                          bogusForceDataize.write (((xcompile)).apply ("# -*- coding: fake -*-n") ("dummy") ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("iso-8859-15"))))
                          bogusForceDataize.write (((xcompile)).apply ("xefxbbxbf# -*- coding: iso-8859-15 -*-n") ("dummy") ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("BOM"))))
                          bogusForceDataize.write (((xcompile)).apply ("xefxbbxbf# -*- coding: iso-8859-15 -*-n") ("dummy") ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("fake"))))
                          bogusForceDataize.write (((xcompile)).apply ("xefxbbxbf# -*- coding: fake -*-n") ("dummy") ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ("BOM"))))
                          bogusForceDataize.write (((xcompile)).apply ("xefxbbxbf# -*- coding: fake -*-n") ("dummy") ("exec"))
                xtest_bad_coding.write
                  [xself]
                    memory > xmodule_name
                    seq > @
                      seq
                        xmodule_name.write "bad_coding"
                        bogusForceDataize.write ((((xself).xverify_bad_module)).apply ((xmodule_name)))
                xtest_bad_coding2.write
                  [xself]
                    memory > xmodule_name
                    seq > @
                      seq
                        xmodule_name.write "bad_coding2"
                        bogusForceDataize.write ((((xself).xverify_bad_module)).apply ((xmodule_name)))
                xverify_bad_module.write
                  [xself xmodule_name]
                    memory > xfilename
                    memory > xbytes
                    memory > xpath
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((x__import__)) (("test.".add (xmodule_name))))
                        xpath.write (((((xos).xpath).xdirname)).apply ((x__file__)))
                        xfilename.write (((((xos).xpath).xjoin)).apply ((xpath)) (((xmodule_name).add ".py")))
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xfp)))
                          xbytes.write ((((xfp).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xcompile)) ((xbytes)) ((xfilename)) ("exec"))
                xtest_exec_valid_coding.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("# coding: cp949na = \"xaaxa7\"n") ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("a"))) ("u3047"))
                xtest_file_parse.write
                  [xself]
                    memory > xf
                    memory > xfilename
                    seq > @
                      seq
                        bogusForceDataize.write (((xunload)).apply ((xTESTFN)))
                        xfilename.write ((xTESTFN).add ".py")
                        xf.write (((unsupported)).apply ((xopen)) ((xfilename)) ("w") ("cp1252"))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) (((xos).xcurdir)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xf)))
                              seq
                                bogusForceDataize.write ((((xf).xwrite)).apply ("# -*- coding: cp1252 -*-n"))
                                bogusForceDataize.write ((((xf).xwrite)).apply ("'''A short stringn"))
                                bogusForceDataize.write ((((xf).xwrite)).apply ("'''n"))
                                bogusForceDataize.write ((((xf).xwrite)).apply (("'A very long string %s'n".mod ("X".mul 1000))))
                            bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                            bogusForceDataize.write (((x__import__)).apply ((xTESTFN)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))))
                            bogusForceDataize.write (((xunlink)).apply ((xfilename)))
                            bogusForceDataize.write (((xunlink)).apply (((xfilename).add "c")))
                            bogusForceDataize.write (((xunlink)).apply (((xfilename).add "o")))
                            bogusForceDataize.write (((xunload)).apply ((xTESTFN)))
                            bogusForceDataize.write (((xrmtree)).apply ("__pycache__"))
                xtest_error_from_string.write
                  [xself]
                    memory > xinput
                    memory > xexpected
                    seq > @
                      seq
                        xinput.write ((("# coding: asciinN{SNOWMAN}".xencode)).apply ("utf-8"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))) ((xc)))
                          bogusForceDataize.write (((xcompile)).apply ((xinput)) ("<string>") ("exec"))
                        xexpected.write "'ascii' codec can't decode byte 0xe2 in position 16: ordinal not in range(128)"
                        (((unsupported)).apply (((xself).xassertTrue)) (((((((unsupported)).apply ((((xc).xexception).xargs)) (0)).xstartswith)).apply ((xexpected)))) ((((unsupported)).apply ((((xc).xexception).xargs)) (0))))
            (((unsupported)).apply)
              seq
                xtest_default_coding.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "print(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xe4'"))
                xtest_first_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#coding:iso8859-15nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_second_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#n#coding:iso8859-15nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_third_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#n#n#coding:iso8859-15nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xe4'"))
                xtest_double_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#coding:iso8859-15n#coding:latin1nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_double_coding_same_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#coding:iso8859-15 coding:latin1nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_first_non_utf8_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "#coding:iso-8859-15 xa4nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_second_non_utf8_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "n#coding:iso-8859-15 xa4nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xc3u20ac'"))
                xtest_utf8_bom.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "xefxbbxbfprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xe4'"))
                xtest_utf8_bom_and_utf8_coding_line.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write "xefxbbxbf#coding:utf-8nprint(ascii(\"xc3xa4\"))n"
                        bogusForceDataize.write ((((xself).xcheck_script_output)).apply ((xsrc)) ("'xe4'"))
            (((unsupported)).apply ((xAbstractSourceEncodingTest)) (((xunittest).xTestCase)))
              xcheck_script_output.write
                [xself xsrc xexpected]
                  memory > xout
                  seq > @
                    seq
                      (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)))
                        bogusForceDataize.write (((xexec)).apply ((xsrc)))
                      xout.write (((((((xstdout).xgetvalue)).apply).xencode)).apply ("latin1"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xrstrip)).apply)) ((xexpected)))
            (((unsupported)).apply ((xAbstractSourceEncodingTest)) (((xunittest).xTestCase)))
              xcheck_script_output.write
                [xself xsrc xexpected]
                  memory > xres
                  memory > xfn
                  seq > @
                    seq
                      (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmpd)))
                        seq
                          xfn.write (((((xos).xpath).xjoin)).apply ((xtmpd)) ("test.py"))
                          (((unsupported)).apply ((((xopen)).apply ((xfn)) ("wb"))) ((xfp)))
                            bogusForceDataize.write ((((xfp).xwrite)).apply ((xsrc)))
                          xres.write ((((xscript_helper).xassert_python_ok)).apply ((xfn)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xres).xout).xrstrip)).apply)) ((xexpected)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)