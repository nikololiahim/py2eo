memory > xTest
memory > xuri_to_iri
memory > xValueError
memory > xstr
memory > xforce_str
memory > xrepercent_broken_unicode
memory > xget_system_encoding
memory > xiri_to_uri
memory > xException
memory > xsmart_bytes
memory > xsys
memory > xbytes
memory > xRecursionError
memory > xmock
memory > xMyString
memory > xescape_uri_path
memory > xmemoryview
memory > xTypeError
memory > xgettext_lazy
memory > xuri
memory > xdatetime
memory > xiri
memory > xexpected
memory > xDjangoUnicodeDecodeError
memory > xfilepath_to_uri
memory > xPath
memory > xtype
memory > xSimpleLazyObject
memory > xunittest
memory > xforce_bytes
memory > xquote_plus
memory > xsmart_str
memory > xSimpleTestCase
[] > test_encoding
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_force_bytes_exception
        memory > xtest_force_bytes_encoding
        memory > xtest_filepath_to_uri
        memory > xtest_smart_bytes
        memory > xtest_force_str_lazy
        memory > xtest_smart_str
        memory > xtest_force_str_exception
        memory > xtest_complementarity
        memory > xtest_force_str_DjangoUnicodeDecodeError
        memory > xtest_force_bytes_memory_view
        memory > xtest_force_bytes_strings_only
        memory > xtest_escape_uri_path
        memory > xtest_repercent_broken_unicode_recursion_error
        memory > xtest_get_default_encoding
        memory > xtest_iri_to_uri
        memory > xtest_uri_to_iri
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_force_str_exception.write
                  [xself]
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("xc3xb6xc3xa4xc3xbc"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xforce_str)).apply ((((xMyString)).apply)))
                xtest_force_str_lazy.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xSimpleLazyObject)).apply ((((unsupported)).apply ("x"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xforce_str)).apply ((xs)))))) ((xstr)))
                xtest_force_str_DjangoUnicodeDecodeError.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDjangoUnicodeDecodeError)) ((xmsg)))))
                          bogusForceDataize.write (((xforce_str)).apply ("xff"))
                xtest_force_bytes_exception.write
                  [xself]
                    memory > xerror_msg
                    memory > xexc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xerror_msg.write "This is an exception, voilà"
                        xexc.write (((xValueError)).apply ((xerror_msg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xforce_bytes)).apply ((xexc)))) (((((xerror_msg).xencode)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xforce_bytes)) ((xexc)) ("ascii") ("ignore"))) ("This is an exception, voil"))
                xtest_force_bytes_strings_only.write
                  [xself]
                    memory > xtoday
                    seq > @
                      seq
                        xtoday.write (((((xdatetime).xdate).xtoday)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xforce_bytes)) ((xtoday)) (TRUE))) ((xtoday)))
                xtest_force_bytes_encoding.write
                  [xself]
                    memory > xerror_msg
                    memory > xresult
                    seq > @
                      seq
                        xerror_msg.write ((("This is an exception, voilà".xencode)).apply)
                        xresult.write (((unsupported)).apply ((xforce_bytes)) ((xerror_msg)) ("ascii") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("This is an exception, voil"))
                xtest_force_bytes_memory_view.write
                  [xself]
                    memory > xresult
                    memory > xdata
                    seq > @
                      seq
                        xdata.write "abc"
                        xresult.write (((xforce_bytes)).apply ((((xmemoryview)).apply ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xresult)))) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xdata)))
                xtest_smart_bytes.write
                  [xself]
                    memory > xlazy_func
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("ŠĐĆŽćžšđ"))
                        xlazy_func.write (((xgettext_lazy)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xsmart_bytes)).apply ((xlazy_func)))) ((xlazy_func)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_bytes)).apply ((((xTest)).apply)))) ("xc5xa0xc4x90xc4x86xc5xbdxc4x87xc5xbexc5xa1xc4x91"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_bytes)).apply (1))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_bytes)).apply ("foo"))) ("foo"))
                xtest_smart_str.write
                  [xself]
                    memory > xlazy_func
                    memory > x__str__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("ŠĐĆŽćžšđ"))
                        xlazy_func.write (((xgettext_lazy)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xsmart_str)).apply ((xlazy_func)))) ((xlazy_func)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_str)).apply ((((xTest)).apply)))) ("u0160u0110u0106u017du0107u017eu0161u0111"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_str)).apply (1))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsmart_str)).apply ("foo"))) ("foo"))
                xtest_get_default_encoding.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("locale.getlocale") ((xException)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_system_encoding)).apply)) ("ascii"))
                xtest_repercent_broken_unicode_recursion_error.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write ("xfc".mul ((((xsys).xgetrecursionlimit)).apply))
                        (((unsupported)).apply ((xRecursionError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepercent_broken_unicode)).apply ((xdata)))) (("%FC".mul ((((xsys).xgetrecursionlimit)).apply))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Unexpected RecursionError raised."))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_filepath_to_uri.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xfilepath_to_uri)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilepath_to_uri)).apply ((((unsupported)).apply)))) ("upload/%D1%87%D1%83%D0%B1%D0%B0%D0%BA%D0%B0.mp4"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilepath_to_uri)).apply ((((xPath)).apply ("upload/test.png"))))) ("upload/test.png"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilepath_to_uri)).apply ((((xPath)).apply ((((unsupported)).apply)))))) ("upload/test.png"))
                xtest_iri_to_uri.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("red%09rosé#red") ("red%09ros%C3%A9#red"))) ((((unsupported)).apply ("/blog/for/Jürgen Münster/") ("/blog/for/J%C3%BCrgen%20M%C3%BCnster/"))) ((((unsupported)).apply (("locations/%s".mod (((xquote_plus)).apply ("Paris & Orléans")))) ("locations/Paris+%26+Orl%C3%A9ans"))) ((((unsupported)).apply ("%&") ("%&"))) ((((unsupported)).apply ("red&♥ros%#red") ("red&%E2%99%A5ros%#red"))) ((((unsupported)).apply ((((xgettext_lazy)).apply ("red&♥ros%#red"))) ("red&%E2%99%A5ros%#red"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xiri)) ((xuri)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xiri)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiri_to_uri)).apply ((xiri)))) ((xuri)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiri_to_uri)).apply ((((xiri_to_uri)).apply ((xiri)))))) ((xuri)))
                xtest_uri_to_iri.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("/%e2%89%Ab%E2%99%a5%E2%89%aB/") ("/≫♥≫/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93") ("/♥♥/?utf8=✓"))) ((((unsupported)).apply ("/%41%5a%6B/") ("/AZk/"))) ((((unsupported)).apply ("/%25%20%02%41%7b/") ("/%25%20%02A%7b/"))) ((((unsupported)).apply ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/") ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%E2%99%A5/") ("/♥%E2♥/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%E2%99%A5/") ("/♥%E2%99♥/"))) ((((unsupported)).apply ("/%E2%E2%99%A5%E2%99%A5%99/") ("/%E2♥♥%99/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%A5/?utf8=%9C%93%E2%9C%93%9C%93") ("/♥♥/?utf8=%9C%93✓%9C%93"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xuri)) ((xiri)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xuri)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xuri_to_iri)).apply ((xuri)))) ((xiri)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xuri_to_iri)).apply ((((xuri_to_iri)).apply ((xuri)))))) ((xiri)))
                xtest_complementarity.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("/blog/for/J%C3%BCrgen%20M%C3%BCnster/") ("/blog/for/Jxfcrgen%20Mxfcnster/"))) ((((unsupported)).apply ("%&") ("%&"))) ((((unsupported)).apply ("red&%E2%99%A5ros%#red") ("red&♥ros%#red"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%A5/") ("/♥♥/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93") ("/♥♥/?utf8=✓"))) ((((unsupported)).apply ("/%25%20%02%7b/") ("/%25%20%02%7b/"))) ((((unsupported)).apply ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/") ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%E2%99%A5/") ("/♥%E2♥/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%E2%99%A5/") ("/♥%E2%99♥/"))) ((((unsupported)).apply ("/%E2%E2%99%A5%E2%99%A5%99/") ("/%E2♥♥%99/"))) ((((unsupported)).apply ("/%E2%99%A5%E2%99%A5/?utf8=%9C%93%E2%9C%93%9C%93") ("/♥♥/?utf8=%9C%93✓%9C%93"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xuri)) ((xiri)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xuri)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiri_to_uri)).apply ((((xuri_to_iri)).apply ((xuri)))))) ((xuri)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xuri_to_iri)).apply ((((xiri_to_uri)).apply ((xiri)))))) ((xiri)))
                xtest_escape_uri_path.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("/;some/=awful/?path/:with/@lots/&of/+awful/chars") ("/%3Bsome/%3Dawful/%3Fpath/:with/@lots/&of/+awful/chars"))) ((((unsupported)).apply ("/foo#bar") ("/foo%23bar"))) ((((unsupported)).apply ("/foo?bar") ("/foo%3Fbar"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xuri)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xuri)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape_uri_path)).apply ((xuri)))) ((xexpected)))