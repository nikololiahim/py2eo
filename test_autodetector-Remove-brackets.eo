memory > xattrs
memory > xRegexValidator
memory > xo
memory > xapps
memory > xMigration
memory > xconnection
memory > xhasattr
memory > xoverride_settings
memory > xsorted
memory > xargs
memory > xmodels
memory > xmigration_name
memory > xmigrations_
memory > xMigrationQuestioner
memory > xfield
memory > xTestCase
memory > xt
memory > xDeconstructibleObject
memory > xexpected_number
memory > xvalue
memory > xapp_label
memory > xdep
memory > xProjectState
memory > xextra_option
memory > xmigrations
memory > xMigrationGraph
memory > xpath
memory > xFoodManager
memory > xset
memory > xsettings
memory > xre
memory > xmigration
memory > xModelState
memory > xFoodQuerySet
memory > xisolate_lru_cache
memory > xsuper
memory > xmgr
memory > xHardcodedForeignKey
memory > xgetattr
memory > xoperation
memory > xMigrationAutodetector
memory > xMixin
memory > xvalidate_slug
memory > xname
memory > xattr
memory > xAbstractBaseUser
memory > xmodel_state
memory > xkwargs
memory > xisinstance
memory > xMigrationLoader
memory > xfunctools
memory > xlen
memory > xSimpleTestCase
[] > test_autodetector
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xauthor_with_biography_blank
        memory > xtest_m2m_w_through_multistep_remove
        memory > xassertOperationAttributes
        memory > xauthor_name_check_constraint
        memory > xcustom_user
        memory > xauthor_unmanaged_default_pk
        memory > xbook_foo_together_2
        memory > xtest_swappable_first_setting
        memory > xtest_renamed_referenced_m2m_model_case
        memory > xtest_add_indexes
        memory > xauthor_with_m2m_blank
        memory > xtest_foreign_key_removed_before_target_model
        memory > xrabbit
        memory > xtest_empty_foo_together
        memory > xtest_add_model_with_field_removed_from_base_model
        memory > xtest_alter_field_to_not_null_without_default
        memory > xtest_proxy_fk_dependency
        memory > xtest_supports_functools_partial
        memory > xtest_single_operation_long_name
        memory > xtest_none_name
        memory > xtest_rename_field
        memory > xassertNumberMigrations
        memory > xtest_create_model_with_check_constraint
        memory > xtest_parse_number
        memory > xtest_many_to_many_changed_to_concrete_field
        memory > xauthor_with_book_order_wrt
        memory > xtest_two_create_models_with_initial_true
        memory > xtest_partly_alter_foo_together
        memory > xtest_operation_with_no_suggested_name
        memory > xthird_thing
        memory > xauthor_name_renamed
        memory > xtest_rename_field_preserved_db_column
        memory > xtest_alter_fk_before_model_deletion
        memory > xtest_remove_field_and_foo_together
        memory > xtest_remove_field
        memory > xtest_first_dependency
        memory > xtest_add_constraints
        memory > xtest_no_operations
        memory > xbook_foo_together
        memory > xtest_order_fields_indexes
        memory > xtest_alter_db_table_no_changes
        memory > xtest_alter_db_table_remove
        memory > xtest_alter_model_managers
        memory > xtest_rename_model_case
        memory > xother_pony_food
        memory > xauthor_dates_of_birth_auto_now_add
        memory > xtest_unmanaged_custom_pk
        memory > xbook_with_multiple_authors
        memory > xtest_create_model_with_indexes
        memory > xtest_auto
        memory > xtest_swappable
        memory > xauthor_name_deconstructible_3
        memory > xbook_unordered_indexes
        memory > xauthor_dates_of_birth_auto_now
        memory > xauthor_with_new_db_table_options
        memory > xtest_proxy_bases_first
        memory > xtest_many_to_many_removed_before_through_model_2
        memory > xauthor_with_book
        memory > xtest_alter_field_to_fk_dependency_other_app
        memory > xtest_alter_db_table_change
        memory > xtest_deconstructible_list
        memory > xtest_arrange_for_graph
        memory > xauthor_with_renamed_m2m_through
        memory > xtest_default_related_name_option
        memory > xtest_arrange_for_graph_with_multiple_initial
        memory > xtest_circular_dependency_mixed_addcreate
        memory > xtest_last_dependency
        memory > xtest_new_model
        memory > xtest_add_date_fields_with_auto_now_add_asking_for_default
        memory > xbook_indexes
        memory > xtest_foo_together_no_changes
        memory > xauthor_name_deconstructible_2
        memory > xauthor_name
        memory > xtest_different_regex_does_alter
        memory > xother_pony
        memory > xtest_deconstructible_tuple
        memory > xtest_swappable_circular_multi_mti
        memory > xauthor_proxy
        memory > xassertMigrationDependencies
        memory > xbook_foo_together_3
        memory > xauthor_with_options
        memory > xtest_custom_migration_name
        memory > xauthor_name_nested_deconstructible_changed_kwarg
        memory > xtest_alter_model_options_proxy
        memory > xtest_bases_first_mixed_case_app_label
        memory > xother_stable
        memory > xtest_same_app_circular_fk_dependency
        memory > xtest_bases_first
        memory > xtest_add_model_order_with_respect_to
        memory > xtest_rename_m2m_through_model
        memory > xtest_alter_regex_string_to_compiled_regex
        memory > xaardvark_pk_fk_author
        memory > xtest_mti_inheritance_model_removal
        memory > xtest_no_operations_initial
        memory > xtest_add_model_order_with_respect_to_index_constraint
        memory > xauthor_name_longer
        memory > xtest_two_operations
        memory > xpublisher_with_book
        memory > xtest_deconstruct_field_kwarg
        memory > xcontract
        memory > xtest_create_with_through_model
        memory > xbook
        memory > xtest_many_operations_suffix
        memory > xauthor_renamed_with_new_db_table_options
        memory > xtest_same_app_no_fk_dependency
        memory > xtest_foo_together_remove_fk
        memory > xauthor_unmanaged_managed
        memory > xtest_circular_dependency_swappable_self
        memory > xpublisher_with_aardvark_author
        memory > xaardvark_testapp
        memory > xcustom_user_no_inherit
        memory > xmake_project_state
        memory > xtest_custom_deconstructible
        memory > xauthor_name_deconstructible_tuple_3
        memory > xauthor_unmanaged_custom_pk
        memory > xtest_many_to_many_removed_before_through_model
        memory > xtest_alter_field_to_not_null_oneoff_default
        memory > xauthor_proxy_notproxy
        memory > xauthor_renamed_with_book
        memory > xtest_add_model_order_with_respect_to_index_foo_together
        memory > xcontract_renamed
        memory > xtest_rename_field_and_foo_together
        memory > xtest_proxy
        memory > xauthor_with_publisher_string
        memory > xtest_alter_field_and_foo_together
        memory > xassertOperationFieldAttributes
        memory > xtest_rename_foreign_object_fields
        memory > xtest_rename_related_field_preserved_db_column
        memory > xtest_unmanaged_create
        memory > xbook_foo_together_4
        memory > xauthor_proxy_third
        memory > xtest_foo_together_ordering
        memory > xtest_add_custom_fk_with_hardcoded_to
        memory > xtest_rename_referenced_primary_key
        memory > xauthor_empty
        memory > xtest_unmanaged_to_managed
        memory > xtest_deconstructible_dict
        memory > xtest_same_app_circular_fk_dependency_with_unique_together_and_indexes
        memory > xauthor_name_deconstructible_dict_2
        memory > xbook_with_author_renamed
        memory > xtest_add_many_to_many
        memory > xtest_circular_dependency_swappable
        memory > xknight
        memory > xtest_swappable_first_inheritance
        memory > xtest_proxy_custom_pk
        memory > xtest_managed_to_unmanaged
        memory > xtest_alter_model_options
        memory > xtest_multiple_bases
        memory > xauthor_name_deconstructible_list_1
        memory > xauthor_name_deconstructible_1
        memory > xtest_concrete_field_changed_to_many_to_many
        memory > xauthor_proxy_third_notproxy
        memory > xbook_with_no_author_fk
        memory > xtest_add_field_and_foo_together
        memory > xtest_proxy_to_mti_with_fk_to_proxy
        memory > xbook_with_multiple_authors_through_attribution
        memory > xauthor_proxy_proxy
        memory > xtest_remove_foo_together
        memory > xtest_add_field_with_default
        memory > xtest_alter_field_to_not_null_with_default
        memory > xtest_rename_field_foreign_key_to_field
        memory > xtest_alter_many_to_many
        memory > xaardvark
        memory > xtest_remove_alter_order_with_respect_to
        memory > xauthor_with_m2m_through
        memory > xauthor_name_nested_deconstructible_extra_arg
        memory > xedition
        memory > xtest_create_model_and_unique_together
        memory > xbook_proxy_proxy_fk
        memory > xauthor_name_deconstructible_tuple_2
        memory > xtest_add_date_fields_with_auto_now_not_asking_for_default
        memory > xtest_remove_constraints
        memory > xauthor_with_db_table_options
        memory > xtest_nested_deconstructible_objects
        memory > xauthor_name_nested_deconstructible_1
        memory > xtest_swappable_lowercase
        memory > xtest_proxy_non_model_parent
        memory > xauthor_name_deconstructible_dict_3
        memory > xtest_non_circular_foreignkey_dependency_removal
        memory > xtest_circular_dependency_swappable2
        memory > xauthor_proxy_options
        memory > xrepr_changes
        memory > xdeconstruct
        memory > xtest_rename_model_reverse_relation_dependencies
        memory > xtest_replace_string_with_foreignkey
        memory > xauthor_with_biography_non_blank
        memory > x__init__
        memory > xauthor_name_deconstructible_list_2
        memory > xtest_fk_dependency_other_app
        memory > xtest_fk_dependency
        memory > xtest_swappable_many_to_many_model_case
        memory > xtest_trim_apps
        memory > xtest_alter_field
        memory > xtest_alter_db_table_add
        memory > xtest_two_create_models
        memory > xtest_rename_model
        memory > xtest_old_model
        memory > xtest_add_blank_textfield_and_charfield
        memory > xtest_add_field
        memory > xtest_rename_model_with_renamed_rel_field
        memory > xtest_unmanaged_delete
        memory > xassertOperationTypes
        memory > xauthor_name_deconstructible_dict_1
        memory > xauthor_name_nested_deconstructible_changed_arg
        memory > xtest_rename_model_with_fks_in_different_position
        memory > xtest_identical_regex_doesnt_alter
        memory > xtest_none_name_with_initial_true
        memory > xbook_migrations_fk
        memory > xauthor_name_nested_deconstructible_extra_kwarg
        memory > xtest_add_foo_together
        memory > xauthor_with_publisher
        memory > xauthor_with_user
        memory > xtest_set_alter_order_with_respect_to
        memory > xget_changes
        memory > xauthor_with_custom_user
        memory > xattribution
        memory > xauthor_unmanaged
        memory > xtest_add_non_blank_textfield_and_charfield
        memory > xbook_with_field_and_author_renamed
        memory > xauthor_renamed_with_db_table_options
        memory > xauthor_name_nested_deconstructible_2
        memory > xtest_circular_fk_dependency
        memory > xtest_single_operation
        memory > xtest_deconstruct_type
        memory > xauthor_name_default
        memory > xtest_add_alter_order_with_respect_to
        memory > xauthor_name_deconstructible_tuple_1
        memory > xauthor_name_deconstructible_4
        memory > xaardvark_based_on_author
        memory > xauthor_with_m2m
        memory > xauthor_name_deconstructible_list_3
        memory > xbook_proxy_fk
        memory > xtest_alter_db_table_with_model_change
        memory > xauthor_custom_pk
        memory > xtest_remove_indexes
        memory > xtest_pk_fk_included
        memory > xauthor_name_null
        memory > xtest_add_date_fields_with_auto_now_add_not_asking_for_null_addition
        memory > xtest_set_alter_order_with_respect_to_index_constraint_foo_together
        memory > xpublisher_with_author
        memory > xtest_rename_field_with_renamed_model
        memory > xbook_with_no_author
        memory > xpublisher
        memory > xtest_proxy_to_mti_with_fk_to_proxy_proxy
        memory > xtest_keep_db_table_with_model_change
        memory > xauthor_with_former_m2m
        memory > xtest_swappable_changed
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xargs)) ((xargs)))
                        (((unsupported)).apply (((xself).xkwargs)) ((xkwargs)))
                xdeconstruct.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((((xself).x__module__).add ".").add (((xself).x__class__).x__name__))) (((xself).xargs)) (((xself).xkwargs)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xauthor_empty.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xauthor_name.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xauthor_name_null.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) (TRUE))))))))
                xauthor_name_longer.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (400))))))))
                xauthor_name_renamed.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("names") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xauthor_name_default.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ("Ada Lovelace"))))))))
                xauthor_name_check_constraint.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("constraints") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) ("Bob"))) ("name_contains_bob"))))))))
                xauthor_dates_of_birth_auto_now.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("date_of_birth") ((((unsupported)).apply (((xmodels).xDateField)) (TRUE))))) ((((unsupported)).apply ("date_time_of_birth") ((((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE))))) ((((unsupported)).apply ("time_of_birth") ((((unsupported)).apply (((xmodels).xTimeField)) (TRUE))))))))
                xauthor_dates_of_birth_auto_now_add.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("date_of_birth") ((((unsupported)).apply (((xmodels).xDateField)) (TRUE))))) ((((unsupported)).apply ("date_time_of_birth") ((((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE))))) ((((unsupported)).apply ("time_of_birth") ((((unsupported)).apply (((xmodels).xTimeField)) (TRUE))))))))
                xauthor_name_deconstructible_1.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((xDeconstructibleObject)))))))))
                xauthor_name_deconstructible_2.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((xDeconstructibleObject)))))))))
                xauthor_name_deconstructible_3.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) (((xmodels).xIntegerField)))))))))
                xauthor_name_deconstructible_4.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) (((xmodels).xIntegerField)))))))))
                xauthor_name_deconstructible_list_1.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (123))))))))))
                xauthor_name_deconstructible_list_2.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (123))))))))))
                xauthor_name_deconstructible_list_3.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (999))))))))))
                xauthor_name_deconstructible_tuple_1.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (123))))))))))
                xauthor_name_deconstructible_tuple_2.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (123))))))))))
                xauthor_name_deconstructible_tuple_3.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) (999))))))))))
                xauthor_name_deconstructible_dict_1.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ("item") ((xDeconstructibleObject)) ("otheritem") (123))))))))))
                xauthor_name_deconstructible_dict_2.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ("item") ((xDeconstructibleObject)) ("otheritem") (123))))))))))
                xauthor_name_deconstructible_dict_3.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ("item") ((xDeconstructibleObject)) ("otheritem") (999))))))))))
                xauthor_name_nested_deconstructible_1.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2"))))) ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c"))))))))))))))
                xauthor_name_nested_deconstructible_2.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2"))))) ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c"))))))))))))))
                xauthor_name_nested_deconstructible_changed_arg.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2-changed"))))) ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c"))))))))))))))
                xauthor_name_nested_deconstructible_extra_arg.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2"))))) ("None: is there a None literal in the EO language?") ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c"))))))))))))))
                xauthor_name_nested_deconstructible_changed_kwarg.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2"))))) ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c-changed"))))))))))))))
                xauthor_name_nested_deconstructible_extra_kwarg.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply (1))) ((((unsupported)).apply ((((xDeconstructibleObject)).apply ("t1"))) ((((xDeconstructibleObject)).apply ("t2"))))) ((((xDeconstructibleObject)).apply ("A"))) ((((unsupported)).apply ((xDeconstructibleObject)) ((((xDeconstructibleObject)).apply ("c"))))) ("None: is there a None literal in the EO language?"))))))))))
                xauthor_custom_pk.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("pk_field") ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))))))))
                xauthor_with_biography_non_blank.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") (((xmodels).xCharField)))) ((((unsupported)).apply ("biography") (((xmodels).xTextField)))))))
                xauthor_with_biography_blank.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (TRUE))))) ((((unsupported)).apply ("biography") ((((unsupported)).apply (((xmodels).xTextField)) (TRUE))))))))
                xauthor_with_book.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))))
                xauthor_with_book_order_wrt.write (((unsupported)).apply ((xModelState)) ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ("order_with_respect_to") ("book"))))
                xauthor_renamed_with_book.write (((xModelState)).apply ("testapp") ("Writer") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))))
                xauthor_with_publisher_string.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("publisher_name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xauthor_with_publisher.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("publisher") (((((xmodels).xForeignKey)).apply ("testapp.Publisher") (((xmodels).xCASCADE)))))))))
                xauthor_with_user.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("user") (((((xmodels).xForeignKey)).apply ("auth.User") (((xmodels).xCASCADE)))))))))
                xauthor_with_custom_user.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("user") (((((xmodels).xForeignKey)).apply ("thirdapp.CustomUser") (((xmodels).xCASCADE)))))))))
                xauthor_proxy.write (((xModelState)).apply ("testapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply ("proxy") (TRUE))) ((((unsupported)).apply ("testapp.author"))))
                xauthor_proxy_options.write (((xModelState)).apply ("testapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply ("proxy") (TRUE) ("verbose_name") ("Super Author"))) ((((unsupported)).apply ("testapp.author"))))
                xauthor_proxy_notproxy.write (((xModelState)).apply ("testapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("testapp.author"))))
                xauthor_proxy_third.write (((xModelState)).apply ("thirdapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply ("proxy") (TRUE))) ((((unsupported)).apply ("testapp.author"))))
                xauthor_proxy_third_notproxy.write (((xModelState)).apply ("thirdapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("testapp.author"))))
                xauthor_proxy_proxy.write (((xModelState)).apply ("testapp") ("AAuthorProxyProxy") ((((unsupported)).apply)) ((((unsupported)).apply ("proxy") (TRUE))) ((((unsupported)).apply ("testapp.authorproxy"))))
                xauthor_unmanaged.write (((xModelState)).apply ("testapp") ("AuthorUnmanaged") ((((unsupported)).apply)) ((((unsupported)).apply ("managed") (FALSE))) ((((unsupported)).apply ("testapp.author"))))
                xauthor_unmanaged_managed.write (((xModelState)).apply ("testapp") ("AuthorUnmanaged") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("testapp.author"))))
                xauthor_unmanaged_default_pk.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xauthor_unmanaged_custom_pk.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("pk_field") ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))))))))
                xauthor_with_m2m.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("publishers") (((((xmodels).xManyToManyField)).apply ("testapp.Publisher"))))))))
                xauthor_with_m2m_blank.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("publishers") ((((unsupported)).apply (((xmodels).xManyToManyField)) ("testapp.Publisher") (TRUE))))))))
                xauthor_with_m2m_through.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("publishers") ((((unsupported)).apply (((xmodels).xManyToManyField)) ("testapp.Publisher") ("testapp.Contract"))))))))
                xauthor_with_renamed_m2m_through.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("publishers") ((((unsupported)).apply (((xmodels).xManyToManyField)) ("testapp.Publisher") ("testapp.Deal"))))))))
                xauthor_with_former_m2m.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("publishers") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                xauthor_with_options.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("permissions") ((((unsupported)).apply ((((unsupported)).apply ("can_hire") ("Can hire"))))) ("verbose_name") ("Authi"))))
                xauthor_with_db_table_options.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("db_table") ("author_one"))))
                xauthor_with_new_db_table_options.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("db_table") ("author_two"))))
                xauthor_renamed_with_db_table_options.write (((xModelState)).apply ("testapp") ("NewAuthor") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("db_table") ("author_one"))))
                xauthor_renamed_with_new_db_table_options.write (((xModelState)).apply ("testapp") ("NewAuthor") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("db_table") ("author_three"))))
                xcontract.write (((xModelState)).apply ("testapp") ("Contract") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("publisher") (((((xmodels).xForeignKey)).apply ("testapp.Publisher") (((xmodels).xCASCADE)))))))))
                xcontract_renamed.write (((xModelState)).apply ("testapp") ("Deal") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("publisher") (((((xmodels).xForeignKey)).apply ("testapp.Publisher") (((xmodels).xCASCADE)))))))))
                xpublisher.write (((xModelState)).apply ("testapp") ("Publisher") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                xpublisher_with_author.write (((xModelState)).apply ("testapp") ("Publisher") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                xpublisher_with_aardvark_author.write (((xModelState)).apply ("testapp") ("Publisher") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Aardvark") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                xpublisher_with_book.write (((xModelState)).apply ("testapp") ("Publisher") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                xother_pony.write (((xModelState)).apply ("otherapp") ("Pony") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xother_pony_food.write (((unsupported)).apply ((xModelState)) ("otherapp") ("Pony") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ((((unsupported)).apply ("food_qs") (((xFoodQuerySet).xas_manager)))) ((((unsupported)).apply ("food_mgr") ((((xFoodManager)).apply ("a") ("b"))))) ((((unsupported)).apply ("food_mgr_kwargs") ((((xFoodManager)).apply ("x") ("y") (3) (4))))))))
                xother_stable.write (((xModelState)).apply ("otherapp") ("Stable") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xthird_thing.write (((xModelState)).apply ("thirdapp") ("Thing") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xbook.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_proxy_fk.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("thirdapp.AuthorProxy") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_proxy_proxy_fk.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.AAuthorProxyProxy") (((xmodels).xCASCADE)))))))))
                xbook_migrations_fk.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("migrations.UnmigratedModel") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_no_author_fk.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_no_author.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_author_renamed.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Writer") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_field_and_author_renamed.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("writer") (((((xmodels).xForeignKey)).apply ("testapp.Writer") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_multiple_authors.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("authors") (((((xmodels).xManyToManyField)).apply ("testapp.Author"))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_with_multiple_authors_through_attribution.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("authors") ((((unsupported)).apply (((xmodels).xManyToManyField)) ("testapp.Author") ("otherapp.Attribution"))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                xbook_indexes.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("author") ("title"))) ("book_title_author_idx"))))))))
                xbook_unordered_indexes.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("title") ("author"))) ("book_author_title_idx"))))))))
                xbook_foo_together.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))))))
                xbook_foo_together_2.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))))))
                xbook_foo_together_3.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("newfield") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield"))))))))
                xbook_foo_together_4.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("newfield2") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield2"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield2"))))))))
                xattribution.write (((xModelState)).apply ("otherapp") ("Attribution") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("testapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))))
                xedition.write (((xModelState)).apply ("thirdapp") ("Edition") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))))
                xcustom_user.write (((unsupported)).apply ((xModelState)) ("thirdapp") ("CustomUser") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("username") ((((unsupported)).apply (((xmodels).xCharField)) (255))))))) ((((unsupported)).apply ((xAbstractBaseUser)))))
                xcustom_user_no_inherit.write (((xModelState)).apply ("thirdapp") ("CustomUser") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("username") ((((unsupported)).apply (((xmodels).xCharField)) (255))))))))
                xaardvark.write (((xModelState)).apply ("thirdapp") ("Aardvark") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xaardvark_testapp.write (((xModelState)).apply ("testapp") ("Aardvark") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xaardvark_based_on_author.write (((unsupported)).apply ((xModelState)) ("testapp") ("Aardvark") ((((unsupported)).apply)) ((((unsupported)).apply ("testapp.Author"))))
                xaardvark_pk_fk_author.write (((xModelState)).apply ("testapp") ("Aardvark") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xOneToOneField)) ("testapp.Author") (((xmodels).xCASCADE)) (TRUE))))))))
                xknight.write (((xModelState)).apply ("eggs") ("Knight") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                xrabbit.write (((xModelState)).apply ("eggs") ("Rabbit") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("knight") (((((xmodels).xForeignKey)).apply ("eggs.Knight") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("parent") (((((xmodels).xForeignKey)).apply ("eggs.Rabbit") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("parent") ("knight"))))) ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("parent") ("knight"))) ("rabbit_circular_fk_index"))))))))
                xrepr_changes.write
                  [xself xchanges xinclude_dependencies]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write ""
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigrations_)))) ((((xsorted)).apply (((xchanges).xitems)))))
                          seq
                            (((unsupported)).apply ((xoutput)) (("  %s:n".mod (xapp_label))))
                            (((unsupported)).apply ((xmigration)) ((xmigrations_)))
                              seq
                                (((unsupported)).apply ((xoutput)) (("    %sn".mod ((xmigration).xname))))
                                (((unsupported)).apply ((xoperation)) (((xmigration).xoperations)))
                                  (((unsupported)).apply ((xoutput)) (("      %sn".mod (xoperation))))
                                (xinclude_dependencies).if
                                  seq
                                    (((unsupported)).apply ((xoutput)) ("      Dependencies:n"))
                                    ((xmigration).xdependencies).if
                                      (((unsupported)).apply ((xdep)) (((xmigration).xdependencies)))
                                        (((unsupported)).apply ((xoutput)) (("        %sn".mod (((unsupported)).apply ((xdep))))))
                                      (((unsupported)).apply ((xoutput)) ("        Nonen"))
                        (((unsupported)).apply ((xoutput)))
                xassertNumberMigrations.write
                  [xself xchanges xapp_label xnumber]
                    seq > @
                      ((((xlen)).apply (((((xchanges).xget)).apply ((xapp_label)) ((((unsupported)).apply))))).neq (xnumber)).if
                        bogusForceDataize.write ((((xself).xfail)).apply (("Incorrect number of migrations (%s) for %s (expected %s)n%s".mod (((unsupported)).apply ((((xlen)).apply (((((xchanges).xget)).apply ((xapp_label)) ((((unsupported)).apply)))))) ((xapp_label)) ((xnumber)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                xassertMigrationDependencies.write
                  [xself xchanges xapp_label xposition xdependencies]
                    memory > xmigration
                    seq > @
                      seq
                        (((((xchanges).xget)).apply ((xapp_label))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migrations found for %sn%s".mod (((unsupported)).apply ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migration at index %s for %sn%s".mod (((unsupported)).apply ((xposition)) ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))) ((xposition)))
                        ((((xset)).apply (((xmigration).xdependencies))).neq (((xset)).apply ((xdependencies)))).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Migration dependencies mismatch for %s.%s (expected %s):n%s".mod (((unsupported)).apply ((xapp_label)) (((xmigration).xname)) ((xdependencies)) ((((unsupported)).apply (((xself).xrepr_changes)) ((xchanges)) (TRUE)))))))
                xassertOperationTypes.write
                  [xself xchanges xapp_label xposition xtypes]
                    memory > xmigration
                    memory > xreal_types
                    seq > @
                      seq
                        (((((xchanges).xget)).apply ((xapp_label))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migrations found for %sn%s".mod (((unsupported)).apply ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migration at index %s for %sn%s".mod (((unsupported)).apply ((xposition)) ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))) ((xposition)))
                        xreal_types.write (((unsupported)).apply ((((xoperation).x__class__).x__name__)) ((xoperation)) (((xmigration).xoperations)))
                        ((xtypes).neq (xreal_types)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Operation type mismatch for %s.%s (expected %s):n%s".mod (((unsupported)).apply ((xapp_label)) (((xmigration).xname)) ((xtypes)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                xassertOperationAttributes.write
                  [xself xchanges xapp_label xposition xoperation_position]
                    memory > xmigration
                    memory > xoperation
                    seq > @
                      (((unsupported)).apply)
                        (((((xchanges).xget)).apply ((xapp_label))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migrations found for %sn%s".mod (((unsupported)).apply ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migration at index %s for %sn%s".mod (((unsupported)).apply ((xposition)) ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))) ((xposition)))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No operation at index %s for %s.%sn%s".mod (((unsupported)).apply ((xoperation_position)) ((xapp_label)) (((xmigration).xname)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xoperation.write (((unsupported)).apply (((xmigration).xoperations)) ((xoperation_position)))
                        (((unsupported)).apply ((((unsupported)).apply ((xattr)) ((xvalue)))) (((xattrs).xitems)))
                          ((((xgetattr)).apply ((xoperation)) ((xattr)) ("None: is there a None literal in the EO language?")).neq (xvalue)).if
                            bogusForceDataize.write ((((xself).xfail)).apply (("Attribute mismatch for %s.%s op #%s, %s (expected %r, got %r):n%s".mod (((unsupported)).apply ((xapp_label)) (((xmigration).xname)) ((xoperation_position)) ((xattr)) ((xvalue)) ((((xgetattr)).apply ((xoperation)) ((xattr)) ("None: is there a None literal in the EO language?"))) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                xassertOperationFieldAttributes.write
                  [xself xchanges xapp_label xposition xoperation_position]
                    memory > xfield
                    memory > xmigration
                    memory > xoperation
                    seq > @
                      (((unsupported)).apply)
                        (((((xchanges).xget)).apply ((xapp_label))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migrations found for %sn%s".mod (((unsupported)).apply ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No migration at index %s for %sn%s".mod (((unsupported)).apply ((xposition)) ((xapp_label)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))) ((xposition)))
                        ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label))))).less ((xposition).add 1)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No operation at index %s for %s.%sn%s".mod (((unsupported)).apply ((xoperation_position)) ((xapp_label)) (((xmigration).xname)) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                        xoperation.write (((unsupported)).apply (((xmigration).xoperations)) ((xoperation_position)))
                        ((((xhasattr)).apply ((xoperation)) ("field")).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("No field attribute for %s.%s op #%s.".mod (((unsupported)).apply ((xapp_label)) (((xmigration).xname)) ((xoperation_position))))))
                        xfield.write ((xoperation).xfield)
                        (((unsupported)).apply ((((unsupported)).apply ((xattr)) ((xvalue)))) (((xattrs).xitems)))
                          ((((xgetattr)).apply ((xfield)) ((xattr)) ("None: is there a None literal in the EO language?")).neq (xvalue)).if
                            bogusForceDataize.write ((((xself).xfail)).apply (("Field attribute mismatch for %s.%s op #%s, field.%s (expected %r, got %r):n%s".mod (((unsupported)).apply ((xapp_label)) (((xmigration).xname)) ((xoperation_position)) ((xattr)) ((xvalue)) ((((xgetattr)).apply ((xfield)) ((xattr)) ("None: is there a None literal in the EO language?"))) (((((xself).xrepr_changes)).apply ((xchanges))))))))
                xmake_project_state.write
                  [xself xmodel_states]
                    memory > xproject_state
                    seq > @
                      seq
                        unsupported
                        xproject_state.write (xProjectState)
                        (((unsupported)).apply ((xmodel_state)) ((xmodel_states)))
                          bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((xmodel_state).xclone)))
                        (((unsupported)).apply ((xproject_state)))
                xget_changes.write
                  [xself xbefore_states xafter_states xquestioner]
                    seq > @
                      (((unsupported)).apply)
                        ((((xisinstance)).apply ((xbefore_states)) ((xProjectState))).not).if
                          xbefore_states.write ((((xself).xmake_project_state)).apply ((xbefore_states)))
                        ((((xisinstance)).apply ((xafter_states)) ((xProjectState))).not).if
                          xafter_states.write ((((xself).xmake_project_state)).apply ((xafter_states)))
                        (((unsupported)).apply (((((xMigrationAutodetector)).apply ((xbefore_states)) ((xafter_states)) ((xquestioner))).x_detect_changes)))
                xtest_arrange_for_graph.write
                  [xself]
                    memory > xautodetector
                    memory > xgraph
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xgraph.write (xMigrationGraph)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("testapp") ("0001_initial"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("testapp") ("0002_foobar"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("testapp.0002_foobar") ((((unsupported)).apply ("testapp") ("0002_foobar"))) ((((unsupported)).apply ("testapp") ("0001_initial"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("testapp.0002_foobar") ((((unsupported)).apply ("testapp") ("0002_foobar"))) ((((unsupported)).apply ("otherapp") ("0001_initial"))))
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xpublisher)) (((xself).xother_pony)))))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xpublisher)) (((xself).xother_pony)) (((xself).xother_stable)))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)))
                        xchanges.write ((xautodetector).x_detect_changes)
                        xchanges.write ((((xautodetector).xarrange_for_graph)).apply ((xchanges)) ((xgraph)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xname)) ("0003_author"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("0002_foobar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xname)) ("0002_stable"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))))))
                xtest_arrange_for_graph_with_multiple_initial.write
                  [xself]
                    memory > xautodetector
                    memory > xgraph
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        xgraph.write (xMigrationGraph)
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply)))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_with_book)) (((xself).xbook)) (((xself).xattribution)))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_initial") (TRUE))))))
                        xchanges.write ((xautodetector).x_detect_changes)
                        xchanges.write ((((xautodetector).xarrange_for_graph)).apply ((xchanges)) ((xgraph)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xname)) ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xdependencies)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (1)).xname)) ("0002_initial"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (1)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("0001_initial"))) ((((unsupported)).apply ("otherapp") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xname)) ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))))))
                xtest_trim_apps.write
                  [xself]
                    memory > xautodetector
                    memory > xgraph
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply)))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xother_pony)) (((xself).xother_stable)) (((xself).xthird_thing)))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_initial") (TRUE))))))
                        xchanges.write ((xautodetector).x_detect_changes)
                        xgraph.write (xMigrationGraph)
                        xchanges.write ((((xautodetector).xarrange_for_graph)).apply ((xchanges)) ((xgraph)))
                        bogusForceDataize.write (((((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xdependencies).xappend)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))))
                        xchanges.write ((((xautodetector).x_trim_to_apps)).apply ((xchanges)) ((((unsupported)).apply ("testapp"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xname)) ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xname)) ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("thirdapp") ((xchanges)))
                xtest_custom_migration_name.write
                  [xself]
                    memory > xautodetector
                    memory > xgraph
                    memory > xbefore
                    memory > xmigration_name
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xgraph.write (xMigrationGraph)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("testapp") ("0001_initial"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("testapp") ("0002_foobar"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("testapp.0002_foobar") ((((unsupported)).apply ("testapp") ("0002_foobar"))) ((((unsupported)).apply ("testapp") ("0001_initial"))))
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply)))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xother_pony)) (((xself).xother_stable)))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)))
                        xchanges.write ((xautodetector).x_detect_changes)
                        xmigration_name.write "custom_name"
                        xchanges.write ((((xautodetector).xarrange_for_graph)).apply ((xchanges)) ((xgraph)) ((xmigration_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xname)) (("0003_%s".mod (xmigration_name))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("0002_foobar"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xname)) (("0002_%s".mod (xmigration_name))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xdependencies)) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("0001_initial"))))))
                xtest_new_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xother_pony_food)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Pony"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xmanagers)))) ((((unsupported)).apply ("food_qs") ("food_mgr") ("food_mgr_kwargs"))))
                xtest_old_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                xtest_add_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name"))
                xtest_add_date_fields_with_auto_now_not_asking_for_default.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_dates_of_birth_auto_now)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AddField") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (1) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (2) (TRUE))
                xtest_add_date_fields_with_auto_now_add_not_asking_for_null_addition.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_dates_of_birth_auto_now_add)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AddField") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (1) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (2) (TRUE))
                xtest_add_date_fields_with_auto_now_add_asking_for_default.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_dates_of_birth_auto_now_add)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AddField") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (1) (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (2) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_ask_method).xcall_count)) (3))
                xtest_remove_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply (((xself).xauthor_empty)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name"))
                xtest_alter_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply (((xself).xauthor_name_longer)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name") (TRUE))
                xtest_supports_functools_partial.write
                  [xself]
                    memory > xargs_changed
                    memory > xvalue
                    memory > xkwargs_changed
                    memory > x_content_file_name
                    memory > xcontent_file_name
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        x_content_file_name.write
                          [xinstance xfilename xkey]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((("{}/{}".xformat)).apply ((xinstance)) ((xfilename)))))
                        xcontent_file_name.write
                          [xkey]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xfunctools).xpartial)).apply ((x_content_file_name)) ((xkey)) ((((unsupported)).apply ((xkwargs)))))))
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("file") ((((unsupported)).apply (((xmodels).xFileField)) (200) ((((xcontent_file_name)).apply ("file"))))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("file") ((((unsupported)).apply (((xmodels).xFileField)) (200) ((((xcontent_file_name)).apply ("file"))))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (0))
                        xargs_changed.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("file") ((((unsupported)).apply (((xmodels).xFileField)) (200) ((((xcontent_file_name)).apply ("other-file"))))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xargs_changed)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        xvalue.write (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xoperations)) (0)).xfield).xupload_to)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((x_content_file_name)) ((((unsupported)).apply ("other-file"))) ((((unsupported)).apply)))) ((((unsupported)).apply (((xvalue).xfunc)) (((xvalue).xargs)) (((xvalue).xkeywords)))))
                        xkwargs_changed.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("file") ((((unsupported)).apply (((xmodels).xFileField)) (200) ((((unsupported)).apply ((xcontent_file_name)) ("file") ("eggs"))))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xkwargs_changed)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        xvalue.write (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xoperations)) (0)).xfield).xupload_to)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((x_content_file_name)) ((((unsupported)).apply ("file"))) ((((unsupported)).apply ("spam") ("eggs"))))) ((((unsupported)).apply (((xvalue).xfunc)) (((xvalue).xargs)) (((xvalue).xkeywords)))))
                xtest_alter_field_to_not_null_with_default.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_null)))) ((((unsupported)).apply (((xself).xauthor_name_default)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name") (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) ("Ada Lovelace"))
                xtest_alter_field_to_not_null_without_default.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_null)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_ask_method).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name") (TRUE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) (((xmodels).xNOT_PROVIDED)))
                xtest_alter_field_to_not_null_oneoff_default.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_null)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_ask_method).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name") (FALSE))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (0) ("Some Name"))
                xtest_rename_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply (((xself).xauthor_name_renamed)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name") ("names"))
                xtest_rename_field_foreign_key_to_field.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("field") ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("foo") ((((unsupported)).apply (((xmodels).xForeignKey)) ("app.Foo") (((xmodels).xCASCADE)) ("field"))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("renamed_field") ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("foo") ((((unsupported)).apply (((xmodels).xForeignKey)) ("app.Foo") (((xmodels).xCASCADE)) ("renamed_field"))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("field") ("renamed_field"))
                xtest_rename_foreign_object_fields.write
                  [xself]
                    memory > xrenamed_fields
                    memory > xfields
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        xfields.write (((unsupported)).apply ("first") ("second"))
                        xrenamed_fields.write (((unsupported)).apply ("first_renamed") ("second_renamed"))
                        xbefore.write (((unsupported)).apply ((((unsupported)).apply ((xModelState)) ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((xfields)))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply (((xmodels).xForeignObject)) ("app.Foo") (((xmodels).xCASCADE)) ((xfields)) ((xfields)))))))))))
                        xafter.write (((unsupported)).apply ((((unsupported)).apply ((xModelState)) ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first_renamed") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second_renamed") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((xrenamed_fields)))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply (((xmodels).xForeignObject)) ("app.Foo") (((xmodels).xCASCADE)) ((xfields)) ((xrenamed_fields)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("RenameField") ("RenameField") ("AlterUniqueTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("foo") ("first") ("first_renamed"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("foo") ("second") ("second_renamed"))
                        xafter.write (((unsupported)).apply ((((unsupported)).apply ((xModelState)) ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((xfields)))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("first_renamed") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("second_renamed") (((xmodels).xIntegerField)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply (((xmodels).xForeignObject)) ("app.Foo") (((xmodels).xCASCADE)) ((xrenamed_fields)) ((xfields)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("RenameField") ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("bar") ("first") ("first_renamed"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("bar") ("second") ("second_renamed"))
                xtest_rename_referenced_primary_key.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xCharField)) (TRUE) (FALSE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("foo") (((((xmodels).xForeignKey)).apply ("app.Foo") (((xmodels).xCASCADE)))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("renamed_id") ((((unsupported)).apply (((xmodels).xCharField)) (TRUE) (FALSE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("foo") (((((xmodels).xForeignKey)).apply ("app.Foo") (((xmodels).xCASCADE)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("id") ("renamed_id"))
                xtest_rename_field_preserved_db_column.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("field") (((xmodels).xIntegerField)))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("renamed_field") ((((unsupported)).apply (((xmodels).xIntegerField)) ("field"))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("AlterField") ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("foo") ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("app"))) (0)).xoperations)) (0)).xfield).xdeconstruct)) ((((unsupported)).apply ("field") ("django.db.models.IntegerField") ((((unsupported)).apply)) ((((unsupported)).apply ("db_column") ("field"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("foo") ("field") ("renamed_field"))
                xtest_rename_related_field_preserved_db_column.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("foo") (((((xmodels).xForeignKey)).apply ("app.Foo") (((xmodels).xCASCADE)))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("app") ("Foo") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("app") ("Bar") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("renamed_foo") ((((unsupported)).apply (((xmodels).xForeignKey)) ("app.Foo") (((xmodels).xCASCADE)) ("foo_id"))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("AlterField") ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("bar") ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("app"))) (0)).xoperations)) (0)).xfield).xdeconstruct)) ((((unsupported)).apply ("foo") ("django.db.models.ForeignKey") ((((unsupported)).apply)) ((((unsupported)).apply ("to") ("app.foo") ("on_delete") (((xmodels).xCASCADE)) ("db_column") ("foo_id"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("bar") ("foo") ("renamed_foo"))
                xtest_rename_field_with_renamed_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply ((((xModelState)).apply ("testapp") ("RenamedAuthor") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("renamed_name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE) ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel") ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ("RenamedAuthor"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("name") ("renamed_name"))
                xtest_rename_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_book)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_renamed_with_book)) (((xself).xbook_with_author_renamed)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ("Writer"))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (0))
                xtest_rename_model_case.write
                  [xself]
                    memory > xauthor_renamed
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xauthor_renamed.write (((xModelState)).apply ("testapp") ("author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xchanges.write (((unsupported)).apply (((xself).xget_changes)) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))) ((((unsupported)).apply ((xauthor_renamed)) (((xself).xbook)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (0))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (0))
                xtest_renamed_referenced_m2m_model_case.write
                  [xself]
                    memory > xpublisher_renamed
                    memory > xchanges
                    seq > @
                      seq
                        xpublisher_renamed.write (((xModelState)).apply ("testapp") ("publisher") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                        xchanges.write (((unsupported)).apply (((xself).xget_changes)) ((((unsupported)).apply (((xself).xpublisher)) (((xself).xauthor_with_m2m)))) ((((unsupported)).apply ((xpublisher_renamed)) (((xself).xauthor_with_m2m)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (0))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (0))
                xtest_rename_m2m_through_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_m2m_through)) (((xself).xpublisher)) (((xself).xcontract)))) ((((unsupported)).apply (((xself).xauthor_with_renamed_m2m_through)) (((xself).xpublisher)) (((xself).xcontract_renamed)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Contract") ("Deal"))
                xtest_rename_model_with_renamed_rel_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_book)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_renamed_with_book)) (((xself).xbook_with_field_and_author_renamed)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE) ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ("Writer"))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RenameField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("author") ("writer"))
                xtest_rename_model_with_fks_in_different_position.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("EntityA") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("testapp") ("EntityB") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("some_label") ((((unsupported)).apply (((xmodels).xCharField)) (255))))) ((((unsupported)).apply ("entity_a") (((((xmodels).xForeignKey)).apply ("testapp.EntityA") (((xmodels).xCASCADE)))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("EntityA") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("testapp") ("RenamedEntityB") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("entity_a") (((((xmodels).xForeignKey)).apply ("testapp.EntityA") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("some_label") ((((unsupported)).apply (((xmodels).xCharField)) (255))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("EntityB") ("RenamedEntityB"))
                xtest_rename_model_reverse_relation_dependencies.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("EntityA") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("otherapp") ("EntityB") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("entity_a") (((((xmodels).xForeignKey)).apply ("testapp.EntityA") (((xmodels).xCASCADE)))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("testapp") ("RenamedEntityA") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ("otherapp") ("EntityB") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("entity_a") (((((xmodels).xForeignKey)).apply ("testapp.RenamedEntityA") (((xmodels).xCASCADE)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("__first__"))))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("EntityA") ("RenamedEntityA"))
                xtest_fk_dependency.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_name)) (((xself).xbook)) (((xself).xedition)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Book"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("thirdapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (0) ("Edition"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("auto_1"))))))
                xtest_proxy_fk_dependency.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_third)) (((xself).xbook_proxy_fk)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Book"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("thirdapp") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("thirdapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (0) ("AuthorProxy"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("auto_1"))))))
                xtest_same_app_no_fk_dependency.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_with_publisher)) (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Author"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply)))
                xtest_circular_fk_dependency.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_with_book)) (((xself).xbook)) (((xself).xpublisher_with_book)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Author"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (2))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (1) ((((unsupported)).apply ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (1) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("auto_1"))) ((((unsupported)).apply ("testapp") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xinitial)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (1)).xinitial)))
                xtest_same_app_circular_fk_dependency.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_with_publisher)) (((xself).xpublisher_with_author)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("publisher"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply)))
                xtest_same_app_circular_fk_dependency_with_unique_together_and_indexes.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xknight)) (((xself).xrabbit)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("eggs") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("eggs") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("AddIndex") ("AlterUniqueTogether"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("unique_together") (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("eggs"))) (0)).xoperations)) (0)).xoptions)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("unique_together") (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("eggs"))) (0)).xoperations)) (1)).xoptions)))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("eggs") (0) ((((unsupported)).apply)))
                xtest_alter_db_table_add.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelTable"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("author_one"))
                xtest_alter_db_table_change.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))) ((((unsupported)).apply (((xself).xauthor_with_new_db_table_options)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelTable"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("author_two"))
                xtest_alter_db_table_remove.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))) ((((unsupported)).apply (((xself).xauthor_empty)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelTable"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("None: is there a None literal in the EO language?"))
                xtest_alter_db_table_no_changes.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))) ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (0))
                xtest_keep_db_table_with_model_change.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))) ((((unsupported)).apply (((xself).xauthor_renamed_with_db_table_options)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ("NewAuthor"))
                xtest_alter_db_table_with_model_change.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_db_table_options)))) ((((unsupported)).apply (((xself).xauthor_renamed_with_new_db_table_options)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename_model") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RenameModel") ("AlterModelTable"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ("NewAuthor"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("newauthor") ("author_three"))
                xtest_identical_regex_doesnt_alter.write
                  [xself]
                    memory > xto_state
                    memory > xchanges
                    memory > xfrom_state
                    seq > @
                      seq
                        xfrom_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((((xRegexValidator)).apply (((((xre).xcompile)).apply ((((unsupported)).apply)))) ("Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.") ("invalid"))))))))))))
                        xto_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((xvalidate_slug)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xfrom_state)))) ((((unsupported)).apply ((xto_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (0))
                xtest_different_regex_does_alter.write
                  [xself]
                    memory > xto_state
                    memory > xchanges
                    memory > xfrom_state
                    seq > @
                      seq
                        xfrom_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((((xRegexValidator)).apply (((((xre).xcompile)).apply ((((unsupported)).apply)) (32))) ("Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.") ("invalid"))))))))))))
                        xto_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((xvalidate_slug)))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xfrom_state)))) ((((unsupported)).apply ((xto_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                xtest_alter_regex_string_to_compiled_regex.write
                  [xself]
                    memory > xchanges
                    memory > xfrom_state
                    memory > xto_state
                    memory > xregex_string
                    seq > @
                      seq
                        xregex_string.write "^[a-z]+$"
                        xfrom_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((((xRegexValidator)).apply ((xregex_string)))))))))))))
                        xto_state.write (((xModelState)).apply ("testapp") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE) ((((unsupported)).apply ((((xRegexValidator)).apply (((((xre).xcompile)).apply ((xregex_string)))))))))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xfrom_state)))) ((((unsupported)).apply ((xto_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                xtest_empty_foo_together.write
                  [xself]
                    memory > xmodel_state_empty
                    memory > xmodel_state_not_specified
                    memory > xtests
                    memory > xtest
                    memory > xmodel_state_none
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodel_state_not_specified.write (((xModelState)).apply ("a") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xmodel_state_none.write (((xModelState)).apply ("a") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("index_together") ("None: is there a None literal in the EO language?") ("unique_together") ("None: is there a None literal in the EO language?"))))
                        xmodel_state_empty.write (((xModelState)).apply ("a") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("index_together") ((xset)) ("unique_together") ((xset)))))
                        xtest.write
                          [xfrom_state xto_state xmsg]
                            memory > xops
                            memory > xchanges
                            seq > @
                              seq
                                xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xfrom_state)))) ((((unsupported)).apply ((xto_state)))))
                                (xchanges).if
                                  seq
                                    xops.write (((", ".xjoin)).apply ((((unsupported)).apply ((((xo).x__class__).x__name__)) ((xo)) (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("a"))) (0)).xoperations)))))
                                    bogusForceDataize.write ((((xself).xfail)).apply (("Created operation(s) %s from %s".mod (((unsupported)).apply ((xops)) ((xmsg))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xmodel_state_not_specified)) ((xmodel_state_not_specified)) ("\"not specified\" to \"not specified\""))) ((((unsupported)).apply ((xmodel_state_not_specified)) ((xmodel_state_none)) ("\"not specified\" to \"None\""))) ((((unsupported)).apply ((xmodel_state_not_specified)) ((xmodel_state_empty)) ("\"not specified\" to \"empty\""))) ((((unsupported)).apply ((xmodel_state_none)) ((xmodel_state_not_specified)) ("\"None\" to \"not specified\""))) ((((unsupported)).apply ((xmodel_state_none)) ((xmodel_state_none)) ("\"None\" to \"None\""))) ((((unsupported)).apply ((xmodel_state_none)) ((xmodel_state_empty)) ("\"None\" to \"empty\""))) ((((unsupported)).apply ((xmodel_state_empty)) ((xmodel_state_not_specified)) ("\"empty\" to \"not specified\""))) ((((unsupported)).apply ((xmodel_state_empty)) ((xmodel_state_none)) ("\"empty\" to \"None\""))) ((((unsupported)).apply ((xmodel_state_empty)) ((xmodel_state_empty)) ("\"empty\" to \"empty\""))))
                        (((unsupported)).apply ((xt)) ((xtests)))
                          bogusForceDataize.write (((xtest)).apply ((((unsupported)).apply ((xt)))))
                xtest_create_model_with_indexes.write
                  [xself]
                    memory > xadded_index
                    memory > xmigration
                    memory > xchanges
                    memory > xauthor
                    seq > @
                      seq
                        unsupported
                        xauthor.write (((xModelState)).apply ("otherapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("name"))) ("create_model_with_indexes_idx"))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xauthor)))))
                        xadded_index.write (((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("name"))) ("create_model_with_indexes_idx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))))) (1))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmigration).xoperations)))) (2))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel") ("AddIndex"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("author") ((xadded_index)))
                xtest_add_indexes.write
                  [xself]
                    memory > xadded_index
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_indexes)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AddIndex"))))
                        xadded_index.write (((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("author") ("title"))) ("book_title_author_idx"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((xadded_index)))
                xtest_remove_indexes.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_indexes)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RemoveIndex"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ("book_title_author_idx"))
                xtest_order_fields_indexes.write
                  [xself]
                    memory > xadded_index
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_indexes)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_unordered_indexes)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RemoveIndex") ("AddIndex"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ("book_title_author_idx"))
                        xadded_index.write (((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("title") ("author"))) ("book_author_title_idx"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((xadded_index)))
                xtest_create_model_with_check_constraint.write
                  [xself]
                    memory > xmigration
                    memory > xadded_constraint
                    memory > xchanges
                    memory > xauthor
                    seq > @
                      seq
                        unsupported
                        xauthor.write (((xModelState)).apply ("otherapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("constraints") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) ("Bob"))) ("name_contains_bob"))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xauthor)))))
                        xadded_constraint.write (((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) ("Bob"))) ("name_contains_bob"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))))) (1))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmigration).xoperations)))) (2))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel") ("AddConstraint"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("author") ((xadded_constraint)))
                xtest_add_constraints.write
                  [xself]
                    memory > xadded_constraint
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply (((xself).xauthor_name_check_constraint)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddConstraint"))))
                        xadded_constraint.write (((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) ("Bob"))) ("name_contains_bob"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ((xadded_constraint)))
                xtest_remove_constraints.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_check_constraint)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveConstraint"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("name_contains_bob"))
                xtest_add_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))))
                xtest_remove_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((xset)))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((xset)))
                xtest_foo_together_remove_fk.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_with_no_author)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether") ("RemoveField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((xset)))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((xset)))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (2) ("book") ("author"))
                xtest_foo_together_no_changes.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (0))
                xtest_foo_together_ordering.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together_2)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))))
                xtest_add_field_and_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together_3)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AddField") ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (2) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield"))))))
                xtest_create_model_and_unique_together.write
                  [xself]
                    memory > xbook_with_author
                    memory > xmigration
                    memory > xchanges
                    memory > xauthor
                    seq > @
                      seq
                        xauthor.write (((xModelState)).apply ("otherapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))
                        xbook_with_author.write (((xModelState)).apply ("otherapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("author") (((((xmodels).xForeignKey)).apply ("otherapp.Author") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("title") ("author"))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook_with_no_author)))) ((((unsupported)).apply ((xauthor)) ((xbook_with_author)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))))) (1))
                        xmigration.write (((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmigration).xoperations)))) (4))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel") ("AddField") ("AlterUniqueTogether") ("AlterIndexTogether"))))
                xtest_remove_field_and_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together_3)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether") ("RemoveField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("book") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((((unsupported)).apply ((((unsupported)).apply ("author") ("title"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (2) ("book") ("newfield"))
                xtest_alter_field_and_foo_together.write
                  [xself]
                    memory > xauthor_reversed_constraints
                    memory > xchanges
                    memory > xinitial_author
                    seq > @
                      seq
                        unsupported
                        xinitial_author.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("age") ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("name"))))))))
                        xauthor_reversed_constraints.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) (TRUE))))) ((((unsupported)).apply ("age") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("age"))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xinitial_author)))) ((((unsupported)).apply ((xauthor_reversed_constraints)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterField") ("AlterField") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ((xset)))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("author") ("age"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("author") ("name"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (3) ("author") ((((unsupported)).apply ((((unsupported)).apply ("age"))))))
                xtest_partly_alter_foo_together.write
                  [xself]
                    memory > xauthor_reversed_constraints
                    memory > xchanges
                    memory > xinitial_author
                    seq > @
                      seq
                        xinitial_author.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("age") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("name"))) ((((unsupported)).apply ("age"))))) ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("name"))))))))
                        xauthor_reversed_constraints.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("age") (((xmodels).xIntegerField)))))) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("age"))))) ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("name"))) ((((unsupported)).apply ("age"))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xinitial_author)))) ((((unsupported)).apply ((xauthor_reversed_constraints)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ((((unsupported)).apply ((((unsupported)).apply ("age"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("author") ((((unsupported)).apply ((((unsupported)).apply ("name"))) ((((unsupported)).apply ("age"))))))
                xtest_rename_field_and_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together_3)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_foo_together_4)))) ((((xMigrationQuestioner)).apply ((((unsupported)).apply ("ask_rename") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RenameField") ("AlterUniqueTogether") ("AlterIndexTogether"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield2"))))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (2) ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ("newfield2"))))))
                xtest_proxy.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("AuthorProxy") ((((unsupported)).apply ("proxy") (TRUE) ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_notproxy)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("DeleteModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("AuthorProxy"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("AuthorProxy") ((((unsupported)).apply)))
                xtest_proxy_non_model_parent.write
                  [xself]
                    memory > xchanges
                    memory > xauthor_proxy_non_model_parent
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xauthor_proxy_non_model_parent.write (((xModelState)).apply ("testapp") ("AuthorProxy") ((((unsupported)).apply)) ((((unsupported)).apply ("proxy") (TRUE))) ((((unsupported)).apply ((xMixin)) ("testapp.author"))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_empty)) ((xauthor_proxy_non_model_parent)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("AuthorProxy") ((((unsupported)).apply ("proxy") (TRUE) ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))) ((((unsupported)).apply ((xMixin)) ("testapp.author"))))
                xtest_proxy_custom_pk.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_third)) (((xself).xbook_proxy_fk)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (2))) (1)).xremote_field).xmodel)) ("thirdapp.AuthorProxy"))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_custom_pk)) (((xself).xauthor_proxy_third)) (((xself).xbook_proxy_fk)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (2))) (1)).xremote_field).xmodel)) ("thirdapp.AuthorProxy"))
                xtest_proxy_to_mti_with_fk_to_proxy.write
                  [xself]
                    memory > xto_state
                    memory > xfk_field
                    memory > xchanges
                    memory > xfrom_state
                    seq > @
                      seq
                        xto_state.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_third)) (((xself).xbook_proxy_fk)))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((xto_state)))
                        xfk_field.write (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xto_state).xget_concrete_model_key)).apply ((((xfk_field).xremote_field).xmodel)))) ((((unsupported)).apply ("testapp") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("thirdapp.AuthorProxy"))
                        xfrom_state.write ((xto_state).xclone)
                        xto_state.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_third_notproxy)) (((xself).xbook_proxy_fk)))))
                        xchanges.write ((((xself).xget_changes)).apply ((xfrom_state)) ((xto_state)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("thirdapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ("DeleteModel") ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("thirdapp") ("auto_1"))))))
                        xfk_field.write ((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfield)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xto_state).xget_concrete_model_key)).apply ((((xfk_field).xremote_field).xmodel)))) ((((unsupported)).apply ("thirdapp") ("authorproxy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("thirdapp.AuthorProxy"))
                xtest_proxy_to_mti_with_fk_to_proxy_proxy.write
                  [xself]
                    memory > xto_state
                    memory > xfk_field
                    memory > xchanges
                    memory > xfrom_state
                    seq > @
                      seq
                        xto_state.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy)) (((xself).xauthor_proxy_proxy)) (((xself).xbook_proxy_proxy_fk)))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((xto_state)))
                        xfk_field.write (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xto_state).xget_concrete_model_key)).apply ((((xfk_field).xremote_field).xmodel)))) ((((unsupported)).apply ("testapp") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("testapp.AAuthorProxyProxy"))
                        xfrom_state.write ((xto_state).xclone)
                        xto_state.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy_notproxy)) (((xself).xauthor_proxy_proxy)) (((xself).xbook_proxy_proxy_fk)))))
                        xchanges.write ((((xself).xget_changes)).apply ((xfrom_state)) ((xto_state)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("DeleteModel") ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("auto_1"))))))
                        xfk_field.write ((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfield)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xto_state).xget_concrete_model_key)).apply ((((xfk_field).xremote_field).xmodel)))) ((((unsupported)).apply ("testapp") ("authorproxy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("testapp.AAuthorProxyProxy"))
                xtest_unmanaged_create.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("AuthorUnmanaged") ((((unsupported)).apply ("managed") (FALSE))))
                xtest_unmanaged_delete.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged)))) ((((unsupported)).apply (((xself).xauthor_empty)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("DeleteModel"))))
                xtest_unmanaged_to_managed.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged_managed)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("authorunmanaged") ((((unsupported)).apply)))
                xtest_managed_to_unmanaged.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged_managed)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_unmanaged)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("authorunmanaged") ((((unsupported)).apply ("managed") (FALSE))))
                xtest_unmanaged_custom_pk.write
                  [xself]
                    memory > xfk_field
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_unmanaged_default_pk)) (((xself).xbook)))))
                        xfk_field.write (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("testapp.Author"))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_unmanaged_custom_pk)) (((xself).xbook)))))
                        xfk_field.write (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xfields)) (2))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("testapp.Author"))
                xtest_swappable.write
                  [xself]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xcustom_user)))) ((((unsupported)).apply (((xself).xcustom_user)) (((xself).xauthor_with_custom_user)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("__setting__") ("AUTH_USER_MODEL"))))))
                xtest_swappable_lowercase.write
                  [xself]
                    memory > xchanges
                    memory > xmodel_state
                    seq > @
                      seq
                        xmodel_state.write (((xModelState)).apply ("testapp") ("Document") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("owner") (((((xmodels).xForeignKey)).apply ((((xsettings).xAUTH_USER_MODEL).xlower)) (((xmodels).xCASCADE)))))))))
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xmodel_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Document"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("__setting__") ("AUTH_USER_MODEL"))))))
                xtest_swappable_many_to_many_model_case.write
                  [xself]
                    memory > xchanges
                    memory > xdocument
                    memory > xdocument_lowercase
                    seq > @
                      (((unsupported)).apply)
                        xdocument_lowercase.write (((xModelState)).apply ("testapp") ("Document") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("owners") (((((xmodels).xManyToManyField)).apply ((((xsettings).xAUTH_USER_MODEL).xlower)))))))))
                        xdocument.write (((xModelState)).apply ("testapp") ("Document") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("owners") (((((xmodels).xManyToManyField)).apply (((xsettings).xAUTH_USER_MODEL)))))))))
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xcustom_user)) ((xdocument_lowercase)))) ((((unsupported)).apply (((xself).xcustom_user)) ((xdocument)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (0))
                xtest_swappable_changed.write
                  [xself]
                    memory > xautodetector
                    memory > xfk_field
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          seq
                            xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xcustom_user)) (((xself).xauthor_with_user)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ("thirdapp.CustomUser"))))
                              xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xcustom_user)) (((xself).xauthor_with_custom_user)))))
                            xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)))
                            xchanges.write ((xautodetector).x_detect_changes)
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("user"))
                        xfk_field.write ((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xoperations)) (0)).xfield)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfk_field).xremote_field).xmodel)) ("thirdapp.CustomUser"))
                xtest_add_field_with_default.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_name_default)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("name"))
                xtest_custom_deconstructible.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (0))
                xtest_deconstruct_field_kwarg.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_3)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_4)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchanges)) ((((unsupported)).apply)))
                xtest_deconstructible_list.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_list_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_list_2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchanges)) ((((unsupported)).apply)))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_list_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_list_3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                xtest_deconstructible_tuple.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_tuple_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_tuple_2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchanges)) ((((unsupported)).apply)))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_tuple_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_tuple_3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                xtest_deconstructible_dict.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_dict_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_dict_2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchanges)) ((((unsupported)).apply)))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_deconstructible_dict_1)))) ((((unsupported)).apply (((xself).xauthor_name_deconstructible_dict_3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                xtest_nested_deconstructible_objects.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchanges)) ((((unsupported)).apply)))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_changed_arg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_extra_arg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_changed_kwarg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_1)))) ((((unsupported)).apply (((xself).xauthor_name_nested_deconstructible_extra_kwarg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchanges)))) (1))
                xtest_deconstruct_type.write
                  [xself]
                    memory > xchanges
                    memory > xauthor
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xauthor.write (((xModelState)).apply ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200) (((xmodels).xIntegerField)))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xauthor)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                xtest_replace_string_with_foreignkey.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_publisher_string)))) ((((unsupported)).apply (((xself).xauthor_with_publisher)) (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("RemoveField") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("publisher_name"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("publisher"))
                xtest_foreign_key_removed_before_target_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_publisher)) (((xself).xpublisher)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveField") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Publisher"))
                xtest_add_many_to_many.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xpublisher)))) ((((unsupported)).apply (((xself).xauthor_with_m2m)) (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("publishers"))
                xtest_alter_many_to_many.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_m2m)) (((xself).xpublisher)))) ((((unsupported)).apply (((xself).xauthor_with_m2m_blank)) (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("publishers"))
                xtest_create_with_through_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_with_m2m_through)) (((xself).xpublisher)) (((xself).xcontract)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("CreateModel") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("Contract"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (3) ("author") ("publishers"))
                xtest_many_to_many_removed_before_through_model.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook_with_multiple_authors_through_attribution)) (((xself).xauthor_name)) (((xself).xattribution)))) ((((unsupported)).apply (((xself).xbook_with_no_author)) (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RemoveField") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("authors") ("book"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("Attribution"))
                xtest_many_to_many_removed_before_through_model_2.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook_with_multiple_authors_through_attribution)) (((xself).xauthor_name)) (((xself).xattribution)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("RemoveField") ("DeleteModel") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("authors") ("book"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (1) ("Attribution"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (2) ("Book"))
                xtest_m2m_w_through_multistep_remove.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_m2m_through)) (((xself).xpublisher)) (((xself).xcontract)))) ((((unsupported)).apply (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveField") ("RemoveField") ("DeleteModel") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("contract"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("publisher") ("contract"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (3) ("Contract"))
                xtest_concrete_field_changed_to_many_to_many.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_former_m2m)))) ((((unsupported)).apply (((xself).xauthor_with_m2m)) (((xself).xpublisher)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("RemoveField") ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("publishers") ("author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("publishers") ("author"))
                xtest_many_to_many_changed_to_concrete_field.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_m2m)) (((xself).xpublisher)))) ((((unsupported)).apply (((xself).xauthor_with_former_m2m)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveField") ("AddField") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("publishers") ("author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("publishers") ("author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("Publisher"))
                        (((unsupported)).apply (((xself).xassertOperationFieldAttributes)) ((xchanges)) ("testapp") (0) (1) (100))
                xtest_non_circular_foreignkey_dependency_removal.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_publisher)) (((xself).xpublisher_with_author)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("RemoveField") ("DeleteModel") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("publisher"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("Publisher"))
                xtest_alter_model_options.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_with_options)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ((((unsupported)).apply ("permissions") ((((unsupported)).apply ((((unsupported)).apply ("can_hire") ("Can hire"))))) ("verbose_name") ("Authi"))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_with_options)))) ((((unsupported)).apply (((xself).xauthor_empty)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ((((unsupported)).apply)))
                xtest_alter_model_options_proxy.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_proxy)) (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_proxy_options)) (((xself).xauthor_empty)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("authorproxy") ((((unsupported)).apply ("verbose_name") ("Super Author"))))
                xtest_set_alter_order_with_respect_to.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book)))) ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book_order_wrt)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterOrderWithRespectTo"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("book"))
                xtest_add_alter_order_with_respect_to.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)))) ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book_order_wrt)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AlterOrderWithRespectTo"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("book"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("author") ("book"))
                xtest_remove_alter_order_with_respect_to.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book_order_wrt)))) ((((unsupported)).apply (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterOrderWithRespectTo") ("RemoveField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("author") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("author") ("book"))
                xtest_add_model_order_with_respect_to.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book_order_wrt)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ((((unsupported)).apply ("order_with_respect_to") ("book"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("_order") ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xfield)))) (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("testapp"))) (0)).xoperations)) (0)).xfields)))))
                xtest_add_model_order_with_respect_to_index_foo_together.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xbook)) ((((unsupported)).apply ((xModelState)) ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ("order_with_respect_to") ("book") ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("name") ("_order"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("id") ("_order"))))))))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ((((unsupported)).apply ("order_with_respect_to") ("book") ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("name") ("_order"))))) ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("id") ("_order"))))))))
                xtest_add_model_order_with_respect_to_index_constraint.write
                  [xself]
                    memory > xchanges
                    memory > xtests
                    memory > xafter
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("AddIndex") ((((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("_order"))) ("book_order_idx"))))))))) ((((unsupported)).apply ("AddConstraint") ((((unsupported)).apply ("constraints") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) (1))) ("book_order_gt_1"))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoperation)) ((xextra_option)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xoperation)))))
                            seq
                              xafter.write (((unsupported)).apply ((xModelState)) ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ("order_with_respect_to") ("book") ((xextra_option)))))
                              xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xbook)) ((xafter)))))
                              bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                              bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ((xoperation)))))
                              (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author") ((((unsupported)).apply ("order_with_respect_to") ("book"))))
                xtest_set_alter_order_with_respect_to_index_constraint_foo_together.write
                  [xself]
                    memory > xchanges
                    memory > xtests
                    memory > xafter
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("AddIndex") ((((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("_order"))) ("book_order_idx"))))))))) ((((unsupported)).apply ("AddConstraint") ((((unsupported)).apply ("constraints") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) (1))) ("book_order_gt_1"))))))))) ((((unsupported)).apply ("AlterIndexTogether") ((((unsupported)).apply ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("name") ("_order"))))))))) ((((unsupported)).apply ("AlterUniqueTogether") ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("id") ("_order"))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoperation)) ((xextra_option)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xoperation)))))
                            seq
                              xafter.write (((unsupported)).apply ((xModelState)) ("testapp") ("Author") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (200))))) ((((unsupported)).apply ("book") (((((xmodels).xForeignKey)).apply ("otherapp.Book") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ("order_with_respect_to") ("book") ((xextra_option)))))
                              xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xbook)) (((xself).xauthor_with_book)))) ((((unsupported)).apply (((xself).xbook)) ((xafter)))))
                              bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                              bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AlterOrderWithRespectTo") ((xoperation)))))
                xtest_alter_model_managers.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xother_pony)))) ((((unsupported)).apply (((xself).xother_pony_food)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterModelManagers"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("pony"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xmanagers)))) ((((unsupported)).apply ("food_qs") ("food_mgr") ("food_mgr_kwargs"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xmanagers)) (1))) (1)).xargs)) ((((unsupported)).apply ("a") ("b") (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ("otherapp"))) (0)).xoperations)) (0)).xmanagers)) (2))) (1)).xargs)) ((((unsupported)).apply ("x") ("y") (3) (4))))
                xtest_swappable_first_inheritance.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xcustom_user)) (((xself).xaardvark)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("thirdapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (0) ("CustomUser"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (1) ("Aardvark"))
                xtest_default_related_name_option.write
                  [xself]
                    memory > xaltered_model_state
                    memory > xchanges
                    memory > xmodel_state
                    seq > @
                      seq
                        xmodel_state.write (((unsupported)).apply ((xModelState)) ("app") ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ("default_related_name") ("related_name"))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xmodel_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("model") ((((unsupported)).apply ("default_related_name") ("related_name"))))
                        xaltered_model_state.write (((xModelState)).apply ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xmodel_state)))) ((((unsupported)).apply ((xaltered_model_state)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("AlterModelOptions"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("model") ((((unsupported)).apply)))
                xtest_swappable_first_setting.write
                  [xself]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xcustom_user_no_inherit)) (((xself).xaardvark)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("thirdapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("thirdapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (0) ("CustomUser"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("thirdapp") (0) (1) ("Aardvark"))
                xtest_bases_first.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xaardvark_based_on_author)) (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Aardvark"))
                xtest_bases_first_mixed_case_app_label.write
                  [xself]
                    memory > xchanges
                    memory > xapp_label
                    seq > @
                      seq
                        xapp_label.write "MiXedCaseApp"
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((xModelState)).apply ((xapp_label)) ("owner") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((xModelState)).apply ((xapp_label)) ("place") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("owner") (((((xmodels).xForeignKey)).apply ("MiXedCaseApp.owner") (((xmodels).xCASCADE)))))))))) ((((unsupported)).apply ((xModelState)) ((xapp_label)) ("restaurant") ((((unsupported)).apply)) ((((unsupported)).apply ("MiXedCaseApp.place"))))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ((xapp_label)) (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ((xapp_label)) (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ((xapp_label)) (0) (0) ("owner"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ((xapp_label)) (0) (1) ("place"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ((xapp_label)) (0) (2) ("restaurant"))
                xtest_multiple_bases.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xchanges
                    memory > xE
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xA.write (((xModelState)).apply ("app") ("A") ((((unsupported)).apply ((((unsupported)).apply ("a_id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xB.write (((xModelState)).apply ("app") ("B") ((((unsupported)).apply ((((unsupported)).apply ("b_id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xC.write (((unsupported)).apply ((xModelState)) ("app") ("C") ((((unsupported)).apply)) ((((unsupported)).apply ("app.A") ("app.B"))))
                        xD.write (((unsupported)).apply ((xModelState)) ("app") ("D") ((((unsupported)).apply)) ((((unsupported)).apply ("app.A") ("app.B"))))
                        xE.write (((unsupported)).apply ((xModelState)) ("app") ("E") ((((unsupported)).apply)) ((((unsupported)).apply ("app.A") ("app.B"))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xD)) ((xE)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("CreateModel") ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("A"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("B"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (2) ("C"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (3) ("D"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (4) ("E"))
                xtest_proxy_bases_first.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        unsupported
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xauthor_proxy)) (((xself).xauthor_proxy_proxy)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("AuthorProxy"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("AAuthorProxyProxy"))
                xtest_pk_fk_included.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply (((xself).xaardvark_pk_fk_author)) (((xself).xauthor_name)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("Aardvark"))
                xtest_first_dependency.write
                  [xself]
                    memory > xloader
                    memory > xautodetector
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply)))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xbook_migrations_fk)))))
                        (((unsupported)).apply (((xafter).xreal_apps)) ((((unsupported)).apply ("migrations"))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)))
                        xchanges.write (((unsupported)).apply (((xautodetector).x_detect_changes)) (((xloader).xgraph)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Book"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("__first__"))))))
                xtest_last_dependency.write
                  [xself]
                    memory > xloader
                    memory > xautodetector
                    memory > xbefore
                    memory > xafter
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xbefore.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply)))
                        xafter.write ((((xself).xmake_project_state)).apply ((((unsupported)).apply (((xself).xbook_migrations_fk)))))
                        (((unsupported)).apply (((xafter).xreal_apps)) ((((unsupported)).apply ("migrations"))))
                        xautodetector.write (((xMigrationAutodetector)).apply ((xbefore)) ((xafter)))
                        xchanges.write (((unsupported)).apply (((xautodetector).x_detect_changes)) (((xloader).xgraph)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("otherapp") (0) (0) ("Book"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))))
                xtest_alter_fk_before_model_deletion.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)) (((xself).xpublisher_with_author)))) ((((unsupported)).apply (((xself).xaardvark_testapp)) (((xself).xpublisher_with_aardvark_author)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel") ("AlterField") ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Aardvark"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (1) ("author"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (2) ("Author"))
                xtest_fk_dependency_other_app.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_name)) (((xself).xbook)))) ((((unsupported)).apply (((xself).xauthor_with_book)) (((xself).xbook)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("book"))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("otherapp") ("__first__"))))))
                xtest_alter_field_to_fk_dependency_other_app.write
                  [xself]
                    memory > xchanges
                    seq > @
                      seq
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook_with_no_author_fk)))) ((((unsupported)).apply (((xself).xauthor_empty)) (((xself).xbook)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("otherapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ("AlterField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("otherapp") (0) ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("__first__"))))))
                xtest_circular_dependency_mixed_addcreate.write
                  [xself]
                    memory > xcountry
                    memory > xchanges
                    memory > xperson
                    memory > xapackage
                    memory > xaddress
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xaddress.write (((xModelState)).apply ("a") ("Address") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("country") (((((xmodels).xForeignKey)).apply ("b.DeliveryCountry") (((xmodels).xCASCADE)))))))))
                        xperson.write (((xModelState)).apply ("a") ("Person") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xapackage.write (((xModelState)).apply ("b") ("APackage") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("person") (((((xmodels).xForeignKey)).apply ("a.Person") (((xmodels).xCASCADE)))))))))
                        xcountry.write (((xModelState)).apply ("b") ("DeliveryCountry") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xaddress)) ((xperson)) ((xapackage)) ((xcountry)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("a") (2))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("b") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (1) ((((unsupported)).apply ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("b") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel"))))
                xtest_circular_dependency_swappable.write
                  [xself]
                    memory > xchanges
                    memory > xaddress
                    memory > xtenant
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          seq
                            xtenant.write (((unsupported)).apply ((xModelState)) ("a") ("Tenant") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("primary_address") (((((xmodels).xForeignKey)).apply ("b.Address") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ((xAbstractBaseUser)))))
                            xaddress.write (((xModelState)).apply ("b") ("Address") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("tenant") (((((xmodels).xForeignKey)).apply (((xsettings).xAUTH_USER_MODEL)) (((xmodels).xCASCADE)))))))))
                            xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xaddress)) ((xtenant)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("a") (2))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (1) ((((unsupported)).apply ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("a") (1) ((((unsupported)).apply ((((unsupported)).apply ("a") ("auto_1"))) ((((unsupported)).apply ("b") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("b") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("b") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("b") (0) ((((unsupported)).apply ((((unsupported)).apply ("__setting__") ("AUTH_USER_MODEL"))))))
                xtest_circular_dependency_swappable2.write
                  [xself]
                    memory > xchanges
                    memory > xaddress
                    memory > xtenant
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          seq
                            xaddress.write (((xModelState)).apply ("a") ("Address") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("tenant") (((((xmodels).xForeignKey)).apply (((xsettings).xAUTH_USER_MODEL)) (((xmodels).xCASCADE)))))))))
                            xtenant.write (((unsupported)).apply ((xModelState)) ("b") ("Tenant") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("primary_address") (((((xmodels).xForeignKey)).apply ("a.Address") (((xmodels).xCASCADE)))))))) ((((unsupported)).apply ((xAbstractBaseUser)))))
                            xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xaddress)) ((xtenant)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("a") (2))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (1) ((((unsupported)).apply ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("a") (1) ((((unsupported)).apply ((((unsupported)).apply ("__setting__") ("AUTH_USER_MODEL"))) ((((unsupported)).apply ("a") ("auto_1"))))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("b") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("b") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("b") (0) ((((unsupported)).apply ((((unsupported)).apply ("a") ("auto_1"))))))
                xtest_circular_dependency_swappable_self.write
                  [xself]
                    memory > xchanges
                    memory > xperson
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          seq
                            xperson.write (((xModelState)).apply ("a") ("Person") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("parent1") ((((unsupported)).apply (((xmodels).xForeignKey)) (((xsettings).xAUTH_USER_MODEL)) (((xmodels).xCASCADE)) ("children"))))))))
                            xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xperson)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply ("CreateModel"))))
                        bogusForceDataize.write ((((xself).xassertMigrationDependencies)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply)))
                xtest_swappable_circular_multi_mti.write
                  [xself]
                    memory > xchild
                    memory > xuser
                    memory > xchanges
                    memory > xparent
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xapps).xget_swappable_settings_name)))))
                          seq
                            xparent.write (((xModelState)).apply ("a") ("Parent") ((((unsupported)).apply ((((unsupported)).apply ("user") (((((xmodels).xForeignKey)).apply (((xsettings).xAUTH_USER_MODEL)) (((xmodels).xCASCADE)))))))))
                            xchild.write (((unsupported)).apply ((xModelState)) ("a") ("Child") ((((unsupported)).apply)) ((((unsupported)).apply ("a.Parent"))))
                            xuser.write (((unsupported)).apply ((xModelState)) ("a") ("User") ((((unsupported)).apply)) ((((unsupported)).apply ((xAbstractBaseUser)) ("a.Child"))))
                            xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xparent)) ((xchild)) ((xuser)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("a") (0) ((((unsupported)).apply ("CreateModel") ("CreateModel") ("CreateModel") ("AddField"))))
                xtest_add_blank_textfield_and_charfield.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_with_biography_blank)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertOperationAttributes)).apply ((xchanges)) ("testapp") (0) (0))
                xtest_add_non_blank_textfield_and_charfield.write
                  [xself xmocked_ask_method]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_with_biography_non_blank)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmocked_ask_method).xcall_count)) (2))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("AddField") ("AddField"))))
                        bogusForceDataize.write ((((xself).xassertOperationAttributes)).apply ((xchanges)) ("testapp") (0) (0))
                xtest_mti_inheritance_model_removal.write
                  [xself]
                    memory > xAnimal
                    memory > xDog
                    memory > xchanges
                    seq > @
                      seq
                        xAnimal.write (((xModelState)).apply ("app") ("Animal") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))
                        xDog.write (((unsupported)).apply ((xModelState)) ("app") ("Dog") ((((unsupported)).apply)) ((((unsupported)).apply ("app.Animal"))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply ((xAnimal)) ((xDog)))) ((((unsupported)).apply ((xAnimal)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("DeleteModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("Dog"))
                xtest_add_model_with_field_removed_from_base_model.write
                  [xself]
                    memory > xbefore
                    memory > xchanges
                    memory > xafter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbefore.write (((unsupported)).apply ((((xModelState)).apply ("app") ("readable") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))))))
                        xafter.write (((unsupported)).apply ((((xModelState)).apply ("app") ("readable") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))) ((((unsupported)).apply ((xModelState)) ("app") ("book") ((((unsupported)).apply ((((unsupported)).apply ("title") ((((unsupported)).apply (((xmodels).xCharField)) (200))))))) ((((unsupported)).apply ("app.readable"))))))
                        xchanges.write ((((xself).xget_changes)).apply ((xbefore)) ((xafter)))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("app") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("app") (0) ((((unsupported)).apply ("RemoveField") ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (0) ("title") ("readable"))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("app") (0) (1) ("book"))
                xtest_parse_number.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("no_number") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("0001_initial") (1))) ((((unsupported)).apply ("0002_model3") (2))) ((((unsupported)).apply ("0002_auto_20380101_1112") (2))) ((((unsupported)).apply ("0002_squashed_0003") (3))) ((((unsupported)).apply ("0002_model2_squashed_0003_other4") (3))) ((((unsupported)).apply ("0002_squashed_0003_squashed_0004") (4))) ((((unsupported)).apply ("0002_model2_squashed_0003_other4_squashed_0005_other6") (5))) ((((unsupported)).apply ("0002_custom_name_20380101_1112_squashed_0003_model") (3))) ((((unsupported)).apply ("2_squashed_4") (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration_name)) ((xexpected_number)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmigration_name)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xMigrationAutodetector).xparse_number)).apply ((xmigration_name)))) ((xexpected_number)))
                xtest_add_custom_fk_with_hardcoded_to.write
                  [xself]
                    memory > xbook_hardcoded_fk_to
                    memory > xdeconstruct
                    memory > xchanges
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xForeignKey)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("to"))) ("testapp.Author"))
                                    bogusForceDataize.write ((((xsuper).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                            xdeconstruct.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((xsuper).xdeconstruct)))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("to"))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                        xbook_hardcoded_fk_to.write (((xModelState)).apply ("testapp") ("Book") ((((unsupported)).apply ((((unsupported)).apply ("author") ((((unsupported)).apply ((xHardcodedForeignKey)) (((xmodels).xCASCADE)))))))))
                        xchanges.write ((((xself).xget_changes)).apply ((((unsupported)).apply (((xself).xauthor_empty)))) ((((unsupported)).apply (((xself).xauthor_empty)) ((xbook_hardcoded_fk_to)))))
                        bogusForceDataize.write ((((xself).xassertNumberMigrations)).apply ((xchanges)) ("testapp") (1))
                        bogusForceDataize.write ((((xself).xassertOperationTypes)).apply ((xchanges)) ("testapp") (0) ((((unsupported)).apply ("CreateModel"))))
                        (((unsupported)).apply (((xself).xassertOperationAttributes)) ((xchanges)) ("testapp") (0) (0) ("Book"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_operations.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply)
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xmigration).xsuggest_name).xstartswith)).apply ("auto_"))) (TRUE))
                xtest_no_operations_initial.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    memory > xinitial
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          seq
                            xinitial.write TRUE
                            xoperations.write (((unsupported)).apply)
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("initial"))
                xtest_single_operation.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person") ((((unsupported)).apply)))))
                        xmigration.write (((xMigration)).apply ("0001_initial") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("person"))
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply (((((xmigrations).xDeleteModel)).apply ("Person"))))
                        xmigration.write (((xMigration)).apply ("0002_initial") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("delete_person"))
                xtest_single_operation_long_name.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) (("A".mul 53)) ((((unsupported)).apply)))))
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) (("a".mul 53)))
                xtest_two_operations.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person") ((((unsupported)).apply)))) (((((xmigrations).xDeleteModel)).apply ("Animal"))))
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("person_delete_animal"))
                xtest_two_create_models.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Animal") ((((unsupported)).apply)))))
                        xmigration.write (((xMigration)).apply ("0001_initial") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("person_animal"))
                xtest_two_create_models_with_initial_true.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    memory > xinitial
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          seq
                            xinitial.write TRUE
                            xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Animal") ((((unsupported)).apply)))))
                        xmigration.write (((xMigration)).apply ("0001_initial") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("initial"))
                xtest_many_operations_suffix.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person1") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person2") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person3") ((((unsupported)).apply)))) (((((xmigrations).xDeleteModel)).apply ("Person4"))) (((((xmigrations).xDeleteModel)).apply ("Person5"))))
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("person1_person2_person3_delete_person4_and_more"))
                xtest_operation_with_no_suggested_name.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply ((((unsupported)).apply (((xmigrations).xCreateModel)) ("Person") ((((unsupported)).apply)))) (((((xmigrations).xRunSQL)).apply ("SELECT 1 FROM person;"))))
                        xmigration.write (((xMigration)).apply ("some_migration") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xmigration).xsuggest_name).xstartswith)).apply ("auto_"))) (TRUE))
                xtest_none_name.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    memory > xsuggest_name
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply (((((xmigrations).xRunSQL)).apply ("SELECT 1 FROM person;"))))
                        xmigration.write (((xMigration)).apply ("0001_initial") ("test_app"))
                        xsuggest_name.write ((xmigration).xsuggest_name)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xsuggest_name).xstartswith)).apply ("auto_"))) (TRUE))
                xtest_none_name_with_initial_true.write
                  [xself]
                    memory > xoperations
                    memory > xmigration
                    memory > xinitial
                    seq > @
                      seq
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          seq
                            xinitial.write TRUE
                            xoperations.write (((unsupported)).apply (((((xmigrations).xRunSQL)).apply ("SELECT 1 FROM person;"))))
                        xmigration.write (((xMigration)).apply ("0001_initial") ("test_app"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration).xsuggest_name)) ("initial"))
                xtest_auto.write
                  [xself]
                    memory > xmigration
                    memory > xsuggest_name
                    seq > @
                      seq
                        xmigration.write ((((xmigrations).xMigration)).apply ("0001_initial") ("test_app"))
                        xsuggest_name.write ((xmigration).xsuggest_name)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xsuggest_name).xstartswith)).apply ("auto_"))) (TRUE))