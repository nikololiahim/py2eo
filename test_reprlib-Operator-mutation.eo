memory > xarray
memory > xC
memory > xlist
memory > ximportlib
memory > xException
memory > xClassWithRepr
memory > xqux
memory > xdirnames
memory > xfrozenset
memory > xstr
memory > xdeque
memory > xbar
memory > xrange
memory > xareallylongpackageandmodulenametotestreprtruncation
memory > xverbose
memory > xClassWithFailingRepr
memory > xbaz
memory > xp
memory > xMyContainer
memory > xopen
memory > xprint
memory > xdirpath
memory > xset
memory > xrepr
memory > xx
memory > xi
memory > xMyContainer2
memory > xsys
memory > xfilenames
memory > xRepr
memory > xos
memory > xcreate_empty_file
memory > xgetattr
memory > xid
memory > xMyContainer3
memory > xrecursive_repr
memory > xname
memory > xshutil
memory > xunittest
memory > xstaticmethod
memory > xhash
memory > xmap
memory > xfoo
memory > xlen
memory > xdict
memory > xclassmethod
memory > xfp
memory > x__name__
[] > test_reprlib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_class
        memory > xsetUp
        memory > xappend
        memory > xlongname
        memory > xtest_builtin_function
        memory > xtest_frozenset
        memory > x__repr__
        memory > xtest_assigned_attributes
        memory > xtest_method
        memory > xtest_descriptors
        memory > xtest_tuple
        memory > xtest_numbers
        memory > xtest_type
        memory > xtest_nesting
        memory > xtest_range
        memory > xtest_module
        memory > xtest_object
        memory > xr
        memory > xtest_cell
        memory > xtest_container
        memory > xtest_lambda
        memory > xtest_recursive_repr
        memory > xwrapped
        memory > xwrite_file
        memory > xtest_set_literal
        memory > x__init__
        memory > xtest_unsortable
        memory > xtest_instance
        memory > xwrapper
        memory > xtest_string
        memory > xnestedTuple
        memory > xtearDown
        memory > x_check_path_limitations
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xnestedTuple.write
              [xnesting]
                memory > xt
                seq > @
                  seq
                    xt.write (((unsupported)).apply)
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((xnesting)))))
                      xt.write (((unsupported)).apply ((xt)))
                    (((unsupported)).apply ((xt)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_string.write
                  [xself]
                    memory > xexpected
                    memory > xeq
                    memory > xs
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ("abc"))) ("'abc'"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ("abcdefghijklmnop"))) ("'abcdefghijklmnop'"))
                        xs.write (("a".mul 30).sub ("b".mul 30))
                        xexpected.write (((((unsupported)).apply ((((xrepr)).apply ((xs)))) ((((unsupported)).apply (13)))).sub "...").sub (((unsupported)).apply ((((xrepr)).apply ((xs)))) ((((unsupported)).apply ((14.neg))))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xs)))) ((xexpected)))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ("\"'"))) ((((xrepr)).apply ("\"'"))))
                        xs.write (("\"".mul 30).sub ("'".mul 100))
                        xexpected.write (((((unsupported)).apply ((((xrepr)).apply ((xs)))) ((((unsupported)).apply (13)))).sub "...").sub (((unsupported)).apply ((((xrepr)).apply ((xs)))) ((((unsupported)).apply ((14.neg))))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xs)))) ((xexpected)))
                xtest_tuple.write
                  [xself]
                    memory > xeq
                    memory > xexpected
                    memory > xt3
                    memory > xr2
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1))))) ("(1,)"))
                        xt3.write (((unsupported)).apply (1) (2) (3))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xt3)))) ("(1, 2, 3)"))
                        xr2.write (((xRepr)).apply)
                        (((unsupported)).apply (((xr2).xmaxtuple)) (2))
                        xexpected.write ((((unsupported)).apply ((((xrepr)).apply ((xt3)))) ((((unsupported)).apply ((2.neg))))).sub "...)")
                        bogusForceDataize.write (((xeq)).apply (((((xr2).xrepr)).apply ((xt3)))) ((xexpected)))
                xtest_container.write
                  [xself]
                    memory > xd
                    memory > xeq
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply)))) ("()"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1))))) ("(1,)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3))))) ("(1, 2, 3)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))) ("(1, 2, 3, 4, 5, 6)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))) ("(1, 2, 3, 4, 5, 6, ...)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply)))) ("[]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1))))) ("[1]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3))))) ("[1, 2, 3]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))) ("[1, 2, 3, 4, 5, 6]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))) ("[1, 2, 3, 4, 5, 6, ...]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xset)).apply ((((unsupported)).apply)))))) ("set()"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xset)).apply ((((unsupported)).apply (1))))))) ("{1}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xset)).apply ((((unsupported)).apply (1) (2) (3))))))) ("{1, 2, 3}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))) ("{1, 2, 3, 4, 5, 6}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))))) ("{1, 2, 3, 4, 5, 6, ...}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply)))))) ("frozenset()"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1))))))) ("frozenset({1})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3))))))) ("frozenset({1, 2, 3})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))) ("frozenset({1, 2, 3, 4, 5, 6})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))))) ("frozenset({1, 2, 3, 4, 5, 6, ...})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xdeque)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))))) ("deque([1, 2, 3, 4, 5, 6, ...])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply)))) ("{}"))
                        xd.write (((unsupported)).apply ("alice") (1) ("bob") (2) ("charles") (3) ("dave") (4))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xd)))) ("{'alice': 1, 'bob': 2, 'charles': 3, 'dave': 4}"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("arthur"))) (1))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xd)))) ("{'alice': 1, 'arthur': 1, 'bob': 2, 'charles': 3, ...}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i"))))) ("array('i')"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1))))))) ("array('i', [1])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1) (2))))))) ("array('i', [1, 2])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1) (2) (3))))))) ("array('i', [1, 2, 3])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1) (2) (3) (4))))))) ("array('i', [1, 2, 3, 4])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1) (2) (3) (4) (5))))))) ("array('i', [1, 2, 3, 4, 5])"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xarray)).apply ("i") ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))) ("array('i', [1, 2, 3, 4, 5, ...])"))
                xtest_set_literal.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1))))) ("{1}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3))))) ("{1, 2, 3}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))) ("{1, 2, 3, 4, 5, 6}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))) ("{1, 2, 3, 4, 5, 6, ...}"))
                xtest_frozenset.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1))))))) ("frozenset({1})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3))))))) ("frozenset({1, 2, 3})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))) ("frozenset({1, 2, 3, 4, 5, 6})"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xfrozenset)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))))) ("frozenset({1, 2, 3, 4, 5, 6, ...})"))
                xtest_numbers.write
                  [xself]
                    memory > xn
                    memory > xeq
                    memory > xexpected
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply (123))) ((((xrepr)).apply (123))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply (123))) ((((xrepr)).apply (123))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((1.0.div 3)))) ((((xrepr)).apply ((1.0.div 3)))))
                        xn.write (((unsupported)).apply (10) (100))
                        xexpected.write (((((unsupported)).apply ((((xrepr)).apply ((xn)))) ((((unsupported)).apply (18)))).sub "...").sub (((unsupported)).apply ((((xrepr)).apply ((xn)))) ((((unsupported)).apply ((19.neg))))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xn)))) ((xexpected)))
                xtest_instance.write
                  [xself]
                    memory > xexpected
                    memory > xeq
                    memory > xi1
                    memory > xi3
                    memory > xs
                    memory > xi2
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        xi1.write (((xClassWithRepr)).apply ("a"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xi1)))) ((((xrepr)).apply ((xi1)))))
                        xi2.write (((xClassWithRepr)).apply (("x".mul 1000)))
                        xexpected.write (((((unsupported)).apply ((((xrepr)).apply ((xi2)))) ((((unsupported)).apply (13)))).sub "...").sub (((unsupported)).apply ((((xrepr)).apply ((xi2)))) ((((unsupported)).apply ((14.neg))))))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xi2)))) ((xexpected)))
                        xi3.write (((xClassWithFailingRepr)).apply)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((xi3)))) (("<ClassWithFailingRepr instance at %#x>".mod (((xid)).apply ((xi3))))))
                        xs.write (((xr)).apply ((xClassWithFailingRepr)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ("<class "))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xendswith)).apply (">"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xs).xfind)).apply ("..."))) ((((unsupported)).apply (12) (13))))
                xtest_lambda.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((xrepr)).apply ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xstartswith)).apply ("<function ReprTests.test_lambda.<locals>.<lambda"))) ((xr)))
                xtest_builtin_function.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply ((xhash)))) ("<built-in function hash>"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply (("".xsplit))).xstartswith)).apply ("<built-in method split of str object at 0x"))))
                xtest_range.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply ((((xrange)).apply (1))))) ("range(0, 1)"))
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply ((((xrange)).apply (1) (2))))) ("range(1, 2)"))
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply ((((xrange)).apply (1) (4) (3))))) ("range(1, 4, 3)"))
                xtest_nesting.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))))))))))))))) ("[[[[[[[]]]]]]]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))))))))))))))))) ("[[[[[[[...]]]]]]]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xnestedTuple)).apply (6))))) ("(((((((),),),),),),)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((xnestedTuple)).apply (7))))) ("(((((((...),),),),),),)"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((xnestedTuple)).apply (5))) ((((xnestedTuple)).apply (5))))))) ("{((((((),),),),),): ((((((),),),),),)}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((xnestedTuple)).apply (6))) ((((xnestedTuple)).apply (6))))))) ("{((((((...),),),),),): ((((((...),),),),),)}"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))))))))))))))) ("[[[[[[{}]]]]]]"))
                        bogusForceDataize.write (((xeq)).apply ((((xr)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))))))))))))))))) ("[[[[[[[...]]]]]]]"))
                xtest_cell.write
                  [xself]
                    memory > xx
                    memory > xget_cell
                    seq > @
                      seq
                        xget_cell.write
                          []
                            memory > xx
                            memory > xinner
                            seq > @
                              seq
                                xx.write 42
                                xinner.write
                                  []
                                    seq > @
                                      (((unsupported)).apply ((xx)))
                                (((unsupported)).apply ((xinner)))
                        xx.write (((unsupported)).apply (((((xget_cell)).apply).x__closure__)) (0))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xx)))) ("<cell at 0x[0-9A-Fa-f]-: int object at 0x[0-9A-Fa-f]->"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xr)).apply ((xx)))) ("<cell at 0x.*....*>"))
                xtest_descriptors.write
                  [xself]
                    memory > xfoo
                    memory > xeq
                    memory > xx
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply (((xdict).xitems)))) ("<method 'items' of 'dict' objects>"))
                        (((unsupported)).apply)
                          xfoo.write
                            [xcls]
                              seq > @
                        xx.write (((xstaticmethod)).apply (((xC).xfoo)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((xx))).xstartswith)).apply ("<staticmethod object at 0x"))))
                        xx.write (((xclassmethod)).apply (((xC).xfoo)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((xx))).xstartswith)).apply ("<classmethod object at 0x"))))
                xtest_unsortable.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xz
                    seq > @
                      seq
                        xx.write (((xset)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xy.write (((xfrozenset)).apply ((xx)))
                        xz.write (((unsupported)).apply ((((unsupported)).apply)) (1) ((((unsupported)).apply)) (2))
                        bogusForceDataize.write (((xr)).apply ((xx)))
                        bogusForceDataize.write (((xr)).apply ((xy)))
                        bogusForceDataize.write (((xr)).apply ((xz)))
            xwrite_file.write
              [xpath xtext]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpath)) ("w") ("ASCII"))) ((xfp)))
                    bogusForceDataize.write ((((xfp).xwrite)).apply ((xtext)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xlongname.write "areallylongpackageandmodulenametotestreprtruncation"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xpkgname)) ((((((xos).xpath).xjoin)).apply (((xself).xlongname)))))
                        (((unsupported)).apply (((xself).xsubpkgname)) ((((((xos).xpath).xjoin)).apply (((xself).xlongname)) (((xself).xlongname)))))
                        (((unsupported)).apply (((xshutil).xrmtree)) (((xself).xpkgname)) (TRUE))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xpkgname)))
                        bogusForceDataize.write (((xcreate_empty_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xpkgname)) ("__init__.py"))))
                        (((unsupported)).apply (((xshutil).xrmtree)) (((xself).xsubpkgname)) (TRUE))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xsubpkgname)))
                        bogusForceDataize.write (((xcreate_empty_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ("__init__.py"))))
                        (((unsupported)).apply (((xself).xhere)) (((((xos).xgetcwd)).apply)))
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) (((xself).xhere)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                xtearDown.write
                  [xself]
                    memory > xactions
                    seq > @
                      seq
                        xactions.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdirpath)) ((xdirnames)) ((xfilenames)))) (((((xos).xwalk)).apply (((xself).xpkgname)))))
                          (((unsupported)).apply ((xname)) (((xdirnames).sub (xfilenames))))
                            bogusForceDataize.write ((((xactions).xappend)).apply ((((((xos).xpath).xjoin)).apply ((xdirpath)) ((xname)))))
                        bogusForceDataize.write ((((xactions).xappend)).apply (((xself).xpkgname)))
                        bogusForceDataize.write ((((xactions).xsort)).apply)
                        bogusForceDataize.write ((((xactions).xreverse)).apply)
                        (((unsupported)).apply ((xp)) ((xactions)))
                          (((((xos).xpath).xisdir)).apply ((xp))).if
                            bogusForceDataize.write ((((xos).xrmdir)).apply ((xp)))
                            bogusForceDataize.write ((((xos).xremove)).apply ((xp)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) (0))))))
                x_check_path_limitations.write
                  [xself xmodule_name]
                    memory > xcached_path_len
                    memory > xsource_path_len
                    seq > @
                      seq
                        xsource_path_len.write (((xlen)).apply (((xself).xhere)))
                        (((unsupported)).apply ((xsource_path_len)) ((2.mul ((((xlen)).apply (((xself).xlongname))).sub 1))))
                        (((unsupported)).apply ((xsource_path_len)) ((((((xlen)).apply ((xmodule_name))).sub 1).sub (((xlen)).apply (".py")))))
                        xcached_path_len.write (((xsource_path_len).sub (((xlen)).apply ((((((ximportlib).xutil).xcache_from_source)).apply ("x.py"))))).sub (((xlen)).apply ("x.py")))
                        ((((xos).xname).eq "nt").and ((xcached_path_len).geq 258)).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("test paths too long (%d characters) for Windows' 260 character limit".mod (xcached_path_len))))
                          ((((xos).xname).eq "nt").and (xverbose)).if
                            bogusForceDataize.write (((xprint)).apply ("cached_path_len =") ((xcached_path_len)))
                xtest_module.write
                  [xself]
                    memory > xmodule
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).x_check_path_limitations)).apply (((xself).xpkgname)))
                        bogusForceDataize.write (((xcreate_empty_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ((((xself).xpkgname).sub ".py")))))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                        (((unsupported)).apply)
                        xmodule.write (xareallylongpackageandmodulenametotestreprtruncation)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xmodule)))) (("<module %r from %r>".mod (((unsupported)).apply (((xmodule).x__name__)) (((xmodule).x__file__))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xsys)))) ("<module 'sys' (built-in)>"))
                xtest_type.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_path_limitations)).apply ("foo"))
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xwrite_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ("foo.py"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((xeq)).apply ((((xrepr)).apply (((xfoo).xfoo)))) (("<class '%s.foo'>".mod ((xfoo).x__name__))))
                xtest_object.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xtest_class.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_path_limitations)).apply ("bar"))
                        bogusForceDataize.write (((xwrite_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ("bar.py"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xbar).xbar)))) (("<class '%s.bar'>".mod ((xbar).x__name__))))
                xtest_instance.write
                  [xself]
                    memory > xibaz
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_path_limitations)).apply ("baz"))
                        bogusForceDataize.write (((xwrite_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ("baz.py"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                        (((unsupported)).apply)
                        xibaz.write ((((xbaz).xbaz)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((xibaz))).xstartswith)).apply (("<%s.baz object at 0x".mod ((xbaz).x__name__))))))
                xtest_method.write
                  [xself]
                    memory > xiqux
                    memory > xeq
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_check_path_limitations)).apply ("qux"))
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xwrite_file)).apply ((((((xos).xpath).xjoin)).apply (((xself).xsubpkgname)) ("qux.py"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                        (((unsupported)).apply)
                        xr.write (((xrepr)).apply ((((xqux).xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa).xamethod)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xstartswith)).apply ("<function aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod"))) ((xr)))
                        xiqux.write ((((xqux).xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)).apply)
                        xr.write (((xrepr)).apply (((xiqux).xamethod)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xstartswith)).apply (("<bound method aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod of <%s.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa object at 0x".mod (((unsupported)).apply (((xqux).x__name__))))))) ((xr)))
                xtest_builtin_function.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xs]
                    seq > @
                      (((unsupported)).apply (((xself).xs)) ((xs)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("ClassWithRepr(%r)".mod ((xself).xs))))
            (((unsupported)).apply)
              x__repr__.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((xException)).apply ("This should be caught by Repr.repr_instance"))))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xvalues]
                    seq > @
                      (((unsupported)).apply (((xself).xvalues)) ((((xlist)).apply ((xvalues)))))
                xappend.write
                  [xself xvalue]
                    seq > @
                      bogusForceDataize.write (((((xself).xvalues).xappend)).apply ((xvalue)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((("<".sub (((", ".xjoin)).apply ((((xmap)).apply ((xstr)) (((xself).xvalues)))))).sub ">")))
            (((unsupported)).apply ((xMyContainer)))
              x__repr__.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply ((("<".sub (((", ".xjoin)).apply ((((xmap)).apply ((xstr)) (((xself).xvalues)))))).sub ">")))
            (((unsupported)).apply)
              seq
                x__repr__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                xwrapped.write (x__repr__)
                xwrapper.write (((((xrecursive_repr)).apply)).apply ((xwrapped)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_recursive_repr.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xMyContainer)).apply ((((xlist)).apply ("abcde"))))
                        bogusForceDataize.write ((((xm).xappend)).apply ((xm)))
                        bogusForceDataize.write ((((xm).xappend)).apply ("x"))
                        bogusForceDataize.write ((((xm).xappend)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xm)))) ("<a, b, c, d, e, ..., x, ...>"))
                        xm.write (((xMyContainer2)).apply ((((xlist)).apply ("abcde"))))
                        bogusForceDataize.write ((((xm).xappend)).apply ((xm)))
                        bogusForceDataize.write ((((xm).xappend)).apply ("x"))
                        bogusForceDataize.write ((((xm).xappend)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xm)))) ("<a, b, c, d, e, ---, x, --->"))
                xtest_assigned_attributes.write
                  [xself]
                    memory > xwrapper
                    memory > xassigned
                    memory > xwrapped
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwrapped.write ((xMyContainer3).xwrapped)
                        xwrapper.write ((xMyContainer3).xwrapper)
                        (((unsupported)).apply ((xname)) ((xassigned)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xgetattr)).apply ((xwrapper)) ((xname)))) ((((xgetattr)).apply ((xwrapped)) ((xname)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)