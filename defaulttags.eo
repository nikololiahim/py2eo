memory > xmark_safe
memory > xLibrary
memory > xIfNode
memory > xContext
memory > xk
memory > xNode
memory > xreverse
memory > xTemplateSyntaxError
memory > xgroupby
memory > xround
memory > xvarlist
memory > xBLOCK_TAG_END
memory > xconditional_escape
memory > xNoReverseMatch
memory > xAttributeError
memory > xbit
memory > xtimezone
memory > xVARIABLE_TAG_END
memory > xdatetime
memory > xunused
memory > xVARIABLE_TAG_START
memory > xlist
memory > xpformat
memory > xenumerate
memory > xVerbatimNode
memory > xURLNode
memory > xValueError
memory > xVariableDoesNotExist
memory > xfrozenset
memory > xCycleNode
memory > xas_
memory > xstr
memory > xTemplateLiteral
memory > xLiteral
memory > xwarnings
memory > xTemplateIfParser
memory > xFILTER_SEPARATOR
memory > xForNode
memory > xparagraphs
memory > xrender_value_in_context
memory > xfunc
memory > xrest
memory > xFirstOfNode
memory > xWidthRatioNode
memory > xSpacelessNode
memory > xZeroDivisionError
memory > xtoken_kwargs
memory > xIfParser
memory > xkwarg_re
memory > xvalue
memory > xResetCycleNode
memory > xAutoEscapeControlNode
memory > x_
memory > xKeyError
memory > xwords
memory > xdate
memory > xDebugNode
memory > xnamedtuple
memory > xp
memory > xmax_value_expr
memory > xvar
memory > xCOMMENT_TAG_END
memory > xreversed
memory > xFilterNode
memory > xIfChangedNode
memory > xWithNode
memory > xCommentNode
memory > xSINGLE_BRACE_START
memory > xLoremNode
memory > xint
memory > xre
memory > xNodeList
memory > xrepr
memory > xsettings
memory > xhasattr
memory > xOverflowError
memory > xtag
memory > xnode
memory > xi
memory > xCOMMENT_TAG_START
memory > xsuper
memory > xLoadNode
memory > xsys
memory > xSINGLE_BRACE_END
memory > xarg
memory > xsorted
memory > xfloat
memory > xescape
memory > xargs
memory > xobj
memory > xstrip_spaces_between_tags
memory > xitem
memory > xval
memory > xgetattr
memory > xv
memory > xCsrfTokenNode
memory > xformat_html
memory > xRegroupNode
memory > xmax_width
memory > xNowNode
memory > xname
memory > xzip
memory > xcondition
memory > xnext
memory > xVARIABLE_ATTRIBUTE_SEPARATOR
memory > xkwargs
memory > xlen
memory > xdict
memory > xTemplateTagNode
memory > xthis_value_expr
memory > xBLOCK_TAG_START
memory > xTypeError
memory > xkey
[] > defaulttags
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlorem
        memory > xautoescape
        memory > xload_from_library
        memory > xdo_filter
        memory > x__iter__
        memory > xurl
        memory > xcycle
        memory > xregister
        memory > xdo_if
        memory > xspaceless
        memory > xrender
        memory > xchild_nodelists
        memory > xitertools_cycle
        memory > xfind_library
        memory > xmapping
        memory > xcreate_var
        memory > xdo_with
        memory > x__repr__
        memory > xdebug
        memory > xcomment
        memory > xverbatim
        memory > xifchanged
        memory > xdisplay
        memory > xdo_for
        memory > xGroupedResult
        memory > xeval
        memory > xresetcycle
        memory > x_get_context_stack_frame
        memory > xcsrf_token
        memory > xregroup
        memory > xreset
        memory > xnodelist
        memory > x__init__
        memory > xtemplatetag
        memory > xresolve_expression
        memory > xfirstof
        memory > xload
        memory > xerror_class
        memory > xnow
        memory > xwidthratio
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xregister.write (((xLibrary)).apply)
            (((unsupported)).apply ((xNode)))
              seq
                unsupported
                x__init__.write
                  [xself xsetting xnodelist]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsetting)) (((xself).xnodelist)))) ((((unsupported)).apply ((xsetting)) ((xnodelist)))))
                xrender.write
                  [xself xcontext]
                    memory > xold_setting
                    memory > xoutput
                    seq > @
                      seq
                        xold_setting.write ((xcontext).xautoescape)
                        (((unsupported)).apply (((xcontext).xautoescape)) (((xself).xsetting)))
                        xoutput.write (((((xself).xnodelist).xrender)).apply ((xcontext)))
                        (((unsupported)).apply (((xcontext).xautoescape)) ((xold_setting)))
                        ((xself).xsetting).if
                          (((unsupported)).apply ((((xmark_safe)).apply ((xoutput)))))
                          (((unsupported)).apply ((xoutput)))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply)
                xrender.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply)
                xrender.write
                  [xself xcontext]
                    memory > xcsrf_token
                    seq > @
                      seq
                        xcsrf_token.write ((((xcontext).xget)).apply ("csrf_token"))
                        (xcsrf_token).if
                          ((xcsrf_token).eq "NOTPROVIDED").if
                            (((unsupported)).apply ((((xformat_html)).apply (""))))
                            (((unsupported)).apply ((((xformat_html)).apply ("<input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"{}\">") ((xcsrf_token)))))
                          seq
                            ((xsettings).xDEBUG).if
                              bogusForceDataize.write ((((xwarnings).xwarn)).apply ("A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext."))
                            (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xcyclevars xvariable_name xsilent]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcyclevars)) ((xcyclevars)))
                        (((unsupported)).apply (((xself).xvariable_name)) ((xvariable_name)))
                        (((unsupported)).apply (((xself).xsilent)) ((xsilent)))
                xrender.write
                  [xself xcontext]
                    memory > xvalue
                    memory > xcycle_iter
                    seq > @
                      seq
                        (((unsupported)).apply ((xself)) (((xcontext).xrender_context))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xcontext).xrender_context)) ((xself)))) ((((xitertools_cycle)).apply (((xself).xcyclevars)))))
                        xcycle_iter.write (((unsupported)).apply (((xcontext).xrender_context)) ((xself)))
                        xvalue.write ((((((xnext)).apply ((xcycle_iter))).xresolve)).apply ((xcontext)))
                        ((xself).xvariable_name).if
                          bogusForceDataize.write ((((xcontext).xset_upward)).apply (((xself).xvariable_name)) ((xvalue)))
                        ((xself).xsilent).if
                          (((unsupported)).apply (""))
                        (((unsupported)).apply ((((xrender_value_in_context)).apply ((xvalue)) ((xcontext)))))
                xreset.write
                  [xself xcontext]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xcontext).xrender_context)) ((xself)))) ((((xitertools_cycle)).apply (((xself).xcyclevars)))))
            (((unsupported)).apply ((xNode)))
              xrender.write
                [xself xcontext]
                  memory > xoutput
                  seq > @
                    seq
                      (((xsettings).xDEBUG).not).if
                        (((unsupported)).apply (""))
                      (((unsupported)).apply)
                      xoutput.write (((unsupported)).apply ((((xescape)).apply ((((xpformat)).apply ((xval)))))) ((xval)) ((xcontext)))
                      bogusForceDataize.write ((((xoutput).xappend)).apply ("nn"))
                      bogusForceDataize.write ((((xoutput).xappend)).apply ((((xescape)).apply ((((xpformat)).apply (((xsys).xmodules)))))))
                      (((unsupported)).apply (((("".xjoin)).apply ((xoutput)))))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xfilter_expr xnodelist]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xfilter_expr)) (((xself).xnodelist)))) ((((unsupported)).apply ((xfilter_expr)) ((xnodelist)))))
                xrender.write
                  [xself xcontext]
                    memory > xoutput
                    seq > @
                      seq
                        xoutput.write (((((xself).xnodelist).xrender)).apply ((xcontext)))
                        (((unsupported)).apply ((((unsupported)).apply (((xcontext).xpush)) ((xoutput)))))
                          (((unsupported)).apply ((((((xself).xfilter_expr).xresolve)).apply ((xcontext)))))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xvariables xasvar]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xvars)) ((xvariables)))
                        (((unsupported)).apply (((xself).xasvar)) ((xasvar)))
                xrender.write
                  [xself xcontext]
                    memory > xvalue
                    memory > xfirst
                    seq > @
                      seq
                        xfirst.write ""
                        (((unsupported)).apply ((xvar)) (((xself).xvars)))
                          seq
                            xvalue.write (((unsupported)).apply (((xvar).xresolve)) ((xcontext)) (TRUE))
                            (xvalue).if
                              seq
                                xfirst.write (((xrender_value_in_context)).apply ((xvalue)) ((xcontext)))
                                (((unsupported)).apply)
                        ((xself).xasvar).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xasvar)))) ((xfirst)))
                            (((unsupported)).apply (""))
                        (((unsupported)).apply ((xfirst)))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply ("nodelist_loop") ("nodelist_empty"))
                x__init__.write
                  [xself xloopvars xsequence xis_reversed xnodelist_loop xnodelist_empty]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xloopvars)) (((xself).xsequence)))) ((((unsupported)).apply ((xloopvars)) ((xsequence)))))
                        (((unsupported)).apply (((xself).xis_reversed)) ((xis_reversed)))
                        (((unsupported)).apply (((xself).xnodelist_loop)) ((xnodelist_loop)))
                        (((unsupported)).apply ((xnodelist_empty)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xnodelist_empty)) ((((xNodeList)).apply)))
                          (((unsupported)).apply (((xself).xnodelist_empty)) ((xnodelist_empty)))
                x__repr__.write
                  [xself]
                    memory > xreversed_text
                    seq > @
                      seq
                        xreversed_text.write (((xself).xis_reversed).if " reversed" "")
                        (((unsupported)).apply (("<%s: for %s in %s, tail_len: %d%s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((((", ".xjoin)).apply (((xself).xloopvars)))) (((xself).xsequence)) ((((xlen)).apply (((xself).xnodelist_loop)))) ((xreversed_text))))))
                xrender.write
                  [xself xcontext]
                    memory > xnum_loopvars
                    memory > xlen_values
                    memory > xvalues
                    memory > xlen_item
                    memory > xpop_context
                    memory > xnodelist
                    memory > xunpacked_vars
                    memory > xloop_dict
                    memory > xunpack
                    memory > xparentloop
                    seq > @
                      seq
                        (((unsupported)).apply ("forloop") ((xcontext))).if
                          xparentloop.write (((unsupported)).apply ((xcontext)) ("forloop"))
                          xparentloop.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xcontext).xpush)).apply)))
                          seq
                            xvalues.write (((unsupported)).apply ((((xself).xsequence).xresolve)) ((xcontext)) (TRUE))
                            (((unsupported)).apply ((xvalues)) ("None: is there a None literal in the EO language?")).if
                              xvalues.write (((unsupported)).apply)
                            ((((xhasattr)).apply ((xvalues)) ("__len__")).not).if
                              xvalues.write (((xlist)).apply ((xvalues)))
                            xlen_values.write (((xlen)).apply ((xvalues)))
                            ((xlen_values).less 1).if
                              (((unsupported)).apply ((((((xself).xnodelist_empty).xrender)).apply ((xcontext)))))
                            xnodelist.write (((unsupported)).apply)
                            ((xself).xis_reversed).if
                              xvalues.write (((xreversed)).apply ((xvalues)))
                            xnum_loopvars.write (((xlen)).apply (((xself).xloopvars)))
                            xunpack.write ((xnum_loopvars).greater 1)
                            (((unsupported)).apply ((xloop_dict)) ((((unsupported)).apply ((xcontext)) ("forloop"))) ((((unsupported)).apply ("parentloop") ((xparentloop)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xitem)))) ((((xenumerate)).apply ((xvalues)))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("counter0"))) ((xi)))
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("counter"))) (((xi).add 1)))
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("revcounter"))) (((xlen_values).sub (xi))))
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("revcounter0"))) ((((xlen_values).sub (xi)).sub 1)))
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("first"))) (((xi).eq 0)))
                                (((unsupported)).apply ((((unsupported)).apply ((xloop_dict)) ("last"))) (((xi).eq ((xlen_values).sub 1))))
                                xpop_context.write FALSE
                                (xunpack).if
                                  seq
                                    (((unsupported)).apply ((xTypeError)))
                                      xlen_item.write (((xlen)).apply ((xitem)))
                                      xlen_item.write 1
                                    ((xnum_loopvars).neq (xlen_item)).if
                                      (((unsupported)).apply ((((xValueError)).apply (((("Need {} values to unpack in for loop; got {}. ".xformat)).apply ((xnum_loopvars)) ((xlen_item)))))))
                                    xunpacked_vars.write (((xdict)).apply ((((xzip)).apply (((xself).xloopvars)) ((xitem)))))
                                    xpop_context.write TRUE
                                    bogusForceDataize.write ((((xcontext).xupdate)).apply ((xunpacked_vars)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ((((unsupported)).apply (((xself).xloopvars)) (0))))) ((xitem)))
                                (((unsupported)).apply ((xnode)) (((xself).xnodelist_loop)))
                                  bogusForceDataize.write ((((xnodelist).xappend)).apply (((((xnode).xrender_annotated)).apply ((xcontext)))))
                                (xpop_context).if
                                  bogusForceDataize.write ((((xcontext).xpop)).apply)
                        (((unsupported)).apply ((((xmark_safe)).apply (((("".xjoin)).apply ((xnodelist)))))))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply ("nodelist_true") ("nodelist_false"))
                x__init__.write
                  [xself xnodelist_true xnodelist_false]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xnodelist_true)) (((xself).xnodelist_false)))) ((((unsupported)).apply ((xnodelist_true)) ((xnodelist_false)))))
                        (((unsupported)).apply (((xself).x_varlist)) ((xvarlist)))
                xrender.write
                  [xself xcontext]
                    memory > xcompare_to
                    memory > xnodelist_true_output
                    memory > xstate_frame
                    seq > @
                      seq
                        xstate_frame.write ((((xself).x_get_context_stack_frame)).apply ((xcontext)))
                        bogusForceDataize.write ((((xstate_frame).xsetdefault)).apply ((xself)))
                        xnodelist_true_output.write "None: is there a None literal in the EO language?"
                        ((xself).x_varlist).if
                          xcompare_to.write (((unsupported)).apply ((((unsupported)).apply (((xvar).xresolve)) ((xcontext)) (TRUE))) ((xvar)) (((xself).x_varlist)))
                          (((unsupported)).apply ((xcompare_to)) ((xnodelist_true_output)) ((((((xself).xnodelist_true).xrender)).apply ((xcontext)))))
                        ((xcompare_to).neq (((unsupported)).apply ((xstate_frame)) ((xself)))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xstate_frame)) ((xself)))) ((xcompare_to)))
                            (((unsupported)).apply (((xnodelist_true_output).or (((((xself).xnodelist_true).xrender)).apply ((xcontext))))))
                          ((xself).xnodelist_false).if
                            (((unsupported)).apply ((((((xself).xnodelist_false).xrender)).apply ((xcontext)))))
                        (((unsupported)).apply (""))
                x_get_context_stack_frame.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply ("forloop") ((xcontext))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("forloop"))))
                        (((unsupported)).apply (((xcontext).xrender_context)))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xconditions_nodelists]
                    seq > @
                      (((unsupported)).apply (((xself).xconditions_nodelists)) ((xconditions_nodelists)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s>".mod (((xself).x__class__).x__name__))))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xnodelist)))) (((xself).xconditions_nodelists)))
                        (((unsupported)).apply ((xnodelist)))
                xnodelist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xNodeList)).apply ((xself)))))
                xrender.write
                  [xself xcontext]
                    memory > xmatch
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xnodelist)))) (((xself).xconditions_nodelists)))
                          seq
                            (((unsupported)).apply ((xcondition)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((xVariableDoesNotExist)))
                                xmatch.write ((((xcondition).xeval)).apply ((xcontext)))
                                xmatch.write "None: is there a None literal in the EO language?"
                              xmatch.write TRUE
                            (xmatch).if
                              (((unsupported)).apply (((((xnodelist).xrender)).apply ((xcontext)))))
                        (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xcount xmethod xcommon]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xcount)) (((xself).xmethod)) (((xself).xcommon)))) ((((unsupported)).apply ((xcount)) ((xmethod)) ((xcommon)))))
                xrender.write
                  [xself xcontext]
                    memory > xparas
                    memory > xcount
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                          xcount.write (((xint)).apply ((((((xself).xcount).xresolve)).apply ((xcontext)))))
                          xcount.write 1
                        (((xself).xmethod).eq "w").if
                          (((unsupported)).apply ((((unsupported)).apply ((xwords)) ((xcount)) (((xself).xcommon)))))
                          xparas.write (((unsupported)).apply ((xparagraphs)) ((xcount)) (((xself).xcommon)))
                        (((xself).xmethod).eq "p").if
                          xparas.write (((unsupported)).apply (("<p>%s</p>".mod (xp))) ((xp)) ((xparas)))
                        (((unsupported)).apply (((("nn".xjoin)).apply ((xparas)))))
            xGroupedResult.write (((xnamedtuple)).apply ("GroupedResult") ((((unsupported)).apply ("grouper") ("list"))))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xtarget xexpression xvar_name]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtarget)) (((xself).xexpression)))) ((((unsupported)).apply ((xtarget)) ((xexpression)))))
                        (((unsupported)).apply (((xself).xvar_name)) ((xvar_name)))
                xresolve_expression.write
                  [xself xobj xcontext]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xvar_name)))) ((xobj)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xexpression).xresolve)) ((xcontext)) (TRUE))))
                xrender.write
                  [xself xcontext]
                    memory > xobj_list
                    seq > @
                      seq
                        xobj_list.write (((unsupported)).apply ((((xself).xtarget).xresolve)) ((xcontext)) (TRUE))
                        (((unsupported)).apply ((xobj_list)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xvar_name)))) ((((unsupported)).apply)))
                            (((unsupported)).apply (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xvar_name)))) ((((unsupported)).apply ((((unsupported)).apply ((xGroupedResult)) ((xkey)) ((((xlist)).apply ((xval)))))) ((((unsupported)).apply ((xkey)) ((xval)))) ((((xgroupby)).apply ((xobj_list)) ((((unsupported)).apply (((((xself).xresolve_expression)).apply ((xobj)) ((xcontext)))))))))))
                        (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply)
                xrender.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xformat_string xasvar]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xformat_string)) ((xformat_string)))
                        (((unsupported)).apply (((xself).xasvar)) ((xasvar)))
                xrender.write
                  [xself xcontext]
                    memory > xformatted
                    memory > xtzinfo
                    seq > @
                      seq
                        xtzinfo.write (((xsettings).xUSE_TZ).if ((((xtimezone).xget_current_timezone)).apply) "None: is there a None literal in the EO language?")
                        xformatted.write (((xdate)).apply ((((unsupported)).apply (((xdatetime).xnow)) ((xtzinfo)))) (((xself).xformat_string)))
                        ((xself).xasvar).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xasvar)))) ((xformatted)))
                            (((unsupported)).apply (""))
                          (((unsupported)).apply ((xformatted)))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xnode]
                    seq > @
                      (((unsupported)).apply (((xself).xnode)) ((xnode)))
                xrender.write
                  [xself xcontext]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xnode).xreset)).apply ((xcontext)))
                        (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xnodelist]
                    seq > @
                      (((unsupported)).apply (((xself).xnodelist)) ((xnodelist)))
                xrender.write
                  [xself xcontext]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xstrip_spaces_between_tags)).apply (((((((((xself).xnodelist).xrender)).apply ((xcontext))).xstrip)).apply)))))
            (((unsupported)).apply ((xNode)))
              seq
                xmapping.write (((unsupported)).apply ("openblock") ((xBLOCK_TAG_START)) ("closeblock") ((xBLOCK_TAG_END)) ("openvariable") ((xVARIABLE_TAG_START)) ("closevariable") ((xVARIABLE_TAG_END)) ("openbrace") ((xSINGLE_BRACE_START)) ("closebrace") ((xSINGLE_BRACE_END)) ("opencomment") ((xCOMMENT_TAG_START)) ("closecomment") ((xCOMMENT_TAG_END)))
                x__init__.write
                  [xself xtagtype]
                    seq > @
                      (((unsupported)).apply (((xself).xtagtype)) ((xtagtype)))
                xrender.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply ((((((xself).xmapping).xget)).apply (((xself).xtagtype)) (""))))
            (((unsupported)).apply ((xNode)))
              seq
                xchild_nodelists.write (((unsupported)).apply)
                x__init__.write
                  [xself xview_name xargs xkwargs xasvar]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xview_name)) ((xview_name)))
                        (((unsupported)).apply (((xself).xargs)) ((xargs)))
                        (((unsupported)).apply (((xself).xkwargs)) ((xkwargs)))
                        (((unsupported)).apply (((xself).xasvar)) ((xasvar)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s view_name='%s' args=%s kwargs=%s as=%s>".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) (((xself).xview_name)) ((((xrepr)).apply (((xself).xargs)))) ((((xrepr)).apply (((xself).xkwargs)))) ((((xrepr)).apply (((xself).xasvar))))))))
                xrender.write
                  [xself xcontext]
                    memory > xurl
                    memory > xcurrent_app
                    memory > xargs
                    memory > xview_name
                    memory > xkwargs
                    seq > @
                      seq
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xargs.write (((unsupported)).apply (((((xarg).xresolve)).apply ((xcontext)))) ((xarg)) (((xself).xargs)))
                        xkwargs.write (((unsupported)).apply ((xk)) (((((xv).xresolve)).apply ((xcontext)))) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xkwargs).xitems)).apply)))
                        xview_name.write (((((xself).xview_name).xresolve)).apply ((xcontext)))
                        (((unsupported)).apply ((xAttributeError)))
                          xcurrent_app.write (((xcontext).xrequest).xcurrent_app)
                          (((unsupported)).apply ((xAttributeError)))
                            xcurrent_app.write ((((xcontext).xrequest).xresolver_match).xnamespace)
                            xcurrent_app.write "None: is there a None literal in the EO language?"
                        xurl.write ""
                        (((unsupported)).apply ((xNoReverseMatch)))
                          xurl.write (((unsupported)).apply ((xreverse)) ((xview_name)) ((xargs)) ((xkwargs)) ((xcurrent_app)))
                          (((unsupported)).apply (((xself).xasvar)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply)
                        ((xself).xasvar).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xasvar)))) ((xurl)))
                            (((unsupported)).apply (""))
                          seq
                            ((xcontext).xautoescape).if
                              xurl.write (((xconditional_escape)).apply ((xurl)))
                            (((unsupported)).apply ((xurl)))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xcontent]
                    seq > @
                      (((unsupported)).apply (((xself).xcontent)) ((xcontent)))
                xrender.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply (((xself).xcontent)))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xval_expr xmax_expr xmax_width xasvar]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xval_expr)) ((xval_expr)))
                        (((unsupported)).apply (((xself).xmax_expr)) ((xmax_expr)))
                        (((unsupported)).apply (((xself).xmax_width)) ((xmax_width)))
                        (((unsupported)).apply (((xself).xasvar)) ((xasvar)))
                xrender.write
                  [xself xcontext]
                    memory > xvalue
                    memory > xratio
                    memory > xmax_value
                    memory > xmax_width
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((xVariableDoesNotExist)) ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                          seq
                            xvalue.write (((((xself).xval_expr).xresolve)).apply ((xcontext)))
                            xmax_value.write (((((xself).xmax_expr).xresolve)).apply ((xcontext)))
                            xmax_width.write (((xint)).apply ((((((xself).xmax_width).xresolve)).apply ((xcontext)))))
                          (((unsupported)).apply (""))
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("widthratio final argument must be a number"))))
                        (((unsupported)).apply ((xZeroDivisionError)) ((((unsupported)).apply ((xValueError)) ((xTypeError)) ((xOverflowError)))))
                          seq
                            xvalue.write (((xfloat)).apply ((xvalue)))
                            xmax_value.write (((xfloat)).apply ((xmax_value)))
                            xratio.write (((xvalue).div (xmax_value)).mul (xmax_width))
                            xresult.write (((xstr)).apply ((((xround)).apply ((xratio)))))
                          xresult.write "0"
                          xresult.write ""
                        ((xself).xasvar).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) (((xself).xasvar)))) ((xresult)))
                            (((unsupported)).apply (""))
                          (((unsupported)).apply ((xresult)))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xvar xname xnodelist xextra_context]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xnodelist)) ((xnodelist)))
                        (((unsupported)).apply (((xself).xextra_context)) (((xextra_context).or (((unsupported)).apply))))
                        (xname).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xextra_context)) ((xname)))) ((xvar)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s>".mod (((xself).x__class__).x__name__))))
                xrender.write
                  [xself xcontext]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((xkey)) (((((xval).xresolve)).apply ((xcontext)))) ((((unsupported)).apply ((xkey)) ((xval)))) ((((((xself).xextra_context).xitems)).apply)))
                        (((unsupported)).apply (((((xcontext).xpush)).apply ((((unsupported)).apply ((xvalues)))))))
                          (((unsupported)).apply ((((((xself).xnodelist).xrender)).apply ((xcontext)))))
            xautoescape.write
              [xparser xtoken]
                memory > xargs
                memory > xarg
                memory > xnodelist
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xargs.write (((((xtoken).xcontents).xsplit)).apply)
                    ((((xlen)).apply ((xargs))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'autoescape' tag requires exactly one argument."))))
                    xarg.write (((unsupported)).apply ((xargs)) (1))
                    (((unsupported)).apply ((xarg)) ((((unsupported)).apply ("on") ("off")))).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'autoescape' argument should be 'on' or 'off'"))))
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endautoescape"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xAutoEscapeControlNode)).apply (((xarg).eq "on")) ((xnodelist)))))
            xcomment.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((xparser).xskip_past)).apply ("endcomment"))
                    (((unsupported)).apply ((((xCommentNode)).apply)))
            xcycle.write
              [xparser xtoken]
                memory > xvalues
                memory > xnode
                memory > xargs
                memory > xname
                memory > xsilent
                memory > xas_form
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xargs.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xargs))).less 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'cycle' tag requires at least two arguments"))))
                    ((((xlen)).apply ((xargs))).eq 2).if
                      seq
                        xname.write (((unsupported)).apply ((xargs)) (1))
                        ((((xhasattr)).apply ((xparser)) ("_named_cycle_nodes")).not).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("No named cycles in template. '%s' is not defined".mod (xname))))))
                        (((unsupported)).apply ((xname)) (((xparser).x_named_cycle_nodes))).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Named cycle '%s' does not exist".mod (xname))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xparser).x_named_cycle_nodes)) ((xname)))))
                    xas_form.write FALSE
                    ((((xlen)).apply ((xargs))).greater 4).if
                      ((((unsupported)).apply ((xargs)) ((3.neg))).eq "as").if
                        seq
                          ((((unsupported)).apply ((xargs)) ((1.neg))).neq "silent").if
                            (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Only 'silent' flag is allowed after cycle's name, not '%s'.".mod (((unsupported)).apply ((xargs)) ((1.neg))))))))
                          xas_form.write TRUE
                          xsilent.write TRUE
                          xargs.write (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((1.neg)))))
                        ((((unsupported)).apply ((xargs)) ((2.neg))).eq "as").if
                          seq
                            xas_form.write TRUE
                            xsilent.write FALSE
                    (xas_form).if
                      seq
                        xname.write (((unsupported)).apply ((xargs)) ((1.neg)))
                        xvalues.write (((unsupported)).apply (((((xparser).xcompile_filter)).apply ((xarg)))) ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (1) ((2.neg)))))))
                        xnode.write (((unsupported)).apply ((xCycleNode)) ((xvalues)) ((xname)) ((xsilent)))
                        ((((xhasattr)).apply ((xparser)) ("_named_cycle_nodes")).not).if
                          (((unsupported)).apply (((xparser).x_named_cycle_nodes)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xparser).x_named_cycle_nodes)) ((xname)))) ((xnode)))
                      seq
                        xvalues.write (((unsupported)).apply (((((xparser).xcompile_filter)).apply ((xarg)))) ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (1))))))
                        xnode.write (((xCycleNode)).apply ((xvalues)))
                    (((unsupported)).apply (((xparser).x_last_cycle_node)) ((xnode)))
                    (((unsupported)).apply ((xnode)))
            xcsrf_token.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((xCsrfTokenNode)).apply)))
            xdebug.write
              [xparser xtoken]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xDebugNode)).apply)))
            xdo_filter.write
              [xparser xtoken]
                memory > xfilter_expr
                memory > xnodelist
                memory > xfilter_name
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xrest)))) ((((((xtoken).xcontents).xsplit)).apply ("None: is there a None literal in the EO language?") (1))))
                    xfilter_expr.write ((((xparser).xcompile_filter)).apply (("var|%s".mod (xrest))))
                    (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xunused)))) (((xfilter_expr).xfilters)))
                      seq
                        xfilter_name.write (((xgetattr)).apply ((xfunc)) ("_filter_name") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfilter_name)) ((((unsupported)).apply ("escape") ("safe")))).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("\"filter %s\" is not permitted.  Use the \"autoescape\" tag instead.".mod (xfilter_name))))))
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endfilter"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xFilterNode)).apply ((xfilter_expr)) ((xnodelist)))))
            xfirstof.write
              [xparser xtoken]
                memory > xbits
                memory > xasvar
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((unsupported)).apply (((((xtoken).xsplit_contents)).apply)) ((((unsupported)).apply (1))))
                    xasvar.write "None: is there a None literal in the EO language?"
                    ((xbits).not).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'firstof' statement requires at least one argument"))))
                    (((((xlen)).apply ((xbits))).geq 2).and ((((unsupported)).apply ((xbits)) ((2.neg))).eq "as")).if
                      seq
                        xasvar.write (((unsupported)).apply ((xbits)) ((1.neg)))
                        xbits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply ((2.neg)))))
                    (((unsupported)).apply ((((xFirstOfNode)).apply ((((unsupported)).apply (((((xparser).xcompile_filter)).apply ((xbit)))) ((xbit)) ((xbits)))) ((xasvar)))))
            xdo_for.write
              [xparser xtoken]
                memory > xinvalid_chars
                memory > xnodelist_empty
                memory > xbits
                memory > xsequence
                memory > xis_reversed
                memory > xloopvars
                memory > xin_index
                memory > xnodelist_loop
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).less 4).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'for' statements should have at least four words: %s".mod ((xtoken).xcontents))))))
                    xis_reversed.write ((((unsupported)).apply ((xbits)) ((1.neg))).eq "reversed")
                    xin_index.write ((xis_reversed).if (3.neg) (2.neg))
                    ((((unsupported)).apply ((xbits)) ((xin_index))).neq "in").if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'for' statements should use the format 'for x in y': %s".mod ((xtoken).xcontents))))))
                    xinvalid_chars.write (((xfrozenset)).apply ((((unsupported)).apply (" ") ("\"") ("'") ((xFILTER_SEPARATOR)))))
                    xloopvars.write ((((xre).xsplit)).apply (" *, *") ((((" ".xjoin)).apply ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (1) ((xin_index)))))))))
                    (((unsupported)).apply ((xvar)) ((xloopvars)))
                      (((xvar).not).or (((((xinvalid_chars).xisdisjoint)).apply ((xvar))).not)).if
                        (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'for' tag received an invalid argument: %s".mod ((xtoken).xcontents))))))
                    xsequence.write ((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (((xin_index).add 1)))))
                    xnodelist_loop.write ((((xparser).xparse)).apply ((((unsupported)).apply ("empty") ("endfor"))))
                    xtoken.write ((((xparser).xnext_token)).apply)
                    (((xtoken).xcontents).eq "empty").if
                      seq
                        xnodelist_empty.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endfor"))))
                        bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                      xnodelist_empty.write "None: is there a None literal in the EO language?"
                    (((unsupported)).apply ((((xForNode)).apply ((xloopvars)) ((xsequence)) ((xis_reversed)) ((xnodelist_loop)) ((xnodelist_empty)))))
            (((unsupported)).apply ((xLiteral)))
              seq
                x__init__.write
                  [xself xvalue xtext]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                        (((unsupported)).apply (((xself).xtext)) ((xtext)))
                xdisplay.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtext)))
                xeval.write
                  [xself xcontext]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).xvalue).xresolve)) ((xcontext)) (TRUE))))
            (((unsupported)).apply ((xIfParser)))
              seq
                xerror_class.write (xTemplateSyntaxError)
                x__init__.write
                  [xself xparser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xtemplate_parser)) ((xparser)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xcreate_var.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply ((((xTemplateLiteral)).apply ((((((xself).xtemplate_parser).xcompile_filter)).apply ((xvalue)))) ((xvalue)))))
            xdo_if.write
              [xparser xtoken]
                memory > xcondition
                memory > xbits
                memory > xnodelist
                memory > xconditions_nodelists
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((unsupported)).apply (((((xtoken).xsplit_contents)).apply)) ((((unsupported)).apply (1))))
                    xcondition.write ((((((xTemplateIfParser)).apply ((xparser)) ((xbits))).xparse)).apply)
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("elif") ("else") ("endif"))))
                    xconditions_nodelists.write (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xnodelist)))))
                    xtoken.write ((((xparser).xnext_token)).apply)
                    while.
                      (((((xtoken).xcontents).xstartswith)).apply ("elif"))
                      [unused]
                        seq > @
                          seq
                            xbits.write (((unsupported)).apply (((((xtoken).xsplit_contents)).apply)) ((((unsupported)).apply (1))))
                            xcondition.write ((((((xTemplateIfParser)).apply ((xparser)) ((xbits))).xparse)).apply)
                            xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("elif") ("else") ("endif"))))
                            bogusForceDataize.write ((((xconditions_nodelists).xappend)).apply ((((unsupported)).apply ((xcondition)) ((xnodelist)))))
                            xtoken.write ((((xparser).xnext_token)).apply)
                    (((xtoken).xcontents).eq "else").if
                      seq
                        xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endif"))))
                        bogusForceDataize.write ((((xconditions_nodelists).xappend)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xnodelist)))))
                        xtoken.write ((((xparser).xnext_token)).apply)
                    (((xtoken).xcontents).neq "endif").if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (((("Malformed template tag at line {}: \"{}\"".xformat)).apply (((xtoken).xlineno)) (((xtoken).xcontents)))))))
                    (((unsupported)).apply ((((xIfNode)).apply ((xconditions_nodelists)))))
            xifchanged.write
              [xparser xtoken]
                memory > xbits
                memory > xvalues
                memory > xnodelist_true
                memory > xnodelist_false
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    xnodelist_true.write ((((xparser).xparse)).apply ((((unsupported)).apply ("else") ("endifchanged"))))
                    xtoken.write ((((xparser).xnext_token)).apply)
                    (((xtoken).xcontents).eq "else").if
                      seq
                        xnodelist_false.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endifchanged"))))
                        bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                      xnodelist_false.write (((xNodeList)).apply)
                    xvalues.write (((unsupported)).apply (((((xparser).xcompile_filter)).apply ((xbit)))) ((xbit)) ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (1))))))
                    (((unsupported)).apply ((((xIfChangedNode)).apply ((xnodelist_true)) ((xnodelist_false)) ((((unsupported)).apply ((xvalues)))))))
            xfind_library.write
              [xparser xname]
                seq > @
                  (((unsupported)).apply ((xKeyError)))
                    (((unsupported)).apply ((((unsupported)).apply (((xparser).xlibraries)) ((xname)))))
                    (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' is not a registered tag library. Must be one of:n%s".mod (((unsupported)).apply ((xname)) (((("n".xjoin)).apply ((((xsorted)).apply (((xparser).xlibraries))))))))))))
            xload_from_library.write
              [xlibrary xlabel xnames]
                memory > xsubset
                memory > xfound
                seq > @
                  seq
                    (((unsupported)).apply)
                    xsubset.write (((xLibrary)).apply)
                    (((unsupported)).apply ((xname)) ((xnames)))
                      seq
                        xfound.write FALSE
                        (((unsupported)).apply ((xname)) (((xlibrary).xtags))).if
                          seq
                            xfound.write TRUE
                            (((unsupported)).apply ((((unsupported)).apply (((xsubset).xtags)) ((xname)))) ((((unsupported)).apply (((xlibrary).xtags)) ((xname)))))
                        (((unsupported)).apply ((xname)) (((xlibrary).xfilters))).if
                          seq
                            xfound.write TRUE
                            (((unsupported)).apply ((((unsupported)).apply (((xsubset).xfilters)) ((xname)))) ((((unsupported)).apply (((xlibrary).xfilters)) ((xname)))))
                        (((unsupported)).apply ((xfound)) (FALSE)).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' is not a valid tag or filter in tag library '%s'".mod (((unsupported)).apply ((xname)) ((xlabel))))))))
                    (((unsupported)).apply ((xsubset)))
            xload.write
              [xparser xtoken]
                memory > xname
                memory > xbits
                memory > xsubset
                memory > xlib
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((((xtoken).xcontents).xsplit)).apply)
                    (((((xlen)).apply ((xbits))).geq 4).and ((((unsupported)).apply ((xbits)) ((2.neg))).eq "from")).if
                      seq
                        xname.write (((unsupported)).apply ((xbits)) ((1.neg)))
                        xlib.write (((xfind_library)).apply ((xparser)) ((xname)))
                        xsubset.write (((xload_from_library)).apply ((xlib)) ((xname)) ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (1) ((2.neg)))))))
                        bogusForceDataize.write ((((xparser).xadd_library)).apply ((xsubset)))
                      (((unsupported)).apply ((xname)) ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (1))))))
                        seq
                          xlib.write (((xfind_library)).apply ((xparser)) ((xname)))
                          bogusForceDataize.write ((((xparser).xadd_library)).apply ((xlib)))
                    (((unsupported)).apply ((((xLoadNode)).apply)))
            xlorem.write
              [xparser xtoken]
                memory > xcount
                memory > xbits
                memory > xcommon
                memory > xtagname
                memory > xmethod
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((xlist)).apply (((((xtoken).xsplit_contents)).apply)))
                    xtagname.write (((unsupported)).apply ((xbits)) (0))
                    xcommon.write ((((unsupported)).apply ((xbits)) ((1.neg))).neq "random")
                    ((xcommon).not).if
                      bogusForceDataize.write ((((xbits).xpop)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xbits)) ((1.neg)))) ((((unsupported)).apply ("w") ("p") ("b")))).if
                      xmethod.write ((((xbits).xpop)).apply)
                      xmethod.write "b"
                    ((((xlen)).apply ((xbits))).greater 1).if
                      xcount.write ((((xbits).xpop)).apply)
                      xcount.write "1"
                    xcount.write ((((xparser).xcompile_filter)).apply ((xcount)))
                    ((((xlen)).apply ((xbits))).neq 1).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Incorrect format for %r tag".mod (xtagname))))))
                    (((unsupported)).apply ((((xLoremNode)).apply ((xcount)) ((xmethod)) ((xcommon)))))
            xnow.write
              [xparser xtoken]
                memory > xbits
                memory > xformat_string
                memory > xasvar
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    xasvar.write "None: is there a None literal in the EO language?"
                    (((((xlen)).apply ((xbits))).eq 4).and ((((unsupported)).apply ((xbits)) ((2.neg))).eq "as")).if
                      seq
                        xasvar.write (((unsupported)).apply ((xbits)) ((1.neg)))
                        xbits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply ((2.neg)))))
                    ((((xlen)).apply ((xbits))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'now' statement takes one argument"))))
                    xformat_string.write (((unsupported)).apply ((((unsupported)).apply ((xbits)) (1))) ((((unsupported)).apply (1) ((1.neg)))))
                    (((unsupported)).apply ((((xNowNode)).apply ((xformat_string)) ((xasvar)))))
            xregroup.write
              [xparser xtoken]
                memory > xtarget
                memory > xexpression
                memory > xbits
                memory > xvar_name
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).neq 6).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'regroup' tag takes five arguments"))))
                    xtarget.write ((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (1))))
                    ((((unsupported)).apply ((xbits)) (2)).neq "by").if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("second argument to 'regroup' tag must be 'by'"))))
                    ((((unsupported)).apply ((xbits)) (4)).neq "as").if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("next-to-last argument to 'regroup' tag must be 'as'"))))
                    xvar_name.write (((unsupported)).apply ((xbits)) (5))
                    xexpression.write ((((xparser).xcompile_filter)).apply ((((xvar_name).add (xVARIABLE_ATTRIBUTE_SEPARATOR)).add (((unsupported)).apply ((xbits)) (3)))))
                    (((unsupported)).apply ((((xRegroupNode)).apply ((xtarget)) ((xexpression)) ((xvar_name)))))
            xresetcycle.write
              [xparser xtoken]
                memory > xname
                memory > xargs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xargs.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xargs))).greater 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("%r tag accepts at most one argument.".mod (((unsupported)).apply ((xargs)) (0)))))))
                    ((((xlen)).apply ((xargs))).eq 2).if
                      seq
                        xname.write (((unsupported)).apply ((xargs)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                          (((unsupported)).apply ((((xResetCycleNode)).apply ((((unsupported)).apply (((xparser).x_named_cycle_nodes)) ((xname)))))))
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Named cycle '%s' does not exist.".mod (xname))))))
                    (((unsupported)).apply ((xAttributeError)))
                      (((unsupported)).apply ((((xResetCycleNode)).apply (((xparser).x_last_cycle_node)))))
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("No cycles in template."))))
            xspaceless.write
              [xparser xtoken]
                memory > xnodelist
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endspaceless"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xSpacelessNode)).apply ((xnodelist)))))
            xtemplatetag.write
              [xparser xtoken]
                memory > xbits
                memory > xtag
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((((xtoken).xcontents).xsplit)).apply)
                    ((((xlen)).apply ((xbits))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("'templatetag' statement takes one argument"))))
                    xtag.write (((unsupported)).apply ((xbits)) (1))
                    (((unsupported)).apply ((xtag)) (((xTemplateTagNode).xmapping))).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Invalid templatetag argument: '%s'. Must be one of: %s".mod (((unsupported)).apply ((xtag)) ((((xlist)).apply (((xTemplateTagNode).xmapping))))))))))
                    (((unsupported)).apply ((((xTemplateTagNode)).apply ((xtag)))))
            xurl.write
              [xparser xtoken]
                memory > xbits
                memory > xasvar
                memory > xargs
                memory > xviewname
                memory > xmatch
                memory > xkwargs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).less 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' takes at least one argument, a URL pattern name.".mod (((unsupported)).apply ((xbits)) (0)))))))
                    xviewname.write ((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (1))))
                    xargs.write (((unsupported)).apply)
                    xkwargs.write (((unsupported)).apply)
                    xasvar.write "None: is there a None literal in the EO language?"
                    xbits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply (2))))
                    (((((xlen)).apply ((xbits))).geq 2).and ((((unsupported)).apply ((xbits)) ((2.neg))).eq "as")).if
                      seq
                        xasvar.write (((unsupported)).apply ((xbits)) ((1.neg)))
                        xbits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply ((2.neg)))))
                    (((unsupported)).apply ((xbit)) ((xbits)))
                      seq
                        xmatch.write ((((xkwarg_re).xmatch)).apply ((xbit)))
                        ((xmatch).not).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("Malformed arguments to url tag"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xmatch).xgroups)).apply)))
                        (xname).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((xname)))) (((((xparser).xcompile_filter)).apply ((xvalue)))))
                          bogusForceDataize.write ((((xargs).xappend)).apply (((((xparser).xcompile_filter)).apply ((xvalue)))))
                    (((unsupported)).apply ((((xURLNode)).apply ((xviewname)) ((xargs)) ((xkwargs)) ((xasvar)))))
            xverbatim.write
              [xparser xtoken]
                memory > xnodelist
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endverbatim"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((xVerbatimNode)).apply (((((xnodelist).xrender)).apply ((((xContext)).apply)))))))
            xwidthratio.write
              [xparser xtoken]
                memory > xbits
                memory > xasvar
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).eq 4).if
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtag)) ((xthis_value_expr)) ((xmax_value_expr)) ((xmax_width)))) ((xbits)))
                        xasvar.write "None: is there a None literal in the EO language?"
                      ((((xlen)).apply ((xbits))).eq 6).if
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xtag)) ((xthis_value_expr)) ((xmax_value_expr)) ((xmax_width)) ((xas_)) ((xasvar)))) ((xbits)))
                          ((xas_).neq "as").if
                            (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("Invalid syntax in widthratio tag. Expecting 'as' keyword"))))
                        (((unsupported)).apply ((((xTemplateSyntaxError)).apply ("widthratio takes at least three arguments"))))
                    (((unsupported)).apply ((((unsupported)).apply ((xWidthRatioNode)) (((((xparser).xcompile_filter)).apply ((xthis_value_expr)))) (((((xparser).xcompile_filter)).apply ((xmax_value_expr)))) (((((xparser).xcompile_filter)).apply ((xmax_width)))) ((xasvar)))))
            xdo_with.write
              [xparser xtoken]
                memory > xbits
                memory > xextra_context
                memory > xremaining_bits
                memory > xnodelist
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    xremaining_bits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply (1))))
                    xextra_context.write (((unsupported)).apply ((xtoken_kwargs)) ((xremaining_bits)) ((xparser)) (TRUE))
                    ((xextra_context).not).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("%r expected at least one variable assignment".mod (((unsupported)).apply ((xbits)) (0)))))))
                    (xremaining_bits).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("%r received an invalid token: %r".mod (((unsupported)).apply ((((unsupported)).apply ((xbits)) (0))) ((((unsupported)).apply ((xremaining_bits)) (0)))))))))
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endwith"))))
                    bogusForceDataize.write ((((xparser).xdelete_first_token)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xWithNode)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xnodelist)) ((xextra_context)))))