memory > xget_user_model
memory > xDEFAULT_DB_ALIAS
memory > xvalidate_password
memory > xValidationError
memory > xerr
memory > xBaseCommand
memory > xoptions
memory > xgetpass
memory > xCommandError
[] > changepassword
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xrequires_system_checks
        memory > xrequires_migrations_checks
        memory > x_get_pass
        memory > xUserModel
        memory > xhandle
        memory > xadd_arguments
        memory > xhelp
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xUserModel.write (((xget_user_model)).apply)
            (((unsupported)).apply ((xBaseCommand)))
              seq
                xhelp.write "Change a user's password for django.contrib.auth."
                xrequires_migrations_checks.write TRUE
                xrequires_system_checks.write (((unsupported)).apply)
                x_get_pass.write
                  [xself xprompt]
                    memory > xp
                    seq > @
                      (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xgetpass).xgetpass)) ((xprompt)))
                        ((xp).not).if
                          (((unsupported)).apply ((((xCommandError)).apply ("aborted"))))
                        (((unsupported)).apply ((xp)))
                xadd_arguments.write
                  [xself xparser]
                    seq > @
                      seq
                        (((unsupported)).apply (((xparser).xadd_argument)) ("username") ("?") ("Username to change password for; by default, it's the current username."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--database") ((xDEFAULT_DB_ALIAS)) ("Specifies the database to use. Default is \"default\"."))
                xhandle.write
                  [xself]
                    memory > xu
                    memory > xcount
                    memory > xp2
                    memory > xusername
                    memory > xMAX_TRIES
                    memory > xp1
                    memory > xpassword_validated
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xoptions)) ("username")).if
                          xusername.write (((unsupported)).apply ((xoptions)) ("username"))
                          xusername.write ((((xgetpass).xgetuser)).apply)
                        (((unsupported)).apply (((xUserModel).xDoesNotExist)))
                          xu.write ((((((((xUserModel).x_default_manager).xusing)).apply ((((unsupported)).apply ((xoptions)) ("database")))).xget)).apply ((((unsupported)).apply ((((unsupported)).apply (((xUserModel).xUSERNAME_FIELD)) ((xusername)))))))
                          (((unsupported)).apply ((((xCommandError)).apply (("user '%s' does not exist".mod (xusername))))))
                        bogusForceDataize.write (((((xself).xstdout).xwrite)).apply (("Changing password for user '%s'".mod (xu))))
                        xMAX_TRIES.write 3
                        xcount.write 0
                        (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)))) ((((unsupported)).apply (1) (2))))
                        xpassword_validated.write FALSE
                        while.
                          ((((xp1).neq (xp2)).or ((xpassword_validated).not)).and ((xcount).less (xMAX_TRIES)))
                          [unused]
                            seq > @
                              seq
                                xp1.write ((((xself).x_get_pass)).apply)
                                xp2.write ((((xself).x_get_pass)).apply ("Password (again): "))
                                ((xp1).neq (xp2)).if
                                  seq
                                    bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ("Passwords do not match. Please try again."))
                                    (((unsupported)).apply ((xcount)) (1))
                                    (((unsupported)).apply)
                                (((unsupported)).apply ((xValidationError)))
                                  bogusForceDataize.write (((xvalidate_password)).apply ((xp2)) ((xu)))
                                  seq
                                    bogusForceDataize.write (((((xself).xstderr).xwrite)).apply (((("n".xjoin)).apply (((xerr).xmessages)))))
                                    (((unsupported)).apply ((xcount)) (1))
                                  xpassword_validated.write TRUE
                        ((xcount).eq (xMAX_TRIES)).if
                          (((unsupported)).apply ((((xCommandError)).apply (("Aborting password change for user '%s' after %s attempts".mod (((unsupported)).apply ((xu)) ((xcount))))))))
                        bogusForceDataize.write ((((xu).xset_password)).apply ((xp1)))
                        bogusForceDataize.write ((((xu).xsave)).apply)
                        (((unsupported)).apply (("Password changed successfully for user '%s'".mod (xu))))