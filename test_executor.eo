memory > xcm
memory > xMigrationRecorder
memory > xtable
memory > xRuntimeError
memory > xmodify_settings
memory > xrecord_migration
memory > xMigration
memory > xconnection
memory > xProjectState
memory > xDatabaseError
memory > xMigrationTestBase
memory > xx
memory > xisolate_lru_cache
memory > xm
memory > xMigrationExecutor
memory > xSimpleTestCase
memory > xkey
memory > xc
memory > xFakeMigration
memory > xmigrations
memory > xMigrationGraph
memory > xargs
memory > xmock
memory > xeditor
memory > xInvalidMigrationPlan
memory > xFakeLoader
memory > xmodels
memory > xDeferredSQL
[] > test_executor
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_minimize_rollbacks_branchy
        memory > xtest_migrations_not_applied_on_deferred_sql_failure
        memory > xtest_alter_id_type_with_fk
        memory > xtest_migrate_skips_schema_creation
        memory > xtest_unrelated_model_lookups_backwards
        memory > xtest_unrelated_applied_migrations_mutate_state
        memory > xtest_atomic_operation_in_non_atomic_migration
        memory > xtest_minimize_rollbacks
        memory > xtest_custom_user
        memory > xtest_migrations_applied_and_recorded_atomically
        memory > xtest_run_with_squashed
        memory > xtest_unrelated_model_lookups_forwards
        memory > xtest_apply_all_replaced_marks_replacement_as_applied
        memory > xtest_migrate_marks_replacement_unapplied
        memory > xtest_backwards_nothing_to_do
        memory > xtest_empty_plan
        memory > xtest_run
        memory > xtest_detect_soft_applied_add_field_manytomanyfield
        memory > x__repr__
        memory > xtest_soft_apply
        memory > x__init__
        memory > xtest_mixed_plan_not_supported
        memory > xtest_migrate_marks_replacement_applied_even_if_it_did_nothing
        memory > xtest_non_atomic_migration
        memory > xglobal_apps
        memory > xtest_migrate_backward_to_squashed_migration
        memory > xtest_process_callback
        memory > xavailable_apps
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xMigrationTestBase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("migrations2"))))))
              seq
                (((unsupported)).apply)
                xavailable_apps.write (((unsupported)).apply ("migrations") ("migrations2") ("django.contrib.auth") ("django.contrib.contenttypes"))
                xtest_run.write
                  [xself]
                    memory > xexecutor
                    memory > xplan
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (TRUE))))))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_run_with_squashed.write
                  [xself]
                    memory > xexecutor
                    memory > xleaves
                    memory > xplan
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        xleaves.write (((unsupported)).apply ((xkey)) ((xkey)) (((((((xexecutor).xloader).xgraph).xleaf_nodes)).apply)) (((((unsupported)).apply ((xkey)) (0)).eq "migrations")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xleaves)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))) (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))) (TRUE))))))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_migrate_backward_to_squashed_migration.write
                  [xself]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                          seq
                            xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_non_atomic_migration.write
                  [xself]
                    memory > xexecutor
                    memory > xPublisher
                    memory > xmigrations_apps
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ("Abort migration"))))
                          bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_publisher"))
                        xmigrations_apps.write ((((((xexecutor).xloader).xproject_state)).apply ((((unsupported)).apply ("migrations") ("0001_initial")))).xapps)
                        xPublisher.write ((((xmigrations_apps).xget_model)).apply ("migrations") ("Publisher"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xPublisher).xobjects).xexists)).apply)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_atomic_operation_in_non_atomic_migration.write
                  [xself]
                    memory > xexecutor
                    memory > xmigrations_apps
                    memory > xEditor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ("Abort migration"))))
                          bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        xmigrations_apps.write ((((((xexecutor).xloader).xproject_state)).apply ((((unsupported)).apply ("migrations") ("0001_initial")))).xapps)
                        xEditor.write ((((xmigrations_apps).xget_model)).apply ("migrations") ("Editor"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xEditor).xobjects).xexists)).apply)))
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))) (TRUE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ("Abort migration"))))
                          bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xEditor).xobjects).xexists)).apply)))
                xtest_empty_plan.write
                  [xself]
                    memory > xstate
                    memory > xexecutor
                    memory > xplan
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations2") ("0001_initial"))))) (FALSE))))))
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))) (TRUE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply)))
                        xstate.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("book"))) (((xstate).xmodels)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("author"))) (((xstate).xmodels)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations2") ("otherauthor"))) (((xstate).xmodels)))
                        bogusForceDataize.write (((((xexecutor).xrecorder).xrecord_unapplied)).apply ("migrations2") ("0001_initial"))
                        bogusForceDataize.write (((((xexecutor).xrecorder).xrecord_unapplied)).apply ("migrations") ("0002_second"))
                        bogusForceDataize.write (((((xexecutor).xrecorder).xrecord_unapplied)).apply ("migrations") ("0001_initial"))
                xtest_mixed_plan_not_supported.write
                  [xself]
                    memory > xexecutor
                    memory > xplan
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))))))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ("None: is there a None literal in the EO language?") ((xplan)))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((((xexecutor).xloader).xapplied_migrations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((xexecutor).xloader).xapplied_migrations)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("migrations2") ("0001_initial"))) ((((xexecutor).xloader).xapplied_migrations)))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))))
                        xmsg.write "Migration plans with both forwards and backwards migrations are not supported. Please split your migration process into separate plans of only forwards OR backwards migrations."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInvalidMigrationPlan)) ((xmsg)))) ((xcm)))
                          bogusForceDataize.write ((((xexecutor).xmigrate)).apply ("None: is there a None literal in the EO language?") ((xplan)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (1))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations2") ("0001_initial"))))) (FALSE))))))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("migrations2") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations2_otherauthor"))
                xtest_soft_apply.write
                  [xself]
                    memory > xstate
                    memory > xexecutor
                    memory > xfake_storer
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xstate.write (((unsupported)).apply ("faked") ("None: is there a None literal in the EO language?"))
                        xfake_storer.write
                          [xphase xmigration xfake]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("faked"))) ((xfake)))
                        xexecutor.write (((unsupported)).apply ((xMigrationExecutor)) ((xconnection)) ((xfake_storer)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))))))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstate)) ("faked"))) (FALSE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstate)) ("faked"))) (TRUE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xexecutor).xloader).xgraph).xnodes)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDatabaseError)))))
                          bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        xstate.write (((unsupported)).apply ("faked") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstate)) ("faked"))) (TRUE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                xtest_custom_user.write
                  [xself]
                    memory > xexecutor
                    memory > xmigration
                    memory > xmigrations_apps
                    memory > xold_table_names
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xisolate_lru_cache)).apply (((xglobal_apps).xget_swappable_settings_name)))))
                          seq
                            xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_tribble"))
                            xold_table_names.write (((xconnection).xintrospection).xtable_names)
                            (((unsupported)).apply ((((xconnection).xintrospection).xtable_names)) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xold_table_names)).apply ((xc)))) (((xx).neq "auth_user")))))))
                            xmigrations_apps.write ((((((xexecutor).xloader).xproject_state)).apply ((((unsupported)).apply ("migrations") ("0001_initial")))).xapps)
                            (((unsupported)).apply ((((unsupported)).apply ((((((xglobal_apps).xget_app_config)).apply ("migrations")).xmodels)) ("author"))) (((((xmigrations_apps).xget_model)).apply ("migrations") ("author"))))
                            (((unsupported)).apply)
                              seq
                                xmigration.write (((((xexecutor).xloader).xget_migration)).apply ("auth") ("0001_initial"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xexecutor).xdetect_soft_applied)).apply ("None: is there a None literal in the EO language?") ((xmigration)))) (0))) (TRUE))
                              seq
                                (((unsupported)).apply ((((xconnection).xintrospection).xtable_names)) ((xold_table_names)))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((((xglobal_apps).xget_app_config)).apply ("migrations")).xmodels)) ("author"))))))
                                bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                                bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                                bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                                bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                xtest_detect_soft_applied_add_field_manytomanyfield.write
                  [xself]
                    memory > xexecutor
                    memory > xmigration
                    memory > xtables
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtables.write (((unsupported)).apply ("migrations_project") ("migrations_task") ("migrations_project_tasks") ("migrations_task_projects"))
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))) (TRUE))
                        (((unsupported)).apply ((xtable)) ((((unsupported)).apply ((xtables)) ((((unsupported)).apply (3))))))
                          bogusForceDataize.write ((((xself).xassertTableExists)).apply ((xtable)))
                        xmigration.write (((((xexecutor).xloader).xget_migration)).apply ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xexecutor).xdetect_soft_applied)).apply ("None: is there a None literal in the EO language?") ((xmigration)))) (0))) (TRUE))
                        xmigration.write (((((xexecutor).xloader).xget_migration)).apply ("migrations") ("0002_initial"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xexecutor).xdetect_soft_applied)).apply ("None: is there a None literal in the EO language?") ((xmigration)))) (0))) (FALSE))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))) (TRUE))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_initial"))))))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))) (TRUE))
                        xmigration.write (((((xexecutor).xloader).xget_migration)).apply ("migrations") ("0002_initial"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xexecutor).xdetect_soft_applied)).apply ("None: is there a None literal in the EO language?") ((xmigration)))) (0))) (TRUE))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          (((unsupported)).apply ((xtable)) ((((unsupported)).apply ((xtables)) ((((unsupported)).apply (2))))))
                            bogusForceDataize.write ((((xeditor).xexecute)).apply ((((xeditor).xsql_delete_table).mod (((unsupported)).apply ("table") ((xtable))))))
                        xmigration.write (((((xexecutor).xloader).xget_migration)).apply ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xexecutor).xdetect_soft_applied)).apply ("None: is there a None literal in the EO language?") ((xmigration)))) (0))) (FALSE))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          (((unsupported)).apply ((xtable)) ((((unsupported)).apply ((xtables)) ((((unsupported)).apply (2))))))
                            bogusForceDataize.write ((((xeditor).xexecute)).apply ((((xeditor).xsql_delete_table).mod (((unsupported)).apply ("table") ((xtable))))))
                        (((unsupported)).apply ((xtable)) ((xtables)))
                          bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ((xtable)))
                xtest_unrelated_model_lookups_forwards.write
                  [xself]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_a_a1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_b_b1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_c_c1"))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_b") ("0003_b3"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_b_b3"))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_a") ("0004_a4"))) ((((unsupported)).apply ("lookuperror_c") ("0003_c3"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_a_a4"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_c_c3"))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                          seq
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_a") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("lookuperror_b") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("lookuperror_c") ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_a_a1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_b_b1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_c_c1"))
                xtest_unrelated_model_lookups_backwards.write
                  [xself]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_a_a1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_b_b1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_c_c1"))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_a") ("0004_a4"))) ((((unsupported)).apply ("lookuperror_b") ("0003_b3"))) ((((unsupported)).apply ("lookuperror_c") ("0003_c3"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_b_b3"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_a_a4"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("lookuperror_c_c3"))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_a") ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                          seq
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("lookuperror_b") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("lookuperror_c") ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_a_a1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_b_b1"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("lookuperror_c_c1"))
                xtest_unrelated_applied_migrations_mutate_state.write
                  [xself]
                    memory > xstate
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("mutate_state_b") ("0002_add_field"))))))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        xstate.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("mutate_state_a") ("0001_initial"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("added") (((((unsupported)).apply (((xstate).xmodels)) ((((unsupported)).apply ("mutate_state_b") ("b")))).xfields)))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        xstate.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("mutate_state_a") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("added") (((((unsupported)).apply (((xstate).xmodels)) ((((unsupported)).apply ("mutate_state_b") ("b")))).xfields)))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("mutate_state_b") ("None: is there a None literal in the EO language?"))))))
                xtest_process_callback.write
                  [xself]
                    memory > xexpected
                    memory > xmigrations
                    memory > xcallback
                    memory > xexecutor
                    memory > xcall_args_list
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcall_args_list.write (((unsupported)).apply)
                        xcallback.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xcall_args_list).xappend)).apply ((xargs)))
                        xexecutor.write (((unsupported)).apply ((xMigrationExecutor)) ((xconnection)) ((xcallback)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((((unsupported)).apply ("migrations") ("0002_second"))))))
                        bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        xmigrations.write ((((xexecutor).xloader).xgraph).xnodes)
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ("render_start"))) ((((unsupported)).apply ("render_success"))) ((((unsupported)).apply ("apply_start") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ("apply_success") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ("apply_start") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))) ((((unsupported)).apply ("apply_success") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))) ((((unsupported)).apply ("render_start"))) ((((unsupported)).apply ("render_success"))) ((((unsupported)).apply ("unapply_start") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))) ((((unsupported)).apply ("unapply_success") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0002_second"))))) (FALSE))) ((((unsupported)).apply ("unapply_start") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))) ((((unsupported)).apply ("unapply_success") ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply ("migrations") ("0001_initial"))))) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcall_args_list)) ((xexpected)))
                xtest_alter_id_type_with_fk.write
                  [xself]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("author_app_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("book_app_book"))
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("author_app") ("0001_initial"))) ((((unsupported)).apply ("book_app") ("0001_initial"))))))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("author_app_author"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("book_app_book"))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("author_app") ("0002_alter_id"))))))
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                          seq
                            (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                              seq
                                bogusForceDataize.write ((((xeditor).xexecute)).apply ((((xeditor).xsql_delete_table).mod (((unsupported)).apply ("table") ("book_app_book")))))
                                bogusForceDataize.write ((((xeditor).xexecute)).apply ((((xeditor).xsql_delete_table).mod (((unsupported)).apply ("table") ("author_app_author")))))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("author_app_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("book_app_book"))
                            (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("author_app") ("None: is there a None literal in the EO language?"))))) (TRUE))
                xtest_apply_all_replaced_marks_replacement_as_applied.write
                  [xself]
                    memory > xexecutor
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0001_initial"))
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) (((((xrecorder).xapplied_migrations)).apply)))
                xtest_migrate_marks_replacement_applied_even_if_it_did_nothing.write
                  [xself]
                    memory > xexecutor
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0002_second"))
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) (((((xrecorder).xapplied_migrations)).apply)))
                xtest_migrate_marks_replacement_unapplied.write
                  [xself]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) ((((((xexecutor).xrecorder).xapplied_migrations)).apply)))
                          seq
                            bogusForceDataize.write (((((xexecutor).xloader).xbuild_graph)).apply)
                            bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("None: is there a None literal in the EO language?"))))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) ((((((xexecutor).xrecorder).xapplied_migrations)).apply)))
                xtest_migrations_applied_and_recorded_atomically.write
                  [xself]
                    memory > xoperations
                    memory > xexecutor
                    memory > xmigration_recorder
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          xoperations.write (((unsupported)).apply (((((xmigrations).xCreateModel)).apply ("model") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))))
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.migrations.executor.MigrationExecutor.record_migration"))) ((xrecord_migration)))
                          seq
                            (((unsupported)).apply (((xrecord_migration).xside_effect)) ((((xRuntimeError)).apply ("Recording migration failed."))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xRuntimeError)) ("Recording migration failed."))))
                              seq
                                bogusForceDataize.write ((((xexecutor).xapply_migration)).apply ((((xProjectState)).apply)) ((((xMigration)).apply ("0001_initial") ("record_migration"))))
                                bogusForceDataize.write ((((xexecutor).xmigrate)).apply ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        xmigration_recorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xmigration_recorder).xmigration_qs).xfilter)) ("record_migration") ("0001_initial")).xexists)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("record_migration_model"))
                xtest_migrations_not_applied_on_deferred_sql_failure.write
                  [xself]
                    memory > x__str__
                    memory > xatomic
                    memory > xexecutor
                    memory > xmigration_recorder
                    memory > xapply
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xDatabaseError)).apply ("Failed to apply deferred SQL"))))
                        (((unsupported)).apply (((xmigrations).xMigration)))
                          seq
                            xatomic.write FALSE
                            xapply.write
                              [xself xproject_state xschema_editor xcollect_sql]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write (((((xschema_editor).xdeferred_sql).xappend)).apply ((((xDeferredSQL)).apply)))
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ("Failed to apply deferred SQL"))))
                          bogusForceDataize.write ((((xexecutor).xapply_migration)).apply ((((xProjectState)).apply)) ((((xMigration)).apply ("0001_initial") ("deferred_sql"))))
                        xmigration_recorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xmigration_recorder).xmigration_qs).xfilter)) ("deferred_sql") ("0001_initial")).xexists)).apply)) (FALSE))
                xtest_migrate_skips_schema_creation.write
                  [xself xmocked_has_table]
                    memory > xexecutor
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xexecutor.write (((xMigrationExecutor)).apply ((xconnection)))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                          (((unsupported)).apply (((xexecutor).xmigrate)) ((((unsupported)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply)
              x__init__.write
                [xself xgraph xapplied]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xgraph)) ((xgraph)))
                      (((unsupported)).apply (((xself).xapplied_migrations)) ((xapplied)))
                      (((unsupported)).apply (((xself).xreplace_migrations)) (TRUE))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply (((xself).xname)) ((xname)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("M<%s>".mod ((xself).xname))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                unsupported
                xtest_minimize_rollbacks.write
                  [xself]
                    memory > xb1
                    memory > xgraph
                    memory > xexecutor
                    memory > xa2
                    memory > xa2_impl
                    memory > xa1
                    memory > xb1_impl
                    memory > xa1_impl
                    memory > xplan
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa1_impl.write (((xFakeMigration)).apply ("a1"))
                        xa1.write (((unsupported)).apply ("a") ("1"))
                        xa2_impl.write (((xFakeMigration)).apply ("a2"))
                        xa2.write (((unsupported)).apply ("a") ("2"))
                        xb1_impl.write (((xFakeMigration)).apply ("b1"))
                        xb1.write (((unsupported)).apply ("b") ("1"))
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa1)) ((xa1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa2)) ((xa2_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xb1)) ((xb1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xb1)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa2)) ((xa1)))
                        xexecutor.write (((xMigrationExecutor)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xexecutor).xloader)) ((((xFakeLoader)).apply ((xgraph)) ((((unsupported)).apply ((xa1)) ((xa1_impl)) ((xb1)) ((xb1_impl)) ((xa2)) ((xa2_impl)))))))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((xa1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply ((((unsupported)).apply ((xa2_impl)) (TRUE))))))
                xtest_minimize_rollbacks_branchy.write
                  [xself]
                    memory > xb1
                    memory > xgraph
                    memory > xb2
                    memory > xa4_impl
                    memory > xa2
                    memory > xa2_impl
                    memory > xb2_impl
                    memory > xshould_be_rolled_back
                    memory > xa3_impl
                    memory > xa1
                    memory > xb1_impl
                    memory > xa1_impl
                    memory > xplan
                    memory > xexecutor
                    memory > xa4
                    memory > xexp
                    memory > xa3
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa1_impl.write (((xFakeMigration)).apply ("a1"))
                        xa1.write (((unsupported)).apply ("a") ("1"))
                        xa2_impl.write (((xFakeMigration)).apply ("a2"))
                        xa2.write (((unsupported)).apply ("a") ("2"))
                        xa3_impl.write (((xFakeMigration)).apply ("a3"))
                        xa3.write (((unsupported)).apply ("a") ("3"))
                        xa4_impl.write (((xFakeMigration)).apply ("a4"))
                        xa4.write (((unsupported)).apply ("a") ("4"))
                        xb1_impl.write (((xFakeMigration)).apply ("b1"))
                        xb1.write (((unsupported)).apply ("b") ("1"))
                        xb2_impl.write (((xFakeMigration)).apply ("b2"))
                        xb2.write (((unsupported)).apply ("b") ("2"))
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa1)) ((xa1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa2)) ((xa2_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa3)) ((xa3_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa4)) ((xa4_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xb1)) ((xb1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xb2)) ((xb2_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa2)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa3)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa4)) ((xa2)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa4)) ((xa3)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xb2)) ((xb1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xb1)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xb2)) ((xa2)))
                        xexecutor.write (((xMigrationExecutor)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xexecutor).xloader)) ((((xFakeLoader)).apply ((xgraph)) ((((unsupported)).apply ((xa1)) ((xa1_impl)) ((xb1)) ((xb1_impl)) ((xa2)) ((xa2_impl)) ((xb2)) ((xb2_impl)) ((xa3)) ((xa3_impl)) ((xa4)) ((xa4_impl)))))))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((xa1)))))
                        xshould_be_rolled_back.write (((unsupported)).apply ((xb2_impl)) ((xa4_impl)) ((xa2_impl)) ((xa3_impl)))
                        xexp.write (((unsupported)).apply ((((unsupported)).apply ((xm)) (TRUE))) ((xm)) ((xshould_be_rolled_back)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexp)))
                xtest_backwards_nothing_to_do.write
                  [xself]
                    memory > xb1
                    memory > xgraph
                    memory > xexecutor
                    memory > xc1_impl
                    memory > xa2
                    memory > xa2_impl
                    memory > xc1
                    memory > xa1
                    memory > xb1_impl
                    memory > xa1_impl
                    memory > xplan
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa1_impl.write (((xFakeMigration)).apply ("a1"))
                        xa1.write (((unsupported)).apply ("a") ("1"))
                        xa2_impl.write (((xFakeMigration)).apply ("a2"))
                        xa2.write (((unsupported)).apply ("a") ("2"))
                        xb1_impl.write (((xFakeMigration)).apply ("b1"))
                        xb1.write (((unsupported)).apply ("b") ("1"))
                        xc1_impl.write (((xFakeMigration)).apply ("c1"))
                        xc1.write (((unsupported)).apply ("c") ("1"))
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa1)) ((xa1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xa2)) ((xa2_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xb1)) ((xb1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xc1)) ((xc1_impl)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xa2)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xb1)) ((xa1)))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((xc1)) ((xa1)))
                        xexecutor.write (((xMigrationExecutor)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xexecutor).xloader)) ((((xFakeLoader)).apply ((xgraph)) ((((unsupported)).apply ((xa1)) ((xa1_impl)) ((xb1)) ((xb1_impl)))))))
                        xplan.write ((((xexecutor).xmigration_plan)).apply ((((unsupported)).apply ((xa1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((((unsupported)).apply)))