memory > xthreading
memory > xnotice_h
memory > xGEOSContext
memory > xCONTEXT_PTR
memory > xproperty
memory > xGEOSBase
memory > xargs
memory > xgetattr
memory > xGEOSContextHandle
memory > xlgeos
memory > xerror_h
[] > threadsafe
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__str__
        memory > x_get_argtypes
        memory > xargtypes
        memory > xdestructor
        memory > x_set_errcheck
        memory > xhandle
        memory > xthread_context
        memory > xptr_type2
        memory > x__call__
        memory > x_set_restype
        memory > x_get_errcheck
        memory > xrestype
        memory > x_set_argtypes
        memory > x__init__
        memory > xerrcheck
        memory > x_get_restype
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xGEOSBase)))
              seq
                unsupported
                xptr_type2.write (xCONTEXT_PTR)
                xdestructor.write ((xlgeos).xfinishGEOS_r)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xptr)) (((((xlgeos).xinitGEOS_r)).apply ((xnotice_h)) ((xerror_h)))))
            (((unsupported)).apply (((xthreading).xlocal)))
              xhandle.write "None: is there a None literal in the EO language?"
            xthread_context.write (((xGEOSContext)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfunc_name]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcfunc)) ((((xgetattr)).apply ((xlgeos)) (((xfunc_name).add "_r")))))
                        (((unsupported)).apply (((xself).xthread_context)) ((xthread_context)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xthread_context).xhandle)) (((((xself).xthread_context).xhandle).or (((xGEOSContextHandle)).apply))))
                        (((unsupported)).apply (((((xself).xcfunc)).apply (((((xself).xthread_context).xhandle).xptr)) ((((unsupported)).apply ((xargs)))))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).x__name__)))
                x_get_argtypes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xargtypes)))
                x_set_argtypes.write
                  [xself xargtypes]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xargtypes)) ((((unsupported)).apply ((xCONTEXT_PTR)) ((((unsupported)).apply ((xargtypes)))))))
                xargtypes.write (((xproperty)).apply ((x_get_argtypes)) ((x_set_argtypes)))
                x_get_restype.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xrestype)))
                x_set_restype.write
                  [xself xrestype]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xrestype)) ((xrestype)))
                xrestype.write (((xproperty)).apply ((x_get_restype)) ((x_set_restype)))
                x_get_errcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xerrcheck)))
                x_set_errcheck.write
                  [xself xerrcheck]
                    seq > @
                      (((unsupported)).apply ((((xself).xcfunc).xerrcheck)) ((xerrcheck)))
                xerrcheck.write (((xproperty)).apply ((x_get_errcheck)) ((x_set_errcheck)))