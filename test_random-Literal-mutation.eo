memory > xmu
memory > xSubClass6
memory > xrange
memory > xSubClass7
memory > xtype
memory > xkappa
memory > xMySeed
memory > xSubClass1
memory > xrandom_mock
memory > xk
memory > xexpected
memory > xldexp
memory > xpickle
memory > xlist
memory > xSubclass
memory > xseq
memory > xpi
memory > xValueError
memory > xstr
memory > xUserWarning
memory > xsigmasqrd
memory > xwarnings
memory > xfile
memory > xBadInt
memory > xvalue
memory > xSubClass2
memory > xstop
memory > xspan
memory > xNotImplementedError
memory > xeval
memory > x_
memory > xIndexError
memory > xbytearray
memory > xweights
memory > xSubClass3
memory > xstart
memory > xproto
memory > xrandom
memory > xopen
memory > xf
memory > xw
memory > xFraction
memory > xset
memory > xvariate
memory > xint
memory > xr
memory > xtime
memory > xOverflowError
memory > xsample
memory > xsum
memory > xx
memory > xfsum
memory > xi
memory > xarg
memory > xMixin2
memory > xsin
memory > xsupport
memory > xshuffled_seq
memory > xtuple
memory > xexp
memory > xfactorial
memory > xfloat
memory > xargs
memory > xos
memory > xSubClass4
memory > xdir
memory > xpartial
memory > xe
memory > xTestBasicOps
memory > xzip
memory > xunittest
memory > xn
memory > xobject
memory > xstatus
memory > xSubClass8
memory > xMixin1
memory > xseed
memory > xlen
memory > xdict
memory > xSubClass5
memory > xTypeError
memory > x__name__
memory > xa
[] > test_random
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest__all__
        memory > xtest_avg_std
        memory > xtest_53_bits_per_float
        memory > xtest_shuffle_random_argument
        memory > xgamma
        memory > xtestMagicConstants
        memory > xtest_gammavariate_errors
        memory > xtest_bigrand
        memory > xtest_gammavariate_alpha_equal_one_equals_expovariate
        memory > xtest_strong_reference_implementation
        memory > xtest_bug_1727780
        memory > xtest_randrange_bug_1590891
        memory > xtest_constant
        memory > xtest_gauss
        memory > xtest_sample_on_dicts
        memory > xtest_after_fork
        memory > xtest_genrandbits
        memory > xtest_shuffle
        memory > xtest_sample_inputs
        memory > xtest_randrange_nonunit_step
        memory > xtest_pickling
        memory > xtest_gammavariate_alpha_equal_one
        memory > xtest_setstate_middle_arg
        memory > xSystemRandom_available
        memory > xtest_randrange_uses_getrandbits
        memory > xtest_long_seed
        memory > xtest_betavariate_return_zero
        memory > xtest_guaranteed_stable
        memory > xtest_von_mises_range
        memory > xtest_randbelow_without_getrandbits
        memory > xtest_sample
        memory > xtest_choices_subnormal
        memory > xtest_bug_27706
        memory > xtest_randrange_errors
        memory > xtest_bigrand_ranges
        memory > xtest_choice
        memory > xtest_saverestore
        memory > xtest_seedargs
        memory > xtest_von_mises_large_kappa
        memory > xtest_referenceImplementation
        memory > xtest_gammavariate_alpha_between_zero_and_one
        memory > xtest_zeroinputs
        memory > xrandomlist
        memory > xtest_gammavariate_alpha_greater_one
        memory > xtest_choices_algorithms
        memory > xtest_choices
        memory > xtest_bug_31478
        memory > xtest_bug_9025
        memory > xtest_rangelimits
        memory > xtest_seed_when_randomness_source_not_found
        memory > xtest_autoseed
        memory > xtest_bug_31482
        memory > xtest_random_subclass_with_kwargs
        memory > xgen
        memory > xtest_setstate_first_arg
        memory > xtest_sample_distribution
        memory > xtest_randbelow_logic
        memory > xtest_subclasses_overriding_methods
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xrandomlist.write
                  [xself xn]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((((((xself).xgen).xrandom)).apply)) ((xi)) ((((xrange)).apply ((xn)))))))
                xtest_autoseed.write
                  [xself]
                    memory > xstate2
                    memory > xstate1
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply)
                        xstate1.write (((((xself).xgen).xgetstate)).apply)
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply)
                        xstate2.write (((((xself).xgen).xgetstate)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xstate1)) ((xstate2)))
                xtest_saverestore.write
                  [xself]
                    memory > xN
                    memory > xstate
                    memory > xrandseq
                    seq > @
                      seq
                        xN.write 1000
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply)
                        xstate.write (((((xself).xgen).xgetstate)).apply)
                        xrandseq.write ((((xself).xrandomlist)).apply ((xN)))
                        bogusForceDataize.write (((((xself).xgen).xsetstate)).apply ((xstate)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrandseq)) (((((xself).xrandomlist)).apply ((xN)))))
                xtest_seedargs.write
                  [xself]
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((1729.neg)))
                        (((unsupported)).apply ((xarg)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (0) (0) (1) (1) ((1.neg)) ((1.neg)) ((((unsupported)).apply (10) (20))) (((((unsupported)).apply (10) (20)).neg)) (3.14) ((1.add (((unsupported)).apply))) ("a") ((((xtuple)).apply ("abc"))) ((((xMySeed)).apply)))))
                          bogusForceDataize.write (((((xself).xgen).xseed)).apply ((xarg)))
                        (((unsupported)).apply ((xarg)) ((((unsupported)).apply ((((xlist)).apply ((((xrange)).apply (3))))) ((((unsupported)).apply ((xdict)) (1))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xseed)) ((xarg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xseed)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xtype)).apply (((xself).xgen)))) ((((unsupported)).apply)))
                xtest_seed_when_randomness_source_not_found.write
                  [xself xurandom_mock]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xurandom_mock).xside_effect)) ((xNotImplementedError)))
                        bogusForceDataize.write ((((xself).xtest_seedargs)).apply)
                xtest_shuffle.write
                  [xself]
                    memory > xshuffle
                    memory > xseqs
                    memory > xshuffled_seqs
                    memory > xshuffled_lst
                    memory > xlst
                    seq > @
                      seq
                        xshuffle.write (((xself).xgen).xshuffle)
                        xlst.write (((unsupported)).apply)
                        bogusForceDataize.write (((xshuffle)).apply ((xlst)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply)))
                        xlst.write (((unsupported)).apply (37))
                        bogusForceDataize.write (((xshuffle)).apply ((xlst)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlst)) ((((unsupported)).apply (37))))
                        xseqs.write (((unsupported)).apply ((((xlist)).apply ((((xrange)).apply ((xn)))))) ((xn)) ((((xrange)).apply (10))))
                        xshuffled_seqs.write (((unsupported)).apply ((((xlist)).apply ((((xrange)).apply ((xn)))))) ((xn)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((xshuffled_seq)) ((xshuffled_seqs)))
                          bogusForceDataize.write (((xshuffle)).apply ((xshuffled_seq)))
                        (((unsupported)).apply ((((unsupported)).apply ((xseq)) ((xshuffled_seq)))) ((((xzip)).apply ((xseqs)) ((xshuffled_seqs)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseq)))) ((((xlen)).apply ((xshuffled_seq)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xseq)))) ((((xset)).apply ((xshuffled_seq)))))
                        xlst.write (((xlist)).apply ((((xrange)).apply (1000))))
                        xshuffled_lst.write (((xlist)).apply ((((xrange)).apply (1000))))
                        bogusForceDataize.write (((xshuffle)).apply ((xshuffled_lst)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlst).neq (xshuffled_lst))))
                        bogusForceDataize.write (((xshuffle)).apply ((xlst)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlst).neq (xshuffled_lst))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xshuffle)) ((((unsupported)).apply (1) (2) (3))))
                xtest_shuffle_random_argument.write
                  [xself]
                    memory > xmock_random
                    memory > xseq
                    memory > xshuffle
                    seq > @
                      seq
                        xshuffle.write (((xself).xgen).xshuffle)
                        xmock_random.write (((unsupported)).apply ((((xunittest).xmock).xMock)) (0.5))
                        xseq.write (((xbytearray)).apply ("abcdefghijk"))
                        bogusForceDataize.write (((xshuffle)).apply ((xseq)) ((xmock_random)))
                        bogusForceDataize.write ((((xmock_random).xassert_called_with)).apply)
                xtest_choice.write
                  [xself]
                    memory > xchoice
                    seq > @
                      seq
                        xchoice.write (((xself).xgen).xchoice)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          bogusForceDataize.write (((xchoice)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchoice)).apply ((((unsupported)).apply (50))))) (50))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xchoice)).apply ((((unsupported)).apply (25) (75))))) ((((unsupported)).apply (25) (75))))
                xtest_sample.write
                  [xself]
                    memory > xs
                    memory > xuniq
                    memory > xN
                    memory > xpopulation
                    seq > @
                      seq
                        xN.write 101
                        xpopulation.write (((xrange)).apply ((xN)))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (((xN).add 1)))))
                          seq
                            xs.write (((((xself).xgen).xsample)).apply ((xpopulation)) ((xk)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xk)))
                            xuniq.write (((xset)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xuniq)))) ((xk)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xuniq).leq (((xset)).apply ((xpopulation))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xgen).xsample)).apply ((((unsupported)).apply)) (0))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xsample)) ((xpopulation)) (((xN).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xsample)) ((((unsupported)).apply)) ((1.neg)))
                xtest_sample_distribution.write
                  [xself]
                    memory > xexpected
                    memory > xpop
                    memory > xperms
                    memory > xtrials
                    memory > xn
                    seq > @
                      seq
                        xn.write 6
                        xpop.write (((xrange)).apply ((xn)))
                        xtrials.write 10001
                        (((unsupported)).apply ((xk)) ((((xrange)).apply ((xn)))))
                          seq
                            xexpected.write (((unsupported)).apply ((((xfactorial)).apply ((xn)))) ((((xfactorial)).apply (((xn).sub (xk))))))
                            xperms.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xtrials)))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xperms)) ((((xtuple)).apply ((((((xself).xgen).xsample)).apply ((xpop)) ((xk)))))))) ("None: is there a None literal in the EO language?"))
                                ((((xlen)).apply ((xperms))).eq (xexpected)).if
                                  (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xfail)).apply)
                xtest_sample_inputs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xgen).xsample)).apply ((((xset)).apply ((((xrange)).apply (20))))) (2))
                        bogusForceDataize.write (((((xself).xgen).xsample)).apply ((((xrange)).apply (20))) (2))
                        bogusForceDataize.write (((((xself).xgen).xsample)).apply ((((xrange)).apply (20))) (2))
                        bogusForceDataize.write (((((xself).xgen).xsample)).apply ((((xstr)).apply ("abcdefghijklmnopqrst"))) (2))
                        bogusForceDataize.write (((((xself).xgen).xsample)).apply ((((xtuple)).apply ("abcdefghijklmnopqrst"))) (2))
                xtest_sample_on_dicts.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xsample)) (((((xdict).xfromkeys)).apply ("abcdef"))) (2))
                xtest_choices.write
                  [xself]
                    memory > xdata
                    memory > xset_data
                    memory > xstr_data
                    memory > xrange_data
                    memory > xchoices
                    seq > @
                      seq
                        xchoices.write (((xself).xgen).xchoices)
                        xdata.write (((unsupported)).apply ("red") ("green") ("blue") ("yellow"))
                        xstr_data.write "abcd"
                        xrange_data.write (((xrange)).apply (4))
                        xset_data.write (((xset)).apply ((((xrange)).apply (4))))
                        (((unsupported)).apply ((xsample)) ((((unsupported)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) (5))) ((((unsupported)).apply ((xchoices)) ((xdata)) ((((xrange)).apply (4))) (5))) ((((unsupported)).apply ((xchoices)) (5) ((xdata)) ((((xrange)).apply (4))))) ((((unsupported)).apply ((xchoices)) (5) ((xdata)) ((((xrange)).apply (4))))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xsample)))) (5))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xsample)))) ((xlist)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((xsample))).leq (((xset)).apply ((xdata))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xchoices)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) (0))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) ((1.neg)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) (2.5))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xstr_data)) (5)))).leq (((xset)).apply ((xstr_data))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xrange_data)) (5)))).leq (((xset)).apply ((xrange_data))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xset_data)) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) ("None: is there a None literal in the EO language?") (5)))).leq (((xset)).apply ((xdata))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) ("None: is there a None literal in the EO language?") (5)))).leq (((xset)).apply ((xdata))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) ((((unsupported)).apply (1) (2))) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) (10) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 4)) (5))
                        (((unsupported)).apply ((xweights)) ((((unsupported)).apply ((((unsupported)).apply (15) (10) (25) (30))) ((((unsupported)).apply (15.1) (10.2) (25.2) (30.3))) ((((unsupported)).apply ((((xFraction)).apply (1) (3))) ((((xFraction)).apply (2) (6))) ((((xFraction)).apply (3) (6))) ((((xFraction)).apply (4) (6))))) ((((unsupported)).apply (TRUE) (FALSE) (TRUE) (FALSE))))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) ((xweights)) (5)))).leq (((xset)).apply ((xdata))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) ((((unsupported)).apply (1) (2))) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) (10) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 4)) (5))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xchoices)) ((xdata)) ((((xrange)).apply (4))) ((((xrange)).apply (4))) (5))
                        (((unsupported)).apply ((xweights)) ((((unsupported)).apply ((((unsupported)).apply (15) (10) (25) (30))) ((((unsupported)).apply (15.1) (10.2) (25.2) (30.3))) ((((unsupported)).apply ((((xFraction)).apply (1) (3))) ((((xFraction)).apply (2) (6))) ((((xFraction)).apply (3) (6))) ((((xFraction)).apply (4) (6))))))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((((unsupported)).apply ((xchoices)) ((xdata)) ((xweights)) (5)))).leq (((xset)).apply ((xdata))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchoices)).apply ("abcd") ((((unsupported)).apply (1) (0) (0) (0))))) ((((unsupported)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchoices)).apply ("abcd") ((((unsupported)).apply (0) (1) (0) (0))))) ((((unsupported)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchoices)).apply ("abcd") ((((unsupported)).apply (0) (0) (1) (0))))) ((((unsupported)).apply ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xchoices)).apply ("abcd") ((((unsupported)).apply (0) (0) (0) (1))))) ((((unsupported)).apply ("d"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xchoices)) ((((unsupported)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xchoices)) ((((unsupported)).apply)) ((((unsupported)).apply)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                          (((unsupported)).apply ((xchoices)) ((((unsupported)).apply)) ((((unsupported)).apply)) (5))
                xtest_choices_subnormal.write
                  [xself]
                    memory > xchoices
                    seq > @
                      seq
                        xchoices.write (((xself).xgen).xchoices)
                        (((unsupported)).apply ((xchoices)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) (5000))
                xtest_gauss.write
                  [xself]
                    memory > xy1
                    memory > xx2
                    memory > xy2
                    memory > xx1
                    seq > @
                      (((unsupported)).apply ((xseed)) ((((unsupported)).apply (1) (12) (123) (1234) (12345) (123456) (654321))))
                        seq
                          bogusForceDataize.write (((((xself).xgen).xseed)).apply ((xseed)))
                          xx1.write (((((xself).xgen).xrandom)).apply)
                          xy1.write (((((xself).xgen).xgauss)).apply (0) (1))
                          bogusForceDataize.write (((((xself).xgen).xseed)).apply ((xseed)))
                          xx2.write (((((xself).xgen).xrandom)).apply)
                          xy2.write (((((xself).xgen).xgauss)).apply (0) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx1)) ((xx2)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy1)) ((xy2)))
                xtest_pickling.write
                  [xself]
                    memory > xstate
                    memory > xorigseq
                    memory > xrestoredseq
                    memory > xnewgen
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xstate.write ((((xpickle).xdumps)).apply (((xself).xgen)) ((xproto)))
                          xorigseq.write (((unsupported)).apply ((((((xself).xgen).xrandom)).apply)) ((xi)) ((((xrange)).apply (10))))
                          xnewgen.write ((((xpickle).xloads)).apply ((xstate)))
                          xrestoredseq.write (((unsupported)).apply (((((xnewgen).xrandom)).apply)) ((xi)) ((((xrange)).apply (10))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xorigseq)) ((xrestoredseq)))
                xtest_bug_1727780.write
                  [xself]
                    memory > xr
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply ((((unsupported)).apply ("randv2_32.pck") (780))) ((((unsupported)).apply ("randv2_64.pck") (866))) ((((unsupported)).apply ("randv3.pck") (343))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfile)) ((xvalue)))) ((xfiles)))
                          seq
                            (((unsupported)).apply ((((xopen)).apply (((((xsupport).xfindfile)).apply ((xfile)))) ("rb"))) ((xf)))
                              xr.write ((((xpickle).xload)).apply ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((((xr).xrandom)).apply).mul 1000)))) ((xvalue)))
                xtest_bug_9025.write
                  [xself]
                    memory > xn
                    memory > xk
                    memory > xrandrange
                    seq > @
                      seq
                        xn.write 100001
                        xrandrange.write (((xself).xgen).xrandrange)
                        xk.write (((xsum)).apply ((((unsupported)).apply ((((((xrandrange)).apply ((((unsupported)).apply))).mod 3).eq 2)) ((xi)) ((((xrange)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0.30) (((xk).div (xn))) ((((unsupported)).apply)))) (((xk).div (xn))))
            (((unsupported)).apply ((xNotImplementedError)))
              bogusForceDataize.write (((((((xrandom).xSystemRandom)).apply).xrandom)).apply)
              xSystemRandom_available.write FALSE
              xSystemRandom_available.write TRUE
            (((unsupported)).apply ((xTestBasicOps)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xSystemRandom_available)) ("random.SystemRandom not available"))))
              seq
                xgen.write ((((xrandom).xSystemRandom)).apply)
                xtest_autoseed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xgen).xseed)).apply)
                xtest_saverestore.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((xself).xgen).xgetstate)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((xself).xgen).xsetstate)) ("None: is there a None literal in the EO language?"))
                xtest_seedargs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xgen).xseed)).apply (100))
                xtest_gauss.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xgen).xgauss_next)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xgen).xgauss_next)) ("None: is there a None literal in the EO language?"))
                xtest_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xpickle).xdumps)) (((xself).xgen)) ((xproto)))
                xtest_53_bits_per_float.write
                  [xself]
                    memory > xspan
                    memory > xcum
                    seq > @
                      seq
                        xspan.write (((unsupported)).apply (2) (53))
                        xcum.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((xcum)) ((((xint)).apply (((((((xself).xgen).xrandom)).apply).mul (xspan))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((xspan).sub 1)))
                xtest_bigrand.write
                  [xself]
                    memory > xr
                    memory > xspan
                    memory > xcum
                    seq > @
                      seq
                        xspan.write (((unsupported)).apply (2) (500))
                        xcum.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xr.write (((((xself).xgen).xrandrange)).apply ((xspan)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xr)) ((xspan)))))
                            (((unsupported)).apply ((xcum)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((xspan).sub 1)))
                xtest_bigrand_ranges.write
                  [xself]
                    memory > xstop
                    memory > xstart
                    seq > @
                      (((unsupported)).apply ((xi)) ((((unsupported)).apply (40) (80) (160) (200) (211) (250) (375) (512) (550))))
                        seq
                          xstart.write (((((xself).xgen).xrandrange)).apply ((((unsupported)).apply (2) (((xi).sub 2)))))
                          xstop.write (((((xself).xgen).xrandrange)).apply ((((unsupported)).apply (2) ((xi)))))
                          ((xstop).leq (xstart)).if
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstart)) ((((((xself).xgen).xrandrange)).apply ((xstart)) ((xstop)))) ((xstop)))))
                xtest_rangelimits.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xstop)))) ((((unsupported)).apply ((((unsupported)).apply ((2.neg)) (0))) ((((unsupported)).apply ((((((unsupported)).apply (2) (60)).neg).sub 2)) (((((unsupported)).apply (2) (60)).neg)))) ((((unsupported)).apply ((((unsupported)).apply (2) (60))) (((((unsupported)).apply (2) (60)).add 2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xrange)).apply ((xstart)) ((xstop)))))) ((((xset)).apply ((((unsupported)).apply ((((((xself).xgen).xrandrange)).apply ((xstart)) ((xstop)))) ((xi)) ((((xrange)).apply (100))))))))
                xtest_randrange_nonunit_step.write
                  [xself]
                    memory > xrint
                    seq > @
                      seq
                        xrint.write (((((xself).xgen).xrandrange)).apply (0) (10) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xrint)) ((((unsupported)).apply (0) (2) (4) (6) (8))))
                        xrint.write (((((xself).xgen).xrandrange)).apply (0) (2) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrint)) (0))
                xtest_randrange_errors.write
                  [xself]
                    memory > xraises
                    seq > @
                      seq
                        xraises.write (((xpartial)).apply (((xself).xassertRaises)) ((xValueError)) ((((xself).xgen).xrandrange)))
                        bogusForceDataize.write (((xraises)).apply (3) (3))
                        bogusForceDataize.write (((xraises)).apply ((721.neg)))
                        bogusForceDataize.write (((xraises)).apply (0) (100) ((12.neg)))
                        bogusForceDataize.write (((xraises)).apply (3.14159))
                        bogusForceDataize.write (((xraises)).apply (0) (2.71828))
                        bogusForceDataize.write (((xraises)).apply (0) (42) (0))
                        bogusForceDataize.write (((xraises)).apply (0) (42) (3.14159))
                xtest_genrandbits.write
                  [xself]
                    memory > xgetbits
                    memory > xcum
                    seq > @
                      seq
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (1) (1000))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((((((xself).xgen).xgetrandbits)).apply ((xk)))) ((((unsupported)).apply (2) ((xk)))))))
                        xgetbits.write (((xself).xgen).xgetrandbits)
                        (((unsupported)).apply ((xspan)) ((((unsupported)).apply (1) (2) (3) (4) (31) (32) (32) (52) (53) (54) (119) (127) (128) (129))))
                          seq
                            xcum.write 1
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                              (((unsupported)).apply ((xcum)) ((((xgetbits)).apply ((xspan)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((((unsupported)).apply (2) ((xspan))).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xgetrandbits)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xgetrandbits)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)) (10.1))
                xtest_randbelow_logic.write
                  [xself x_log xint]
                    memory > xn
                    memory > xk
                    memory > xnumbits
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (1000))))
                          seq
                            xn.write (((unsupported)).apply (1) ((xi)))
                            xnumbits.write ((xi).add 1)
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((xnumbits)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((((unsupported)).apply (2) (((xk).sub 1)))))
                            (((unsupported)).apply ((xn)) (((xn).sub 1)))
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((((unsupported)).apply ((xnumbits)) (((xnumbits).add 1)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (2) ((xk)))) ((xn)) ((((unsupported)).apply (2) (((xk).sub 2)))))))
                            (((unsupported)).apply ((xn)) ((((unsupported)).apply ((xn)) (15))))
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((xnumbits)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (2) ((xk)))) ((xn)) ((((unsupported)).apply (2) (((xk).sub 1)))))))
            (((unsupported)).apply ((xTestBasicOps)) (((xunittest).xTestCase)))
              seq
                xgen.write ((((xrandom).xRandom)).apply)
                xtest_guaranteed_stable.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xgen).xseed)) (3456147) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.ac362300d90d2p-1") ("0x1.9d16f74365005p-1") ("0x1.1ebb4352e4c4dp-1") ("0x1.1a7422abf9c11p-1"))))
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("the quick brown fox") (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.1239ddfb11b7cp-3") ("0x1.b3cbb5c51b120p-4") ("0x1.8c4f55116b60fp-1") ("0x1.63eb525174a27p-1"))))
                xtest_bug_27706.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("nofar") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.8645314505ad7p-1") ("0x1.afb1f82e40a40p-5") ("0x1.2a59d2285e971p-1") ("0x1.56977142a7880p-6"))))
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("rachel") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.0b294cc856fcdp-1") ("0x1.2ad22d79e77b8p-3") ("0x1.3052b9c072678p-2") ("0x1.578f332106574p-3"))))
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.b0580f98a7dbep-1") ("0x1.84129978f9c1ap-1") ("0x1.aeaa51052e978p-2") ("0x1.092178fb945a6p-2"))))
                xtest_bug_31478.write
                  [xself]
                    memory > x__abs__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          x__abs__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((((xself).xgen).xseed)).apply ((((xBadInt)).apply)))
                xtest_bug_31482.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("nofar") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.8645314505ad7p-1") ("0x1.afb1f82e40a40p-5") ("0x1.2a59d2285e971p-1") ("0x1.56977142a7880p-6"))))
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("rachel") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.0b294cc856fcdp-1") ("0x1.2ad22d79e77b8p-3") ("0x1.3052b9c072678p-2") ("0x1.578f332106574p-3"))))
                        (((unsupported)).apply ((((xself).xgen).xseed)) ("") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.b0580f98a7dbep-1") ("0x1.84129978f9c1ap-1") ("0x1.aeaa51052e978p-2") ("0x1.092178fb945a6p-2"))))
                        xb.write "x00x20x40x60x80xA0xC0xE0xF0"
                        (((unsupported)).apply ((((xself).xgen).xseed)) ((xb)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((((xself).xgen).xrandom)).apply).xhex)).apply)) ((xi)) ((((xrange)).apply (4))))) ((((unsupported)).apply ("0x1.52c2fde444d23p-1") ("0x1.875174f0daea4p-2") ("0x1.9e9b2c50e5cd2p-1") ("0x1.fa57768bd321cp-2"))))
                xtest_setstate_first_arg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_setstate_middle_arg.write
                  [xself]
                    memory > xbits100
                    memory > xstate
                    memory > xstate_values
                    memory > xstart_state
                    seq > @
                      seq
                        xstart_state.write (((((xself).xgen).xgetstate)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (2) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (2) ((((unsupported)).apply (1) (2) (3))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (2) (((((unsupported)).apply ("a")).mul 625)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (2) ((((((unsupported)).apply (0)).mul 624).add (((unsupported)).apply ("a")))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          bogusForceDataize.write (((((xself).xgen).xsetstate)).apply ((((unsupported)).apply (2) ((((((unsupported)).apply (1)).mul 624).add (((unsupported)).apply (625)))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          bogusForceDataize.write (((((xself).xgen).xsetstate)).apply ((((unsupported)).apply (2) ((((((unsupported)).apply (1)).mul 624).add (((unsupported)).apply ((1.neg))))) ("None: is there a None literal in the EO language?"))))
                        xbits100.write (((((xself).xgen).xgetrandbits)).apply (100))
                        bogusForceDataize.write (((((xself).xgen).xsetstate)).apply ((xstart_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xgen).xgetrandbits)).apply (100))) ((xbits100)))
                        xstate_values.write (((unsupported)).apply ((((((xself).xgen).xgetstate)).apply)) (1))
                        xstate_values.write (((xlist)).apply ((xstate_values)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstate_values)) ((1.neg)))) ((((xfloat)).apply ("nan"))))
                        xstate.write (((unsupported)).apply ((((xint)).apply ((xx)))) ((xx)) ((xstate_values)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xsetstate)) ((((unsupported)).apply (2) ((xstate)) ("None: is there a None literal in the EO language?"))))
                xtest_referenceImplementation.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply (0.45839803073713259) (0.86057815201978782) (0.92848331726782152) (0.35932681119782461) (0.081823493762449573) (0.14332226470169329) (0.084297823823520024) (0.53814864671831453) (0.089215024911993401) (0.78486196105372907))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply ((((61731.add (((unsupported)).apply (24903) (32))).add (((unsupported)).apply (614) (64))).add (((unsupported)).apply (42143) (96)))))
                        xactual.write (((unsupported)).apply (((((xself).xrandomlist)).apply (2000))) ((((unsupported)).apply ((10.neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xe)))) ((((xzip)).apply ((xactual)) ((xexpected)))))
                          (((unsupported)).apply (((xself).xassertAlmostEqual)) ((xa)) ((xe)) (14))
                xtest_strong_reference_implementation.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply ((((61731.add (((unsupported)).apply (24903) (32))).add (((unsupported)).apply (614) (64))).add (((unsupported)).apply (42143) (96)))))
                        xactual.write (((unsupported)).apply (((((xself).xrandomlist)).apply (2000))) ((((unsupported)).apply ((10.neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xe)))) ((((xzip)).apply ((xactual)) ((xexpected)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xldexp)).apply ((xa)) (53))))) ((xe)))
                xtest_long_seed.write
                  [xself]
                    memory > xseed
                    seq > @
                      seq
                        xseed.write ((((unsupported)).apply (1) ((10000.mul 8))).sub 1)
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply ((xseed)))
                xtest_53_bits_per_float.write
                  [xself]
                    memory > xspan
                    memory > xcum
                    seq > @
                      seq
                        xspan.write (((unsupported)).apply (2) (53))
                        xcum.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((xcum)) ((((xint)).apply (((((((xself).xgen).xrandom)).apply).mul (xspan))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((xspan).sub 1)))
                xtest_bigrand.write
                  [xself]
                    memory > xr
                    memory > xspan
                    memory > xcum
                    seq > @
                      seq
                        xspan.write (((unsupported)).apply (2) (500))
                        xcum.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xr.write (((((xself).xgen).xrandrange)).apply ((xspan)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xr)) ((xspan)))))
                            (((unsupported)).apply ((xcum)) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((xspan).sub 1)))
                xtest_bigrand_ranges.write
                  [xself]
                    memory > xstop
                    memory > xstart
                    seq > @
                      (((unsupported)).apply ((xi)) ((((unsupported)).apply (40) (80) (160) (200) (211) (250) (375) (512) (550))))
                        seq
                          xstart.write (((((xself).xgen).xrandrange)).apply ((((unsupported)).apply (2) (((xi).sub 2)))))
                          xstop.write (((((xself).xgen).xrandrange)).apply ((((unsupported)).apply (2) ((xi)))))
                          ((xstop).leq (xstart)).if
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstart)) ((((((xself).xgen).xrandrange)).apply ((xstart)) ((xstop)))) ((xstop)))))
                xtest_rangelimits.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xstop)))) ((((unsupported)).apply ((((unsupported)).apply ((2.neg)) (0))) ((((unsupported)).apply ((((((unsupported)).apply (2) (60)).neg).sub 2)) (((((unsupported)).apply (2) (60)).neg)))) ((((unsupported)).apply ((((unsupported)).apply (2) (60))) (((((unsupported)).apply (2) (60)).add 2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((((xrange)).apply ((xstart)) ((xstop)))))) ((((xset)).apply ((((unsupported)).apply ((((((xself).xgen).xrandrange)).apply ((xstart)) ((xstop)))) ((xi)) ((((xrange)).apply (100))))))))
                xtest_genrandbits.write
                  [xself]
                    memory > xgetbits
                    memory > xcum
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (1234567))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xgen).xgetrandbits)).apply (100))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (1) (1000))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((((((xself).xgen).xgetrandbits)).apply ((xk)))) ((((unsupported)).apply (2) ((xk)))))))
                        xgetbits.write (((xself).xgen).xgetrandbits)
                        (((unsupported)).apply ((xspan)) ((((unsupported)).apply (1) (2) (3) (4) (31) (32) (32) (52) (53) (54) (119) (127) (128) (129))))
                          seq
                            xcum.write 1
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                              (((unsupported)).apply ((xcum)) ((((xgetbits)).apply ((xspan)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcum)) (((((unsupported)).apply (2) ((xspan))).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xgen).xgetrandbits)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xgetrandbits)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xgen).xgetrandbits)) ((1.neg)))
                xtest_randrange_uses_getrandbits.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (1234567))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xgen).xrandrange)).apply ((((unsupported)).apply (2) (99))))) ((((unsupported)).apply)))
                xtest_randbelow_logic.write
                  [xself x_log xint]
                    memory > xn
                    memory > xk
                    memory > xnumbits
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (1000))))
                          seq
                            xn.write (((unsupported)).apply (1) ((xi)))
                            xnumbits.write ((xi).add 1)
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((xnumbits)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((((unsupported)).apply (2) (((xk).sub 1)))))
                            (((unsupported)).apply ((xn)) (((xn).sub 1)))
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((((unsupported)).apply ((xnumbits)) (((xnumbits).add 1)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (2) ((xk)))) ((xn)) ((((unsupported)).apply (2) (((xk).sub 2)))))))
                            (((unsupported)).apply ((xn)) ((((unsupported)).apply ((xn)) (15))))
                            xk.write (((xint)).apply ((1.00001.add (((x_log)).apply ((xn)) (2)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((xnumbits)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (2) ((xk)))) ((xn)) ((((unsupported)).apply (2) (((xk).sub 1)))))))
                xtest_randbelow_without_getrandbits.write
                  [xself]
                    memory > xn
                    memory > xlimit
                    memory > xepsilon
                    memory > xmaxsize
                    seq > @
                      seq
                        xmaxsize.write (((unsupported)).apply (1) (((xrandom).xBPF)))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xUserWarning)))
                            (((unsupported)).apply ((((xself).xgen).x_randbelow_without_getrandbits)) (((xmaxsize).add 1)) ((xmaxsize)))
                        (((unsupported)).apply ((((xself).xgen).x_randbelow_without_getrandbits)) (5640) ((xmaxsize)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply ((((xself).xgen).x_randbelow_without_getrandbits)) (0) ((xmaxsize)))
                        xn.write 43
                        xepsilon.write 0.01
                        xlimit.write (((xmaxsize).sub ((xmaxsize).mod (xn))).div (xmaxsize))
                        (((unsupported)).apply (((((((xunittest).xmock).xpatch).xobject)).apply (((xrandom).xRandom)) ("random"))) ((xrandom_mock)))
                          seq
                            (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply (((xlimit).add (xepsilon))) (((xlimit).sub (xepsilon))))))
                            (((unsupported)).apply ((((xself).xgen).x_randbelow_without_getrandbits)) ((xn)) ((xmaxsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xrandom_mock).xcall_count)) (2))
                xtest_randrange_bug_1590891.write
                  [xself]
                    memory > xstop
                    memory > xx
                    memory > xstart
                    memory > xstep
                    seq > @
                      seq
                        xstart.write (((unsupported)).apply)
                        xstop.write ((((unsupported)).apply).neg)
                        xstep.write (200.neg)
                        xx.write (((((xself).xgen).xrandrange)).apply ((xstart)) ((xstop)) ((xstep)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstop)) ((xx)) ((xstart)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xx).add (xstop)).mod (xstep))) (0))
                xtest_choices_algorithms.write
                  [xself]
                    memory > xc
                    memory > xpopulation
                    memory > xb
                    memory > xweights
                    memory > xexpanded_population
                    memory > xchoices
                    memory > xn
                    memory > xcum_weights
                    memory > xa
                    seq > @
                      seq
                        xchoices.write (((xself).xgen).xchoices)
                        xn.write 104730
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (8675309))
                        xa.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((((xrange)).apply ((xn)))) (10000))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (8675309))
                        xb.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((((xrange)).apply ((xn)))) (((((unsupported)).apply (1)).mul (xn))) (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (8675309))
                        xc.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((((xrange)).apply ((xn)))) ((((xrange)).apply (1) (((xn).add 1)))) (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xc)))
                        xpopulation.write (((unsupported)).apply ("Red") ("Black") ("Green"))
                        xweights.write (((unsupported)).apply (18) (18) (2))
                        xcum_weights.write (((unsupported)).apply (18) (36) (38))
                        xexpanded_population.write ((((((unsupported)).apply ("Red")).mul 18).add ((((unsupported)).apply ("Black")).mul 18)).add ((((unsupported)).apply ("Green")).mul 2))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (9035768))
                        xa.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((xexpanded_population)) (10000))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (9035768))
                        xb.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((xpopulation)) ((xweights)) (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        bogusForceDataize.write (((((xself).xgen).xseed)).apply (9035768))
                        xc.write (((unsupported)).apply ((((xself).xgen).xchoices)) ((xpopulation)) ((xcum_weights)) (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xc)))
            xgamma.write
              [xz xsqrt2pi]
                memory > xaz
                seq > @
                  (((unsupported)).apply)
                    ((xz).less 0.5).if
                      (((unsupported)).apply ((((xpi).div (((xsin)).apply (((xpi).mul (xz))))).div (((xgamma)).apply ((1.0.sub (xz)))))))
                    xaz.write ((xz).add (7.0.sub 0.5))
                    (((unsupported)).apply (((((((unsupported)).apply ((xaz)) (((xz).sub 0.5))).div (((xexp)).apply ((xaz)))).mul (xsqrt2pi)).mul (((xfsum)).apply ((((unsupported)).apply (0.9999999999995183) ((676.5203681218835.div (xz))) (((1259.139216722289.neg).div ((xz).add 1.0))) ((771.3234287757674.div ((xz).add 2.0))) (((176.6150291498386.neg).div ((xz).add 3.0))) ((12.50734324009056.div ((xz).add 4.0))) (((0.1385710331296526.neg).div ((xz).add 5.0))) (((((unsupported)).apply).div ((xz).add 6.0))) (((((unsupported)).apply).div ((xz).add 7.0)))))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_zeroinputs.write
                  [xself]
                    memory > xx
                    memory > xg
                    seq > @
                      seq
                        xg.write ((((xrandom).xRandom)).apply)
                        xx.write ((((unsupported)).apply (((((xg).xrandom)).apply)) ((xi)) ((((xrange)).apply (50)))).add ((((unsupported)).apply (0.0)).mul 5))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xuniform)).apply (1) (10))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xparetovariate)).apply (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xexpovariate)).apply (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xweibullvariate)).apply (1.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xvonmisesvariate)).apply (1.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xnormalvariate)).apply (0.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xgauss)).apply (0.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xlognormvariate)).apply (0.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xvonmisesvariate)).apply (0.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xgammavariate)).apply (0.01) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xgammavariate)).apply (1.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xgammavariate)).apply (200.0) (1.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xbetavariate)).apply (3.0) (3.0))
                        (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                        bogusForceDataize.write ((((xg).xtriangular)).apply (0.0) (1.0) ((1.0.div 3.0)))
                xtest_avg_std.write
                  [xself]
                    memory > xg
                    memory > xs1
                    memory > xx
                    memory > xs2
                    memory > xy
                    memory > xN
                    seq > @
                      seq
                        xg.write ((((xrandom).xRandom)).apply)
                        xN.write 5001
                        xx.write (((unsupported)).apply (((xi).div (((xfloat)).apply ((xN))))) ((xi)) ((((xrange)).apply (1) ((xN)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvariate)) ((xargs)) ((xmu)) ((xsigmasqrd)))) ((((unsupported)).apply ((((unsupported)).apply (((xg).xuniform)) ((((unsupported)).apply (1.0) (10.0))) (((10.0.add 1.0).div 2)) (((((unsupported)).apply ((10.0.sub 1.0)) (2)).div 12)))) ((((unsupported)).apply (((xg).xtriangular)) ((((unsupported)).apply (0.0) (1.0) ((1.0.div 3.0)))) ((4.0.div 9.0)) (((7.0.div 9.0).div 18.0)))) ((((unsupported)).apply (((xg).xexpovariate)) ((((unsupported)).apply (1.5))) ((1.div 1.5)) ((1.div (((unsupported)).apply (1.5) (2)))))) ((((unsupported)).apply (((xg).xvonmisesvariate)) ((((unsupported)).apply (1.23) (0))) ((xpi)) (((((unsupported)).apply ((xpi)) (2)).div 3)))) ((((unsupported)).apply (((xg).xparetovariate)) ((((unsupported)).apply (5.0))) ((5.0.div (5.0.sub 1))) ((5.0.div ((((unsupported)).apply ((5.0.sub 1)) (2)).mul (5.0.sub 2)))))) ((((unsupported)).apply (((xg).xweibullvariate)) ((((unsupported)).apply (1.0) (3.0))) ((((xgamma)).apply ((1.add (1.div 3.0))))) (((((xgamma)).apply ((1.add (2.div 3.0)))).sub (((unsupported)).apply ((((xgamma)).apply ((1.add (1.div 3.0))))) (2)))))))))
                          seq
                            (((unsupported)).apply (((xg).xrandom)) (((((unsupported)).apply ((xx)) ((((unsupported)).apply))).xpop)))
                            xy.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xx)))))))
                              (((unsupported)).apply ((xIndexError)))
                                bogusForceDataize.write ((((xy).xappend)).apply ((((xvariate)).apply ((((unsupported)).apply ((xargs)))))))
                            (((unsupported)).apply ((xs1)) ((xs2)) (1))
                            (((unsupported)).apply ((xe)) ((xy)))
                              seq
                                (((unsupported)).apply ((xs1)) ((xe)))
                                (((unsupported)).apply ((xs2)) ((((unsupported)).apply (((xe).sub (xmu))) (2))))
                            xN.write (((xlen)).apply ((xy)))
                            (((unsupported)).apply (((xself).xassertAlmostEqual)) (((xs1).div (xN))) ((xmu)) (2) (("%s%r".mod (((unsupported)).apply (((xvariate).x__name__)) ((xargs))))))
                            (((unsupported)).apply (((xself).xassertAlmostEqual)) (((xs2).div ((xN).sub 1))) ((xsigmasqrd)) (2) (("%s%r".mod (((unsupported)).apply (((xvariate).x__name__)) ((xargs))))))
                xtest_constant.write
                  [xself]
                    memory > xN
                    memory > xg
                    seq > @
                      seq
                        xg.write ((((xrandom).xRandom)).apply)
                        xN.write 101
                        (((unsupported)).apply ((((unsupported)).apply ((xvariate)) ((xargs)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply (((xg).xuniform)) ((((unsupported)).apply (10.0) (10.0))) (10.0))) ((((unsupported)).apply (((xg).xtriangular)) ((((unsupported)).apply (10.0) (10.0))) (10.0))) ((((unsupported)).apply (((xg).xtriangular)) ((((unsupported)).apply (10.0) (10.0) (10.0))) (10.0))) ((((unsupported)).apply (((xg).xexpovariate)) ((((unsupported)).apply ((((xfloat)).apply ("inf"))))) (0.0))) ((((unsupported)).apply (((xg).xvonmisesvariate)) ((((unsupported)).apply (3.0) ((((xfloat)).apply ("inf"))))) (3.0))) ((((unsupported)).apply (((xg).xgauss)) ((((unsupported)).apply (10.0) (0.0))) (10.0))) ((((unsupported)).apply (((xg).xlognormvariate)) ((((unsupported)).apply (0.0) (0.0))) (1.0))) ((((unsupported)).apply (((xg).xlognormvariate)) ((((unsupported)).apply (((((xfloat)).apply ("inf")).neg)) (0.0))) (0.0))) ((((unsupported)).apply (((xg).xnormalvariate)) ((((unsupported)).apply (10.0) (0.0))) (10.0))) ((((unsupported)).apply (((xg).xparetovariate)) ((((unsupported)).apply ((((xfloat)).apply ("inf"))))) (1.0))) ((((unsupported)).apply (((xg).xweibullvariate)) ((((unsupported)).apply (10.0) ((((xfloat)).apply ("inf"))))) (10.0))) ((((unsupported)).apply (((xg).xweibullvariate)) ((((unsupported)).apply (0.0) (10.0))) (0.0))))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvariate)).apply ((((unsupported)).apply ((xargs)))))) ((xexpected)))
                xtest_von_mises_range.write
                  [xself]
                    memory > xN
                    memory > xsample
                    memory > xg
                    seq > @
                      seq
                        xg.write ((((xrandom).xRandom)).apply)
                        xN.write 101
                        (((unsupported)).apply ((xmu)) ((((unsupported)).apply (0.0) (0.1) (3.1) (6.2))))
                          (((unsupported)).apply ((xkappa)) ((((unsupported)).apply (0.0) (2.3) (500.0))))
                            (((unsupported)).apply ((x_)) ((((xrange)).apply ((xN)))))
                              seq
                                xsample.write ((((xg).xvonmisesvariate)).apply ((xmu)) ((xkappa)))
                                (((unsupported)).apply (((xself).xassertTrue)) ((((unsupported)).apply (0) ((xsample)) (((xrandom).xTWOPI)))) (((("vonmisesvariate({}, {}) produced a result {} out of range [0, 2*pi]".xformat)).apply ((xmu)) ((xkappa)) ((xsample)))))
                xtest_von_mises_large_kappa.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xrandom).xvonmisesvariate)).apply (0) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xrandom).xvonmisesvariate)).apply (0) ((((unsupported)).apply)))
                xtest_gammavariate_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xrandom).xgammavariate)) ((1.neg)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xrandom).xgammavariate)) (0) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xrandom).xgammavariate)) (2) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xrandom).xgammavariate)) (1) ((3.neg)))
                xtest_gammavariate_alpha_greater_one.write
                  [xself xrandom_mock]
                    memory > xreturned_value
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply ((((unsupported)).apply)) (0.5) (0.3))))
                        xreturned_value.write ((((xrandom).xgammavariate)).apply (1.1) (2.3))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xreturned_value)) (2.53))
                xtest_gammavariate_alpha_equal_one.write
                  [xself xrandom_mock]
                    memory > xreturned_value
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply (0.45))))
                        xreturned_value.write ((((xrandom).xgammavariate)).apply (1.0) (3.14))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xreturned_value)) (1.877208182372648))
                xtest_gammavariate_alpha_equal_one_equals_expovariate.write
                  [xself xrandom_mock]
                    memory > xexpovariate_returned_value
                    memory > xgammavariate_returned_value
                    memory > xbeta
                    seq > @
                      (((unsupported)).apply)
                        xbeta.write 3.14
                        (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xgammavariate_returned_value.write ((((xrandom).xgammavariate)).apply (1.0) ((xbeta)))
                        xexpovariate_returned_value.write ((((xrandom).xexpovariate)).apply ((1.0.div (xbeta))))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xgammavariate_returned_value)) ((xexpovariate_returned_value)))
                xtest_gammavariate_alpha_between_zero_and_one.write
                  [xself xrandom_mock]
                    memory > x_exp
                    memory > xr1
                    memory > x_log
                    memory > xreturned_value
                    memory > xr2
                    memory > xepsilon
                    memory > xbeta
                    memory > xalpha
                    memory > xb
                    memory > x_e
                    seq > @
                      (((unsupported)).apply)
                        x_e.write ((xrandom).x_e)
                        x_exp.write ((xrandom).x_exp)
                        x_log.write ((xrandom).x_log)
                        xalpha.write 0.35
                        xbeta.write 1.45
                        xb.write (((x_e).add (xalpha)).div (x_e))
                        xepsilon.write 0.01
                        xr1.write 0.8859296441566
                        xr2.write 0.3678794411714
                        (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply ((xr1)) (((xr2).add (xepsilon))) ((xr1)) ((xr2)))))
                        xreturned_value.write ((((xrandom).xgammavariate)).apply ((xalpha)) ((xbeta)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xreturned_value)) (1.4499999999997544))
                        xr1.write 0.8959296441566
                        xr2.write 0.9445400408898141
                        (((unsupported)).apply (((xrandom_mock).xside_effect)) ((((unsupported)).apply ((xr1)) (((xr2).add (xepsilon))) ((xr1)) ((xr2)))))
                        xreturned_value.write ((((xrandom).xgammavariate)).apply ((xalpha)) ((xbeta)))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xreturned_value)) (1.5830349561760781))
                xtest_betavariate_return_zero.write
                  [xself xgammavariate_mock]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xgammavariate_mock).xreturn_value)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0.0) (((((xrandom).xbetavariate)).apply (2.71828) (3.14159))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_random_subclass_with_kwargs.write
                  [xself]
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xrandom).xRandom)))
                          x__init__.write
                            [xself xnewarg]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write (((((xrandom).xRandom).x__init__)).apply ((xself)))
                        (((unsupported)).apply ((xSubclass)) (1))
                xtest_subclasses_overriding_methods.write
                  [xself]
                    memory > xrandom
                    memory > xcalled
                    memory > xgetrandbits
                    seq > @
                      seq
                        (((unsupported)).apply (((xrandom).xRandom)))
                          seq
                            xrandom.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xcalled).xadd)).apply ("SubClass1.random"))
                                    (((unsupported)).apply ((((((xrandom).xRandom).xrandom)).apply ((xself)))))
                            xgetrandbits.write
                              [xself xn]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xcalled).xadd)).apply ("SubClass1.getrandbits"))
                                    (((unsupported)).apply ((((((xrandom).xRandom).xgetrandbits)).apply ((xself)) ((xn)))))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass1)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("SubClass1.getrandbits"))))
                        (((unsupported)).apply (((xrandom).xRandom)))
                          xrandom.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xcalled).xadd)).apply ("SubClass2.random"))
                                  (((unsupported)).apply ((((((xrandom).xRandom).xrandom)).apply ((xself)))))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass2)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("SubClass2.random"))))
                        (((unsupported)).apply ((xSubClass2)))
                          xgetrandbits.write
                            [xself xn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xcalled).xadd)).apply ("SubClass3.getrandbits"))
                                  (((unsupported)).apply ((((((xrandom).xRandom).xgetrandbits)).apply ((xself)) ((xn)))))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass3)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("SubClass3.getrandbits"))))
                        (((unsupported)).apply ((xSubClass3)))
                          xrandom.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xcalled).xadd)).apply ("SubClass4.random"))
                                  (((unsupported)).apply ((((((xrandom).xRandom).xrandom)).apply ((xself)))))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass4)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("SubClass4.random"))))
                        (((unsupported)).apply)
                          xrandom.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xcalled).xadd)).apply ("Mixin1.random"))
                                  (((unsupported)).apply ((((((xrandom).xRandom).xrandom)).apply ((xself)))))
                        (((unsupported)).apply)
                          xgetrandbits.write
                            [xself xn]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xcalled).xadd)).apply ("Mixin2.getrandbits"))
                                  (((unsupported)).apply ((((((xrandom).xRandom).xgetrandbits)).apply ((xself)) ((xn)))))
                        (((unsupported)).apply ((xMixin1)) (((xrandom).xRandom)))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass5)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("Mixin1.random"))))
                        (((unsupported)).apply ((xMixin2)) (((xrandom).xRandom)))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass6)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("Mixin2.getrandbits"))))
                        (((unsupported)).apply ((xMixin1)) ((xMixin2)) (((xrandom).xRandom)))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass7)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("Mixin1.random"))))
                        (((unsupported)).apply ((xMixin2)) ((xMixin1)) (((xrandom).xRandom)))
                        xcalled.write (((xset)).apply)
                        bogusForceDataize.write ((((((xSubClass8)).apply).xrandrange)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled)) ((((unsupported)).apply ("Mixin2.getrandbits"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestMagicConstants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xrandom).xNV_MAGICCONST)) (1.71552776992141))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xrandom).xTWOPI)) (6.28318530718))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xrandom).xLOG4)) (1.38629436111989))
                        bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((xrandom).xSG_MAGICCONST)) (2.50407739677627))
                xtest__all__.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply (((xrandom).x__all__))).leq (((xset)).apply ((((xdir)).apply ((xrandom))))))))
                xtest_after_fork.write
                  [xself]
                    memory > xval
                    memory > xpid
                    memory > xchild_val
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          (((unsupported)).apply)
                            seq
                              xval.write ((((xrandom).xgetrandbits)).apply (128))
                              (((unsupported)).apply ((((xopen)).apply ((xw)) ("w"))) ((xf)))
                                bogusForceDataize.write ((((xf).xwrite)).apply ((((xstr)).apply ((xval)))))
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((xw)))
                            xval.write ((((xrandom).xgetrandbits)).apply (128))
                            (((unsupported)).apply ((((xopen)).apply ((xr)) ("r"))) ((xf)))
                              xchild_val.write (((xeval)).apply (((((xf).xread)).apply)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xval)) ((xchild_val)))
                            (((unsupported)).apply ((((unsupported)).apply ((xpid)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstatus)) (0))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)