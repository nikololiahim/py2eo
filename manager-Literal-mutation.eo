memory > xinspect
memory > xAttributeError
memory > xManager
memory > xtype
memory > xhasattr
memory > xsuper
memory > xargs
memory > xQuerySet
memory > xkwargs
memory > xisinstance
memory > xmethod
memory > xBaseManager
memory > xcopy
memory > xValueError
memory > ximport_module
memory > xrouter
memory > xManagerDescriptor
memory > xgetattr
memory > xid
memory > xsetattr
memory > xname
[] > manager
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdb_manager
        memory > xall
        memory > xget_queryset
        memory > xcheck
        memory > x_set_creation_counter
        memory > x__class_getitem__
        memory > xdeconstruct
        memory > x__init__
        memory > x__hash__
        memory > xauto_created
        memory > x__new__
        memory > x__str__
        memory > xdb
        memory > xcontribute_to_class
        memory > xuse_in_migrations
        memory > x__eq__
        memory > xcreation_counter
        memory > xfrom_queryset
        memory > x__get__
        memory > x_get_queryset_methods
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xcreation_counter.write 0
                xauto_created.write FALSE
                xuse_in_migrations.write FALSE
                x__new__.write
                  [xcls]
                    memory > xobj
                    seq > @
                      (((unsupported)).apply)
                        xobj.write ((((((xsuper)).apply).x__new__)).apply ((xcls)))
                        (((unsupported)).apply (((xobj).x_constructor_args)) ((((unsupported)).apply ((xargs)) ((xkwargs)))))
                        (((unsupported)).apply ((xobj)))
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        bogusForceDataize.write ((((xself).x_set_creation_counter)).apply)
                        (((unsupported)).apply (((xself).xmodel)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).x_db)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).x_hints)) ((((unsupported)).apply)))
                x__str__.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (("%s.%s".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xlabel)) (((xself).xname))))))
                x__class_getitem__.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcls)))
                xdeconstruct.write
                  [xself]
                    memory > xname
                    memory > xmodule_name
                    memory > xqs_class
                    memory > xmodule
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xqs_class.write ((xself).x_queryset_class)
                        (((xgetattr)).apply ((xself)) ("_built_with_as_manager") (FALSE)).if
                          (((unsupported)).apply ((((unsupported)).apply (TRUE) ("None: is there a None literal in the EO language?") (("%s.%s".mod (((unsupported)).apply (((xqs_class).x__module__)) (((xqs_class).x__name__))))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                          seq
                            xmodule_name.write ((xself).x__module__)
                            xname.write (((xself).x__class__).x__name__)
                            xmodule.write (((ximport_module)).apply ((xmodule_name)))
                            ((((xhasattr)).apply ((xmodule)) ((xname))).not).if
                              (((unsupported)).apply ((((xValueError)).apply (("Could not find manager %s in %s.nPlease note that you need to inherit from managers you dynamically generated with 'from_queryset()'.".mod (((unsupported)).apply ((xname)) ((xmodule_name))))))))
                            (((unsupported)).apply ((((unsupported)).apply (FALSE) (("%s.%s".mod (((unsupported)).apply ((xmodule_name)) ((xname))))) ("None: is there a None literal in the EO language?") ((((unsupported)).apply (((xself).x_constructor_args)) (0))) ((((unsupported)).apply (((xself).x_constructor_args)) (1))))))
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_get_queryset_methods.write
                  [xcls xqueryset_class]
                    memory > xnew_methods
                    memory > xqueryset_only
                    memory > xcreate_method
                    seq > @
                      (((unsupported)).apply)
                        xcreate_method.write
                          [xname xmethod]
                            memory > xmanager_method
                            seq > @
                              seq
                                xmanager_method.write
                                  [xself]
                                    seq > @
                                      (((unsupported)).apply)
                                        (((unsupported)).apply ((((((xgetattr)).apply (((((xself).xget_queryset)).apply)) ((xname)))).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                                (((unsupported)).apply (((xmanager_method).x__name__)) (((xmethod).x__name__)))
                                (((unsupported)).apply (((xmanager_method).x__doc__)) (((xmethod).x__doc__)))
                                (((unsupported)).apply ((xmanager_method)))
                        xnew_methods.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xmethod)))) ((((unsupported)).apply (((xinspect).xgetmembers)) ((xqueryset_class)) (((xinspect).xisfunction)))))
                          seq
                            (((xhasattr)).apply ((xcls)) ((xname))).if
                              (((unsupported)).apply)
                            xqueryset_only.write (((xgetattr)).apply ((xmethod)) ("queryset_only") ("None: is there a None literal in the EO language?"))
                            ((xqueryset_only).or ((((unsupported)).apply ((xqueryset_only)) ("None: is there a None literal in the EO language?")).and ((((xname).xstartswith)).apply ("_")))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xnew_methods)) ((xname)))) ((((xcreate_method)).apply ((xname)) ((xmethod)))))
                        (((unsupported)).apply ((xnew_methods)))
                xfrom_queryset.write
                  [xcls xqueryset_class xclass_name]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xclass_name)) ("None: is there a None literal in the EO language?")).if
                          xclass_name.write ("%sFrom%s".mod (((unsupported)).apply (((xcls).x__name__)) (((xqueryset_class).x__name__))))
                        (((unsupported)).apply ((((xtype)).apply ((xclass_name)) ((((unsupported)).apply ((xcls)))) ((((unsupported)).apply ("_queryset_class") ((xqueryset_class)) (((((xcls).x_get_queryset_methods)).apply ((xqueryset_class)))))))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xname)) ((((xself).xname).or (xname))))
                        (((unsupported)).apply (((xself).xmodel)) ((xcls)))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) ((xname)) ((((xManagerDescriptor)).apply ((xself)))))
                        bogusForceDataize.write (((((xcls).x_meta).xadd_manager)).apply ((xself)))
                x_set_creation_counter.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcreation_counter)) (((xBaseManager).xcreation_counter)))
                        (((unsupported)).apply (((xBaseManager).xcreation_counter)) (2))
                xdb_manager.write
                  [xself xusing xhints]
                    memory > xobj
                    seq > @
                      (((unsupported)).apply)
                        xobj.write ((((xcopy).xcopy)).apply ((xself)))
                        (((unsupported)).apply (((xobj).x_db)) (((xusing).or ((xself).x_db))))
                        (((unsupported)).apply (((xobj).x_hints)) (((xhints).or ((xself).x_hints))))
                        (((unsupported)).apply ((xobj)))
                xdb.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).x_db).or ((((xrouter).xdb_for_read)).apply (((xself).xmodel)) ((((unsupported)).apply (((xself).x_hints))))))))
                xget_queryset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_queryset_class)) (((xself).xmodel)) (((xself).x_db)) (((xself).x_hints)))))
                xall.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xget_queryset)).apply)))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xisinstance)).apply ((xother)) (((xself).x__class__))).and (((xself).x_constructor_args).eq ((xother).x_constructor_args)))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xid)).apply ((xself)))))
            (((unsupported)).apply (((((xBaseManager).xfrom_queryset)).apply ((xQuerySet)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xmanager]
                    seq > @
                      (((unsupported)).apply (((xself).xmanager)) ((xmanager)))
                x__get__.write
                  [xself xinstance xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xAttributeError)).apply (("Manager isn't accessible via %s instances".mod ((xcls).x__name__))))))
                        (((xcls).x_meta).xabstract).if
                          (((unsupported)).apply ((((xAttributeError)).apply (("Manager isn't available; %s is abstract".mod (((unsupported)).apply ((((xcls).x_meta).xobject_name))))))))
                        (((xcls).x_meta).xswapped).if
                          (((unsupported)).apply ((((xAttributeError)).apply (("Manager isn't available; '%s' has been swapped for '%s'".mod (((unsupported)).apply ((((xcls).x_meta).xlabel)) ((((xcls).x_meta).xswapped))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xcls).x_meta).xmanagers_map)) ((((xself).xmanager).xname)))))
            (((unsupported)).apply ((xManager)))
              seq
                x__init__.write
                  [xself xmodel]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).xmodel)) ((xmodel)))
                xget_queryset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((((((xsuper)).apply).xget_queryset)).apply).xnone)).apply)))