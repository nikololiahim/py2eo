memory > xValueError
memory > xstr
memory > xB
memory > xrange
memory > xbytearray
memory > xPickleBuffer
memory > xweakref
memory > xunittest
memory > xmemoryview
memory > xm2
memory > xexpected
memory > xlist
memory > xraises
memory > xsupport
memory > xbytes
memory > xm
memory > xgc
memory > xobj
memory > xBufferError
memory > xTypeError
memory > x__name__
[] > test_picklebuffer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_raw_non_contiguous
        memory > xcheck_memoryview
        memory > xcheck_raw_non_contiguous
        memory > xtest_raw_released
        memory > xtest_constructor_failure
        memory > xtest_release
        memory > xtest_cycle
        memory > xtest_raw_ndarray
        memory > xcheck_raw
        memory > xtest_ndarray_2d
        memory > xtest_raw
        memory > xtest_basics
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xbytes)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_memoryview.write
                  [xself xpb xequiv]
                    seq > @
                      (((unsupported)).apply ((((xmemoryview)).apply ((xpb)))) ((xm2)))
                        (((unsupported)).apply ((((xmemoryview)).apply ((xequiv)))) ((xexpected)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xnbytes)) (((xexpected).xnbytes)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xreadonly)) (((xexpected).xreadonly)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xitemsize)) (((xexpected).xitemsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xshape)) (((xexpected).xshape)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xstrides)) (((xexpected).xstrides)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xc_contiguous)) (((xexpected).xc_contiguous)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xf_contiguous)) (((xexpected).xf_contiguous)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xformat)) (((xexpected).xformat)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xexpected).xtobytes)).apply)))
                xtest_constructor_failure.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xPickleBuffer)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xPickleBuffer)).apply ("foo"))
                        xm.write (((xmemoryview)).apply ("foo"))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xPickleBuffer)).apply ((xm)))
                xtest_basics.write
                  [xself]
                    memory > xpb
                    seq > @
                      seq
                        xpb.write (((xPickleBuffer)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("foo") ((((xbytes)).apply ((xpb)))))
                        (((unsupported)).apply ((((xmemoryview)).apply ((xpb)))) ((xm)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xreadonly)))
                        xpb.write (((xPickleBuffer)).apply ((((xbytearray)).apply ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("foo") ((((xbytes)).apply ((xpb)))))
                        (((unsupported)).apply ((((xmemoryview)).apply ((xpb)))) ((xm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xm).xreadonly)))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) (48))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("0oo") ((((xbytes)).apply ((xpb)))))
                xtest_release.write
                  [xself]
                    memory > xpb
                    seq > @
                      seq
                        xpb.write (((xPickleBuffer)).apply ("foo"))
                        bogusForceDataize.write ((((xpb).xrelease)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xraises)))
                          bogusForceDataize.write (((xmemoryview)).apply ((xpb)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("operation forbidden on released PickleBuffer object") ((((xstr)).apply (((xraises).xexception)))))
                        bogusForceDataize.write ((((xpb).xrelease)).apply)
                xtest_cycle.write
                  [xself]
                    memory > xwpb
                    memory > xpb
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xB)).apply ("foo"))
                        xpb.write (((xPickleBuffer)).apply ((xb)))
                        (((unsupported)).apply (((xb).xcycle)) ((xpb)))
                        xwpb.write ((((xweakref).xref)).apply ((xpb)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((xpb)))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwpb)).apply)))
                xtest_ndarray_2d.write
                  [xself]
                    memory > xarr
                    memory > xpb
                    memory > xndarray
                    seq > @
                      seq
                        xndarray.write (((((xsupport).ximport_module)).apply ("_testbuffer")).xndarray)
                        xarr.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (4) (3))) ("<i"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xarr).xc_contiguous)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xarr).xf_contiguous)))
                        xpb.write (((xPickleBuffer)).apply ((xarr)))
                        bogusForceDataize.write ((((xself).xcheck_memoryview)).apply ((xpb)) ((xarr)))
                        xarr.write (((unsupported)).apply ((xarr)) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xarr).xc_contiguous)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xarr).xf_contiguous)))
                        xpb.write (((xPickleBuffer)).apply ((xarr)))
                        bogusForceDataize.write ((((xself).xcheck_memoryview)).apply ((xpb)) ((xarr)))
                        xarr.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (4) (12))) ("<i"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xarr).xf_contiguous)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xarr).xc_contiguous)))
                        xpb.write (((xPickleBuffer)).apply ((xarr)))
                        bogusForceDataize.write ((((xself).xcheck_memoryview)).apply ((xpb)) ((xarr)))
                xcheck_raw.write
                  [xself xobj xequiv]
                    memory > xpb
                    seq > @
                      seq
                        xpb.write (((xPickleBuffer)).apply ((xobj)))
                        (((unsupported)).apply (((((xpb).xraw)).apply)) ((xm)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xm)) ((xmemoryview)))
                            bogusForceDataize.write ((((xself).xcheck_memoryview)).apply ((xm)) ((xequiv)))
                xtest_raw.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xobj)) ((((unsupported)).apply ("foo") ((((xbytearray)).apply ("foo"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                          bogusForceDataize.write ((((xself).xcheck_raw)).apply ((xobj)) ((xobj)))
                xtest_raw_ndarray.write
                  [xself]
                    memory > xarr
                    memory > xndarray
                    memory > xequiv
                    seq > @
                      seq
                        xndarray.write (((((xsupport).ximport_module)).apply ("_testbuffer")).xndarray)
                        xarr.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (3))))) ((((unsupported)).apply (3))) ("<h"))
                        xequiv.write "x00x00x01x00x02x00"
                        bogusForceDataize.write ((((xself).xcheck_raw)).apply ((xarr)) ((xequiv)))
                        xarr.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (6))))) ((((unsupported)).apply (2) (3))) ("<h"))
                        xequiv.write "x00x00x01x00x02x00x03x00x04x00x05x00"
                        bogusForceDataize.write ((((xself).xcheck_raw)).apply ((xarr)) ((xequiv)))
                        xarr.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (6))))) ((((unsupported)).apply (2) (3))) ((((unsupported)).apply (2) (4))) ("<h"))
                        xequiv.write "x00x00x01x00x02x00x03x00x04x00x05x00"
                        bogusForceDataize.write ((((xself).xcheck_raw)).apply ((xarr)) ((xequiv)))
                        xarr.write (((unsupported)).apply ((xndarray)) (456) ((((unsupported)).apply)) ("<i"))
                        xequiv.write "xc8x01x00x00"
                        bogusForceDataize.write ((((xself).xcheck_raw)).apply ((xarr)) ((xequiv)))
                xcheck_raw_non_contiguous.write
                  [xself xobj]
                    memory > xpb
                    seq > @
                      seq
                        xpb.write (((xPickleBuffer)).apply ((xobj)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xBufferError)) ("non-contiguous"))))
                          bogusForceDataize.write ((((xpb).xraw)).apply)
                xtest_raw_non_contiguous.write
                  [xself]
                    memory > xarr
                    memory > xndarray
                    seq > @
                      seq
                        xndarray.write (((((xsupport).ximport_module)).apply ("_testbuffer")).xndarray)
                        xarr.write (((unsupported)).apply ((((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (6))))) ((((unsupported)).apply (6))) ("<i"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xcheck_raw_non_contiguous)).apply ((xarr)))
                        xarr.write (((unsupported)).apply ((((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (4) (3))) ("<i"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xcheck_raw_non_contiguous)).apply ((xarr)))
                xtest_raw_released.write
                  [xself]
                    memory > xpb
                    seq > @
                      seq
                        xpb.write (((xPickleBuffer)).apply ("foo"))
                        bogusForceDataize.write ((((xpb).xrelease)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xraises)))
                          bogusForceDataize.write ((((xpb).xraw)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)