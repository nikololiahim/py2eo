memory > xCircularA
memory > x_
memory > xconnection
memory > xObjectReference
memory > xTransactionTestCase
memory > xoverride_settings
memory > xObject
memory > xcopy
memory > xDEFAULT_DB_ALIAS
memory > xloader
memory > xdatetime
memory > xSchoolClass
memory > xmocked_args
memory > xSkipTestClass
memory > xTEST_DATABASE_PREFIX
memory > xCircularB
memory > xconnections
memory > xObjectSelfReference
memory > xargs
memory > xmock
memory > xtest_connection2
memory > xBaseDatabaseCreation
memory > xkwargs
memory > xlen
memory > xSimpleTestCase
[] > test_creation
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_mark_expected_failures_and_skips_call
        memory > xtest_mark_expected_failures_and_skips
        memory > xtest_serialize_db_to_string_base_manager
        memory > xexpected_failure_test_function
        memory > xtest_migrate_test_setting_true
        memory > xtest_circular_reference
        memory > xtest_default_name
        memory > xtest_circular_reference_with_natural_key
        memory > xtest_migrate_test_setting_false_ensure_schema
        memory > xtest_custom_test_name_with_test_prefix
        memory > xtest_migrate_test_setting_false
        memory > xskip_test_function
        memory > xtest_self_reference
        memory > xget_connection_copy
        memory > xavailable_apps
        memory > xskip_function
        memory > xtest_custom_test_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xget_connection_copy.write
              []
                memory > xtest_connection
                seq > @
                  seq
                    xtest_connection.write ((((xcopy).xcopy)).apply ((((unsupported)).apply ((xconnections)) ((xDEFAULT_DB_ALIAS)))))
                    (((unsupported)).apply (((xtest_connection).xsettings_dict)) (((((xcopy).xdeepcopy)).apply (((((unsupported)).apply ((xconnections)) ((xDEFAULT_DB_ALIAS))).xsettings_dict)))))
                    (((unsupported)).apply ((xtest_connection2)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_default_name.write
                  [xself]
                    memory > xsignature
                    memory > xtest_connection
                    memory > xprod_name
                    seq > @
                      seq
                        xprod_name.write "hodor"
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("NAME"))) ((xprod_name)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ((((unsupported)).apply ("NAME") ("None: is there a None literal in the EO language?"))))
                        xsignature.write ((((((xBaseDatabaseCreation)).apply ((xtest_connection))).xtest_db_signature)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsignature)) (3))) (((xTEST_DATABASE_PREFIX).add (xprod_name))))
                xtest_custom_test_name.write
                  [xself]
                    memory > xsignature
                    memory > xtest_name
                    memory > xtest_connection
                    seq > @
                      seq
                        xtest_name.write "hodor"
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ((((unsupported)).apply ("NAME") ((xtest_name)))))
                        xsignature.write ((((((xBaseDatabaseCreation)).apply ((xtest_connection))).xtest_db_signature)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsignature)) (3))) ((xtest_name)))
                xtest_custom_test_name_with_test_prefix.write
                  [xself]
                    memory > xsignature
                    memory > xtest_name
                    memory > xtest_connection
                    seq > @
                      seq
                        xtest_name.write ((xTEST_DATABASE_PREFIX).add "hodor")
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ((((unsupported)).apply ("NAME") ((xtest_name)))))
                        xsignature.write ((((((xBaseDatabaseCreation)).apply ((xtest_connection))).xtest_db_signature)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsignature)) (3))) ((xtest_name)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("backends.base.app_unmigrated"))))) ((((((xmock).xpatch).xobject)).apply ((xconnection)) ("ensure_connection"))) ((((((xmock).xpatch).xobject)).apply ((xconnection)) ("prepare_database"))) ((((unsupported)).apply (((xmock).xpatch)) ("django.db.migrations.recorder.MigrationRecorder.has_table") (FALSE))) (((((xmock).xpatch)).apply ("django.core.management.commands.migrate.Command.sync_apps"))))
              seq
                xavailable_apps.write (((unsupported)).apply ("backends.base.app_unmigrated"))
                xtest_migrate_test_setting_false.write
                  [xself xmocked_migrate xmocked_sync_apps]
                    memory > xtest_connection
                    memory > xcreation
                    memory > xold_database_name
                    seq > @
                      (((unsupported)).apply)
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ("MIGRATE"))) (FALSE))
                        xcreation.write ((((xtest_connection).xcreation_class)).apply ((xtest_connection)))
                        (((xconnection).xvendor).eq "oracle").if
                          (((unsupported)).apply ((((xcreation).xconnection).xclose)) (((((xmock).xMock)).apply)))
                        xold_database_name.write (((unsupported)).apply (((xtest_connection).xsettings_dict)) ("NAME"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_create_test_db"))))
                              (((unsupported)).apply (((xcreation).xcreate_test_db)) (0) (TRUE) (FALSE))
                            bogusForceDataize.write ((((xmocked_migrate).xassert_called)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) (((xmocked_migrate).xcall_args)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xkwargs)) ("plan"))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xmocked_sync_apps).xassert_called)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xmocked_args)) ((x_)))) (((xmocked_sync_apps).xcall_args)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmocked_args)) (1))) ((((unsupported)).apply ("app_unmigrated"))))
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_destroy_test_db"))))
                            (((unsupported)).apply (((xcreation).xdestroy_test_db)) ((xold_database_name)) (0))
                xtest_migrate_test_setting_false_ensure_schema.write
                  [xself xmocked_ensure_schema xmocked_sync_apps]
                    memory > xtest_connection
                    memory > xcreation
                    memory > xold_database_name
                    seq > @
                      (((unsupported)).apply)
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ("MIGRATE"))) (FALSE))
                        xcreation.write ((((xtest_connection).xcreation_class)).apply ((xtest_connection)))
                        (((xconnection).xvendor).eq "oracle").if
                          (((unsupported)).apply ((((xcreation).xconnection).xclose)) (((((xmock).xMock)).apply)))
                        xold_database_name.write (((unsupported)).apply (((xtest_connection).xsettings_dict)) ("NAME"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_create_test_db"))))
                              (((unsupported)).apply (((xcreation).xcreate_test_db)) (0) (TRUE) (FALSE))
                            bogusForceDataize.write ((((xmocked_ensure_schema).xassert_not_called)).apply)
                            bogusForceDataize.write ((((xmocked_sync_apps).xassert_called)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xmocked_args)) ((x_)))) (((xmocked_sync_apps).xcall_args)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmocked_args)) (1))) ((((unsupported)).apply ("app_unmigrated"))))
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_destroy_test_db"))))
                            (((unsupported)).apply (((xcreation).xdestroy_test_db)) ((xold_database_name)) (0))
                xtest_migrate_test_setting_true.write
                  [xself xmocked_migrate xmocked_sync_apps]
                    memory > xtest_connection
                    memory > xcreation
                    memory > xold_database_name
                    seq > @
                      (((unsupported)).apply)
                        xtest_connection.write (((xget_connection_copy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtest_connection).xsettings_dict)) ("TEST"))) ("MIGRATE"))) (TRUE))
                        xcreation.write ((((xtest_connection).xcreation_class)).apply ((xtest_connection)))
                        (((xconnection).xvendor).eq "oracle").if
                          (((unsupported)).apply ((((xcreation).xconnection).xclose)) (((((xmock).xMock)).apply)))
                        xold_database_name.write (((unsupported)).apply (((xtest_connection).xsettings_dict)) ("NAME"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_create_test_db"))))
                              (((unsupported)).apply (((xcreation).xcreate_test_db)) (0) (TRUE) (FALSE))
                            bogusForceDataize.write ((((xmocked_migrate).xassert_called)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) (((xmocked_migrate).xcall_args)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("app_unmigrated") ("0001_initial"))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xkwargs)) ("plan"))))) (1))
                            bogusForceDataize.write ((((xmocked_sync_apps).xassert_not_called)).apply)
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_destroy_test_db"))))
                            (((unsupported)).apply (((xcreation).xdestroy_test_db)) ((xold_database_name)) (0))
                xtest_mark_expected_failures_and_skips_call.write
                  [xself xmark_expected_failures_and_skips]
                    memory > xtest_connection
                    memory > xcreation
                    memory > xold_database_name
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtest_connection.write (((xget_connection_copy)).apply)
                        xcreation.write ((((xtest_connection).xcreation_class)).apply ((xtest_connection)))
                        (((xconnection).xvendor).eq "oracle").if
                          (((unsupported)).apply ((((xcreation).xconnection).xclose)) (((((xmock).xMock)).apply)))
                        xold_database_name.write (((unsupported)).apply (((xtest_connection).xsettings_dict)) ("NAME"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_create_test_db"))))
                              (((unsupported)).apply (((xcreation).xcreate_test_db)) (0) (TRUE) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xmark_expected_failures_and_skips).xcalled)) (FALSE))
                          (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xcreation)) ("_destroy_test_db"))))
                            (((unsupported)).apply (((xcreation).xdestroy_test_db)) ((xold_database_name)) (0))
            (((unsupported)).apply ((xTransactionTestCase)))
              seq
                xavailable_apps.write (((unsupported)).apply ("backends"))
                xtest_circular_reference.write
                  [xself]
                    memory > xobj_ref
                    memory > xobj
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xcreation).xdeserialize_db_from_string)).apply ((xdata)))
                        xobj.write (((((xObject).xobjects).xget)).apply)
                        xobj_ref.write (((((xObjectReference).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xobj_ref)) ((xobj_ref)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj_ref).xobj)) ((xobj)))
                xtest_self_reference.write
                  [xself]
                    memory > xobj_1
                    memory > xobj_2
                    memory > xdata
                    memory > xloader_instance
                    seq > @
                      seq
                        xobj_1.write (((unsupported)).apply ((((xObjectSelfReference).xobjects).xcreate)) ("X"))
                        xobj_2.write (((unsupported)).apply ((((xObjectSelfReference).xobjects).xcreate)) ("Y") ((xobj_1)))
                        (((unsupported)).apply (((xobj_1).xobj)) ((xobj_2)))
                        bogusForceDataize.write ((((xobj_1).xsave)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.migrations.loader.MigrationLoader"))) ((xloader)))
                          seq
                            xloader_instance.write ((xloader).xreturn_value)
                            (((unsupported)).apply (((xloader_instance).xmigrated_apps)) ((((unsupported)).apply ("backends"))))
                            xdata.write (((((xconnection).xcreation).xserialize_db_to_string)).apply)
                        bogusForceDataize.write ((((((((xObjectSelfReference).xobjects).xall)).apply).xdelete)).apply)
                        bogusForceDataize.write (((((xconnection).xcreation).xdeserialize_db_from_string)).apply ((xdata)))
                        xobj_1.write (((unsupported)).apply ((((xObjectSelfReference).xobjects).xget)) ("X"))
                        xobj_2.write (((unsupported)).apply ((((xObjectSelfReference).xobjects).xget)) ("Y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj_1).xobj)) ((xobj_2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj_2).xobj)) ((xobj_1)))
                xtest_circular_reference_with_natural_key.write
                  [xself]
                    memory > xobj_a
                    memory > xobj_b
                    memory > xdata
                    memory > xloader_instance
                    seq > @
                      seq
                        xobj_a.write (((unsupported)).apply ((((xCircularA).xobjects).xcreate)) ("A"))
                        xobj_b.write (((unsupported)).apply ((((xCircularB).xobjects).xcreate)) ("B") ((xobj_a)))
                        (((unsupported)).apply (((xobj_a).xobj)) ((xobj_b)))
                        bogusForceDataize.write ((((xobj_a).xsave)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.migrations.loader.MigrationLoader"))) ((xloader)))
                          seq
                            xloader_instance.write ((xloader).xreturn_value)
                            (((unsupported)).apply (((xloader_instance).xmigrated_apps)) ((((unsupported)).apply ("backends"))))
                            xdata.write (((((xconnection).xcreation).xserialize_db_to_string)).apply)
                        bogusForceDataize.write ((((((((xCircularA).xobjects).xall)).apply).xdelete)).apply)
                        bogusForceDataize.write ((((((((xCircularB).xobjects).xall)).apply).xdelete)).apply)
                        bogusForceDataize.write (((((xconnection).xcreation).xdeserialize_db_from_string)).apply ((xdata)))
                        xobj_a.write (((((xCircularA).xobjects).xget)).apply)
                        xobj_b.write (((((xCircularB).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj_a).xobj)) ((xobj_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj_b).xobj)) ((xobj_a)))
                xtest_serialize_db_to_string_base_manager.write
                  [xself]
                    memory > xdata
                    memory > xloader_instance
                    seq > @
                      seq
                        (((unsupported)).apply ((((xSchoolClass).xobjects).xcreate)) (1000) ((((((xdatetime).xdatetime).xnow)).apply)))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.migrations.loader.MigrationLoader"))) ((xloader)))
                          seq
                            xloader_instance.write ((xloader).xreturn_value)
                            (((unsupported)).apply (((xloader_instance).xmigrated_apps)) ((((unsupported)).apply ("backends"))))
                            xdata.write (((((xconnection).xcreation).xserialize_db_to_string)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"model\": \"backends.schoolclass\"") ((xdata)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"year\": 1000") ((xdata)))
            (((unsupported)).apply)
              xskip_function.write
                [xself]
                  seq > @
            xskip_test_function.write
              []
                seq > @
            xexpected_failure_test_function.write
              []
                seq > @
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_mark_expected_failures_and_skips.write
                [xself]
                  memory > xcreation
                  memory > xtest_connection
                  seq > @
                    seq
                      xtest_connection.write (((xget_connection_copy)).apply)
                      xcreation.write (((xBaseDatabaseCreation)).apply ((xtest_connection)))
                      (((unsupported)).apply (((((xcreation).xconnection).xfeatures).xdjango_test_expected_failures)) ((((unsupported)).apply ("backends.base.test_creation.expected_failure_test_function"))))
                      (((unsupported)).apply (((((xcreation).xconnection).xfeatures).xdjango_test_skips)) ((((unsupported)).apply ("skip test class") ((((unsupported)).apply ("backends.base.test_creation.SkipTestClass"))) ("skip test function") ((((unsupported)).apply ("backends.base.test_creation.skip_test_function"))))))
                      bogusForceDataize.write ((((xcreation).xmark_expected_failures_and_skips)).apply)
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((xexpected_failure_test_function).x__unittest_expecting_failure__)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((xSkipTestClass).x__unittest_skip__)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xSkipTestClass).x__unittest_skip_why__)) ("skip test class"))
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((xskip_test_function).x__unittest_skip__)) (TRUE))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xskip_test_function).x__unittest_skip_why__)) ("skip test function"))