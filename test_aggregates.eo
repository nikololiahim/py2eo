memory > xaggregation
memory > xQ
memory > xCast
memory > xJSONBAgg
memory > xconnection
memory > xValue
memory > xRemovedInDjango50Warning
memory > xSubstr
memory > xImportError
memory > xArrayField
memory > xRoom
memory > xtimezone
memory > xordering
memory > xRegrAvgX
memory > xSubquery
memory > xKeyTransform
memory > xlist
memory > xBitAnd
memory > xenumerate
memory > xFunc
memory > xaggregate
memory > xexpected_output
memory > xOuterRef
memory > xRegrSlope
memory > xValueError
memory > xCovarPop
memory > xConcat
memory > xKeyTextTransform
memory > xRegrIntercept
memory > xStatTestModel
memory > xSomeFunc
memory > xCharField
memory > xagg
memory > xIntegerField
memory > xRegrSXX
memory > xStringAgg
memory > xHotelReservation
memory > xRegrR2
memory > xRegrSXY
memory > xBoolOr
memory > xRegrCount
memory > xF
memory > xi
memory > xBitXor
memory > xsorted
memory > xAggregateTestModel
memory > xexpected_result
memory > xPostgreSQLTestCase
memory > xBitOr
memory > xRegrAvgY
memory > xArrayAgg
memory > xApproximate
memory > xStatAggregate
memory > xRegrSYY
memory > xBoolAnd
memory > xCorr
memory > xTypeError
[] > test_aggregates
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_regr_sxx_general
        memory > xtest_array_agg_jsonfield_ordering
        memory > xtest_array_agg_integerfield_ordering
        memory > xtest_bool_or_q_object
        memory > xtest_string_agg_delimiter_escaping
        memory > xtest_alias_is_required
        memory > xtest_bool_and_q_object
        memory > xtest_array_agg_lookups
        memory > xtest_string_agg_default_output_field
        memory > xtest_default_argument
        memory > xtest_array_agg_distinct_true
        memory > xtest_bit_and_on_only_false_values
        memory > xtest_missing_arguments_raises_exception
        memory > xtest_string_agg_array_agg_ordering_in_subquery
        memory > xtest_array_agg_integerfield
        memory > xtest_covar_pop_sample
        memory > xtest_regr_slope_general
        memory > xtest_jsonb_agg_distinct_false
        memory > xtest_bool_and_general
        memory > xtest_bit_or_on_only_false_values
        memory > xtest_string_agg_charfield
        memory > xtest_orderable_agg_alternative_fields
        memory > xtest_bool_or_general
        memory > xtest_bit_or_on_only_true_values
        memory > xtest_string_agg_filter_in_subquery_with_exclude
        memory > xtest_array_agg_charfield_ordering
        memory > xtest_regr_sxy_general
        memory > xtest_ordering_isnt_cleared_for_array_subquery
        memory > xsetUpTestData
        memory > xtest_bit_and_on_only_true_values
        memory > xtest_string_agg_filter
        memory > xtest_array_agg_booleanfield
        memory > xtest_string_agg_distinct_false
        memory > xtest_bit_xor_on_only_true_values
        memory > xtest_jsonb_agg_jsonfield_ordering
        memory > xtest_string_agg_array_agg_filter_in_subquery
        memory > xtest_corr_general
        memory > xtest_string_agg_charfield_ordering
        memory > xtest_array_agg_filter
        memory > xtest_regr_avgx_with_related_obj_and_number_as_argument
        memory > xtest_regr_count_general
        memory > xtest_jsonb_agg_distinct_true
        memory > xtest_jsonb_agg_charfield_ordering
        memory > xtest_string_agg_distinct_true
        memory > xtest_bit_xor_on_only_false_values
        memory > xtest_correct_source_expressions
        memory > xtest_bit_and_general
        memory > xtest_bit_or_general
        memory > xtest_regr_syy_general
        memory > xtest_regr_avgx_general
        memory > xtest_jsonb_agg_booleanfield_ordering
        memory > xtest_jsonb_agg_key_index_transforms
        memory > xtest_bit_xor_general
        memory > xtest_convert_value_deprecation
        memory > xtest_covar_pop_general
        memory > xtest_array_agg_charfield
        memory > xtest_regr_intercept_general
        memory > xtest_array_agg_distinct_false
        memory > xtest_empty_result_set
        memory > xtest_jsonb_agg
        memory > xtest_string_agg_requires_delimiter
        memory > xtest_string_agg_jsonfield_ordering
        memory > xtest_array_agg_jsonfield
        memory > xtest_array_agg_booleanfield_ordering
        memory > xtest_regr_r2_general
        memory > xtest_regr_count_default
        memory > xtest_jsonb_agg_integerfield_ordering
        memory > xtest_regr_avgy_general
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                (((unsupported)).apply)
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xaggs)) ((((((xAggregateTestModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xAggregateTestModel)) (TRUE) ("Foo1") ("Text1") (0))) ((((unsupported)).apply ((xAggregateTestModel)) (FALSE) ("Foo2") ("Text2") (1) ((((unsupported)).apply ("lang") ("pl"))))) ((((unsupported)).apply ((xAggregateTestModel)) (FALSE) ("Foo4") ("Text4") (2) ((((unsupported)).apply ("lang") ("en"))))) ((((unsupported)).apply ((xAggregateTestModel)) (TRUE) ("Foo3") ("Text3") (0) ((((unsupported)).apply ("breed") ("collie"))))))))))
                xtest_empty_result_set.write
                  [xself]
                    memory > xtests
                    memory > xvalues
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((((xAggregateTestModel).xobjects).xall)).apply).xdelete)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((xArrayAgg)).apply ("char_field"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xArrayAgg)).apply ("integer_field"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xArrayAgg)).apply ("boolean_field"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((xBitAnd)).apply ("integer_field"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xBitOr)).apply ("integer_field"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xBoolAnd)).apply ("boolean_field"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xBoolOr)).apply ("boolean_field"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xJSONBAgg)).apply ("integer_field"))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((xStringAgg)) ("char_field") (";"))) (""))))
                        (((xconnection).xfeatures).xhas_bit_xor).if
                          bogusForceDataize.write ((((xtests).xappend)).apply ((((unsupported)).apply ((((xBitXor)).apply ("integer_field"))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregation)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xaggregation)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                                seq
                                  xvalues.write (((unsupported)).apply (((((((xAggregateTestModel).xobjects).xnone)).apply).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                                seq
                                  xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                xtest_default_argument.write
                  [xself]
                    memory > xtests
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write ((((((((xAggregateTestModel).xobjects).xall)).apply).xdelete)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xArrayAgg)) ("char_field") ((((unsupported)).apply ("<empty>"))))) ((((unsupported)).apply ("<empty>"))))) ((((unsupported)).apply ((((unsupported)).apply ((xArrayAgg)) ("integer_field") ((((unsupported)).apply (0))))) ((((unsupported)).apply (0))))) ((((unsupported)).apply ((((unsupported)).apply ((xArrayAgg)) ("boolean_field") ((((unsupported)).apply (FALSE))))) ((((unsupported)).apply (FALSE))))) ((((unsupported)).apply ((((unsupported)).apply ((xBitAnd)) ("integer_field") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xBitOr)) ("integer_field") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xBoolAnd)) ("boolean_field") (FALSE))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ((xBoolOr)) ("boolean_field") (FALSE))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ((xJSONBAgg)) ("integer_field") ((((xValue)).apply ("[\"<empty>\"]"))))) ((((unsupported)).apply ("<empty>"))))) ((((unsupported)).apply ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") ((((xValue)).apply ("<empty>"))))) ("<empty>"))))
                        (((xconnection).xfeatures).xhas_bit_xor).if
                          bogusForceDataize.write ((((xtests).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply ((xBitXor)) ("integer_field") (0))) (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregation)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xaggregation)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                                seq
                                  xvalues.write (((unsupported)).apply (((((((xAggregateTestModel).xobjects).xnone)).apply).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                                seq
                                  xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                xtest_convert_value_deprecation.write
                  [xself]
                    memory > xqueryset
                    seq > @
                      seq
                        bogusForceDataize.write ((((((((xAggregateTestModel).xobjects).xall)).apply).xdelete)).apply)
                        xqueryset.write (((((xAggregateTestModel).xobjects).xall)).apply)
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) (((xArrayAgg).xdeprecation_msg)))))
                          (((unsupported)).apply (((xqueryset).xaggregate)) ((((xArrayAgg)).apply ("boolean_field"))))
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) (((xJSONBAgg).xdeprecation_msg)))))
                          (((unsupported)).apply (((xqueryset).xaggregate)) ((((xJSONBAgg)).apply ("integer_field"))))
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) (((xStringAgg).xdeprecation_msg)))))
                          (((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("boolean_field") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("aggregation") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("integer_field") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("aggregation") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("aggregation") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("boolean_field") ((((xValue)).apply ((((unsupported)).apply)))))))) ((((unsupported)).apply ("aggregation") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("integer_field") ((((xValue)).apply ("[]"))))))) ((((unsupported)).apply ("aggregation") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqueryset).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") ((((xValue)).apply (""))))))) ((((unsupported)).apply ("aggregation") (""))))
                xtest_array_agg_charfield.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xArrayAgg)).apply ("char_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo4") ("Foo3"))))))
                xtest_array_agg_charfield_ordering.write
                  [xself]
                    memory > xvalues
                    memory > xordering_test_cases
                    seq > @
                      seq
                        xordering_test_cases.write (((unsupported)).apply ((((unsupported)).apply (((((((xF)).apply ("char_field")).xdesc)).apply)) ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))) ((((unsupported)).apply (((((((xF)).apply ("char_field")).xasc)).apply)) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ((((xF)).apply ("char_field"))) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("boolean_field"))) (((((((xF)).apply ("char_field")).xdesc)).apply)))) ((((unsupported)).apply ("Foo4") ("Foo2") ("Foo3") ("Foo1"))))) ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("boolean_field"))) (((((((xF)).apply ("char_field")).xdesc)).apply)))) ((((unsupported)).apply ("Foo4") ("Foo2") ("Foo3") ("Foo1"))))) ((((unsupported)).apply ("char_field") ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ("-char_field") ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))) ((((unsupported)).apply ((((xConcat)).apply ("char_field") ((((xValue)).apply ("@"))))) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply (((((((xConcat)).apply ("char_field") ((((xValue)).apply ("@")))).xdesc)).apply)) ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))) ((((unsupported)).apply ((((unsupported)).apply ((((xSubstr)).apply ("char_field") (1) (1))) ((((xF)).apply ("integer_field"))) (((((((xSubstr)).apply ("char_field") (4) (1)).xdesc)).apply)))) ((((unsupported)).apply ("Foo3") ("Foo1") ("Foo2") ("Foo4"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xordering)) ((xexpected_output)))) ((xordering_test_cases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xordering)) ((xexpected_output)))))
                            seq
                              xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("char_field") ((xordering)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((xexpected_output)))))
                xtest_array_agg_integerfield.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xArrayAgg)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply (0) (1) (2) (0))))))
                xtest_array_agg_integerfield_ordering.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("integer_field") (((((((xF)).apply ("integer_field")).xdesc)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply (2) (1) (0) (0))))))
                xtest_array_agg_booleanfield.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xArrayAgg)).apply ("boolean_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply (TRUE) (FALSE) (FALSE) (TRUE))))))
                xtest_array_agg_booleanfield_ordering.write
                  [xself]
                    memory > xvalues
                    memory > xordering_test_cases
                    seq > @
                      seq
                        xordering_test_cases.write (((unsupported)).apply ((((unsupported)).apply (((((((xF)).apply ("boolean_field")).xasc)).apply)) ((((unsupported)).apply (FALSE) (FALSE) (TRUE) (TRUE))))) ((((unsupported)).apply (((((((xF)).apply ("boolean_field")).xdesc)).apply)) ((((unsupported)).apply (TRUE) (TRUE) (FALSE) (FALSE))))) ((((unsupported)).apply ((((xF)).apply ("boolean_field"))) ((((unsupported)).apply (FALSE) (FALSE) (TRUE) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xordering)) ((xexpected_output)))) ((xordering_test_cases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xordering)) ((xexpected_output)))))
                            seq
                              xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("boolean_field") ((xordering)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((xexpected_output)))))
                xtest_array_agg_jsonfield.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ((((xKeyTransform)).apply ("lang") ("json_field"))) ((((unsupported)).apply ((xQ)) (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply ("pl") ("en"))))))
                xtest_array_agg_jsonfield_ordering.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ((((xKeyTransform)).apply ("lang") ("json_field"))) ((((unsupported)).apply ((xQ)) (FALSE))) ((((xKeyTransform)).apply ("lang") ("json_field"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply ("en") ("pl"))))))
                xtest_array_agg_filter.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("integer_field") ((((unsupported)).apply ((xQ)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply (1) (2))))))
                xtest_array_agg_lookups.write
                  [xself]
                    memory > xqs
                    memory > xaggr1
                    memory > xaggr2
                    seq > @
                      seq
                        xaggr1.write (((((xAggregateTestModel).xobjects).xcreate)).apply)
                        xaggr2.write (((((xAggregateTestModel).xobjects).xcreate)).apply)
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) ((xaggr1)) (1) (0))
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) ((xaggr1)) (2) (0))
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) ((xaggr2)) (3) (0))
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) ((xaggr2)) (4) (0))
                        xqs.write (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply (((((((xStatTestModel).xobjects).xvalues)).apply ("related_field")).xannotate)) ((((xArrayAgg)).apply ("int1")))).xfilter)) ((((unsupported)).apply (2)))).xvalues_list)) ("array") (TRUE))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xqs).xget)).apply)) ((((unsupported)).apply (1) (2))))
                xtest_bit_and_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((unsupported)).apply (0) (1)))).xaggregate)) ((((xBitAnd)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitand") (0))))
                xtest_bit_and_on_only_true_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (1)).xaggregate)) ((((xBitAnd)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitand") (1))))
                xtest_bit_and_on_only_false_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (0)).xaggregate)) ((((xBitAnd)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitand") (0))))
                xtest_bit_or_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((unsupported)).apply (0) (1)))).xaggregate)) ((((xBitOr)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitor") (1))))
                xtest_bit_or_on_only_true_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (1)).xaggregate)) ((((xBitOr)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitor") (1))))
                xtest_bit_or_on_only_false_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (0)).xaggregate)) ((((xBitOr)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitor") (0))))
                xtest_bit_xor_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) (3))
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((unsupported)).apply (1) (3)))).xaggregate)) ((((xBitXor)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitxor") (2))))
                xtest_bit_xor_on_only_true_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (1)).xaggregate)) ((((xBitXor)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitxor") (1))))
                xtest_bit_xor_on_only_false_values.write
                  [xself]
                    memory > xvalues
                    seq > @
                      (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) (0)).xaggregate)) ((((xBitXor)).apply ("integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("bitxor") (0))))
                xtest_bool_and_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xBoolAnd)).apply ("boolean_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("booland") (FALSE))))
                xtest_bool_and_q_object.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xBoolAnd)).apply ((((unsupported)).apply ((xQ)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("booland") (FALSE))))
                xtest_bool_or_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xBoolOr)).apply ("boolean_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("boolor") (TRUE))))
                xtest_bool_or_q_object.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xBoolOr)).apply ((((unsupported)).apply ((xQ)) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("boolor") (FALSE))))
                xtest_string_agg_requires_delimiter.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xStringAgg)).apply ("char_field"))))
                xtest_string_agg_delimiter_escaping.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") ("'"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ("Foo1'Foo2'Foo4'Foo3"))))
                xtest_string_agg_charfield.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ("Foo1;Foo2;Foo4;Foo3"))))
                xtest_string_agg_default_output_field.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("text_field") (";"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ("Text1;Text2;Text4;Text3"))))
                xtest_string_agg_charfield_ordering.write
                  [xself]
                    memory > xvalues
                    memory > xordering_test_cases
                    seq > @
                      seq
                        xordering_test_cases.write (((unsupported)).apply ((((unsupported)).apply (((((((xF)).apply ("char_field")).xdesc)).apply)) ("Foo4;Foo3;Foo2;Foo1"))) ((((unsupported)).apply (((((((xF)).apply ("char_field")).xasc)).apply)) ("Foo1;Foo2;Foo3;Foo4"))) ((((unsupported)).apply ((((xF)).apply ("char_field"))) ("Foo1;Foo2;Foo3;Foo4"))) ((((unsupported)).apply ("char_field") ("Foo1;Foo2;Foo3;Foo4"))) ((((unsupported)).apply ("-char_field") ("Foo4;Foo3;Foo2;Foo1"))) ((((unsupported)).apply ((((xConcat)).apply ("char_field") ((((xValue)).apply ("@"))))) ("Foo1;Foo2;Foo3;Foo4"))) ((((unsupported)).apply (((((((xConcat)).apply ("char_field") ((((xValue)).apply ("@")))).xdesc)).apply)) ("Foo4;Foo3;Foo2;Foo1"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xordering)) ((xexpected_output)))) ((xordering_test_cases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xordering)) ((xexpected_output)))))
                            seq
                              xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") ((xordering)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ((xexpected_output)))))
                xtest_string_agg_jsonfield_ordering.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ((((xKeyTextTransform)).apply ("lang") ("json_field"))) (";") ((((xKeyTextTransform)).apply ("lang") ("json_field"))) ((((xCharField)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ("en;pl"))))
                xtest_string_agg_filter.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") (((((unsupported)).apply ((xQ)) ("3")).or (((unsupported)).apply ((xQ)) ("1")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("stringagg") ("Foo1;Foo3"))))
                xtest_orderable_agg_alternative_fields.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("integer_field") (((((((xF)).apply ("char_field")).xasc)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("arrayagg") ((((unsupported)).apply (0) (1) (0) (2))))))
                xtest_jsonb_agg.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((xJSONBAgg)).apply ("char_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("jsonbagg") ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo4") ("Foo3"))))))
                xtest_jsonb_agg_charfield_ordering.write
                  [xself]
                    memory > xvalues
                    memory > xordering_test_cases
                    seq > @
                      seq
                        xordering_test_cases.write (((unsupported)).apply ((((unsupported)).apply (((((((xF)).apply ("char_field")).xdesc)).apply)) ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))) ((((unsupported)).apply (((((((xF)).apply ("char_field")).xasc)).apply)) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ((((xF)).apply ("char_field"))) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ("char_field") ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply ("-char_field") ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))) ((((unsupported)).apply ((((xConcat)).apply ("char_field") ((((xValue)).apply ("@"))))) ((((unsupported)).apply ("Foo1") ("Foo2") ("Foo3") ("Foo4"))))) ((((unsupported)).apply (((((((xConcat)).apply ("char_field") ((((xValue)).apply ("@")))).xdesc)).apply)) ((((unsupported)).apply ("Foo4") ("Foo3") ("Foo2") ("Foo1"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xordering)) ((xexpected_output)))) ((xordering_test_cases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xordering)) ((xexpected_output)))))
                            seq
                              xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("char_field") ((xordering)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("jsonbagg") ((xexpected_output)))))
                xtest_jsonb_agg_integerfield_ordering.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("integer_field") (((((((xF)).apply ("integer_field")).xdesc)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("jsonbagg") ((((unsupported)).apply (2) (1) (0) (0))))))
                xtest_jsonb_agg_booleanfield_ordering.write
                  [xself]
                    memory > xvalues
                    memory > xordering_test_cases
                    seq > @
                      seq
                        xordering_test_cases.write (((unsupported)).apply ((((unsupported)).apply (((((((xF)).apply ("boolean_field")).xasc)).apply)) ((((unsupported)).apply (FALSE) (FALSE) (TRUE) (TRUE))))) ((((unsupported)).apply (((((((xF)).apply ("boolean_field")).xdesc)).apply)) ((((unsupported)).apply (TRUE) (TRUE) (FALSE) (FALSE))))) ((((unsupported)).apply ((((xF)).apply ("boolean_field"))) ((((unsupported)).apply (FALSE) (FALSE) (TRUE) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xordering)) ((xexpected_output)))) ((xordering_test_cases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xordering)) ((xexpected_output)))))
                            seq
                              xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("boolean_field") ((xordering)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("jsonbagg") ((xexpected_output)))))
                xtest_jsonb_agg_jsonfield_ordering.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ((((xKeyTransform)).apply ("lang") ("json_field"))) ((((unsupported)).apply ((xQ)) (FALSE))) ((((xKeyTransform)).apply ("lang") ("json_field"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("jsonbagg") ((((unsupported)).apply ("en") ("pl"))))))
                xtest_jsonb_agg_key_index_transforms.write
                  [xself]
                    memory > xroom102
                    memory > xdatetimes
                    memory > xroom101
                    memory > xvalues
                    seq > @
                      seq
                        xroom101.write (((unsupported)).apply ((((xRoom).xobjects).xcreate)) (101))
                        xroom102.write (((unsupported)).apply ((((xRoom).xobjects).xcreate)) (102))
                        xdatetimes.write (((unsupported)).apply (((((xtimezone).xdatetime)).apply (2018) (6) (20))) (((((xtimezone).xdatetime)).apply (2018) (6) (24))) (((((xtimezone).xdatetime)).apply (2018) (6) (28))))
                        (((unsupported)).apply ((((xHotelReservation).xobjects).xcreate)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (0)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (0))) ((((unsupported)).apply ((xdatetimes)) (1))) ((xroom102)) ((((unsupported)).apply ("double_bed") (TRUE) ("parking") (TRUE))))
                        (((unsupported)).apply ((((xHotelReservation).xobjects).xcreate)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (2)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (1))) ((((unsupported)).apply ((xdatetimes)) (2))) ((xroom102)) ((((unsupported)).apply ("double_bed") (FALSE) ("sea_view") (TRUE) ("parking") (FALSE))))
                        (((unsupported)).apply ((((xHotelReservation).xobjects).xcreate)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (0)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (2)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (0))) ((((unsupported)).apply ((xdatetimes)) (2))) ((xroom101)) ((((unsupported)).apply ("sea_view") (FALSE))))
                        xvalues.write ((((((unsupported)).apply (((((unsupported)).apply ((((xRoom).xobjects).xannotate)) ((((unsupported)).apply ((xJSONBAgg)) ("hotelreservation__requirements") ("-hotelreservation__start")))).xfilter)) (TRUE)).xvalues)).apply ("number") ("requirements"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xvalues)) ((((unsupported)).apply ((((unsupported)).apply ("number") (102) ("requirements") ((((unsupported)).apply ((((unsupported)).apply ("double_bed") (FALSE) ("sea_view") (TRUE) ("parking") (FALSE))) ((((unsupported)).apply ("double_bed") (TRUE) ("parking") (TRUE))))))))))
                xtest_string_agg_array_agg_ordering_in_subquery.write
                  [xself]
                    memory > xsubquery
                    memory > xstats
                    memory > xvalues
                    seq > @
                      seq
                        xstats.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xagg)))) ((((xenumerate)).apply ((((((xAggregateTestModel).xobjects).xorder_by)).apply ("char_field"))))))
                          seq
                            bogusForceDataize.write ((((xstats).xappend)).apply ((((unsupported)).apply ((xStatTestModel)) ((xagg)) ((xi)) (((xi).add 1)))))
                            bogusForceDataize.write ((((xstats).xappend)).apply ((((unsupported)).apply ((xStatTestModel)) ((xagg)) (((xi).add 1)) ((xi)))))
                        bogusForceDataize.write (((((xStatTestModel).xobjects).xbulk_create)).apply ((xstats)))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregate)) ((xexpected_result)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xArrayAgg)) ("stattestmodel__int1") ("-stattestmodel__int2"))) ((((unsupported)).apply ((((unsupported)).apply ("Foo1") ((((unsupported)).apply (0) (1))))) ((((unsupported)).apply ("Foo2") ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ("Foo3") ((((unsupported)).apply (2) (3))))) ((((unsupported)).apply ("Foo4") ((((unsupported)).apply (3) (4))))))))) ((((unsupported)).apply ((((unsupported)).apply ((xStringAgg)) ((((xCast)).apply ("stattestmodel__int1") ((((xCharField)).apply)))) (";") ("-stattestmodel__int2"))) ((((unsupported)).apply ((((unsupported)).apply ("Foo1") ("0;1"))) ((((unsupported)).apply ("Foo2") ("1;2"))) ((((unsupported)).apply ("Foo3") ("2;3"))) ((((unsupported)).apply ("Foo4") ("3;4"))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((((xaggregate).x__class__).x__name__)))))
                            seq
                              xsubquery.write ((((((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xannotate)) ((xaggregate))).xvalues)).apply ("agg"))
                              xvalues.write (((((((((unsupported)).apply ((((xAggregateTestModel).xobjects).xannotate)) ((((xSubquery)).apply ((xsubquery))))).xorder_by)).apply ("char_field")).xvalues_list)).apply ("char_field") ("agg"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xvalues)))) ((xexpected_result)))
                xtest_string_agg_array_agg_filter_in_subquery.write
                  [xself]
                    memory > xsubquery
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write (((((xStatTestModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xStatTestModel)) ((((unsupported)).apply (((xself).xaggs)) (0))) (0) (5))) ((((unsupported)).apply ((xStatTestModel)) ((((unsupported)).apply (((xself).xaggs)) (0))) (1) (4))) ((((unsupported)).apply ((xStatTestModel)) ((((unsupported)).apply (((xself).xaggs)) (0))) (2) (3))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregate)) ((xexpected_result)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xArrayAgg)) ("stattestmodel__int1") ((((unsupported)).apply ((xQ)) (3))))) ((((unsupported)).apply ((((unsupported)).apply ("Foo1") ((((unsupported)).apply (0) (1))))) ((((unsupported)).apply ("Foo2") ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ((((unsupported)).apply ((xStringAgg)) ((((xCast)).apply ("stattestmodel__int2") ((((xCharField)).apply)))) (";") ((((unsupported)).apply ((xQ)) (2))))) ((((unsupported)).apply ((((unsupported)).apply ("Foo1") ("5;4"))) ((((unsupported)).apply ("Foo2") ("None: is there a None literal in the EO language?"))))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((((xaggregate).x__class__).x__name__)))))
                            seq
                              xsubquery.write ((((((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xannotate)) ((xaggregate))).xvalues)).apply ("agg"))
                              xvalues.write (((((((((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xannotate)) ((((xSubquery)).apply ((xsubquery))))).xfilter)) ((((unsupported)).apply ("Foo1") ("Foo2")))).xorder_by)).apply ("char_field")).xvalues_list)).apply ("char_field") ("agg"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xvalues)))) ((xexpected_result)))
                xtest_string_agg_filter_in_subquery_with_exclude.write
                  [xself]
                    memory > xsubquery
                    seq > @
                      seq
                        xsubquery.write ((((((unsupported)).apply (((((unsupported)).apply ((((xAggregateTestModel).xobjects).xannotate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (";") ((((unsupported)).apply ((xQ)) ("1")))))).xexclude)) ("")).xvalues)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xAggregateTestModel).xobjects).xfilter)) ((((xSubquery)).apply ((xsubquery)))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xaggs)) (0))))))
                xtest_ordering_isnt_cleared_for_array_subquery.write
                  [xself]
                    memory > xqs
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write (((((xAggregateTestModel).xobjects).xorder_by)).apply ("-integer_field"))
                        xqs.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xannotate)) ((((unsupported)).apply ((xFunc)) ((((xSubquery)).apply (((((xinner_qs).xvalues)).apply ("integer_field"))))) ("ARRAY") ((((unsupported)).apply ((xArrayField)) ((((xIntegerField)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xqs).xfirst)).apply).xintegers)) ((((unsupported)).apply (((xinner_qs).xvalues_list)) ("integer_field") (TRUE))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) ("Foo"))
                        (((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) ("Foo"))
                        (((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) ("Bar"))
                xtest_string_agg_distinct_false.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (" ") (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xvalues)) ("stringagg")).xcount)).apply ("Foo"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xvalues)) ("stringagg")).xcount)).apply ("Bar"))) (1))
                xtest_string_agg_distinct_true.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xStringAgg)) ("char_field") (" ") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xvalues)) ("stringagg")).xcount)).apply ("Foo"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xvalues)) ("stringagg")).xcount)).apply ("Bar"))) (1))
                xtest_array_agg_distinct_false.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("char_field") (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((((unsupported)).apply ((xvalues)) ("arrayagg"))))) ((((unsupported)).apply ("Bar") ("Foo") ("Foo"))))
                xtest_array_agg_distinct_true.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xArrayAgg)) ("char_field") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((((unsupported)).apply ((xvalues)) ("arrayagg"))))) ((((unsupported)).apply ("Bar") ("Foo"))))
                xtest_jsonb_agg_distinct_false.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("char_field") (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((((unsupported)).apply ((xvalues)) ("jsonbagg"))))) ((((unsupported)).apply ("Bar") ("Foo") ("Foo"))))
                xtest_jsonb_agg_distinct_true.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xAggregateTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xJSONBAgg)) ("char_field") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((((unsupported)).apply ((xvalues)) ("jsonbagg"))))) ((((unsupported)).apply ("Bar") ("Foo"))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) (1) (3) ((((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) (0))))
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) (2) (2) ((((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) (1))))
                        (((unsupported)).apply ((((xStatTestModel).xobjects).xcreate)) (3) (1) ((((unsupported)).apply ((((xAggregateTestModel).xobjects).xcreate)) (2))))
                xtest_missing_arguments_raises_exception.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Both y and x must be provided."))))
                        (((unsupported)).apply ((xStatAggregate)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_correct_source_expressions.write
                  [xself]
                    memory > xfunc
                    seq > @
                      seq
                        xfunc.write (((unsupported)).apply ((xStatAggregate)) ("test") (13))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xfunc).xsource_expressions)) (0))) ((xValue)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xfunc).xsource_expressions)) (1))) ((xF)))
                xtest_alias_is_required.write
                  [xself]
                    memory > xfunction
                    seq > @
                      seq
                        (((unsupported)).apply ((xStatAggregate)))
                          xfunction.write "TEST"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ("Complex aggregates require an alias"))))
                          bogusForceDataize.write (((((xStatTestModel).xobjects).xaggregate)).apply ((((unsupported)).apply ((xSomeFunc)) ("int2") ("int1"))))
                xtest_empty_result_set.write
                  [xself]
                    memory > xtests
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write ((((((((xStatTestModel).xobjects).xall)).apply).xdelete)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCorr)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1") (TRUE))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrAvgX)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrAvgY)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrCount)) ("int2") ("int1"))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrIntercept)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrR2)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSlope)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSXX)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSXY)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSYY)) ("int2") ("int1"))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregation)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xaggregation)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                                seq
                                  xvalues.write (((unsupported)).apply (((((((xStatTestModel).xobjects).xnone)).apply).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                                seq
                                  xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                xtest_default_argument.write
                  [xself]
                    memory > xtests
                    memory > xvalues
                    seq > @
                      seq
                        bogusForceDataize.write ((((((((xStatTestModel).xobjects).xall)).apply).xdelete)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCorr)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1") (TRUE) (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrAvgX)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrAvgY)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrIntercept)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrR2)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSlope)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSXX)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSXY)) ("int2") ("int1") (0))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xRegrSYY)) ("int2") ("int1") (0))) (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaggregation)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xaggregation)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                                seq
                                  xvalues.write (((unsupported)).apply (((((((xStatTestModel).xobjects).xnone)).apply).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                                seq
                                  xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((xaggregation)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("aggregation") ((xexpected_result)))))
                xtest_corr_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xCorr)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("corr") ((1.0.neg)))))
                xtest_covar_pop_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("covarpop") ((((unsupported)).apply ((xApproximate)) ((0.66.neg)) (1))))))
                xtest_covar_pop_sample.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xCovarPop)) ("int2") ("int1") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("covarpop") ((1.0.neg)))))
                xtest_regr_avgx_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrAvgX)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regravgx") (2.0))))
                xtest_regr_avgy_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrAvgY)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regravgy") (2.0))))
                xtest_regr_count_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrCount)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrcount") (3))))
                xtest_regr_count_default.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "RegrCount does not allow default."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xRegrCount)) ("int2") ("int1") (0))
                xtest_regr_intercept_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrIntercept)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrintercept") (4))))
                xtest_regr_r2_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrR2)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrr2") (1))))
                xtest_regr_slope_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrSlope)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrslope") ((1.neg)))))
                xtest_regr_sxx_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrSXX)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrsxx") (2.0))))
                xtest_regr_sxy_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrSXY)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrsxy") ((2.0.neg)))))
                xtest_regr_syy_general.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrSYY)) ("int2") ("int1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("regrsyy") (2.0))))
                xtest_regr_avgx_with_related_obj_and_number_as_argument.write
                  [xself]
                    memory > xvalues
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply ((((xStatTestModel).xobjects).xaggregate)) ((((unsupported)).apply ((xRegrAvgX)) (5) ("related_field__integer_field"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply ("complex_regravgx") (1.0))))