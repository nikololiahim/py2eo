memory > xcm
memory > xexpected
memory > xValueError
memory > xio
memory > xwarnings
memory > xstream
memory > xfindfile
memory > xopen
memory > xpathlib
memory > xf
memory > xunlink
memory > xUnseekableIO
memory > xAttributeError
memory > xheader
memory > xBytesWarning
memory > xFileNotFoundError
memory > ximghdr
memory > xbytearray
memory > x_
memory > xOSError
memory > xTESTFN
memory > xos
memory > xstream2
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_imghdr
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_output_stream
        memory > xseek
        memory > xtest_register_test
        memory > xtell
        memory > xtearDown
        memory > xtest_invalid_headers
        memory > xtest_data
        memory > xtest_pathlike_filename
        memory > xsetUpClass
        memory > xTEST_FILES
        memory > xtest_missing_file
        memory > xtest_unseekable
        memory > xtest_bad_args
        memory > xtest_string_data
        memory > xtest_closed_file
        memory > xtest_file_pos
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xTEST_FILES.write (((unsupported)).apply ((((unsupported)).apply ("python.png") ("png"))) ((((unsupported)).apply ("python.gif") ("gif"))) ((((unsupported)).apply ("python.bmp") ("bmp"))) ((((unsupported)).apply ("python.ppm") ("ppm"))) ((((unsupported)).apply ("python.pgm") ("pgm"))) ((((unsupported)).apply ("python.pbm") ("pbm"))) ((((unsupported)).apply ("python.jpg") ("jpeg"))) ((((unsupported)).apply ("python.ras") ("rast"))) ((((unsupported)).apply ("python.sgi") ("rgb"))) ((((unsupported)).apply ("python.tiff") ("tiff"))) ((((unsupported)).apply ("python.xbm") ("xbm"))) ((((unsupported)).apply ("python.webp") ("webp"))) ((((unsupported)).apply ("python.exr") ("exr"))))
            (((unsupported)).apply (((xio).xFileIO)))
              seq
                xtell.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xio).xUnsupportedOperation)))
                xseek.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xio).xUnsupportedOperation)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xtestfile)) ((((unsupported)).apply ((xfindfile)) ("python.png") ("imghdrdata"))))
                        (((unsupported)).apply ((((xopen)).apply (((xcls).xtestfile)) ("rb"))) ((xstream2)))
                          (((unsupported)).apply (((xcls).xtestdata)) (((((xstream).xread)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xunlink)).apply ((xTESTFN)))
                xtest_data.write
                  [xself]
                    memory > xdata
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xexpected)))) ((xTEST_FILES)))
                        seq
                          xfilename.write (((unsupported)).apply ((xfindfile)) ((xfilename)) ("imghdrdata"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ((xfilename)))) ((xexpected)))
                          (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xstream)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ((xstream)))) ((xexpected)))
                          (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xstream)))
                            xdata.write ((((xstream).xread)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?") ((xdata)))) ((xexpected)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?") ((((xbytearray)).apply ((xdata)))))) ((xexpected)))
                xtest_pathlike_filename.write
                  [xself]
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xexpected)))) ((xTEST_FILES)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfilename)))))
                          seq
                            xfilename.write (((unsupported)).apply ((xfindfile)) ((xfilename)) ("imghdrdata"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply (((((xpathlib).xPath)).apply ((xfilename)))))) ((xexpected)))
                xtest_register_test.write
                  [xself]
                    memory > xtest_jumbo
                    seq > @
                      seq
                        xtest_jumbo.write
                          [xh xfile]
                            seq > @
                              ((((xh).xstartswith)).apply ("eggs")).if
                                (((unsupported)).apply ("ham"))
                        bogusForceDataize.write (((((ximghdr).xtests).xappend)).apply ((xtest_jumbo)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((ximghdr).xtests).xpop)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?") ("eggs"))) ("ham"))
                xtest_file_pos.write
                  [xself]
                    memory > xpos
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xstream)))
                          seq
                            bogusForceDataize.write ((((xstream).xwrite)).apply ("ababagalamaga"))
                            xpos.write ((((xstream).xtell)).apply)
                            bogusForceDataize.write ((((xstream).xwrite)).apply (((xself).xtestdata)))
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xstream)))
                          seq
                            bogusForceDataize.write ((((xstream).xseek)).apply ((xpos)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((ximghdr).xwhat)).apply ((xstream)))) ("png"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstream).xtell)).apply)) ((xpos)))
                xtest_bad_args.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply (((xself).xtestfile)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply (((((xos).xfsencode)).apply (((xself).xtestfile)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtestfile)) ("rb"))) ((xf)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                            bogusForceDataize.write ((((ximghdr).xwhat)).apply (((((xf).xfileno)).apply)))
                xtest_invalid_headers.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xheader)) ((((unsupported)).apply ("211PNrn") ("001331") ("x59xA6") ("cutecat") ("000000JFI") ("GIF80"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?") ((xheader)))))
                xtest_string_data.write
                  [xself]
                    memory > xdata
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                        seq
                          bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xBytesWarning)))
                          (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((x_)))) ((xTEST_FILES)))
                            seq
                              xfilename.write (((unsupported)).apply ((xfindfile)) ((xfilename)) ("imghdrdata"))
                              (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xstream)))
                                xdata.write (((((((xstream).xread)).apply).xdecode)).apply ("latin1"))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                                bogusForceDataize.write ((((ximghdr).xwhat)).apply (((((xio).xStringIO)).apply ((xdata)))))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                                bogusForceDataize.write ((((ximghdr).xwhat)).apply ("None: is there a None literal in the EO language?") ((xdata)))
                xtest_missing_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))))
                        bogusForceDataize.write ((((ximghdr).xwhat)).apply ("missing"))
                xtest_closed_file.write
                  [xself]
                    memory > xstream
                    seq > @
                      seq
                        xstream.write (((xopen)).apply (((xself).xtestfile)) ("rb"))
                        bogusForceDataize.write ((((xstream).xclose)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply ((xstream)))
                        xstream.write ((((xio).xBytesIO)).apply (((xself).xtestdata)))
                        bogusForceDataize.write ((((xstream).xclose)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((ximghdr).xwhat)).apply ((xstream)))
                xtest_unseekable.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xstream)))
                          bogusForceDataize.write ((((xstream).xwrite)).apply (((xself).xtestdata)))
                        (((unsupported)).apply ((((xUnseekableIO)).apply ((xTESTFN)) ("rb"))) ((xstream)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply (((xio).xUnsupportedOperation)))))
                            bogusForceDataize.write ((((ximghdr).xwhat)).apply ((xstream)))
                xtest_output_stream.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xstream)))
                        seq
                          bogusForceDataize.write ((((xstream).xwrite)).apply (((xself).xtestdata)))
                          bogusForceDataize.write ((((xstream).xseek)).apply (0))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                            bogusForceDataize.write ((((ximghdr).xwhat)).apply ((xstream)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)