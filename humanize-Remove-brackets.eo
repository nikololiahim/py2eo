memory > xgettext_lazy
memory > xValueError
memory > xstr
memory > xNaturalTimeFormatter
memory > xdate
memory > xround_away_from_one
memory > xmark_safe
memory > xexponent
memory > xgetattr
memory > xDecimal
memory > xisinstance
memory > xTypeError
memory > xdefaultfilters
memory > xAttributeError
memory > xtimezone
memory > xdatetime
memory > xnumber
memory > xtemplate
memory > xngettext
memory > xnumber_format
memory > xconverter
memory > xint
memory > xre
memory > xpgettext
memory > xnpgettext_lazy
memory > xis_aware
memory > xfloat
memory > xngettext_lazy
memory > xabs
[] > humanize
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xnaturaltime
        memory > xnaturalday
        memory > xpast_substrings
        memory > xstring_for
        memory > xintword_converters
        memory > xfuture_substrings
        memory > xordinal
        memory > xintcomma
        memory > xtime_strings
        memory > xintword
        memory > x_
        memory > xapnumber
        memory > xregister
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xregister.write ((xtemplate).xLibrary)
            xordinal.write
              [xvalue]
                memory > xtemplates
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                      xvalue.write (((xint)).apply ((xvalue)))
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply (((xvalue).mod 100)) ((((unsupported)).apply (11) (12) (13)))).if
                      xvalue.write ((((((xpgettext)).apply ("ordinal 11, 12, 13") ("{}th")).xformat)).apply ((xvalue)))
                      seq
                        xtemplates.write (((unsupported)).apply ((((xpgettext)).apply ("ordinal 0") ("{}th"))) ((((xpgettext)).apply ("ordinal 1") ("{}st"))) ((((xpgettext)).apply ("ordinal 2") ("{}nd"))) ((((xpgettext)).apply ("ordinal 3") ("{}rd"))) ((((xpgettext)).apply ("ordinal 4") ("{}th"))) ((((xpgettext)).apply ("ordinal 5") ("{}th"))) ((((xpgettext)).apply ("ordinal 6") ("{}th"))) ((((xpgettext)).apply ("ordinal 7") ("{}th"))) ((((xpgettext)).apply ("ordinal 8") ("{}th"))) ((((xpgettext)).apply ("ordinal 9") ("{}th"))))
                        xvalue.write ((((((unsupported)).apply ((xtemplates)) (((xvalue).mod 10))).xformat)).apply ((xvalue)))
                    (((unsupported)).apply ((((xmark_safe)).apply ((xvalue)))))
            xintcomma.write
              [xvalue xuse_l10n]
                memory > xnew
                memory > xorig
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (xuse_l10n).if
                      (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                        ((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xfloat)) ((xDecimal))))).not).if
                          xvalue.write (((xint)).apply ((xvalue)))
                        (((unsupported)).apply ((((xintcomma)).apply ((xvalue)) (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xnumber_format)) ((xvalue)) (TRUE) (TRUE))))
                    xorig.write (((xstr)).apply ((xvalue)))
                    xnew.write ((((xre).xsub)).apply ("^(-?d+)(d{3})") ("g<1>,g<2>") ((xorig)))
                    ((xorig).eq (xnew)).if
                      (((unsupported)).apply ((xnew)))
                      (((unsupported)).apply ((((xintcomma)).apply ((xnew)) ((xuse_l10n)))))
            xintword_converters.write (((unsupported)).apply ((((unsupported)).apply (6) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s million") ("%(value)s million") ((xnumber)))))))) ((((unsupported)).apply (9) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s billion") ("%(value)s billion") ((xnumber)))))))) ((((unsupported)).apply (12) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s trillion") ("%(value)s trillion") ((xnumber)))))))) ((((unsupported)).apply (15) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s quadrillion") ("%(value)s quadrillion") ((xnumber)))))))) ((((unsupported)).apply (18) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s quintillion") ("%(value)s quintillion") ((xnumber)))))))) ((((unsupported)).apply (21) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s sextillion") ("%(value)s sextillion") ((xnumber)))))))) ((((unsupported)).apply (24) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s septillion") ("%(value)s septillion") ((xnumber)))))))) ((((unsupported)).apply (27) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s octillion") ("%(value)s octillion") ((xnumber)))))))) ((((unsupported)).apply (30) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s nonillion") ("%(value)s nonillion") ((xnumber)))))))) ((((unsupported)).apply (33) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s decillion") ("%(value)s decillion") ((xnumber)))))))) ((((unsupported)).apply (100) ((((unsupported)).apply ((((xngettext)).apply ("%(value)s googol") ("%(value)s googol") ((xnumber)))))))))
            xintword.write
              [xvalue]
                memory > xnew_value
                memory > xlarge_number
                memory > xrounded_value
                memory > xabs_value
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                      xvalue.write (((xint)).apply ((xvalue)))
                      (((unsupported)).apply ((xvalue)))
                    xabs_value.write (((xabs)).apply ((xvalue)))
                    ((xabs_value).less 1000000).if
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply ((xexponent)) ((xconverter)))) ((xintword_converters)))
                      seq
                        xlarge_number.write (((unsupported)).apply (10) ((xexponent)))
                        ((xabs_value).less ((xlarge_number).mul 1000)).if
                          seq
                            xnew_value.write ((xvalue).div (xlarge_number))
                            xrounded_value.write (((xround_away_from_one)).apply ((xnew_value)))
                            (((unsupported)).apply (((((xconverter)).apply ((((xabs)).apply ((xrounded_value))))).mod (((unsupported)).apply ("value") (((((xdefaultfilters).xfloatformat)).apply ((xnew_value)) (1)))))))
                    (((unsupported)).apply ((xvalue)))
            xapnumber.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                      xvalue.write (((xint)).apply ((xvalue)))
                      (((unsupported)).apply ((xvalue)))
                    ((((unsupported)).apply (0) ((xvalue)) (10)).not).if
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("one"))) ((((x_)).apply ("two"))) ((((x_)).apply ("three"))) ((((x_)).apply ("four"))) ((((x_)).apply ("five"))) ((((x_)).apply ("six"))) ((((x_)).apply ("seven"))) ((((x_)).apply ("eight"))) ((((x_)).apply ("nine"))))) (((xvalue).sub 1)))))
            xnaturalday.write
              [xvalue xarg]
                memory > xdelta
                memory > xtoday
                memory > xtzinfo
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xtzinfo.write (((xgetattr)).apply ((xvalue)) ("tzinfo") ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((xAttributeError)))
                      xvalue.write (((xdate)).apply (((xvalue).xyear)) (((xvalue).xmonth)) (((xvalue).xday)))
                      (((unsupported)).apply ((xvalue)))
                    xtoday.write (((((xdatetime).xnow)).apply ((xtzinfo))).xdate)
                    xdelta.write ((xvalue).sub (xtoday))
                    (((xdelta).xdays).eq 0).if
                      (((unsupported)).apply ((((x_)).apply ("today"))))
                      (((xdelta).xdays).eq 1).if
                        (((unsupported)).apply ((((x_)).apply ("tomorrow"))))
                        (((xdelta).xdays).eq (1.neg)).if
                          (((unsupported)).apply ((((x_)).apply ("yesterday"))))
                    (((unsupported)).apply (((((xdefaultfilters).xdate)).apply ((xvalue)) ((xarg)))))
            xnaturaltime.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xNaturalTimeFormatter).xstring_for)).apply ((xvalue)))))
            (((unsupported)).apply)
              seq
                xtime_strings.write (((unsupported)).apply ("past-day") ((((xgettext_lazy)).apply ("%(delta)s ago"))) ("past-hour") ((((xngettext_lazy)).apply ("an hour ago") ("%(count)s hours ago") ("count"))) ("past-minute") ((((xngettext_lazy)).apply ("a minute ago") ("%(count)s minutes ago") ("count"))) ("past-second") ((((xngettext_lazy)).apply ("a second ago") ("%(count)s seconds ago") ("count"))) ("now") ((((xgettext_lazy)).apply ("now"))) ("future-second") ((((xngettext_lazy)).apply ("a second from now") ("%(count)s seconds from now") ("count"))) ("future-minute") ((((xngettext_lazy)).apply ("a minute from now") ("%(count)s minutes from now") ("count"))) ("future-hour") ((((xngettext_lazy)).apply ("an hour from now") ("%(count)s hours from now") ("count"))) ("future-day") ((((xgettext_lazy)).apply ("%(delta)s from now"))))
                xpast_substrings.write (((unsupported)).apply ("year") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d year") ("%(num)d years") ("num"))) ("month") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d month") ("%(num)d months") ("num"))) ("week") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d week") ("%(num)d weeks") ("num"))) ("day") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d day") ("%(num)d days") ("num"))) ("hour") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d hour") ("%(num)d hours") ("num"))) ("minute") ((((xnpgettext_lazy)).apply ("naturaltime-past") ("%(num)d minute") ("%(num)d minutes") ("num"))))
                xfuture_substrings.write (((unsupported)).apply ("year") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d year") ("%(num)d years") ("num"))) ("month") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d month") ("%(num)d months") ("num"))) ("week") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d week") ("%(num)d weeks") ("num"))) ("day") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d day") ("%(num)d days") ("num"))) ("hour") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d hour") ("%(num)d hours") ("num"))) ("minute") ((((xnpgettext_lazy)).apply ("naturaltime-future") ("%(num)d minute") ("%(num)d minutes") ("num"))))
                xstring_for.write
                  [xcls xvalue]
                    memory > xdelta
                    memory > xcount
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        ((((xisinstance)).apply ((xvalue)) ((xdate))).not).if
                          (((unsupported)).apply ((xvalue)))
                        xnow.write ((((xdatetime).xnow)).apply (((((xis_aware)).apply ((xvalue))).if ((xtimezone).xutc) "None: is there a None literal in the EO language?")))
                        ((xvalue).less (xnow)).if
                          seq
                            xdelta.write ((xnow).sub (xvalue))
                            (((xdelta).xdays).neq 0).if
                              (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("past-day")).mod (((unsupported)).apply ("delta") ((((unsupported)).apply (((xdefaultfilters).xtimesince)) ((xvalue)) ((xnow)) (((xcls).xpast_substrings))))))))
                              (((xdelta).xseconds).eq 0).if
                                (((unsupported)).apply ((((unsupported)).apply (((xcls).xtime_strings)) ("now"))))
                                (((xdelta).xseconds).less 60).if
                                  (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("past-second")).mod (((unsupported)).apply ("count") (((xdelta).xseconds))))))
                                  ((((unsupported)).apply (((xdelta).xseconds)) (60)).less 60).if
                                    seq
                                      xcount.write (((unsupported)).apply (((xdelta).xseconds)) (60))
                                      (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("past-minute")).mod (((unsupported)).apply ("count") ((xcount))))))
                                    seq
                                      xcount.write (((unsupported)).apply ((((unsupported)).apply (((xdelta).xseconds)) (60))) (60))
                                      (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("past-hour")).mod (((unsupported)).apply ("count") ((xcount))))))
                          seq
                            xdelta.write ((xvalue).sub (xnow))
                            (((xdelta).xdays).neq 0).if
                              (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("future-day")).mod (((unsupported)).apply ("delta") ((((unsupported)).apply (((xdefaultfilters).xtimeuntil)) ((xvalue)) ((xnow)) (((xcls).xfuture_substrings))))))))
                              (((xdelta).xseconds).eq 0).if
                                (((unsupported)).apply ((((unsupported)).apply (((xcls).xtime_strings)) ("now"))))
                                (((xdelta).xseconds).less 60).if
                                  (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("future-second")).mod (((unsupported)).apply ("count") (((xdelta).xseconds))))))
                                  ((((unsupported)).apply (((xdelta).xseconds)) (60)).less 60).if
                                    seq
                                      xcount.write (((unsupported)).apply (((xdelta).xseconds)) (60))
                                      (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("future-minute")).mod (((unsupported)).apply ("count") ((xcount))))))
                                    seq
                                      xcount.write (((unsupported)).apply ((((unsupported)).apply (((xdelta).xseconds)) (60))) (60))
                                      (((unsupported)).apply (((((unsupported)).apply (((xcls).xtime_strings)) ("future-hour")).mod (((unsupported)).apply ("count") ((xcount))))))