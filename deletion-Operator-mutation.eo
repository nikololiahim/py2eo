memory > xattrgetter
memory > xrel
memory > xquery_utils
memory > xerror
memory > xfields
memory > xrf
memory > xrelated
memory > xtuple
memory > xsorted
memory > xobj
memory > xgetattr
memory > xsetattr
memory > xlink
memory > xqs
memory > xfield
memory > xall
memory > xlist
memory > xinstances_for_fieldvalues
memory > xrange
memory > xrelated_field
memory > xvalue
memory > xmax
memory > xinstances
memory > xbatch
memory > xcallable
memory > xany
memory > xptr
memory > xf
memory > xset
memory > xconnections
memory > xhasattr
memory > xitems
memory > xCounter
memory > xsum
memory > xi
memory > xsuper
memory > xchain
memory > xIntegrityError
memory > xsql
memory > xRestrictedError
memory > xdefaultdict
memory > xpartial
memory > xProtectedError
memory > xsignals
memory > xrelated_fields
memory > xmodel
memory > xtransaction
memory > xlen
memory > xdict
[] > deletion
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xDO_NOTHING
        memory > xclear_restricted_objects_from_set
        memory > xinstances_with_model
        memory > xRESTRICT
        memory > xSET_NULL
        memory > xget_candidate_relations_to_delete
        memory > xPROTECT
        memory > xsort
        memory > x__init__
        memory > xadd
        memory > xget_del_batches
        memory > xadd_dependency
        memory > xdelete
        memory > xCASCADE
        memory > xclear_restricted_objects_from_queryset
        memory > xrelated_objects
        memory > x_has_signal_listeners
        memory > xcollect
        memory > xSET_DEFAULT
        memory > xSET
        memory > xadd_restricted_objects
        memory > xcan_fast_delete
        memory > xadd_field_update
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xIntegrityError)))
              x__init__.write
                [xself xmsg xprotected_objects]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xprotected_objects)) ((xprotected_objects)))
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xmsg)) ((xprotected_objects)))
            (((unsupported)).apply ((xIntegrityError)))
              x__init__.write
                [xself xmsg xrestricted_objects]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xrestricted_objects)) ((xrestricted_objects)))
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xmsg)) ((xrestricted_objects)))
            xCASCADE.write
              [xcollector xfield xsub_objs xusing]
                seq > @
                  seq
                    (((unsupported)).apply (((xcollector).xcollect)) ((xsub_objs)) ((((xfield).xremote_field).xmodel)) (((xfield).xname)) (((xfield).xnull)) (FALSE))
                    (((xfield).xnull).and ((((((unsupported)).apply ((xconnections)) ((xusing))).xfeatures).xcan_defer_constraint_checks).not)).if
                      bogusForceDataize.write ((((xcollector).xadd_field_update)).apply ((xfield)) ("None: is there a None literal in the EO language?") ((xsub_objs)))
            xPROTECT.write
              [xcollector xfield xsub_objs xusing]
                seq > @
                  (((unsupported)).apply ((((xProtectedError)).apply (("Cannot delete some instances of model '%s' because they are referenced through a protected foreign key: '%s.%s'".mod (((unsupported)).apply (((((xfield).xremote_field).xmodel).x__name__)) ((((((unsupported)).apply ((xsub_objs)) (0)).x__class__).x__name__)) (((xfield).xname))))) ((xsub_objs)))))
            xRESTRICT.write
              [xcollector xfield xsub_objs xusing]
                seq > @
                  seq
                    bogusForceDataize.write ((((xcollector).xadd_restricted_objects)).apply ((xfield)) ((xsub_objs)))
                    bogusForceDataize.write ((((xcollector).xadd_dependency)).apply ((((xfield).xremote_field).xmodel)) (((xfield).xmodel)))
            xSET.write
              [xvalue]
                memory > xset_on_delete
                seq > @
                  seq
                    (((xcallable)).apply ((xvalue))).if
                      xset_on_delete.write
                        [xcollector xfield xsub_objs xusing]
                          seq > @
                            bogusForceDataize.write ((((xcollector).xadd_field_update)).apply ((xfield)) ((((xvalue)).apply)) ((xsub_objs)))
                      xset_on_delete.write
                        [xcollector xfield xsub_objs xusing]
                          seq > @
                            bogusForceDataize.write ((((xcollector).xadd_field_update)).apply ((xfield)) ((xvalue)) ((xsub_objs)))
                    (((unsupported)).apply (((xset_on_delete).xdeconstruct)) ((((unsupported)).apply ((((unsupported)).apply ("django.db.models.SET") ((((unsupported)).apply ((xvalue)))) ((((unsupported)).apply)))))))
                    (((unsupported)).apply ((xset_on_delete)))
            xSET_NULL.write
              [xcollector xfield xsub_objs xusing]
                seq > @
                  bogusForceDataize.write ((((xcollector).xadd_field_update)).apply ((xfield)) ("None: is there a None literal in the EO language?") ((xsub_objs)))
            xSET_DEFAULT.write
              [xcollector xfield xsub_objs xusing]
                seq > @
                  bogusForceDataize.write ((((xcollector).xadd_field_update)).apply ((xfield)) (((((xfield).xget_default)).apply)) ((xsub_objs)))
            xDO_NOTHING.write
              [xcollector xfield xsub_objs xusing]
                seq > @
            xget_candidate_relations_to_delete.write
              [xopts]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xf)) ((xf)) ((((unsupported)).apply (((xopts).xget_fields)) (TRUE))) (((((xf).xauto_created).and (((xf).xconcrete).not)).and (((xf).xone_to_one).or ((xf).xone_to_many)))))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xusing xorigin]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xusing)) ((xusing)))
                        (((unsupported)).apply (((xself).xorigin)) ((xorigin)))
                        (((unsupported)).apply (((xself).xdata)) ((((xdefaultdict)).apply ((xset)))))
                        (((unsupported)).apply (((xself).xfield_updates)) ((((xdefaultdict)).apply ((((xpartial)).apply ((xdefaultdict)) ((xset)))))))
                        (((unsupported)).apply (((xself).xrestricted_objects)) ((((xdefaultdict)).apply ((((xpartial)).apply ((xdefaultdict)) ((xset)))))))
                        (((unsupported)).apply (((xself).xfast_deletes)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xdependencies)) ((((xdefaultdict)).apply ((xset)))))
                xadd.write
                  [xself xobjs xsource xnullable xreverse_dependency]
                    memory > xinstances
                    memory > xmodel
                    memory > xnew_objs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xobjs).not).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        xnew_objs.write (((unsupported)).apply)
                        xmodel.write ((((unsupported)).apply ((xobjs)) (0)).x__class__)
                        xinstances.write (((unsupported)).apply (((xself).xdata)) ((xmodel)))
                        (((unsupported)).apply ((xobj)) ((xobjs)))
                          (((unsupported)).apply ((xobj)) ((xinstances))).if
                            bogusForceDataize.write ((((xnew_objs).xappend)).apply ((xobj)))
                        bogusForceDataize.write ((((xinstances).xupdate)).apply ((xnew_objs)))
                        ((((unsupported)).apply ((xsource)) ("None: is there a None literal in the EO language?")).and ((xnullable).not)).if
                          (((unsupported)).apply (((xself).xadd_dependency)) ((xsource)) ((xmodel)) ((xreverse_dependency)))
                        (((unsupported)).apply ((xnew_objs)))
                xadd_dependency.write
                  [xself xmodel xdependency xreverse_dependency]
                    seq > @
                      (((unsupported)).apply)
                        (xreverse_dependency).if
                          (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xdependency)))) ((((unsupported)).apply ((xdependency)) ((xmodel)))))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xdependencies)) ((((xmodel).x_meta).xconcrete_model))).xadd)).apply ((((xdependency).x_meta).xconcrete_model)))
                        bogusForceDataize.write (((((xself).xdata).xsetdefault)).apply ((xdependency)) ((((((xself).xdata).xdefault_factory)).apply)))
                xadd_field_update.write
                  [xself xfield xvalue xobjs]
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xobjs).not).if
                          (((unsupported)).apply)
                        xmodel.write ((((unsupported)).apply ((xobjs)) (0)).x__class__)
                        bogusForceDataize.write ((((((unsupported)).apply ((((unsupported)).apply (((xself).xfield_updates)) ((xmodel)))) ((((unsupported)).apply ((xfield)) ((xvalue))))).xupdate)).apply ((xobjs)))
                xadd_restricted_objects.write
                  [xself xfield xobjs]
                    memory > xmodel
                    seq > @
                      (xobjs).if
                        seq
                          xmodel.write ((((unsupported)).apply ((xobjs)) (0)).x__class__)
                          bogusForceDataize.write ((((((unsupported)).apply ((((unsupported)).apply (((xself).xrestricted_objects)) ((xmodel)))) ((xfield))).xupdate)).apply ((xobjs)))
                xclear_restricted_objects_from_set.write
                  [xself xmodel xobjs]
                    seq > @
                      (((unsupported)).apply ((xmodel)) (((xself).xrestricted_objects))).if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrestricted_objects)) ((xmodel)))) ((((unsupported)).apply ((xfield)) (((xitems).sub (xobjs))) ((((unsupported)).apply ((xfield)) ((xitems)))) (((((((unsupported)).apply (((xself).xrestricted_objects)) ((xmodel))).xitems)).apply)))))
                xclear_restricted_objects_from_queryset.write
                  [xself xmodel xqs]
                    memory > xobjs
                    seq > @
                      (((unsupported)).apply ((xmodel)) (((xself).xrestricted_objects))).if
                        seq
                          xobjs.write (((xset)).apply ((((unsupported)).apply (((xqs).xfilter)) ((((unsupported)).apply (((xobj).xpk)) ((xobjs)) (((((((unsupported)).apply (((xself).xrestricted_objects)) ((xmodel))).xvalues)).apply)) ((xobj)) ((xobjs)))))))
                          bogusForceDataize.write ((((xself).xclear_restricted_objects_from_set)).apply ((xmodel)) ((xobjs)))
                x_has_signal_listeners.write
                  [xself xmodel]
                    seq > @
                      (((unsupported)).apply (((((((xsignals).xpre_delete).xhas_listeners)).apply ((xmodel))).or (((((xsignals).xpost_delete).xhas_listeners)).apply ((xmodel))))))
                xcan_fast_delete.write
                  [xself xobjs xfrom_field]
                    memory > xopts
                    memory > xmodel
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xfrom_field).and (((unsupported)).apply ((((xfrom_field).xremote_field).xon_delete)) ((xCASCADE)))).if
                          (((unsupported)).apply (FALSE))
                        (((xhasattr)).apply ((xobjs)) ("_meta")).if
                          xmodel.write (((xobjs).x_meta).xmodel)
                          ((((xhasattr)).apply ((xobjs)) ("model")).and (((xhasattr)).apply ((xobjs)) ("_raw_delete"))).if
                            xmodel.write ((xobjs).xmodel)
                            (((unsupported)).apply (FALSE))
                        ((((xself).x_has_signal_listeners)).apply ((xmodel))).if
                          (((unsupported)).apply (FALSE))
                        xopts.write ((xmodel).x_meta)
                        (((unsupported)).apply ((((((xall)).apply ((((unsupported)).apply (((xlink).eq (xfrom_field))) ((xlink)) ((((((((xopts).xconcrete_model).x_meta).xparents).xvalues)).apply))))).and (((xall)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xrelated).xfield).xremote_field).xon_delete)) ((xDO_NOTHING)))) ((xrelated)) ((((xget_candidate_relations_to_delete)).apply ((xopts)))))))).and ((((xany)).apply ((((unsupported)).apply ((((xhasattr)).apply ((xfield)) ("bulk_related_objects"))) ((xfield)) (((xopts).xprivate_fields))))).not))))
                xget_del_batches.write
                  [xself xobjs xfields]
                    memory > xfield_names
                    memory > xconn_batch_size
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfield_names.write (((unsupported)).apply (((xfield).xname)) ((xfield)) ((xfields)))
                        xconn_batch_size.write (((xmax)).apply ((((((((unsupported)).apply ((xconnections)) (((xself).xusing))).xops).xbulk_batch_size)).apply ((xfield_names)) ((xobjs)))) (1))
                        ((((xlen)).apply ((xobjs))).greater (xconn_batch_size)).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) ((((unsupported)).apply ((xi)) (((xi).sub (xconn_batch_size))))))) ((xi)) ((((xrange)).apply (0) ((((xlen)).apply ((xobjs)))) ((xconn_batch_size)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xobjs)))))
                xcollect.write
                  [xself xobjs xsource xnullable xcollect_related xsource_attr xreverse_dependency xkeep_parents xfail_on_restricted]
                    memory > xreferenced_fields
                    memory > xnew_objs
                    memory > xmodel_fast_deletes
                    memory > xprotected_objects
                    memory > xconcrete_model
                    memory > xrestricted_objects
                    memory > xparent_objs
                    memory > xbatches
                    memory > xrelated_model
                    memory > xmodel
                    memory > xsub_objs
                    memory > xkey
                    memory > xparents
                    memory > xfield
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((xself).xcan_fast_delete)).apply ((xobjs))).if
                          seq
                            bogusForceDataize.write (((((xself).xfast_deletes).xappend)).apply ((xobjs)))
                            (((unsupported)).apply)
                        xnew_objs.write (((unsupported)).apply (((xself).xadd)) ((xobjs)) ((xsource)) ((xnullable)) ((xreverse_dependency)))
                        ((xnew_objs).not).if
                          (((unsupported)).apply)
                        xmodel.write ((((unsupported)).apply ((xnew_objs)) (0)).x__class__)
                        ((xkeep_parents).not).if
                          seq
                            xconcrete_model.write (((xmodel).x_meta).xconcrete_model)
                            (((unsupported)).apply ((xptr)) (((((((xconcrete_model).x_meta).xparents).xvalues)).apply)))
                              (xptr).if
                                seq
                                  xparent_objs.write (((unsupported)).apply ((((xgetattr)).apply ((xobj)) (((xptr).xname)))) ((xobj)) ((xnew_objs)))
                                  (((unsupported)).apply (((xself).xcollect)) ((xparent_objs)) ((xmodel)) ((((xptr).xremote_field).xrelated_name)) (FALSE) (TRUE) (FALSE))
                        ((xcollect_related).not).if
                          (((unsupported)).apply)
                        (xkeep_parents).if
                          xparents.write (((xset)).apply ((((((xmodel).x_meta).xget_parent_list)).apply)))
                        xmodel_fast_deletes.write (((xdefaultdict)).apply ((xlist)))
                        xprotected_objects.write (((xdefaultdict)).apply ((xlist)))
                        (((unsupported)).apply ((xrelated)) ((((xget_candidate_relations_to_delete)).apply (((xmodel).x_meta)))))
                          seq
                            ((xkeep_parents).and (((unsupported)).apply (((xrelated).xmodel)) ((xparents)))).if
                              (((unsupported)).apply)
                            xfield.write ((xrelated).xfield)
                            ((((xfield).xremote_field).xon_delete).eq (xDO_NOTHING)).if
                              (((unsupported)).apply)
                            xrelated_model.write ((xrelated).xrelated_model)
                            (((unsupported)).apply (((xself).xcan_fast_delete)) ((xrelated_model)) ((xfield))).if
                              seq
                                bogusForceDataize.write ((((((unsupported)).apply ((xmodel_fast_deletes)) ((xrelated_model))).xappend)).apply ((xfield)))
                                (((unsupported)).apply)
                            xbatches.write ((((xself).xget_del_batches)).apply ((xnew_objs)) ((((unsupported)).apply ((xfield)))))
                            (((unsupported)).apply ((xbatch)) ((xbatches)))
                              seq
                                xsub_objs.write ((((xself).xrelated_objects)).apply ((xrelated_model)) ((((unsupported)).apply ((xfield)))) ((xbatch)))
                                (((((xsub_objs).xquery).xselect_related).or ((((xself).x_has_signal_listeners)).apply ((xrelated_model)))).not).if
                                  seq
                                    xreferenced_fields.write (((xset)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ((((unsupported)).apply (((xrf).xattname)) ((xrf)) ((((xrel).xfield).xforeign_related_fields)))) ((xrel)) ((((xget_candidate_relations_to_delete)).apply (((xrelated_model).x_meta)))))))))
                                    xsub_objs.write ((((xsub_objs).xonly)).apply ((((unsupported)).apply ((((xtuple)).apply ((xreferenced_fields)))))))
                                (xsub_objs).if
                                  (((unsupported)).apply ((xProtectedError)))
                                    bogusForceDataize.write (((((xfield).xremote_field).xon_delete)).apply ((xself)) ((xfield)) ((xsub_objs)) (((xself).xusing)))
                                    seq
                                      xkey.write ("'%s.%s'".mod (((unsupported)).apply ((((xfield).xmodel).x__name__)) (((xfield).xname))))
                                      (((unsupported)).apply ((((unsupported)).apply ((xprotected_objects)) ((xkey)))) (((xerror).xprotected_objects)))
                        (xprotected_objects).if
                          (((unsupported)).apply ((((xProtectedError)).apply (("Cannot delete some instances of model %r because they are referenced through protected foreign keys: %s.".mod (((unsupported)).apply (((xmodel).x__name__)) ((((", ".xjoin)).apply ((xprotected_objects))))))) ((((xset)).apply (((((xchain).xfrom_iterable)).apply (((((xprotected_objects).xvalues)).apply)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrelated_model)) ((xrelated_fields)))) (((((xmodel_fast_deletes).xitems)).apply)))
                          seq
                            xbatches.write ((((xself).xget_del_batches)).apply ((xnew_objs)) ((xrelated_fields)))
                            (((unsupported)).apply ((xbatch)) ((xbatches)))
                              seq
                                xsub_objs.write ((((xself).xrelated_objects)).apply ((xrelated_model)) ((xrelated_fields)) ((xbatch)))
                                bogusForceDataize.write (((((xself).xfast_deletes).xappend)).apply ((xsub_objs)))
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xprivate_fields)))
                          (((xhasattr)).apply ((xfield)) ("bulk_related_objects")).if
                            seq
                              xsub_objs.write ((((xfield).xbulk_related_objects)).apply ((xnew_objs)) (((xself).xusing)))
                              (((unsupported)).apply (((xself).xcollect)) ((xsub_objs)) ((xmodel)) (TRUE) (FALSE))
                        (xfail_on_restricted).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xrelated_model)) ((xinstances)))) ((((((xself).xdata).xitems)).apply)))
                              bogusForceDataize.write ((((xself).xclear_restricted_objects_from_set)).apply ((xrelated_model)) ((xinstances)))
                            (((unsupported)).apply ((xqs)) (((xself).xfast_deletes)))
                              bogusForceDataize.write ((((xself).xclear_restricted_objects_from_queryset)).apply (((xqs).xmodel)) ((xqs)))
                            (((((xself).xrestricted_objects).xvalues)).apply).if
                              seq
                                xrestricted_objects.write (((xdefaultdict)).apply ((xlist)))
                                (((unsupported)).apply ((((unsupported)).apply ((xrelated_model)) ((xfields)))) ((((((xself).xrestricted_objects).xitems)).apply)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xobjs)))) (((((xfields).xitems)).apply)))
                                    (xobjs).if
                                      seq
                                        xkey.write ("'%s.%s'".mod (((unsupported)).apply (((xrelated_model).x__name__)) (((xfield).xname))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xrestricted_objects)) ((xkey)))) ((xobjs)))
                                (xrestricted_objects).if
                                  (((unsupported)).apply ((((xRestrictedError)).apply (("Cannot delete some instances of model %r because they are referenced through restricted foreign keys: %s.".mod (((unsupported)).apply (((xmodel).x__name__)) ((((", ".xjoin)).apply ((xrestricted_objects))))))) ((((xset)).apply (((((xchain).xfrom_iterable)).apply (((((xrestricted_objects).xvalues)).apply)))))))))
                xrelated_objects.write
                  [xself xrelated_model xrelated_fields xobjs]
                    memory > xpredicate
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xpredicate.write (((unsupported)).apply (((xquery_utils).xQ)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("{related_field.name}__in") ((xobjs)))) ((xrelated_field)) ((xrelated_fields)))))) ((((xquery_utils).xQ).xOR)))
                        (((unsupported)).apply (((((((((xrelated_model).x_base_manager).xusing)).apply (((xself).xusing))).xfilter)).apply ((xpredicate)))))
                xinstances_with_model.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xinstances)))) ((((((xself).xdata).xitems)).apply)))
                        (((unsupported)).apply ((xobj)) ((xinstances)))
                          (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xobj)))))
                xsort.write
                  [xself]
                    memory > xconcrete_models
                    memory > xfound
                    memory > xmodels
                    memory > xsorted_models
                    memory > xdependencies
                    seq > @
                      seq
                        xsorted_models.write (((unsupported)).apply)
                        xconcrete_models.write (((xset)).apply)
                        xmodels.write (((xlist)).apply (((xself).xdata)))
                        while.
                          ((((xlen)).apply ((xsorted_models))).less (((xlen)).apply ((xmodels))))
                          [unused]
                            seq > @
                              seq
                                xfound.write FALSE
                                (((unsupported)).apply ((xmodel)) ((xmodels)))
                                  seq
                                    (((unsupported)).apply ((xmodel)) ((xsorted_models))).if
                                      (((unsupported)).apply)
                                    xdependencies.write (((((xself).xdependencies).xget)).apply ((((xmodel).x_meta).xconcrete_model)))
                                    (((xdependencies).and ((((xdependencies).xdifference)).apply ((xconcrete_models)))).not).if
                                      seq
                                        bogusForceDataize.write ((((xsorted_models).xappend)).apply ((xmodel)))
                                        bogusForceDataize.write ((((xconcrete_models).xadd)).apply ((((xmodel).x_meta).xconcrete_model)))
                                        xfound.write TRUE
                                ((xfound).not).if
                                  (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdata)) ((((unsupported)).apply ((xmodel)) ((((unsupported)).apply (((xself).xdata)) ((xmodel)))) ((xmodel)) ((xsorted_models)))))
                xdelete.write
                  [xself]
                    memory > xpk_list
                    memory > xcount
                    memory > xinstance
                    memory > xdeleted_counter
                    memory > xquery
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xinstances)))) ((((((xself).xdata).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xdata)) ((xmodel)))) ((((unsupported)).apply ((xsorted)) ((xinstances)) ((((xattrgetter)).apply ("pk"))))))
                        bogusForceDataize.write ((((xself).xsort)).apply)
                        xdeleted_counter.write (((xCounter)).apply)
                        (((((xlen)).apply (((xself).xdata))).eq 1).and ((((xlen)).apply ((xinstances))).eq 1)).if
                          seq
                            xinstance.write (((unsupported)).apply ((((xlist)).apply ((xinstances)))) (0))
                            ((((xself).xcan_fast_delete)).apply ((xinstance))).if
                              seq
                                (((unsupported)).apply (((((xtransaction).xmark_for_rollback_on_error)).apply (((xself).xusing)))))
                                  xcount.write (((((((xsql).xDeleteQuery)).apply ((xmodel))).xdelete_batch)).apply ((((unsupported)).apply (((xinstance).xpk)))) (((xself).xusing)))
                                bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((((xmodel).x_meta).xpk).xattname)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((((unsupported)).apply ((xcount)) ((((unsupported)).apply ((((xmodel).x_meta).xlabel)) ((xcount)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) (((xself).xusing)) (FALSE))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xobj)))) (((((xself).xinstances_with_model)).apply)))
                              ((((xmodel).x_meta).xauto_created).not).if
                                (((unsupported)).apply ((((xsignals).xpre_delete).xsend)) ((xmodel)) ((xobj)) (((xself).xusing)) (((xself).xorigin)))
                            (((unsupported)).apply ((xqs)) (((xself).xfast_deletes)))
                              seq
                                xcount.write (((unsupported)).apply (((xqs).x_raw_delete)) (((xself).xusing)))
                                (xcount).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xdeleted_counter)) (((((xqs).xmodel).x_meta).xlabel)))) ((xcount)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xinstances_for_fieldvalues)))) ((((((xself).xfield_updates).xitems)).apply)))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xvalue)))) ((xinstances)))) (((((xinstances_for_fieldvalues).xitems)).apply)))
                                seq
                                  xquery.write ((((xsql).xUpdateQuery)).apply ((xmodel)))
                                  bogusForceDataize.write ((((xquery).xupdate_batch)).apply ((((unsupported)).apply (((xobj).xpk)) ((xobj)) ((xinstances)))) ((((unsupported)).apply (((xfield).xname)) ((xvalue)))) (((xself).xusing)))
                            (((unsupported)).apply ((xinstances)) ((((((xself).xdata).xvalues)).apply)))
                              bogusForceDataize.write ((((xinstances).xreverse)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xinstances)))) ((((((xself).xdata).xitems)).apply)))
                              seq
                                xquery.write ((((xsql).xDeleteQuery)).apply ((xmodel)))
                                xpk_list.write (((unsupported)).apply (((xobj).xpk)) ((xobj)) ((xinstances)))
                                xcount.write ((((xquery).xdelete_batch)).apply ((xpk_list)) (((xself).xusing)))
                                (xcount).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xdeleted_counter)) ((((xmodel).x_meta).xlabel)))) ((xcount)))
                                ((((xmodel).x_meta).xauto_created).not).if
                                  (((unsupported)).apply ((xobj)) ((xinstances)))
                                    (((unsupported)).apply ((((xsignals).xpost_delete).xsend)) ((xmodel)) ((xobj)) (((xself).xusing)) (((xself).xorigin)))
                        (((unsupported)).apply ((xinstances_for_fieldvalues)) ((((((xself).xfield_updates).xvalues)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xvalue)))) ((xinstances)))) (((((xinstances_for_fieldvalues).xitems)).apply)))
                            (((unsupported)).apply ((xobj)) ((xinstances)))
                              bogusForceDataize.write (((xsetattr)).apply ((xobj)) (((xfield).xattname)) ((xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xinstances)))) ((((((xself).xdata).xitems)).apply)))
                          (((unsupported)).apply ((xinstance)) ((xinstances)))
                            bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((((xmodel).x_meta).xpk).xattname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((((xsum)).apply (((((xdeleted_counter).xvalues)).apply)))) ((((xdict)).apply ((xdeleted_counter)))))))