memory > xOrganization
memory > xContentType
memory > xEmail
memory > xrange
memory > xCustomUser
memory > xmigrations
memory > xoverride_settings
memory > xcreatesuperuser
memory > xobject
memory > xkey
memory > xmanagement
memory > xlist
memory > xFakeStdin
memory > xKeyboardInterrupt
memory > xCustomUserWithUniqueConstraint
memory > xValueError
memory > xUserProxy
memory > xstr
memory > xCustomUserNonUniqueUsername
memory > xapps
memory > xCustomUserWithFK
memory > xTestCase
memory > xcall_command
memory > xCustomUserWithM2M
memory > xmsg
memory > xdate
memory > xcallable
memory > xmock_getpass
memory > xi
memory > xPermission
memory > xbuiltins
memory > xsys
memory > xargs
memory > xMockTTY
memory > xmock
memory > xos
memory > xval
memory > xget_permission_codename
memory > xget_default_username
memory > xGroup
memory > xcreate_permissions
memory > xStringIO
memory > xSystemExit
memory > xisinstance
memory > xgetpass
memory > xUser
memory > xCommandError
memory > xlen
[] > test_management
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_environment_variable_m2m_non_interactive
        memory > xtest_blank_username
        memory > xtest_usermodel_without_password
        memory > xtest_existing_username_provided_via_option_and_interactive
        memory > xtest_create_permissions_checks_contenttypes_created
        memory > xtest_existing
        memory > xtest_that_changepassword_command_works_with_nonascii_output
        memory > xtest_invalid_username
        memory > xtest_existing_username_non_interactive
        memory > xtest_passing_stdin
        memory > xdatabases
        memory > xtest_get_pass_no_input
        memory > xtest_fields_with_fk
        memory > xtest_password_validation_bypass
        memory > xtest_non_ascii_verbose_name
        memory > xtest_simple
        memory > xtest_validate_fk_environment_variable
        memory > xtest_that_changepassword_command_changes_joes_password
        memory > xtest_fields_with_m2m
        memory > xtest_that_changepassword_command_with_database_option_uses_given_db
        memory > xtest_validate_password_against_username
        memory > xtest_default_permissions
        memory > xtest_system_username
        memory > xtest_environment_variable_non_interactive
        memory > xtest_that_max_tries_exits_1
        memory > xtest_nonexistent_username
        memory > xtest_verbosity_zero
        memory > xsetUpTestData
        memory > xtest_i18n
        memory > xtest_swappable_user
        memory > xtest_input_not_found
        memory > x_
        memory > xtest_password_validation
        memory > xtest_email_in_username
        memory > xtest_default_username
        memory > xsetUp
        memory > xtest_fields_with_fk_via_option_interactive
        memory > xtest_validate_password_against_required_fields_via_option
        memory > xMOCK_INPUT_KEY_TO_PROMPTS
        memory > xisatty
        memory > xtest_fields_with_fk_interactive
        memory > xmock_inputs
        memory > xtest_usermodel_without_password_interactive
        memory > xtest_swappable_user_missing_required_field
        memory > xtest_fields_with_m2m_interactive_blank
        memory > xtest_no_email_argument
        memory > xtest_with_database
        memory > xtest_ignore_environment_variable_non_interactive
        memory > xtest_validate_fk_via_option_interactive
        memory > xtest_fields_with_m2m_interactive
        memory > xtest_permission_with_proxy_content_type_created
        memory > xtest_actual_implementation
        memory > xtest_createsuperuser_command_suggested_username_with_database_option
        memory > xtest_swappable_user_username_non_unique
        memory > xtest_unavailable_models
        memory > xtest_skip_if_not_in_TTY
        memory > xtest_basic_usage
        memory > xtest_ignore_environment_variable_interactive
        memory > xtest_fields_with_m2m_and_through
        memory > xtest_get_pass
        memory > xtest_existing_username
        memory > xtest_validation_mismatched_passwords
        memory > xtest_validate_password_against_required_fields
        memory > xtearDown
        memory > xtest_createsuperuser_command_with_database_option
        memory > xtest_keyboard_interrupt
        memory > xtest_validation_blank_password_entered
        memory > xtest_blank_username_non_interactive
        memory > xtest_validate_fk
        memory > xtest_existing_username_meta_unique_constraint
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xMOCK_INPUT_KEY_TO_PROMPTS.write (((unsupported)).apply ("bypass") ((((unsupported)).apply ("Bypass password validation and create user anyway? [y/N]: "))) ("email") ((((unsupported)).apply ("Email address: "))) ("date_of_birth") ((((unsupported)).apply ("Date of birth: "))) ("first_name") ((((unsupported)).apply ("First name: "))) ("username") ((((unsupported)).apply ("Username: ") ((((unsupported)).apply (("Username (leave blank to use '%s'): ".mod (((xget_default_username)).apply))))))))
            xmock_inputs.write
              [xinputs]
                memory > xinner
                seq > @
                  seq
                    (((unsupported)).apply)
                    xinner.write
                      [xtest_func]
                        memory > xwrapped
                        seq > @
                          seq
                            xwrapped.write
                              []
                                memory > xgetpass
                                memory > xold_getpass
                                memory > xmock_input
                                memory > xold_input
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                                      xgetpass.write
                                        [xprompt xstream]
                                          seq > @
                                            (((unsupported)).apply)
                                              (((xcallable)).apply ((((unsupported)).apply ((xinputs)) ("password")))).if
                                                (((unsupported)).apply ((((((unsupported)).apply ((xinputs)) ("password"))).apply)))
                                              (((unsupported)).apply ((((unsupported)).apply ((xinputs)) ("password"))))
                                    xmock_input.write
                                      [xprompt]
                                        memory > xresponse
                                        memory > xprompt_msgs
                                        seq > @
                                          seq
                                            (((unsupported)).apply ((((unsupported)).apply ("__proxy__") ((xprompt)))))
                                            xresponse.write "None: is there a None literal in the EO language?"
                                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xval)))) (((((xinputs).xitems)).apply)))
                                              seq
                                                ((xval).eq "KeyboardInterrupt").if
                                                  (((unsupported)).apply ((xKeyboardInterrupt)))
                                                xprompt_msgs.write ((((xMOCK_INPUT_KEY_TO_PROMPTS).xget)).apply ((xkey)) ((xkey)))
                                                (((xisinstance)).apply ((xprompt_msgs)) ((xlist))).if
                                                  xprompt_msgs.write (((unsupported)).apply (((((xcallable)).apply ((xmsg))).if (((xmsg)).apply) (xmsg))) ((xmsg)) ((xprompt_msgs)))
                                                (((unsupported)).apply ((xprompt)) ((xprompt_msgs))).if
                                                  seq
                                                    (((xcallable)).apply ((xval))).if
                                                      xresponse.write (((xval)).apply)
                                                      xresponse.write (xval)
                                                    (((unsupported)).apply)
                                            (((unsupported)).apply ((xresponse)) ("None: is there a None literal in the EO language?")).if
                                              (((unsupported)).apply ((((xValueError)).apply (("Mock input for %r not found.".mod (xprompt))))))
                                            (((unsupported)).apply ((xresponse)))
                                    xold_getpass.write ((xcreatesuperuser).xgetpass)
                                    xold_input.write ((xbuiltins).xinput)
                                    (((unsupported)).apply (((xcreatesuperuser).xgetpass)) ((xmock_getpass)))
                                    (((unsupported)).apply (((xbuiltins).xinput)) ((xmock_input)))
                                    (((unsupported)).apply)
                                      bogusForceDataize.write (((xtest_func)).apply ((((unsupported)).apply ((xargs)))))
                                      seq
                                        (((unsupported)).apply (((xcreatesuperuser).xgetpass)) ((xold_getpass)))
                                        (((unsupported)).apply (((xbuiltins).xinput)) ((xold_input)))
                            (((unsupported)).apply ((xwrapped)))
                    (((unsupported)).apply ((xinner)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xisatty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (TRUE))
            (((unsupported)).apply ((xTestCase)))
              xtest_input_not_found.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Mock input for 'Email address: ' not found."))))
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") ((((xMockTTY)).apply)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xold_get_system_username)) (((xmanagement).xget_system_username)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xmanagement).xget_system_username)) (((xself).xold_get_system_username)))
                xtest_actual_implementation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xmanagement).xget_system_username)).apply)) ((xstr)))
                xtest_simple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xget_system_username)) ((((unsupported)).apply ("joe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmanagement).xget_default_username)).apply)) ("joe"))
                xtest_existing.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("joe"))
                        (((unsupported)).apply (((xmanagement).xget_system_username)) ((((unsupported)).apply ("joe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmanagement).xget_default_username)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmanagement).xget_default_username)) (FALSE))) ("joe"))
                xtest_i18n.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xmanagement).xget_system_username)) ((((unsupported)).apply ("Jxfalia"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmanagement).xget_default_username)).apply)) ("julia"))
                xtest_with_database.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("joe"))
                        (((unsupported)).apply (((xmanagement).xget_system_username)) ((((unsupported)).apply ("joe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmanagement).xget_default_username)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmanagement).xget_default_username)) ("other"))) ("joe"))
                        (((unsupported)).apply (((((((xUser).xobjects).xusing)).apply ("other")).xcreate)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmanagement).xget_default_username)) ("other"))) (""))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((((unsupported)).apply ("NAME") ("django.contrib.auth.password_validation.NumericPasswordValidator"))))))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("joe") ("qwerty"))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstdout)) ((((xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xstderr)) ((((xStringIO)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xstdout).xclose)).apply)
                        bogusForceDataize.write (((((xself).xstderr).xclose)).apply)
                xtest_get_pass.write
                  [xself xmock_get_pass]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") (((xself).xstdout)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xUser).xobjects).xget)) ("joe")).xcheck_password)).apply ("password"))) (TRUE))
                xtest_get_pass_no_input.write
                  [xself xmock_get_pass]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("aborted"))))
                          (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") (((xself).xstdout)))
                xtest_system_username.write
                  [xself xmock_get_pass]
                    memory > xusername
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xusername.write ((((xgetpass).xgetuser)).apply)
                        (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ((xusername)) ("qwerty"))
                        (((unsupported)).apply ((xcall_command)) ("changepassword") (((xself).xstdout)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xUser).xobjects).xget)) ((xusername))).xcheck_password)).apply ("new_password"))) (TRUE))
                xtest_nonexistent_username.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("user 'test' does not exist"))))
                        (((unsupported)).apply ((xcall_command)) ("changepassword") ("test") (((xself).xstdout)))
                xtest_that_changepassword_command_changes_joes_password.write
                  [xself xmock_get_pass]
                    memory > xcommand_output
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xuser).xcheck_password)).apply ("qwerty"))))
                        (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") (((xself).xstdout)))
                        xcommand_output.write ((((((((xself).xstdout).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Changing password for user 'joe'nPassword changed successfully for user 'joe'"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((((xUser).xobjects).xget)) ("joe")).xcheck_password)).apply ("not qwerty"))))
                xtest_that_max_tries_exits_1.write
                  [xself xmock_get_pass]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "Aborting password change for user 'joe' after 3 attempts"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") (((xself).xstdout)) (((xself).xstderr)))
                xtest_password_validation.write
                  [xself xmock_get_pass]
                    memory > xabort_msg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xabort_msg.write "Aborting password change for user 'joe' after 3 attempts"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xabort_msg)))))
                          (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") (((xself).xstdout)) (((xself).xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("This password is entirely numeric.") ((((((xself).xstderr).xgetvalue)).apply)))
                xtest_that_changepassword_command_works_with_nonascii_output.write
                  [xself xmock_get_pass]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("Jxfalia") ("qwerty"))
                        (((unsupported)).apply ((xcall_command)) ("changepassword") ("Jxfalia") (((xself).xstdout)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_that_changepassword_command_with_database_option_uses_given_db.write
                  [xself xmock_get_pass]
                    memory > xcommand_output
                    memory > xout
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply (((((((xUser).xobjects).xdb_manager)).apply ("other")).xcreate_user)) ("joe") ("qwerty"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser).xcheck_password)).apply ("qwerty"))))
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("changepassword") ("joe") ("other") ((xout)))
                        xcommand_output.write (((((((xout).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Changing password for user 'joe'nPassword changed successfully for user 'joe'"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply (((((((xUser).xobjects).xusing)).apply ("other")).xget)) ("joe")).xcheck_password)).apply ("not qwerty"))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("fields.W342"))) ((((unsupported)).apply ((((unsupported)).apply ("NAME") ("django.contrib.auth.password_validation.NumericPasswordValidator"))))))))
              seq
                xtest_no_email_argument.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      seq
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("You must use --email with --noinput."))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe") ((xnew_io)))
                xtest_basic_usage.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xu
                    seq > @
                      seq
                        unsupported
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe") ("joe@somewhere.org") ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xemail)) ("joe@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xu).xhas_usable_password)).apply)))
                xtest_non_ascii_verbose_name.write
                  [xself]
                    memory > xtest
                    seq > @
                      seq
                        xtest.write
                          [xself]
                            memory > xnew_io
                            memory > xcommand_output
                            memory > xusername_field
                            memory > xold_verbose_name
                            seq > @
                              (((unsupported)).apply)
                                xusername_field.write (((((xUser).x_meta).xget_field)).apply ("username"))
                                xold_verbose_name.write ((xusername_field).xverbose_name)
                                (((unsupported)).apply (((xusername_field).xverbose_name)) ((((x_)).apply ("uu017eivatel"))))
                                xnew_io.write (((xStringIO)).apply)
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((xnew_io)) ((((xMockTTY)).apply)))
                                  (((unsupported)).apply (((xusername_field).xverbose_name)) ((xold_verbose_name)))
                                xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_verbosity_zero.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xu
                    seq > @
                      seq
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe2") ("joe2@somewhere.org") (0) ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) (""))
                        xu.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("joe2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xemail)) ("joe2@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xu).xhas_usable_password)).apply)))
                xtest_email_in_username.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe+admin@somewhere.org") ("joe@somewhere.org") (0))
                        xu.write (((unsupported)).apply ((((xUser).x_default_manager).xget)) ("joe+admin@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xemail)) ("joe@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xu).xhas_usable_password)).apply)))
                xtest_swappable_user.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe@somewhere.org") ("1976-04-01") ("Joe") ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xu.write (((unsupported)).apply ((((xCustomUser).x_default_manager).xget)) ("joe@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xdate_of_birth)) ((((xdate)).apply (1976) (4) (1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xu).xhas_usable_password)).apply)))
                xtest_swappable_user_missing_required_field.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("You must use --email with --noinput."))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ((xnew_io)) ((xnew_io)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xCustomUser).x_default_manager).xcount)).apply)) (0))
                xtest_swappable_user_username_non_unique.write
                  [xself]
                    memory > xcreatesuperuser
                    memory > xusers
                    seq > @
                      (((unsupported)).apply)
                        xcreatesuperuser.write
                          []
                            memory > xnew_io
                            memory > xcommand_output
                            seq > @
                              (((unsupported)).apply)
                                xnew_io.write (((xStringIO)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ("joe@somewhere.org") ((xnew_io)) ((((xMockTTY)).apply)))
                                xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (2))))
                          bogusForceDataize.write (((xcreatesuperuser)).apply)
                        xusers.write (((unsupported)).apply ((((xCustomUserNonUniqueUsername).xobjects).xfilter)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xusers).xcount)).apply)) (2))
                xtest_skip_if_not_in_TTY.write
                  [xself]
                    memory > xout
                    memory > xisatty
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            unsupported
                            xisatty.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (FALSE))
                        xout.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") ((((xFakeStdin)).apply)) ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xUser).x_default_manager).xcount)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Superuser creation skipped") (((((xout).xgetvalue)).apply)))
                xtest_passing_stdin.write
                  [xself]
                    memory > xcommand
                    memory > xsentinel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsentinel.write (((xobject)).apply)
                        xcommand.write ((((xcreatesuperuser).xCommand)).apply)
                        (((unsupported)).apply ((xcall_command)) ((xcommand)) ((xsentinel)) (FALSE) (0) ("janet") ("janet@example.com"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xcommand).xstdin)) ((xsentinel)))
                        xcommand.write ((((xcreatesuperuser).xCommand)).apply)
                        (((unsupported)).apply ((xcall_command)) ((xcommand)) (FALSE) (0) ("joe") ("joe@example.com"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xcommand).xstdin)) (((xsys).xstdin)))
                xtest_fields_with_fk.write
                  [xself]
                    memory > xemail
                    memory > xmsg
                    memory > xgroup
                    memory > xcommand_output
                    memory > xnon_existent_email
                    memory > xnew_io
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("mygroup"))
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) (((xemail).xpk)) (((xemail).xemail)) (((xgroup).xpk)) ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xu.write (((unsupported)).apply ((((xCustomUserWithFK).x_default_manager).xget)) ((xemail)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xusername)) ((xemail)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xgroup)) ((xgroup)))
                        xnon_existent_email.write "mymail2@gmail.com"
                        xmsg.write ("email instance with email %r does not exist.".mod (xnon_existent_email))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) (((xemail).xpk)) ((xnon_existent_email)) ((xnew_io)))
                xtest_fields_with_fk_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xgroup
                    memory > xemail
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("mygroup"))
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        xtest.write
                          [xself]
                            memory > xcommand_output
                            memory > xu
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((xnew_io)) ((((xMockTTY)).apply)))
                                xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                                xu.write (((unsupported)).apply ((((xCustomUserWithFK).x_default_manager).xget)) ((xemail)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xusername)) ((xemail)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xgroup)) ((xgroup)))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_fields_with_fk_via_option_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xgroup
                    memory > xemail
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("mygroup"))
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        xtest.write
                          [xself]
                            memory > xcommand_output
                            memory > xu
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) (((xemail).xpk)) (((xemail).xemail)) (((xgroup).xpk)) ((xnew_io)) ((((xMockTTY)).apply)))
                                xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                                xu.write (((unsupported)).apply ((((xCustomUserWithFK).x_default_manager).xget)) ((xemail)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xusername)) ((xemail)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xgroup)) ((xgroup)))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validate_fk.write
                  [xself]
                    memory > xnonexistent_group_id
                    memory > xemail
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        bogusForceDataize.write ((((((((xGroup).xobjects).xall)).apply).xdelete)).apply)
                        xnonexistent_group_id.write 1
                        xmsg.write "group instance with id {nonexistent_group_id} does not exist."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) (((xemail).xpk)) (((xemail).xemail)) ((xnonexistent_group_id)) (0))
                xtest_validate_fk_environment_variable.write
                  [xself]
                    memory > xnonexistent_group_id
                    memory > xemail
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        bogusForceDataize.write ((((((((xGroup).xobjects).xall)).apply).xdelete)).apply)
                        xnonexistent_group_id.write 1
                        xmsg.write "group instance with id {nonexistent_group_id} does not exist."
                        (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xos).xenviron)) ((((unsupported)).apply ("DJANGO_SUPERUSER_GROUP") ((((xstr)).apply ((xnonexistent_group_id)))))))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                            (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) (((xemail).xpk)) (((xemail).xemail)) (0))
                xtest_validate_fk_via_option_interactive.write
                  [xself]
                    memory > xtest
                    memory > xnonexistent_group_id
                    memory > xemail
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xemail.write (((unsupported)).apply ((((xEmail).xobjects).xcreate)) ("mymail@gmail.com"))
                        bogusForceDataize.write ((((((((xGroup).xobjects).xall)).apply).xdelete)).apply)
                        xnonexistent_group_id.write 1
                        xmsg.write "group instance with id {nonexistent_group_id} does not exist."
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                                  (((unsupported)).apply ((xcall_command)) ("createsuperuser") ((xnonexistent_group_id)) ((((xMockTTY)).apply)) (0))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_fields_with_m2m.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xorg_id_1
                    memory > xuser
                    memory > xorg_id_2
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xorg_id_1.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 1")).xpk)
                        xorg_id_2.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 2")).xpk)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe") ((((unsupported)).apply ((xorg_id_1)) ((xorg_id_2)))) ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xuser.write (((unsupported)).apply ((((xCustomUserWithM2M).x_default_manager).xget)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xuser).xorgs).xcount)).apply)) (2))
                xtest_fields_with_m2m_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xorg_id_1
                    memory > xorg_id_2
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xorg_id_1.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 1")).xpk)
                        xorg_id_2.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 2")).xpk)
                        xtest.write
                          [xself]
                            memory > xcommand_output
                            memory > xuser
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((xnew_io)) ((((xMockTTY)).apply)))
                                xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                                xuser.write (((unsupported)).apply ((((xCustomUserWithM2M).x_default_manager).xget)) ("joe"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xuser).xorgs).xcount)).apply)) (2))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_fields_with_m2m_interactive_blank.write
                  [xself]
                    memory > xnew_io
                    memory > xreturn_orgs
                    memory > xentered_orgs
                    memory > xorg_id
                    memory > xtest
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xorg_id.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization")).xpk)
                        xentered_orgs.write (((unsupported)).apply ((((xstr)).apply ((xorg_id)))) (" "))
                        xreturn_orgs.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_orgs).xpop)).apply)))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((xnew_io)) ((xnew_io)) ((((xMockTTY)).apply)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Error: This field cannot be blank.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_fields_with_m2m_and_through.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Required field 'orgs' specifies a many-to-many relation through model, which is not supported."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("createsuperuser"))
                xtest_default_username.write
                  [xself]
                    memory > xdefault_username
                    memory > xnew_io
                    memory > xreturn_passwords
                    memory > xtest
                    memory > xentered_passwords
                    seq > @
                      seq
                        unsupported
                        xdefault_username.write (((xget_default_username)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("password"))
                        xreturn_passwords.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Superuser created successfully."))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((((xUser).xobjects).xfilter)) ((xdefault_username))).xexists)).apply)))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_password_validation.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xbad_then_good_password
                    memory > xentered_passwords
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("1234567890") ("1234567890") ("password") ("password"))
                        xbad_then_good_password.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("This password is entirely numeric.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validate_password_against_username.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xentered_passwords
                    memory > xbad_then_good_password
                    memory > xusername
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xusername.write "supremelycomplex"
                        xentered_passwords.write (((unsupported)).apply ((xusername)) ((xusername)) ("superduperunguessablepassword") ("superduperunguessablepassword"))
                        xbad_then_good_password.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("The password is too similar to the username.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validate_password_against_required_fields.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xentered_passwords
                    memory > xbad_then_good_password
                    memory > xfirst_name
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xfirst_name.write "josephine"
                        xentered_passwords.write (((unsupported)).apply ((xfirst_name)) ((xfirst_name)) ("superduperunguessablepassword") ("superduperunguessablepassword"))
                        xbad_then_good_password.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("The password is too similar to the first name.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validate_password_against_required_fields_via_option.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xentered_passwords
                    memory > xbad_then_good_password
                    memory > xfirst_name
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xfirst_name.write "josephine"
                        xentered_passwords.write (((unsupported)).apply ((xfirst_name)) ((xfirst_name)) ("superduperunguessablepassword") ("superduperunguessablepassword"))
                        xbad_then_good_password.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((xfirst_name)) ("1970-01-01") ("joey@example.com") ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("The password is too similar to the first name.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_blank_username.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      seq
                        unsupported
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Username cannot be blank."))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") ("") ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                xtest_blank_username_non_interactive.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      seq
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Username cannot be blank."))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") ("") (FALSE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                xtest_password_validation_bypass.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("This password is entirely numeric.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_invalid_username.write
                  [xself]
                    memory > xnew_io
                    memory > xreturn_passwords
                    memory > xtest
                    memory > xentered_passwords
                    memory > xentered_usernames
                    memory > xuser_field
                    memory > xreturn_usernames
                    memory > xinvalid_username
                    seq > @
                      seq
                        unsupported
                        xuser_field.write (((((xUser).x_meta).xget_field)).apply (((xUser).xUSERNAME_FIELD)))
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("password"))
                        xinvalid_username.write (("x".mul ((xuser_field).xmax_length)).add "y")
                        xentered_usernames.write (((unsupported)).apply ((xinvalid_username)) ("janet"))
                        xreturn_passwords.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xreturn_usernames.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_usernames).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) (("Error: Ensure this value has at most %s characters (it has %s).nSuperuser created successfully.".mod (((unsupported)).apply (((xuser_field).xmax_length)) ((((xlen)).apply ((xinvalid_username))))))))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_keyboard_interrupt.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnew_io).xgetvalue)).apply)) ("nOperation cancelled.n"))
                xtest_existing_username.write
                  [xself]
                    memory > xnew_io
                    memory > xreturn_passwords
                    memory > xreturn_usernames
                    memory > xtest
                    memory > xentered_passwords
                    memory > xentered_usernames
                    memory > xuser
                    seq > @
                      seq
                        unsupported
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("janet"))
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("password"))
                        xentered_usernames.write (((unsupported)).apply (((xuser).xusername)) ("joe"))
                        xreturn_passwords.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xreturn_usernames.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_usernames).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Error: That username is already taken.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_existing_username_meta_unique_constraint.write
                  [xself]
                    memory > xnew_io
                    memory > xreturn_passwords
                    memory > xreturn_usernames
                    memory > xtest
                    memory > xentered_passwords
                    memory > xentered_usernames
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply ((((xCustomUserWithUniqueConstraint).xobjects).xcreate)) ("janet"))
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("password"))
                        xentered_usernames.write (((unsupported)).apply (((xuser).xusername)) ("joe"))
                        xreturn_passwords.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xreturn_usernames.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_usernames).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Error: That username is already taken.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_existing_username_non_interactive.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("janet"))
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ("Error: That username is already taken."))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") ("janet") ("") (FALSE) ((xnew_io)))
                xtest_existing_username_provided_via_option_and_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    memory > xreturn_passwords
                    memory > xentered_passwords
                    seq > @
                      seq
                        unsupported
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("password"))
                        (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("janet"))
                        xreturn_passwords.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            memory > xmsg
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") ("janet") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                xmsg.write "Error: That username is already taken.nSuperuser created successfully."
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ((xmsg)))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validation_mismatched_passwords.write
                  [xself]
                    memory > xnew_io
                    memory > xmismatched_passwords_then_matched
                    memory > xtest
                    memory > xentered_passwords
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("password") ("not password") ("password2") ("password2"))
                        xmismatched_passwords_then_matched.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Error: Your passwords didn't match.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_validation_blank_password_entered.write
                  [xself]
                    memory > xnew_io
                    memory > xblank_passwords_then_valid
                    memory > xtest
                    memory > xentered_passwords
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xentered_passwords.write (((unsupported)).apply ("") ("") ("password2") ("password2"))
                        xblank_passwords_then_valid.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xentered_passwords).xpop)).apply (0))))
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Error: Blank passwords aren't allowed.nSuperuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_usermodel_without_password.write
                  [xself]
                    memory > xnew_io
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)) ("username"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Superuser created successfully."))
                xtest_usermodel_without_password_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xtest
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xtest.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) ((xnew_io)) ((xnew_io)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xnew_io).xgetvalue)).apply).xstrip)).apply)) ("Superuser created successfully."))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
                xtest_environment_variable_non_interactive.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) (0))
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("test_superuser"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ("joe@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser).xcheck_password)).apply ("test_password"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xfirst_name)) (""))
                xtest_environment_variable_m2m_non_interactive.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xorg_id_1
                    memory > xuser
                    memory > xorg_id_2
                    seq > @
                      (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        xorg_id_1.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 1")).xpk)
                        xorg_id_2.write ((((unsupported)).apply ((((xOrganization).xobjects).xcreate)) ("Organization 2")).xpk)
                        (((unsupported)).apply ((((((xmock).xpatch).xdict)).apply (((xos).xenviron)) ((((unsupported)).apply ("DJANGO_SUPERUSER_ORGS") ("{org_id_1},{org_id_2}"))))))
                          (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe") ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xuser.write (((unsupported)).apply ((((xCustomUserWithM2M).x_default_manager).xget)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xuser).xorgs).xcount)).apply)) (2))
                xtest_ignore_environment_variable_non_interactive.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("cmd_superuser") ("cmd@somewhere.org") (0))
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("cmd_superuser"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ("cmd@somewhere.org"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xuser).xhas_usable_password)).apply)))
                xtest_ignore_environment_variable_interactive.write
                  [xself]
                    memory > xtest
                    seq > @
                      (((unsupported)).apply)
                        xtest.write
                          [xself]
                            memory > xuser
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ("cmd_superuser") ("cmd@somewhere.org") ((((xMockTTY)).apply)) (0))
                                xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("cmd_superuser"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ("cmd@somewhere.org"))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser).xcheck_password)).apply ("cmd_password"))))
                        bogusForceDataize.write (((xtest)).apply ((xself)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_createsuperuser_command_with_database_option.write
                  [xself]
                    memory > xnew_io
                    memory > xcommand_output
                    memory > xuser
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_io.write (((xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("createsuperuser") (FALSE) ("joe") ("joe@somewhere.org") ("other") ((xnew_io)))
                        xcommand_output.write (((((((xnew_io).xgetvalue)).apply).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommand_output)) ("Superuser created successfully."))
                        xuser.write (((unsupported)).apply (((((((xUser).xobjects).xusing)).apply ("other")).xget)) ("joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ("joe@somewhere.org"))
                xtest_createsuperuser_command_suggested_username_with_database_option.write
                  [xself]
                    memory > xqs
                    memory > xdefault_username
                    memory > xtest_other_no_suggestion
                    memory > xtest_other_create_with_suggested_username
                    seq > @
                      seq
                        xdefault_username.write (((unsupported)).apply ((xget_default_username)) ("other"))
                        xqs.write (((((xUser).xobjects).xusing)).apply ("other"))
                        xtest_other_create_with_suggested_username.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) (0) ("other"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply (((xqs).xfilter)) ((xdefault_username))).xexists)).apply)) (TRUE))
                        bogusForceDataize.write (((xtest_other_create_with_suggested_username)).apply ((xself)))
                        xtest_other_no_suggestion.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xcall_command)) ("createsuperuser") (TRUE) ((((xMockTTY)).apply)) (0) ("other"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply (((xqs).xfilter)) ("other")).xexists)).apply)) (TRUE))
                        bogusForceDataize.write (((xtest_other_no_suggestion)).apply ((xself)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_original_permissions)) ((((unsupported)).apply ((((xPermission).x_meta).xpermissions)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).x_original_default_permissions)) ((((xPermission).x_meta).xdefault_permissions)))
                        (((unsupported)).apply (((xself).xapp_config)) (((((xapps).xget_app_config)).apply ("auth"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xPermission).x_meta).xpermissions)) (((xself).x_original_permissions)))
                        (((unsupported)).apply ((((xPermission).x_meta).xdefault_permissions)) (((xself).x_original_default_permissions)))
                        bogusForceDataize.write (((((xContentType).xobjects).xclear_cache)).apply)
                xtest_default_permissions.write
                  [xself]
                    memory > xpermission_content_type
                    seq > @
                      seq
                        xpermission_content_type.write (((((xContentType).xobjects).xget_by_natural_key)).apply ("auth") ("permission"))
                        (((unsupported)).apply ((((xPermission).x_meta).xpermissions)) ((((unsupported)).apply ((((unsupported)).apply ("my_custom_permission") ("Some permission"))))))
                        (((unsupported)).apply ((xcreate_permissions)) (((xself).xapp_config)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xPermission).xobjects).xfilter)) ((xpermission_content_type))).xcount)).apply)) (5))
                        bogusForceDataize.write ((((((unsupported)).apply ((((xPermission).xobjects).xfilter)) ((xpermission_content_type))).xdelete)).apply)
                        (((unsupported)).apply ((((xPermission).x_meta).xdefault_permissions)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xcreate_permissions)) (((xself).xapp_config)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xPermission).xobjects).xfilter)) ((xpermission_content_type))).xcount)).apply)) (1))
                xtest_unavailable_models.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstate.write (((((xmigrations).xstate).xProjectState)).apply)
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                          (((unsupported)).apply ((xcreate_permissions)) (((xself).xapp_config)) (0) (((xstate).xapps)))
                        xstate.write (((unsupported)).apply ((((xmigrations).xstate).xProjectState)) ((((unsupported)).apply ("contenttypes"))))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                          (((unsupported)).apply ((xcreate_permissions)) (((xself).xapp_config)) (0) (((xstate).xapps)))
                xtest_create_permissions_checks_contenttypes_created.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        bogusForceDataize.write ((((((unsupported)).apply ((((xContentType).xobjects).xfilter)) ("auth") ("group")).xdelete)).apply)
                        (((unsupported)).apply ((xcreate_permissions)) (((((xapps).xget_app_config)).apply ("auth"))) (FALSE) (0))
                xtest_permission_with_proxy_content_type_created.write
                  [xself]
                    memory > xcodename
                    memory > xopts
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xopts.write ((xUserProxy).x_meta)
                        xcodename.write (((xget_permission_codename)).apply ("add") ((xopts)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((((xPermission).xobjects).xfilter)) (((xopts).xmodel_name)) (((xopts).xapp_label)) ((xcodename))).xexists)).apply)))