memory > xBytesIO
memory > xFileNotFoundError
memory > xTemporaryUploadedFile
memory > xNotImplementedError
memory > xInMemoryUploadedFile
memory > xsettings
memory > xhasattr
memory > xsuper
memory > xStopFutureHandlers
memory > xkwargs
memory > xFileUploadHandler
memory > xUploadFileException
memory > ximport_string
memory > xException2
memory > xargs
memory > xos
[] > uploadhandler
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__str__
        memory > xupload_complete
        memory > xreceive_data_chunk
        memory > xupload_interrupted
        memory > xhandle_raw_input
        memory > xload_handler
        memory > xchunk_size
        memory > x__all__
        memory > x__init__
        memory > xnew_file
        memory > xfile_complete
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("UploadFileException") ("StopUpload") ("SkipFile") ("FileUploadHandler") ("TemporaryFileUploadHandler") ("MemoryFileUploadHandler") ("load_handler") ("StopFutureHandlers"))
            (((unsupported)).apply ((xException2)))
              seq
                (((unsupported)).apply)
            (((unsupported)).apply ((xUploadFileException)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xconnection_reset]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection_reset)) ((xconnection_reset)))
                x__str__.write
                  [xself]
                    seq > @
                      ((xself).xconnection_reset).if
                        (((unsupported)).apply ("StopUpload: Halt current upload."))
                        (((unsupported)).apply ("StopUpload: Consume request data, then halt."))
            (((unsupported)).apply ((xUploadFileException)))
              seq
                (((unsupported)).apply)
            (((unsupported)).apply ((xUploadFileException)))
              seq
                (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xchunk_size.write (64.mul (((unsupported)).apply (2) (10)))
                x__init__.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfile_name)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcontent_type)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcontent_length)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcharset)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcontent_type_extra)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xrequest)) ((xrequest)))
                xhandle_raw_input.write
                  [xself xinput_data xMETA xcontent_length xboundary xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                xnew_file.write
                  [xself xfield_name xfile_name xcontent_type xcontent_length xcharset xcontent_type_extra]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfield_name)) ((xfield_name)))
                        (((unsupported)).apply (((xself).xfile_name)) ((xfile_name)))
                        (((unsupported)).apply (((xself).xcontent_type)) ((xcontent_type)))
                        (((unsupported)).apply (((xself).xcontent_length)) ((xcontent_length)))
                        (((unsupported)).apply (((xself).xcharset)) ((xcharset)))
                        (((unsupported)).apply (((xself).xcontent_type_extra)) ((xcontent_type_extra)))
                xreceive_data_chunk.write
                  [xself xraw_data xstart]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of FileUploadHandler must provide a receive_data_chunk() method"))))
                xfile_complete.write
                  [xself xfile_size]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of FileUploadHandler must provide a file_complete() method"))))
                xupload_complete.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                xupload_interrupted.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
            (((unsupported)).apply ((xFileUploadHandler)))
              seq
                (((unsupported)).apply)
                xnew_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xnew_file)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xfile)) ((((xTemporaryUploadedFile)).apply (((xself).xfile_name)) (((xself).xcontent_type)) (0) (((xself).xcharset)) (((xself).xcontent_type_extra)))))
                xreceive_data_chunk.write
                  [xself xraw_data xstart]
                    seq > @
                      bogusForceDataize.write (((((xself).xfile).xwrite)).apply ((xraw_data)))
                xfile_complete.write
                  [xself xfile_size]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xfile).xseek)).apply (0))
                        (((unsupported)).apply ((((xself).xfile).xsize)) ((xfile_size)))
                        (((unsupported)).apply (((xself).xfile)))
                xupload_interrupted.write
                  [xself]
                    memory > xtemp_location
                    seq > @
                      (((xhasattr)).apply ((xself)) ("file")).if
                        seq
                          xtemp_location.write (((((xself).xfile).xtemporary_file_path)).apply)
                          (((unsupported)).apply ((xFileNotFoundError)))
                            seq
                              bogusForceDataize.write (((((xself).xfile).xclose)).apply)
                              bogusForceDataize.write ((((xos).xremove)).apply ((xtemp_location)))
            (((unsupported)).apply ((xFileUploadHandler)))
              seq
                (((unsupported)).apply)
                xhandle_raw_input.write
                  [xself xinput_data xMETA xcontent_length xboundary xencoding]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xactivated)) (((xcontent_length).leq ((xsettings).xFILE_UPLOAD_MAX_MEMORY_SIZE))))
                xnew_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xnew_file)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        ((xself).xactivated).if
                          seq
                            (((unsupported)).apply (((xself).xfile)) ((((xBytesIO)).apply)))
                            (((unsupported)).apply ((((xStopFutureHandlers)).apply)))
                xreceive_data_chunk.write
                  [xself xraw_data xstart]
                    seq > @
                      seq
                        unsupported
                        ((xself).xactivated).if
                          bogusForceDataize.write (((((xself).xfile).xwrite)).apply ((xraw_data)))
                          (((unsupported)).apply ((xraw_data)))
                xfile_complete.write
                  [xself xfile_size]
                    seq > @
                      seq
                        unsupported
                        (((xself).xactivated).not).if
                          (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xfile).xseek)).apply (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xInMemoryUploadedFile)) (((xself).xfile)) (((xself).xfield_name)) (((xself).xfile_name)) (((xself).xcontent_type)) ((xfile_size)) (((xself).xcharset)) (((xself).xcontent_type_extra)))))
            xload_handler.write
              [xpath]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((((ximport_string)).apply ((xpath)))).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))