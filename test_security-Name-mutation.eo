memory > xsessions
memory > xWarning
memory > xbase
memory > xoverride_settings
memory > xSimpleTestCase2
memory > xvalue
memory > xError
memory > xset
memory > xsettings
memory > xcsrf
memory > xlen
memory > xSimpleTestCase
[] > test_security
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_empty_secret_key
        memory > xtest_debug_false
        memory > xtest_low_length_secret_key_fallbacks
        memory > xtest_allowed_hosts_empty
        memory > xtest_no_content_type_nosniff_no_middleware
        memory > xfailure_view_with_invalid_signature
        memory > xtest_none_secret_key
        memory > xtest_low_entropy_secret_key
        memory > xtest_no_sts_subdomains
        memory > xtest_no_sts_preload
        memory > xtest_multiple_bad_keys
        memory > xtest_session_cookie_secure_with_installed_app
        memory > xtest_no_sts
        memory > xtest_failure_view_invalid_signature
        memory > xtest_session_cookie_httponly_with_installed_app_truthy
        memory > xtest_multiple_keys
        memory > xtest_session_cookie_httponly_true
        memory > xtest_no_sts_preload_no_middleware
        memory > xtest_insecure_secret_key_fallbacks
        memory > xtest_no_sts_preload_no_seconds
        memory > xtest_no_referrer_policy_no_middleware
        memory > xtest_use_sessions_with_csrf_cookie_secure_false
        memory > xtest_session_cookie_httponly_with_installed_app
        memory > xtest_session_cookie_secure_with_installed_app_truthy
        memory > xtest_session_cookie_secure_both
        memory > xtest_no_referrer_policy
        memory > xtest_no_security_middleware
        memory > xtest_failure_view_import_error
        memory > xtest_no_ssl_redirect_no_middleware
        memory > xtest_with_ssl_redirect
        memory > xtest_low_length_secret_key
        memory > xtest_middleware_not_installed
        memory > xtest_no_sts_no_middleware
        memory > xtest_with_sts_preload
        memory > xtest_missing_secret_key
        memory > xtest_session_cookie_secure_true
        memory > xtest_x_frame_options_not_deny
        memory > xtest_with_invalid_coop
        memory > xtest_okay_secret_key_fallbacks
        memory > xtest_with_sts
        memory > xtest_no_secret_key_fallbacks
        memory > xtest_allowed_hosts_set
        memory > xtest_with_csrf_cookie_secure_truthy
        memory > xtest_insecure_secret_key
        memory > xtest_middleware_installed
        memory > xtest_with_csrf_cookie_secure_true
        memory > xtest_with_security_middleware
        memory > xtest_with_csrf_middleware
        memory > xtest_session_cookie_httponly_both
        memory > xtest_no_sts_subdomains_no_middleware
        memory > xtest_no_sts_subdomains_no_seconds
        memory > xtest_with_referrer_policy
        memory > xtest_okay_secret_key
        memory > xtest_no_content_type_nosniff
        memory > xtest_no_coop
        memory > xtest_with_csrf_cookie_secure_false_no_middleware
        memory > xtest_no_ssl_redirect
        memory > xtest_with_content_type_nosniff
        memory > xtest_with_sts_subdomains
        memory > xtest_low_entropy_secret_key_fallbacks
        memory > xtest_session_cookie_secure_with_middleware
        memory > xtest_no_csrf_middleware
        memory > xtest_with_csrf_cookie_secure_false
        memory > xtest_with_invalid_referrer_policy
        memory > xtest_with_coop
        memory > xtest_session_cookie_httponly_with_middleware
        memory > xtest_debug_true
        memory > xtest_xframe_deny
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_session_cookie_secure_with_installed_app.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW010)))))
                xtest_session_cookie_secure_with_installed_app_truthy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW010)))))
                xtest_session_cookie_secure_with_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW011)))))
                xtest_session_cookie_secure_both.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW012)))))
                xtest_session_cookie_secure_true.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase2)))
              seq
                xtest_session_cookie_httponly_with_installed_app.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_httponly)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW013)))))
                xtest_session_cookie_httponly_with_installed_app_truthy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_httponly)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW013)))))
                xtest_session_cookie_httponly_with_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_httponly)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW014)))))
                xtest_session_cookie_httponly_both.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_httponly)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xsessions).xW015)))))
                xtest_session_cookie_httponly_true.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsessions).xcheck_session_cookie_httponly)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_csrf_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xcsrf).xW003)))))
                xtest_with_csrf_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_with_csrf_cookie_secure_false.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xcsrf).xW016)))))
                xtest_with_csrf_cookie_secure_truthy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xcsrf).xW016)))))
                xtest_use_sessions_with_csrf_cookie_secure_false.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_csrf_cookie_secure_false_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_csrf_cookie_secure_true.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_cookie_secure)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_security_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_security_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW001)))))
                xtest_with_security_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_security_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_sts.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW004)))))
                xtest_no_sts_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_sts.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_sts_subdomains.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_include_subdomains)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW005)))))
                xtest_no_sts_subdomains_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_include_subdomains)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_no_sts_subdomains_no_seconds.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_include_subdomains)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_sts_subdomains.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_include_subdomains)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_sts_preload.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_preload)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW021)))))
                xtest_no_sts_preload_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_preload)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_no_sts_preload_no_seconds.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_preload)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_sts_preload.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_sts_preload)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_middleware_not_installed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_xframe_options_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW002)))))
                xtest_middleware_installed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_xframe_options_middleware)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_x_frame_options_not_deny.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_xframe_deny)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW019)))))
                xtest_middleware_not_installed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_xframe_deny)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_xframe_deny.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_xframe_deny)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_content_type_nosniff.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_content_type_nosniff)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW006)))))
                xtest_no_content_type_nosniff_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_content_type_nosniff)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_content_type_nosniff.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_content_type_nosniff)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_ssl_redirect.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_ssl_redirect)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW008)))))
                xtest_no_ssl_redirect_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_ssl_redirect)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_ssl_redirect.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_ssl_redirect)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_okay_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xsettings).xSECRET_KEY)))) (((xbase).xSECRET_KEY_MIN_LENGTH)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((((xset)).apply (((xsettings).xSECRET_KEY)))))) (((xbase).xSECRET_KEY_MIN_UNIQUE_CHARACTERS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_empty_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
                xtest_missing_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
                xtest_none_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
                xtest_insecure_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
                xtest_low_length_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xsettings).xSECRET_KEY)))) ((((xbase).xSECRET_KEY_MIN_LENGTH).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
                xtest_low_entropy_secret_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply (((xsettings).xSECRET_KEY)))) (((xbase).xSECRET_KEY_MIN_LENGTH)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xlen)).apply ((((xset)).apply (((xsettings).xSECRET_KEY)))))) (((xbase).xSECRET_KEY_MIN_UNIQUE_CHARACTERS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW009)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_okay_secret_key_fallbacks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)) (0))))) (((xbase).xSECRET_KEY_MIN_LENGTH)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((((xset)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)) (0))))))) (((xbase).xSECRET_KEY_MIN_UNIQUE_CHARACTERS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_no_secret_key_fallbacks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("None: is there a None literal in the EO language?"))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS")) ((((xbase).xW025).xid)))))))
                xtest_insecure_secret_key_fallbacks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[0]")) ((((xbase).xW025).xid)))))))
                xtest_low_length_secret_key_fallbacks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)) (0))))) ((((xbase).xSECRET_KEY_MIN_LENGTH).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[0]")) ((((xbase).xW025).xid)))))))
                xtest_low_entropy_secret_key_fallbacks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)) (0))))) (((xbase).xSECRET_KEY_MIN_LENGTH)))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xlen)).apply ((((xset)).apply ((((unsupported)).apply (((xsettings).xSECRET_KEY_FALLBACKS)) (0))))))) (((xbase).xSECRET_KEY_MIN_UNIQUE_CHARACTERS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[0]")) ((((xbase).xW025).xid)))))))
                xtest_multiple_keys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[1]")) ((((xbase).xW025).xid)))))))
                xtest_multiple_bad_keys.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_secret_key_fallbacks)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[1]")) ((((xbase).xW025).xid)))) ((((unsupported)).apply ((xWarning)) (((((xbase).xW025).xmsg).mod "SECRET_KEY_FALLBACKS[2]")) ((((xbase).xW025).xid)))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_debug_true.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_debug)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW018)))))
                xtest_debug_false.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_debug)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_allowed_hosts_empty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_allowed_hosts)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW020)))))
                xtest_allowed_hosts_set.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_allowed_hosts)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_referrer_policy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_referrer_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xW022)))))
                xtest_no_referrer_policy_no_middleware.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_referrer_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_referrer_policy.write
                  [xself]
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ("strict-origin") ("strict-origin,origin") ("strict-origin, origin") ((((unsupported)).apply ("strict-origin") ("origin"))) ((((unsupported)).apply ("strict-origin") ("origin"))))
                        (((unsupported)).apply ((xvalue)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))) ((((unsupported)).apply ((xoverride_settings)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_referrer_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_invalid_referrer_policy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_referrer_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xE023)))))
            xfailure_view_with_invalid_signature.write
              []
                seq > @
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_failure_view_import_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_failure_view)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("The CSRF failure view '' could not be imported.") ("security.E102"))))))
                xtest_failure_view_invalid_signature.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "The CSRF failure view 'check_framework.test_security.failure_view_with_invalid_signature' does not take the correct number of arguments."
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcsrf).xcheck_csrf_failure_view)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ((xmsg)) ("security.E101"))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_no_coop.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_cross_origin_opener_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_coop.write
                  [xself]
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ("same-origin") ("same-origin-allow-popups") ("unsafe-none"))
                        (((unsupported)).apply ((xvalue)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))) ((((unsupported)).apply ((xoverride_settings)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_cross_origin_opener_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_with_invalid_coop.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbase).xcheck_cross_origin_opener_policy)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xbase).xE024)))))