memory > xexec
memory > xrange
memory > xgc
memory > xiter
memory > xbaddict1
memory > xd
memory > xk
memory > xD
memory > xC
memory > xfalse
memory > xFailingUserDict
memory > xcopymode
memory > xBadDictKey
memory > xAttributeError
memory > xc
memory > xpickle
memory > xlog2size
memory > xlist
memory > xRuntimeError
memory > xbaddict2
memory > xSimpleUserDict
memory > xlocals
memory > xmydict
memory > xz
memory > xValueError
memory > xo
memory > xstr
memory > xk1
memory > xCustomException
memory > xMyObject
memory > x_testcapi
memory > xb
memory > xG
memory > xCustom
memory > xZeroDivisionError
memory > xExc
memory > xcollections
memory > xeval
memory > xinvalid
memory > xStopIteration
memory > xKeyError
memory > xproto
memory > xk2
memory > xBadCmp
memory > xbaddict3
memory > xrandom
memory > xCustomReversedDict
memory > xFoo
memory > xreversed
memory > xdictlike
memory > xNastyKey
memory > xw
memory > xstring
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xX
memory > xhasattr
memory > xDict
memory > xx
memory > xBadEq
memory > xstmt
memory > xi
memory > xF
memory > xsupport
memory > xsys
memory > xbool
memory > xvb
memory > xbadseq
memory > xNotImplemented
memory > xRecursionError
memory > xsorted
memory > xBadSeq
memory > xchr
memory > xCustomDict
memory > xka
memory > xSystemError
memory > xweakref
memory > xgetattr
memory > xv
memory > xid
memory > xE
memory > xBogonIter
memory > xord
memory > xHashed
memory > xzip
memory > xunittest
memory > xresult
memory > xy
memory > xhash
memory > xMyDict
memory > xY
memory > xnext
memory > xobject
memory > xdict_getitem_knownhash
memory > xmapping_tests
memory > xn
memory > xBadRepr
memory > xkb
memory > xA
memory > xisinstance
memory > xlen
memory > xMutating
memory > xdict
memory > xBadHash
memory > xva
memory > xTypeError
memory > x_str
memory > x__name__
memory > xkey
memory > xa
[] > test_dict
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_keys
        memory > xtest_bad_key
        memory > xtest_constructor
        memory > xtest_valuesiterator_pickling
        memory > xtest_splittable_pop_pending
        memory > xtest_reverseiterator_pickling
        memory > xtest_dictview_set_operations_on_items
        memory > xtest_eq
        memory > xtest_reverse_iterator_for_empty_dict
        memory > xcheck_reentrant_insertion
        memory > xtest_merge_and_mutate
        memory > x_tracked
        memory > xtest_dictitems_contains_use_after_free
        memory > xtest_splittable_popitem
        memory > xtest_instance_dict_getattr_str_subclass
        memory > xtest_fromkeys_operator_modifying_dict_operand
        memory > x_not_tracked
        memory > xtest_reverseitemiterator_pickling
        memory > xtest_track_dynamic
        memory > xtest_mutating_lookup
        memory > xtest_update
        memory > xtest_empty_presized_dict_in_freelist
        memory > xtest_copy_noncompact
        memory > xtest_bool
        memory > xtest_mutating_iteration
        memory > xtest_missing
        memory > xtest_getitem_knownhash
        memory > xtest_tuple_keyerror
        memory > xtest_keys_contained
        memory > xtest_repr
        memory > xtest_splittable_del
        memory > xtest_invalid_keyword_arguments
        memory > xtest_resize2
        memory > xtest_setdefault_atomic
        memory > xtest_dict_items_result_gc
        memory > xtest_resize1
        memory > xtest_reentrant_insertion
        memory > xtest_pop
        memory > xtest_get
        memory > xtest_itemiterator_pickling
        memory > xtest_reverse_iterator_for_shared_shared_dicts
        memory > xtest_track_literals
        memory > xtest_repr_deep
        memory > xtest_mutating_iteration_delete_over_items
        memory > xtest_object_set_item_single_instance_non_str_key
        memory > xtest_dictview_set_operations_on_keys
        memory > xtest_dict_copy_order
        memory > xtest_getitem
        memory > xtest_copy
        memory > xtest_container_iterator
        memory > xtest_splittable_setdefault
        memory > xtest_fromkeys_operator_modifying_set_operand
        memory > xtest_contains
        memory > xtest_setitem_atomic_at_resize
        memory > xtest_track_subtypes
        memory > xtest_mutating_iteration_delete
        memory > xtest_copy_fuzz
        memory > xmake_shared_key_dict
        memory > xtest_init_use_after_free
        memory > xtest_clear
        memory > xtest_mutating_iteration_delete_over_values
        memory > xhelper_keys_contained
        memory > xtest_reversed
        memory > xtest_fromkeys
        memory > xtest_values
        memory > xtest_free_after_iterating
        memory > xtest_iterator_pickling
        memory > xtest_reversevaluesiterator_pickling
        memory > xtest_dictview_mixed_set_operations
        memory > xtest_popitem
        memory > xtest_splittable_setattr_after_pop
        memory > xtype2test
        memory > xtest_len
        memory > xtest_copy_maintains_tracking
        memory > xtest_oob_indexing_dictiter_iternextitem
        memory > xtest_errors_in_view_containment_check
        memory > xtest_items
        memory > xtest_splittable_pop
        memory > xtest_literal_constructor
        memory > xtest_equal_operator_modifying_operand
        memory > xtest_setdefault
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_invalid_keyword_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xdict)))
                        (((unsupported)).apply ((xinvalid)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((xCustom)).apply ((((unsupported)).apply (1) (2))))))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write (((xdict)).apply ((((unsupported)).apply ((xinvalid)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write ((((((unsupported)).apply).xupdate)).apply ((((unsupported)).apply ((xinvalid)))))
                xtest_constructor.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xdict)).apply)) ((((unsupported)).apply)))
                xtest_literal_constructor.write
                  [xself]
                    memory > xformatted_items
                    memory > xitems
                    memory > xdictliteral
                    seq > @
                      (((unsupported)).apply ((xn)) ((((unsupported)).apply (0) (1) (6) (256) (400))))
                        seq
                          xitems.write (((unsupported)).apply ((((unsupported)).apply (((("".xjoin)).apply (((((xrandom).xsample)).apply (((xstring).xascii_letters)) (8))))) ((xi)))) ((xi)) ((((xrange)).apply ((xn)))))
                          bogusForceDataize.write ((((xrandom).xshuffle)).apply ((xitems)))
                          xformatted_items.write (((unsupported)).apply (((("{!r}: {:d}".xformat)).apply ((xk)) ((xv)))) ((((unsupported)).apply ((xk)) ((xv)))) ((xitems)))
                          xdictliteral.write (("{".add (((", ".xjoin)).apply ((xformatted_items)))).add "}")
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((xdictliteral)))) ((((xdict)).apply ((xitems)))))
                xtest_bool.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply).not)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xbool)).apply ((((unsupported)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xbool)).apply ((((unsupported)).apply (1) (2))))) (TRUE))
                xtest_keys.write
                  [xself]
                    memory > xd
                    memory > xk
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xd).xkeys)).apply)))) ((((xset)).apply)))
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2))
                        xk.write ((((xd).xkeys)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xk)))) ((((unsupported)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("a") ((xk)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("b") ((xk)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("a") ((xd)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("b") ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xkeys)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((((unsupported)).apply ((xdict)) (1)).xkeys)).apply)))) ("dict_keys(['a'])"))
                xtest_values.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xd).xvalues)).apply)))) ((((xset)).apply)))
                        xd.write (((unsupported)).apply (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xd).xvalues)).apply)))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xvalues)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((((unsupported)).apply ((xdict)) (1)).xvalues)).apply)))) ("dict_values([1])"))
                xtest_items.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xd).xitems)).apply)))) ((((xset)).apply)))
                        xd.write (((unsupported)).apply (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xd).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xitems)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((((((unsupported)).apply ((xdict)) (1)).xitems)).apply)))) ("dict_items([('a', 1)])"))
                xtest_contains.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("a") ((xd)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((unsupported)).apply ("a") ((xd)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ("a") ((xd)))))
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("a") ((xd)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("b") ((xd)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("c") ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).x__contains__)))
                xtest_len.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (2))
                xtest_getitem.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xfail
                    memory > xx
                    memory > x__hash__
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("a"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("b"))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("c"))) (3))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("a"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("c"))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ("a"))) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("a") (4) ("c") (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).x__getitem__)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xExc)).apply)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (24))
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xBadEq)).apply)))) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).x__getitem__)) (23))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xfail.write (xfalse)
                            x__hash__.write
                              [xself]
                                seq > @
                                  ((xself).xfail).if
                                    (((unsupported)).apply ((((xExc)).apply)))
                                    (((unsupported)).apply (42))
                        xx.write (((xBadHash)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xx)))) (42))
                        (((unsupported)).apply (((xx).xfail)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).x__getitem__)) ((xx)))
                xtest_clear.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (1) (1) (2) (2) (3) (3))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xclear)) ("None: is there a None literal in the EO language?"))
                xtest_update.write
                  [xself]
                    memory > xd
                    memory > x__getitem__
                    memory > x__next__
                    memory > x__init__
                    memory > xkeys
                    memory > x__iter__
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply (1) (100))))
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply (2) (20))))
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        bogusForceDataize.write ((((xd).xupdate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xAttributeError)))) (((xd).xupdate)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xd)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((((xself).xd).xkeys)).apply)))
                            x__getitem__.write
                              [xself xi]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xd)) ((xi)))))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((xSimpleUserDict)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        (((unsupported)).apply ((xException)))
                        bogusForceDataize.write ((((xd).xclear)).apply)
                        (((unsupported)).apply)
                          xkeys.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xExc)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).xupdate)) ((((xFailingUserDict)).apply)))
                        (((unsupported)).apply)
                          seq
                            xkeys.write
                              [xself]
                                memory > x__next__
                                memory > x__init__
                                memory > x__iter__
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                      seq
                                        x__init__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply (((xself).xi)) (1))
                                        x__iter__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply ((xself)))
                                        x__next__.write
                                          [xself]
                                            seq > @
                                              seq
                                                ((xself).xi).if
                                                  seq
                                                    (((unsupported)).apply (((xself).xi)) (0))
                                                    (((unsupported)).apply ("a"))
                                                (((unsupported)).apply ((xExc)))
                                    (((unsupported)).apply ((((xBogonIter)).apply)))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)).apply ((xkey)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).xupdate)) ((((xFailingUserDict)).apply)))
                        (((unsupported)).apply)
                          seq
                            xkeys.write
                              [xself]
                                memory > x__next__
                                memory > x__init__
                                memory > x__iter__
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                      seq
                                        x__init__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply (((xself).xi)) ((((xord)).apply ("a"))))
                                        x__iter__.write
                                          [xself]
                                            seq > @
                                              (((unsupported)).apply ((xself)))
                                        x__next__.write
                                          [xself]
                                            memory > xrtn
                                            seq > @
                                              seq
                                                (((xself).xi).leq (((xord)).apply ("z"))).if
                                                  seq
                                                    xrtn.write (((xchr)).apply (((xself).xi)))
                                                    (((unsupported)).apply (((xself).xi)) (1))
                                                    (((unsupported)).apply ((xrtn)))
                                                (((unsupported)).apply ((xStopIteration)))
                                    (((unsupported)).apply ((((xBogonIter)).apply)))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  (((unsupported)).apply ((xExc)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).xupdate)) ((((xFailingUserDict)).apply)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xExc)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((((unsupported)).apply).xupdate)) ((((xbadseq)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((((unsupported)).apply).xupdate)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))))))
                xtest_fromkeys.write
                  [xself]
                    memory > xd
                    memory > x__next__
                    memory > x__setitem__
                    memory > xres
                    memory > x__init__
                    memory > xud
                    memory > x__new__
                    memory > xg
                    memory > x__iter__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdict).xfromkeys)).apply ("abc"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?") ("c") ("None: is there a None literal in the EO language?"))))
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((xd).xfromkeys)).apply ("abc"))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xfromkeys)).apply ("abc"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?") ("c") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xfromkeys)).apply ((((unsupported)).apply (4) (5))) (0))) ((((unsupported)).apply (4) (0) (5) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xfromkeys)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xfromkeys)).apply ((((xg)).apply)))) ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((unsupported)).apply).xfromkeys)) (3))
                        (((unsupported)).apply ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdictlike).xfromkeys)).apply ("a"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xdictlike)).apply).xfromkeys)).apply ("a"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xdictlike).xfromkeys)).apply ("a"))) ((xdictlike)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((((xdictlike)).apply).xfromkeys)).apply ("a"))) ((xdictlike)))
                        (((unsupported)).apply ((xdict)))
                          x__new__.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply (((((xcollections).xUserDict)).apply)))
                        xud.write ((((xmydict).xfromkeys)).apply ("ab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xud)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xud)) (((xcollections).xUserDict)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xdict).xfromkeys)))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xdict)))
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xExc)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xbaddict1).xfromkeys)) ((((unsupported)).apply (1))))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xExc)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xdict).xfromkeys)) ((((xBadSeq)).apply)))
                        (((unsupported)).apply ((xdict)))
                          x__setitem__.write
                            [xself xkey xvalue]
                              seq > @
                                (((unsupported)).apply ((((xExc)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xbaddict2).xfromkeys)) ((((unsupported)).apply (1))))
                        xd.write (((xdict)).apply ((((xzip)).apply ((((xrange)).apply (6))) ((((xrange)).apply (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdict).xfromkeys)).apply ((xd)) (0))) ((((xdict)).apply ((((xzip)).apply ((((xrange)).apply (6))) (((((unsupported)).apply (0)).mul 6)))))))
                        (((unsupported)).apply ((xdict)))
                          x__new__.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply ((xd)))
                        xd.write (((unsupported)).apply ((xi)) ((xi)) ((xi)) ((((xrange)).apply (10))))
                        xres.write ((((xd).xcopy)).apply)
                        (((unsupported)).apply (((xres).xupdate)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbaddict3).xfromkeys)).apply ((((unsupported)).apply ("a") ("b") ("c"))))) ((xres)))
                xtest_copy.write
                  [xself]
                    memory > xd
                    memory > xcopy
                    seq > @
                      seq
                        xd.write (((unsupported)).apply (1) (1) (2) (2) (3) (3))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((xd).xcopy)).apply)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xcopy)).apply)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xcopy)).apply)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        xcopy.write ((((xd).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (4))) (4))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xcopy)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply).xcopy)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xcopy)) ("None: is there a None literal in the EO language?"))
                xtest_copy_fuzz.write
                  [xself]
                    memory > xdict_size
                    memory > xd
                    memory > xd2
                    seq > @
                      (((unsupported)).apply ((xdict_size)) ((((unsupported)).apply (10) (100) (1000) (10000) (100000))))
                        seq
                          xdict_size.write ((((xrandom).xrandrange)).apply ((((unsupported)).apply ((xdict_size)) (2))) (((xdict_size).add (((unsupported)).apply ((xdict_size)) (2)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xdict_size)))))
                            seq
                              xd.write (((unsupported)).apply)
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xdict_size)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xi)))
                              xd2.write ((((xd).xcopy)).apply)
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xd2)) ((xd)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((xd2)))
                              (((unsupported)).apply ((((unsupported)).apply ((xd2)) ("key"))) ("value"))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xd)) ((xd2)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd2)))) (((((xlen)).apply ((xd))).add 1)))
                xtest_copy_maintains_tracking.write
                  [xself]
                    memory > xd2
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xkey.write (((xA)).apply)
                        (((unsupported)).apply ((xd)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ((xkey)) ("val"))))))
                          seq
                            xd2.write ((((xd).xcopy)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgc).xis_tracked)).apply ((xd)))) (((((xgc).xis_tracked)).apply ((xd2)))))
                xtest_copy_noncompact.write
                  [xself]
                    memory > xd
                    memory > xd2
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ((xk)) ((xk)) ((xk)) ((((xrange)).apply (1000))))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (950))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk)))))))
                        xd2.write ((((xd).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd2)) ((xd)))
                xtest_get.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xd).xget)).apply ("c"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("c") (3))) (3))
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xd).xget)).apply ("c"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("c") (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("a"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xget)).apply ("a") (3))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xget)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xget)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_setdefault.write
                  [xself]
                    memory > xfail
                    memory > xd
                    memory > xx
                    memory > x__hash__
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xd).xsetdefault)).apply ("key0"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xd).xsetdefault)).apply ("key0") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xd).xsetdefault)).apply ("key0"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((((xd).xsetdefault)).apply ("key") ((((unsupported)).apply))).xappend)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("key"))) (0))) (3))
                        bogusForceDataize.write (((((((xd).xsetdefault)).apply ("key") ((((unsupported)).apply))).xappend)).apply (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xd)) ("key"))))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xsetdefault)))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xfail.write (xfalse)
                            x__hash__.write
                              [xself]
                                seq > @
                                  ((xself).xfail).if
                                    (((unsupported)).apply ((((xExc)).apply)))
                                    (((unsupported)).apply (42))
                        xx.write (((xBadHash)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xx)))) (42))
                        (((unsupported)).apply (((xx).xfail)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).xsetdefault)) ((xx)) ((((unsupported)).apply)))
                xtest_setdefault_atomic.write
                  [xself]
                    memory > x__eq__
                    memory > xhashed1
                    memory > xhashed2
                    memory > x__init__
                    memory > x__hash__
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xhash_count)) (0))
                                    (((unsupported)).apply (((xself).xeq_count)) (0))
                            x__hash__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xhash_count)) (1))
                                    (((unsupported)).apply (42))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xeq_count)) (1))
                                    (((unsupported)).apply (((((xid)).apply ((xself))).eq (((xid)).apply ((xother))))))
                        xhashed1.write (((xHashed)).apply)
                        xy.write (((unsupported)).apply ((xhashed1)) (5))
                        xhashed2.write (((xHashed)).apply)
                        bogusForceDataize.write ((((xy).xsetdefault)).apply ((xhashed2)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhashed1).xhash_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhashed2).xhash_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhashed1).xeq_count).add ((xhashed2).xeq_count))) (1))
                xtest_setitem_atomic_at_resize.write
                  [xself]
                    memory > x__eq__
                    memory > xhashed1
                    memory > xhashed2
                    memory > x__init__
                    memory > x__hash__
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xhash_count)) (0))
                                    (((unsupported)).apply (((xself).xeq_count)) (0))
                            x__hash__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xhash_count)) (1))
                                    (((unsupported)).apply (42))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xeq_count)) (1))
                                    (((unsupported)).apply (((((xid)).apply ((xself))).eq (((xid)).apply ((xother))))))
                        xhashed1.write (((xHashed)).apply)
                        xy.write (((unsupported)).apply ((xhashed1)) (5) (0) (0) (1) (1) (2) (2) (3) (3))
                        xhashed2.write (((xHashed)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xy)) ((xhashed2)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhashed1).xhash_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhashed2).xhash_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhashed1).xeq_count).add ((xhashed2).xeq_count))) (1))
                xtest_popitem.write
                  [xself]
                    memory > xd
                    memory > xsize
                    memory > xb
                    memory > xta
                    memory > xtb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xcopymode)) ((((unsupported)).apply ((1.neg)) ((1)))))
                          (((unsupported)).apply ((xlog2size)) ((((xrange)).apply (12))))
                            seq
                              xsize.write (((unsupported)).apply (2) ((xlog2size)))
                              xa.write (((unsupported)).apply)
                              xb.write (((unsupported)).apply)
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xsize)))))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((xrepr)).apply ((xi)))))) ((xi)))
                                  ((xcopymode).less 0).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((xrepr)).apply ((xi)))))) ((xi)))
                              ((xcopymode).greater 0).if
                                xb.write ((((xa).xcopy)).apply)
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xsize)))))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xka)) ((xva)))) ((xta)) (((((xa).xpopitem)).apply)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xva)) ((((xint)).apply ((xka)))))
                                  (((unsupported)).apply ((((unsupported)).apply ((xkb)) ((xvb)))) ((xtb)) (((((xb).xpopitem)).apply)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvb)) ((((xint)).apply ((xkb)))))
                                  bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xcopymode).less 0).and ((xta).neq (xtb)))))
                              bogusForceDataize.write ((((xself).xassertfalse)).apply ((xa)))
                              bogusForceDataize.write ((((xself).xassertfalse)).apply ((xb)))
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).xpopitem)))
                xtest_pop.write
                  [xself]
                    memory > xfail
                    memory > xd
                    memory > xx
                    memory > x__hash__
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((unsupported)).apply ("abc") ("def"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk)))) ((xv)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).xpop)) ("ghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xpop)).apply ((xk)))) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).xpop)) ((xk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xpop)).apply ((xk)) ((xv)))) ((xv)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk)))) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xpop)).apply ((xk)) (1))) ((xv)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xpop)))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xfail.write (xfalse)
                            x__hash__.write
                              [xself]
                                seq > @
                                  ((xself).xfail).if
                                    (((unsupported)).apply ((((xExc)).apply)))
                                    (((unsupported)).apply (42))
                        xx.write (((xBadHash)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xx)))) (42))
                        (((unsupported)).apply (((xx).xfail)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) (((xd).xpop)) ((xx)))
                xtest_mutating_iteration.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xi)) ((xd)))
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) (((xi).add 1)))) (1))
                xtest_mutating_iteration_delete.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xi)) ((xd)))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) (0))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                xtest_mutating_iteration_delete_over_values.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xi)) (((((xd).xvalues)).apply)))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) (0))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                xtest_mutating_iteration_delete_over_items.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          (((unsupported)).apply ((xi)) (((((xd).xitems)).apply)))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) (0))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) (0))
                xtest_mutating_lookup.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xkey2
                    memory > xmutate_dict
                    memory > x__init__
                    memory > x__hash__
                    memory > xkey1
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xmutate_dict.write "None: is there a None literal in the EO language?"
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (1))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    ((xNastyKey).xmutate_dict).if
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xmydict)) ((xkey)))) (((xNastyKey).xmutate_dict)))
                                        (((unsupported)).apply (((xNastyKey).xmutate_dict)) ("None: is there a None literal in the EO language?"))
                                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xmydict)) ((xkey)))))))
                                    (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        xkey1.write (((xNastyKey)).apply (1))
                        xkey2.write (((xNastyKey)).apply (2))
                        xd.write (((unsupported)).apply ((xkey1)) (1))
                        (((unsupported)).apply (((xNastyKey).xmutate_dict)) ((((unsupported)).apply ((xd)) ((xkey1)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xkey2)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ((xkey2)) (2))))
                xtest_repr.write
                  [xself]
                    memory > xd
                    memory > x__repr__
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("{}"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("{1: 2}"))
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xd)))) ("{1: {...}}"))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          x__repr__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xExc)).apply)))
                        xd.write (((unsupported)).apply (1) ((((xBadRepr)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) ((xrepr)) ((xd)))
                xtest_repr_deep.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((((xsys).xgetrecursionlimit)).apply).add 100)))))
                          xd.write (((unsupported)).apply (1) ((xd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xrepr)) ((xd)))
                xtest_eq.write
                  [xself]
                    memory > x__eq__
                    memory > xd2
                    memory > xd1
                    memory > x__hash__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xExc)).apply)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (1))
                        xd1.write (((unsupported)).apply ((((xBadCmp)).apply)) (1))
                        xd2.write (((unsupported)).apply (1) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xExc)))))
                          unsupported
                xtest_keys_contained.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xhelper_keys_contained)).apply ((((unsupported)).apply (((((xx).xkeys)).apply)))))
                        bogusForceDataize.write ((((xself).xhelper_keys_contained)).apply ((((unsupported)).apply (((((xx).xitems)).apply)))))
                xhelper_keys_contained.write
                  [xself xfn]
                    memory > xempty2
                    memory > xlarger2
                    memory > xempty
                    memory > xlarger3
                    memory > xsmaller
                    memory > xlarger
                    seq > @
                      seq
                        xempty.write (((xfn)).apply ((((xdict)).apply)))
                        xempty2.write (((xfn)).apply ((((xdict)).apply)))
                        xsmaller.write (((xfn)).apply ((((unsupported)).apply (1) (1) (2) (2))))
                        xlarger.write (((xfn)).apply ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        xlarger2.write (((xfn)).apply ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        xlarger3.write (((xfn)).apply ((((unsupported)).apply (4) (1) (2) (2) (3) (3))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsmaller).less (xlarger))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsmaller).leq (xlarger))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger).greater (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger).geq (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xsmaller).geq (xlarger))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xsmaller).greater (xlarger))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger).leq (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger).less (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xsmaller).less (xlarger3))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xsmaller).leq (xlarger3))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger3).greater (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger3).geq (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger2).geq (xlarger))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger2).leq (xlarger))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger2).greater (xlarger))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger2).less (xlarger))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger).eq (xlarger2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsmaller).neq (xlarger))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xempty).eq (xempty2))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xempty).neq (xempty2))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xempty).eq (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xempty).neq (xsmaller))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xlarger).neq (xlarger3))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xlarger).eq (xlarger3))))
                xtest_errors_in_view_containment_check.write
                  [xself]
                    memory > x__eq__
                    memory > xd1
                    memory > xd2
                    memory > xd3
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply ((xRuntimeError)))
                        xd1.write (((unsupported)).apply (1) ((((xC)).apply)))
                        xd2.write (((unsupported)).apply (1) ((((xC)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                        xd3.write (((unsupported)).apply (1) ((((xC)).apply)) (2) ((((xC)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          unsupported
                xtest_dictview_set_operations_on_keys.write
                  [xself]
                    memory > xk1
                    memory > xk2
                    memory > xk3
                    seq > @
                      seq
                        xk1.write ((((((unsupported)).apply (1) (1) (2) (2)).xkeys)).apply)
                        xk2.write ((((((unsupported)).apply (1) (1) (2) (2) (3) (3)).xkeys)).apply)
                        xk3.write ((((((unsupported)).apply (4) (4)).xkeys)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).sub (xk2))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).sub (xk3))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk2).sub (xk1))) ((((unsupported)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk3).sub (xk1))) ((((unsupported)).apply (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).and (xk2))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).and (xk3))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).or (xk2))) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk1)) ((xk2)))) ((((unsupported)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk1)) ((xk3)))) ((((unsupported)).apply (1) (2) (4))))
                xtest_dictview_set_operations_on_items.write
                  [xself]
                    memory > xk1
                    memory > xk2
                    memory > xk3
                    seq > @
                      seq
                        xk1.write ((((((unsupported)).apply (1) (1) (2) (2)).xitems)).apply)
                        xk2.write ((((((unsupported)).apply (1) (1) (2) (2) (3) (3)).xitems)).apply)
                        xk3.write ((((((unsupported)).apply (4) (4)).xitems)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).sub (xk2))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).sub (xk3))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk2).sub (xk1))) ((((unsupported)).apply ((((unsupported)).apply (3) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk3).sub (xk1))) ((((unsupported)).apply ((((unsupported)).apply (4) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).and (xk2))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).and (xk3))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xk1).or (xk2))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk1)) ((xk2)))) ((((unsupported)).apply ((((unsupported)).apply (3) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk1)) ((xk3)))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (4) (4))))))
                xtest_dictview_mixed_set_operations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((unsupported)).apply (1) (1)).xkeys)).apply).eq (((unsupported)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply (1)).eq ((((((unsupported)).apply (1) (1)).xkeys)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((unsupported)).apply (1) (1)).xkeys)).apply).or (((unsupported)).apply (2)))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (2)).or ((((((unsupported)).apply (1) (1)).xkeys)).apply))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((unsupported)).apply (1) (1)).xitems)).apply).eq (((unsupported)).apply ((((unsupported)).apply (1) (1)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((((unsupported)).apply (1) (1)))).eq ((((((unsupported)).apply (1) (1)).xitems)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((unsupported)).apply (1) (1)).xitems)).apply).or (((unsupported)).apply (2)))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (2)).or ((((((unsupported)).apply (1) (1)).xitems)).apply))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) (2))))
                xtest_missing.write
                  [xself]
                    memory > xd
                    memory > x__missing__
                    memory > xg
                    memory > xf
                    memory > x__init__
                    memory > xe
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xhasattr)).apply ((xdict)) ("__missing__"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xhasattr)).apply ((((unsupported)).apply)) ("__missing__"))))
                        (((unsupported)).apply ((xdict)))
                          x__missing__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply (42))
                        xd.write (((xD)).apply ((((unsupported)).apply (1) (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (3))) (4))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (2) ((xd)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (2) (((((xd).xkeys)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) (2))) (42))
                        (((unsupported)).apply ((xdict)))
                          x__missing__.write
                            [xself xkey]
                              seq > @
                                (((unsupported)).apply ((((xRuntimeError)).apply ((xkey)))))
                        xe.write (((xE)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xc)))
                          (((unsupported)).apply ((xe)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xc).xexception).xargs)) ((((unsupported)).apply (42))))
                        (((unsupported)).apply ((xdict)))
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).x__missing__)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        xf.write (((xF)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))) ((xc)))
                          (((unsupported)).apply ((xf)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xc).xexception).xargs)) ((((unsupported)).apply (42))))
                        (((unsupported)).apply ((xdict)))
                        xg.write (((xG)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))) ((xc)))
                          (((unsupported)).apply ((xg)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xc).xexception).xargs)) ((((unsupported)).apply (42))))
                xtest_tuple_keyerror.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))) ((xc)))
                          (((unsupported)).apply ((xd)) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xc).xexception).xargs)) ((((unsupported)).apply ((((unsupported)).apply (1))))))
                xtest_bad_key.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xx1
                    memory > xx2
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply)
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xhash)).apply (((xself).x__class__)))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) (((xself).x__class__))).if
                                      (((unsupported)).apply ((xCustomException)))
                                    (((unsupported)).apply ((xother)))
                        xd.write (((unsupported)).apply)
                        xx1.write (((xBadDictKey)).apply)
                        xx2.write (((xBadDictKey)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xx1)))) (1))
                        (((unsupported)).apply ((xstmt)) ((((unsupported)).apply ("d[x2] = 2") ("z = d[x2]") ("x2 in d") ("d.get(x2)") ("d.setdefault(x2, 42)") ("d.pop(x2)") ("d.update({x2: 2})"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCustomException)))))
                            bogusForceDataize.write (((xexec)).apply ((xstmt)) ((((xlocals)).apply)))
                xtest_resize1.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xi)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5) (9))))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xi)))) ((xi)))
                xtest_resize2.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > x__hash__
                    memory > xresizing
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (5))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (xresizing).if
                                      bogusForceDataize.write ((((xd).xclear)).apply)
                                    (((unsupported)).apply ((xfalse)))
                        xd.write (((unsupported)).apply)
                        xresizing.write (xfalse)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xX)).apply)))) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xX)).apply)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xX)).apply)))) (3))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xX)).apply)))) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((((xX)).apply)))) (5))
                        xresizing.write TRUE
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (9))) (6))
                xtest_empty_presized_dict_in_freelist.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          xd.write (((unsupported)).apply ("a") ((((unsupported)).apply (1) (0))) ("b") ("None: is there a None literal in the EO language?") ("c") ("None: is there a None literal in the EO language?") ("d") ("None: is there a None literal in the EO language?") ("e") ("None: is there a None literal in the EO language?") ("f") ("None: is there a None literal in the EO language?") ("g") ("None: is there a None literal in the EO language?") ("h") ("None: is there a None literal in the EO language?"))
                        xd.write (((unsupported)).apply)
                xtest_container_iterator.write
                  [xself]
                    memory > xviews
                    memory > xref
                    memory > xcontainer
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        xviews.write (((unsupported)).apply (((xdict).xitems)) (((xdict).xvalues)) (((xdict).xkeys)))
                        (((unsupported)).apply ((xv)) ((xviews)))
                          seq
                            xobj.write (((xC)).apply)
                            xref.write ((((xweakref).xref)).apply ((xobj)))
                            xcontainer.write (((unsupported)).apply ((xobj)) (1))
                            (((unsupported)).apply (((xobj).xv)) ((((xv)).apply ((xcontainer)))))
                            (((unsupported)).apply (((xobj).xx)) ((((xiter)).apply (((xobj).xv)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xobj)) ((xcontainer)))))
                            bogusForceDataize.write ((((xgc).xcollect)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xref)).apply)) ("None: is there a None literal in the EO language?") ("Cycle was not collected"))
                x_not_tracked.write
                  [xself xt]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xgc).xis_tracked)).apply ((xt)))) ((xt)))
                x_tracked.write
                  [xself xt]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((xt)))) ((xt)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((xt)))) ((xt)))
                xtest_track_literals.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xw)))) ((((unsupported)).apply (1.5) ("a") ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply)) ((xy)) ((xx)) ((xz)) (1))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((((unsupported)).apply (1) ("a") ("b") (2))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((((unsupported)).apply (1) (2) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) ((xfalse)) ((((unsupported)).apply)))) ((xint)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((((unsupported)).apply (1) ((((xobject)).apply)))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((((unsupported)).apply (1) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((((unsupported)).apply (1) ((((unsupported)).apply ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((((unsupported)).apply (1) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((((unsupported)).apply (1) ((((xset)).apply)))))
                xtest_track_dynamic.write
                  [xself]
                    memory > xd
                    memory > xdd
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xw)) ((xo)))) ((((unsupported)).apply (1.5) ("a") ((((unsupported)).apply (1) ((((xobject)).apply)))) ((((unsupported)).apply)) ((((xMyObject)).apply)))))
                        xd.write (((xdict)).apply)
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) ("a"))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xy)))) (2))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xz)))) (3))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply (((((xd).xcopy)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (4))) ((xw)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply (((((xd).xcopy)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (4))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply (((((xd).xcopy)).apply)))
                        xd.write (((xdict)).apply)
                        xdd.write (((xdict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) (1))) ((xdd)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xdd)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdd)) (1))) ((xd)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xdd)))
                        xd.write ((((xdict).xfromkeys)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        xdd.write (((xdict)).apply)
                        bogusForceDataize.write ((((xdd).xupdate)).apply ((xd)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xdd)))
                        xd.write ((((xdict).xfromkeys)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xo)))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        xdd.write (((xdict)).apply)
                        bogusForceDataize.write ((((xdd).xupdate)).apply ((xd)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xdd)))
                        xd.write (((unsupported)).apply ((xdict)) ((xx)) ((xy)) ((xz)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        xd.write (((unsupported)).apply ((xdict)) ((xx)) ((xy)) ((xz)) ((xw)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        xd.write (((xdict)).apply)
                        (((unsupported)).apply (((xd).xupdate)) ((xx)) ((xy)) ((xz)))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        (((unsupported)).apply (((xd).xupdate)) ((xw)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        xd.write (((xdict)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xz)) (1))))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        xd.write (((xdict)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xz)) ((xw)))))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                        xd.write (((xdict)).apply)
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xz)) (1))))))
                        bogusForceDataize.write ((((xself).x_not_tracked)).apply ((xd)))
                        bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xz)) ((xw)))))))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((xd)))
                xtest_track_subtypes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdict)))
                        bogusForceDataize.write ((((xself).x_tracked)).apply ((((xMyDict)).apply)))
                xmake_shared_key_dict.write
                  [xself xn]
                    memory > xdicts
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdicts.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                          seq
                            xa.write (((xC)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xa).xx)) (((xa).xy)) (((xa).xz)))) ((((unsupported)).apply (1) (2) (3))))
                            bogusForceDataize.write ((((xdicts).xappend)).apply (((xa).x__dict__)))
                        (((unsupported)).apply ((xdicts)))
                xtest_splittable_setdefault.write
                  [xself]
                    memory > xsize_a
                    memory > xsize_b
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xself).xmake_shared_key_dict)).apply (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("a"))) (1))
                        xsize_a.write ((((xsys).xgetsizeof)).apply ((xa)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("b"))) (2))
                        bogusForceDataize.write ((((xb).xsetdefault)).apply ("b") (2))
                        xsize_b.write ((((xsys).xgetsizeof)).apply ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ("a"))) (1))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xsize_b)) ((xsize_a)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("y") ("z") ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z") ("b") ("a"))))
                xtest_splittable_del.write
                  [xself]
                    memory > xorig_size
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xself).xmake_shared_key_dict)).apply (2))))
                        xorig_size.write ((((xsys).xgetsizeof)).apply ((xa)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ("y"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ("y"))))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((xsys).xgetsizeof)).apply ((xa)))) ((xorig_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("y"))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("z") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z"))))
                xtest_splittable_pop.write
                  [xself]
                    memory > xorig_size
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xself).xmake_shared_key_dict)).apply (2))))
                        xorig_size.write ((((xsys).xgetsizeof)).apply ((xa)))
                        bogusForceDataize.write ((((xa).xpop)).apply ("y"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          bogusForceDataize.write ((((xa).xpop)).apply ("y"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((xsys).xgetsizeof)).apply ((xa)))) ((xorig_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("y"))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("z") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z"))))
                xtest_splittable_pop_pending.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xself).xmake_shared_key_dict)).apply (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ("a"))) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          bogusForceDataize.write ((((xb).xpop)).apply ("a"))
                xtest_splittable_popitem.write
                  [xself]
                    memory > xorig_size
                    memory > xitem
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) (((((xself).xmake_shared_key_dict)).apply (2))))
                        xorig_size.write ((((xsys).xgetsizeof)).apply ((xa)))
                        xitem.write ((((xa).xpopitem)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ((((unsupported)).apply ("z") (3))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xKeyError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ("z"))))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((xsys).xgetsizeof)).apply ((xa)))) ((xorig_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ("x") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ("x") ("y") ("z"))))
                xtest_splittable_setattr_after_pop.write
                  [xself]
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xa.write (((xC)).apply)
                        (((unsupported)).apply (((xa).xa)) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                        bogusForceDataize.write (((((xa).x__dict__).xpop)).apply ("a"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                        (((unsupported)).apply (((xa).xa)) (1))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                        xa.write (((xC)).apply)
                        (((unsupported)).apply (((xa).xa)) (2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                        bogusForceDataize.write (((((xa).x__dict__).xpopitem)).apply)
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                        (((unsupported)).apply (((xa).xa)) (3))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((x_testcapi).xdict_hassplittable)).apply (((xa).x__dict__)))))
                xtest_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdrop
                    memory > xit
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xit.write (((xiter)).apply ((xdata)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((xdata)))))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((xStopIteration)))
                            xdrop.write (((xnext)).apply ((xit)))
                            (((unsupported)).apply)
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xdrop)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((xdata)))))
                xtest_itemiterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xdrop
                    memory > xit
                    memory > xitorg
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xitorg.write (((xiter)).apply (((((xdata).xitems)).apply)))
                          xd.write ((((xpickle).xdumps)).apply ((xitorg)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) ((((xcollections).xabc).xIterator)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xit)))) ((xdata)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xdrop.write (((xnext)).apply ((xit)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xdrop)) (0))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xit)))) ((xdata)))
                xtest_valuesiterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xvalues
                    memory > xdata
                    memory > xdrop
                    memory > xit
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xit.write (((xiter)).apply (((((xdata).xvalues)).apply)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply (((((xdata).xvalues)).apply)))))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xdrop.write (((xnext)).apply ((xit)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xvalues.write ((((xlist)).apply ((xit))).add (((unsupported)).apply ((xdrop))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xvalues)))) ((((xsorted)).apply ((((xlist)).apply (((((xdata).xvalues)).apply)))))))
                xtest_reverseiterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdrop
                    memory > xit
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xit.write (((xreversed)).apply ((xdata)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xreversed)).apply ((xdata)))))))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((xStopIteration)))
                            xdrop.write (((xnext)).apply ((xit)))
                            (((unsupported)).apply)
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xdrop)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xreversed)).apply ((xdata)))))))
                xtest_reverseitemiterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xdrop
                    memory > xit
                    memory > xitorg
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xitorg.write (((xreversed)).apply (((((xdata).xitems)).apply)))
                          xd.write ((((xpickle).xdumps)).apply ((xitorg)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) ((((xcollections).xabc).xIterator)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xit)))) ((xdata)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xdrop.write (((xnext)).apply ((xit)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xdrop)) (0))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xit)))) ((xdata)))
                xtest_reversevaluesiterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xvalues
                    memory > xdata
                    memory > xdrop
                    memory > xit
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xdata.write (((unsupported)).apply (1) ("a") (2) ("b") (3) ("c"))
                          xit.write (((xreversed)).apply (((((xdata).xvalues)).apply)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xreversed)).apply (((((xdata).xvalues)).apply)))))))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xdrop.write (((xnext)).apply ((xit)))
                          xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                          xit.write ((((xpickle).xloads)).apply ((xd)))
                          xvalues.write ((((xlist)).apply ((xit))).add (((unsupported)).apply ((xdrop))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xvalues)))) ((((xsorted)).apply (((((xdata).xvalues)).apply)))))
                xtest_instance_dict_getattr_str_subclass.write
                  [xself]
                    memory > x__init__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xmsg]
                              seq > @
                                (((unsupported)).apply (((xself).xmsg)) ((xmsg)))
                        xf.write (((xFoo)).apply ("123"))
                        (((unsupported)).apply ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmsg)) ((((xgetattr)).apply ((xf)) ((((x_str)).apply ("msg"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmsg)) ((((unsupported)).apply (((xf).x__dict__)) ((((x_str)).apply ("msg"))))))
                xtest_object_set_item_single_instance_non_str_key.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xf.write (((xFoo)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xf).x__dict__)) (1))) (1))
                        (((unsupported)).apply (((xf).xa)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).x__dict__)) ((((unsupported)).apply (1) (1) ("a") ("a"))))
                xcheck_reentrant_insertion.write
                  [xself xmutate]
                    memory > xd
                    memory > x__del__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__del__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((xmutate)).apply ((xd)))
                        xd.write (((unsupported)).apply ((xk)) ((((xMutating)).apply)) ((xk)) ("abcdefghijklmnopqr"))
                        (((unsupported)).apply ((xk)) ((((xlist)).apply ((xd)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk)))) ((xk)))
                xtest_reentrant_insertion.write
                  [xself]
                    memory > xmutate
                    seq > @
                      seq
                        xmutate.write
                          [xd]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) ("b"))) (5))
                        bogusForceDataize.write ((((xself).xcheck_reentrant_insertion)).apply ((xmutate)))
                        xmutate.write
                          [xd]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xd).xupdate)).apply (((xself).x__dict__)))
                                bogusForceDataize.write ((((xd).xclear)).apply)
                        bogusForceDataize.write ((((xself).xcheck_reentrant_insertion)).apply ((xmutate)))
                        xmutate.write
                          [xd]
                            seq > @
                              while.
                                (xd)
                                [unused]
                                  seq > @
                                    bogusForceDataize.write ((((xd).xpopitem)).apply)
                        bogusForceDataize.write ((((xself).xcheck_reentrant_insertion)).apply ((xmutate)))
                xtest_merge_and_mutate.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xother
                    memory > xl
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (0))
                            x__eq__.write
                              [xself xo]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xother).xclear)).apply)
                                    (((unsupported)).apply ((xfalse)))
                        xl.write (((unsupported)).apply ((((unsupported)).apply ((xi)) (0))) ((xi)) ((((xrange)).apply (1) (1337))))
                        xother.write (((xdict)).apply ((xl)))
                        (((unsupported)).apply ((((unsupported)).apply ((xother)) ((((xX)).apply)))) (0))
                        xd.write (((unsupported)).apply ((((xX)).apply)) (0) (1) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xd).xupdate)) ((xother)))
                xtest_free_after_iterating.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((xiter)) ((xdict)))
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((((unsupported)).apply ((((xiter)).apply (((((xd).xkeys)).apply)))))) ((xdict)))
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((((unsupported)).apply ((((xiter)).apply (((((xd).xvalues)).apply)))))) ((xdict)))
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((((unsupported)).apply ((((xiter)).apply (((((xd).xitems)).apply)))))) ((xdict)))
                xtest_equal_operator_modifying_operand.write
                  [xself]
                    memory > x__eq__
                    memory > xdict_a
                    memory > xdict_d
                    memory > x__del__
                    memory > xdict_c
                    memory > x__hash__
                    memory > xdict_b
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__del__.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xdict_b).xclear)).apply)
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xdict_a).xclear)).apply)
                                    (((unsupported)).apply (TRUE))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (13))
                        xdict_a.write (((unsupported)).apply ((((xX)).apply)) (0))
                        xdict_b.write (((unsupported)).apply ((((xX)).apply)) ((((xX)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xdict_a).eq (xdict_b))))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xdict_d).xclear)).apply)
                                  (((unsupported)).apply (TRUE))
                        xdict_c.write (((unsupported)).apply (0) ((((xY)).apply)))
                        xdict_d.write (((unsupported)).apply (0) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xdict_c).eq (xdict_d))))
                xtest_fromkeys_operator_modifying_dict_operand.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (13))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    ((((xlen)).apply ((xd))).greater 1).if
                                      bogusForceDataize.write ((((xd).xclear)).apply)
                                    (((unsupported)).apply ((xfalse)))
                        xd.write (((unsupported)).apply)
                        xd.write (((unsupported)).apply ((((xX)).apply (1))) (1) ((((xX)).apply (2))) (2))
                        (((unsupported)).apply ((xRuntimeError)))
                          bogusForceDataize.write ((((xdict).xfromkeys)).apply ((xd)))
                xtest_fromkeys_operator_modifying_set_operand.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > x__hash__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (13))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    ((((xlen)).apply ((xd))).greater 1).if
                                      bogusForceDataize.write ((((xd).xclear)).apply)
                                    (((unsupported)).apply ((xfalse)))
                        xd.write (((unsupported)).apply)
                        xd.write (((unsupported)).apply ((((xX)).apply (1))) ((((xX)).apply (2))))
                        (((unsupported)).apply ((xRuntimeError)))
                          bogusForceDataize.write ((((xdict).xfromkeys)).apply ((xd)))
                xtest_dictitems_contains_use_after_free.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xother]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xd).xclear)).apply)
                                  (((unsupported)).apply ((xNotImplemented)))
                        xd.write (((unsupported)).apply (0) ((((xset)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (0) ((((xX)).apply)))) (((((xd).xitems)).apply)))
                xtest_init_use_after_free.write
                  [xself]
                    memory > x__hash__
                    memory > xpair
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__hash__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xpair)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                                  (((unsupported)).apply (13))
                        xpair.write (((unsupported)).apply ((((xX)).apply)) (123))
                        bogusForceDataize.write (((xdict)).apply ((((unsupported)).apply ((xpair)))))
                xtest_oob_indexing_dictiter_iternextitem.write
                  [xself]
                    memory > xiter_and_mutate
                    memory > xd
                    memory > x__del__
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          x__del__.write
                            [xself]
                              seq > @
                                bogusForceDataize.write ((((xd).xclear)).apply)
                        xd.write (((unsupported)).apply ((xi)) ((((xX)).apply ((xi)))) ((xi)) ((((xrange)).apply (8))))
                        xiter_and_mutate.write
                          []
                            seq > @
                              (((unsupported)).apply ((xresult)) (((((xd).xitems)).apply)))
                                ((((unsupported)).apply ((xresult)) (0)).eq 2).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xd)) (2))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xiter_and_mutate)))
                xtest_reversed.write
                  [xself]
                    memory > xd
                    memory > xr
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("a") (1) ("b") (2) ("foo") (0) ("c") (3) ("d") (4))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("foo"))))))
                        xr.write (((xreversed)).apply ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xr)))) ((((xlist)).apply ("dcba"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xr)))
                xtest_reverse_iterator_for_empty_dict.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((unsupported)).apply).xitems)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((unsupported)).apply).xvalues)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((unsupported)).apply).xkeys)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply ((((xdict)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((xdict)).apply).xitems)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((xdict)).apply).xvalues)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((((xdict)).apply).xkeys)).apply)))))) ((((unsupported)).apply)))
                xtest_reverse_iterator_for_shared_shared_dicts.write
                  [xself]
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xx xy]
                              seq > @
                                seq
                                  (xx).if
                                    (((unsupported)).apply (((xself).xx)) ((xx)))
                                  (xy).if
                                    (((unsupported)).apply (((xself).xy)) ((xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((xA)).apply (1) (2)).x__dict__)))))) ((((unsupported)).apply ("y") ("x"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((xA)).apply (1) (0)).x__dict__)))))) ((((unsupported)).apply ("x"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xreversed)).apply (((((xA)).apply (0) (1)).x__dict__)))))) ((((unsupported)).apply ("y"))))
                xtest_dict_copy_order.write
                  [xself]
                    memory > xd
                    memory > xcopy
                    memory > xexpected
                    memory > xod
                    memory > xpairs
                    memory > xitems
                    memory > xkeys
                    memory > x__iter__
                    seq > @
                      seq
                        xod.write ((((xcollections).xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))))
                        bogusForceDataize.write ((((xod).xmove_to_end)).apply ("a"))
                        xexpected.write (((xlist)).apply (((((xod).xitems)).apply)))
                        xcopy.write (((xdict)).apply ((xod)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xitems)).apply)))) ((xexpected)))
                        (((unsupported)).apply ((xdict)))
                        xpairs.write (((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))) ((((unsupported)).apply ("c") (3))))
                        xd.write (((xCustomDict)).apply ((xpairs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpairs)) ((((xlist)).apply (((((((xdict)).apply ((xd))).xitems)).apply)))))
                        (((unsupported)).apply ((xdict)))
                          seq
                            xkeys.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xreversed)).apply ((((xlist)).apply (((((xdict).xkeys)).apply ((xself)))))))))
                            x__iter__.write (xkeys)
                            xitems.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xreversed)).apply (((((xdict).xitems)).apply ((xself)))))))
                        xd.write (((xCustomReversedDict)).apply ((xpairs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpairs)) ((((unsupported)).apply ((1.neg)))))) ((((xlist)).apply (((((((xdict)).apply ((xd))).xitems)).apply)))))
                xtest_dict_items_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xiter)).apply (((((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply))).xitems)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
                xtest_dict_items_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xreversed)).apply (((((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply))).xitems)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_getitem_knownhash.write
                [xself]
                  memory > xd
                  memory > x__eq__
                  memory > x__hash__
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      xd.write (((unsupported)).apply ("x") (1) ("y") (2) ("z") (3))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict_getitem_knownhash)).apply ((xd)) ("x") ((((xhash)).apply ("x"))))) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict_getitem_knownhash)).apply ((xd)) ("y") ((((xhash)).apply ("y"))))) (2))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict_getitem_knownhash)).apply ((xd)) ("z") ((((xhash)).apply ("z"))))) (3))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSystemError)) ((xdict_getitem_knownhash)) ((((unsupported)).apply)) (1) ((((xhash)).apply (1))))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((xdict_getitem_knownhash)) ((((unsupported)).apply)) (1) ((((xhash)).apply (1))))
                      (((unsupported)).apply ((xException)))
                      (((unsupported)).apply)
                        seq
                          x__eq__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply ((xExc)))
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (7))
                      (((unsupported)).apply ((((unsupported)).apply ((xk1)) ((xk2)))) ((((unsupported)).apply ((((xBadEq)).apply)) ((((xBadEq)).apply)))))
                      xd.write (((unsupported)).apply ((xk1)) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict_getitem_knownhash)).apply ((xd)) ((xk1)) ((((xhash)).apply ((xk1)))))) (1))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExc)) ((xdict_getitem_knownhash)) ((xd)) ((xk2)) ((((xhash)).apply ((xk2)))))
            (((unsupported)).apply)
            (((unsupported)).apply (((xmapping_tests).xBasicTestMappingProtocol)))
              xtype2test.write (xdict)
            (((unsupported)).apply ((xdict)))
            (((unsupported)).apply (((xmapping_tests).xBasicTestMappingProtocol)))
              xtype2test.write (xDict)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)