memory > xlist
memory > xValueError
memory > xconnection
memory > xValue
memory > xNullIf
memory > xTypeError
memory > xTestCase
memory > xAuthor
[] > test_nullif
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_null_literal
        memory > xtest_null_argument
        memory > xsetUpTestData
        memory > xtest_too_few_args
        memory > xtest_basic
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John Smith") ("smithj"))
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Rhonda") ("Rhonda"))
                xtest_basic.write
                  [xself]
                    memory > xauthors
                    seq > @
                      seq
                        xauthors.write ((((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xNullIf)).apply ("alias") ("name")))).xvalues_list)).apply ("nullif"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xauthors)) ((((unsupported)).apply ((((unsupported)).apply ("smithj"))) ((((unsupported)).apply (((((xconnection).xfeatures).xinterprets_empty_strings_as_nulls).if "" "None: is there a None literal in the EO language?")))))))
                xtest_null_argument.write
                  [xself]
                    memory > xauthors
                    seq > @
                      seq
                        xauthors.write ((((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xNullIf)).apply ("name") ((((xValue)).apply ("None: is there a None literal in the EO language?")))))).xvalues_list)).apply ("nullif"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xauthors)) ((((unsupported)).apply ((((unsupported)).apply ("John Smith"))) ((((unsupported)).apply ("Rhonda"))))))
                xtest_too_few_args.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "'NullIf' takes exactly 2 arguments (1 given)"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xNullIf)).apply ("name"))
                xtest_null_literal.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Oracle does not allow Value(None) for expression1."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply (((((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xNullIf)).apply ((((xValue)).apply ("None: is there a None literal in the EO language?"))) ("name")))).xvalues_list)).apply ("nullif"))))