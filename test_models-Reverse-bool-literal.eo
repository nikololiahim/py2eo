memory > xContentType
memory > xUserManager
memory > xValueError
memory > xstr
memory > xbackend
memory > xchar
memory > xNotImplementedError
memory > xconnection
memory > xProjectState
memory > xmigrations
memory > xModelBackend
memory > xobject
memory > xTypeError
memory > xget_user_model
memory > xAnonymousUser
memory > xImportError
memory > xexpected_users
memory > xTestCase
memory > xperm
memory > xCustomEmailField
memory > xset
memory > xint
memory > xTransactionTestCase
memory > xPermission
memory > xModelState
memory > xpost_save
memory > xmail
memory > xmock
memory > xeditor
memory > xGroup
memory > xpw_changed
memory > xget_hasher
memory > xAbstractBaseUser
memory > xIntegerUsernameUser
memory > xhash
memory > xkwargs
memory > xmodel
memory > xSimpleTestCase
memory > xUser
memory > xlen
[] > test_models
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdatabases
        memory > xtest_has_usable_password
        memory > xtest_create_superuser
        memory > xtest_custom_backend
        memory > xtest_int
        memory > xtest_nonexistent_backend
        memory > xtest_builtin_user_isactive
        memory > xavailable_apps
        memory > xtest_eq
        memory > xtest_create_superuser_raises_error_on_false_is_staff
        memory > xtest_custom_email
        memory > xtest_create_user_email_domain_normalize_with_whitespace
        memory > xtest_is_active_field_default
        memory > xno_repr_msg
        memory > xtest_set_password
        memory > xtest_normalize_username
        memory > xtest_hash
        memory > xtest_group_natural_key
        memory > xtest_runpython_manager_methods
        memory > xtest_last_login_default
        memory > xsetUpTestData
        memory > xtest_custom_backend_pass_obj
        memory > xtest_user_double_save
        memory > xtest_create_super_user_raises_error_on_false_is_superuser
        memory > xtest_check_password_upgrade
        memory > xsetUp
        memory > xfixtures
        memory > xtest_invalid_permission_name
        memory > xtest_user_clean_normalize_email
        memory > xtest_user_is_created_and_added_to_group
        memory > xtest_delete
        memory > xtest_nonexistent_permission
        memory > xtest_backend_without_with_perm
        memory > xtest_basic
        memory > xtest_default_email
        memory > xtest_multiple_backends
        memory > xtest_save
        memory > xtest_str
        memory > xtest_invalid_permission_type
        memory > xtest_create_user_is_staff
        memory > xtest_invalid_backend_type
        memory > xtest_create_user_email_domain_normalize_rfc3696
        memory > xpost_save_listener
        memory > xtest_load_data_with_user_permissions
        memory > xtest_create_user
        memory > xtest_properties
        memory > xtest_check_password
        memory > xtest_clean_normalize_username
        memory > xtest_make_random_password
        memory > xtest_email_user
        memory > xtearDown
        memory > xtest_user_natural_key
        memory > xtest_empty_username
        memory > xtest_create_user_email_domain_normalize
        memory > xwith_perm
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_user_natural_key.write
                  [xself]
                    memory > xstaff_user
                    seq > @
                      seq
                        xstaff_user.write (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("staff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xUser).xobjects).xget_by_natural_key)).apply ("staff"))) ((xstaff_user)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstaff_user).xnatural_key)).apply)) ((((unsupported)).apply ("staff"))))
                xtest_group_natural_key.write
                  [xself]
                    memory > xusers_group
                    seq > @
                      seq
                        xusers_group.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("users"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xGroup).xobjects).xget_by_natural_key)).apply ("users"))) ((xusers_group)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xfixtures.write (((unsupported)).apply ("regular.json"))
                xtest_user_is_created_and_added_to_group.write
                  [xself]
                    memory > xgroup
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("my_username"))
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xget)) ("my_group"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgroup)) ((((((xuser).xgroups).xget)).apply)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xfixtures.write (((unsupported)).apply ("natural.json"))
                xtest_user_is_created_and_added_to_group.write
                  [xself]
                    memory > xgroup
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("my_username"))
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xget)) ("my_group"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgroup)) ((((((xuser).xgroups).xget)).apply)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_load_data_with_user_permissions.write
                  [xself]
                    memory > xperm_other
                    memory > xperm_default
                    memory > xother_objects
                    memory > xdefault_objects
                    seq > @
                      seq
                        xdefault_objects.write (((unsupported)).apply ((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ("default")).xcreate)) ("examplemodela") ("app_a"))) ((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ("default")).xcreate)) ("examplemodelb") ("app_b"))))
                        xother_objects.write (((unsupported)).apply ((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ("other")).xcreate)) ("examplemodelb") ("app_b"))) ((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ("other")).xcreate)) ("examplemodela") ("app_a"))))
                        (((unsupported)).apply (((((((xPermission).xobjects).xdb_manager)).apply ("default")).xcreate)) ("Can delete example model b") ("delete_examplemodelb") ((((unsupported)).apply ((xdefault_objects)) (1))))
                        (((unsupported)).apply (((((((xPermission).xobjects).xdb_manager)).apply ("other")).xcreate)) ("Can delete example model b") ("delete_examplemodelb") ((((unsupported)).apply ((xother_objects)) (0))))
                        xperm_default.write (((((xPermission).xobjects).xget_by_natural_key)).apply ("delete_examplemodelb") ("app_b") ("examplemodelb"))
                        xperm_other.write ((((((((xPermission).xobjects).xdb_manager)).apply ("other")).xget_by_natural_key)).apply ("delete_examplemodelb") ("app_b") ("examplemodelb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xperm_default).xcontent_type_id)) (((((unsupported)).apply ((xdefault_objects)) (1)).xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xperm_other).xcontent_type_id)) (((((unsupported)).apply ((xother_objects)) (0)).xid)))
            (((unsupported)).apply ((xTransactionTestCase)))
              seq
                xavailable_apps.write (((unsupported)).apply ("auth_tests") ("django.contrib.auth") ("django.contrib.contenttypes"))
                xtest_create_user.write
                  [xself]
                    memory > xuser
                    memory > xemail_lowercase
                    seq > @
                      seq
                        xemail_lowercase.write "normal@normal.com"
                        xuser.write (((((xUser).xobjects).xcreate_user)).apply ("user") ((xemail_lowercase)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ((xemail_lowercase)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xusername)) ("user"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xuser).xhas_usable_password)).apply)))
                xtest_create_user_email_domain_normalize_rfc3696.write
                  [xself]
                    memory > xreturned
                    seq > @
                      seq
                        xreturned.write ((((xUserManager).xnormalize_email)).apply ("Abc@DEF@EXAMPLE.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreturned)) ("Abc@DEF@example.com"))
                xtest_create_user_email_domain_normalize.write
                  [xself]
                    memory > xreturned
                    seq > @
                      seq
                        xreturned.write ((((xUserManager).xnormalize_email)).apply ("normal@DOMAIN.COM"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreturned)) ("normal@domain.com"))
                xtest_create_user_email_domain_normalize_with_whitespace.write
                  [xself]
                    memory > xreturned
                    seq > @
                      seq
                        xreturned.write ((((xUserManager).xnormalize_email)).apply ("email with_whitespace@D.COM"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreturned)) ("email with_whitespace@d.com"))
                xtest_empty_username.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("The given username must be set"))))
                        (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) (""))
                xtest_create_user_is_staff.write
                  [xself]
                    memory > xuser
                    memory > xemail
                    seq > @
                      seq
                        xemail.write "normal@normal.com"
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("user") ((xemail)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ((xemail)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xusername)) ("user"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xuser).xis_staff)))
                xtest_create_super_user_raises_error_on_false_is_superuser.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Superuser must have is_superuser=True."))))
                        (((unsupported)).apply ((((xUser).xobjects).xcreate_superuser)) ("test") ("test@test.com") ("test") (FALSE))
                xtest_create_superuser_raises_error_on_false_is_staff.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Superuser must have is_staff=True."))))
                        (((unsupported)).apply ((((xUser).xobjects).xcreate_superuser)) ("test") ("test@test.com") ("test") (FALSE))
                xtest_make_random_password.write
                  [xself]
                    memory > xpassword
                    memory > xallowed_chars
                    seq > @
                      seq
                        xallowed_chars.write "abcdefg"
                        xpassword.write ((((((xUserManager)).apply).xmake_random_password)).apply (5) ((xallowed_chars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xpassword)))) (5))
                        (((unsupported)).apply ((xchar)) ((xpassword)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xchar)) ((xallowed_chars)))
                xtest_runpython_manager_methods.write
                  [xself]
                    memory > xforwards
                    memory > xoperation
                    memory > xuser
                    memory > xnew_state
                    memory > xproject_state
                    seq > @
                      seq
                        xforwards.write
                          [xapps xschema_editor]
                            memory > xuser
                            memory > xUserModel
                            seq > @
                              seq
                                xUserModel.write ((((xapps).xget_model)).apply ("auth") ("User"))
                                xuser.write (((unsupported)).apply ((((xUserModel).xobjects).xcreate_user)) ("user1") ("secure"))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xuser)) ((xUserModel)))
                        xoperation.write ((((xmigrations).xRunPython)).apply ((xforwards)) ((((xmigrations).xRunPython).xnoop)))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xUser)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xGroup)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xPermission)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xContentType)))))
                        xnew_state.write ((((xproject_state).xclone)).apply)
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("test_manager_methods") ((xnew_state)))
                            bogusForceDataize.write ((((xoperation).xdatabase_forwards)).apply ("test_manager_methods") ((xeditor)) ((xproject_state)) ((xnew_state)))
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xget)) ("user1"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser).xcheck_password)).apply ("secure"))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_has_usable_password.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xUser)) ("some-gibbberish")).xhas_usable_password)).apply)) (TRUE))
                xtest_normalize_username.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xIntegerUsernameUser)).apply).xnormalize_username)).apply (123))) (123))
                xtest_clean_normalize_username.write
                  [xself]
                    memory > xuser
                    memory > xusername
                    memory > xohm_username
                    memory > xUser
                    seq > @
                      seq
                        xohm_username.write "iamtheΩ"
                        (((unsupported)).apply ((xmodel)) ((((unsupported)).apply ("auth.User") ("auth_tests.CustomUser"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmodel)))) ((((unsupported)).apply (((xself).xsettings)) ((xmodel)))))
                            seq
                              xUser.write (((xget_user_model)).apply)
                              xuser.write (((xUser)).apply ((((unsupported)).apply ((((unsupported)).apply (((xUser).xUSERNAME_FIELD)) ((xohm_username)) ("password") ("foo"))))))
                              bogusForceDataize.write ((((xuser).xclean)).apply)
                              xusername.write ((((xuser).xget_username)).apply)
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xusername)) ((xohm_username)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xusername)) ("iamtheΩ"))
                xtest_default_email.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xAbstractBaseUser).xget_email_field_name)).apply)) ("email"))
                xtest_custom_email.write
                  [xself]
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((xCustomEmailField)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_email_field_name)).apply)) ("email_address"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_email_user.write
                  [xself]
                    memory > xmessage
                    memory > xuser
                    memory > xkwargs
                    seq > @
                      seq
                        xkwargs.write (((unsupported)).apply ("fail_silently") (FALSE) ("auth_user") ("None: is there a None literal in the EO language?") ("auth_password") ("None: is there a None literal in the EO language?") ("connection") ("None: is there a None literal in the EO language?") ("html_message") ("None: is there a None literal in the EO language?"))
                        xuser.write (((unsupported)).apply ((xUser)) ("foo@bar.com"))
                        (((unsupported)).apply (((xuser).xemail_user)) ("Subject here") ("This is a message") ("from@domain.com") ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xmail).xoutbox)))) (1))
                        xmessage.write (((unsupported)).apply (((xmail).xoutbox)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmessage).xsubject)) ("Subject here"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmessage).xbody)) ("This is a message"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmessage).xfrom_email)) ("from@domain.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmessage).xto)) ((((unsupported)).apply (((xuser).xemail)))))
                xtest_last_login_default.write
                  [xself]
                    memory > xuser1
                    memory > xuser2
                    seq > @
                      seq
                        xuser1.write (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("user1"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xuser1).xlast_login)))
                        xuser2.write (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("user2"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xuser2).xlast_login)))
                xtest_user_clean_normalize_email.write
                  [xself]
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply ((xUser)) ("user") ("foo") ("foo@BAR.com"))
                        bogusForceDataize.write ((((xuser).xclean)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xuser).xemail)) ("foo@bar.com"))
                xtest_user_double_save.write
                  [xself]
                    memory > xuser
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("user") ("foo"))
                        bogusForceDataize.write ((((xuser).xset_password)).apply ("bar"))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.contrib.auth.password_validation.password_changed"))) ((xpw_changed)))
                          seq
                            bogusForceDataize.write ((((xuser).xsave)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpw_changed).xcall_count)) (1))
                            bogusForceDataize.write ((((xuser).xsave)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpw_changed).xcall_count)) (1))
                xtest_check_password_upgrade.write
                  [xself]
                    memory > xhasher
                    memory > xold_iterations
                    memory > xuser
                    memory > xinitial_password
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("user") ("foo"))
                        xinitial_password.write ((xuser).xpassword)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser).xcheck_password)).apply ("foo"))))
                        xhasher.write (((xget_hasher)).apply ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((xhasher).xalgorithm)))
                        xold_iterations.write ((xhasher).xiterations)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xhasher).xiterations)) (((xold_iterations).add 1)))
                            (((unsupported)).apply (((((xmock).xpatch)).apply ("django.contrib.auth.password_validation.password_changed"))) ((xpw_changed)))
                              seq
                                bogusForceDataize.write ((((xuser).xcheck_password)).apply ("foo"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpw_changed).xcall_count)) (0))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xinitial_password)) (((xuser).xpassword)))
                          (((unsupported)).apply (((xhasher).xiterations)) ((xold_iterations)))
            (((unsupported)).apply ((xModelBackend)))
              xwith_perm.write
                [xself xperm xis_active xinclude_superusers xbackend xobj]
                  seq > @
                    (((unsupported)).apply)
                      ((((unsupported)).apply ((xobj)) ("None: is there a None literal in the EO language?")).and (((xobj).xusername).eq "charliebrown")).if
                        (((unsupported)).apply ((((unsupported)).apply ((((xUser).xobjects).xfilter)) (((xobj).xpk)))))
                      (((unsupported)).apply ((((unsupported)).apply ((((xUser).xobjects).xfilter)) ("charlie"))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    memory > xgroup1
                    memory > xcontent_type
                    memory > xgroup2
                    seq > @
                      (((unsupported)).apply)
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        (((unsupported)).apply (((xcls).xpermission)) ((((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test"))))
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("user 1") ("foo@example.com"))))
                        bogusForceDataize.write ((((((xcls).xuser1).xuser_permissions).xadd)).apply (((xcls).xpermission)))
                        xgroup1.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("group 1"))
                        bogusForceDataize.write (((((xgroup1).xpermissions).xadd)).apply (((xcls).xpermission)))
                        xgroup2.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("group 2"))
                        bogusForceDataize.write (((((xgroup2).xpermissions).xadd)).apply (((xcls).xpermission)))
                        (((unsupported)).apply (((xcls).xuser2)) ((((((xUser).xobjects).xcreate_user)).apply ("user 2") ("bar@example.com"))))
                        bogusForceDataize.write ((((((xcls).xuser2).xgroups).xadd)).apply ((xgroup1)) ((xgroup2)))
                        (((unsupported)).apply (((xcls).xuser_charlie)) ((((((xUser).xobjects).xcreate_user)).apply ("charlie") ("charlie@example.com"))))
                        (((unsupported)).apply (((xcls).xuser_charlie_b)) ((((((xUser).xobjects).xcreate_user)).apply ("charliebrown") ("charlie@brown.com"))))
                        (((unsupported)).apply (((xcls).xsuperuser)) ((((((xUser).xobjects).xcreate_superuser)).apply ("superuser") ("superuser@example.com") ("superpassword"))))
                        (((unsupported)).apply (((xcls).xinactive_user)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("inactive_user") ("baz@example.com") (FALSE))))
                        bogusForceDataize.write ((((((xcls).xinactive_user).xuser_permissions).xadd)).apply (((xcls).xpermission)))
                xtest_invalid_permission_name.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Permission name should be in the form app_label.permission_codename."
                        (((unsupported)).apply ((xperm)) ((((unsupported)).apply ("nodots") ("too.many.dots") ("...") (""))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xperm)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            bogusForceDataize.write (((((xUser).xobjects).xwith_perm)).apply ((xperm)))
                xtest_invalid_permission_type.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The `perm` argument must be a string or a permission instance."
                        (((unsupported)).apply ((xperm)) ((((unsupported)).apply ("auth.test") ((((xobject)).apply)) ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xperm)))) (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                            bogusForceDataize.write (((((xUser).xobjects).xwith_perm)).apply ((xperm)))
                xtest_invalid_backend_type.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "backend must be a dotted import path string (got %r)."
                        (((unsupported)).apply ((xbackend)) ((((unsupported)).apply ("auth_tests.CustomModelBackend") ((((xobject)).apply)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xbackend)))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xmsg).mod (xbackend))))))
                              (((unsupported)).apply ((((xUser).xobjects).xwith_perm)) ("auth.test") ((xbackend)))
                xtest_basic.write
                  [xself]
                    memory > xactive_users
                    memory > xtests
                    seq > @
                      seq
                        xactive_users.write (((unsupported)).apply (((xself).xuser1)) (((xself).xuser2)))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xactive_users)))) (((xself).xsuperuser)))))) ((((unsupported)).apply ((((unsupported)).apply ("obj") (((xself).xuser1)))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("is_active") (FALSE))) ((((unsupported)).apply (((xself).xinactive_user)))))) ((((unsupported)).apply ((((unsupported)).apply ("is_active") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xactive_users)))) (((xself).xsuperuser)) (((xself).xinactive_user)))))) ((((unsupported)).apply ((((unsupported)).apply ("include_superusers") (FALSE))) ((xactive_users)))) ((((unsupported)).apply ((((unsupported)).apply ("include_superusers") (FALSE) ("is_active") (FALSE))) ((((unsupported)).apply (((xself).xinactive_user)))))) ((((unsupported)).apply ((((unsupported)).apply ("include_superusers") (FALSE) ("is_active") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xactive_users)))) (((xself).xinactive_user)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((xexpected_users)))) ((xtests)))
                          (((unsupported)).apply ((xperm)) ((((unsupported)).apply ("auth.test") (((xself).xpermission)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xperm)) ((((unsupported)).apply ((xkwargs)))))))
                              bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xUser).xobjects).xwith_perm)).apply ((xperm)) ((((unsupported)).apply ((xkwargs)))))) ((xexpected_users)))
                xtest_backend_without_with_perm.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xUser).xobjects).xwith_perm)).apply ("auth.test"))) ((((unsupported)).apply)))
                xtest_nonexistent_permission.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xUser).xobjects).xwith_perm)).apply ("auth.perm"))) ((((unsupported)).apply (((xself).xsuperuser)))))
                xtest_nonexistent_backend.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                        (((unsupported)).apply ((((xUser).xobjects).xwith_perm)) ("auth.test") ("invalid.backend.CustomModelBackend"))
                xtest_custom_backend.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xperm)) ((((unsupported)).apply ("auth.test") (((xself).xpermission)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xperm)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xUser).xobjects).xwith_perm)).apply ((xperm)))) ((((unsupported)).apply (((xself).xuser_charlie)) (((xself).xuser_charlie_b)))))
                xtest_custom_backend_pass_obj.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xperm)) ((((unsupported)).apply ("auth.test") (((xself).xpermission)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xperm)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xUser).xobjects).xwith_perm)) ((xperm)) (((xself).xuser_charlie_b)))) ((((unsupported)).apply (((xself).xuser_charlie_b)))))
                xtest_multiple_backends.write
                  [xself]
                    memory > xbackend
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "You have multiple authentication backends configured and therefore must provide the `backend` argument."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xUser).xobjects).xwith_perm)).apply ("auth.test"))
                        xbackend.write "auth_tests.test_models.CustomModelBackend"
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((xUser).xobjects).xwith_perm)) ("auth.test") ((xbackend)))) ((((unsupported)).apply (((xself).xuser_charlie)) (((xself).xuser_charlie_b)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_builtin_user_isactive.write
                  [xself]
                    memory > xuser
                    memory > xuser_fetched
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply ((((xUser).xobjects).xcreate)) ("foo") ("foo@bar.com"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xuser).xis_active)) (TRUE))
                        (((unsupported)).apply (((xuser).xis_active)) (FALSE))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        xuser_fetched.write (((unsupported)).apply ((((xUser).xobjects).xget)) (((xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xuser_fetched).xis_active)))
                xtest_is_active_field_default.write
                  [xself]
                    memory > xuser
                    memory > xuser_fetched
                    memory > xUserModel
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xUserModel.write (((xget_user_model)).apply)
                        xuser.write (((unsupported)).apply ((xUserModel)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xuser).xis_active)) (TRUE))
                        (((unsupported)).apply (((xuser).xis_active)) (FALSE))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        xuser_fetched.write (((unsupported)).apply ((((xUserModel).x_default_manager).xget)) (((xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xuser_fetched).xis_active)) (TRUE))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xpost_save_listener.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsignals_count)) (1))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsignals_count)) (0))
                        (((unsupported)).apply (((xpost_save).xconnect)) (((xself).xpost_save_listener)) ((xUser)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xpost_save).xdisconnect)) (((xself).xpost_save_listener)) ((xUser)))
                xtest_create_user.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xUser).xobjects).xcreate_user)).apply ("JohnDoe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xsignals_count)) (1))
                xtest_create_superuser.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xUser).xobjects).xcreate_superuser)).apply ("JohnDoe") ("mail@example.com") ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xsignals_count)) (1))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xno_repr_msg.write "Django doesn't provide a DB representation for AnonymousUser."
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xuser)) ((((xAnonymousUser)).apply)))
                xtest_properties.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xuser).xusername)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_username)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xuser).xis_anonymous)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xuser).xis_authenticated)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xuser).xis_staff)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xuser).xis_active)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xuser).xis_superuser)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xuser).xgroups).xcount)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xuser).xuser_permissions).xcount)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_user_permissions)).apply)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_group_permissions)).apply)) ((((xset)).apply)))
                xtest_str.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xuser)))) ("AnonymousUser"))
                xtest_eq.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xuser)) ((((xAnonymousUser)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xself).xuser)) ((((xUser)).apply ("super") ("super@example.com") ("super"))))
                xtest_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply (((xself).xuser)))) (1))
                xtest_int.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Cannot cast AnonymousUser to int. Are you trying to use it in place of User?"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xint)).apply (((xself).xuser)))
                xtest_delete.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) (((xself).xno_repr_msg)))))
                        bogusForceDataize.write (((((xself).xuser).xdelete)).apply)
                xtest_save.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) (((xself).xno_repr_msg)))))
                        bogusForceDataize.write (((((xself).xuser).xsave)).apply)
                xtest_set_password.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) (((xself).xno_repr_msg)))))
                        bogusForceDataize.write (((((xself).xuser).xset_password)).apply ("password"))
                xtest_check_password.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) (((xself).xno_repr_msg)))))
                        bogusForceDataize.write (((((xself).xuser).xcheck_password)).apply ("password"))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_str.write
                [xself]
                  memory > xg
                  seq > @
                    seq
                      xg.write (((unsupported)).apply ((xGroup)) ("Users"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xg)))) ("Users"))
            (((unsupported)).apply ((xTestCase)))
              xtest_str.write
                [xself]
                  memory > xp
                  seq > @
                    seq
                      xp.write (((unsupported)).apply ((((xPermission).xobjects).xget)) ("view_customemailfield"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xp)))) ("auth_tests | custom email field | Can view custom email field"))