memory > xD
memory > xC
memory > xAttributeError
memory > xRuntimeError
memory > xstr
memory > xB
memory > xint
memory > xI
memory > xsys
memory > xS
memory > xrange
memory > xAbstractInstance
memory > xSuper
memory > xX
memory > xproperty
memory > xbool
memory > xissubclass
memory > xcnt
memory > xRecursionError
memory > xfloat
memory > xE
memory > xChild
memory > xunittest
memory > xobject
memory > xA
memory > xisinstance
memory > xAbstractClass
memory > xTypeError
memory > x__name__
[] > test_isinstance
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_subclass_tuple
        memory > x__call__
        memory > xblowstack
        memory > xtest_class_has_no_bases
        memory > xtest_issubclass_refcount_handling
        memory > xtest_infinite_recursion_in_bases
        memory > xgetclass
        memory > xtest_subclass_abstract
        memory > xgetbases
        memory > x__class__
        memory > xtest_dont_mask_non_attribute_error
        memory > xtest_isinstance_abstract
        memory > xtest_dont_mask_non_attribute_error_in_cls_arg
        memory > xtest_mask_attribute_error
        memory > x__bases__
        memory > xtest_subclass_normal
        memory > xtest_subclass_recursion_limit
        memory > xtest_mask_attribute_error_in_cls_arg
        memory > xtest_bases_raises_other_than_attribute_error
        memory > xtest_isinstance_recursion_limit
        memory > xAbstractSuper
        memory > xAbstractChild
        memory > xtest_isinstance_normal
        memory > x__init__
        memory > xtest_isinstance_dont_mask_non_attribute_error
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_class_has_no_bases.write
                  [xself]
                    memory > xgetclass
                    memory > x__class__2
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetclass.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            x__class__2.write (((xproperty)).apply ((xgetclass)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xI)).apply)) ((((xC)).apply)))))
                xtest_bases_raises_other_than_attribute_error.write
                  [xself]
                    memory > xgetclass
                    memory > x__class__
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetclass.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xE)).apply)))
                            x__class__.write (((xproperty)).apply ((xgetclass)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xisinstance)) ((((xI)).apply)) ((((xC)).apply)))
                xtest_dont_mask_non_attribute_error.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xisinstance)) ((((xI)).apply)) ((((xC)).apply)))
                xtest_mask_attribute_error.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xAttributeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xisinstance)) ((((xI)).apply)) ((((xC)).apply)))
                xtest_isinstance_dont_mask_non_attribute_error.write
                  [xself]
                    memory > xgetclass
                    memory > xc
                    memory > x__class__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetclass.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                            x__class__.write (((xproperty)).apply ((xgetclass)))
                        xc.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xisinstance)) ((xc)) ((xbool)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xisinstance)) ((xc)) ((xD)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_dont_mask_non_attribute_error.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        (((unsupported)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xissubclass)) ((((xC)).apply)) ((((xS)).apply)))
                xtest_mask_attribute_error.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xAttributeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        (((unsupported)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xissubclass)) ((((xC)).apply)) ((((xS)).apply)))
                xtest_dont_mask_non_attribute_error_in_cls_arg.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xRuntimeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xissubclass)) ((xB)) ((((xC)).apply)))
                xtest_mask_attribute_error_in_cls_arg.write
                  [xself]
                    memory > xgetbases
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            xgetbases.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xAttributeError)))
                            x__bases__.write (((xproperty)).apply ((xgetbases)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xissubclass)) ((xB)) ((((xC)).apply)))
            (((unsupported)).apply ((xobject)))
              seq
                x__init__.write
                  [xself xbases]
                    seq > @
                      (((unsupported)).apply (((xself).xbases)) ((xbases)))
                xgetbases.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xbases)))
                x__bases__.write (((xproperty)).apply ((xgetbases)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xAbstractInstance)).apply ((xself)))))
            (((unsupported)).apply ((xobject)))
              seq
                x__init__.write
                  [xself xklass]
                    seq > @
                      (((unsupported)).apply (((xself).xklass)) ((xklass)))
                xgetclass.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xklass)))
                x__class__.write (((xproperty)).apply ((xgetclass)))
            xAbstractSuper.write (((unsupported)).apply ((xAbstractClass)) ((((unsupported)).apply)))
            xAbstractChild.write (((unsupported)).apply ((xAbstractClass)) ((((unsupported)).apply ((xAbstractSuper)))))
            (((unsupported)).apply)
            (((unsupported)).apply ((xSuper)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_isinstance_normal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xisinstance)).apply ((((xSuper)).apply)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xSuper)).apply)) ((xChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xSuper)).apply)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xSuper)).apply)) ((xAbstractChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xisinstance)).apply ((((xChild)).apply)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xChild)).apply)) ((xAbstractSuper)))))
                xtest_isinstance_abstract.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xisinstance)).apply ((((xAbstractSuper)).apply)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xAbstractSuper)).apply)) ((xAbstractChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xAbstractSuper)).apply)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xAbstractSuper)).apply)) ((xChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xisinstance)).apply ((((xAbstractChild)).apply)) ((xAbstractChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xisinstance)).apply ((((xAbstractChild)).apply)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xAbstractChild)).apply)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xisinstance)).apply ((((xAbstractChild)).apply)) ((xChild)))))
                xtest_subclass_normal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xSuper)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xSuper)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xSuper)) ((xChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xChild)) ((xChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xChild)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xChild)) ((xAbstractSuper)))))
                xtest_subclass_abstract.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xAbstractSuper)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xAbstractSuper)) ((xAbstractChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xAbstractSuper)) ((xChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xAbstractChild)) ((xAbstractChild)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xAbstractChild)) ((xAbstractSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xAbstractChild)) ((xSuper)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xAbstractChild)) ((xChild)))))
                xtest_subclass_tuple.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xChild)) ((((unsupported)).apply ((xChild)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xChild)) ((((unsupported)).apply ((xSuper)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xSuper)) ((((unsupported)).apply ((xChild)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xSuper)) ((((unsupported)).apply ((xChild)) ((xSuper)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) ((((xissubclass)).apply ((xChild)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xSuper)) ((((unsupported)).apply ((xChild)) ((((unsupported)).apply ((xSuper)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xint)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xfloat)) ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((xstr)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xChild)) ((xstr)))))))))
                xtest_subclass_recursion_limit.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xblowstack)) ((xissubclass)) ((xstr)) ((xstr)))
                xtest_isinstance_recursion_limit.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xblowstack)) ((xisinstance)) ("") ((xstr)))
                xtest_issubclass_refcount_handling.write
                  [xself]
                    memory > x__init__
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__bases__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ((xint)))))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) (1))
                            x__bases__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((((xA)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) ((((xissubclass)).apply ((((xB)).apply)) ((xint)))))
                xtest_infinite_recursion_in_bases.write
                  [xself]
                    memory > x__bases__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__bases__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xself).x__bases__)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xissubclass)) ((((xX)).apply)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xissubclass)) ((xint)) ((((xX)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xisinstance)) (1) ((((xX)).apply)))
            xblowstack.write
              [xfxn xarg xcompare_to]
                memory > xtuple_arg
                seq > @
                  seq
                    xtuple_arg.write (((unsupported)).apply ((xcompare_to)))
                    (((unsupported)).apply ((xcnt)) ((((xrange)).apply ((((((xsys).xgetrecursionlimit)).apply).add 5)))))
                      seq
                        xtuple_arg.write (((unsupported)).apply ((xtuple_arg)))
                        bogusForceDataize.write (((xfxn)).apply ((xarg)) ((xtuple_arg)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)