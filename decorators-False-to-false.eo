memory > xcurrent_scheme
memory > xstr
memory > xurlparse
memory > xcurrent_netloc
memory > xredirect_to_login
memory > xargs
memory > xresolve_url
memory > xlogin_netloc
memory > xisinstance
memory > xfalse
memory > xu
memory > xPermissionDenied
memory > xsettings
memory > xkwargs
memory > xlogin_scheme
[] > decorators
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xpermission_required
        memory > xlogin_required
        memory > xuser_passes_test
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xuser_passes_test.write
              [xtest_func xlogin_url xredirect_field_name]
                memory > xdecorator
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xdecorator.write
                      [xview_func]
                        memory > x_wrapped_view
                        seq > @
                          seq
                            x_wrapped_view.write
                              [xrequest]
                                memory > xresolved_login_url
                                memory > xpath
                                seq > @
                                  (((unsupported)).apply)
                                    (((xtest_func)).apply (((xrequest).xuser))).if
                                      (((unsupported)).apply ((((xview_func)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                                    xpath.write ((((xrequest).xbuild_absolute_uri)).apply)
                                    xresolved_login_url.write (((xresolve_url)).apply (((xlogin_url).or ((xsettings).xLOGIN_URL))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xlogin_scheme)) ((xlogin_netloc)))) ((((unsupported)).apply ((((xurlparse)).apply ((xresolved_login_url)))) ((((unsupported)).apply (2))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xcurrent_scheme)) ((xcurrent_netloc)))) ((((unsupported)).apply ((((xurlparse)).apply ((xpath)))) ((((unsupported)).apply (2))))))
                                    ((((xlogin_scheme).not).or ((xlogin_scheme).eq (xcurrent_scheme))).and (((xlogin_netloc).not).or ((xlogin_netloc).eq (xcurrent_netloc)))).if
                                      xpath.write ((((xrequest).xget_full_path)).apply)
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((((xredirect_to_login)).apply ((xpath)) ((xresolved_login_url)) ((xredirect_field_name)))))
                            (((unsupported)).apply ((x_wrapped_view)))
                    (((unsupported)).apply ((xdecorator)))
            xlogin_required.write
              [xfunction xredirect_field_name xlogin_url]
                memory > xactual_decorator
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xactual_decorator.write (((unsupported)).apply ((xuser_passes_test)) ((((unsupported)).apply (((xu).xis_authenticated)))) ((xlogin_url)) ((xredirect_field_name)))
                    (xfunction).if
                      (((unsupported)).apply ((((xactual_decorator)).apply ((xfunction)))))
                    (((unsupported)).apply ((xactual_decorator)))
            xpermission_required.write
              [xperm xlogin_url xraise_exception]
                memory > xcheck_perms
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xcheck_perms.write
                      [xuser]
                        memory > xperms
                        seq > @
                          seq
                            (((xisinstance)).apply ((xperm)) ((xstr))).if
                              xperms.write (((unsupported)).apply ((xperm)))
                              xperms.write (xperm)
                            ((((xuser).xhas_perms)).apply ((xperms))).if
                              (((unsupported)).apply (TRUE))
                            (xraise_exception).if
                              (((unsupported)).apply ((xPermissionDenied)))
                            (((unsupported)).apply ((xfalse)))
                    (((unsupported)).apply ((((unsupported)).apply ((xuser_passes_test)) ((xcheck_perms)) ((xlogin_url)))))