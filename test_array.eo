memory > xOuterRef
memory > xTag
memory > xvalue
memory > xIntegerArrayModel
memory > xconnection
memory > xlookup
memory > xSplitForm
memory > xkwargs
memory > xCharArrayModel
memory > xcm
memory > xk
memory > xImportError
memory > xArrayField
memory > xforms
memory > xtimezone
memory > xc
memory > xexpected
memory > xSplitArrayWidget
memory > xdata
memory > xlist
memory > xdecimal
memory > xRawSQL
memory > xDateTimeArrayModel
memory > xuuid
memory > xstr
memory > xchecks
memory > xArrayFieldSubclass
memory > xsubwidget
memory > xSliceTransform
memory > xNullableIntegerArrayModel
memory > xFieldError
memory > xSimpleArrayField
memory > xvalidators
memory > xcall_command
memory > xdisplay
memory > xMyModel
memory > xCast
memory > xinitial
memory > xSplitArrayField
memory > xexceptions
memory > xIndexTransform
memory > xpath
memory > xtype
memory > xValue
memory > xOtherTypesArrayModel
memory > xcursor
memory > xTransactionTestCase
memory > xExists
memory > xNestedIntegerArrayModel
memory > xPostgreSQLSimpleTestCase
memory > xserializers
memory > xPostgreSQLWidgetTestCase
memory > xForm
memory > xargs
memory > xArraySubquery
memory > xenum
memory > xUpper
memory > xexpected_result
memory > xNumericRange
memory > xv
memory > xPostgreSQLTestCase
memory > xIntegrityError
memory > xTestEnum
memory > xname
memory > xunittest
memory > xArrayAgg
memory > xArrayEnumModel
memory > xmodels
memory > xPostgreSQLModel
memory > xjson
memory > xJSONObject
memory > xlen
memory > xisolate_apps
[] > test_array
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_delimiter_with_nesting
        memory > xtest_grouping_by_annotations_with_array_field_param
        memory > xtest_group_by_with_annotated_array_subquery
        memory > xtest_exact_uuids
        memory > xtest_exact_charfield
        memory > xtest_exact_decimals
        memory > xtest_index_nested
        memory > xtest_char
        memory > xtest_dumping
        memory > xtest_has_changed
        memory > xtest_remove_trailing_nulls_not_required
        memory > xtest_isnull
        memory > xtest_exact_datetimes
        memory > xtest_nested_array_mismatch
        memory > xtest_model_field_formfield_size
        memory > xtest_with_base_field_error_params
        memory > xtest_adding_arrayfield_with_index
        memory > xtest_annotated_array_subquery
        memory > xtest_unsupported_lookup
        memory > xtest_lt
        memory > xtest_min_length
        memory > xtest_invalid_integer
        memory > xtest_deconstruct_with_size
        memory > xtest_splitarraywidget_value_omitted_from_data
        memory > xtest_slice_nested
        memory > xtest_in_including_F_object
        memory > xtest_prepare_value
        memory > xtest_slice_transform_expression
        memory > xtest_contains_charfield
        memory > xtest_filter_by_array_subquery
        memory > xtest_annotated_array_subquery_with_json_objects
        memory > xtest_with_size
        memory > xtest_required_field
        memory > xtest_render_attrs
        memory > xtest_exact_times
        memory > xtest_valid_default
        memory > xtest_contained_by
        memory > xtest_gt
        memory > xtest_splitarrayfield_remove_trailing_nulls_has_changed
        memory > xtest_delimiter
        memory > xtest_to_python_fail
        memory > xtest_validate_fail_base_field_error_params
        memory > xtest_contains_including_expression
        memory > xtest_integers_passed_as_strings
        memory > xtest_get_context
        memory > xtest_annotated_ordered_array_subquery
        memory > xtest_index_used_on_nested_data
        memory > xtest_validators_fail
        memory > xtest_invalid_base_fields
        memory > xtest_overlap
        memory > xtest_get_field_display
        memory > xtest_null_handling
        memory > xtest_in_as_F_object
        memory > xtest_data
        memory > xtest_overlap_charfield
        memory > xtest_null_from_db_value_handling
        memory > xtest_exact_nested
        memory > xtest_remove_trailing_nulls
        memory > xtest_unbounded
        memory > xsetUpTestData
        memory > xtest_invalid_default
        memory > xtest_exact_dates
        memory > xtest_exact_with_expression
        memory > xtest_exact
        memory > xtest_index
        memory > xtest_tuples
        memory > xtest_get_field_display_nested_array
        memory > xtest_index_transform_expression
        memory > xtest_contains_subquery
        memory > xtest_invalid_char_length
        memory > xtest_field_checks
        memory > xtest_contained_by_including_F_object
        memory > xtest_deconstruct_args
        memory > xtest_in
        memory > xtest_required
        memory > xtest_splitarrayfield_has_changed
        memory > xtest_in_subquery
        memory > xtest_choices_tuple_list
        memory > xtest_adding_field_with_default
        memory > xtest_has_changed_empty
        memory > xtest_render
        memory > xtest_len_empty_array
        memory > xtest_overlap_charfield_including_expression
        memory > xtest_contained_by_charfield
        memory > xtest_model_field_choices
        memory > xtest_deconstruct
        memory > xtest_loading
        memory > xtest_nested_field_checks
        memory > xtest_contains
        memory > xtest_nested
        memory > xtest_dates
        memory > xtest_blank_true
        memory > xtest_value_omitted_from_data
        memory > xtest_subclass_deconstruct
        memory > xtest_max_length
        memory > xtest_model_field_formfield
        memory > xtest_lookups_autofield_array
        memory > xtest_with_validators
        memory > xtest_order_by_slice
        memory > xtest_usage_in_subquery
        memory > xtest_empty_list
        memory > xtest_already_converted_value
        memory > xtest_other_array_types
        memory > xtest_index_annotation
        memory > xtest_slice_annotation
        memory > xtest_model_set_on_base_field
        memory > xtest_rendering
        memory > xtest_integer
        memory > xtest_index_chained
        memory > xtest_nested_nullable_base_field
        memory > xtest_len
        memory > xtest_valid
        memory > xtest_exact_ip_addresses
        memory > xtest_icontains
        memory > xavailable_apps
        memory > xtest_default_null
        memory > xtest_valid_default_none
        memory > xtest_checkbox_get_context_attrs
        memory > xtest_validate_fail
        memory > xtest_exact_tags
        memory > xtest_slice
        memory > xtest_enum_lookup
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                seq
                  (((unsupported)).apply)
                  (((unsupported)).apply)
                  (((unsupported)).apply)
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)) ((((xisolate_apps)).apply ("postgres_tests"))))
              seq
                xtest_get_field_display.write
                  [xself]
                    memory > xfield
                    memory > xinstance
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) ((((unsupported)).apply (((xmodels).xCharField)) (16))) ((((unsupported)).apply ((((unsupported)).apply ("Media") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("cd"))) ("Audio"))))))) ((((unsupported)).apply ((((unsupported)).apply ("mp3") ("mp4"))) ("Digital"))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("cd"))) ("Audio"))) ((((unsupported)).apply ((((unsupported)).apply ("mp3") ("mp4"))) ("Digital"))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ("('a', 'b')"))) ((((unsupported)).apply ((((unsupported)).apply ("c") ("d"))) ("['c', 'd']"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xdisplay)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)) ((xdisplay)))))
                            seq
                              xinstance.write (((unsupported)).apply ((xMyModel)) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinstance).xget_field_display)).apply)) ((xdisplay)))
                xtest_get_field_display_nested_array.write
                  [xself]
                    memory > xfield
                    memory > xinstance
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) ((((xArrayField)).apply ((((unsupported)).apply (((xmodels).xCharField)) (16))))) ((((unsupported)).apply ((((unsupported)).apply ("Media") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("cd"))) ((((unsupported)).apply ("x"))))) ("Audio"))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("mp3"))) ((((unsupported)).apply ("mp4"))))) ("Digital"))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("cd"))) ((((unsupported)).apply ("x"))))) ("Audio"))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("mp3"))) ((((unsupported)).apply ("mp4"))))) ("Digital"))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("c"))))) ("(('a', 'b'), ('c',))"))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("c"))))) ("[['a', 'b'], ['c']]"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xdisplay)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)) ((xdisplay)))))
                            seq
                              xinstance.write (((unsupported)).apply ((xMyModel)) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinstance).xget_field_display)).apply)) ((xdisplay)))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xtest_integer.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xIntegerArrayModel)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xIntegerArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                xtest_char.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xCharArrayModel)) ((((unsupported)).apply ("hello") ("goodbye"))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xCharArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                xtest_dates.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xDateTimeArrayModel)) ((((unsupported)).apply (((((xtimezone).xnow)).apply)))) ((((unsupported)).apply ((((((((xtimezone).xnow)).apply).xdate)).apply)))) ((((unsupported)).apply ((((((((xtimezone).xnow)).apply).xtime)).apply)))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xDateTimeArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdatetimes)) (((xloaded).xdatetimes)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdates)) (((xloaded).xdates)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xtimes)) (((xloaded).xtimes)))
                xtest_tuples.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xIntegerArrayModel)) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xIntegerArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                xtest_integers_passed_as_strings.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xIntegerArrayModel)) ((((unsupported)).apply ("1"))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xIntegerArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xloaded).xfield)) ((((unsupported)).apply (1))))
                xtest_default_null.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((xNullableIntegerArrayModel)).apply)
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xget)) (((xinstance).xpk)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xloaded).xfield)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                xtest_null_handling.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xNullableIntegerArrayModel)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xNullableIntegerArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                        xinstance.write (((unsupported)).apply ((xIntegerArrayModel)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))))
                          bogusForceDataize.write ((((xinstance).xsave)).apply)
                xtest_nested.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xNestedIntegerArrayModel)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xNestedIntegerArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) (((xloaded).xfield)))
                xtest_other_array_types.write
                  [xself]
                    memory > xinstance
                    memory > xloaded
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xOtherTypesArrayModel)) ((((unsupported)).apply ("192.168.0.1") ("::1"))) ((((unsupported)).apply (((((xuuid).xuuid4)).apply)))) ((((unsupported)).apply (((((xdecimal).xDecimal)).apply (1.25))) (1.75))) ((((unsupported)).apply ((((xTag)).apply (1))) ((((xTag)).apply (2))) ((((xTag)).apply (3))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))) ((((unsupported)).apply ((((xNumericRange)).apply (10) (20))) ((((xNumericRange)).apply (30) (40))))) ((((unsupported)).apply ((((xNumericRange)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((xNumericRange)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xloaded.write (((((xOtherTypesArrayModel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xips)) (((xloaded).xips)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xuuids)) (((xloaded).xuuids)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xdecimals)) (((xloaded).xdecimals)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xtags)) (((xloaded).xtags)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xjson)) (((xloaded).xjson)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xint_ranges)) (((xloaded).xint_ranges)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xbigint_ranges)) (((xloaded).xbigint_ranges)))
                xtest_null_from_db_value_handling.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("192.168.0.1") ("::1"))) ((((unsupported)).apply (((((xuuid).xuuid4)).apply)))) ((((unsupported)).apply (((((xdecimal).xDecimal)).apply (1.25))) (1.75))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xinstance).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xinstance).xtags)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xjson)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xinstance).xint_ranges)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xinstance).xbigint_ranges)))
                xtest_model_set_on_base_field.write
                  [xself]
                    memory > xfield
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((xIntegerArrayModel)).apply)
                        xfield.write (((((xinstance).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfield).xmodel)) ((xIntegerArrayModel)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfield).xbase_field).xmodel)) ((xIntegerArrayModel)))
                xtest_nested_nullable_base_field.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield_nested)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xobjs)) ((((((xNullableIntegerArrayModel).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNullableIntegerArrayModel)) (1) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xNullableIntegerArrayModel)) (2) ((((unsupported)).apply (2))))) ((((unsupported)).apply ((xNullableIntegerArrayModel)) (3) ((((unsupported)).apply (2) (3))))) ((((unsupported)).apply ((xNullableIntegerArrayModel)) (4) ((((unsupported)).apply (20) (30) (40))))) ((((unsupported)).apply ((xNullableIntegerArrayModel)) (5) ("None: is there a None literal in the EO language?"))))))))
                xtest_empty_list.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply)))
                        xobj.write ((((((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((unsupported)).apply (((xmodels).xValue)) ((((unsupported)).apply)) ((((xArrayField)).apply (((((xmodels).xIntegerField)).apply))))))).xfilter)) (((((xmodels).xF)).apply ("empty_array")))).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xfield)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xempty_array)) ((((unsupported)).apply)))
                xtest_exact.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (1))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_exact_with_expression.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((xValue)).apply (1))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_exact_charfield.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xCharArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("text"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ((((unsupported)).apply ("text"))))) ((((unsupported)).apply ((xinstance)))))
                xtest_exact_nested.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))) ((((unsupported)).apply ((xinstance)))))
                xtest_isnull.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (TRUE))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply ((1.neg)))))))
                xtest_gt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (0))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (4))))))
                xtest_lt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_in.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (2))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_in_subquery.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (2) (3))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((xIntegerArrayModel).xobjects).xvalues_list)) ("field") (TRUE))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (3))))))
                xtest_in_including_F_object.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((unsupported)).apply (((((xmodels).xF)).apply ("id"))))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_in_as_F_object.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (((((xmodels).xF)).apply ("field"))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (4))))))
                xtest_contained_by.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2))))))
                xtest_contained_by_including_F_object.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (((((xmodels).xF)).apply ("order"))) (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3))))))
                xtest_contains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_contains_subquery.write
                  [xself]
                    memory > xinner_qs
                    seq > @
                      seq
                        (((unsupported)).apply ((((xIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (2) (3))))
                        xinner_qs.write (((unsupported)).apply ((((xIntegerArrayModel).xobjects).xvalues_list)) ("field") (TRUE))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((xinner_qs)) ((((unsupported)).apply (1))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (3))))))
                        xinner_qs.write (((unsupported)).apply ((((xIntegerArrayModel).xobjects).xfilter)) ((((xOuterRef)).apply ("field"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableIntegerArrayModel).xobjects).xfilter)).apply ((((xExists)).apply ((xinner_qs)))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_contains_including_expression.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2) (((((xValue)).apply (6)).div (((xValue)).apply (2)))))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (3))))))
                xtest_icontains.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xCharArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("FoO"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ("foo"))) ((((unsupported)).apply ((xinstance)))))
                xtest_contains_charfield.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ((((unsupported)).apply ("text"))))) ((((unsupported)).apply)))
                xtest_contained_by_charfield.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ((((unsupported)).apply ("text"))))) ((((unsupported)).apply)))
                xtest_overlap_charfield.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ((((unsupported)).apply ("text"))))) ((((unsupported)).apply)))
                xtest_overlap_charfield_including_expression.write
                  [xself]
                    memory > xobj_1
                    memory > xobj_2
                    seq > @
                      seq
                        xobj_1.write (((unsupported)).apply ((((xCharArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("TEXT") ("lower text"))))
                        xobj_2.write (((unsupported)).apply ((((xCharArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("lower text") ("TEXT"))))
                        (((unsupported)).apply ((((xCharArrayModel).xobjects).xcreate)) ((((unsupported)).apply ("lower text") ("text"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xCharArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((xUpper)).apply ((((xValue)).apply ("text"))))) ("other"))))) ((((unsupported)).apply ((xobj_1)) ((xobj_2)))))
                xtest_lookups_autofield_array.write
                  [xself]
                    memory > xqs
                    memory > xtests
                    seq > @
                      seq
                        xqs.write ((((((unsupported)).apply ((((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (FALSE)).xvalues)).apply ("field__0")).xannotate)) ((((xArrayAgg)).apply ("id")))).xorder_by)).apply ("field__0"))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("contained_by") ((((unsupported)).apply (((((unsupported)).apply (((xself).xobjs)) (1)).xpk)) (((((unsupported)).apply (((xself).xobjs)) (2)).xpk)) (0))) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("contains") ((((unsupported)).apply (((((unsupported)).apply (((xself).xobjs)) (2)).xpk)))) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("exact") ((((unsupported)).apply (((((unsupported)).apply (((xself).xobjs)) (3)).xpk)))) ((((unsupported)).apply (20))))) ((((unsupported)).apply ("overlap") ((((unsupported)).apply (((((unsupported)).apply (((xself).xobjs)) (1)).xpk)) (((((unsupported)).apply (((xself).xobjs)) (3)).xpk)))) ((((unsupported)).apply (2) (20))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((((xqs).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("arrayagg__".add (xlookup))) ((xvalue))))))).xvalues_list)) ("field__0") (TRUE))) ((xexpected)))
                xtest_index.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (2))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (3))))))
                xtest_index_chained.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (3))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (0) (3))))))
                xtest_index_nested.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xfilter)) (1))) ((((unsupported)).apply ((xinstance)))))
                xtest_index_used_on_nested_data.write
                  [xself]
                    memory > xinstance
                    seq > @
                      (((unsupported)).apply)
                        xinstance.write (((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xinstance)))))
                xtest_index_transform_expression.write
                  [xself]
                    memory > xexpr
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply ("string_to_array(%s, ';')") ((((unsupported)).apply ("1;2"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((xCast)) ((((xIndexTransform)).apply (1) (((xmodels).xIntegerField)) ((xexpr)))) (((((xmodels).xIntegerField)).apply)))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1))))))
                xtest_index_annotation.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) (((((xmodels).xF)).apply ("field__1"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xqs).xvalues_list)) ("second") (TRUE))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (3) (30))))
                xtest_overlap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (0) (3))))))
                xtest_len.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (2))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (0) (3))))))
                xtest_len_empty_array.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (0))) ((((unsupported)).apply ((xobj)))))
                xtest_slice.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (3))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2) (3))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (3))))))
                xtest_order_by_slice.write
                  [xself]
                    memory > xmore_objs
                    seq > @
                      seq
                        xmore_objs.write (((unsupported)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (1) (637))))) ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (2) (1))))) ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (3) ((98123.neg)))))) ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply (4) (2))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableIntegerArrayModel).xobjects).xorder_by)).apply ("field__1"))) ((((unsupported)).apply ((((unsupported)).apply ((xmore_objs)) (2))) ((((unsupported)).apply ((xmore_objs)) (1))) ((((unsupported)).apply ((xmore_objs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (2))) ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply ((xmore_objs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (4))) ((((unsupported)).apply (((xself).xobjs)) (1))) ((((unsupported)).apply (((xself).xobjs)) (0))))))
                xtest_slice_nested.write
                  [xself]
                    memory > xinstance
                    seq > @
                      (((unsupported)).apply)
                        xinstance.write (((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNestedIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xinstance)))))
                xtest_slice_transform_expression.write
                  [xself]
                    memory > xexpr
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply ("string_to_array(%s, ';')") ((((unsupported)).apply ("9;2;3"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((xSliceTransform)).apply (2) (3) ((xexpr)))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (3))))))
                xtest_slice_annotation.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) (((((xmodels).xF)).apply ("field__0_2"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((xqs).xvalues_list)) ("first_two") (TRUE))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (1))) ((((unsupported)).apply (2))) ((((unsupported)).apply (2) (3))) ((((unsupported)).apply (20) (30))))))
                xtest_usage_in_subquery.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (3))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))))))
                xtest_enum_lookup.write
                  [xself]
                    memory > xVALUE_1
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply (((xenum).xEnum)))
                          xVALUE_1.write "value_1"
                        xinstance.write (((unsupported)).apply ((((xArrayEnumModel).xobjects).xcreate)) ((((unsupported)).apply (((xTestEnum).xVALUE_1)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xArrayEnumModel).xobjects).xfilter)) ((((unsupported)).apply (((xTestEnum).xVALUE_1)))))) ((((unsupported)).apply ((xinstance)))))
                xtest_unsupported_lookup.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Unsupported lookup '0_bar' for ArrayField or join on the field not permitted."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2))))))
                        xmsg.write "Unsupported lookup '0bar' for ArrayField or join on the field not permitted."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xFieldError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) ((((unsupported)).apply (2))))))
                xtest_grouping_by_annotations_with_array_field_param.write
                  [xself]
                    memory > xvalue
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply (((xmodels).xValue)) ((((unsupported)).apply (1))) ((((xArrayField)).apply (((((xmodels).xIntegerField)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((unsupported)).apply ((((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((unsupported)).apply (((xmodels).xFunc)) ((xvalue)) (1) ("ARRAY_LENGTH") (((((xmodels).xIntegerField)).apply))))).xvalues)).apply ("array_length")).xannotate)) (((((xmodels).xCount)).apply ("pk")))).xget)).apply)) ("array_length"))) (1))
                xtest_filter_by_array_subquery.write
                  [xself]
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write ((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xfilter)) (((((xmodels).xOuterRef)).apply ("field__len")))).xvalues)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xalias)) ((((xArraySubquery)).apply ((xinner_qs))))).xfilter)) (1))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (0) (2))))))
                xtest_annotated_array_subquery.write
                  [xself]
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write ((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xexclude)) (((((xmodels).xOuterRef)).apply ("pk")))).xvalues)).apply ("order"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((xArraySubquery)).apply ((xinner_qs))))).xget)) (1)).xsibling_ids)) ((((unsupported)).apply (2) (3) (4) (5))))
                xtest_group_by_with_annotated_array_subquery.write
                  [xself]
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write ((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xexclude)) (((((xmodels).xOuterRef)).apply ("pk")))).xvalues)).apply ("order"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((xArraySubquery)).apply ((xinner_qs)))) (((((xmodels).xMax)).apply ("sibling_ids__len")))).xvalues_list)) ("sibling_count") (TRUE))) (((((unsupported)).apply (((((xlen)).apply (((xself).xobjs))).sub 1))).mul (((xlen)).apply (((xself).xobjs))))))
                xtest_annotated_ordered_array_subquery.write
                  [xself]
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write ((((((((xNullableIntegerArrayModel).xobjects).xorder_by)).apply ("-order")).xvalues)).apply ("order"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((xArraySubquery)).apply ((xinner_qs))))).xfirst)).apply).xids)) ((((unsupported)).apply (5) (4) (3) (2) (1))))
                xtest_annotated_array_subquery_with_json_objects.write
                  [xself]
                    memory > xsiblings_json
                    memory > xinner_qs
                    seq > @
                      seq
                        xinner_qs.write (((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xexclude)) (((((xmodels).xOuterRef)).apply ("pk")))).xvalues)) ((((unsupported)).apply ((xJSONObject)) ("order") ("field"))))
                        xsiblings_json.write (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableIntegerArrayModel).xobjects).xannotate)) ((((xArraySubquery)).apply ((xinner_qs))))).xvalues_list)) ("siblings_json") (TRUE)).xget)) (1))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsiblings_json)) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (2))) ("order") (2))) ((((unsupported)).apply ("field") ((((unsupported)).apply (2) (3))) ("order") (3))) ((((unsupported)).apply ("field") ((((unsupported)).apply (20) (30) (40))) ("order") (4))) ((((unsupported)).apply ("field") ("None: is there a None literal in the EO language?") ("order") (5))))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        xnow.write ((((xtimezone).xnow)).apply)
                        (((unsupported)).apply (((xcls).xdatetimes)) ((((unsupported)).apply ((xnow)))))
                        (((unsupported)).apply (((xcls).xdates)) ((((unsupported)).apply (((((xnow).xdate)).apply)))))
                        (((unsupported)).apply (((xcls).xtimes)) ((((unsupported)).apply (((((xnow).xtime)).apply)))))
                        (((unsupported)).apply (((xcls).xobjs)) ((((unsupported)).apply ((((unsupported)).apply ((((xDateTimeArrayModel).xobjects).xcreate)) (((xcls).xdatetimes)) (((xcls).xdates)) (((xcls).xtimes)))))))
                xtest_exact_datetimes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xDateTimeArrayModel).xobjects).xfilter)) (((xself).xdatetimes)))) (((xself).xobjs)))
                xtest_exact_dates.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xDateTimeArrayModel).xobjects).xfilter)) (((xself).xdates)))) (((xself).xobjs)))
                xtest_exact_times.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xDateTimeArrayModel).xobjects).xfilter)) (((xself).xtimes)))) (((xself).xobjs)))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xips)) ((((unsupported)).apply ("192.168.0.1") ("::1"))))
                        (((unsupported)).apply (((xcls).xuuids)) ((((unsupported)).apply (((((xuuid).xuuid4)).apply)))))
                        (((unsupported)).apply (((xcls).xdecimals)) ((((unsupported)).apply (((((xdecimal).xDecimal)).apply (1.25))) (1.75))))
                        (((unsupported)).apply (((xcls).xtags)) ((((unsupported)).apply ((((xTag)).apply (1))) ((((xTag)).apply (2))) ((((xTag)).apply (3))))))
                        (((unsupported)).apply (((xcls).xobjs)) ((((unsupported)).apply ((((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xcreate)) (((xcls).xips)) (((xcls).xuuids)) (((xcls).xdecimals)) (((xcls).xtags)))))))
                xtest_exact_ip_addresses.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xfilter)) (((xself).xips)))) (((xself).xobjs)))
                xtest_exact_uuids.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xfilter)) (((xself).xuuids)))) (((xself).xobjs)))
                xtest_exact_decimals.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xfilter)) (((xself).xdecimals)))) (((xself).xobjs)))
                xtest_exact_tags.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xOtherTypesArrayModel).xobjects).xfilter)) (((xself).xtags)))) (((xself).xobjs)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)) ((((xisolate_apps)).apply ("postgres_tests"))))
              seq
                xtest_field_checks.write
                  [xself]
                    memory > xfield
                    memory > xerrors
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((xArrayField)).apply (((((xmodels).xCharField)).apply)))
                        xmodel.write (((xMyModel)).apply)
                        xerrors.write ((((xmodel).xcheck)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xerrors)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xerrors)) (0)).xid)) ("postgres.E001"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("max_length") (((((unsupported)).apply ((xerrors)) (0)).xmsg)))
                xtest_invalid_base_fields.write
                  [xself]
                    memory > xfield
                    memory > xerrors
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((xArrayField)).apply (((((xmodels).xManyToManyField)).apply ("postgres_tests.IntegerArrayModel"))))
                        xmodel.write (((xMyModel)).apply)
                        xerrors.write ((((xmodel).xcheck)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xerrors)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xerrors)) (0)).xid)) ("postgres.E002"))
                xtest_invalid_default.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) (((((xmodels).xIntegerField)).apply)) ((((unsupported)).apply)))
                        xmodel.write (((xMyModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmodel).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xWarning)) ("ArrayField default should be a callable instead of an instance so that it's not shared between all field instances.") ("Use a callable instead, e.g., use `list` instead of `[]`.") ((((((xMyModel).x_meta).xget_field)).apply ("field"))) ("fields.E010"))))))
                xtest_valid_default.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) (((((xmodels).xIntegerField)).apply)) ((xlist)))
                        xmodel.write (((xMyModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmodel).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_valid_default_none.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) (((((xmodels).xIntegerField)).apply)) ("None: is there a None literal in the EO language?"))
                        xmodel.write (((xMyModel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmodel).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_nested_field_checks.write
                  [xself]
                    memory > xfield
                    memory > xerrors
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((xArrayField)).apply ((((xArrayField)).apply (((((xmodels).xCharField)).apply)))))
                        xmodel.write (((xMyModel)).apply)
                        xerrors.write ((((xmodel).xcheck)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xerrors)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xerrors)) (0)).xid)) ("postgres.E001"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("max_length") (((((unsupported)).apply ((xerrors)) (0)).xmsg)))
                xtest_choices_tuple_list.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xPostgreSQLModel)))
                          xfield.write (((unsupported)).apply ((xArrayField)) ((((unsupported)).apply (((xmodels).xCharField)) (16))) ((((unsupported)).apply ((((unsupported)).apply ("Media") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("cd"))) ("Audio"))) ((((unsupported)).apply ((((unsupported)).apply ("vhs") ("dvd"))) ("Video"))))))) ((((unsupported)).apply ((((unsupported)).apply ("mp3") ("mp4"))) ("Digital"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xMyModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTransactionTestCase)) (((((xunittest).xskipUnless)).apply ((((xconnection).xvendor).eq "postgresql")) ("PostgreSQL specific tests"))))
              seq
                xavailable_apps.write (((unsupported)).apply ("postgres_tests"))
                xtest_deconstruct.write
                  [xself]
                    memory > xfield
                    memory > xnew
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply (((((xmodels).xIntegerField)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        xnew.write (((xArrayField)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xnew).xbase_field)))) ((((xtype)).apply (((xfield).xbase_field)))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xnew).xbase_field)) (((xfield).xbase_field)))
                xtest_deconstruct_with_size.write
                  [xself]
                    memory > xfield
                    memory > xnew
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xArrayField)) (((((xmodels).xIntegerField)).apply)) (3))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        xnew.write (((xArrayField)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew).xsize)) (((xfield).xsize)))
                xtest_deconstruct_args.write
                  [xself]
                    memory > xfield
                    memory > xnew
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xCharField)) (20))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        xnew.write (((xArrayField)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnew).xbase_field).xmax_length)) ((((xfield).xbase_field).xmax_length)))
                xtest_subclass_deconstruct.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply (((((xmodels).xIntegerField)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.fields.ArrayField"))
                        xfield.write (((xArrayFieldSubclass)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("postgres_tests.models.ArrayFieldSubclass"))
                xtest_adding_field_with_default.write
                  [xself]
                    memory > xtable_name
                    seq > @
                      (((unsupported)).apply)
                        xtable_name.write "postgres_tests_integerarraydefaultmodel"
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xtable_name)) ((((((xconnection).xintrospection).xtable_names)).apply ((xcursor)))))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("postgres_tests") (0))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xtable_name)) ((((((xconnection).xintrospection).xtable_names)).apply ((xcursor)))))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("postgres_tests") ("zero") (0))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xtable_name)) ((((((xconnection).xintrospection).xtable_names)).apply ((xcursor)))))
                xtest_adding_arrayfield_with_index.write
                  [xself]
                    memory > xlike_constraint_columns_list
                    memory > xtable_name
                    memory > xindexes
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtable_name.write "postgres_tests_chartextarrayindexmodel"
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("postgres_tests") (0))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          xlike_constraint_columns_list.write (((unsupported)).apply ((((unsupported)).apply ((xv)) ("columns"))) ((((unsupported)).apply ((xk)) ((xv)))) ((((xlist)).apply (((((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable_name))).xitems)).apply)))) (((((xk).xendswith)).apply ("_like"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlike_constraint_columns_list)) ((((unsupported)).apply ((((unsupported)).apply ("char2"))))))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          xindexes.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xc)) ("columns"))) (0))) ((xc)) (((((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable_name))).xvalues)).apply)) (((((unsupported)).apply ((xc)) ("index")).and ((((xlen)).apply ((((unsupported)).apply ((xc)) ("columns")))).eq 1))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("char") ((xindexes)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("char2") ((xindexes)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("text") ((xindexes)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("postgres_tests") ("zero") (0))
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xtable_name)) ((((((xconnection).xintrospection).xtable_names)).apply ((xcursor)))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_data.write "[{\"fields\": {\"field\": \"[\\\"1\\\", \\\"2\\\", null]\"}, \"model\": \"postgres_tests.integerarraymodel\", \"pk\": null}]"
                xtest_dumping.write
                  [xself]
                    memory > xinstance
                    memory > xdata
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply ((xIntegerArrayModel)) ((((unsupported)).apply (1) (2) ("None: is there a None literal in the EO language?"))))
                        xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xjson).xloads)).apply ((xdata)))) (((((xjson).xloads)).apply (((xself).xtest_data)))))
                xtest_loading.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") (((xself).xtest_data)))))) (0)).xobject)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xfield)) ((((unsupported)).apply (1) (2) ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_unbounded.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply (((((xmodels).xIntegerField)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("item_invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcm).xexception).xmessage).mod (((xcm).xexception).xparams))) ("Item 2 in the array did not validate: This field cannot be null."))
                xtest_blank_true.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (TRUE))))
                        bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                xtest_with_size.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xArrayField)) (((((xmodels).xIntegerField)).apply)) (3))
                        bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) (2) (3))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) (2) (3) (4))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("List contains 4 items, it should contain no more than 3."))
                xtest_nested_array_mismatch.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply ((((xArrayField)).apply (((((xmodels).xIntegerField)).apply)))))
                        bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4) (5))))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xcode)) ("nested_array_mismatch"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Nested arrays must have the same length."))
                xtest_with_base_field_error_params.write
                  [xself]
                    memory > xfield
                    memory > xexception
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xCharField)) (2))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("abc"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xcm).xexception).xerror_list)))) (1))
                        xexception.write (((unsupported)).apply ((((xcm).xexception).xerror_list)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xmessage)) ("Item 1 in the array did not validate: Ensure this value has at most 2 characters (it has 3)."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xcode)) ("item_invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xparams)) ((((unsupported)).apply ("nth") (1) ("value") ("abc") ("limit_value") (2) ("show_value") (3))))
                xtest_with_validators.write
                  [xself]
                    memory > xfield
                    memory > xexception
                    seq > @
                      seq
                        xfield.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xIntegerField)) ((((unsupported)).apply (((((xvalidators).xMinValueValidator)).apply (1))))))))
                        bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (1) (2))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply (0))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xcm).xexception).xerror_list)))) (1))
                        xexception.write (((unsupported)).apply ((((xcm).xexception).xerror_list)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xmessage)) ("Item 1 in the array did not validate: Ensure this value is greater than or equal to 1."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xcode)) ("item_invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexception).xparams)) ((((unsupported)).apply ("nth") (1) ("value") (0) ("limit_value") (1) ("show_value") (0))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_valid.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xCharField)).apply)))
                        xvalue.write ((((xfield).xclean)).apply ("a,b,c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("a") ("b") ("c"))))
                xtest_to_python_fail.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xIntegerField)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("a,b,9"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Item 1 in the array did not validate: Enter a whole number."))
                xtest_validate_fail.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply ((((unsupported)).apply (((xforms).xCharField)) (TRUE))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("a,b,"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Item 3 in the array did not validate: This field is required."))
                xtest_validate_fail_base_field_error_params.write
                  [xself]
                    memory > xfirst_error
                    memory > xfield
                    memory > xerrors
                    memory > xsecond_error
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply ((((unsupported)).apply (((xforms).xCharField)) (2))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("abc,c,defg"))
                        xerrors.write (((xcm).xexception).xerror_list)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xerrors)))) (2))
                        xfirst_error.write (((unsupported)).apply ((xerrors)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfirst_error).xmessage)) ("Item 1 in the array did not validate: Ensure this value has at most 2 characters (it has 3)."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfirst_error).xcode)) ("item_invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfirst_error).xparams)) ((((unsupported)).apply ("nth") (1) ("value") ("abc") ("limit_value") (2) ("show_value") (3))))
                        xsecond_error.write (((unsupported)).apply ((xerrors)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsecond_error).xmessage)) ("Item 3 in the array did not validate: Ensure this value has at most 2 characters (it has 4)."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsecond_error).xcode)) ("item_invalid"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsecond_error).xparams)) ((((unsupported)).apply ("nth") (3) ("value") ("defg") ("limit_value") (2) ("show_value") (4))))
                xtest_validators_fail.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xRegexField)).apply ("[a-e]{2}"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("a,bc,de"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("Item 1 in the array did not validate: Enter a valid value."))
                xtest_delimiter.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSimpleArrayField)) (((((xforms).xCharField)).apply)) ("|"))
                        xvalue.write ((((xfield).xclean)).apply ("a|b|c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("a") ("b") ("c"))))
                xtest_delimiter_with_nesting.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSimpleArrayField)) ((((xSimpleArrayField)).apply (((((xforms).xCharField)).apply)))) ("|"))
                        xvalue.write ((((xfield).xclean)).apply ("a,b|c,d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("c") ("d"))))))
                xtest_prepare_value.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xCharField)).apply)))
                        xvalue.write ((((xfield).xprepare_value)).apply ((((unsupported)).apply ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ("a,b,c"))
                xtest_max_length.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSimpleArrayField)) (((((xforms).xCharField)).apply)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("a,b,c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("List contains 3 items, it should contain no more than 2."))
                xtest_min_length.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSimpleArrayField)) (((((xforms).xCharField)).apply)) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ("a,b,c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("List contains 3 items, it should contain no fewer than 4."))
                xtest_required.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSimpleArrayField)) (((((xforms).xCharField)).apply)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xmessages)) (0))) ("This field is required."))
                xtest_model_field_formfield.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xCharField)) (27))))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) ((xSimpleArrayField)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xform_field).xbase_field)) (((xforms).xCharField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xform_field).xbase_field).xmax_length)) (27))
                xtest_model_field_formfield_size.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((unsupported)).apply ((xArrayField)) ((((unsupported)).apply (((xmodels).xCharField)) (27))) (4))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) ((xSimpleArrayField)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform_field).xmax_length)) (4))
                xtest_model_field_choices.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((xArrayField)).apply ((((unsupported)).apply (((xmodels).xIntegerField)) ((((unsupported)).apply ((((unsupported)).apply (1) ("A"))) ((((unsupported)).apply (2) ("B"))))))))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xform_field).xclean)).apply ("1,2"))) ((((unsupported)).apply (1) (2))))
                xtest_already_converted_value.write
                  [xself]
                    memory > xvals
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xCharField)).apply)))
                        xvals.write (((unsupported)).apply ("a") ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xclean)).apply ((xvals)))) ((xvals)))
                xtest_has_changed.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xIntegerField)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply (1) (2))) ("1,2"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply (1) (2))) ("1,2,3"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply (1) (2))) ("a,b"))) (TRUE))
                xtest_has_changed_empty.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((xSimpleArrayField)).apply (((((xforms).xCharField)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ("None: is there a None literal in the EO language?") (""))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xfield).xhas_changed)).apply ((((unsupported)).apply)) (""))) (FALSE))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              seq
                xtest_valid.write
                  [xself]
                    memory > xform
                    memory > xarray
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xCharField)).apply)) (3))
                        xdata.write (((unsupported)).apply ("array_0") ("a") ("array_1") ("b") ("array_2") ("c"))
                        xform.write (((xSplitForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("array") ((((unsupported)).apply ("a") ("b") ("c"))))))
                xtest_required.write
                  [xself]
                    memory > xform
                    memory > xarray
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xCharField)).apply)) (TRUE) (3))
                        xdata.write (((unsupported)).apply ("array_0") ("") ("array_1") ("") ("array_2") (""))
                        xform.write (((xSplitForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("array") ((((unsupported)).apply ("This field is required."))))))
                xtest_remove_trailing_nulls.write
                  [xself]
                    memory > xform
                    memory > xarray
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) ((((unsupported)).apply (((xforms).xCharField)) (FALSE))) (5) (TRUE))
                        xdata.write (((unsupported)).apply ("array_0") ("a") ("array_1") ("") ("array_2") ("b") ("array_3") ("") ("array_4") (""))
                        xform.write (((xSplitForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)) (((xform).xerrors)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("array") ((((unsupported)).apply ("a") ("") ("b"))))))
                xtest_remove_trailing_nulls_not_required.write
                  [xself]
                    memory > xform
                    memory > xarray
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) ((((unsupported)).apply (((xforms).xCharField)) (FALSE))) (2) (TRUE) (FALSE))
                        xdata.write (((unsupported)).apply ("array_0") ("") ("array_1") (""))
                        xform.write (((xSplitForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xcleaned_data)) ((((unsupported)).apply ("array") ((((unsupported)).apply)))))
                xtest_required_field.write
                  [xself]
                    memory > xform
                    memory > xarray
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xCharField)).apply)) (3))
                        xdata.write (((unsupported)).apply ("array_0") ("a") ("array_1") ("b") ("array_2") (""))
                        xform.write (((xSplitForm)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xform).xis_valid)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply ("array") ((((unsupported)).apply ("Item 3 in the array did not validate: This field is required."))))))
                xtest_invalid_integer.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Item 2 in the array did not validate: Ensure this value is less than or equal to 100."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply (((xexceptions).xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xSplitArrayField)) ((((unsupported)).apply (((xforms).xIntegerField)) (100))) (2)).xclean)).apply ((((unsupported)).apply (0) (101))))
                xtest_rendering.write
                  [xself]
                    memory > xarray
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xforms).xForm)))
                          xarray.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xCharField)).apply)) (3))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xSplitForm)).apply)))) ((((unsupported)).apply)))
                xtest_invalid_char_length.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply ((xSplitArrayField)) ((((unsupported)).apply (((xforms).xCharField)) (2))) (3))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexceptions).xValidationError)))) ((xcm)))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("abc") ("c") ("defg"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xmessages)) ((((unsupported)).apply ("Item 1 in the array did not validate: Ensure this value has at most 2 characters (it has 3).") ("Item 3 in the array did not validate: Ensure this value has at most 2 characters (it has 4)."))))
                xtest_splitarraywidget_value_omitted_from_data.write
                  [xself]
                    memory > xfield
                    memory > xfields
                    memory > xform
                    memory > xobj
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xModelForm)))
                          seq
                            xfield.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xIntegerField)).apply)) (FALSE) (2))
                            (((unsupported)).apply)
                              seq
                                xmodel.write (xIntegerArrayModel)
                                xfields.write (((unsupported)).apply ("field"))
                        xform.write (((xForm)).apply ((((unsupported)).apply ("field_0") ("1") ("field_1") ("2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xform).xerrors)) ((((unsupported)).apply)))
                        xobj.write (((unsupported)).apply (((xform).xsave)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xfield)) ((((unsupported)).apply (1) (2))))
                xtest_splitarrayfield_has_changed.write
                  [xself]
                    memory > xfield
                    memory > xfields
                    memory > xform
                    memory > xobj
                    memory > xmodel
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xModelForm)))
                          seq
                            xfield.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xIntegerField)).apply)) (FALSE) (2))
                            (((unsupported)).apply)
                              seq
                                xmodel.write (xIntegerArrayModel)
                                xfields.write (((unsupported)).apply ("field"))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("field_0") ("1") ("field_1") ("0"))) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ("field_0") ("1") ("field_1") ("2"))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ("field_0") ("a") ("field_1") ("b"))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xinitial)) ((xdata)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xinitial)) ((xdata)))))
                            seq
                              xobj.write (((xIntegerArrayModel)).apply ((((unsupported)).apply ((xinitial)))))
                              xform.write (((unsupported)).apply ((xForm)) ((xdata)) ((xobj)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply (((((xform).xhas_changed)).apply)) ((xexpected_result)))
                xtest_splitarrayfield_remove_trailing_nulls_has_changed.write
                  [xself]
                    memory > xfield
                    memory > xfields
                    memory > xform
                    memory > xobj
                    memory > xmodel
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xModelForm)))
                          seq
                            xfield.write (((unsupported)).apply ((xSplitArrayField)) (((((xforms).xIntegerField)).apply)) (FALSE) (2) (TRUE))
                            (((unsupported)).apply)
                              seq
                                xmodel.write (xIntegerArrayModel)
                                xfields.write (((unsupported)).apply ("field"))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply)))) ((((unsupported)).apply ("field_0") ("") ("field_1") (""))) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply ("field") ((((unsupported)).apply (1))))) ((((unsupported)).apply ("field_0") ("1") ("field_1") (""))) (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xinitial)) ((xdata)) ((xexpected_result)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xinitial)) ((xdata)))))
                            seq
                              xobj.write (((xIntegerArrayModel)).apply ((((unsupported)).apply ((xinitial)))))
                              xform.write (((unsupported)).apply ((xForm)) ((xdata)) ((xobj)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply (((((xform).xhas_changed)).apply)) ((xexpected_result)))
            (((unsupported)).apply ((xPostgreSQLWidgetTestCase)))
              seq
                xtest_get_context.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xSplitArrayWidget)) (((((xforms).xTextInput)).apply)) (2)).xget_context)).apply ("name") ((((unsupported)).apply ("val1") ("val2"))))) ((((unsupported)).apply ("widget") ((((unsupported)).apply ("name") ("name") ("is_hidden") (FALSE) ("required") (FALSE) ("value") ("['val1', 'val2']") ("attrs") ((((unsupported)).apply)) ("template_name") ("postgres/widgets/split_array.html") ("subwidgets") ((((unsupported)).apply ((((unsupported)).apply ("name") ("name_0") ("is_hidden") (FALSE) ("required") (FALSE) ("value") ("val1") ("attrs") ((((unsupported)).apply)) ("template_name") ("django/forms/widgets/text.html") ("type") ("text"))) ((((unsupported)).apply ("name") ("name_1") ("is_hidden") (FALSE) ("required") (FALSE) ("value") ("val2") ("attrs") ((((unsupported)).apply)) ("template_name") ("django/forms/widgets/text.html") ("type") ("text"))))))))))
                xtest_checkbox_get_context_attrs.write
                  [xself]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((((unsupported)).apply ((xSplitArrayWidget)) (((((xforms).xCheckboxInput)).apply)) (2)).xget_context)).apply ("name") ((((unsupported)).apply (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("value"))) ("[True, False]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsubwidget)) ("attrs"))) ((xsubwidget)) ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("subwidgets"))))) ((((unsupported)).apply ((((unsupported)).apply ("checked") (TRUE))) ((((unsupported)).apply)))))
                xtest_render.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_html)).apply ((((unsupported)).apply ((xSplitArrayWidget)) (((((xforms).xTextInput)).apply)) (2))) ("array") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                xtest_render_attrs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply ((xSplitArrayWidget)) (((((xforms).xTextInput)).apply)) (2))) ("array") ((((unsupported)).apply ("val1") ("val2"))) ((((unsupported)).apply ("id") ("foo"))) ((((unsupported)).apply)))
                xtest_value_omitted_from_data.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply ((xSplitArrayWidget)) (((((xforms).xTextInput)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("field"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_0") ("value"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_1") ("value"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_0") ("value") ("field_1") ("value"))) ((((unsupported)).apply)) ("field"))) (FALSE))