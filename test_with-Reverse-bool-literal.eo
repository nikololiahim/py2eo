memory > xC
memory > xAttributeError
memory > xMockResource
memory > xAssertionError
memory > xB
memory > xEnterThrows
memory > xMockNested
memory > xiter
memory > xunittest
memory > xnext
memory > xcm
memory > xLacksEnterAndExit
memory > xexc_info
memory > xGeneratorExit
memory > xlist
memory > xRuntimeError
memory > xa1
memory > x_GeneratorContextManager
memory > xb1
memory > xExitThrows
memory > xValueError
memory > xo
memory > xEuropeanSwallow
memory > xdeque
memory > xbar
memory > xAfricanSwallow
memory > xb
memory > xZeroDivisionError
memory > xLacksEnter
memory > xStopIteration
memory > xMockContextManager
memory > xb2
memory > xContextmanagerAssertionMixin
memory > xtype
memory > xhasattr
memory > xa2
memory > xcompile
memory > xBool
memory > xsuper
memory > xmgr
memory > xsys
memory > xkwds
memory > xmanagers
memory > xm
memory > xargs
memory > xLacksExit
memory > xNested
memory > xSyntaxError
memory > xn
memory > xobject
memory > xNameError
memory > xfoo
memory > x__name__
memory > xa
[] > test_with
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestErrorsInBool
        memory > xmock_contextmanager
        memory > x__author__
        memory > xtestInlineGeneratorBoundToDottedVariable
        memory > xtestSingleComplexTarget
        memory > x__init__
        memory > xtestExceptionInExit
        memory > xtestUnboundGenerator
        memory > xtestWithBreak
        memory > xassertRaisesSyntaxError
        memory > xtestEnterReturnsTuple
        memory > xtestNestedExceptionAfterInnerStatement
        memory > xassertInWithManagerInvariants
        memory > xassertAfterWithManagerInvariants
        memory > xtestWithContinue
        memory > xtestRaisedStopIteration3
        memory > xtestEnterThrows
        memory > xassertAfterWithGeneratorInvariantsNoError
        memory > xtestNestedSingleStatements
        memory > xtestBoundGenerator
        memory > xtestSingleResource
        memory > xtestRaisedGeneratorExit1
        memory > xtestAssignmentToNoneError
        memory > xtestAssignmentToTupleContainingNoneError
        memory > xtestExitAttributeError
        memory > xtestSingleArgUnbound
        memory > xtestInlineGeneratorBoundSyntax
        memory > xtestInlineGeneratorBoundToExistingVariable
        memory > xtestRaisedStopIteration2
        memory > xtestExitThrows
        memory > xtestExceptionInEnter
        memory > xtestNoExceptions
        memory > xtestWithRaise
        memory > x__email__
        memory > xassertAfterWithManagerInvariantsNoError
        memory > xtestExceptionNormalized
        memory > xtestMultipleResourcesInSingleStatement
        memory > xtestMultipleArgBound
        memory > xsetUp
        memory > xtestNameError
        memory > xassertInWithGeneratorInvariants
        memory > xtestMultipleComplexTargets
        memory > xtestAssignmentToTupleOnlyContainingNoneError
        memory > xtestMultipleArgUnbound
        memory > xtestRaisedStopIteration1
        memory > x__exit__
        memory > xraiseTestException
        memory > xassertAfterWithManagerInvariantsWithError
        memory > xtestInlineGeneratorSyntax
        memory > xmock_contextmanager_generator
        memory > xtestSingleArgBoundToMultipleElementTupleError
        memory > xtestExitTrueSwallowsException
        memory > xassertAfterWithGeneratorInvariantsWithError
        memory > x__enter__
        memory > xtestSingleArgInlineGeneratorSyntax
        memory > xtestNestedExceptionBeforeInnerStatement
        memory > xtestExceptionInExprList
        memory > xtestEnterAttributeError2
        memory > xtestWithReturn
        memory > xtestExitFalseDoesntSwallowException
        memory > xtestRaisedGeneratorExit2
        memory > xtestSingleArgBoundToNonTuple
        memory > xtestWithYield
        memory > xtestEnterAttributeError1
        memory > xtestSingleArgBoundToSingleElementParenthesizedList
        seq > @
          seq
            unsupported
            x__author__.write "Mike Bland"
            x__email__.write "mbland at acm dot org"
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((x_GeneratorContextManager)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))))
                        (((unsupported)).apply (((xself).xenter_called)) (FALSE))
                        (((unsupported)).apply (((xself).xexit_called)) (FALSE))
                        (((unsupported)).apply (((xself).xexit_args)) ("None: is there a None literal in the EO language?"))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xenter_called)) (TRUE))
                        (((unsupported)).apply (((((x_GeneratorContextManager).x__enter__)).apply ((xself)))))
                x__exit__.write
                  [xself xtype xvalue xtraceback]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexit_called)) (TRUE))
                        (((unsupported)).apply (((xself).xexit_args)) ((((unsupported)).apply ((xtype)) ((xvalue)) ((xtraceback)))))
                        (((unsupported)).apply (((((x_GeneratorContextManager).x__exit__)).apply ((xself)) ((xtype)) ((xvalue)) ((xtraceback)))))
            xmock_contextmanager.write
              [xfunc]
                memory > xhelper
                seq > @
                  seq
                    xhelper.write
                      []
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((xMockContextManager)).apply ((xfunc)) ((xargs)) ((xkwds)))))
                    (((unsupported)).apply ((xhelper)))
            (((unsupported)).apply ((xobject)))
              x__init__.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xyielded)) (FALSE))
                      (((unsupported)).apply (((xself).xstopped)) (FALSE))
            xmock_contextmanager_generator.write
              []
                memory > xmock
                seq > @
                  (((unsupported)).apply)
                    xmock.write (((xMockResource)).apply)
                    (((unsupported)).apply)
                      seq
                        (((unsupported)).apply (((xmock).xyielded)) (TRUE))
                        (((unsupported)).apply ((xmock)))
                      (((unsupported)).apply (((xmock).xstopped)) (TRUE))
            (((unsupported)).apply ((xobject)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmanagers)) ((xmanagers)))
                        (((unsupported)).apply (((xself).xentered)) ("None: is there a None literal in the EO language?"))
                x__enter__.write
                  [xself]
                    memory > xvars
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xentered)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("Context is not reentrant"))))
                        (((unsupported)).apply (((xself).xentered)) ((((xdeque)).apply)))
                        xvars.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xmgr)) (((xself).xmanagers)))
                            seq
                              bogusForceDataize.write ((((xvars).xappend)).apply (((((xmgr).x__enter__)).apply)))
                              bogusForceDataize.write (((((xself).xentered).xappendleft)).apply ((xmgr)))
                          (((((xself).x__exit__)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply))))).not).if
                            (((unsupported)).apply)
                        (((unsupported)).apply ((xvars)))
                x__exit__.write
                  [xself]
                    memory > xex
                    seq > @
                      (((unsupported)).apply)
                        xex.write (xexc_info)
                        (((unsupported)).apply ((xmgr)) (((xself).xentered)))
                          (((unsupported)).apply)
                            ((((xmgr).x__exit__)).apply ((((unsupported)).apply ((xex))))).if
                              xex.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                            xex.write ((((xsys).xexc_info)).apply)
                        (((unsupported)).apply (((xself).xentered)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xex)) ((xexc_info))).if
                          (((unsupported)).apply (((((((((unsupported)).apply ((xex)) (0))).apply ((((unsupported)).apply ((xex)) (1)))).xwith_traceback)).apply ((((unsupported)).apply ((xex)) (2))))))
            (((unsupported)).apply ((xNested)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xNested).x__init__)).apply ((xself)) ((((unsupported)).apply ((xmanagers)))))
                        (((unsupported)).apply (((xself).xenter_called)) (FALSE))
                        (((unsupported)).apply (((xself).xexit_called)) (FALSE))
                        (((unsupported)).apply (((xself).xexit_args)) ("None: is there a None literal in the EO language?"))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xenter_called)) (TRUE))
                        (((unsupported)).apply (((((xNested).x__enter__)).apply ((xself)))))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xexit_called)) (TRUE))
                        (((unsupported)).apply (((xself).xexit_args)) ((xexc_info)))
                        (((unsupported)).apply (((((xNested).x__exit__)).apply ((xself)) ((((unsupported)).apply ((xexc_info)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestNameError.write
                  [xself]
                    memory > xfooNotDeclared
                    seq > @
                      seq
                        xfooNotDeclared.write
                          []
                            seq > @
                              (((unsupported)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNameError)) ((xfooNotDeclared)))
                xtestEnterAttributeError1.write
                  [xself]
                    memory > xfooLacksEnter
                    memory > x__exit__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__exit__.write
                            [xself xtype xvalue xtraceback]
                              seq > @
                        xfooLacksEnter.write
                          []
                            memory > xfoo
                            seq > @
                              seq
                                xfoo.write (((xLacksEnter)).apply)
                                (((unsupported)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__enter__") ((xfooLacksEnter)))
                xtestEnterAttributeError2.write
                  [xself]
                    memory > xfooLacksEnterAndExit
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        xfooLacksEnterAndExit.write
                          []
                            memory > xfoo
                            seq > @
                              seq
                                xfoo.write (((xLacksEnterAndExit)).apply)
                                (((unsupported)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__enter__") ((xfooLacksEnterAndExit)))
                xtestExitAttributeError.write
                  [xself]
                    memory > x__enter__
                    memory > xfooLacksExit
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__enter__.write
                            [xself]
                              seq > @
                        xfooLacksExit.write
                          []
                            memory > xfoo
                            seq > @
                              seq
                                xfoo.write (((xLacksExit)).apply)
                                (((unsupported)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xAttributeError)) ("__exit__") ((xfooLacksExit)))
                xassertRaisesSyntaxError.write
                  [xself xcodestr]
                    memory > xshouldRaiseSyntaxError
                    seq > @
                      seq
                        xshouldRaiseSyntaxError.write
                          [xs]
                            seq > @
                              bogusForceDataize.write (((xcompile)).apply ((xs)) ("") ("single"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xshouldRaiseSyntaxError)) ((xcodestr)))
                xtestAssignmentToNoneError.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)).apply ("with mock as None:n  pass"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)).apply ("with mock as (None):n  pass"))
                xtestAssignmentToTupleOnlyContainingNoneError.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)).apply ("with mock as None,:n  pass"))
                        bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)).apply ("with mock as (None,):n  pass"))
                xtestAssignmentToTupleContainingNoneError.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaisesSyntaxError)).apply ("with mock as (foo, None, bar):n  pass"))
                xtestEnterThrows.write
                  [xself]
                    memory > x__exit__
                    memory > xshouldThrow
                    memory > x__enter__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xRuntimeError)).apply ("Enter threw"))))
                            x__exit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                        xshouldThrow.write
                          []
                            memory > xct
                            seq > @
                              seq
                                xct.write (((xEnterThrows)).apply)
                                (((unsupported)).apply (((xself).xfoo)) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xct)) (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xfoo)) ("None: is there a None literal in the EO language?"))
                xtestExitThrows.write
                  [xself]
                    memory > x__exit__
                    memory > xshouldThrow
                    memory > x__enter__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                            x__exit__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xRuntimeError)).apply (42))))
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xExitThrows)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
            (((unsupported)).apply ((xobject)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xTEST_EXCEPTION)) ((((xRuntimeError)).apply ("test exception"))))
                xassertInWithManagerInvariants.write
                  [xself xmock_manager]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_manager).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmock_manager).xexit_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_manager).xexit_args)) ("None: is there a None literal in the EO language?"))
                xassertAfterWithManagerInvariants.write
                  [xself xmock_manager xexit_args]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_manager).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_manager).xexit_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_manager).xexit_args)) ((xexit_args)))
                xassertAfterWithManagerInvariantsNoError.write
                  [xself xmock_manager]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariants)).apply ((xmock_manager)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xassertInWithGeneratorInvariants.write
                  [xself xmock_generator]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_generator).xyielded)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmock_generator).xstopped)))
                xassertAfterWithGeneratorInvariantsNoError.write
                  [xself xmock_generator]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_generator).xyielded)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_generator).xstopped)))
                xraiseTestException.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xTEST_EXCEPTION)))
                xassertAfterWithManagerInvariantsWithError.write
                  [xself xmock_manager xexc_type]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_manager).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_manager).xexit_called)))
                        (((unsupported)).apply ((xexc_type)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmock_manager).xexit_args)) (1))) (((xself).xTEST_EXCEPTION)))
                            xexc_type.write (((xtype)).apply (((xself).xTEST_EXCEPTION)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmock_manager).xexit_args)) (0))) ((xexc_type)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xmock_manager).xexit_args)) (1))) ((xexc_type)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply (((xmock_manager).xexit_args)) (2))) ("None: is there a None literal in the EO language?"))
                xassertAfterWithGeneratorInvariantsWithError.write
                  [xself xmock_generator]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_generator).xyielded)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_generator).xstopped)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xContextmanagerAssertionMixin)))
              seq
                xtestInlineGeneratorSyntax.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                xtestUnboundGenerator.write
                  [xself]
                    memory > xmock
                    seq > @
                      seq
                        xmock.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply ((xmock)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock)))
                xtestInlineGeneratorBoundSyntax.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) ((xfoo)))
                          bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xfoo)))
                xtestInlineGeneratorBoundToExistingVariable.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) ((xfoo)))
                          bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xfoo)))
                xtestInlineGeneratorBoundToDottedVariable.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) (((xself).xfoo)))
                          bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply (((xself).xfoo)))
                xtestBoundGenerator.write
                  [xself]
                    memory > xmock
                    seq > @
                      seq
                        xmock.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply ((xmock)) ((xfoo)))
                          seq
                            bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xfoo)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock)))
                xtestNestedSingleStatements.write
                  [xself]
                    memory > xmock_b
                    memory > xmock_a
                    seq > @
                      seq
                        xmock_a.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply ((xmock_a)) ((xfoo)))
                          seq
                            xmock_b.write (((xmock_contextmanager_generator)).apply)
                            (((unsupported)).apply ((xmock_b)) ((xbar)))
                              seq
                                bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_a)))
                                bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_b)))
                                bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xfoo)))
                                bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xbar)))
                            bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_b)))
                            bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xbar)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_a)))
                            bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xfoo)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xContextmanagerAssertionMixin)))
              seq
                xtestSingleArgInlineGeneratorSyntax.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xNested)).apply ((((xmock_contextmanager_generator)).apply)))))
                xtestSingleArgBoundToNonTuple.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply ((((xNested)).apply ((xm)))) ((xfoo)))
                          bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xm)))
                xtestSingleArgBoundToSingleElementParenthesizedList.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply ((((xNested)).apply ((xm)))) ((xfoo)))
                          bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xm)))
                xtestSingleArgBoundToMultipleElementTupleError.write
                  [xself]
                    memory > xshouldThrowValueError
                    seq > @
                      seq
                        xshouldThrowValueError.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xNested)).apply ((((xmock_contextmanager_generator)).apply)))) ((((unsupported)).apply ((xfoo)) ((xbar)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xshouldThrowValueError)))
                xtestSingleArgUnbound.write
                  [xself]
                    memory > xmock_contextmanager
                    memory > xmock_nested
                    seq > @
                      seq
                        xmock_contextmanager.write (((xmock_contextmanager_generator)).apply)
                        xmock_nested.write (((xMockNested)).apply ((xmock_contextmanager)))
                        (((unsupported)).apply ((xmock_nested)))
                          seq
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_contextmanager)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_nested)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_contextmanager)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_nested)))
                xtestMultipleArgUnbound.write
                  [xself]
                    memory > xn
                    memory > xo
                    memory > xmock_nested
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmock_contextmanager_generator)).apply)
                        xn.write (((xmock_contextmanager_generator)).apply)
                        xo.write (((xmock_contextmanager_generator)).apply)
                        xmock_nested.write (((xMockNested)).apply ((xm)) ((xn)) ((xo)))
                        (((unsupported)).apply ((xmock_nested)))
                          seq
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xm)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xn)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xo)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_nested)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xn)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_nested)))
                xtestMultipleArgBound.write
                  [xself]
                    memory > xmock_nested
                    seq > @
                      seq
                        xmock_nested.write (((xMockNested)).apply ((((xmock_contextmanager_generator)).apply)) ((((xmock_contextmanager_generator)).apply)) ((((xmock_contextmanager_generator)).apply)))
                        (((unsupported)).apply ((xmock_nested)) ((((unsupported)).apply ((xm)) ((xn)) ((xo)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xm)))
                            bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xn)))
                            bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply ((xo)))
                            bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_nested)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xn)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_nested)))
            (((unsupported)).apply ((xContextmanagerAssertionMixin)) (((xunittest).xTestCase)))
              seq
                xtestSingleResource.write
                  [xself]
                    memory > xcm
                    memory > xshouldThrow
                    seq > @
                      seq
                        xcm.write (((xmock_contextmanager_generator)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xcm)) (((xself).xresource)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xcm)))
                                  bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xresource)))
                                  bogusForceDataize.write ((((xself).xraiseTestException)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xcm)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xresource)))
                xtestExceptionNormalized.write
                  [xself]
                    memory > xcm
                    memory > xshouldThrow
                    seq > @
                      seq
                        xcm.write (((xmock_contextmanager_generator)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xcm)) (((xself).xresource)))
                                (((unsupported)).apply (1) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xcm)) ((xZeroDivisionError)))
                xtestNestedSingleStatements.write
                  [xself]
                    memory > xmock_b
                    memory > xmock_a
                    memory > xshouldThrow
                    seq > @
                      seq
                        xmock_a.write (((xmock_contextmanager_generator)).apply)
                        xmock_b.write (((xmock_contextmanager_generator)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xmock_a)) (((xself).xfoo)))
                                (((unsupported)).apply ((xmock_b)) (((xself).xbar)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_a)))
                                    bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_b)))
                                    bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xfoo)))
                                    bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xbar)))
                                    bogusForceDataize.write ((((xself).xraiseTestException)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xmock_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xmock_b)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xbar)))
                xtestMultipleResourcesInSingleStatement.write
                  [xself]
                    memory > xcm_b
                    memory > xmock_nested
                    memory > xshouldThrow
                    memory > xcm_a
                    seq > @
                      seq
                        xcm_a.write (((xmock_contextmanager_generator)).apply)
                        xcm_b.write (((xmock_contextmanager_generator)).apply)
                        xmock_nested.write (((xMockNested)).apply ((xcm_a)) ((xcm_b)))
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xmock_nested)) ((((unsupported)).apply (((xself).xresource_a)) (((xself).xresource_b)))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xcm_a)))
                                  bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xcm_b)))
                                  bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_nested)))
                                  bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xresource_a)))
                                  bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xresource_b)))
                                  bogusForceDataize.write ((((xself).xraiseTestException)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xcm_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xcm_b)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xmock_nested)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xresource_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xresource_b)))
                xtestNestedExceptionBeforeInnerStatement.write
                  [xself]
                    memory > xmock_b
                    memory > xmock_a
                    memory > xshouldThrow
                    seq > @
                      seq
                        xmock_a.write (((xmock_contextmanager_generator)).apply)
                        xmock_b.write (((xmock_contextmanager_generator)).apply)
                        (((unsupported)).apply (((xself).xbar)) ("None: is there a None literal in the EO language?"))
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xmock_a)) (((xself).xfoo)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_a)))
                                  bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xfoo)))
                                  bogusForceDataize.write ((((xself).xraiseTestException)).apply)
                                  (((unsupported)).apply ((xmock_b)) (((xself).xbar)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xmock_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xbar)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmock_b).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmock_b).xexit_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_b).xexit_args)) ("None: is there a None literal in the EO language?"))
                xtestNestedExceptionAfterInnerStatement.write
                  [xself]
                    memory > xmock_b
                    memory > xmock_a
                    memory > xshouldThrow
                    seq > @
                      seq
                        xmock_a.write (((xmock_contextmanager_generator)).apply)
                        xmock_b.write (((xmock_contextmanager_generator)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((xmock_a)) (((xself).xfoo)))
                                seq
                                  (((unsupported)).apply ((xmock_b)) (((xself).xbar)))
                                    seq
                                      bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_a)))
                                      bogusForceDataize.write ((((xself).xassertInWithManagerInvariants)).apply ((xmock_b)))
                                      bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xfoo)))
                                      bogusForceDataize.write ((((xself).xassertInWithGeneratorInvariants)).apply (((xself).xbar)))
                                  bogusForceDataize.write ((((xself).xraiseTestException)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xshouldThrow)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsWithError)).apply ((xmock_a)))
                        bogusForceDataize.write ((((xself).xassertAfterWithManagerInvariantsNoError)).apply ((xmock_b)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsWithError)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertAfterWithGeneratorInvariantsNoError)).apply (((xself).xbar)))
                xtestRaisedStopIteration1.write
                  [xself]
                    memory > xcm
                    memory > xshouldThrow
                    seq > @
                      seq
                        xcm.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply)))
                                (((unsupported)).apply ((((xStopIteration)).apply ("from with"))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("from with"))))
                          bogusForceDataize.write (((xshouldThrow)).apply)
                xtestRaisedStopIteration2.write
                  [xself]
                    memory > x__exit__
                    memory > xshouldThrow
                    memory > x__enter__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                            x__exit__.write
                              [xself xtype xvalue xtraceback]
                                seq > @
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply)))
                                (((unsupported)).apply ((((xStopIteration)).apply ("from with"))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xStopIteration)) ("from with"))))
                          bogusForceDataize.write (((xshouldThrow)).apply)
                xtestRaisedStopIteration3.write
                  [xself]
                    memory > xcm
                    memory > xshouldThrow
                    seq > @
                      seq
                        xcm.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply)))
                                (((unsupported)).apply ((((xnext)).apply ((((xiter)).apply ((((unsupported)).apply)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))))
                          bogusForceDataize.write (((xshouldThrow)).apply)
                xtestRaisedGeneratorExit1.write
                  [xself]
                    memory > xcm
                    memory > xshouldThrow
                    seq > @
                      seq
                        xcm.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply)))
                                (((unsupported)).apply ((((xGeneratorExit)).apply ("from with"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xGeneratorExit)) ((xshouldThrow)))
                xtestRaisedGeneratorExit2.write
                  [xself]
                    memory > x__exit__
                    memory > xshouldThrow
                    memory > x__enter__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                            x__exit__.write
                              [xself xtype xvalue xtraceback]
                                seq > @
                        xshouldThrow.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply)))
                                (((unsupported)).apply ((((xGeneratorExit)).apply ("from with"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xGeneratorExit)) ((xshouldThrow)))
                xtestErrorsInBool.write
                  [xself]
                    memory > xfailAsBool
                    memory > x__exit__
                    memory > xfalseAsBool
                    memory > x__enter__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xbool_conversion]
                                memory > x__bool__
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                      x__bool__.write
                                        [xself]
                                          seq > @
                                            (((unsupported)).apply ((((xbool_conversion)).apply)))
                                    (((unsupported)).apply (((xself).xexit_result)) ((((xBool)).apply)))
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (3))
                            x__exit__.write
                              [xself xa xb xc]
                                seq > @
                                  (((unsupported)).apply (((xself).xexit_result)))
                        xfalseAsBool.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply ((((unsupported)).apply (TRUE))))))
                                bogusForceDataize.write ((((xself).xfail)).apply ("Should NOT see this"))
                        bogusForceDataize.write (((xfalseAsBool)).apply)
                        xfalseAsBool.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply ((((unsupported)).apply (FALSE))))))
                                bogusForceDataize.write ((((xself).xfail)).apply ("Should raise"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAssertionError)) ((xfalseAsBool)))
                        xfailAsBool.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xcm)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (0))))))))
                                bogusForceDataize.write ((((xself).xfail)).apply ("Should NOT see this"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xfailAsBool)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestWithBreak.write
                  [xself]
                    memory > xcounter
                    seq > @
                      seq
                        xcounter.write 0
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcounter)) (1))
                                (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                                  seq
                                    (((unsupported)).apply ((xcounter)) (10))
                                    (((unsupported)).apply)
                                (((unsupported)).apply ((xcounter)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcounter)) (11))
                xtestWithContinue.write
                  [xself]
                    memory > xcounter
                    seq > @
                      seq
                        xcounter.write 0
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xcounter)) (1))
                                ((xcounter).greater 2).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                                  seq
                                    (((unsupported)).apply ((xcounter)) (10))
                                    (((unsupported)).apply)
                                (((unsupported)).apply ((xcounter)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcounter)) (12))
                xtestWithReturn.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            memory > xcounter
                            seq > @
                              seq
                                xcounter.write 0
                                while.
                                  TRUE
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xcounter)) (1))
                                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                                          seq
                                            (((unsupported)).apply ((xcounter)) (10))
                                            (((unsupported)).apply ((xcounter)))
                                        (((unsupported)).apply ((xcounter)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfoo)).apply)) (11))
                xtestWithYield.write
                  [xself]
                    memory > xx
                    memory > xgen
                    seq > @
                      seq
                        xgen.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                                seq
                                  (((unsupported)).apply (12))
                                  (((unsupported)).apply (13))
                        xx.write (((xlist)).apply ((((xgen)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((((unsupported)).apply (12) (13))))
                xtestWithRaise.write
                  [xself]
                    memory > xcounter
                    seq > @
                      seq
                        xcounter.write 0
                        (((unsupported)).apply ((xRuntimeError)))
                          seq
                            (((unsupported)).apply ((xcounter)) (1))
                            (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)))
                              seq
                                (((unsupported)).apply ((xcounter)) (10))
                                (((unsupported)).apply ((xRuntimeError)))
                            (((unsupported)).apply ((xcounter)) (100))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcounter)) (11))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise RuntimeError"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestSingleComplexTarget.write
                  [xself]
                    memory > xkeys
                    memory > xtargets
                    memory > xblah
                    seq > @
                      seq
                        xtargets.write (((unsupported)).apply (1) ((((unsupported)).apply (0) (1) (2))))
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (0))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xtargets).xkeys)).apply)))) ((((unsupported)).apply (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (0)).x__class__)) ((xMockResource)))
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((xlist)).apply (((((xtargets).xvalues)).apply)))) (0))) (1))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xtargets).xkeys)).apply)))) ((((unsupported)).apply (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (1)).x__class__)) ((xMockResource)))
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) ((((unsupported)).apply ((xtargets)) (2))))
                          seq
                            xkeys.write (((xlist)).apply (((((xtargets).xkeys)).apply)))
                            bogusForceDataize.write ((((xkeys).xsort)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkeys)) ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply)
                        xblah.write (((xC)).apply)
                        (((unsupported)).apply ((((xmock_contextmanager_generator)).apply)) (((xblah).xfoo)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasattr)).apply ((xblah)) ("foo"))) (TRUE))
                xtestMultipleComplexTargets.write
                  [xself]
                    memory > x__enter__
                    memory > x__exit__
                    memory > xtargets
                    memory > xblah
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply (1) (2) (3))))
                            x__exit__.write
                              [xself xt xv xtb]
                                seq > @
                        xtargets.write (((unsupported)).apply (1) ((((unsupported)).apply (0) (1) (2))))
                        (((unsupported)).apply ((((xC)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (0))) ((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (1))) ((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) (2))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtargets)) ((((unsupported)).apply (1) ((((unsupported)).apply (1) (2) (3))))))
                        (((unsupported)).apply ((((xC)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xlist)).apply (((((xtargets).xvalues)).apply)))) (0))) (2))) ((((unsupported)).apply ((((unsupported)).apply ((((xlist)).apply (((((xtargets).xvalues)).apply)))) (0))) (1))) ((((unsupported)).apply ((((unsupported)).apply ((((xlist)).apply (((((xtargets).xvalues)).apply)))) (0))) (0))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtargets)) ((((unsupported)).apply (1) ((((unsupported)).apply (3) (2) (1))))))
                        (((unsupported)).apply ((((xC)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xtargets)) (1))) ((((unsupported)).apply ((xtargets)) (2))) ((((unsupported)).apply ((xtargets)) (3))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtargets)) ((((unsupported)).apply (1) (1) (2) (2) (3) (3))))
                        (((unsupported)).apply)
                        xblah.write (((xB)).apply)
                        (((unsupported)).apply ((((xC)).apply)) ((((unsupported)).apply (((xblah).xone)) (((xblah).xtwo)) (((xblah).xthree)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xblah).xone)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xblah).xtwo)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xblah).xthree)) (3))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestExitTrueSwallowsException.write
                  [xself]
                    memory > x__enter__
                    memory > x__exit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                            x__exit__.write
                              [xself xt xv xtb]
                                seq > @
                                  (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          (((unsupported)).apply ((((xAfricanSwallow)).apply)))
                            unsupported
                          bogusForceDataize.write ((((xself).xfail)).apply ("ZeroDivisionError should have been swallowed"))
                xtestExitFalseDoesntSwallowException.write
                  [xself]
                    memory > x__enter__
                    memory > x__exit__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__enter__.write
                              [xself]
                                seq > @
                            x__exit__.write
                              [xself xt xv xtb]
                                seq > @
                                  (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xZeroDivisionError)))
                          (((unsupported)).apply ((((xEuropeanSwallow)).apply)))
                            unsupported
                          bogusForceDataize.write ((((xself).xfail)).apply ("ZeroDivisionError should have been raised"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply ((xobject)))
                  seq
                    x__init__.write
                      [xself xvalue xgobble]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                              xvalue.write (xself)
                            (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            (((unsupported)).apply (((xself).xgobble)) ((xgobble)))
                            (((unsupported)).apply (((xself).xenter_called)) (FALSE))
                            (((unsupported)).apply (((xself).xexit_called)) (FALSE))
                    x__enter__.write
                      [xself]
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).xenter_called)) (TRUE))
                            (((unsupported)).apply (((xself).xvalue)))
                    x__exit__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply (((xself).xexit_called)) (TRUE))
                            (((unsupported)).apply (((xself).xexc_info)) ((xexc_info)))
                            ((xself).xgobble).if
                              (((unsupported)).apply (TRUE))
                (((unsupported)).apply ((xobject)))
                  x__init__.write
                    [xself]
                      seq > @
                        (((unsupported)).apply ((((xRuntimeError)).apply)))
                (((unsupported)).apply ((xobject)))
                  seq
                    x__enter__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ((((xRuntimeError)).apply)))
                    x__exit__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                (((unsupported)).apply ((xobject)))
                  seq
                    x__enter__.write
                      [xself]
                        seq > @
                    x__exit__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((xRuntimeError)).apply)))
                xtestNoExceptions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xDummy)).apply)) ((xa)) (((((xself).xDummy)).apply)) ((xb)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xenter_called)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xexit_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb).xexit_called)))
                xtestExceptionInExprList.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xDummy)).apply)) ((xa)) (((((xself).xInitRaises)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xexit_called)))
                xtestExceptionInEnter.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xRuntimeError)))
                          (((unsupported)).apply (((((xself).xDummy)).apply)) ((xa)) (((((xself).xEnterRaises)).apply)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("body of bad with executed"))
                          bogusForceDataize.write ((((xself).xfail)).apply ("RuntimeError not reraised"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xexit_called)))
                xtestExceptionInExit.write
                  [xself]
                    memory > xbody_executed
                    seq > @
                      seq
                        xbody_executed.write FALSE
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xDummy)) (TRUE))) ((xa)) (((((xself).xExitRaises)).apply)))
                          xbody_executed.write TRUE
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xenter_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).xexit_called)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xbody_executed)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((xa).xexc_info)) (0))) ("None: is there a None literal in the EO language?"))
                xtestEnterReturnsTuple.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xDummy)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xa1)) ((xa2)))) ((((unsupported)).apply (((xself).xDummy)) ((((unsupported)).apply (10) (20))))) ((((unsupported)).apply ((xb1)) ((xb2)))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (1) ((xa1)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (2) ((xa2)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (10) ((xb1)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (20) ((xb2)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)