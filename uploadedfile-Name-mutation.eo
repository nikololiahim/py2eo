memory > xBytesIO
memory > xFileNotFoundError
memory > xUploadedFile
memory > x_
memory > xInMemoryUploadedFile
memory > xsettings
memory > xproperty
memory > xsuper
memory > xvalidate_file_name
memory > xext
memory > xlen
memory > xFile2
memory > xos
[] > uploadedfile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtemporary_file_path
        memory > xclose
        memory > x_set_name
        memory > xchunks
        memory > xtempfile
        memory > xopen
        memory > x_get_name
        memory > x__all__
        memory > x__init__
        memory > xname
        memory > xmultiple_chunks
        memory > xfrom_dict
        memory > x__repr__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("UploadedFile") ("TemporaryUploadedFile") ("InMemoryUploadedFile") ("SimpleUploadedFile"))
            (((unsupported)).apply ((xFile2)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfile xname xcontent_type xsize xcharset xcontent_type_extra]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfile)) ((xname)))
                        (((unsupported)).apply (((xself).xsize)) ((xsize)))
                        (((unsupported)).apply (((xself).xcontent_type)) ((xcontent_type)))
                        (((unsupported)).apply (((xself).xcharset)) ((xcharset)))
                        (((unsupported)).apply (((xself).xcontent_type_extra)) ((xcontent_type_extra)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s (%s)>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) (((xself).xname)) (((xself).xcontent_type))))))
                x_get_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_name)))
                x_set_name.write
                  [xself xname]
                    memory > xext
                    seq > @
                      seq
                        (((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xname.write (((((xos).xpath).xbasename)).apply ((xname)))
                            ((((xlen)).apply ((xname))).greater 255).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xext)))) ((((((xos).xpath).xsplitext)).apply ((xname)))))
                                xext.write (((unsupported)).apply ((xext)) ((((unsupported)).apply (255))))
                                xname.write ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((255.sub (((xlen)).apply ((xext)))))))).add (xext))
                            xname.write (((xvalidate_file_name)).apply ((xname)))
                        (((unsupported)).apply (((xself).x_name)) ((xname)))
                xname.write (((xproperty)).apply ((x_get_name)) ((x_set_name)))
            (((unsupported)).apply ((xUploadedFile)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xname xcontent_type xsize xcharset xcontent_type_extra]
                    memory > xfile
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xext)))) ((((((xos).xpath).xsplitext)).apply ((xname)))))
                        xfile.write (((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((".upload".add (xext))) (((xsettings).xFILE_UPLOAD_TEMP_DIR)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfile)) ((xname)) ((xcontent_type)) ((xsize)) ((xcharset)) ((xcontent_type_extra)))
                xtemporary_file_path.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xself).xfile).xname)))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xFileNotFoundError)))
                        (((unsupported)).apply ((((((xself).xfile).xclose)).apply)))
            (((unsupported)).apply ((xUploadedFile)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfile xfield_name xname xcontent_type xsize xcharset xcontent_type_extra]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xfile)) ((xname)) ((xcontent_type)) ((xsize)) ((xcharset)) ((xcontent_type_extra)))
                        (((unsupported)).apply (((xself).xfield_name)) ((xfield_name)))
                xopen.write
                  [xself xmode]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xfile).xseek)).apply (0))
                        (((unsupported)).apply ((xself)))
                xchunks.write
                  [xself xchunk_size]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xfile).xseek)).apply (0))
                        (((unsupported)).apply (((((xself).xread)).apply)))
                xmultiple_chunks.write
                  [xself xchunk_size]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
            (((unsupported)).apply ((xInMemoryUploadedFile)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xname xcontent xcontent_type]
                    seq > @
                      (((unsupported)).apply)
                        xcontent.write ((xcontent).or "")
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((xBytesIO)).apply ((xcontent)))) ("None: is there a None literal in the EO language?") ((xname)) ((xcontent_type)) ((((xlen)).apply ((xcontent)))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xfrom_dict.write
                  [xcls xfile_dict]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xcls)).apply ((((unsupported)).apply ((xfile_dict)) ("filename"))) ((((unsupported)).apply ((xfile_dict)) ("content"))) (((((xfile_dict).xget)).apply ("content-type") ("text/plain"))))))