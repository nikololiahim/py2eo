memory > xArrayField
memory > xTextField
memory > xBooleanField
memory > xstr
memory > xwarnings
memory > xextra
memory > xValue
memory > xproperty
memory > xDeprecatedConvertValueMixin
memory > xobject
memory > xOrderableAggMixin
memory > xsuper
memory > xRemovedInDjango50Warning
memory > xexpressions
memory > xJSONField
memory > xAggregate
[] > general
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xconvert_value
        memory > xdeprecation_value
        memory > xtemplate
        memory > xNOT_PROVIDED
        memory > xdeprecation_msg
        memory > x__all__
        memory > xoutput_field
        memory > xfunction
        memory > xallow_distinct
        memory > x__init__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("ArrayAgg") ("BitAnd") ("BitOr") ("BitXor") ("BoolAnd") ("BoolOr") ("JSONBAgg") ("StringAgg"))
            xNOT_PROVIDED.write (((xobject)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdefault)) ((xNOT_PROVIDED))).if
                          seq
                            xdefault.write "None: is there a None literal in the EO language?"
                            (((unsupported)).apply (((xself).x_default_provided)) (FALSE))
                          (((unsupported)).apply (((xself).x_default_provided)) (TRUE))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ((xexpressions)))) ((xdefault)) ((((unsupported)).apply ((xextra)))))
                xconvert_value.write
                  [xself xvalue xexpression xconnection]
                    seq > @
                      seq
                        ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).and (((xself).x_default_provided).not)).if
                          seq
                            (((unsupported)).apply (((xwarnings).xwarn)) (((xself).xdeprecation_msg)) ((xRemovedInDjango50Warning)))
                            (((unsupported)).apply (((xself).xdeprecation_value)))
                        (((unsupported)).apply ((xvalue)))
            (((unsupported)).apply ((xDeprecatedConvertValueMixin)) ((xOrderableAggMixin)) ((xAggregate)))
              seq
                xfunction.write "ARRAY_AGG"
                xtemplate.write "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
                xallow_distinct.write TRUE
                xdeprecation_value.write (((xproperty)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                xdeprecation_msg.write "In Django 5.0, ArrayAgg() will return None instead of an empty list if there are no rows. Pass default=None to opt into the new behavior and silence this warning or default=Value([]) to keep the previous behavior."
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xArrayField)).apply (((((unsupported)).apply (((xself).xsource_expressions)) (0)).xoutput_field)))))
            (((unsupported)).apply ((xAggregate)))
              xfunction.write "BIT_AND"
            (((unsupported)).apply ((xAggregate)))
              xfunction.write "BIT_OR"
            (((unsupported)).apply ((xAggregate)))
              xfunction.write "BIT_XOR"
            (((unsupported)).apply ((xAggregate)))
              seq
                xfunction.write "BOOL_AND"
                xoutput_field.write (((xBooleanField)).apply)
            (((unsupported)).apply ((xAggregate)))
              seq
                xfunction.write "BOOL_OR"
                xoutput_field.write (((xBooleanField)).apply)
            (((unsupported)).apply ((xDeprecatedConvertValueMixin)) ((xOrderableAggMixin)) ((xAggregate)))
              seq
                xfunction.write "JSONB_AGG"
                xtemplate.write "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
                xallow_distinct.write TRUE
                xoutput_field.write (((xJSONField)).apply)
                xdeprecation_value.write "[]"
                xdeprecation_msg.write "In Django 5.0, JSONBAgg() will return None instead of an empty list if there are no rows. Pass default=None to opt into the new behavior and silence this warning or default=Value('[]') to keep the previous behavior."
            (((unsupported)).apply ((xDeprecatedConvertValueMixin)) ((xOrderableAggMixin)) ((xAggregate)))
              seq
                xfunction.write "STRING_AGG"
                xtemplate.write "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
                xallow_distinct.write TRUE
                xoutput_field.write (((xTextField)).apply)
                xdeprecation_value.write ""
                xdeprecation_msg.write "In Django 5.0, StringAgg() will return None instead of an empty string if there are no rows. Pass default=None to opt into the new behavior and silence this warning or default=Value('') to keep the previous behavior."
                x__init__.write
                  [xself xexpression xdelimiter]
                    memory > xdelimiter_expr
                    seq > @
                      (((unsupported)).apply)
                        xdelimiter_expr.write (((xValue)).apply ((((xstr)).apply ((xdelimiter)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xexpression)) ((xdelimiter_expr)) ((((unsupported)).apply ((xextra)))))