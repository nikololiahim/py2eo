memory > xk
memory > xreverse
memory > xValueError
memory > xurlencode
memory > xIndexError
memory > xlookup_spawns_duplicates
memory > xforms
memory > xFieldDoesNotExist
memory > xdatetime
memory > xlist
memory > xindex
memory > xfilter_spec
memory > xenumerate
memory > xFieldListFilter
memory > xOuterRef
memory > xfield_list_filter_class
memory > xquote
memory > xstr
memory > xerror
memory > xfilters_may_have_duplicates
memory > xmessages
memory > xORDER_VAR
memory > xDisallowedModelAdminLookup
memory > xvalue
memory > xpart
memory > xsearch_may_have_duplicates
memory > xtimedelta
memory > xField
memory > xmake_aware
memory > xnone
memory > xCombinable
memory > xp
memory > xfield_names
memory > xcallable
memory > xany
memory > xset
memory > xgettext
memory > xsettings
memory > xint
memory > xremaining_lookup_params
memory > xException
memory > xr
memory > xhasattr
memory > xproperty
memory > xTO_FIELD_VAR
memory > xOrderBy
memory > xExists
memory > xF
memory > xDisallowedModelAdminToField
memory > xsuper
memory > xSuspiciousOperation
memory > xbool
memory > xtuple
memory > xInvalidPage
memory > xsorted
memory > xprepare_lookup_value
memory > xargs
memory > xlist_filter
memory > xIncorrectLookupParameters
memory > xgetattr
memory > xv
memory > xconstraint
memory > xe
memory > xpfx
memory > xattr
memory > xget_fields_from_path
memory > xidx
memory > xIS_POPUP_VAR
memory > xChangeListSearchForm
memory > xImproperlyConfigured
memory > xManyToOneRel
memory > xkwargs
memory > xisinstance
memory > xfield_name
memory > xlen
memory > xdict
memory > xignored
memory > xkey
[] > main
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_ordering_field
        memory > xSEARCH_VAR
        memory > x__repr__
        memory > xget_filters_params
        memory > xurl_for_result
        memory > xapply_select_related
        memory > x_get_deterministic_ordering
        memory > xORDER_VAR2
        memory > xget_ordering_field_columns
        memory > xsearch_form_class
        memory > xget_filters
        memory > x__init__
        memory > xget_results
        memory > xget_ordering
        memory > xget_query_string
        memory > xget_queryset
        memory > xERROR_FLAG
        memory > xPAGE_VAR
        memory > xhas_related_field_in_list_display
        memory > x_get_default_ordering
        memory > xIGNORED_PARAMS
        memory > xALL_VAR
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xALL_VAR.write "all"
            xORDER_VAR2.write "o"
            xPAGE_VAR.write "p"
            xSEARCH_VAR.write "q"
            xERROR_FLAG.write "e"
            xIGNORED_PARAMS.write (((unsupported)).apply ((xALL_VAR)) ((xORDER_VAR)) ((xSEARCH_VAR)) ((xIS_POPUP_VAR)) ((xTO_FIELD_VAR)))
            (((unsupported)).apply (((xforms).xForm)))
              x__init__.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                      (((unsupported)).apply (((xself).xfields)) ((((unsupported)).apply ((xSEARCH_VAR)) ((((unsupported)).apply (((xforms).xCharField)) (FALSE) (FALSE))))))
            (((unsupported)).apply)
              seq
                xsearch_form_class.write (xChangeListSearchForm)
                x__init__.write
                  [xself xrequest xmodel xlist_display xlist_display_links xlist_filter xdate_hierarchy xsearch_fields xlist_select_related xlist_per_page xlist_max_show_all xlist_editable xmodel_admin xsortable_by xsearch_help_text]
                    memory > x_search_form
                    memory > xto_field
                    memory > xtitle
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmodel)) ((xmodel)))
                        (((unsupported)).apply (((xself).xopts)) (((xmodel).x_meta)))
                        (((unsupported)).apply (((xself).xlookup_opts)) (((xself).xopts)))
                        (((unsupported)).apply (((xself).xroot_queryset)) (((((xmodel_admin).xget_queryset)).apply ((xrequest)))))
                        (((unsupported)).apply (((xself).xlist_display)) ((xlist_display)))
                        (((unsupported)).apply (((xself).xlist_display_links)) ((xlist_display_links)))
                        (((unsupported)).apply (((xself).xlist_filter)) ((xlist_filter)))
                        (((unsupported)).apply (((xself).xhas_filters)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xhas_active_filters)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xclear_all_filters_qs)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xdate_hierarchy)) ((xdate_hierarchy)))
                        (((unsupported)).apply (((xself).xsearch_fields)) ((xsearch_fields)))
                        (((unsupported)).apply (((xself).xlist_select_related)) ((xlist_select_related)))
                        (((unsupported)).apply (((xself).xlist_per_page)) ((xlist_per_page)))
                        (((unsupported)).apply (((xself).xlist_max_show_all)) ((xlist_max_show_all)))
                        (((unsupported)).apply (((xself).xmodel_admin)) ((xmodel_admin)))
                        (((unsupported)).apply (((xself).xpreserved_filters)) (((((xmodel_admin).xget_preserved_filters)).apply ((xrequest)))))
                        (((unsupported)).apply (((xself).xsortable_by)) ((xsortable_by)))
                        (((unsupported)).apply (((xself).xsearch_help_text)) ((xsearch_help_text)))
                        x_search_form.write ((((xself).xsearch_form_class)).apply (((xrequest).xGET)))
                        (((((x_search_form).xis_valid)).apply).not).if
                          (((unsupported)).apply ((xerror)) ((((((x_search_form).xerrors).xvalues)).apply)))
                            bogusForceDataize.write ((((xmessages).xerror)).apply ((xrequest)) ((((", ".xjoin)).apply ((xerror)))))
                        (((unsupported)).apply (((xself).xquery)) (((((((x_search_form).xcleaned_data).xget)).apply ((xSEARCH_VAR))).or "")))
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply (((xself).xpage_num)) ((((xint)).apply ((((((xrequest).xGET).xget)).apply ((xPAGE_VAR)) (1))))))
                          (((unsupported)).apply (((xself).xpage_num)) (1))
                        (((unsupported)).apply (((xself).xshow_all)) ((((unsupported)).apply ((xALL_VAR)) (((xrequest).xGET)))))
                        (((unsupported)).apply (((xself).xis_popup)) ((((unsupported)).apply ((xIS_POPUP_VAR)) (((xrequest).xGET)))))
                        xto_field.write (((((xrequest).xGET).xget)).apply ((xTO_FIELD_VAR)))
                        ((xto_field).and (((((xmodel_admin).xto_field_allowed)).apply ((xrequest)) ((xto_field))).not)).if
                          (((unsupported)).apply ((((xDisallowedModelAdminToField)).apply (("The field %s cannot be referenced.".mod (xto_field))))))
                        (((unsupported)).apply (((xself).xto_field)) ((xto_field)))
                        (((unsupported)).apply (((xself).xparams)) ((((xdict)).apply ((((((xrequest).xGET).xitems)).apply)))))
                        (((unsupported)).apply ((xPAGE_VAR)) (((xself).xparams))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xparams)) ((xPAGE_VAR)))))))))
                        (((unsupported)).apply ((xERROR_FLAG)) (((xself).xparams))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xparams)) ((xERROR_FLAG)))))))))
                        ((xself).xis_popup).if
                          (((unsupported)).apply (((xself).xlist_editable)) ((((unsupported)).apply)))
                          (((unsupported)).apply (((xself).xlist_editable)) ((xlist_editable)))
                        (((unsupported)).apply (((xself).xqueryset)) (((((xself).xget_queryset)).apply ((xrequest)))))
                        bogusForceDataize.write ((((xself).xget_results)).apply ((xrequest)))
                        ((xself).xis_popup).if
                          xtitle.write (((xgettext)).apply ("Select %s"))
                          (((((xself).xmodel_admin).xhas_change_permission)).apply ((xrequest))).if
                            xtitle.write (((xgettext)).apply ("Select %s to change"))
                            xtitle.write (((xgettext)).apply ("Select %s to view"))
                        (((unsupported)).apply (((xself).xtitle)) (((xtitle).mod (((xself).xopts).xverbose_name))))
                        (((unsupported)).apply (((xself).xpk_attname)) (((((xself).xlookup_opts).xpk).xattname)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: model=%s model_admin=%s>".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) ((((xself).xmodel).x__qualname__)) (((((xself).xmodel_admin).x__class__).x__qualname__))))))
                xget_filters_params.write
                  [xself xparams]
                    memory > xlookup_params
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xparams.write ((xparams).or ((xself).xparams))
                        xlookup_params.write ((((xparams).xcopy)).apply)
                        (((unsupported)).apply ((xignored)) ((xIGNORED_PARAMS)))
                          (((unsupported)).apply ((xignored)) ((xlookup_params))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlookup_params)) ((xignored)))))))))
                        (((unsupported)).apply ((xlookup_params)))
                xget_filters.write
                  [xself xrequest]
                    memory > xfield
                    memory > xhas_active_filters
                    memory > xfrom_date
                    memory > xfilter_specs
                    memory > xmay_have_duplicates
                    memory > xmonth
                    memory > xspec
                    memory > xlookup_params
                    memory > xyear
                    memory > xto_date
                    memory > xfield_path
                    memory > xday
                    memory > xlookup_params_count
                    seq > @
                      seq
                        xlookup_params.write ((((xself).xget_filters_params)).apply)
                        xmay_have_duplicates.write FALSE
                        xhas_active_filters.write FALSE
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xlookup_params).xitems)).apply)))
                          ((((((xself).xmodel_admin).xlookup_allowed)).apply ((xkey)) ((xvalue))).not).if
                            (((unsupported)).apply ((((xDisallowedModelAdminLookup)).apply (("Filtering by %s not allowed".mod (xkey))))))
                        xfilter_specs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xlist_filter)) (((xself).xlist_filter)))
                          seq
                            xlookup_params_count.write (((xlen)).apply ((xlookup_params)))
                            (((xcallable)).apply ((xlist_filter))).if
                              xspec.write (((xlist_filter)).apply ((xrequest)) ((xlookup_params)) (((xself).xmodel)) (((xself).xmodel_admin)))
                              seq
                                xfield_path.write "None: is there a None literal in the EO language?"
                                (((xisinstance)).apply ((xlist_filter)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xfield_list_filter_class)))) ((xlist_filter)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xfield)) ((xfield_list_filter_class)))) ((((unsupported)).apply ((xlist_filter)) (((xFieldListFilter).xcreate)))))
                                ((((xisinstance)).apply ((xfield)) ((xField))).not).if
                                  seq
                                    xfield_path.write (xfield)
                                    xfield.write (((unsupported)).apply ((((xget_fields_from_path)).apply (((xself).xmodel)) ((xfield_path)))) ((1.neg)))
                                xspec.write (((unsupported)).apply ((xfield_list_filter_class)) ((xfield)) ((xrequest)) ((xlookup_params)) (((xself).xmodel)) (((xself).xmodel_admin)) ((xfield_path)))
                                ((xlookup_params_count).greater (((xlen)).apply ((xlookup_params)))).if
                                  (((unsupported)).apply ((xmay_have_duplicates)) ((((xlookup_spawns_duplicates)).apply (((xself).xlookup_opts)) ((xfield_path)))))
                            ((xspec).and ((((xspec).xhas_output)).apply)).if
                              seq
                                bogusForceDataize.write ((((xfilter_specs).xappend)).apply ((xspec)))
                                ((xlookup_params_count).greater (((xlen)).apply ((xlookup_params)))).if
                                  xhas_active_filters.write TRUE
                        ((xself).xdate_hierarchy).if
                          seq
                            xyear.write ((((xlookup_params).xpop)).apply (("%s__year".mod ((xself).xdate_hierarchy))) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xyear)) ("None: is there a None literal in the EO language?")).if
                              seq
                                xmonth.write ((((xlookup_params).xpop)).apply (("%s__month".mod ((xself).xdate_hierarchy))) ("None: is there a None literal in the EO language?"))
                                xday.write ((((xlookup_params).xpop)).apply (("%s__day".mod ((xself).xdate_hierarchy))) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xValueError)))
                                  xfrom_date.write (((xdatetime)).apply ((((xint)).apply ((xyear)))) ((((xint)).apply (((((unsupported)).apply ((xmonth)) ("None: is there a None literal in the EO language?")).if (xmonth) 1)))) ((((xint)).apply (((((unsupported)).apply ((xday)) ("None: is there a None literal in the EO language?")).if (xday) 1)))))
                                  (((unsupported)).apply ((((xIncorrectLookupParameters)).apply ((xe)))) ((xe)))
                                (xday).if
                                  xto_date.write ((xfrom_date).add (((unsupported)).apply ((xtimedelta)) (1)))
                                  (xmonth).if
                                    xto_date.write (((unsupported)).apply ((((xfrom_date).add (((unsupported)).apply ((xtimedelta)) (32))).xreplace)) (1))
                                    xto_date.write (((unsupported)).apply (((xfrom_date).xreplace)) ((((xfrom_date).xyear).add 1)))
                                ((xsettings).xUSE_TZ).if
                                  seq
                                    xfrom_date.write (((xmake_aware)).apply ((xfrom_date)))
                                    xto_date.write (((xmake_aware)).apply ((xto_date)))
                                bogusForceDataize.write ((((xlookup_params).xupdate)).apply ((((unsupported)).apply (("%s__gte".mod ((xself).xdate_hierarchy))) ((xfrom_date)) (("%s__lt".mod ((xself).xdate_hierarchy))) ((xto_date)))))
                        (((unsupported)).apply ((xFieldDoesNotExist)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xlookup_params).xitems)).apply)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xlookup_params)) ((xkey)))) ((((xprepare_lookup_value)).apply ((xkey)) ((xvalue)))))
                                (((unsupported)).apply ((xmay_have_duplicates)) ((((xlookup_spawns_duplicates)).apply (((xself).xlookup_opts)) ((xkey)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xfilter_specs)) ((((xbool)).apply ((xfilter_specs)))) ((xlookup_params)) ((xmay_have_duplicates)) ((xhas_active_filters)))))
                          (((unsupported)).apply ((((xIncorrectLookupParameters)).apply ((xe)))) ((xe)))
                xget_query_string.write
                  [xself xnew_params xremove]
                    memory > xp
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xnew_params)) ("None: is there a None literal in the EO language?")).if
                          xnew_params.write (((unsupported)).apply)
                        (((unsupported)).apply ((xremove)) ("None: is there a None literal in the EO language?")).if
                          xremove.write (((unsupported)).apply)
                        xp.write (((((xself).xparams).xcopy)).apply)
                        (((unsupported)).apply ((xr)) ((xremove)))
                          (((unsupported)).apply ((xk)) ((((xlist)).apply ((xp)))))
                            ((((xk).xstartswith)).apply ((xr))).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xp)) ((xk)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xnew_params).xitems)).apply)))
                          (((unsupported)).apply ((xv)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((xk)) ((xp))).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xp)) ((xk)))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xk)))) ((xv)))
                        (((unsupported)).apply (("?%s".mod (((xurlencode)).apply ((((xsorted)).apply (((((xp).xitems)).apply))))))))
                xget_results.write
                  [xself xrequest]
                    memory > xpaginator
                    memory > xfull_result_count
                    memory > xmulti_page
                    memory > xresult_count
                    memory > xresult_list
                    memory > xcan_show_all
                    seq > @
                      seq
                        xpaginator.write (((((xself).xmodel_admin).xget_paginator)).apply ((xrequest)) (((xself).xqueryset)) (((xself).xlist_per_page)))
                        xresult_count.write ((xpaginator).xcount)
                        (((xself).xmodel_admin).xshow_full_result_count).if
                          xfull_result_count.write (((((xself).xroot_queryset).xcount)).apply)
                          xfull_result_count.write "None: is there a None literal in the EO language?"
                        xcan_show_all.write ((xresult_count).leq ((xself).xlist_max_show_all))
                        xmulti_page.write ((xresult_count).greater ((xself).xlist_per_page))
                        ((((xself).xshow_all).and (xcan_show_all)).or ((xmulti_page).not)).if
                          xresult_list.write (((((xself).xqueryset).x_clone)).apply)
                          (((unsupported)).apply ((xInvalidPage)))
                            xresult_list.write (((((xpaginator).xpage)).apply (((xself).xpage_num))).xobject_list)
                            (((unsupported)).apply ((xIncorrectLookupParameters)))
                        (((unsupported)).apply (((xself).xresult_count)) ((xresult_count)))
                        (((unsupported)).apply (((xself).xshow_full_result_count)) ((((xself).xmodel_admin).xshow_full_result_count)))
                        (((unsupported)).apply (((xself).xshow_admin_actions)) (((((xself).xshow_full_result_count).not).or (((xbool)).apply ((xfull_result_count))))))
                        (((unsupported)).apply (((xself).xfull_result_count)) ((xfull_result_count)))
                        (((unsupported)).apply (((xself).xresult_list)) ((xresult_list)))
                        (((unsupported)).apply (((xself).xcan_show_all)) ((xcan_show_all)))
                        (((unsupported)).apply (((xself).xmulti_page)) ((xmulti_page)))
                        (((unsupported)).apply (((xself).xpaginator)) ((xpaginator)))
                x_get_default_ordering.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        xordering.write (((unsupported)).apply)
                        (((xself).xmodel_admin).xordering).if
                          xordering.write (((xself).xmodel_admin).xordering)
                          (((xself).xlookup_opts).xordering).if
                            xordering.write (((xself).xlookup_opts).xordering)
                        (((unsupported)).apply ((xordering)))
                xget_ordering_field.write
                  [xself xfield_name]
                    memory > xfield
                    memory > xattr
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xFieldDoesNotExist)))
                          seq
                            xfield.write (((((xself).xlookup_opts).xget_field)).apply ((xfield_name)))
                            (((unsupported)).apply (((xfield).xname)))
                          seq
                            (((xcallable)).apply ((xfield_name))).if
                              xattr.write (xfield_name)
                              (((xhasattr)).apply (((xself).xmodel_admin)) ((xfield_name))).if
                                xattr.write (((xgetattr)).apply (((xself).xmodel_admin)) ((xfield_name)))
                                xattr.write (((xgetattr)).apply (((xself).xmodel)) ((xfield_name)))
                            ((((xisinstance)).apply ((xattr)) ((xproperty))).and (((xhasattr)).apply ((xattr)) ("fget"))).if
                              xattr.write ((xattr).xfget)
                            (((unsupported)).apply ((((xgetattr)).apply ((xattr)) ("admin_order_field") ("None: is there a None literal in the EO language?"))))
                xget_ordering.write
                  [xself xrequest xqueryset]
                    memory > xordering
                    memory > xorder_field
                    memory > xorder_params
                    memory > xparams
                    memory > xfield_name
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xparams.write ((xself).xparams)
                        xordering.write (((xlist)).apply (((((((xself).xmodel_admin).xget_ordering)).apply ((xrequest))).or ((((xself).x_get_default_ordering)).apply))))
                        (((unsupported)).apply ((xORDER_VAR)) ((xparams))).if
                          seq
                            xordering.write (((unsupported)).apply)
                            xorder_params.write ((((((unsupported)).apply ((xparams)) ((xORDER_VAR))).xsplit)).apply ("."))
                            (((unsupported)).apply ((xp)) ((xorder_params)))
                              (((unsupported)).apply ((((unsupported)).apply ((xIndexError)) ((xValueError)))))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xnone)) ((xpfx)) ((xidx)))) (((((xp).xrpartition)).apply ("-"))))
                                  xfield_name.write (((unsupported)).apply (((xself).xlist_display)) ((((xint)).apply ((xidx)))))
                                  xorder_field.write ((((xself).xget_ordering_field)).apply ((xfield_name)))
                                  ((xorder_field).not).if
                                    (((unsupported)).apply)
                                  (((xisinstance)).apply ((xorder_field)) ((xOrderBy))).if
                                    seq
                                      ((xpfx).eq "-").if
                                        seq
                                          xorder_field.write ((((xorder_field).xcopy)).apply)
                                          bogusForceDataize.write ((((xorder_field).xreverse_ordering)).apply)
                                      bogusForceDataize.write ((((xordering).xappend)).apply ((xorder_field)))
                                    (((xhasattr)).apply ((xorder_field)) ("resolve_expression")).if
                                      bogusForceDataize.write ((((xordering).xappend)).apply ((((xpfx).eq "-").if ((((xorder_field).xdesc)).apply) ((((xorder_field).xasc)).apply))))
                                      (((((xorder_field).xstartswith)).apply ("-")).and ((xpfx).eq "-")).if
                                        bogusForceDataize.write ((((xordering).xappend)).apply ((((unsupported)).apply ((xorder_field)) ((((unsupported)).apply (1))))))
                                        bogusForceDataize.write ((((xordering).xappend)).apply (((xpfx).add (xorder_field))))
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xordering).xextend)).apply ((((xqueryset).xquery).xorder_by)))
                        (((unsupported)).apply (((((xself).x_get_deterministic_ordering)).apply ((xordering)))))
                x_get_deterministic_ordering.write
                  [xself xordering]
                    memory > xfield
                    memory > xordering_fields
                    memory > xfields
                    memory > xtotal_ordering_fields
                    memory > xconstraint_field_names
                    memory > xfield_name
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xordering.write (((xlist)).apply ((xordering)))
                        xordering_fields.write (((xset)).apply)
                        xtotal_ordering_fields.write ((((unsupported)).apply ("pk")).or (((unsupported)).apply (((xfield).xattname)) ((xfield)) ((((xself).xlookup_opts).xfields)) ((((xfield).xunique).and (((xfield).xnull).not)))))
                        (((unsupported)).apply ((xpart)) ((xordering)))
                          seq
                            xfield_name.write "None: is there a None literal in the EO language?"
                            (((xisinstance)).apply ((xpart)) ((xstr))).if
                              xfield_name.write ((((xpart).xlstrip)).apply ("-"))
                              (((xisinstance)).apply ((xpart)) ((xF))).if
                                xfield_name.write ((xpart).xname)
                                ((((xisinstance)).apply ((xpart)) ((xOrderBy))).and (((xisinstance)).apply (((xpart).xexpression)) ((xF)))).if
                                  xfield_name.write (((xpart).xexpression).xname)
                            (xfield_name).if
                              seq
                                (((unsupported)).apply ((xFieldDoesNotExist)))
                                  xfield.write (((((xself).xlookup_opts).xget_field)).apply ((xfield_name)))
                                  (((unsupported)).apply)
                                (((xfield).xremote_field).and ((xfield_name).eq ((xfield).xname))).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply (((xfield).xattname)) ((xtotal_ordering_fields))).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xordering_fields).xadd)).apply (((xfield).xattname)))
                          seq
                            xconstraint_field_names.write (((unsupported)).apply ((((unsupported)).apply ((((xself).xlookup_opts).xunique_together)))) ((((unsupported)).apply ((((unsupported)).apply (((xconstraint).xfields)) ((xconstraint)) ((((xself).xlookup_opts).xtotal_unique_constraints)))))))
                            (((unsupported)).apply ((xfield_names)) ((xconstraint_field_names)))
                              seq
                                xfields.write (((unsupported)).apply ((((((xself).xlookup_opts).xget_field)).apply ((xfield_name)))) ((xfield_name)) ((xfield_names)))
                                (((xany)).apply ((((unsupported)).apply (((xfield).xnull)) ((xfield)) ((xfields))))).if
                                  (((unsupported)).apply)
                                ((((xordering_fields).xissuperset)).apply ((((unsupported)).apply (((xfield).xattname)) ((xfield)) ((xfields))))).if
                                  (((unsupported)).apply)
                              bogusForceDataize.write ((((xordering).xappend)).apply ("-pk"))
                        (((unsupported)).apply ((xordering)))
                xget_ordering_field_columns.write
                  [xself]
                    memory > xfield
                    memory > xordering
                    memory > xordering_fields
                    memory > xorder_type
                    memory > xidx
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xordering.write ((((xself).x_get_default_ordering)).apply)
                        xordering_fields.write (((unsupported)).apply)
                        (((unsupported)).apply ((xORDER_VAR)) (((xself).xparams))).if
                          (((unsupported)).apply ((xfield)) ((xordering)))
                            seq
                              (((xisinstance)).apply ((xfield)) ((((unsupported)).apply ((xCombinable)) ((xOrderBy))))).if
                                seq
                                  ((((xisinstance)).apply ((xfield)) ((xOrderBy))).not).if
                                    xfield.write ((((xfield).xasc)).apply)
                                  (((xisinstance)).apply (((xfield).xexpression)) ((xF))).if
                                    seq
                                      xorder_type.write (((xfield).xdescending).if "desc" "asc")
                                      xfield.write (((xfield).xexpression).xname)
                                    (((unsupported)).apply)
                                ((((xfield).xstartswith)).apply ("-")).if
                                  seq
                                    xfield.write (((unsupported)).apply ((xfield)) ((((unsupported)).apply (1))))
                                    xorder_type.write "desc"
                                  xorder_type.write "asc"
                              (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xattr)))) ((((xenumerate)).apply (((xself).xlist_display)))))
                                (((((xself).xget_ordering_field)).apply ((xattr))).eq (xfield)).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xordering_fields)) ((xindex)))) ((xorder_type)))
                                    (((unsupported)).apply)
                          (((unsupported)).apply ((xp)) (((((((unsupported)).apply (((xself).xparams)) ((xORDER_VAR))).xsplit)).apply ("."))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xnone)) ((xpfx)) ((xidx)))) (((((xp).xrpartition)).apply ("-"))))
                              (((unsupported)).apply ((xValueError)))
                                xidx.write (((xint)).apply ((xidx)))
                                (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xordering_fields)) ((xidx)))) ((((xpfx).eq "-").if "desc" "asc")))
                        (((unsupported)).apply ((xordering_fields)))
                xget_queryset.write
                  [xself xrequest]
                    memory > xqs
                    memory > xnew_qs
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfilter_specs)) (((xself).xhas_filters)) ((xremaining_lookup_params)) ((xfilters_may_have_duplicates)) (((xself).xhas_active_filters)))) (((((xself).xget_filters)).apply ((xrequest)))))
                        xqs.write ((xself).xroot_queryset)
                        (((unsupported)).apply ((xfilter_spec)) (((xself).xfilter_specs)))
                          seq
                            xnew_qs.write ((((xfilter_spec).xqueryset)).apply ((xrequest)) ((xqs)))
                            (((unsupported)).apply ((xnew_qs)) ("None: is there a None literal in the EO language?")).if
                              xqs.write (xnew_qs)
                        (((unsupported)).apply ((((unsupported)).apply ((xSuspiciousOperation)) ((xImproperlyConfigured)))) ((xException)))
                          xqs.write ((((xqs).xfilter)).apply ((((unsupported)).apply ((xremaining_lookup_params)))))
                          (((unsupported)).apply)
                          (((unsupported)).apply ((((xIncorrectLookupParameters)).apply ((xe)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xqs)) ((xsearch_may_have_duplicates)))) ((((((xself).xmodel_admin).xget_search_results)).apply ((xrequest)) ((xqs)) (((xself).xquery)))))
                        (((unsupported)).apply (((xself).xclear_all_filters_qs)) ((((unsupported)).apply (((xself).xget_query_string)) ((xremaining_lookup_params)) (((((xself).xget_filters_params)).apply)))))
                        ((xfilters_may_have_duplicates).or (xsearch_may_have_duplicates)).if
                          seq
                            xqs.write (((unsupported)).apply (((xqs).xfilter)) ((((xOuterRef)).apply ("pk"))))
                            xqs.write (((((xself).xroot_queryset).xfilter)).apply ((((xExists)).apply ((xqs)))))
                        xordering.write ((((xself).xget_ordering)).apply ((xrequest)) ((xqs)))
                        xqs.write ((((xqs).xorder_by)).apply ((((unsupported)).apply ((xordering)))))
                        ((((xqs).xquery).xselect_related).not).if
                          xqs.write ((((xself).xapply_select_related)).apply ((xqs)))
                        (((unsupported)).apply ((xqs)))
                xapply_select_related.write
                  [xself xqs]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xlist_select_related)) (TRUE)).if
                          (((unsupported)).apply (((((xqs).xselect_related)).apply)))
                        (((unsupported)).apply (((xself).xlist_select_related)) (FALSE)).if
                          ((((xself).xhas_related_field_in_list_display)).apply).if
                            (((unsupported)).apply (((((xqs).xselect_related)).apply)))
                        ((xself).xlist_select_related).if
                          (((unsupported)).apply (((((xqs).xselect_related)).apply ((((unsupported)).apply (((xself).xlist_select_related)))))))
                        (((unsupported)).apply ((xqs)))
                xhas_related_field_in_list_display.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply ((xfield_name)) (((xself).xlist_display)))
                          (((unsupported)).apply ((xFieldDoesNotExist)))
                            xfield.write (((((xself).xlookup_opts).xget_field)).apply ((xfield_name)))
                            (((xisinstance)).apply (((xfield).xremote_field)) ((xManyToOneRel))).if
                              ((xfield_name).neq ((((xfield).xget_attname)).apply)).if
                                (((unsupported)).apply (TRUE))
                        (((unsupported)).apply (FALSE))
                xurl_for_result.write
                  [xself xresult]
                    memory > xpk
                    seq > @
                      seq
                        xpk.write (((xgetattr)).apply ((xresult)) (((xself).xpk_attname)))
                        (((unsupported)).apply ((((unsupported)).apply ((xreverse)) (("admin:%s_%s_change".mod (((unsupported)).apply ((((xself).xopts).xapp_label)) ((((xself).xopts).xmodel_name))))) ((((unsupported)).apply ((((xquote)).apply ((xpk)))))) (((((xself).xmodel_admin).xadmin_site).xname)))))