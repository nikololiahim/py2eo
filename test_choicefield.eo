memory > xFormFieldAssertionsMixin
memory > xlist
memory > xChoiceField
memory > xFirstNames
memory > xForm
memory > xmodels
memory > xSimpleTestCase
memory > xChoiceFieldForm
memory > xValidationError
[] > test_choicefield
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_choicefield_choices_default
        memory > xtest_choicefield_callable_may_evaluate_to_different_values
        memory > xtest_choicefield_callable
        memory > xtest_choicefield_disabled
        memory > xtest_choicefield_3
        memory > xtest_choicefield_enumeration
        memory > xtest_choicefield_2
        memory > xtest_choicefield_4
        memory > xtest_choicefield_1
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xFormFieldAssertionsMixin)) ((xSimpleTestCase)))
              seq
                xtest_choicefield_1.write
                  [xself]
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("1") ("One"))) ((((unsupported)).apply ("2") ("Two"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply (""))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ("'This field is required.'"))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply ("1"))))
                        xmsg.write "'Select a valid choice. 3 is not one of the available choices.'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("3"))
                xtest_choicefield_2.write
                  [xself]
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("1") ("One"))) ((((unsupported)).apply ("2") ("Two"))))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (((((xf).xclean)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (((((xf).xclean)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply ("1"))))
                        xmsg.write "'Select a valid choice. 3 is not one of the available choices.'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("3"))
                xtest_choicefield_3.write
                  [xself]
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("J") (((((xf).xclean)).apply ("J"))))
                        xmsg.write "'Select a valid choice. John is not one of the available choices.'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("John"))
                xtest_choicefield_4.write
                  [xself]
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("Numbers") ((((unsupported)).apply ((((unsupported)).apply ("1") ("One"))) ((((unsupported)).apply ("2") ("Two"))))))) ((((unsupported)).apply ("Letters") ((((unsupported)).apply ((((unsupported)).apply ("3") ("A"))) ((((unsupported)).apply ("4") ("B"))))))) ((((unsupported)).apply ("5") ("Other"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("1") (((((xf).xclean)).apply ("1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("3") (((((xf).xclean)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("3") (((((xf).xclean)).apply ("3"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("5") (((((xf).xclean)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("5") (((((xf).xclean)).apply ("5"))))
                        xmsg.write "'Select a valid choice. 6 is not one of the available choices.'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("6"))
                xtest_choicefield_choices_default.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xChoiceField)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xchoices)) ((((unsupported)).apply)))
                xtest_choicefield_callable.write
                  [xself]
                    memory > xchoices
                    memory > xf
                    seq > @
                      seq
                        xchoices.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("J") ("John"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        xf.write (((unsupported)).apply ((xChoiceField)) ((xchoices)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("J") (((((xf).xclean)).apply ("J"))))
                xtest_choicefield_callable_may_evaluate_to_different_values.write
                  [xself]
                    memory > xchoices_as_callable
                    memory > xform
                    memory > xchoicefield
                    memory > xchoices
                    seq > @
                      seq
                        xchoices.write (((unsupported)).apply)
                        xchoices_as_callable.write
                          []
                            seq > @
                              (((unsupported)).apply ((xchoices)))
                        (((unsupported)).apply ((xForm)))
                          xchoicefield.write (((unsupported)).apply ((xChoiceField)) ((xchoices_as_callable)))
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("J") ("John"))))
                        xform.write (((xChoiceFieldForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ("J") ("John"))))) ((((xlist)).apply (((((unsupported)).apply (((xform).xfields)) ("choicefield")).xchoices)))))
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("P") ("Paul"))))
                        xform.write (((xChoiceFieldForm)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ("P") ("Paul"))))) ((((xlist)).apply (((((unsupported)).apply (((xform).xfields)) ("choicefield")).xchoices)))))
                xtest_choicefield_disabled.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply ((xChoiceField)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John"))) ((((unsupported)).apply ("P") ("Paul"))))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertWidgetRendersTo)).apply ((xf)) ("<select id=\"id_f\" name=\"f\" disabled><option value=\"J\">John</option><option value=\"P\">Paul</option></select>"))
                xtest_choicefield_enumeration.write
                  [xself]
                    memory > xJOHN
                    memory > xmsg
                    memory > xf
                    memory > xPAUL
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xTextChoices)))
                          seq
                            xJOHN.write (((unsupported)).apply ("J") ("John"))
                            xPAUL.write (((unsupported)).apply ("P") ("Paul"))
                        xf.write (((unsupported)).apply ((xChoiceField)) (((xFirstNames).xchoices)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xclean)).apply ("J"))) ("J"))
                        xmsg.write "'Select a valid choice. 3 is not one of the available choices.'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("3"))