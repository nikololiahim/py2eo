memory > xc
memory > x_lazy_re_compile
memory > xValueError
memory > xHttpRequest
memory > xsuper
memory > xargs
memory > xgetattr
memory > xWSGIRequest
memory > xlen
memory > xTypeError
memory > xQueryDict
memory > xBytesIO
memory > xrepercent_broken_unicode
memory > xbase
memory > xsettings
memory > xint
memory > xhasattr
memory > xproperty
memory > xset_script_prefix
memory > xparse_cookie
memory > xsignals
memory > xLimitedStream
memory > xkwargs
[] > wsgi
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__call__
        memory > x_read_limited
        memory > xrequest_class
        memory > xget_path_info
        memory > xGET
        memory > xget_script_name
        memory > x_set_post
        memory > xFILES
        memory > xget_str_from_wsgi
        memory > xread
        memory > xreadline
        memory > xget_bytes_from_wsgi
        memory > x__init__
        memory > x_get_post
        memory > xCOOKIES
        memory > x_get_scheme
        memory > x_slashes_re
        memory > xPOST
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_slashes_re.write (((x_lazy_re_compile)).apply ("/+"))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xstream xlimit]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstream)) ((xstream)))
                        (((unsupported)).apply (((xself).xremaining)) ((xlimit)))
                        (((unsupported)).apply (((xself).xbuffer)) (""))
                x_read_limited.write
                  [xself xsize]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xsize)) ("None: is there a None literal in the EO language?")).or ((xsize).greater ((xself).xremaining))).if
                          xsize.write ((xself).xremaining)
                        ((xsize).eq 0).if
                          (((unsupported)).apply (""))
                        xresult.write (((((xself).xstream).xread)).apply ((xsize)))
                        (((unsupported)).apply (((xself).xremaining)) ((((xlen)).apply ((xresult)))))
                        (((unsupported)).apply ((xresult)))
                xread.write
                  [xself xsize]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xsize)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xresult.write (((xself).xbuffer).add ((xself).x_read_limited))
                            (((unsupported)).apply (((xself).xbuffer)) (""))
                          ((xsize).less (((xlen)).apply (((xself).xbuffer)))).if
                            seq
                              xresult.write (((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply ((xsize)))))
                              (((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply ((xsize)))))))
                            seq
                              xresult.write (((xself).xbuffer).add ((((xself).x_read_limited)).apply (((xsize).sub (((xlen)).apply (((xself).xbuffer)))))))
                              (((unsupported)).apply (((xself).xbuffer)) (""))
                        (((unsupported)).apply ((xresult)))
                xreadline.write
                  [xself xsize]
                    memory > xsio
                    memory > xchunk
                    memory > xline
                    seq > @
                      (((unsupported)).apply)
                        while.
                          ((((unsupported)).apply ("n") (((xself).xbuffer))).and ((((unsupported)).apply ((xsize)) ("None: is there a None literal in the EO language?")).or ((((xlen)).apply (((xself).xbuffer))).less (xsize))))
                          [unused]
                            seq > @
                              seq
                                (xsize).if
                                  xchunk.write ((((xself).x_read_limited)).apply (((xsize).sub (((xlen)).apply (((xself).xbuffer))))))
                                  xchunk.write ((xself).x_read_limited)
                                ((xchunk).not).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply (((xself).xbuffer)) ((xchunk)))
                        xsio.write (((xBytesIO)).apply (((xself).xbuffer)))
                        (xsize).if
                          xline.write ((((xsio).xreadline)).apply ((xsize)))
                          xline.write ((xsio).xreadline)
                        (((unsupported)).apply (((xself).xbuffer)) (((xsio).xread)))
                        (((unsupported)).apply ((xline)))
            (((unsupported)).apply ((xHttpRequest)))
              seq
                x__init__.write
                  [xself xenviron]
                    memory > xcontent_length
                    memory > xscript_name
                    memory > xpath_info
                    seq > @
                      seq
                        xscript_name.write (((xget_script_name)).apply ((xenviron)))
                        xpath_info.write ((((xget_path_info)).apply ((xenviron))).or "/")
                        (((unsupported)).apply (((xself).xenviron)) ((xenviron)))
                        (((unsupported)).apply (((xself).xpath_info)) ((xpath_info)))
                        (((unsupported)).apply (((xself).xpath)) (("%s/%s".mod (((unsupported)).apply (((((xscript_name).xrstrip)).apply ("/"))) (((((xpath_info).xreplace)).apply ("/") ("") (1)))))))
                        (((unsupported)).apply (((xself).xMETA)) ((xenviron)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("PATH_INFO"))) ((xpath_info)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xMETA)) ("SCRIPT_NAME"))) ((xscript_name)))
                        (((unsupported)).apply (((xself).xmethod)) (((((unsupported)).apply ((xenviron)) ("REQUEST_METHOD")).xupper)))
                        bogusForceDataize.write ((((xself).x_set_content_type_params)).apply ((xenviron)))
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                          xcontent_length.write (((xint)).apply (((((xenviron).xget)).apply ("CONTENT_LENGTH"))))
                          xcontent_length.write 0
                        (((unsupported)).apply (((xself).x_stream)) ((((xLimitedStream)).apply ((((unsupported)).apply (((xself).xenviron)) ("wsgi.input"))) ((xcontent_length)))))
                        (((unsupported)).apply (((xself).x_read_started)) (FALSE))
                        (((unsupported)).apply (((xself).xresolver_match)) ("None: is there a None literal in the EO language?"))
                x_get_scheme.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xenviron).xget)).apply ("wsgi.url_scheme"))))
                xGET.write
                  [xself]
                    memory > xraw_query_string
                    seq > @
                      (((unsupported)).apply)
                        xraw_query_string.write (((xget_bytes_from_wsgi)).apply (((xself).xenviron)) ("QUERY_STRING") (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xQueryDict)) ((xraw_query_string)) (((xself).x_encoding)))))
                x_get_post.write
                  [xself]
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("_post")).not).if
                          unsupported
                        (((unsupported)).apply (((xself).x_post)))
                x_set_post.write
                  [xself xpost]
                    seq > @
                      (((unsupported)).apply (((xself).x_post)) ((xpost)))
                xCOOKIES.write
                  [xself]
                    memory > xraw_cookie
                    seq > @
                      (((unsupported)).apply)
                        xraw_cookie.write (((xget_str_from_wsgi)).apply (((xself).xenviron)) ("HTTP_COOKIE") (""))
                        (((unsupported)).apply ((((xparse_cookie)).apply ((xraw_cookie)))))
                xFILES.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply ((xself)) ("_files")).not).if
                          unsupported
                        (((unsupported)).apply (((xself).x_files)))
                xPOST.write (((xproperty)).apply ((x_get_post)) ((x_set_post)))
            (((unsupported)).apply (((xbase).xBaseHandler)))
              seq
                xrequest_class.write (xWSGIRequest)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsuper).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        unsupported
                x__call__.write
                  [xself xenviron xstart_response]
                    memory > xresponse_headers
                    memory > xresponse
                    memory > xrequest
                    memory > xstatus
                    seq > @
                      seq
                        bogusForceDataize.write (((xset_script_prefix)).apply ((((xget_script_name)).apply ((xenviron)))))
                        (((unsupported)).apply ((((xsignals).xrequest_started).xsend)) (((xself).x__class__)) ((xenviron)))
                        xrequest.write ((((xself).xrequest_class)).apply ((xenviron)))
                        xresponse.write ((((xself).xget_response)).apply ((xrequest)))
                        (((unsupported)).apply (((xresponse).x_handler_class)) (((xself).x__class__)))
                        xstatus.write ("%d %s".mod (((unsupported)).apply (((xresponse).xstatus_code)) (((xresponse).xreason_phrase))))
                        xresponse_headers.write (((unsupported)).apply ((((unsupported)).apply (((xresponse).xitems)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("Set-Cookie") ((((unsupported)).apply (((xc).xoutput)) (""))))) ((xc)) ((((xresponse).xcookies).xvalues)))))))
                        bogusForceDataize.write (((xstart_response)).apply ((xstatus)) ((xresponse_headers)))
                        ((((unsupported)).apply ((((xgetattr)).apply ((xresponse)) ("file_to_stream") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).and ((((xenviron).xget)).apply ("wsgi.file_wrapper"))).if
                          seq
                            (((unsupported)).apply ((((xresponse).xfile_to_stream).xclose)) (((xresponse).xclose)))
                            xresponse.write (((((unsupported)).apply ((xenviron)) ("wsgi.file_wrapper"))).apply (((xresponse).xfile_to_stream)) (((xresponse).xblock_size)))
                        (((unsupported)).apply ((xresponse)))
            xget_path_info.write
              [xenviron]
                memory > xpath_info
                seq > @
                  seq
                    unsupported
                    xpath_info.write (((xget_bytes_from_wsgi)).apply ((xenviron)) ("PATH_INFO") ("/"))
                    (((unsupported)).apply (((((xrepercent_broken_unicode)).apply ((xpath_info))).xdecode)))
            xget_script_name.write
              [xenviron]
                memory > xscript_name
                memory > xscript_url
                memory > xpath_info
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply (((xsettings).xFORCE_SCRIPT_NAME)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply (((xsettings).xFORCE_SCRIPT_NAME)))
                    xscript_url.write ((((xget_bytes_from_wsgi)).apply ((xenviron)) ("SCRIPT_URL") ("")).or (((xget_bytes_from_wsgi)).apply ((xenviron)) ("REDIRECT_URL") ("")))
                    (xscript_url).if
                      seq
                        (((unsupported)).apply ("//") ((xscript_url))).if
                          xscript_url.write ((((x_slashes_re).xsub)).apply ("/") ((xscript_url)))
                        xpath_info.write (((xget_bytes_from_wsgi)).apply ((xenviron)) ("PATH_INFO") (""))
                        xscript_name.write ((xpath_info).if (((unsupported)).apply ((xscript_url)) ((((unsupported)).apply (((((xlen)).apply ((xpath_info))).neg))))) (xscript_url))
                      xscript_name.write (((xget_bytes_from_wsgi)).apply ((xenviron)) ("SCRIPT_NAME") (""))
                    (((unsupported)).apply (((xscript_name).xdecode)))
            xget_bytes_from_wsgi.write
              [xenviron xkey xdefault]
                memory > xvalue
                seq > @
                  seq
                    (((unsupported)).apply)
                    xvalue.write ((((xenviron).xget)).apply ((xkey)) ((xdefault)))
                    (((unsupported)).apply (((((xvalue).xencode)).apply ("iso-8859-1"))))
            xget_str_from_wsgi.write
              [xenviron xkey xdefault]
                memory > xvalue
                seq > @
                  seq
                    (((unsupported)).apply)
                    xvalue.write (((xget_bytes_from_wsgi)).apply ((xenviron)) ((xkey)) ((xdefault)))
                    (((unsupported)).apply ((((unsupported)).apply (((xvalue).xdecode)) ("replace"))))