memory > xlang
memory > xforms
memory > xTestCase
memory > xAlbum
memory > xselect_lang
memory > xAlbumForm
memory > xoverride_settings
memory > xVideoStreamForm
memory > xModelChoiceField
memory > xVideoStream
memory > xAutocompleteSelect
memory > xRequiredBandForm
memory > xBand
memory > xlist
memory > xadmin
memory > xtranslation
memory > xReleaseEvent
memory > xNotRequiredBandForm
[] > test_autocomplete_widget
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_build_attrs_no_custom_class
        memory > xband
        memory > xtest_build_attrs_required_field
        memory > xtest_render_options
        memory > xempty_option
        memory > xtest_render_options_required_field
        memory > xtest_render_options_not_required_field
        memory > xfields
        memory > xtest_build_attrs
        memory > xtest_render_options_fk_as_pk
        memory > xmaxDiff
        memory > xtest_media
        memory > xtest_get_url
        memory > xtest_build_attrs_not_required_field
        memory > xwidgets
        memory > xmodel
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xforms).xModelForm)))
              (((unsupported)).apply)
                seq
                  xmodel.write (xAlbum)
                  xfields.write (((unsupported)).apply ("band") ("featuring"))
                  xwidgets.write (((unsupported)).apply ("band") ((((unsupported)).apply ((xAutocompleteSelect)) ((((((xAlbum).x_meta).xget_field)).apply ("band"))) (((xadmin).xsite)) ((((unsupported)).apply ("class") ("my-class"))))) ("featuring") ((((xAutocompleteSelect)).apply ((((((xAlbum).x_meta).xget_field)).apply ("featuring"))) (((xadmin).xsite)))))
            (((unsupported)).apply (((xforms).xForm)))
              xband.write (((unsupported)).apply ((xModelChoiceField)) ((((((xAlbum).xobjects).xall)).apply)) ((((xAutocompleteSelect)).apply (((((((xAlbum).x_meta).xget_field)).apply ("band")).xremote_field)) (((xadmin).xsite)))) (FALSE))
            (((unsupported)).apply (((xforms).xForm)))
              xband.write (((unsupported)).apply ((xModelChoiceField)) ((((((xAlbum).xobjects).xall)).apply)) ((((xAutocompleteSelect)).apply (((((((xAlbum).x_meta).xget_field)).apply ("band")).xremote_field)) (((xadmin).xsite)))) (TRUE))
            (((unsupported)).apply (((xforms).xModelForm)))
              (((unsupported)).apply)
                seq
                  xmodel.write (xVideoStream)
                  xfields.write (((unsupported)).apply ("release_event"))
                  xwidgets.write (((unsupported)).apply ("release_event") ((((xAutocompleteSelect)).apply ((((((xVideoStream).x_meta).xget_field)).apply ("release_event"))) (((xadmin).xsite)))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("admin_widgets.urls"))))
              seq
                xempty_option.write "<option value=\"\"></option>"
                xmaxDiff.write 1000
                xtest_build_attrs.write
                  [xself]
                    memory > xform
                    memory > xattrs
                    seq > @
                      seq
                        xform.write (((xAlbumForm)).apply)
                        xattrs.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((((unsupported)).apply ((xform)) ("band")).xfield).xwidget).xget_context)) ("my_field") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ("widget"))) ("attrs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattrs)) ((((unsupported)).apply ("class") ("my-class admin-autocomplete") ("data-ajax--cache") ("false") ("data-ajax--delay") (250) ("data-ajax--type") ("GET") ("data-ajax--url") ("/autocomplete/") ("data-theme") ("admin-autocomplete") ("data-allow-clear") ("false") ("data-app-label") ("admin_widgets") ("data-field-name") ("band") ("data-model-name") ("album") ("data-placeholder") ("") ("lang") ("en"))))
                xtest_build_attrs_no_custom_class.write
                  [xself]
                    memory > xform
                    memory > xattrs
                    seq > @
                      seq
                        xform.write (((xAlbumForm)).apply)
                        xattrs.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((((unsupported)).apply ((xform)) ("featuring")).xfield).xwidget).xget_context)) ("name") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) ("widget"))) ("attrs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xattrs)) ("class"))) ("admin-autocomplete"))
                xtest_build_attrs_not_required_field.write
                  [xself]
                    memory > xform
                    memory > xattrs
                    seq > @
                      seq
                        xform.write (((xNotRequiredBandForm)).apply)
                        xattrs.write ((((((((unsupported)).apply ((xform)) ("band")).xfield).xwidget).xbuild_attrs)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertJSONEqual)).apply ((((unsupported)).apply ((xattrs)) ("data-allow-clear"))) (TRUE))
                xtest_build_attrs_required_field.write
                  [xself]
                    memory > xform
                    memory > xattrs
                    seq > @
                      seq
                        xform.write (((xRequiredBandForm)).apply)
                        xattrs.write ((((((((unsupported)).apply ((xform)) ("band")).xfield).xwidget).xbuild_attrs)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertJSONEqual)).apply ((((unsupported)).apply ((xattrs)) ("data-allow-clear"))) (FALSE))
                xtest_get_url.write
                  [xself]
                    memory > xw
                    memory > xurl
                    memory > xrel
                    seq > @
                      seq
                        xrel.write (((((xAlbum).x_meta).xget_field)).apply ("band"))
                        xw.write (((xAutocompleteSelect)).apply ((xrel)) (((xadmin).xsite)))
                        xurl.write ((((xw).xget_url)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xurl)) ("/autocomplete/"))
                xtest_render_options.write
                  [xself]
                    memory > xwho
                    memory > xoption
                    memory > xform
                    memory > xoutput
                    memory > xselected_option
                    memory > xbeatles
                    seq > @
                      seq
                        xbeatles.write (((unsupported)).apply ((((xBand).xobjects).xcreate)) ("The Beatles") ("rock"))
                        xwho.write (((unsupported)).apply ((((xBand).xobjects).xcreate)) ("The Who") ("rock"))
                        xform.write (((unsupported)).apply ((xAlbumForm)) ((((unsupported)).apply ("band") (((xbeatles).xuuid)))))
                        xoutput.write ((((xform).xas_table)).apply)
                        xselected_option.write ("<option value=\"%s\" selected>The Beatles</option>".mod ((xbeatles).xuuid))
                        xoption.write ("<option value=\"%s\">The Who</option>".mod ((xwho).xuuid))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xselected_option)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xoption)) ((xoutput)))
                        xform.write (((unsupported)).apply ((xAlbumForm)) ((((unsupported)).apply ("featuring") ((((unsupported)).apply (((xbeatles).xpk)) (((xwho).xpk)))))))
                        xoutput.write ((((xform).xas_table)).apply)
                        xselected_option.write ("<option value=\"%s\" selected>The Beatles</option>".mod ((xbeatles).xpk))
                        xoption.write ("<option value=\"%s\" selected>The Who</option>".mod ((xwho).xpk))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xselected_option)) ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xoption)) ((xoutput)))
                xtest_render_options_required_field.write
                  [xself]
                    memory > xform
                    memory > xoutput
                    seq > @
                      seq
                        unsupported
                        xform.write (((xNotRequiredBandForm)).apply)
                        xoutput.write ((((xform).xas_table)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xempty_option)) ((xoutput)))
                xtest_render_options_not_required_field.write
                  [xself]
                    memory > xform
                    memory > xoutput
                    seq > @
                      seq
                        unsupported
                        xform.write (((xRequiredBandForm)).apply)
                        xoutput.write ((((xform).xas_table)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xself).xempty_option)) ((xoutput)))
                xtest_render_options_fk_as_pk.write
                  [xself]
                    memory > xform
                    memory > xoutput
                    memory > xrelease_event
                    memory > xrubber_soul
                    memory > xselected_option
                    memory > xbeatles
                    seq > @
                      seq
                        xbeatles.write (((unsupported)).apply ((((xBand).xobjects).xcreate)) ("The Beatles") ("rock"))
                        xrubber_soul.write (((unsupported)).apply ((((xAlbum).xobjects).xcreate)) ("Rubber Soul") ((xbeatles)))
                        xrelease_event.write (((unsupported)).apply ((((xReleaseEvent).xobjects).xcreate)) ("Test Target") ((xrubber_soul)))
                        xform.write (((unsupported)).apply ((xVideoStreamForm)) ((((unsupported)).apply ("release_event") (((xrelease_event).xpk)))))
                        xoutput.write ((((xform).xas_table)).apply)
                        xselected_option.write ("<option value=\"%s\" selected>Test Target</option>".mod ((xrelease_event).xpk))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xselected_option)) ((xoutput)))
                xtest_media.write
                  [xself]
                    memory > xexpected_files
                    memory > xlanguages
                    memory > xbase_files
                    memory > xrel
                    seq > @
                      seq
                        xrel.write ((((((xAlbum).x_meta).xget_field)).apply ("band")).xremote_field)
                        xbase_files.write (((unsupported)).apply ("admin/js/vendor/jquery/jquery.min.js") ("admin/js/vendor/select2/select2.full.min.js") ("admin/js/jquery.init.js") ("admin/js/autocomplete.js"))
                        xlanguages.write (((unsupported)).apply ((((unsupported)).apply ("de") ("de"))) ((((unsupported)).apply ("de-at") ("de"))) ((((unsupported)).apply ("de-ch-1901") ("de"))) ((((unsupported)).apply ("en-latn-us") ("en"))) ((((unsupported)).apply ("nl-nl-x-informal") ("nl"))) ((((unsupported)).apply ("zh-hans-HK") ("zh-CN"))) ((((unsupported)).apply ("00") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("sr-cyrl") ("sr-Cyrl"))) ((((unsupported)).apply ("zh-hans") ("zh-CN"))) ((((unsupported)).apply ("zh-hant") ("zh-TW"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlang)) ((xselect_lang)))) ((xlanguages)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlang)))))
                            seq
                              (xselect_lang).if
                                xexpected_files.write (((((unsupported)).apply ((xbase_files)) ((((unsupported)).apply (2)))).add (((unsupported)).apply (("admin/js/vendor/select2/i18n/%s.js".mod (xselect_lang))))).add (((unsupported)).apply ((xbase_files)) ((((unsupported)).apply (2)))))
                                xexpected_files.write (xbase_files)
                              (((unsupported)).apply (((((xtranslation).xoverride)).apply ((xlang)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xAutocompleteSelect)).apply ((xrel)) (((xadmin).xsite))).xmedia).x_js)) ((((xlist)).apply ((xexpected_files)))))