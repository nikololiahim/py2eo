memory > xTestImageFieldFile
memory > xPerson
memory > xValueError
memory > xTestCase
memory > xopen
memory > xImageFieldTestMixin
memory > xhasattr
memory > xos
memory > xgetattr
memory > xskipIf
memory > xhash
memory > xpickle
memory > xlist
memory > xSerializeMixin
memory > xImageFile
memory > xImageFieldTwoDimensionsTests
memory > xtemp_storage_dir
memory > x__file__
memory > xshutil
memory > xImproperlyConfigured
memory > xImage
[] > test_imagefield
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_assignment_to_None
        memory > xtest_defer
        memory > xcheck_dimensions
        memory > xPersonWithHeightAndWidth
        memory > xPersonModel
        memory > xtest_assignment
        memory > xFile
        memory > xtest_delete_when_missing
        memory > xtearDown
        memory > xPersonDimensionsFirst
        memory > xtest_equal_notequal_hash
        memory > xPersonWithHeight
        memory > xImage2
        memory > xtest_pickle
        memory > xtest_create
        memory > xtest_field_save_and_delete_methods
        memory > xtest_size_method
        memory > xtest_constructor
        memory > xtest_instantiate_missing
        memory > xtest_image_after_constructor
        memory > xsetUp
        memory > xPersonTwoImages
        memory > xtest_default_value
        memory > xlockfile
        memory > xtest_dimensions
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImproperlyConfigured)))
              (((unsupported)).apply)
              xImage2.write "None: is there a None literal in the EO language?"
            (xImage).if
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                (((unsupported)).apply ((xPersonWithHeight)) ((xPersonWithHeightAndWidth)) ((xPersonDimensionsFirst)) ((xPerson)))
                xPersonTwoImages.write (xPerson)
            (((unsupported)).apply ((xSerializeMixin)))
              seq
                (((unsupported)).apply)
                xlockfile.write (x__file__)
                xPersonModel.write (xPersonWithHeightAndWidth)
                xFile.write (xImageFile)
                xsetUp.write
                  [xself]
                    memory > xfile_path2
                    memory > xfile_path1
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((((xos).xpath).xexists)).apply ((xtemp_storage_dir))).if
                          bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xtemp_storage_dir)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xtemp_storage_dir)))
                        xfile_path1.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("4x8.png"))
                        (((unsupported)).apply (((xself).xfile1)) ((((unsupported)).apply (((xself).xFile)) ((((xopen)).apply ((xfile_path1)) ("rb"))) ("4x8.png"))))
                        xfile_path2.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("8x4.png"))
                        (((unsupported)).apply (((xself).xfile2)) ((((unsupported)).apply (((xself).xFile)) ((((xopen)).apply ((xfile_path2)) ("rb"))) ("8x4.png"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xfile1).xclose)).apply)
                        bogusForceDataize.write (((((xself).xfile2).xclose)).apply)
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xtemp_storage_dir)))
                xcheck_dimensions.write
                  [xself xinstance xwidth xheight xfield_name]
                    memory > xfield
                    memory > xwidth_field_name
                    memory > xheight_field_name
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfield.write (((xgetattr)).apply ((xinstance)) ((xfield_name)))
                        ((((unsupported)).apply ((xwidth)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xheight)) ("None: is there a None literal in the EO language?"))).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write (((xgetattr)).apply ((xfield)) ("width"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write (((xgetattr)).apply ((xfield)) ("height"))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfield).xwidth)) ((xwidth)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfield).xheight)) ((xheight)))
                        xwidth_field_name.write ((xfield_name).add "_width")
                        (((xhasattr)).apply ((xinstance)) ((xwidth_field_name))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xinstance)) ((xwidth_field_name)))) ((xwidth)))
                        xheight_field_name.write ((xfield_name).add "_height")
                        (((xhasattr)).apply ((xinstance)) ((xheight_field_name))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xinstance)) ((xheight_field_name)))) ((xheight)))
            (((unsupported)).apply ((xImageFieldTestMixin)) ((xTestCase)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xtest_equal_notequal_hash.write
                  [xself]
                    memory > xp1_db
                    memory > xp1
                    memory > xp2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp1.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write (((((xp1).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        xp2.write (((unsupported)).apply (((xself).xPersonModel)) ("Bob"))
                        bogusForceDataize.write (((((xp2).xmugshot).xsave)).apply ("mug") (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1).xmugshot).eq ((xp2).xmugshot))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1).xmugshot).neq ((xp2).xmugshot))) (TRUE))
                        xp1_db.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joe"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1_db).xmugshot).eq ((xp2).xmugshot))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1_db).xmugshot).neq ((xp2).xmugshot))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1_db).xmugshot).eq ((xp1).xmugshot))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply (((xp1_db).xmugshot)))) ((((xhash)).apply (((xp1).xmugshot)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp1_db).xmugshot).neq ((xp1).xmugshot))) (FALSE))
                xtest_instantiate_missing.write
                  [xself]
                    memory > xp
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joan"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("shot") (((xself).xfile1)))
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joan"))
                        xpath.write (((xp).xmugshot).xpath)
                        bogusForceDataize.write ((((xshutil).xmove)).apply ((xpath)) (((xpath).add ".moved")))
                        (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joan"))
                xtest_delete_when_missing.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Fred"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("shot") (((xself).xfile1)))
                        bogusForceDataize.write ((((xos).xremove)).apply ((((xp).xmugshot).xpath)))
                        bogusForceDataize.write ((((xp).xdelete)).apply)
                xtest_size_method.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joan"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("shot") (((xself).xfile1)))
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joan"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xclosed)) (TRUE))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xclosed)) (TRUE))
                xtest_pickle.write
                  [xself]
                    memory > xp
                    memory > xloaded_mugshot
                    memory > xmugshot_dump
                    memory > xdump
                    memory > xloaded_p
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply ((xPerson)) ("Joe"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        xdump.write ((((xpickle).xdumps)).apply ((xp)))
                        xloaded_p.write ((((xpickle).xloads)).apply ((xdump)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xmugshot)) (((xloaded_p).xmugshot)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xurl)) ((((xloaded_p).xmugshot).xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xstorage)) ((((xloaded_p).xmugshot).xstorage)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xinstance)) ((((xloaded_p).xmugshot).xinstance)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xfield)) ((((xloaded_p).xmugshot).xfield)))
                        xmugshot_dump.write ((((xpickle).xdumps)).apply (((xp).xmugshot)))
                        xloaded_mugshot.write ((((xpickle).xloads)).apply ((xmugshot_dump)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xmugshot)) ((xloaded_mugshot)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xurl)) (((xloaded_mugshot).xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xstorage)) (((xloaded_mugshot).xstorage)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xinstance)) (((xloaded_mugshot).xinstance)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp).xmugshot).xfield)) (((xloaded_mugshot).xfield)))
                xtest_defer.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xPersonModel).xobjects).xcreate)) ("Joe") (((xself).xfile1)))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (1))))
                          xqs.write (((xlist)).apply (((((((xself).xPersonModel).xobjects).xdefer)).apply ("mugshot"))))
                        (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xqs)) (0)).xname)) ("Joe"))
            (((unsupported)).apply ((xImageFieldTestMixin)) ((xTestCase)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xtest_constructor.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        bogusForceDataize.write ((((xp).xsave)).apply)
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                xtest_image_after_constructor.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xp).xmugshot)) ((xTestImageFieldFile)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xp).xmugshot)))
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        (((unsupported)).apply (((xp).xmugshot)) (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                xtest_create.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xcreate)) ("Joe") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                xtest_default_value.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write ((((xself).xPersonModel)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xp).xmugshot)) ((xTestImageFieldFile)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xp).xmugshot)))
                xtest_assignment_to_None.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        (((unsupported)).apply (((xp).xmugshot)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xp).xmugshot)) (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4))
                xtest_field_save_and_delete_methods.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4))
                        (((unsupported)).apply ((((xp).xmugshot).xdelete)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xp).xmugshot).xname)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_dimensions.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joe"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (TRUE))
                        (((unsupported)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        (((unsupported)).apply (((xp).xmugshot)) (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (TRUE))
            (((unsupported)).apply ((xImageFieldTwoDimensionsTests)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xPersonModel.write (xPerson)
            (((unsupported)).apply ((xImageFieldTwoDimensionsTests)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xPersonModel.write (xPersonWithHeight)
            (((unsupported)).apply ((xImageFieldTwoDimensionsTests)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xPersonModel.write (xPersonDimensionsFirst)
            (((unsupported)).apply ((xImageFieldTwoDimensionsTests)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xPersonModel.write (xPersonDimensionsFirst)
                xFile.write (xFile)
            (((unsupported)).apply ((xImageFieldTestMixin)) ((xTestCase)) ((((xskipIf)).apply ((((unsupported)).apply ((xImage)) ("None: is there a None literal in the EO language?"))) ("Pillow is required to test ImageField"))))
              seq
                (((unsupported)).apply)
                xPersonModel.write (xPersonTwoImages)
                xtest_constructor.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) (((xself).xfile1)) (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        bogusForceDataize.write ((((xp).xsave)).apply)
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                xtest_create.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xcreate)) (((xself).xfile1)) (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                xtest_assignment.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xPersonModel)).apply)
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                        (((unsupported)).apply (((xp).xmugshot)) (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                        (((unsupported)).apply (((xp).xheadshot)) (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        (((unsupported)).apply (((xp).xmugshot)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        (((unsupported)).apply (((xp).xheadshot)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                xtest_field_save_and_delete_methods.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                        bogusForceDataize.write (((((xp).xheadshot).xsave)).apply ("head") (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        (((unsupported)).apply ((((xp).xheadshot).xdelete)) (TRUE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                        (((unsupported)).apply ((((xp).xmugshot).xdelete)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("headshot"))
                xtest_dimensions.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xp.write (((unsupported)).apply (((xself).xPersonModel)) ("Joe"))
                        bogusForceDataize.write (((((xp).xmugshot).xsave)).apply ("mug") (((xself).xfile1)))
                        bogusForceDataize.write (((((xp).xheadshot).xsave)).apply ("head") (((xself).xfile2)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        xp.write (((unsupported)).apply (((((xself).xPersonModel).xobjects).xget)) ("Joe"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xheadshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xheadshot).xwas_opened)) (TRUE))
                        (((unsupported)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        (((unsupported)).apply ((((xp).xheadshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("headshot"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xheadshot).xwas_opened)) (FALSE))
                        (((unsupported)).apply (((xp).xmugshot)) (((xself).xfile2)))
                        (((unsupported)).apply (((xp).xheadshot)) (((xself).xfile1)))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (8) (4) ("mugshot"))
                        bogusForceDataize.write ((((xself).xcheck_dimensions)).apply ((xp)) (4) (8) ("headshot"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xmugshot).xwas_opened)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xp).xheadshot).xwas_opened)) (TRUE))