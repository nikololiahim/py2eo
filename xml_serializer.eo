memory > xc
memory > xDefusedXmlException
memory > xhandler
memory > xValueError
memory > xstr
memory > xapps
memory > xEntitiesForbidden
memory > xSimplerXMLGenerator
memory > xStopIteration
memory > xDTDForbidden
memory > xtype
memory > xsuper
memory > xObjectDoesNotExist
memory > xDefusedExpatParser
memory > xe
memory > xUnserializableContentError
memory > xisinstance
memory > xk
memory > xevent
memory > xnat_node
memory > xbase
memory > xf
memory > xsettings
memory > xException
memory > xhasattr
memory > xrelobj
memory > xnode
memory > xargs
memory > xLookupError
memory > xchild
memory > xgetattr
memory > xobj_node
memory > xfield_node
memory > xkey_value
memory > xmodels
memory > xjson
memory > xExternalReferenceForbidden
memory > xoptions
memory > xkwargs
memory > xTypeError
memory > xpulldom
[] > xml_serializer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_start_relational_field
        memory > x__str__
        memory > x__repr__
        memory > xentity_decl
        memory > xunparsed_entity_decl
        memory > xstart_serialization
        memory > x__next__
        memory > x_handle_fk_field_node
        memory > xhandle_m2m_field
        memory > xhandle_field
        memory > xindent
        memory > x_handle_m2m_field_node
        memory > x_get_model_from_node
        memory > x_ExpatParser
        memory > x_handle_object
        memory > xgetInnerText
        memory > xexternal_entity_ref_handler
        memory > xend_object
        memory > xhandle_fk_field
        memory > xstart_doctype_decl
        memory > xreset
        memory > x__init__
        memory > xstart_object
        memory > xend_serialization
        memory > x_make_parser
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xbase).xSerializer)))
              seq
                unsupported
                xindent.write
                  [xself xlevel]
                    seq > @
                      (((unsupported)).apply ((((((xself).xoptions).xget)).apply ("indent"))) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write (((((xself).xxml).xignorableWhitespace)).apply (("n".add ((" ".mul (((((xself).xoptions).xget)).apply ("indent"))).mul (xlevel)))))
                xstart_serialization.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xxml)) ((((xSimplerXMLGenerator)).apply (((xself).xstream)) ((((((xself).xoptions).xget)).apply ("encoding") (((xsettings).xDEFAULT_CHARSET)))))))
                        bogusForceDataize.write (((((xself).xxml).xstartDocument)).apply)
                        bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("django-objects") ((((unsupported)).apply ("version") ("1.0"))))
                xend_serialization.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xindent)).apply (0))
                        bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("django-objects"))
                        bogusForceDataize.write (((((xself).xxml).xendDocument)).apply)
                xstart_object.write
                  [xself xobj]
                    memory > xobj_pk
                    memory > xattrs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xhasattr)).apply ((xobj)) ("_meta")).not).if
                          (((unsupported)).apply (((((xbase).xSerializationError)).apply (("Non-model object (%s) encountered during serialization".mod (((xtype)).apply ((xobj))))))))
                        bogusForceDataize.write ((((xself).xindent)).apply (1))
                        xattrs.write (((unsupported)).apply ("model") ((((xstr)).apply (((xobj).x_meta)))))
                        ((((xself).xuse_natural_primary_keys).not).or ((((xhasattr)).apply ((xobj)) ("natural_key")).not)).if
                          seq
                            xobj_pk.write ((xobj).xpk)
                            (((unsupported)).apply ((xobj_pk)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((unsupported)).apply ((xattrs)) ("pk"))) ((((xstr)).apply ((xobj_pk)))))
                        bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("object") ((xattrs)))
                xend_object.write
                  [xself xobj]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xindent)).apply (1))
                        bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("object"))
                xhandle_field.write
                  [xself xobj xfield]
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xindent)).apply (2))
                        bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("field") ((((unsupported)).apply ("name") (((xfield).xname)) ("type") (((((xfield).xget_internal_type)).apply)))))
                        (((unsupported)).apply ((((xgetattr)).apply ((xobj)) (((xfield).xname)))) ("None: is there a None literal in the EO language?")).if
                          seq
                            xvalue.write ((((xfield).xvalue_to_string)).apply ((xobj)))
                            (((((xfield).xget_internal_type)).apply).eq "JSONField").if
                              xvalue.write (((unsupported)).apply (((xjson).xdumps)) ((xvalue)) (((xfield).xencoder)))
                            (((unsupported)).apply ((xUnserializableContentError)))
                              bogusForceDataize.write (((((xself).xxml).xcharacters)).apply ((xvalue)))
                              (((unsupported)).apply ((((xValueError)).apply (("%s.%s (pk:%s) contains unserializable characters".mod (((unsupported)).apply ((((xobj).x__class__).x__name__)) (((xfield).xname)) (((xobj).xpk))))))))
                          bogusForceDataize.write (((((xself).xxml).xaddQuickElement)).apply ("None"))
                        bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("field"))
                xhandle_fk_field.write
                  [xself xobj xfield]
                    memory > xrelated_att
                    memory > xrelated
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_start_relational_field)).apply ((xfield)))
                        xrelated_att.write (((xgetattr)).apply ((xobj)) (((((xfield).xget_attname)).apply)))
                        (((unsupported)).apply ((xrelated_att)) ("None: is there a None literal in the EO language?")).if
                          (((xself).xuse_natural_foreign_keys).and (((xhasattr)).apply ((((xfield).xremote_field).xmodel)) ("natural_key"))).if
                            seq
                              xrelated.write (((xgetattr)).apply ((xobj)) (((xfield).xname)))
                              xrelated.write ((((xrelated).xnatural_key)).apply)
                              (((unsupported)).apply ((xkey_value)) ((xrelated)))
                                seq
                                  bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("natural") ((((unsupported)).apply)))
                                  bogusForceDataize.write (((((xself).xxml).xcharacters)).apply ((((xstr)).apply ((xkey_value)))))
                                  bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("natural"))
                            bogusForceDataize.write (((((xself).xxml).xcharacters)).apply ((((xstr)).apply ((xrelated_att)))))
                          bogusForceDataize.write (((((xself).xxml).xaddQuickElement)).apply ("None"))
                        bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("field"))
                xhandle_m2m_field.write
                  [xself xobj xfield]
                    memory > xhandle_m2m
                    memory > xm2m_iter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((((xfield).xremote_field).xthrough).x_meta).xauto_created).if
                          seq
                            bogusForceDataize.write ((((xself).x_start_relational_field)).apply ((xfield)))
                            (((xself).xuse_natural_foreign_keys).and (((xhasattr)).apply ((((xfield).xremote_field).xmodel)) ("natural_key"))).if
                              xhandle_m2m.write
                                [xvalue]
                                  memory > xnatural
                                  seq > @
                                    seq
                                      xnatural.write ((((xvalue).xnatural_key)).apply)
                                      bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("object") ((((unsupported)).apply)))
                                      (((unsupported)).apply ((xkey_value)) ((xnatural)))
                                        seq
                                          bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("natural") ((((unsupported)).apply)))
                                          bogusForceDataize.write (((((xself).xxml).xcharacters)).apply ((((xstr)).apply ((xkey_value)))))
                                          bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("natural"))
                                      bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("object"))
                              xhandle_m2m.write
                                [xvalue]
                                  seq > @
                                    (((unsupported)).apply ((((xself).xxml).xaddQuickElement)) ("object") ((((unsupported)).apply ("pk") ((((xstr)).apply (((xvalue).xpk)))))))
                            xm2m_iter.write ((((((xgetattr)).apply ((xobj)) ("_prefetched_objects_cache") ((((unsupported)).apply))).xget)).apply (((xfield).xname)) (((((((xgetattr)).apply ((xobj)) (((xfield).xname))).xiterator)).apply)))
                            (((unsupported)).apply ((xrelobj)) ((xm2m_iter)))
                              bogusForceDataize.write (((xhandle_m2m)).apply ((xrelobj)))
                            bogusForceDataize.write (((((xself).xxml).xendElement)).apply ("field"))
                x_start_relational_field.write
                  [xself xfield]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xindent)).apply (2))
                        bogusForceDataize.write (((((xself).xxml).xstartElement)).apply ("field") ((((unsupported)).apply ("name") (((xfield).xname)) ("rel") (((((xfield).xremote_field).x__class__).x__name__)) ("to") ((((xstr)).apply (((((xfield).xremote_field).xmodel).x_meta)))))))
            (((unsupported)).apply (((xbase).xDeserializer)))
              seq
                unsupported
                x__init__.write
                  [xself xstream_or_string xusing xignorenonexistent]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xstream_or_string)) ((((unsupported)).apply ((xoptions)))))
                        (((unsupported)).apply (((xself).xhandle_forward_references)) (((((xoptions).xpop)).apply ("handle_forward_references") (FALSE))))
                        (((unsupported)).apply (((xself).xevent_stream)) (((((xpulldom).xparse)).apply (((xself).xstream)) (((((xself).x_make_parser)).apply)))))
                        (((unsupported)).apply (((xself).xdb)) ((xusing)))
                        (((unsupported)).apply (((xself).xignore)) ((xignorenonexistent)))
                x_make_parser.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xDefusedExpatParser)).apply)))
                x__next__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xevent)) ((xnode)))) (((xself).xevent_stream)))
                          (((xevent).eq "START_ELEMENT").and (((xnode).xnodeName).eq "object")).if
                            seq
                              bogusForceDataize.write (((((xself).xevent_stream).xexpandNode)).apply ((xnode)))
                              (((unsupported)).apply (((((xself).x_handle_object)).apply ((xnode)))))
                        (((unsupported)).apply ((xStopIteration)))
                x_handle_object.write
                  [xself xnode]
                    memory > xfield
                    memory > xdata
                    memory > xvalue
                    memory > xfield_names
                    memory > xobj
                    memory > xModel
                    memory > xdeferred_fields
                    memory > xfield_name
                    memory > xm2m_data
                    seq > @
                      seq
                        unsupported
                        xModel.write ((((xself).x_get_model_from_node)).apply ((xnode)) ("model"))
                        xdata.write (((unsupported)).apply)
                        ((((xnode).xhasAttribute)).apply ("pk")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((((xModel).x_meta).xpk).xattname)))) (((((((xModel).x_meta).xpk).xto_python)).apply (((((xnode).xgetAttribute)).apply ("pk"))))))
                        xm2m_data.write (((unsupported)).apply)
                        xdeferred_fields.write (((unsupported)).apply)
                        xfield_names.write (((unsupported)).apply (((xf).xname)) ((xf)) ((((((xModel).x_meta).xget_fields)).apply)))
                        (((unsupported)).apply ((xfield_node)) (((((xnode).xgetElementsByTagName)).apply ("field"))))
                          seq
                            xfield_name.write ((((xfield_node).xgetAttribute)).apply ("name"))
                            ((xfield_name).not).if
                              (((unsupported)).apply (((((xbase).xDeserializationError)).apply ("<field> node is missing the 'name' attribute"))))
                            (((xself).xignore).and (((unsupported)).apply ((xfield_name)) ((xfield_names)))).if
                              (((unsupported)).apply)
                            xfield.write (((((xModel).x_meta).xget_field)).apply ((xfield_name)))
                            (((xfield).xremote_field).and (((xisinstance)).apply (((xfield).xremote_field)) (((xmodels).xManyToManyRel)))).if
                              seq
                                xvalue.write ((((xself).x_handle_m2m_field_node)).apply ((xfield_node)) ((xfield)))
                                ((xvalue).eq ((xbase).xDEFER_FIELD)).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xdeferred_fields)) ((xfield)))) ((((unsupported)).apply ((((unsupported)).apply (((((((xgetInnerText)).apply ((xnat_node))).xstrip)).apply)) ((xnat_node)) (((((xobj_node).xgetElementsByTagName)).apply ("natural"))))) ((xobj_node)) (((((xfield_node).xgetElementsByTagName)).apply ("object"))))))
                                  (((unsupported)).apply ((((unsupported)).apply ((xm2m_data)) (((xfield).xname)))) ((xvalue)))
                              (((xfield).xremote_field).and (((xisinstance)).apply (((xfield).xremote_field)) (((xmodels).xManyToOneRel)))).if
                                seq
                                  xvalue.write ((((xself).x_handle_fk_field_node)).apply ((xfield_node)) ((xfield)))
                                  ((xvalue).eq ((xbase).xDEFER_FIELD)).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xdeferred_fields)) ((xfield)))) ((((unsupported)).apply (((((((xgetInnerText)).apply ((xk))).xstrip)).apply)) ((xk)) (((((xfield_node).xgetElementsByTagName)).apply ("natural"))))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((xfield).xattname)))) ((xvalue)))
                                seq
                                  ((((xfield_node).xgetElementsByTagName)).apply ("None")).if
                                    xvalue.write "None: is there a None literal in the EO language?"
                                    seq
                                      xvalue.write ((((xfield).xto_python)).apply (((((((xgetInnerText)).apply ((xfield_node))).xstrip)).apply)))
                                      (((((xfield).xget_internal_type)).apply).eq "JSONField").if
                                        xvalue.write (((unsupported)).apply (((xjson).xloads)) ((xvalue)) (((xfield).xdecoder)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((xfield).xname)))) ((xvalue)))
                        xobj.write ((((xbase).xbuild_instance)).apply ((xModel)) ((xdata)) (((xself).xdb)))
                        (((unsupported)).apply (((((xbase).xDeserializedObject)).apply ((xobj)) ((xm2m_data)) ((xdeferred_fields)))))
                x_handle_fk_field_node.write
                  [xself xnode xfield]
                    memory > xobj_pk
                    memory > xkeys
                    memory > xobj
                    memory > xfield_value
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xnode).xgetElementsByTagName)).apply ("None")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                          seq
                            xmodel.write (((xfield).xremote_field).xmodel)
                            (((xhasattr)).apply (((xmodel).x_default_manager)) ("get_by_natural_key")).if
                              seq
                                xkeys.write ((((xnode).xgetElementsByTagName)).apply ("natural"))
                                (xkeys).if
                                  seq
                                    xfield_value.write (((unsupported)).apply (((((((xgetInnerText)).apply ((xk))).xstrip)).apply)) ((xk)) ((xkeys)))
                                    (((unsupported)).apply ((xObjectDoesNotExist)))
                                      xobj.write ((((((((xmodel).x_default_manager).xdb_manager)).apply (((xself).xdb))).xget_by_natural_key)).apply ((((unsupported)).apply ((xfield_value)))))
                                      ((xself).xhandle_forward_references).if
                                        (((unsupported)).apply (((xbase).xDEFER_FIELD)))
                                        (((unsupported)).apply)
                                    xobj_pk.write (((xgetattr)).apply ((xobj)) ((((xfield).xremote_field).xfield_name)))
                                    ((((((xfield).xremote_field).xmodel).x_meta).xpk).xremote_field).if
                                      xobj_pk.write ((xobj_pk).xpk)
                                  seq
                                    xfield_value.write ((((((xgetInnerText)).apply ((xnode))).xstrip)).apply)
                                    xobj_pk.write ((((((((xmodel).x_meta).xget_field)).apply ((((xfield).xremote_field).xfield_name))).xto_python)).apply ((xfield_value)))
                                (((unsupported)).apply ((xobj_pk)))
                              seq
                                xfield_value.write ((((((xgetInnerText)).apply ((xnode))).xstrip)).apply)
                                (((unsupported)).apply (((((((((xmodel).x_meta).xget_field)).apply ((((xfield).xremote_field).xfield_name))).xto_python)).apply ((xfield_value)))))
                x_handle_m2m_field_node.write
                  [xself xnode xfield]
                    memory > xmodel
                    memory > xvalues
                    memory > xdefault_manager
                    memory > xm2m_convert
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodel.write (((xfield).xremote_field).xmodel)
                        xdefault_manager.write ((xmodel).x_default_manager)
                        (((xhasattr)).apply ((xdefault_manager)) ("get_by_natural_key")).if
                          xm2m_convert.write
                            [xn]
                              memory > xkeys
                              memory > xobj_pk
                              memory > xfield_value
                              seq > @
                                seq
                                  xkeys.write ((((xn).xgetElementsByTagName)).apply ("natural"))
                                  (xkeys).if
                                    seq
                                      xfield_value.write (((unsupported)).apply (((((((xgetInnerText)).apply ((xk))).xstrip)).apply)) ((xk)) ((xkeys)))
                                      xobj_pk.write ((((((((xdefault_manager).xdb_manager)).apply (((xself).xdb))).xget_by_natural_key)).apply ((((unsupported)).apply ((xfield_value))))).xpk)
                                    xobj_pk.write ((((((xmodel).x_meta).xpk).xto_python)).apply (((((xn).xgetAttribute)).apply ("pk"))))
                                  (((unsupported)).apply ((xobj_pk)))
                          xm2m_convert.write
                            [xn]
                              seq > @
                                (((unsupported)).apply (((((((xmodel).x_meta).xpk).xto_python)).apply (((((xn).xgetAttribute)).apply ("pk"))))))
                        xvalues.write (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          (((unsupported)).apply ((xc)) (((((xnode).xgetElementsByTagName)).apply ("object"))))
                            bogusForceDataize.write ((((xvalues).xappend)).apply ((((xm2m_convert)).apply ((xc)))))
                          ((((xisinstance)).apply ((xe)) ((xObjectDoesNotExist))).and ((xself).xhandle_forward_references)).if
                            (((unsupported)).apply (((xbase).xDEFER_FIELD)))
                            (((unsupported)).apply (((((xbase).xM2MDeserializationError)).apply ((xe)) ((xc)))))
                          (((unsupported)).apply ((xvalues)))
                x_get_model_from_node.write
                  [xself xnode xattr]
                    memory > xmodel_identifier
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodel_identifier.write ((((xnode).xgetAttribute)).apply ((xattr)))
                        ((xmodel_identifier).not).if
                          (((unsupported)).apply (((((xbase).xDeserializationError)).apply (("<%s> node is missing the required '%s' attribute".mod (((unsupported)).apply (((xnode).xnodeName)) ((xattr))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xLookupError)) ((xTypeError)))))
                          (((unsupported)).apply (((((xapps).xget_model)).apply ((xmodel_identifier)))))
                          (((unsupported)).apply (((((xbase).xDeserializationError)).apply (("<%s> node has invalid model identifier: '%s'".mod (((unsupported)).apply (((xnode).xnodeName)) ((xmodel_identifier))))))))
            xgetInnerText.write
              [xnode]
                memory > xinner_text
                seq > @
                  seq
                    unsupported
                    xinner_text.write (((unsupported)).apply)
                    (((unsupported)).apply ((xchild)) (((xnode).xchildNodes)))
                      ((((xchild).xnodeType).eq ((xchild).xTEXT_NODE)).or (((xchild).xnodeType).eq ((xchild).xCDATA_SECTION_NODE))).if
                        bogusForceDataize.write ((((xinner_text).xappend)).apply (((xchild).xdata)))
                        (((xchild).xnodeType).eq ((xchild).xELEMENT_NODE)).if
                          bogusForceDataize.write ((((xinner_text).xextend)).apply ((((xgetInnerText)).apply ((xchild)))))
                    (((unsupported)).apply (((("".xjoin)).apply ((xinner_text)))))
            (((unsupported)).apply ((x_ExpatParser)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xsetFeature)).apply (((xhandler).xfeature_external_ges)) (FALSE))
                        bogusForceDataize.write ((((xself).xsetFeature)).apply (((xhandler).xfeature_external_pes)) (FALSE))
                xstart_doctype_decl.write
                  [xself xname xsysid xpubid xhas_internal_subset]
                    seq > @
                      (((unsupported)).apply ((((xDTDForbidden)).apply ((xname)) ((xsysid)) ((xpubid)))))
                xentity_decl.write
                  [xself xname xis_parameter_entity xvalue xbase xsysid xpubid xnotation_name]
                    seq > @
                      (((unsupported)).apply ((((xEntitiesForbidden)).apply ((xname)) ((xvalue)) ((xbase)) ((xsysid)) ((xpubid)) ((xnotation_name)))))
                xunparsed_entity_decl.write
                  [xself xname xbase xsysid xpubid xnotation_name]
                    seq > @
                      (((unsupported)).apply ((((xEntitiesForbidden)).apply ((xname)) ("None: is there a None literal in the EO language?") ((xbase)) ((xsysid)) ((xpubid)) ((xnotation_name)))))
                xexternal_entity_ref_handler.write
                  [xself xcontext xbase xsysid xpubid]
                    seq > @
                      (((unsupported)).apply ((((xExternalReferenceForbidden)).apply ((xcontext)) ((xbase)) ((xsysid)) ((xpubid)))))
                xreset.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        bogusForceDataize.write ((((x_ExpatParser).xreset)).apply ((xself)))
                        xparser.write ((xself).x_parser)
                        (((unsupported)).apply (((xparser).xStartDoctypeDeclHandler)) (((xself).xstart_doctype_decl)))
                        (((unsupported)).apply (((xparser).xEntityDeclHandler)) (((xself).xentity_decl)))
                        (((unsupported)).apply (((xparser).xUnparsedEntityDeclHandler)) (((xself).xunparsed_entity_decl)))
                        (((unsupported)).apply (((xparser).xExternalEntityRefHandler)) (((xself).xexternal_entity_ref_handler)))
            (((unsupported)).apply ((xValueError)))
              seq
                unsupported
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xstr)).apply ((xself)))))
            (((unsupported)).apply ((xDefusedXmlException)))
              seq
                unsupported
                x__init__.write
                  [xself xname xsysid xpubid]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xsysid)) ((xsysid)))
                        (((unsupported)).apply (((xself).xpubid)) ((xpubid)))
                x__str__.write
                  [xself]
                    memory > xtpl
                    seq > @
                      seq
                        xtpl.write "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
                        (((unsupported)).apply (((((xtpl).xformat)).apply (((xself).xname)) (((xself).xsysid)) (((xself).xpubid)))))
            (((unsupported)).apply ((xDefusedXmlException)))
              seq
                unsupported
                x__init__.write
                  [xself xname xvalue xbase xsysid xpubid xnotation_name]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                        (((unsupported)).apply (((xself).xbase)) ((xbase)))
                        (((unsupported)).apply (((xself).xsysid)) ((xsysid)))
                        (((unsupported)).apply (((xself).xpubid)) ((xpubid)))
                        (((unsupported)).apply (((xself).xnotation_name)) ((xnotation_name)))
                x__str__.write
                  [xself]
                    memory > xtpl
                    seq > @
                      seq
                        xtpl.write "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
                        (((unsupported)).apply (((((xtpl).xformat)).apply (((xself).xname)) (((xself).xsysid)) (((xself).xpubid)))))
            (((unsupported)).apply ((xDefusedXmlException)))
              seq
                unsupported
                x__init__.write
                  [xself xcontext xbase xsysid xpubid]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).xcontext)) ((xcontext)))
                        (((unsupported)).apply (((xself).xbase)) ((xbase)))
                        (((unsupported)).apply (((xself).xsysid)) ((xsysid)))
                        (((unsupported)).apply (((xself).xpubid)) ((xpubid)))
                x__str__.write
                  [xself]
                    memory > xtpl
                    seq > @
                      seq
                        xtpl.write "ExternalReferenceForbidden(system_id='{}', public_id={})"
                        (((unsupported)).apply (((((xtpl).xformat)).apply (((xself).xsysid)) (((xself).xpubid)))))