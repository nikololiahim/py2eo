memory > xLazyObject
memory > xBaseFinder
memory > xempty
memory > ximport_string
memory > xapps
memory > xWarning
memory > xError
memory > xFileSystemStorage
memory > xpath
memory > xutils
memory > xapp_config
memory > xapp
memory > xsafe_join
memory > xNotImplementedError
memory > xprefix
memory > xBaseStorageFinder
memory > xsettings
memory > xset
memory > xfinder_path
memory > xsuper
memory > xfinder
memory > xissubclass
memory > xtuple
memory > xargs
memory > xos
memory > xac
memory > xBaseFinder2
memory > xgetattr
memory > xdefault_storage
memory > xStorage
memory > xImproperlyConfigured
memory > xkwargs
memory > xisinstance
memory > xlen
memory > xroot
[] > finders
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xsearched_locations
        memory > xcheck
        memory > xfind_location
        memory > xget_finder
        memory > xget_finders
        memory > xsource_dir
        memory > x__init__
        memory > xfind_in_app
        memory > xstorage_class
        memory > xlist
        memory > xstorage
        memory > xfind
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xsearched_locations.write (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses may provide a check() method to verify the finder is configured correctly."))))
                xfind.write
                  [xself xpath xall]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseFinder must provide a find() method"))))
                xlist.write
                  [xself xignore_patterns]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseFinder must provide a list() method"))))
            (((unsupported)).apply ((xBaseFinder2)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xapp_names]
                    memory > xfilesystem_storage
                    memory > xprefix
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xlocations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xstorages)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xroot)) (((xsettings).xSTATICFILES_DIRS)))
                          seq
                            (((xisinstance)).apply ((xroot)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) ((xroot)))
                              xprefix.write ""
                            (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) (((xself).xlocations))).if
                              bogusForceDataize.write (((((xself).xlocations).xappend)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) (((xself).xlocations)))
                          seq
                            xfilesystem_storage.write (((unsupported)).apply ((xFileSystemStorage)) ((xroot)))
                            (((unsupported)).apply (((xfilesystem_storage).xprefix)) ((xprefix)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xstorages)) ((xroot)))) ((xfilesystem_storage)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xcheck.write
                  [xself]
                    memory > xerrors
                    seq > @
                      (((unsupported)).apply)
                        xerrors.write (((unsupported)).apply)
                        ((((xisinstance)).apply (((xsettings).xSTATICFILES_DIRS)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not).if
                          seq
                            bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xError)) ("The STATICFILES_DIRS setting is not a tuple or list.") ("Perhaps you forgot a trailing comma?") ("staticfiles.E001"))))
                            (((unsupported)).apply ((xerrors)))
                        (((unsupported)).apply ((xroot)) (((xsettings).xSTATICFILES_DIRS)))
                          seq
                            (((xisinstance)).apply ((xroot)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) ((xroot)))
                                ((((xprefix).xendswith)).apply ("/")).if
                                  bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xError)) (("The prefix %r in the STATICFILES_DIRS setting must not end with a slash.".mod (xprefix))) ("staticfiles.E003"))))
                            (((xsettings).xSTATIC_ROOT).and ((((((xos).xpath).xabspath)).apply (((xsettings).xSTATIC_ROOT))).eq (((((xos).xpath).xabspath)).apply ((xroot))))).if
                              bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xError)) ("The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting.") ("staticfiles.E002"))))
                            ((((((xos).xpath).xisdir)).apply ((xroot))).not).if
                              bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xWarning)) ("The directory '{root}' in the STATICFILES_DIRS setting does not exist.") ("staticfiles.W004"))))
                        (((unsupported)).apply ((xerrors)))
                xfind.write
                  [xself xpath xall]
                    memory > xmatched_path
                    memory > xmatches
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmatches.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) (((xself).xlocations)))
                          seq
                            (((unsupported)).apply ((xroot)) ((xsearched_locations))).if
                              bogusForceDataize.write ((((xsearched_locations).xappend)).apply ((xroot)))
                            xmatched_path.write ((((xself).xfind_location)).apply ((xroot)) ((xpath)) ((xprefix)))
                            (xmatched_path).if
                              seq
                                ((xall).not).if
                                  (((unsupported)).apply ((xmatched_path)))
                                bogusForceDataize.write ((((xmatches).xappend)).apply ((xmatched_path)))
                        (((unsupported)).apply ((xmatches)))
                xfind_location.write
                  [xself xroot xpath xprefix]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (xprefix).if
                          seq
                            xprefix.write ("%s%s".mod (((unsupported)).apply ((xprefix)) (((xos).xsep))))
                            (((((xpath).xstartswith)).apply ((xprefix))).not).if
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            xpath.write (((unsupported)).apply ((xpath)) ((((unsupported)).apply ((((xlen)).apply ((xprefix)))))))
                        xpath.write (((xsafe_join)).apply ((xroot)) ((xpath)))
                        (((((xos).xpath).xexists)).apply ((xpath))).if
                          (((unsupported)).apply ((xpath)))
                xlist.write
                  [xself xignore_patterns]
                    memory > xstorage
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xprefix)) ((xroot)))) (((xself).xlocations)))
                          (((((xos).xpath).xisdir)).apply ((xroot))).if
                            seq
                              xstorage.write (((unsupported)).apply (((xself).xstorages)) ((xroot)))
                              (((unsupported)).apply ((xpath)) (((((xutils).xget_files)).apply ((xstorage)) ((xignore_patterns)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xstorage)))))
            (((unsupported)).apply ((xBaseFinder)))
              seq
                (((unsupported)).apply)
                xstorage_class.write (xFileSystemStorage)
                xsource_dir.write "static"
                x__init__.write
                  [xself xapp_names]
                    memory > xapp_configs
                    memory > xapp_storage
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xapps)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xstorages)) ((((unsupported)).apply)))
                        xapp_configs.write ((((xapps).xget_app_configs)).apply)
                        (xapp_names).if
                          seq
                            xapp_names.write (((xset)).apply ((xapp_names)))
                            xapp_configs.write (((unsupported)).apply ((xac)) ((xac)) ((xapp_configs)) ((((unsupported)).apply (((xac).xname)) ((xapp_names)))))
                        (((unsupported)).apply ((xapp_config)) ((xapp_configs)))
                          seq
                            xapp_storage.write ((((xself).xstorage_class)).apply ((((((xos).xpath).xjoin)).apply (((xapp_config).xpath)) (((xself).xsource_dir)))))
                            (((((xos).xpath).xisdir)).apply (((xapp_storage).xlocation))).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xstorages)) (((xapp_config).xname)))) ((xapp_storage)))
                                (((unsupported)).apply (((xapp_config).xname)) (((xself).xapps))).if
                                  bogusForceDataize.write (((((xself).xapps).xappend)).apply (((xapp_config).xname)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xlist.write
                  [xself xignore_patterns]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xstorage)) ((((((xself).xstorages).xvalues)).apply)))
                          ((((xstorage).xexists)).apply ("")).if
                            (((unsupported)).apply ((xpath)) (((((xutils).xget_files)).apply ((xstorage)) ((xignore_patterns)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xstorage)))))
                xfind.write
                  [xself xpath xall]
                    memory > xmatches
                    memory > xapp_location
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmatches.write (((unsupported)).apply)
                        (((unsupported)).apply ((xapp)) (((xself).xapps)))
                          seq
                            xapp_location.write ((((unsupported)).apply (((xself).xstorages)) ((xapp))).xlocation)
                            (((unsupported)).apply ((xapp_location)) ((xsearched_locations))).if
                              bogusForceDataize.write ((((xsearched_locations).xappend)).apply ((xapp_location)))
                            xmatch.write ((((xself).xfind_in_app)).apply ((xapp)) ((xpath)))
                            (xmatch).if
                              seq
                                ((xall).not).if
                                  (((unsupported)).apply ((xmatch)))
                                bogusForceDataize.write ((((xmatches).xappend)).apply ((xmatch)))
                        (((unsupported)).apply ((xmatches)))
                xfind_in_app.write
                  [xself xapp xpath]
                    memory > xmatched_path
                    memory > xstorage
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstorage.write (((((xself).xstorages).xget)).apply ((xapp)))
                        ((xstorage).and ((((xstorage).xexists)).apply ((xpath)))).if
                          seq
                            xmatched_path.write ((((xstorage).xpath)).apply ((xpath)))
                            (xmatched_path).if
                              (((unsupported)).apply ((xmatched_path)))
            (((unsupported)).apply ((xBaseFinder)))
              seq
                (((unsupported)).apply)
                xstorage.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xstorage]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xstorage)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xstorage)) ((xstorage)))
                        (((unsupported)).apply (((xself).xstorage)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("The staticfiles storage finder %r doesn't have a storage class assigned.".mod ((xself).x__class__))))))
                        ((((xisinstance)).apply (((xself).xstorage)) ((((unsupported)).apply ((xStorage)) ((xLazyObject))))).not).if
                          (((unsupported)).apply (((xself).xstorage)) (((((xself).xstorage)).apply)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xfind.write
                  [xself xpath xall]
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xNotImplementedError)))
                          bogusForceDataize.write (((((xself).xstorage).xpath)).apply (""))
                          seq
                            (((unsupported)).apply ((((xself).xstorage).xlocation)) ((xsearched_locations))).if
                              bogusForceDataize.write ((((xsearched_locations).xappend)).apply ((((xself).xstorage).xlocation)))
                            (((((xself).xstorage).xexists)).apply ((xpath))).if
                              seq
                                xmatch.write (((((xself).xstorage).xpath)).apply ((xpath)))
                                (xall).if
                                  xmatch.write (((unsupported)).apply ((xmatch)))
                                (((unsupported)).apply ((xmatch)))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xlist.write
                  [xself xignore_patterns]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xpath)) (((((xutils).xget_files)).apply (((xself).xstorage)) ((xignore_patterns)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xpath)) (((xself).xstorage)))))
            (((unsupported)).apply ((xBaseStorageFinder)))
              seq
                (((unsupported)).apply)
                xstorage.write (xdefault_storage)
                x__init__.write
                  [xself]
                    memory > xbase_location
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        xbase_location.write (((xgetattr)).apply (((xself).xstorage)) ("base_location") ((xempty)))
                        ((xbase_location).not).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("The storage backend of the staticfiles finder %r doesn't have a valid location.".mod ((xself).x__class__))))))
            xfind.write
              [xpath xall]
                memory > xmatches
                memory > xresult
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xsearched_locations)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                    xmatches.write (((unsupported)).apply)
                    (((unsupported)).apply ((xfinder)) ((((xget_finders)).apply)))
                      seq
                        xresult.write (((unsupported)).apply (((xfinder).xfind)) ((xpath)) ((xall)))
                        (((xall).not).and (xresult)).if
                          (((unsupported)).apply ((xresult)))
                        ((((xisinstance)).apply ((xresult)) ((((unsupported)).apply ((xlist)) ((xtuple))))).not).if
                          xresult.write (((unsupported)).apply ((xresult)))
                        bogusForceDataize.write ((((xmatches).xextend)).apply ((xresult)))
                    (xmatches).if
                      (((unsupported)).apply ((xmatches)))
                    (((unsupported)).apply (((xall).if (((unsupported)).apply) "None: is there a None literal in the EO language?")))
            xget_finders.write
              []
                seq > @
                  (((unsupported)).apply ((xfinder_path)) (((xsettings).xSTATICFILES_FINDERS)))
                    (((unsupported)).apply ((((xget_finder)).apply ((xfinder_path)))))
            xget_finder.write
              [ximport_path]
                memory > xFinder
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xFinder.write (((ximport_string)).apply ((ximport_path)))
                    ((((xissubclass)).apply ((xFinder)) ((xBaseFinder))).not).if
                      (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Finder \"%s\" is not a subclass of \"%s\"".mod (((unsupported)).apply ((xFinder)) ((xBaseFinder))))))))
                    (((unsupported)).apply ((((xFinder)).apply)))