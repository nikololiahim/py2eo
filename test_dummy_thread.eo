memory > xcm
memory > xround
memory > xcount
memory > xrange
memory > xqueue
memory > xrandom
memory > xprint
memory > xsupport
memory > xtuple
memory > xmock
memory > xRuntimeError
memory > xKeyboardInterrupt
memory > xrepr
memory > xint
memory > xException
memory > xtime
memory > xunittest
memory > xSystemExit
memory > xTypeError
memory > x__name__
[] > test_dummy_thread
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xDELAY
        memory > xtest_uncond_acquire_return_val
        memory > xtest_LockType_context_manager
        memory > xtest_interrupt_in_main
        memory > xtest_cond_acquire_fail
        memory > xsetUp
        memory > xtest_lock_representation
        memory > xtest_ident
        memory > xtest_interrupt_main
        memory > xtest_cond_acquire_success
        memory > xtest_args_not_tuple
        memory > xtest_kwargs_not_dict
        memory > xtest_exit
        memory > xtest_arg_passing
        memory > xtest_stack_size_not_None
        memory > xtest_RaiseException
        memory > xtest_multi_thread_creation
        memory > xtest_uncond_acquire_blocking
        memory > xtest_set_sentinel
        memory > xtest_initlock
        memory > xtest_improper_release
        memory > xtest_SystemExit
        memory > xtest_LockType
        memory > xtest_release
        memory > x_thread
        memory > xtest_acquire_timeout
        memory > xtest_stack_size_None
        memory > xtest_uncond_acquire_success
        memory > xtest_multiple_acquire
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xDELAY.write 0
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xlock)) (((((x_thread).xallocate_lock)).apply)))
                xtest_initlock.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xlock).xlocked)).apply)) ("Lock object is not initialized unlocked."))
                xtest_release.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        bogusForceDataize.write (((((xself).xlock).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xlock).xlocked)).apply)) ("Lock object did not release properly."))
                xtest_LockType_context_manager.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((x_thread).xLockType)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xlock).xlocked)).apply)) ("Acquired Lock was not released"))
                xtest_improper_release.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((((xself).xlock).xrelease)))
                xtest_cond_acquire_success.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xlock).xacquire)).apply (0))) ("Conditional acquiring of the lock failed."))
                xtest_cond_acquire_fail.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xlock).xacquire)).apply (0))) ("Conditional acquiring of a locked lock incorrectly succeeded."))
                xtest_uncond_acquire_success.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xlock).xlocked)).apply)) ("Uncondional locking failed."))
                xtest_uncond_acquire_return_val.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xlock).xacquire)).apply (1))) (TRUE) ("Unconditional locking did not return True."))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xlock).xacquire)).apply)) (TRUE))
                xtest_uncond_acquire_blocking.write
                  [xself]
                    memory > xdelay_unlock
                    memory > xend_time
                    memory > xstart_time
                    seq > @
                      seq
                        xdelay_unlock.write
                          [xto_unlock xdelay]
                            seq > @
                              seq
                                unsupported
                                bogusForceDataize.write ((((xtime).xsleep)).apply ((xdelay)))
                                bogusForceDataize.write ((((xto_unlock).xrelease)).apply)
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        xstart_time.write (((xint)).apply (((((xtime).xmonotonic)).apply)))
                        bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xdelay_unlock)) ((((unsupported)).apply (((xself).xlock)) ((xDELAY)))))
                        ((xsupport).xverbose).if
                          seq
                            bogusForceDataize.write (((xprint)).apply)
                            bogusForceDataize.write (((xprint)).apply (("*** Waiting for thread to release the lock (approx. %s sec.) ***".mod (xDELAY))))
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        xend_time.write (((xint)).apply (((((xtime).xmonotonic)).apply)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("done"))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xend_time).sub (xstart_time))) ((xDELAY)) ("Blocking by unconditional acquiring failed."))
                xtest_acquire_timeout.write
                  [xself xmock_sleep]
                    memory > xretval
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        xretval.write (((unsupported)).apply ((((xself).xlock).xacquire)) (0) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_sleep).xcalled)))
                        bogusForceDataize.write ((((xmock_sleep).xassert_called_once_with)).apply (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) (FALSE))
                xtest_lock_representation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xlock).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("locked") ((((xrepr)).apply (((xself).xlock)))))
                        bogusForceDataize.write (((((xself).xlock).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("unlocked") ((((xrepr)).apply (((xself).xlock)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xrlock)) (((((x_thread).xRLock)).apply)))
                xtest_multiple_acquire.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("unlocked") ((((xrepr)).apply (((xself).xrlock)))))
                        bogusForceDataize.write (((((xself).xrlock).xacquire)).apply)
                        bogusForceDataize.write (((((xself).xrlock).xacquire)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("locked") ((((xrepr)).apply (((xself).xrlock)))))
                        bogusForceDataize.write (((((xself).xrlock).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("locked") ((((xrepr)).apply (((xself).xrlock)))))
                        bogusForceDataize.write (((((xself).xrlock).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("unlocked") ((((xrepr)).apply (((xself).xrlock)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((((xself).xrlock).xrelease)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_exit.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSystemExit)) (((x_thread).xexit)))
                xtest_ident.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((x_thread).xget_ident)).apply)) ((xint)) ("_thread.get_ident() returned a non-integer"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((((x_thread).xget_ident)).apply)) (0))
                xtest_LockType.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((x_thread).xallocate_lock)).apply)) (((x_thread).xLockType)) ("_thread.LockType is not an instance of what is returned by _thread.allocate_lock()"))
                xtest_set_sentinel.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((x_thread).x_set_sentinel)).apply)) (((x_thread).xLockType)) ("_thread._set_sentinel() did not return a LockType instance."))
                xtest_interrupt_main.write
                  [xself]
                    memory > xcall_interrupt
                    seq > @
                      seq
                        xcall_interrupt.write
                          []
                            seq > @
                              bogusForceDataize.write ((((x_thread).xinterrupt_main)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyboardInterrupt)) (((x_thread).xstart_new_thread)) ((xcall_interrupt)) ((((xtuple)).apply)))
                xtest_interrupt_in_main.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyboardInterrupt)) (((x_thread).xinterrupt_main)))
                xtest_stack_size_None.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write ((((x_thread).xstack_size)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) (0))
                xtest_stack_size_not_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((x_thread).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((x_thread).xstack_size)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (0))) ("setting thread stack size not supported"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_arg_passing.write
                  [xself]
                    memory > xarg_tester
                    memory > xtesting_queue
                    memory > xresult
                    seq > @
                      seq
                        xarg_tester.write
                          [xqueue xarg1 xarg2]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                bogusForceDataize.write ((((xqueue).xput)).apply ((((unsupported)).apply ((xarg1)) ((xarg2)))))
                        xtesting_queue.write ((((xqueue).xQueue)).apply (1))
                        bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xarg_tester)) ((((unsupported)).apply ((xtesting_queue)) (TRUE) (TRUE))))
                        xresult.write ((((xtesting_queue).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xresult)) (0)).and (((unsupported)).apply ((xresult)) (1)))) ("Argument passing for thread creation using tuple failed"))
                        bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xarg_tester)) ((((xtuple)).apply)) ((((unsupported)).apply ("queue") ((xtesting_queue)) ("arg1") (TRUE) ("arg2") (TRUE))))
                        xresult.write ((((xtesting_queue).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xresult)) (0)).and (((unsupported)).apply ((xresult)) (1)))) ("Argument passing for thread creation using kwargs failed"))
                        bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xarg_tester)) ((((unsupported)).apply ((xtesting_queue)) (TRUE))) ((((unsupported)).apply ("arg2") (TRUE))))
                        xresult.write ((((xtesting_queue).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xresult)) (0)).and (((unsupported)).apply ((xresult)) (1)))) ("Argument passing for thread creation using both tuple and kwargs failed"))
                xtest_multi_thread_creation.write
                  [xself]
                    memory > xqueue_mark
                    memory > xtesting_queue
                    memory > xthread_count
                    memory > xlocal_delay
                    seq > @
                      seq
                        xqueue_mark.write
                          [xqueue xdelay]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xtime).xsleep)).apply ((xdelay)))
                                bogusForceDataize.write ((((xqueue).xput)).apply (((((x_thread).xget_ident)).apply)))
                        xthread_count.write 5
                        xtesting_queue.write ((((xqueue).xQueue)).apply ((xthread_count)))
                        ((xsupport).xverbose).if
                          seq
                            bogusForceDataize.write (((xprint)).apply)
                            bogusForceDataize.write (((xprint)).apply (("*** Testing multiple thread creation (will take approx. %s to %s sec.) ***".mod (((unsupported)).apply ((xDELAY)) ((xthread_count))))))
                        (((unsupported)).apply ((xcount)) ((((xrange)).apply ((xthread_count)))))
                          seq
                            (xDELAY).if
                              xlocal_delay.write (((xround)).apply (((((xrandom).xrandom)).apply)) (1))
                              xlocal_delay.write 0
                            bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xqueue_mark)) ((((unsupported)).apply ((xtesting_queue)) ((xlocal_delay)))))
                        bogusForceDataize.write ((((xtime).xsleep)).apply ((xDELAY)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("done"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtesting_queue).xqsize)).apply)) ((xthread_count)) (("Not all %s threads executed properly after %s sec.".mod (((unsupported)).apply ((xthread_count)) ((xDELAY))))))
                xtest_args_not_tuple.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply (((((xmock).xMock)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (0))) ("2nd arg must be a tuple"))
                xtest_kwargs_not_dict.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          (((unsupported)).apply (((x_thread).xstart_new_thread)) (((((xmock).xMock)).apply)) ((((xtuple)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (0))) ("3rd arg must be a dict"))
                xtest_SystemExit.write
                  [xself]
                    memory > xfunc
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfunc.write (((unsupported)).apply (((xmock).xMock)) ((((xSystemExit)).apply)))
                        (((unsupported)).apply ((xSystemExit)))
                          bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xfunc)) ((((xtuple)).apply)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("start_new_thread raised SystemExit."))
                xtest_RaiseException.write
                  [xself xmock_print_exc]
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfunc.write (((unsupported)).apply (((xmock).xMock)) ((xException)))
                        bogusForceDataize.write ((((x_thread).xstart_new_thread)).apply ((xfunc)) ((((xtuple)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmock_print_exc).xcalled)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)