memory > xTemplateSyntaxError
memory > xLexer
memory > xexpr
memory > xTokenType
memory > xrepr
memory > xVariable
memory > xToken
memory > xname
memory > xParser
memory > xLibrary
memory > xTypeError
memory > xFilterExpression
memory > xSimpleTestCase
[] > test_parser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_token_smart_split
        memory > xtest_variable_parsing
        memory > xtest_repr
        memory > xfilter_library
        memory > xtest_filter_args_count
        memory > xtest_filter_parsing
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_token_smart_split.write
                  [xself]
                    memory > xtoken
                    memory > xsplit
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtoken.write (((xToken)).apply (((xTokenType).xBLOCK)) ("sometag _(\"Page not found\") value|yesno:_(\"yes,no\")"))
                        xsplit.write ((((xtoken).xsplit_contents)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsplit)) ((((unsupported)).apply ("sometag") ("_(\"Page not found\")") ("value|yesno:_(\"yes,no\")"))))
                xtest_repr.write
                  [xself]
                    memory > xtoken
                    memory > xfilter_expression
                    memory > xparser
                    memory > xlexer
                    seq > @
                      seq
                        xtoken.write (((xToken)).apply (((xTokenType).xBLOCK)) ("some text"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xtoken)))) ("<Block token: \"some text...\">"))
                        xparser.write (((unsupported)).apply ((xParser)) ((((unsupported)).apply ((xtoken)))) ((((unsupported)).apply ((xfilter_library)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xparser)))) ("<Parser tokens=[<Block token: \"some text...\">]>"))
                        xfilter_expression.write (((xFilterExpression)).apply ("news|upper") ((xparser)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xfilter_expression)))) ("<FilterExpression 'news|upper'>"))
                        xlexer.write (((xLexer)).apply ("{% for i in 1 %}{{ a }}n{% endfor %}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xlexer)))) ("<Lexer template_string=\"{% for i in 1 %}{{ a...\", verbatim=false>"))
                xtest_filter_parsing.write
                  [xself]
                    memory > xc
                    memory > xmsg
                    memory > xp
                    memory > xfe
                    memory > xfe_test
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ("article") ((((unsupported)).apply ("section") ("News"))))
                        xp.write (((unsupported)).apply ((xParser)) ("") ((((unsupported)).apply ((xfilter_library)))))
                        xfe_test.write
                          [xs xval]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xFilterExpression)).apply ((xs)) ((xp))).xresolve)).apply ((xc)))) ((xval)))
                        bogusForceDataize.write (((xfe_test)).apply ("article.section") ("News"))
                        bogusForceDataize.write (((xfe_test)).apply ("article.section|upper") ("NEWS"))
                        bogusForceDataize.write (((xfe_test)).apply ("\"News\"") ("News"))
                        bogusForceDataize.write (((xfe_test)).apply ("'News'") ("News"))
                        bogusForceDataize.write (((xfe_test)).apply ("\"Some \"Good\" News\"") ("Some \"Good\" News"))
                        bogusForceDataize.write (((xfe_test)).apply ("\"Some \"Good\" News\"") ("Some \"Good\" News"))
                        bogusForceDataize.write (((xfe_test)).apply ("'Some 'Bad' News'") ("Some 'Bad' News"))
                        xfe.write (((xFilterExpression)).apply ("\"Some \"Good\" News\"") ((xp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfe).xfilters)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfe).xvar)) ("Some \"Good\" News"))
                        xmsg.write "Variables and attributes may not begin with underscores: 'article._hidden'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((xFilterExpression)).apply ("article._hidden|upper") ((xp)))
                xtest_variable_parsing.write
                  [xself]
                    memory > xc
                    memory > xmsg
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ("article") ((((unsupported)).apply ("section") ("News"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("article.section")).xresolve)).apply ((xc)))) ("News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("\"News\"")).xresolve)).apply ((xc)))) ("News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("'News'")).xresolve)).apply ((xc)))) ("News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("_(article.section)")).xresolve)).apply ((xc)))) ("News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("_(\"Good News\")")).xresolve)).apply ((xc)))) ("Good News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("_('Better News')")).xresolve)).apply ((xc)))) ("Better News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("\"Some \"Good\" News\"")).xresolve)).apply ((xc)))) ("Some \"Good\" News"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xVariable)).apply ("'Some 'Better' News'")).xresolve)).apply ((xc)))) ("Some 'Better' News"))
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply ("article._hidden") ("_article"))))
                          seq
                            xmsg.write "Variables and attributes may not begin with underscores: '{name}'"
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                              bogusForceDataize.write (((xVariable)).apply ((xname)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ("Variable must be a string or number, got <class 'dict'>"))))
                          bogusForceDataize.write (((xVariable)).apply ((((unsupported)).apply)))
                xtest_filter_args_count.write
                  [xself]
                    memory > xno_arguments
                    memory > xone_argument
                    memory > xparser
                    memory > xregister
                    memory > xtwo_arguments
                    memory > xone_opt_argument
                    memory > xtwo_one_opt_arg
                    seq > @
                      seq
                        xparser.write (((xParser)).apply (""))
                        xregister.write (((xLibrary)).apply)
                        xno_arguments.write
                          [xvalue]
                            seq > @
                              (((unsupported)).apply)
                        xone_argument.write
                          [xvalue xarg]
                            seq > @
                              (((unsupported)).apply)
                        xone_opt_argument.write
                          [xvalue xarg]
                            seq > @
                              (((unsupported)).apply)
                        xtwo_arguments.write
                          [xvalue xarg xarg2]
                            seq > @
                              (((unsupported)).apply)
                        xtwo_one_opt_arg.write
                          [xvalue xarg xarg2]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xparser).xadd_library)).apply ((xregister)))
                        (((unsupported)).apply ((xexpr)) ((((unsupported)).apply ("1|no_arguments:\"1\"") ("1|two_arguments") ("1|two_arguments:\"1\"") ("1|two_one_opt_arg"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTemplateSyntaxError)))))
                            bogusForceDataize.write (((xFilterExpression)).apply ((xexpr)) ((xparser)))
                        (((unsupported)).apply ((xexpr)) ((((unsupported)).apply ("1|no_arguments") ("1|one_argument:\"1\"") ("1|one_opt_argument") ("1|one_opt_argument:\"1\"") ("1|two_one_opt_arg:\"1\""))))
                          bogusForceDataize.write (((xFilterExpression)).apply ((xexpr)) ((xparser)))