memory > xValueError
memory > xAssertionError
memory > xbase
memory > xtype
memory > xunderflow
memory > xk
memory > xarray
memory > xpba
memory > xshift
memory > xround
memory > xmin
memory > xbin
memory > xexpected
memory > xlist
memory > xoverflow
memory > xmyint2
memory > xleny
memory > xsign
memory > xstr
memory > xq
memory > xrange
memory > xmath
memory > xRat
memory > xhuge_n
memory > xvalue
memory > xformat_spec
memory > xtest
memory > xZeroDivisionError
memory > xdivmod
memory > xeval
memory > xbytearray
memory > xprefix
memory > x_
memory > xmax
memory > xdenominator
memory > xerr
memory > xrandom
memory > xp
memory > xmyint3
memory > xJustLong
memory > xrepr
memory > xint
memory > xdigit
memory > xException
memory > xr
memory > xOverflowError
memory > xx
memory > xr2
memory > xi
memory > xmyint
memory > xs
memory > xsys
memory > xInteger
memory > xbool
memory > xM
memory > xm
memory > xexp
memory > xfloat
memory > xchr
memory > xbad
memory > xzero
memory > xmapper
memory > xgetattr
memory > xv
memory > xoct
memory > xe
memory > xLongTrunc
memory > xpab
memory > xformat
memory > xord
memory > xunittest
memory > xy
memory > xabits
memory > xmap
memory > xn
memory > xbbits
memory > xnumerator
memory > xmemoryview
memory > xoffset
memory > xhex
memory > xabs
memory > xq2
memory > xisinstance
memory > xlenx
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_long
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_mod_division
        memory > xtest_small_ints
        memory > xtest_huge_rshift_of_huge
        memory > xDBL_MIN_EXP
        memory > xtest_negative_shift_count
        memory > xcheck_division
        memory > xtest_huge_lshift
        memory > xtest__format__
        memory > xMASK
        memory > xtest_true_division
        memory > xspecial
        memory > xtest_karatsuba
        memory > xtest_floordiv
        memory > xtest_format
        memory > xtest_conversion
        memory > xtest_lshift_of_zero
        memory > xtruediv
        memory > xcheck_bitop_identities_2
        memory > xtest_float_conversion
        memory > xtest_huge_lshift_of_zero
        memory > xp2
        memory > xDBL_MIN_OVERFLOW
        memory > xKARATSUBA_CUTOFF
        memory > xtest_to_bytes
        memory > xBASE
        memory > xtest_as_integer_ratio
        memory > xcheck_format_1
        memory > xtest_nan_inf
        memory > xtest_correctly_rounded_true_division
        memory > xtest_bit_length
        memory > xcheck_bitop_identities_3
        memory > xgetran
        memory > xtest_from_bytes
        memory > xtest_logs
        memory > xslow_format
        memory > xtest_float_overflow
        memory > xDBL_MAX_EXP
        memory > xMAXDIGITS
        memory > xcheck_float_conversion
        memory > xSHIFT
        memory > xint_to_float
        memory > xtest_mixed_compares
        memory > xtest_huge_rshift
        memory > xtest_division
        memory > xDBL_MAX
        memory > xgetran2
        memory > xtest_shift_bool
        memory > xDBL_MANT_DIG
        memory > xcheck_bitop_identities_1
        memory > xtest_long
        memory > xtest_round
        memory > xtest_access_to_nonexistent_digit_0
        memory > xcheck_truediv
        memory > xtest_bitop_identities
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xSHIFT.write (((xsys).xint_info).xbits_per_digit)
            xBASE.write (((unsupported)).apply (2) ((xSHIFT)))
            xMASK.write ((xBASE).sub 1)
            xKARATSUBA_CUTOFF.write 70
            xMAXDIGITS.write 16
            xspecial.write (((unsupported)).apply (0) (1) (2) ((xBASE)) ((((unsupported)).apply ((xBASE)) (1))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            xp2.write 5
            (((unsupported)).apply ((xi)) ((((xrange)).apply ((2.mul (xSHIFT))))))
              seq
                bogusForceDataize.write ((((xspecial).xappend)).apply (((xp2).sub 1)))
                xp2.write (((unsupported)).apply ((xp2)) (1))
            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xp2)))))))
            (((unsupported)).apply ((xspecial)) (((((unsupported)).apply (((xx).neg)) ((xx)) ((xspecial))).add (((unsupported)).apply (((xx).neg)) ((xx)) ((xspecial))))))
            xDBL_MAX.write (((xsys).xfloat_info).xmax)
            xDBL_MAX_EXP.write (((xsys).xfloat_info).xmax_exp)
            xDBL_MIN_EXP.write (((xsys).xfloat_info).xmin_exp)
            xDBL_MANT_DIG.write (((xsys).xfloat_info).xmant_dig)
            xDBL_MIN_OVERFLOW.write ((((unsupported)).apply (2) ((xDBL_MAX_EXP))).sub (((unsupported)).apply (2) ((((xDBL_MAX_EXP).sub (xDBL_MANT_DIG)).sub 1))))
            xint_to_float.write
              [xn]
                memory > xq
                memory > xPRECISION
                memory > xROUND_HALF_TO_EVEN_CORRECTION
                memory > xQ_MAX
                memory > xSHIFT_MAX
                memory > xshift
                seq > @
                  seq
                    (((unsupported)).apply)
                    xPRECISION.write ((((xsys).xfloat_info).xmant_dig).add 2)
                    xSHIFT_MAX.write ((((xsys).xfloat_info).xmax_exp).sub (xPRECISION))
                    xQ_MAX.write (((unsupported)).apply (1) ((xPRECISION)))
                    xROUND_HALF_TO_EVEN_CORRECTION.write (((unsupported)).apply (0) ((1.neg)) ((2.neg)) (1) (0) ((1.neg)) (2) (1))
                    ((xn).eq 0).if
                      (((unsupported)).apply (0.0))
                      ((xn).less 0).if
                        (((unsupported)).apply (((((xint_to_float)).apply (((xn).neg))).neg)))
                    xshift.write (((((xn).xbit_length)).apply).sub (xPRECISION))
                    xq.write (((xshift).less 0).if (((unsupported)).apply ((xn)) (((xshift).neg))) ((((unsupported)).apply ((xn)) ((xshift))).or (((xbool)).apply (((xn).and ((((unsupported)).apply ((1.neg)) ((xshift))).neg))))))
                    (((unsupported)).apply ((xq)) ((((unsupported)).apply ((xROUND_HALF_TO_EVEN_CORRECTION)) (((xq).and 7)))))
                    (((xshift).add ((xq).eq (xQ_MAX))).greater (xSHIFT_MAX)).if
                      (((unsupported)).apply ((((xOverflowError)).apply ("integer too large to convert to float"))))
                    (((unsupported)).apply (((((xq).mod 4).eq 0).and ((((unsupported)).apply ((xq)) (4)).leq (((unsupported)).apply (2) ((((xsys).xfloat_info).xmant_dig)))))))
                    (((unsupported)).apply ((((xq).mul (((unsupported)).apply (2) ((xshift)))).leq (((xsys).xfloat_info).xmax))))
                    (((unsupported)).apply (((((xmath).xldexp)).apply ((((xfloat)).apply ((xq)))) ((xshift)))))
            xtruediv.write
              [xa xb]
                memory > xd
                memory > xexp
                memory > xresult
                memory > xnegative
                seq > @
                  seq
                    unsupported
                    xnegative.write ((((unsupported)).apply ((xa)) ((xb))).less 0)
                    (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ((((xabs)).apply ((xa)))) ((((xabs)).apply ((xb)))))))
                    ((xb).not).if
                      (((unsupported)).apply ((((xZeroDivisionError)).apply ("division by zero"))))
                    ((xa).geq ((xDBL_MIN_OVERFLOW).mul (xb))).if
                      (((unsupported)).apply ((((xOverflowError)).apply ("int/int too large to represent as a float"))))
                    xd.write (((((xa).xbit_length)).apply).sub ((((xb).xbit_length)).apply))
                    ((((xd).geq 0).and ((xa).geq ((((unsupported)).apply (2) ((xd))).mul (xb)))).or (((xd).less 0).and (((xa).mul (((unsupported)).apply (2) (((xd).neg)))).geq (xb)))).if
                      (((unsupported)).apply ((xd)) (2))
                    xexp.write ((((xmax)).apply ((xd)) ((xDBL_MIN_EXP))).sub (xDBL_MANT_DIG))
                    (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((xmax)).apply (((xexp).neg)) (0))))) ((((unsupported)).apply ((xb)) ((((xmax)).apply ((xexp)) (0))))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xq)) ((xr)))) ((((xdivmod)).apply ((xa)) ((xb)))))
                    (((2.mul (xr)).greater (xb)).or (((2.mul (xr)).eq (xb)).and (((xq).mod 2).eq 1))).if
                      (((unsupported)).apply ((xq)) (2))
                    xresult.write ((((xmath).xldexp)).apply ((xq)) ((xexp)))
                    (((unsupported)).apply (((xnegative).if ((xresult).neg) (xresult))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xgetran.write
                  [xself xndigits]
                    memory > xnbits_lo
                    memory > xbits
                    memory > xanswer
                    memory > xnbits_hi
                    memory > xr
                    memory > xnbits
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xndigits)) (0))
                        xnbits_hi.write ((xndigits).mul (xSHIFT))
                        xnbits_lo.write (((xnbits_hi).sub (xSHIFT)).add 1)
                        xanswer.write 1
                        xnbits.write 1
                        xr.write ((((xint)).apply ((((((xrandom).xrandom)).apply).mul ((xSHIFT).mul 2)))).or 1)
                        while.
                          ((xnbits).less (xnbits_lo))
                          [unused]
                            seq > @
                              seq
                                xbits.write ((((unsupported)).apply ((xr)) (1)).add 1)
                                xbits.write (((xmin)).apply ((xbits)) (((xnbits_hi).sub (xnbits))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (1) ((xbits)) ((xSHIFT)))))
                                xnbits.write ((xnbits).add (xbits))
                                xanswer.write (((unsupported)).apply ((xanswer)) ((xbits)))
                                ((xr).and 1).if
                                  xanswer.write ((xanswer).or ((((unsupported)).apply (1) ((xbits))).sub 1))
                                xr.write (((xint)).apply ((((((xrandom).xrandom)).apply).mul ((xSHIFT).mul 2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xnbits_lo)) ((xnbits)) ((xnbits_hi)))))
                        (((((xrandom).xrandom)).apply).less 0.5).if
                          xanswer.write ((xanswer).neg)
                        (((unsupported)).apply ((xanswer)))
                xgetran2.write
                  [xndigits]
                    memory > xanswer
                    seq > @
                      seq
                        xanswer.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xndigits)))))
                          xanswer.write ((((unsupported)).apply ((xanswer)) ((xSHIFT))).or ((((xrandom).xrandint)).apply (0) ((xMASK))))
                        (((((xrandom).xrandom)).apply).less 0.5).if
                          xanswer.write ((xanswer).neg)
                        (((unsupported)).apply ((xanswer)))
                xcheck_division.write
                  [xself xx xy]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) ((xy)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xq)) ((xr)))) ((((xdivmod)).apply ((xx)) ((xy)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xq2)) ((xr2)))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) (((xx).mod (xy))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xpab)) ((xpba)))) ((((unsupported)).apply (((xx).mul (xy))) (((xy).mul (xx))))))
                            bogusForceDataize.write (((xeq)).apply ((xpab)) ((xpba)) ("multiplication does not commute"))
                            bogusForceDataize.write (((xeq)).apply ((xq)) ((xq2)) ("divmod returns different quotient than /"))
                            bogusForceDataize.write (((xeq)).apply ((xr)) ((xr2)) ("divmod returns different mod than %"))
                            bogusForceDataize.write (((xeq)).apply ((xx)) ((((xq).mul (xy)).add (xr))) ("x != q*y + r after divmod"))
                            ((xy).greater 0).if
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xr)) ((xy)))) ("bad mod from divmod"))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xy)) ((xr)) (0))) ("bad mod from divmod"))
                xtest_division.write
                  [xself]
                    memory > xx
                    memory > xdigits
                    memory > xy
                    seq > @
                      seq
                        xdigits.write ((((xlist)).apply ((((xrange)).apply (1) (((xMAXDIGITS).add 1))))).add (((xlist)).apply ((((xrange)).apply ((xKARATSUBA_CUTOFF)) (((xKARATSUBA_CUTOFF).add 14))))))
                        bogusForceDataize.write ((((xdigits).xappend)).apply (((xKARATSUBA_CUTOFF).mul 3)))
                        (((unsupported)).apply ((xlenx)) ((xdigits)))
                          seq
                            xx.write ((((xself).xgetran)).apply ((xlenx)))
                            (((unsupported)).apply ((xleny)) ((xdigits)))
                              seq
                                xy.write (((((xself).xgetran)).apply ((xleny))).or 1)
                                bogusForceDataize.write ((((xself).xcheck_division)).apply ((xx)) ((xy)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) (615611397))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) (950795710))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) (736393718))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_division)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_karatsuba.write
                  [xself]
                    memory > xbits
                    memory > xb
                    memory > xdigits
                    memory > xx
                    memory > xy
                    memory > xa
                    seq > @
                      seq
                        xdigits.write ((((xlist)).apply ((((xrange)).apply (1) (5)))).add (((xlist)).apply ((((xrange)).apply ((xKARATSUBA_CUTOFF)) (((xKARATSUBA_CUTOFF).add 10))))))
                        bogusForceDataize.write ((((xdigits).xextend)).apply ((((unsupported)).apply (((xKARATSUBA_CUTOFF).mul 10)) (((xKARATSUBA_CUTOFF).mul 100)))))
                        xbits.write (((unsupported)).apply (((xdigit).mul (xSHIFT))) ((xdigit)) ((xdigits)))
                        (((unsupported)).apply ((xabits)) ((xbits)))
                          seq
                            xa.write ((((unsupported)).apply (1) ((xabits))).sub 1)
                            (((unsupported)).apply ((xbbits)) ((xbits)))
                              seq
                                ((xbbits).less (xabits)).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xabits)) ((xbbits)))))
                                  seq
                                    xb.write ((((unsupported)).apply (1) ((xbbits))).sub 1)
                                    xx.write ((xa).mul (xb))
                                    xy.write ((((((unsupported)).apply (1) (((xabits).add (xbbits)))).sub (((unsupported)).apply (1) ((xabits)))).sub (((unsupported)).apply (1) ((xbbits)))).add 1)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((xy)))
                xcheck_bitop_identities_1.write
                  [xself xx]
                    memory > xeq
                    memory > xp2
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)))))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((xx).and 0)) (0))
                            bogusForceDataize.write (((xeq)).apply (((xx).or 0)) ((xx)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) (0))) ((xx)))
                            bogusForceDataize.write (((xeq)).apply (((xx).and (1.neg))) ((xx)))
                            bogusForceDataize.write (((xeq)).apply (((xx).or (1.neg))) ((1.neg)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((1.neg)))) (((xx).neg)))
                            bogusForceDataize.write (((xeq)).apply ((xx)) ((((xx).neg).neg)))
                            bogusForceDataize.write (((xeq)).apply (((xx).and (xx))) ((xx)))
                            bogusForceDataize.write (((xeq)).apply (((xx).or (xx))) ((xx)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xx)))) (0))
                            bogusForceDataize.write (((xeq)).apply (((xx).and ((xx).neg))) (0))
                            bogusForceDataize.write (((xeq)).apply (((xx).or ((xx).neg))) ((1.neg)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) (((xx).neg)))) ((1.neg)))
                            bogusForceDataize.write (((xeq)).apply (((xx).neg)) ((1.add ((xx).neg))))
                            bogusForceDataize.write (((xeq)).apply (((xx).neg)) ((((xx).sub 1).neg)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply ((2.mul (xSHIFT))))))
                          seq
                            xp2.write (((unsupported)).apply (2) ((xn)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) ((xn)) ((xp2)))))
                              seq
                                bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xn)))) ((xn)))) ((xx)))
                                bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xp2)))) ((((unsupported)).apply ((xx)) ((xn)))))
                                bogusForceDataize.write (((xeq)).apply (((xx).mul (xp2))) ((((unsupported)).apply ((xx)) ((xn)))))
                                bogusForceDataize.write (((xeq)).apply (((xx).and ((xp2).neg))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xn)))) ((xn)))))
                                bogusForceDataize.write (((xeq)).apply (((xx).and ((xp2).neg))) (((xx).and (((xp2).sub 1).neg))))
                xcheck_bitop_identities_2.write
                  [xself xx xy]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) ((xy)))))
                          seq
                            bogusForceDataize.write (((xeq)).apply (((xx).and (xy))) (((xy).and (xx))))
                            bogusForceDataize.write (((xeq)).apply (((xx).or (xy))) (((xy).or (xx))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xy)) ((xx)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xx)))) ((xy)))
                            bogusForceDataize.write (((xeq)).apply (((xx).and (xy))) (((((xx).neg).or ((xy).neg)).neg)))
                            bogusForceDataize.write (((xeq)).apply (((xx).or (xy))) (((((xx).neg).and ((xy).neg)).neg)))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((xx).or (xy)).and (((xx).and (xy)).neg))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((xx).and ((xy).neg)).or (((xx).neg).and (xy)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((xx).or (xy)).and (((xx).neg).or ((xy).neg)))))
                xcheck_bitop_identities_3.write
                  [xself xx xy xz]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) ((xy)) ((xz)))))
                          seq
                            bogusForceDataize.write (((xeq)).apply ((((xx).and (xy)).and (xz))) (((xx).and ((xy).and (xz)))))
                            bogusForceDataize.write (((xeq)).apply ((((xx).or (xy)).or (xz))) (((xx).or ((xy).or (xz)))))
                            bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((xz)))) ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((xy)) ((xz)))))))
                            bogusForceDataize.write (((xeq)).apply (((xx).and ((xy).or (xz)))) ((((xx).and (xy)).or ((xx).and (xz)))))
                            bogusForceDataize.write (((xeq)).apply (((xx).or ((xy).and (xz)))) ((((xx).or (xy)).and ((xx).or (xz)))))
                xtest_bitop_identities.write
                  [xself]
                    memory > xx
                    memory > xdigits
                    memory > xy
                    seq > @
                      seq
                        (((unsupported)).apply ((xx)) ((xspecial)))
                          bogusForceDataize.write ((((xself).xcheck_bitop_identities_1)).apply ((xx)))
                        xdigits.write (((xrange)).apply (1) (((xMAXDIGITS).add 1)))
                        (((unsupported)).apply ((xlenx)) ((xdigits)))
                          seq
                            xx.write ((((xself).xgetran)).apply ((xlenx)))
                            bogusForceDataize.write ((((xself).xcheck_bitop_identities_1)).apply ((xx)))
                            (((unsupported)).apply ((xleny)) ((xdigits)))
                              seq
                                xy.write ((((xself).xgetran)).apply ((xleny)))
                                bogusForceDataize.write ((((xself).xcheck_bitop_identities_2)).apply ((xx)) ((xy)))
                                bogusForceDataize.write ((((xself).xcheck_bitop_identities_3)).apply ((xx)) ((xy)) (((((xself).xgetran)).apply ((((unsupported)).apply (((xlenx).add (xleny))) (2))))))
                xslow_format.write
                  [xself xx xbase]
                    memory > xdigits
                    memory > xsign
                    seq > @
                      seq
                        xdigits.write (((unsupported)).apply)
                        xsign.write 1
                        ((xx).less 0).if
                          (((unsupported)).apply ((((unsupported)).apply ((xsign)) ((xx)))) ((((unsupported)).apply (1) (((xx).neg)))))
                        while.
                          (xx)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xr)))) ((((xdivmod)).apply ((xx)) ((xbase)))))
                                bogusForceDataize.write ((((xdigits).xappend)).apply ((((xint)).apply ((xr)))))
                        bogusForceDataize.write ((((xdigits).xreverse)).apply)
                        xdigits.write ((xdigits).or (((unsupported)).apply (0)))
                        (((unsupported)).apply ((((((unsupported)).apply ("-") ((((unsupported)).apply ((xsign))))).add (((unsupported)).apply ((((unsupported)).apply (2) ("0b") (8) ("0o") (10) ("") (16) ("0x"))) ((xbase)))).add ((("".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply ("0123456789abcdef") ((xi)))) ((xi)) ((xdigits))))))))
                xcheck_format_1.write
                  [xself xx]
                    memory > xexpected
                    memory > xgot
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xbase)) ((xmapper)))) ((((unsupported)).apply ((((unsupported)).apply (2) ((xbin)))) ((((unsupported)).apply (8) ((xoct)))) ((((unsupported)).apply (10) ((xstr)))) ((((unsupported)).apply (10) ((xrepr)))) ((((unsupported)).apply (16) ((xhex)))))))
                        seq
                          xgot.write (((xmapper)).apply ((xx)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) (((xmapper).x__name__)))))
                            seq
                              xexpected.write ((((xself).xslow_format)).apply ((xx)) ((xbase)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xgot)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xgot)) (0))) ((xx)))
                xtest_format.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        (((unsupported)).apply ((xx)) ((xspecial)))
                          bogusForceDataize.write ((((xself).xcheck_format_1)).apply ((xx)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          (((unsupported)).apply ((xlenx)) ((((xrange)).apply (1) (((xMAXDIGITS).add 1)))))
                            seq
                              xx.write ((((xself).xgetran)).apply ((xlenx)))
                              bogusForceDataize.write ((((xself).xcheck_format_1)).apply ((xx)))
                xtest_long.write
                  [xself]
                    memory > xLL
                    memory > xinvalid_bases
                    memory > xvv
                    memory > xss
                    seq > @
                      seq
                        xLL.write (((unsupported)).apply ((((unsupported)).apply (("1".add ("0".mul 20))) ((((unsupported)).apply (10) (20))))) ((((unsupported)).apply (("1".add ("0".mul 100))) ((((unsupported)).apply (10) (100))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xv)))) ((xLL)))
                          (((unsupported)).apply ((xsign)) ((((unsupported)).apply ("") ("+") ("-"))))
                            (((unsupported)).apply ((xprefix)) ((((unsupported)).apply ("") (" ") ("t") ("  tt  "))))
                              seq
                                xss.write (((xprefix).add (xsign)).add (xs))
                                xvv.write (xv)
                                (((xsign).eq "-").and (((unsupported)).apply ((xv)) ((xValueError)))).if
                                  xvv.write ((xv).neg)
                                (((unsupported)).apply ((xValueError)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xss)))) ((xvv)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("123L"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("123l"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("0L"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("-37L"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("0x32L") (16))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("1L") (21))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("1L") (22))) (43))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("000") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("0o123") (0))) (83))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("0x123") (0))) (291))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("0b100") (0))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (" 0O123   ") (0))) (83))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (" 0X123  ") (0))) (291))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (" 0B100 ") (0))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("0") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("+0") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("-0") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ("00") (0))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("08") (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("-012395") (0))
                        xinvalid_bases.write (((unsupported)).apply ((909.neg)) (((((unsupported)).apply (2) (31)).sub 1)) ((((unsupported)).apply (2) (31))) (((((unsupported)).apply (2) (31)).neg)) ((((((unsupported)).apply (2) (31)).neg).sub 1)) (((((unsupported)).apply (2) (63)).sub 1)) ((((unsupported)).apply (2) (63))) (((((unsupported)).apply (2) (63)).neg)) ((((((unsupported)).apply (2) (63)).neg).sub 1)) ((((unsupported)).apply (2) (100))) (((((unsupported)).apply (2) (100)).neg)))
                        (((unsupported)).apply ((xbase)) ((xinvalid_bases)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("42") ((xbase)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ("u3053u3093u306bu3061u306f"))
                xtest_conversion.write
                  [xself]
                    memory > x__trunc__
                    memory > x__long__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__long__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (43))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xint)) ((((xJustLong)).apply)))
                        (((unsupported)).apply)
                          seq
                            x__long__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (43))
                            x__trunc__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (1730))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xLongTrunc)).apply)))) (1729))
                xcheck_float_conversion.write
                  [xself xn]
                    memory > xactual
                    memory > xexpected
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply ((xOverflowError)))
                          xactual.write (((xfloat)).apply ((xn)))
                          xactual.write "overflow"
                        (((unsupported)).apply ((xOverflowError)))
                          xexpected.write (((xint_to_float)).apply ((xn)))
                          xexpected.write "overflow"
                        xmsg.write ((("Error in conversion of integer {} to float.  Got {}, expected {}.".xformat)).apply ((xn)) ((xactual)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)) ((xmsg)))
                xtest_float_conversion.write
                  [xself]
                    memory > xhalfway
                    memory > xint_dbl_max
                    memory > xtop_power
                    memory > xx
                    memory > xtest_values
                    memory > xy
                    memory > xexact_values
                    seq > @
                      (((unsupported)).apply)
                        xexact_values.write (((unsupported)).apply (0) (1) (2) (((((unsupported)).apply (2) (53)).sub 3)) (((((unsupported)).apply (2) (53)).sub 2)) (((((unsupported)).apply (2) (53)).sub 1)) ((((unsupported)).apply (2) (53))) (((((unsupported)).apply (2) (53)).add 2)) (((((unsupported)).apply (2) (54)).sub 4)) (((((unsupported)).apply (2) (54)).sub 2)) ((((unsupported)).apply (2) (54))) (((((unsupported)).apply (2) (54)).add 4)))
                        (((unsupported)).apply ((xx)) ((xexact_values)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xx)))) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (((xx).neg)))) (((xx).neg)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (4) (4))) ((((unsupported)).apply (5) (4))) ((((unsupported)).apply (6) (6))) ((((unsupported)).apply (7) (8))))))
                          (((unsupported)).apply ((xp)) ((((xrange)).apply (15))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xfloat)).apply (((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (53)).add (xx)))))))) (((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (53)).add (xy)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (2) (0))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (4) (4))) ((((unsupported)).apply (5) (4))) ((((unsupported)).apply (6) (8))) ((((unsupported)).apply (7) (8))) ((((unsupported)).apply (8) (8))) ((((unsupported)).apply (9) (8))) ((((unsupported)).apply (10) (8))) ((((unsupported)).apply (11) (12))) ((((unsupported)).apply (12) (12))) ((((unsupported)).apply (13) (12))) ((((unsupported)).apply (14) (16))) ((((unsupported)).apply (15) (16))))))
                          (((unsupported)).apply ((xp)) ((((xrange)).apply (15))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xfloat)).apply (((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (54)).add (xx)))))))) (((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (54)).add (xy)))))
                        xint_dbl_max.write (((xint)).apply ((xDBL_MAX)))
                        xtop_power.write (((unsupported)).apply (2) ((xDBL_MAX_EXP)))
                        xhalfway.write (((unsupported)).apply (((xint_dbl_max).add (xtop_power))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((xint_dbl_max)))) ((xDBL_MAX)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (((xint_dbl_max).add 1)))) ((xDBL_MAX)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply (((xhalfway).sub 1)))) ((xDBL_MAX)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) ((xhalfway)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((1.sub (xhalfway))))) (((xDBL_MAX).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) (((xhalfway).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) (((xtop_power).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) ((xtop_power)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) (((xtop_power).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) (((2.mul (xtop_power)).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) ((2.mul (xtop_power))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfloat)) (((xtop_power).mul (xtop_power))))
                        (((unsupported)).apply ((xp)) ((((xrange)).apply (100))))
                          seq
                            xx.write (((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (53)).add 1)).add 1)
                            xy.write ((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (53)).add 2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xfloat)).apply ((xx)))))) ((xy)))
                            xx.write ((((unsupported)).apply (2) ((xp))).mul ((((unsupported)).apply (2) (53)).add 1))
                            xy.write ((((unsupported)).apply (2) ((xp))).mul (((unsupported)).apply (2) (53)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((((xfloat)).apply ((xx)))))) ((xy)))
                        xtest_values.write (((unsupported)).apply (((xint_dbl_max).sub 1)) ((xint_dbl_max)) (((xint_dbl_max).add 1)) (((xhalfway).sub 1)) ((xhalfway)) (((xhalfway).add 1)) (((xtop_power).sub 1)) ((xtop_power)) (((xtop_power).add 1)) (((2.mul (xtop_power)).sub 1)) ((2.mul (xtop_power))) (((xtop_power).mul (xtop_power))))
                        bogusForceDataize.write ((((xtest_values).xextend)).apply ((xexact_values)))
                        (((unsupported)).apply ((xp)) ((((xrange)).apply ((4.neg)) (8))))
                          (((unsupported)).apply ((xx)) ((((xrange)).apply ((128.neg)) (128))))
                            bogusForceDataize.write ((((xtest_values).xappend)).apply (((((unsupported)).apply (2) (((xp).add 53))).add (xx))))
                        (((unsupported)).apply ((xvalue)) ((xtest_values)))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_float_conversion)).apply ((xvalue)))
                            bogusForceDataize.write ((((xself).xcheck_float_conversion)).apply (((xvalue).neg)))
                xtest_float_overflow.write
                  [xself]
                    memory > xhuge
                    memory > xmhuge
                    memory > xshuge
                    memory > xnamespace
                    seq > @
                      seq
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((2.0.neg)) ((1.0.neg)) (0.0) (1.0) (2.0))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((xint)).apply ((xx)))))) ((xx)))
                        xshuge.write ("12345".mul 120)
                        xhuge.write (((unsupported)).apply (1) (30000))
                        xmhuge.write ((xhuge).neg)
                        xnamespace.write (((unsupported)).apply ("huge") ((xhuge)) ("mhuge") ((xmhuge)) ("shuge") ((xshuge)) ("math") ((xmath)))
                        (((unsupported)).apply ((xtest)) ((((unsupported)).apply ("float(huge)") ("float(mhuge)") ("complex(huge)") ("complex(mhuge)") ("complex(huge, 1)") ("complex(mhuge, 1)") ("complex(1, huge)") ("complex(1, mhuge)") ("1. + huge") ("huge + 1.") ("1. + mhuge") ("mhuge + 1.") ("1. - huge") ("huge - 1.") ("1. - mhuge") ("mhuge - 1.") ("1. * huge") ("huge * 1.") ("1. * mhuge") ("mhuge * 1.") ("1. // huge") ("huge // 1.") ("1. // mhuge") ("mhuge // 1.") ("1. / huge") ("huge / 1.") ("1. / mhuge") ("mhuge / 1.") ("1. ** huge") ("huge ** 1.") ("1. ** mhuge") ("mhuge ** 1.") ("math.sin(huge)") ("math.sin(mhuge)") ("math.sqrt(huge)") ("math.sqrt(mhuge)"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xeval)) ((xtest)) ((xnamespace)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xfloat)).apply ((xshuge)))) ((((xint)).apply ((xshuge)))) ("float(shuge) should not equal int(shuge)"))
                xtest_logs.write
                  [xself]
                    memory > xvalue
                    memory > xLOG10E
                    memory > xlog
                    memory > xexpected
                    memory > xlog10
                    seq > @
                      seq
                        xLOG10E.write ((((xmath).xlog10)).apply (((xmath).xe)))
                        (((unsupported)).apply ((xexp)) (((((xlist)).apply ((((xrange)).apply (10)))).add (((unsupported)).apply (100) (1000) (10000)))))
                          seq
                            xvalue.write (((unsupported)).apply (10) ((xexp)))
                            xlog10.write ((((xmath).xlog10)).apply ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xlog10)) ((xexp)))
                            xexpected.write ((xexp).div (xLOG10E))
                            xlog.write ((((xmath).xlog)).apply ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xlog)) ((xexpected)))
                        (((unsupported)).apply ((xbad)) ((((unsupported)).apply (((((unsupported)).apply (1) (10000)).neg)) ((2.neg)) (0))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog)) ((xbad)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog10)) ((xbad)))
                xtest_mixed_compares.write
                  [xself]
                    memory > xt
                    memory > xeq
                    memory > x__init__
                    memory > xRx
                    memory > xxycmp
                    memory > xcases
                    memory > x__ge__
                    memory > xRcmp
                    memory > x__eq__
                    memory > x__le__
                    memory > x_cmp__
                    memory > x__lt__
                    memory > xRy
                    memory > x__gt__
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xvalue]
                                memory > xd
                                memory > xCHUNK
                                memory > xf
                                memory > xdigit
                                memory > xtop
                                memory > xn
                                seq > @
                                  (((xisinstance)).apply ((xvalue)) ((xint))).if
                                    seq
                                      (((unsupported)).apply (((xself).xn)) ((xvalue)))
                                      (((unsupported)).apply (((xself).xd)) (2))
                                    (((xisinstance)).apply ((xvalue)) ((xfloat))).if
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xf)) ((xe)))) (((((xmath).xfrexp)).apply ((((xabs)).apply ((xvalue)))))))
                                        (((unsupported)).apply ((((xf).eq 0).or (((unsupported)).apply (0.5) ((xf)) (1.0)))))
                                        xCHUNK.write 29
                                        xtop.write 1
                                        while.
                                          (xf)
                                          [unused]
                                            seq > @
                                              seq
                                                xf.write ((((xmath).xldexp)).apply ((xf)) ((xCHUNK)))
                                                xdigit.write (((xint)).apply ((xf)))
                                                (((unsupported)).apply (((((unsupported)).apply ((xdigit)) ((xCHUNK))).eq 0)))
                                                xtop.write ((((unsupported)).apply ((xtop)) ((xCHUNK))).or (xdigit))
                                                (((unsupported)).apply ((xf)) ((xdigit)))
                                                (((unsupported)).apply ((((unsupported)).apply (0.0) ((xf)) (1.0))))
                                                (((unsupported)).apply ((xe)) ((xCHUNK)))
                                        ((xe).geq 0).if
                                          seq
                                            xn.write (((unsupported)).apply ((xtop)) ((xe)))
                                            xd.write 2
                                          seq
                                            xn.write (xtop)
                                            xd.write (((unsupported)).apply (1) (((xe).neg)))
                                        ((xvalue).less 0).if
                                          xn.write ((xn).neg)
                                        (((unsupported)).apply (((xself).xn)) ((xn)))
                                        (((unsupported)).apply (((xself).xd)) ((xd)))
                                        (((unsupported)).apply ((((((xfloat)).apply ((xn))).div (((xfloat)).apply ((xd)))).eq (xvalue))))
                                      (((unsupported)).apply ((((xTypeError)).apply (("can't deal with %r".mod (xvalue))))))
                            x_cmp__.write
                              [xself xother]
                                seq > @
                                  seq
                                    ((((xisinstance)).apply ((xother)) ((xRat))).not).if
                                      xother.write (((xRat)).apply ((xother)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((xself).xn).mul ((xother).xd))) ((((xself).xd).mul ((xother).xn))))))
                                    (((unsupported)).apply ((((xx).greater (xy)).sub ((xx).less (xy)))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x_cmp__)).apply ((xother))).eq 0)))
                            x__ge__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x_cmp__)).apply ((xother))).geq 0)))
                            x__gt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x_cmp__)).apply ((xother))).greater 0)))
                            x__le__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x_cmp__)).apply ((xother))).leq 0)))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((((xself).x_cmp__)).apply ((xother))).less 0)))
                        xcases.write (((unsupported)).apply (0) (0.001) (0.99) (1.0) (1.5) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xt)) ((((unsupported)).apply ((((unsupported)).apply (2.0) (48))) ((((unsupported)).apply (2.0) (50))) ((((unsupported)).apply (2.0) (53))))))
                          bogusForceDataize.write ((((xcases).xextend)).apply ((((unsupported)).apply (((xt).sub 1.0)) (((xt).sub 0.3)) ((xt)) (((xt).add 0.3)) (((xt).add 1.0)) ((((xint)).apply (((xt).sub 1)))) ((((xint)).apply ((xt)))) ((((xint)).apply (((xt).add 1)))))))
                        bogusForceDataize.write ((((xcases).xextend)).apply ((((unsupported)).apply (0) (1) (2) (((xsys).xmaxsize)) ((((xfloat)).apply (((xsys).xmaxsize)))))))
                        xt.write (((xint)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xcases).xextend)).apply ((((unsupported)).apply (0) (1) (2) ((((unsupported)).apply (1) (20000))) (((xt).sub 1)) ((xt)) (((xt).add 1)))))
                        bogusForceDataize.write ((((xcases).xextend)).apply ((((unsupported)).apply (((xx).neg)) ((xx)) ((xcases)))))
                        (((unsupported)).apply ((xx)) ((xcases)))
                          seq
                            xRx.write (((xRat)).apply ((xx)))
                            (((unsupported)).apply ((xy)) ((xcases)))
                              seq
                                xRy.write (((xRat)).apply ((xy)))
                                xRcmp.write (((xRx).greater (xRy)).sub ((xRx).less (xRy)))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xx)) ((xy)) ((xRcmp)))))
                                  seq
                                    xxycmp.write (((xx).greater (xy)).sub ((xx).less (xy)))
                                    bogusForceDataize.write (((xeq)).apply ((xRcmp)) ((xxycmp)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).eq (xy))) (((xRcmp).eq 0)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).neq (xy))) (((xRcmp).neq 0)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).less (xy))) (((xRcmp).less 0)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).leq (xy))) (((xRcmp).leq 0)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).greater (xy))) (((xRcmp).greater 0)))
                                    bogusForceDataize.write (((xeq)).apply (((xx).geq (xy))) (((xRcmp).geq 0)))
                xtest__format__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123456789) ("d"))) ("123456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123456789) ("d"))) ("123456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123456789) (","))) ("123,456,789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (123456789) ("_"))) ("123_456_789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1) ("-"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.neg)) ("-"))) ("-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1) ("-3"))) ("  1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.neg)) ("-3"))) (" -1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1) ("+3"))) (" +1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.neg)) ("+3"))) (" -1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1) (" 3"))) ("  1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.neg)) (" 3"))) (" -1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1) (" "))) (" 1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1.neg)) (" "))) ("-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (3) ("x"))) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (3) ("X"))) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("x"))) ("4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("x"))) ("-4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("8x"))) ("     4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("8x"))) ("    -4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("x"))) ("4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("x"))) ("-4d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((3.neg)) ("x"))) ("-3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((3.neg)) ("X"))) ("-3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((((xint)).apply ("be") (16))) ("x"))) ("be"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((((xint)).apply ("be") (16))) ("X"))) ("BE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((((xint)).apply ("be") (16)).neg)) ("x"))) ("-be"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (((((xint)).apply ("be") (16)).neg)) ("X"))) ("-BE"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (1234567890) (",x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234567890) ("_x"))) ("4996_02d2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234567890) ("_X"))) ("4996_02D2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (3) ("o"))) ("3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((3.neg)) ("o"))) ("-3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("o"))) ("2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("o"))) ("-2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("-o"))) ("2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("-o"))) ("-2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) (" o"))) (" 2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) (" o"))) ("-2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("+o"))) ("+2322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("+o"))) ("-2322"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (1234567890) (",o"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234567890) ("_o"))) ("111_4540_1322"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (3) ("b"))) ("11"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((3.neg)) ("b"))) ("-11"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("b"))) ("10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("b"))) ("-10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("-b"))) ("10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("-b"))) ("-10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) (" b"))) (" 10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) (" b"))) ("-10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (1234) ("+b"))) ("+10011010010"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((1234.neg)) ("+b"))) ("-10011010010"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (1234567890) (",b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply (12345) ("_b"))) ("11_0000_0011_1001"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (3) ("1.3"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (3) ("_c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (3) (",c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (3) ("+c"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify both") ((xformat)) (3) ("_,"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify both") ((xformat)) (3) (",_"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify both") ((xformat)) (3) ("_,d"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify both") ((xformat)) (3) (",_d"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify ',' with 's'") ((xformat)) (3) (",s"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Cannot specify '_' with 's'") ((xformat)) (3) ("_s"))
                        (((unsupported)).apply ((xformat_spec)) (((((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((((xrange)).apply ((((xord)).apply ("a"))) (((((xord)).apply ("z")).add 1))))).add (((unsupported)).apply ((((xchr)).apply ((xx)))) ((xx)) ((((xrange)).apply ((((xord)).apply ("A"))) (((((xord)).apply ("Z")).add 1))))))))
                          ((((unsupported)).apply ((xformat_spec)) ("bcdoxXeEfFgGn%")).not).if
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (0) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (1) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) ((1.neg)) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) ((((unsupported)).apply (2) (100))) ((xformat_spec)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xformat)) (((((unsupported)).apply (2) (100)).neg)) ((xformat_spec)))
                        (((unsupported)).apply ((xformat_spec)) ("eEfFgG%"))
                          (((unsupported)).apply ((xvalue)) ((((unsupported)).apply (0) (1) ((1.neg)) (100) ((100.neg)) (1234567890) ((1234567890.neg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xvalue)) ((xformat_spec)))) ((((xformat)).apply ((((xfloat)).apply ((xvalue)))) ((xformat_spec)))))
                xtest_nan_inf.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xint)) ((((xfloat)).apply ("inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xint)) ((((xfloat)).apply ("-inf"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xint)) ((((xfloat)).apply ("nan"))))
                xtest_mod_division.write
                  [xself]
                    memory > x_
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          x_.write (1.mod 0)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((13.mod 10)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((13.neg).mod 10)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((13.mod (10.neg))) ((7.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((13.neg).mod (10.neg))) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((12.mod 4)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((12.neg).mod 4)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((12.mod (4.neg))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((12.neg).mod (4.neg))) (0))
                xtest_true_division.write
                  [xself]
                    memory > xmhuge
                    memory > xnamespace
                    memory > xhuge
                    memory > xresult
                    seq > @
                      seq
                        xhuge.write (((unsupported)).apply (1) (40000))
                        xmhuge.write ((xhuge).neg)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhuge).div (xhuge))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmhuge).div (xmhuge))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhuge).div (xmhuge))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmhuge).div (xhuge))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.div (xhuge))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.div (xhuge))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.div (xmhuge))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.div (xmhuge))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((666.mul (xhuge)).add (((unsupported)).apply ((xhuge)) (1))).div (xhuge))) (666.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((666.mul (xmhuge)).add (((unsupported)).apply ((xmhuge)) (1))).div (xmhuge))) (666.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((666.mul (xhuge)).add (((unsupported)).apply ((xhuge)) (1))).div (xmhuge))) ((666.5.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((666.mul (xmhuge)).add (((unsupported)).apply ((xmhuge)) (1))).div (xhuge))) ((666.5.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhuge).div (((unsupported)).apply ((xhuge)) (1)))) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((1000000.mul (xhuge)).div (xhuge))) (1000000))
                        xnamespace.write (((unsupported)).apply ("huge") ((xhuge)) ("mhuge") ((xmhuge)))
                        (((unsupported)).apply ((xoverflow)) ((((unsupported)).apply ("float(huge)") ("float(mhuge)") ("huge / 1") ("huge / 2") ("huge / -1") ("huge / -2") ("mhuge / 100") ("mhuge / 200"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xeval)) ((xoverflow)) ((xnamespace)))
                        (((unsupported)).apply ((xunderflow)) ((((unsupported)).apply ("1 / huge") ("2 / huge") ("-1 / huge") ("-2 / huge") ("100 / mhuge") ("200 / mhuge"))))
                          seq
                            xresult.write (((xeval)).apply ((xunderflow)) ((xnamespace)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (0.0) (("expected underflow to 0 from %r".mod (xunderflow))))
                        (((unsupported)).apply ((xzero)) ((((unsupported)).apply ("huge / 0") ("mhuge / 0"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xeval)) ((xzero)) ((xnamespace)))
                xtest_floordiv.write
                  [xself]
                    memory > x_
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          x_.write (((unsupported)).apply (1) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (2) (3))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (2) ((3.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((2.neg)) (3))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((2.neg)) ((3.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((11.neg)) ((3.neg)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((11.neg)) (3))) ((4.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (11) ((3.neg)))) ((4.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (11) (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((12.neg)) ((3.neg)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((12.neg)) (3))) ((4.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (12) ((3.neg)))) ((4.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (12) (3))) (4))
                xcheck_truediv.write
                  [xself xa xb xskip_small]
                    memory > xexpected
                    memory > xgot
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xskip_small).and ((((xmax)).apply ((((xabs)).apply ((xa)))) ((((xabs)).apply ((xb))))).less (((unsupported)).apply (2) ((xDBL_MANT_DIG))))).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xOverflowError)) ((xZeroDivisionError)))
                          xexpected.write (((xrepr)).apply ((((xtruediv)).apply ((xa)) ((xb)))))
                          xexpected.write "overflow"
                          xexpected.write "zerodivision"
                        (((unsupported)).apply ((xOverflowError)) ((xZeroDivisionError)))
                          xgot.write (((xrepr)).apply (((xa).div (xb))))
                          xgot.write "overflow"
                          xgot.write "zerodivision"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((xgot)) (((("Incorrectly rounded division {}/{}: expected {}, got {}".xformat)).apply ((xa)) ((xb)) ((xexpected)) ((xgot)))))
                xtest_correctly_rounded_true_division.write
                  [xself]
                    memory > xb_bits
                    memory > xb
                    memory > xa
                    memory > xbases
                    memory > xx
                    memory > xy
                    memory > xa_bits
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (123) (0))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((456.neg)) (0))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (0) (3))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (0) ((3.neg)))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (0) (0))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (((671.mul 12345).mul (((unsupported)).apply (2) ((xDBL_MAX_EXP))))) (12345))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (12345) ((345678.mul (((unsupported)).apply (2) (((xDBL_MANT_DIG).sub (xDBL_MIN_EXP)))))))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((12345.mul (((unsupported)).apply (2) (100)))) (98765))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((12345.mul (((unsupported)).apply (2) (30)))) ((98765.mul (((unsupported)).apply (7) (81)))))
                        xbases.write (((unsupported)).apply (0) ((xDBL_MANT_DIG)) ((xDBL_MIN_EXP)) ((xDBL_MAX_EXP)) (((xDBL_MIN_EXP).sub (xDBL_MANT_DIG))))
                        (((unsupported)).apply ((xbase)) ((xbases)))
                          (((unsupported)).apply ((xexp)) ((((xrange)).apply (((xbase).sub 15)) (((xbase).add 15)))))
                            seq
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((75312.mul (((unsupported)).apply (2) ((((xmax)).apply ((xexp)) (0)))))) ((69187.mul (((unsupported)).apply (2) ((((xmax)).apply (((xexp).neg)) (0)))))))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((69187.mul (((unsupported)).apply (2) ((((xmax)).apply ((xexp)) (0)))))) ((75312.mul (((unsupported)).apply (2) ((((xmax)).apply (((xexp).neg)) (0)))))))
                        (((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (2) (7) (17) (12345) ((((unsupported)).apply (7) (100))) ((1.neg)) ((2.neg)) ((5.neg)) ((23.neg)) ((67891.neg)) (((((unsupported)).apply (41) (50)).neg)))))
                          (((unsupported)).apply ((xn)) ((((xrange)).apply ((10.neg)) (10))))
                            seq
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((xm).mul (xDBL_MIN_OVERFLOW)).add (xn))) ((xm)))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((xm).mul (xDBL_MIN_OVERFLOW)).add (xn))) (((xm).neg)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (250))))
                          bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((((((unsupported)).apply (2) ((xDBL_MANT_DIG))).add 1).mul 12345).mul (((unsupported)).apply (2) (200))).add (((unsupported)).apply (2) ((xn))))) (((((unsupported)).apply (2) ((xDBL_MANT_DIG))).mul 12345)))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply (1) (2731))
                        bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                          seq
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((unsupported)).apply (10) (((xi).add 1)))) ((((unsupported)).apply (10) ((xi)))))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((unsupported)).apply (10) ((xi)))) ((((unsupported)).apply (10) (((xi).add 1)))))
                        (((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (2) (4) (7) (8) (16) (17) (32) (12345) ((((unsupported)).apply (7) (100))) ((1.neg)) ((2.neg)) ((5.neg)) ((23.neg)) ((67891.neg)) (((((unsupported)).apply (41) (50)).neg)))))
                          (((unsupported)).apply ((xn)) ((((xrange)).apply ((10.neg)) (10))))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((((((unsupported)).apply (2) ((xDBL_MANT_DIG))).mul (xm)).add (xn))) ((xm)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply ((20.neg)) (20))))
                          bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((xn)) ((((unsupported)).apply (2) (1076))))
                        (((unsupported)).apply ((xM)) ((((unsupported)).apply ((((unsupported)).apply (10) (10))) ((((unsupported)).apply (10) (100))) ((((unsupported)).apply (10) (1000))))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                            seq
                              xa.write ((((xrandom).xrandrange)).apply (1) ((xM)))
                              xb.write ((((xrandom).xrandrange)).apply ((xa)) (((2.mul (xa)).add 1)))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((xa)) ((xb)))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply (((xa).neg)) ((xb)))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((xa)) (((xb).neg)))
                              bogusForceDataize.write ((((xself).xcheck_truediv)).apply (((xa).neg)) (((xb).neg)))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (10000))))
                          seq
                            xa_bits.write ((((xrandom).xrandrange)).apply (1000))
                            xb_bits.write ((((xrandom).xrandrange)).apply (1) (1000))
                            xx.write ((((xrandom).xrandrange)).apply ((((unsupported)).apply (2) ((xa_bits)))))
                            xy.write ((((xrandom).xrandrange)).apply (1) ((((unsupported)).apply (2) ((xb_bits)))))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((xx)) ((xy)))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply ((xx)) (((xy).neg)))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply (((xx).neg)) ((xy)))
                            bogusForceDataize.write ((((xself).xcheck_truediv)).apply (((xx).neg)) (((xy).neg)))
                xtest_negative_shift_count.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (42) ((3.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (42) (((((unsupported)).apply (1) (1000)).neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (42) ((3.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (42) (((((unsupported)).apply (1) (1000)).neg)))
                xtest_lshift_of_zero.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (0) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (0) (10))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (0) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (0) ((((unsupported)).apply (1) (1000))))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (0) (((((unsupported)).apply (1) (1000)).neg)))
                xtest_huge_lshift_of_zero.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (0) (((xsys).xmaxsize)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (0) ((((xsys).xmaxsize).add 1)))) (0))
                xtest_huge_lshift.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (1) ((((xsys).xmaxsize).add 1000)))) ((((unsupported)).apply ((((unsupported)).apply (1) (1000))) (((xsys).xmaxsize)))))
                xtest_huge_rshift.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (42) ((((unsupported)).apply (1) (1000))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((42.neg)) ((((unsupported)).apply (1) (1000))))) ((1.neg)))
                xtest_huge_rshift_of_huge.write
                  [xself xsize]
                    memory > xhuge
                    seq > @
                      (((unsupported)).apply)
                        xhuge.write (((unsupported)).apply (((((unsupported)).apply (1) (500)).add 11)) (((xsys).xmaxsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xhuge)) ((((xsys).xmaxsize).add 1)))) (((((unsupported)).apply (1) (499)).add 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xhuge)) ((((xsys).xmaxsize).add 1000)))) (0))
                xtest_small_ints.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (257))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) (((xi).add 0)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) (((xi).mul 1)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) (((xi).sub 0)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((unsupported)).apply ((xi)) (1))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) (((xi).and (1.neg))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) (((xi).or 0)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((unsupported)).apply ((xi)) (0))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((xi).neg).neg)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((unsupported)).apply ((xi)) (1))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((xint)).apply ((((xstr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xi)) ((((unsupported)).apply ((((unsupported)).apply ((xi)) (2))) (2))) ((((xstr)).apply ((xi)))))
                        xi.write (((unsupported)).apply (1) (70))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xi).sub (xi))) (0))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((0.mul (xi))) (0))
                xtest_bit_length.write
                  [xself]
                    memory > xtiny
                    memory > xk
                    memory > xa
                    seq > @
                      seq
                        xtiny.write (((unsupported)).apply)
                        (((unsupported)).apply ((xx)) ((((xrange)).apply ((65000.neg)) (65000))))
                          seq
                            xk.write ((((xx).xbit_length)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((((xlen)).apply (((((((xbin)).apply ((xx))).xlstrip)).apply ("-0b"))))))
                            ((xx).neq 0).if
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (2) (((xk).sub 1)))) ((((xabs)).apply ((xx)))) ((((unsupported)).apply (2) ((xk)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) (0))
                            ((xx).neq 0).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((1.add ((((xmath).xfloor)).apply (((((((xmath).xlog)).apply ((((xabs)).apply ((xx))))).div ((((xmath).xlog)).apply (2))).add (xtiny)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((0.xbit_length)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((1.xbit_length)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((1.neg).xbit_length)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((2.xbit_length)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((2.neg).xbit_length)).apply)) (2))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (2) (3) (15) (16) (17) (31) (32) (33) (63) (64) (234))))
                          seq
                            xa.write (((unsupported)).apply (2) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xa).sub 1).xbit_length)).apply)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((1.sub (xa)).xbit_length)).apply)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xbit_length)).apply)) (((xi).add 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xa).neg).xbit_length)).apply)) (((xi).add 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xa).add 1).xbit_length)).apply)) (((xi).add 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xa).neg).sub 1).xbit_length)).apply)) (((xi).add 1)))
                xtest_round.write
                  [xself]
                    memory > xexpected
                    memory > xgot
                    memory > xx
                    memory > xbad_exponents
                    memory > xtest_dict
                    memory > xexpect
                    seq > @
                      seq
                        xtest_dict.write (((unsupported)).apply (0) (0) (1) (0) (2) (0) (3) (0) (4) (0) (5) (0) (6) (10) (7) (10) (8) (10) (9) (10) (10) (10) (11) (10) (12) (10) (13) (10) (14) (10) (15) (20) (16) (20) (17) (20) (18) (20) (19) (20))
                        (((unsupported)).apply ((xoffset)) ((((xrange)).apply ((520.neg)) (520) (20))))
                          (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xtest_dict).xitems)).apply)))
                            seq
                              xgot.write (((xround)).apply (((xk).add (xoffset))) ((1.neg)))
                              xexpected.write ((xv).add (xoffset))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xgot)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((150.neg)) ((2.neg)))) ((200.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((149.neg)) ((2.neg)))) ((100.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((51.neg)) ((2.neg)))) ((100.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((50.neg)) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((49.neg)) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((1.neg)) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (0) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (1) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (49) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (50) ((2.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (51) ((2.neg)))) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (149) ((2.neg)))) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (150) ((2.neg)))) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (250) ((2.neg)))) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (251) ((2.neg)))) (300))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (172500) ((3.neg)))) (172000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (173500) ((3.neg)))) (174000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((1.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((2.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((3.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((4.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((5.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((6.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((7.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((8.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((9.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((10.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((11.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((12.neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply ((((unsupported)).apply)) ((999.neg)))) (0))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (10) (100))))
                          seq
                            xgot.write (((xround)).apply (((((unsupported)).apply (10) ((xk))).add 324678)) ((3.neg)))
                            xexpect.write ((((unsupported)).apply (10) ((xk))).add 325000)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpect)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xgot)))) ((xint)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (5))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                            seq
                              xx.write ((((xrandom).xrandrange)).apply ((10000.neg)) (10000))
                              xgot.write (((xround)).apply ((xx)) ((xn)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xx)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xgot)))) ((xint)))
                        (((unsupported)).apply ((xhuge_n)) ((((unsupported)).apply (((((unsupported)).apply (2) (31)).sub 1)) ((((unsupported)).apply (2) (31))) (((((unsupported)).apply (2) (63)).sub 1)) ((((unsupported)).apply (2) (63))) ((((unsupported)).apply (2) (100))) ((((unsupported)).apply (10) (100))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xround)).apply (8979323) ((xhuge_n)))) (8979323))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xx.write ((((xrandom).xrandrange)).apply ((10000.neg)) (10000))
                            xgot.write (((xround)).apply ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xgot)))) ((xint)))
                        xbad_exponents.write (((unsupported)).apply ("brian") (2.0) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xe)) ((xbad_exponents)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xround)) (3) ((xe)))
                xtest_to_bytes.write
                  [xself]
                    memory > xtests4
                    memory > xcheck
                    memory > xtests1
                    memory > xtests3
                    memory > xtests2
                    seq > @
                      seq
                        xcheck.write
                          [xtests xbyteorder xsigned]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xtest)) ((xexpected)))) (((((xtests).xitems)).apply)))
                                  (((unsupported)).apply ((xException)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtest).xto_bytes)) ((((xlen)).apply ((xexpected)))) ((xbyteorder)) ((xsigned)))) ((xexpected)))
                                    (((unsupported)).apply ((((xAssertionError)).apply (((("failed to convert {0} with byteorder={1} and signed={2}".xformat)).apply ((xtest)) ((xbyteorder)) ((xsigned)))))) ((xerr)))
                        xtests1.write (((unsupported)).apply (0) ("x00") (1) ("x01") ((1.neg)) ("xff") ((127.neg)) ("x81") ((128.neg)) ("x80") ((129.neg)) ("xffx7f") (127) ("x7f") (129) ("x00x81") ((255.neg)) ("xffx01") ((256.neg)) ("xffx00") (255) ("x00xff") (256) ("x01x00") (32767) ("x7fxff") ((32768.neg)) ("xffx80x00") (65535) ("x00xffxff") ((65536.neg)) ("xffx00x00") ((8388608.neg)) ("x80x00x00"))
                        (((unsupported)).apply ((xcheck)) ((xtests1)) ("big") (TRUE))
                        xtests2.write (((unsupported)).apply (0) ("x00") (1) ("x01") ((1.neg)) ("xff") ((127.neg)) ("x81") ((128.neg)) ("x80") ((129.neg)) ("x7fxff") (127) ("x7f") (129) ("x81x00") ((255.neg)) ("x01xff") ((256.neg)) ("x00xff") (255) ("xffx00") (256) ("x00x01") (32767) ("xffx7f") ((32768.neg)) ("x00x80") (65535) ("xffxffx00") ((65536.neg)) ("x00x00xff") ((8388608.neg)) ("x00x00x80"))
                        (((unsupported)).apply ((xcheck)) ((xtests2)) ("little") (TRUE))
                        xtests3.write (((unsupported)).apply (0) ("x00") (1) ("x01") (127) ("x7f") (128) ("x80") (255) ("xff") (256) ("x01x00") (32767) ("x7fxff") (32768) ("x80x00") (65535) ("xffxff") (65536) ("x01x00x00"))
                        (((unsupported)).apply ((xcheck)) ((xtests3)) ("big") (FALSE))
                        xtests4.write (((unsupported)).apply (0) ("x00") (1) ("x01") (127) ("x7f") (128) ("x80") (255) ("xff") (256) ("x00x01") (32767) ("xffx7f") (32768) ("x00x80") (65535) ("xffxff") (65536) ("x00x00x01"))
                        (((unsupported)).apply ((xcheck)) ((xtests4)) ("little") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((256.xto_bytes)) (1) ("big") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((256.xto_bytes)) (1) ("big") (TRUE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((256.xto_bytes)) (1) ("little") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((256.xto_bytes)) (1) ("little") (TRUE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) (((1.neg).xto_bytes)) (2) ("big") (FALSE))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) (((1.neg).xto_bytes)) (2) ("little") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((0.xto_bytes)).apply (0) ("big"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((1.xto_bytes)).apply (5) ("big"))) ("x00x00x00x00x01"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((0.xto_bytes)).apply (5) ("big"))) ("x00x00x00x00x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((1.neg).xto_bytes)) (5) ("big") (TRUE))) ("xffxffxffxffxff"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((1.xto_bytes)) (0) ("big"))
                xtest_from_bytes.write
                  [xself]
                    memory > xtests4
                    memory > xcheck
                    memory > xi
                    memory > x__init__
                    memory > xtests1
                    memory > xtests3
                    memory > xtests2
                    memory > x__new__
                    seq > @
                      seq
                        xcheck.write
                          [xtests xbyteorder xsigned]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xtest)) ((xexpected)))) (((((xtests).xitems)).apply)))
                                  (((unsupported)).apply ((xException)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((xtest)) ((xbyteorder)) ((xsigned)))) ((xexpected)))
                                    (((unsupported)).apply ((((xAssertionError)).apply (((("failed to convert {0} with byteorder={1!r} and signed={2}".xformat)).apply ((xtest)) ((xbyteorder)) ((xsigned)))))) ((xerr)))
                        xtests1.write (((unsupported)).apply ("") (0) ("x00") (0) ("x00x00") (0) ("x01") (1) ("x00x01") (1) ("xff") ((1.neg)) ("xffxff") ((1.neg)) ("x81") ((127.neg)) ("x80") ((128.neg)) ("xffx7f") ((129.neg)) ("x7f") (127) ("x00x81") (129) ("xffx01") ((255.neg)) ("xffx00") ((256.neg)) ("x00xff") (255) ("x01x00") (256) ("x7fxff") (32767) ("x80x00") ((32768.neg)) ("x00xffxff") (65535) ("xffx00x00") ((65536.neg)) ("x80x00x00") ((8388608.neg)))
                        (((unsupported)).apply ((xcheck)) ((xtests1)) ("big") (TRUE))
                        xtests2.write (((unsupported)).apply ("") (0) ("x00") (0) ("x00x00") (0) ("x01") (1) ("x00x01") (256) ("xff") ((1.neg)) ("xffxff") ((1.neg)) ("x81") ((127.neg)) ("x80") ((128.neg)) ("x7fxff") ((129.neg)) ("x7f") (127) ("x81x00") (129) ("x01xff") ((255.neg)) ("x00xff") ((256.neg)) ("xffx00") (255) ("x00x01") (256) ("xffx7f") (32767) ("x00x80") ((32768.neg)) ("xffxffx00") (65535) ("x00x00xff") ((65536.neg)) ("x00x00x80") ((8388608.neg)))
                        (((unsupported)).apply ((xcheck)) ((xtests2)) ("little") (TRUE))
                        xtests3.write (((unsupported)).apply ("") (0) ("x00") (0) ("x01") (1) ("x7f") (127) ("x80") (128) ("xff") (255) ("x01x00") (256) ("x7fxff") (32767) ("x80x00") (32768) ("xffxff") (65535) ("x01x00x00") (65536))
                        (((unsupported)).apply ((xcheck)) ((xtests3)) ("big") (FALSE))
                        xtests4.write (((unsupported)).apply ("") (0) ("x00") (0) ("x01") (1) ("x7f") (127) ("x80") (128) ("xff") (255) ("x00x01") (256) ("xffx7f") (32767) ("x00x80") (32768) ("xffxff") (65535) ("x00x00x01") (65536))
                        (((unsupported)).apply ((xcheck)) ((xtests4)) ("little") (FALSE))
                        (((unsupported)).apply ((xint)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xmyint).xfrom_bytes)).apply ("x00") ("big"))))) ((xmyint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmyint).xfrom_bytes)).apply ("x01") ("big"))) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply (((xmyint).xfrom_bytes)) ("x00") ("big") (FALSE))))) ((xmyint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmyint).xfrom_bytes)) ("x01") ("big") (FALSE))) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xmyint).xfrom_bytes)).apply ("x00") ("little"))))) ((xmyint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmyint).xfrom_bytes)).apply ("x01") ("little"))) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply (((xmyint).xfrom_bytes)) ("x00") ("little") (FALSE))))) ((xmyint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmyint).xfrom_bytes)) ("x01") ("little") (FALSE))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((((unsupported)).apply (255) (0) (0))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((((unsupported)).apply (255) (0) (0))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((((xbytearray)).apply ("xffx00x00"))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((((xbytearray)).apply ("xffx00x00"))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) (((((xarray).xarray)).apply ("B") ("xffx00x00"))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xint).xfrom_bytes)) ((((xmemoryview)).apply ("xffx00x00"))) ("big") (TRUE))) ((65536.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xint).xfrom_bytes)) ((((unsupported)).apply (256))) ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xint).xfrom_bytes)) ((((unsupported)).apply (0))) ("bigx00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xint).xfrom_bytes)) ((((unsupported)).apply (0))) ("littlex00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xint).xfrom_bytes)) ("") ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xint).xfrom_bytes)) ("x00") ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xint).xfrom_bytes)) (0) ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xint).xfrom_bytes)) (0) ("big") (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmyint).xfrom_bytes)) ("") ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmyint).xfrom_bytes)) ("x00") ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmyint).xfrom_bytes)) (0) ("big"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xint).xfrom_bytes)) (0) ("big") (TRUE))
                        (((unsupported)).apply ((xint)))
                          x__new__.write
                            [xcls xvalue]
                              seq > @
                                (((unsupported)).apply (((((xint).x__new__)).apply ((xcls)) (((xvalue).add 1)))))
                        xi.write ((((xmyint2).xfrom_bytes)).apply ("x01") ("big"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xi)))) ((xmyint2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (2))
                        (((unsupported)).apply ((xint)))
                          x__init__.write
                            [xself xvalue]
                              seq > @
                                (((unsupported)).apply (((xself).xfoo)) ("bar"))
                        xi.write ((((xmyint3).xfrom_bytes)).apply ("x01") ("big"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xi)))) ((xmyint3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xi)) ("foo") ("none"))) ("bar"))
                xtest_access_to_nonexistent_digit_0.write
                  [xself]
                    memory > x__new__
                    memory > xintegers
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          x__new__.write
                            [xcls xvalue]
                              memory > xself
                              seq > @
                                (((unsupported)).apply)
                                  xself.write ((((xint).x__new__)).apply ((xcls)) ((xvalue)))
                                  (((unsupported)).apply (((xself).xfoo)) ("foo"))
                                  (((unsupported)).apply ((xself)))
                        xintegers.write (((unsupported)).apply ((((xInteger)).apply (0))) ((xi)) ((((xrange)).apply (1000))))
                        (((unsupported)).apply ((xn)) ((((xmap)).apply ((xint)) ((xintegers)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (0))
                xtest_shift_bool.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xvalue)) ((((unsupported)).apply (TRUE) (FALSE))))
                        (((unsupported)).apply ((xshift)) ((((unsupported)).apply (0) (2))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((xvalue)) ((xshift)))))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((xvalue)) ((xshift)))))) ((xint)))
                xtest_as_integer_ratio.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                        xtests.write (((unsupported)).apply (10) (0) ((10.neg)) (1) ((((xsys).xmaxsize).add 1)) (TRUE) (FALSE) ((((xmyint)).apply (42))))
                        (((unsupported)).apply ((xvalue)) ((xtests)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xnumerator)) ((xdenominator)))) (((((xvalue).xas_integer_ratio)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnumerator)) ((xdenominator)))) ((((unsupported)).apply ((((xint)).apply ((xvalue)))) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xnumerator)))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xdenominator)))) ((xint)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)