memory > xUnicodeDecodeError
memory > xdatetime
memory > xascii_range
memory > xfmt
memory > xrange
memory > xtype
memory > xint
memory > xsuper
memory > xargs
memory > xitem
memory > xe
memory > xDecimal
memory > xmemoryview
memory > xa
memory > xquote
memory > xstr
memory > xb
memory > xDjangoUnicodeDecodeError
memory > xchar
memory > xException
memory > xcodecs
memory > xissubclass
memory > xbytes
memory > xlocale
memory > xfloat
memory > xisinstance
memory > xPromise
memory > xlen
[] > encoding
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xuri_to_iri
        memory > xforce_str
        memory > xrepercent_broken_unicode
        memory > xget_system_encoding
        memory > xiri_to_uri
        memory > xsmart_bytes
        memory > xis_protected_type
        memory > x_hexdig
        memory > xescape_uri_path
        memory > xDEFAULT_LOCALE_ENCODING
        memory > x__str__
        memory > xpunycode
        memory > xfilepath_to_uri
        memory > x__init__
        memory > x_PROTECTED_TYPES
        memory > x_hextobyte
        memory > xforce_bytes
        memory > x_ascii_ranges
        memory > xsmart_str
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xUnicodeDecodeError)))
              seq
                x__init__.write
                  [xself xobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xobj)) ((xobj)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("%s. You passed in %r (%s)".mod (((unsupported)).apply (((((((xsuper)).apply).x__str__)).apply)) (((xself).xobj)) ((((xtype)).apply (((xself).xobj))))))))
            xsmart_str.write
              [xs xencoding xstrings_only xerrors]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xs)) ((xPromise))).if
                      (((unsupported)).apply ((xs)))
                    (((unsupported)).apply ((((xforce_str)).apply ((xs)) ((xencoding)) ((xstrings_only)) ((xerrors)))))
            x_PROTECTED_TYPES.write (((unsupported)).apply ((((xtype)).apply ("None: is there a None literal in the EO language?"))) ((xint)) ((xfloat)) ((xDecimal)) (((xdatetime).xdatetime)) (((xdatetime).xdate)) (((xdatetime).xtime)))
            xis_protected_type.write
              [xobj]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xisinstance)).apply ((xobj)) ((x_PROTECTED_TYPES)))))
            xforce_str.write
              [xs xencoding xstrings_only xerrors]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xissubclass)).apply ((((xtype)).apply ((xs)))) ((xstr))).if
                      (((unsupported)).apply ((xs)))
                    ((xstrings_only).and (((xis_protected_type)).apply ((xs)))).if
                      (((unsupported)).apply ((xs)))
                    (((unsupported)).apply ((xUnicodeDecodeError)))
                      (((xisinstance)).apply ((xs)) ((xbytes))).if
                        xs.write (((xstr)).apply ((xs)) ((xencoding)) ((xerrors)))
                        xs.write (((xstr)).apply ((xs)))
                      (((unsupported)).apply ((((xDjangoUnicodeDecodeError)).apply ((xs)) ((((unsupported)).apply (((xe).xargs)))))))
                    (((unsupported)).apply ((xs)))
            xsmart_bytes.write
              [xs xencoding xstrings_only xerrors]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xs)) ((xPromise))).if
                      (((unsupported)).apply ((xs)))
                    (((unsupported)).apply ((((xforce_bytes)).apply ((xs)) ((xencoding)) ((xstrings_only)) ((xerrors)))))
            xforce_bytes.write
              [xs xencoding xstrings_only xerrors]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xs)) ((xbytes))).if
                      ((xencoding).eq "utf-8").if
                        (((unsupported)).apply ((xs)))
                        (((unsupported)).apply ((((((((xs).xdecode)).apply ("utf-8") ((xerrors))).xencode)).apply ((xencoding)) ((xerrors)))))
                    ((xstrings_only).and (((xis_protected_type)).apply ((xs)))).if
                      (((unsupported)).apply ((xs)))
                    (((xisinstance)).apply ((xs)) ((xmemoryview))).if
                      (((unsupported)).apply ((((xbytes)).apply ((xs)))))
                    (((unsupported)).apply (((((((xstr)).apply ((xs))).xencode)).apply ((xencoding)) ((xerrors)))))
            xiri_to_uri.write
              [xiri]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xiri)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xiri)))
                      (((xisinstance)).apply ((xiri)) ((xPromise))).if
                        xiri.write (((xstr)).apply ((xiri)))
                    (((unsupported)).apply ((((unsupported)).apply ((xquote)) ((xiri)) ("/#%[]=:;$&()+,!?*@'~"))))
            x_ascii_ranges.write (((unsupported)).apply ((((unsupported)).apply (45) (46) (95) (126))) ((((xrange)).apply (65) (91))) ((((xrange)).apply (97) (123))))
            x_hextobyte.write (((unsupported)).apply ((((((xfmt).mod (xchar)).xencode)).apply)) ((((xbytes)).apply ((((unsupported)).apply ((xchar)))))) ((xascii_range)) ((x_ascii_ranges)) ((xchar)) ((xascii_range)) ((xfmt)) ((((unsupported)).apply ("%02x") ("%02X"))))
            x_hexdig.write "0123456789ABCDEFabcdef"
            bogusForceDataize.write ((((x_hextobyte).xupdate)).apply ((((unsupported)).apply ((((((xa).add (xb)).xencode)).apply)) (((((xbytes).xfromhex)).apply (((xa).add (xb))))) ((xa)) ((((unsupported)).apply ((x_hexdig)) ((((unsupported)).apply (8))))) ((xb)) ((x_hexdig)))))
            xuri_to_iri.write
              [xuri]
                memory > xiri
                memory > xbits
                memory > xparts
                memory > xhextobyte
                memory > xappend
                memory > xhex
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xuri)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xuri)))
                    xuri.write (((xforce_bytes)).apply ((xuri)))
                    xbits.write ((((xuri).xsplit)).apply ("%"))
                    ((((xlen)).apply ((xbits))).eq 1).if
                      xiri.write (xuri)
                      seq
                        xparts.write (((unsupported)).apply ((((unsupported)).apply ((xbits)) (0))))
                        xappend.write ((xparts).xappend)
                        xhextobyte.write (x_hextobyte)
                        (((unsupported)).apply ((xitem)) ((((unsupported)).apply ((xbits)) ((((unsupported)).apply (1))))))
                          seq
                            xhex.write (((unsupported)).apply ((xitem)) ((((unsupported)).apply (2))))
                            (((unsupported)).apply ((xhex)) ((xhextobyte))).if
                              seq
                                bogusForceDataize.write (((xappend)).apply ((((unsupported)).apply ((xhextobyte)) ((((unsupported)).apply ((xitem)) ((((unsupported)).apply (2))))))))
                                bogusForceDataize.write (((xappend)).apply ((((unsupported)).apply ((xitem)) ((((unsupported)).apply (2))))))
                              seq
                                bogusForceDataize.write (((xappend)).apply ("%"))
                                bogusForceDataize.write (((xappend)).apply ((xitem)))
                        xiri.write ((("".xjoin)).apply ((xparts)))
                    (((unsupported)).apply (((((((xrepercent_broken_unicode)).apply ((xiri))).xdecode)).apply)))
            xescape_uri_path.write
              [xpath]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xquote)) ((xpath)) ("/:@&+$,-_.!~*'()"))))
            xpunycode.write
              [xdomain]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((((((xdomain).xencode)).apply ("idna")).xdecode)).apply ("ascii"))))
            xrepercent_broken_unicode.write
              [xpath]
                memory > xrepercent
                seq > @
                  seq
                    (((unsupported)).apply)
                    while.
                      TRUE
                      [unused]
                        seq > @
                          (((unsupported)).apply ((xUnicodeDecodeError)))
                            bogusForceDataize.write ((((xpath).xdecode)).apply)
                            seq
                              xrepercent.write (((unsupported)).apply ((xquote)) ((((unsupported)).apply ((xpath)) ((((unsupported)).apply (((xe).xstart)) (((xe).xend)))))) ("/#%[]=:;$&()+,!?*@'~"))
                              xpath.write (((((unsupported)).apply ((xpath)) ((((unsupported)).apply (((xe).xstart))))).add ((((xrepercent).xencode)).apply)).add (((unsupported)).apply ((xpath)) ((((unsupported)).apply (((xe).xend))))))
                            (((unsupported)).apply ((xpath)))
            xfilepath_to_uri.write
              [xpath]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xpath)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xpath)))
                    (((unsupported)).apply ((((unsupported)).apply ((xquote)) (((((((xstr)).apply ((xpath))).xreplace)).apply ("\\") ("/"))) ("/~!*()'"))))
            xget_system_encoding.write
              []
                memory > xencoding
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xException)))
                      seq
                        xencoding.write ((((unsupported)).apply (((((xlocale).xgetlocale)).apply)) (1)).or "ascii")
                        bogusForceDataize.write ((((xcodecs).xlookup)).apply ((xencoding)))
                      xencoding.write "ascii"
                    (((unsupported)).apply ((xencoding)))
            xDEFAULT_LOCALE_ENCODING.write (((xget_system_encoding)).apply)