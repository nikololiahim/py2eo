memory > xmin
memory > xBooleanField
memory > xpos
memory > xBinaryField
memory > xextra
memory > xAsGML
memory > xargs
memory > xextra_context
memory > xsql
memory > xDecimal
memory > xGeoFuncMixin
memory > xkwargs
memory > xTypeError
memory > xGeomOutputGeoFunc
memory > xOracleToleranceMixin
memory > xTextField
memory > xFunc
memory > xGeometryField
memory > xLength
memory > xValueError
memory > xSQLiteDecimalToFloatMixin
memory > xFieldError
memory > xBaseSpatialField
memory > xCast
memory > xDistanceField
memory > xexpr
memory > xBoundingCircle
memory > xIntegerField
memory > xDistanceResultMixin
memory > xtype
memory > xValue
memory > xf
memory > xint
memory > xhasattr
memory > xFloatField
memory > xTransform
memory > xDistance
memory > xTranslate
memory > xparams
memory > xNotSupportedError
memory > xsuper
memory > xAreaField
memory > xScale
memory > xarg
memory > xbool
memory > xexpressions
memory > xfloat
memory > xAsGeoJSON
memory > xisinstance
memory > xGEOSGeometry
memory > xGeoFunc
memory > xlen
[] > functions
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_handle_param
        memory > xarg_joiner
        memory > xgeo_field
        memory > xas_postgresql
        memory > xarity
        memory > xlookup_name
        memory > xas_sqlite
        memory > x__init__
        memory > xoutput_field
        memory > xtolerance
        memory > xas_oracle
        memory > xas_mysql
        memory > xspheroid
        memory > xas_sql
        memory > xfunction
        memory > xresolve_expression
        memory > xname
        memory > xNUMERIC_TYPES
        memory > xgeom_param_pos
        memory > xsource_is_geography
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xNUMERIC_TYPES.write (((unsupported)).apply ((xint)) ((xfloat)) ((xDecimal)))
            (((unsupported)).apply)
              seq
                xfunction.write "None: is there a None literal in the EO language?"
                xgeom_param_pos.write (((unsupported)).apply (0))
                x__init__.write
                  [xself]
                    memory > xoutput_field
                    memory > xexpr
                    memory > xgeom
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                        (((unsupported)).apply ((xpos)) (((xself).xgeom_param_pos)))
                          seq
                            xexpr.write (((unsupported)).apply (((xself).xsource_expressions)) ((xpos)))
                            ((((xisinstance)).apply ((xexpr)) ((xValue))).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xFieldError)))
                              xoutput_field.write ((xexpr).xoutput_field)
                              xoutput_field.write "None: is there a None literal in the EO language?"
                            xgeom.write ((xexpr).xvalue)
                            (((((xisinstance)).apply ((xgeom)) ((xGEOSGeometry))).not).or ((xoutput_field).and ((((xisinstance)).apply ((xoutput_field)) ((xGeometryField))).not))).if
                              (((unsupported)).apply ((((xTypeError)).apply (("%s function requires a geometric argument in position %d.".mod (((unsupported)).apply (((xself).xname)) (((xpos).add 1))))))))
                            ((((xgeom).xsrid).not).and ((xoutput_field).not)).if
                              (((unsupported)).apply ((((xValueError)).apply ("SRID is required for all geometries."))))
                            ((xoutput_field).not).if
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsource_expressions)) ((xpos)))) ((((unsupported)).apply ((xValue)) ((xgeom)) ((((unsupported)).apply ((xGeometryField)) (((xgeom).xsrid)))))))
                xname.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).x__class__).x__name__)))
                xgeo_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((unsupported)).apply (((xself).xsource_expressions)) ((((unsupported)).apply (((xself).xgeom_param_pos)) (0)))).xfield)))
                xas_sql.write
                  [xself xcompiler xconnection xfunction]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply (((xself).xfunction)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xfunction)) ("None: is there a None literal in the EO language?"))).if
                          xfunction.write (((((xconnection).xops).xspatial_function_name)).apply (((xself).xname)))
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ((xfunction)) ((((unsupported)).apply ((xextra_context)))))))
                xresolve_expression.write
                  [xself]
                    memory > xexpr_srid
                    memory > xexpr
                    memory > xbase_srid
                    memory > xres
                    memory > xsource_fields
                    memory > xfield
                    seq > @
                      (((unsupported)).apply)
                        xres.write ((((((xsuper)).apply).xresolve_expression)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        xsource_fields.write ((((xres).xget_source_fields)).apply)
                        (((unsupported)).apply ((xpos)) (((xself).xgeom_param_pos)))
                          seq
                            xfield.write (((unsupported)).apply ((xsource_fields)) ((xpos)))
                            ((((xisinstance)).apply ((xfield)) ((xGeometryField))).not).if
                              (((unsupported)).apply ((((xTypeError)).apply (("%s function requires a GeometryField in position %s, got %s.".mod (((unsupported)).apply (((xself).xname)) (((xpos).add 1)) (((((xtype)).apply ((xfield))).x__name__))))))))
                        xbase_srid.write (((xres).xgeo_field).xsrid)
                        (((unsupported)).apply ((xpos)) ((((unsupported)).apply (((xself).xgeom_param_pos)) ((((unsupported)).apply (1))))))
                          seq
                            xexpr.write (((unsupported)).apply (((xres).xsource_expressions)) ((xpos)))
                            xexpr_srid.write (((xexpr).xoutput_field).xsrid)
                            ((xexpr_srid).neq (xbase_srid)).if
                              (((unsupported)).apply ((((unsupported)).apply (((xres).xsource_expressions)) ((xpos)))) (((((((xTransform)).apply ((xexpr)) ((xbase_srid))).xresolve_expression)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply ((xres)))
                x_handle_param.write
                  [xself xvalue xparam_name xcheck_types]
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply ((xvalue)) ("resolve_expression")).not).if
                          ((xcheck_types).and ((((xisinstance)).apply ((xvalue)) ((xcheck_types))).not)).if
                            (((unsupported)).apply ((((xTypeError)).apply (("The %s parameter has the wrong type: should be %s.".mod (((unsupported)).apply ((xparam_name)) ((xcheck_types))))))))
                        (((unsupported)).apply ((xvalue)))
            (((unsupported)).apply ((xGeoFuncMixin)) ((xFunc)))
            (((unsupported)).apply ((xGeoFunc)))
              xoutput_field.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply ((xGeometryField)) ((((xself).xgeo_field).xsrid)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xcopy
                    seq > @
                      (((unsupported)).apply)
                        xcopy.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xcopy).xset_source_expressions)).apply ((((unsupported)).apply ((((((xhasattr)).apply ((xexpr)) ("value")).and (((xisinstance)).apply (((xexpr).xvalue)) ((xDecimal)))).if (((xValue)).apply ((((xfloat)).apply (((xexpr).xvalue))))) (xexpr))) ((xexpr)) (((((xcopy).xget_source_expressions)).apply)))))
                        (((unsupported)).apply (((((xcopy).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply)
              seq
                xtolerance.write 0.05
                xas_oracle.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    memory > xtolerance
                    seq > @
                      (((unsupported)).apply)
                        xtolerance.write (((xValue)).apply (((((xself).x_handle_param)).apply ((((((xself).xextra).xget)).apply ("tolerance") (((xself).xtolerance)))) ("tolerance") ((xNUMERIC_TYPES)))))
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xget_source_expressions)).apply)))) ((xtolerance)))))
                        (((unsupported)).apply (((((xclone).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeoFunc)))
              seq
                xarity.write 1
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xAreaField)).apply (((xself).xgeo_field)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((((xconnection).xfeatures).xsupports_area_geodetic).not).and (((((xself).xgeo_field).xgeodetic)).apply ((xconnection)))).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("Area on geodetic coordinate systems not supported."))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xextra_context)) ("template"))) ("%(function)s(%(expressions)s, %(spheroid)d)"))
                            (((unsupported)).apply ((((unsupported)).apply ((xextra_context)) ("spheroid"))) (TRUE))
                        (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xFloatField)).apply)
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xTextField)).apply)
                x__init__.write
                  [xself xexpression xbbox xcrs xprecision]
                    memory > xoptions
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((xexpression)))
                        (((unsupported)).apply ((xprecision)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xexpressions).xappend)).apply (((((xself).x_handle_param)).apply ((xprecision)) ("precision") ((xint)))))
                        xoptions.write 0
                        ((xcrs).and (xbbox)).if
                          xoptions.write 3
                          (xbbox).if
                            xoptions.write 1
                            (xcrs).if
                              xoptions.write 2
                        (xoptions).if
                          bogusForceDataize.write ((((xexpressions).xappend)).apply ((xoptions)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                xas_oracle.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    memory > xsource_expressions
                    seq > @
                      (((unsupported)).apply)
                        xsource_expressions.write ((((xself).xget_source_expressions)).apply)
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply ((xsource_expressions)) ((((unsupported)).apply (1))))))
                        (((unsupported)).apply (((((((xsuper)).apply ((xAsGeoJSON)) ((xclone))).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xgeom_param_pos.write (((unsupported)).apply (1))
                xoutput_field.write (((xTextField)).apply)
                x__init__.write
                  [xself xexpression xversion xprecision]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((xversion)) ((xexpression)))
                        (((unsupported)).apply ((xprecision)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xexpressions).xappend)).apply (((((xself).x_handle_param)).apply ((xprecision)) ("precision") ((xint)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                xas_oracle.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    memory > xsource_expressions
                    memory > xversion
                    seq > @
                      (((unsupported)).apply)
                        xsource_expressions.write ((((xself).xget_source_expressions)).apply)
                        xversion.write (((unsupported)).apply ((xsource_expressions)) (0))
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsource_expressions)) (1))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xextra_context)) ("function"))) (((((xversion).xvalue).eq 3).if "SDO_UTIL.TO_GML311GEOMETRY" "SDO_UTIL.TO_GMLGEOMETRY")))
                        (((unsupported)).apply (((((((xsuper)).apply ((xAsGML)) ((xclone))).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xTextField)).apply)
                x__init__.write
                  [xself xexpression xprecision]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((xexpression)))
                        (((unsupported)).apply ((xprecision)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xexpressions).xappend)).apply (((((xself).x_handle_param)).apply ((xprecision)) ("precision") ((xint)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xTextField)).apply)
                x__init__.write
                  [xself xexpression xrelative xprecision]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xrelative.write ((((xhasattr)).apply ((xrelative)) ("resolve_expression")).if (xrelative) (((xint)).apply ((xrelative))))
                        xexpressions.write (((unsupported)).apply ((xexpression)) ((xrelative)) (((((xself).x_handle_param)).apply ((xprecision)) ("precision") ((xint)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xBinaryField)).apply)
                xarity.write 1
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xTextField)).apply)
                xarity.write 1
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              seq
                x__init__.write
                  [xself xexpression xnum_seg]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xexpression)) ((xnum_seg)) ((((unsupported)).apply ((xextra)))))
                xas_oracle.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    seq > @
                      (((unsupported)).apply)
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xget_source_expressions)).apply)) (0))))))
                        (((unsupported)).apply (((((((xsuper)).apply ((xBoundingCircle)) ((xclone))).xas_oracle)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              xarity.write 1
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              seq
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply)
              seq
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xDistanceField)).apply (((xself).xgeo_field)))))
                xsource_is_geography.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xgeo_field).xgeography).and ((((xself).xgeo_field).xsrid).eq 4326))))
            (((unsupported)).apply ((xDistanceResultMixin)) ((xOracleToleranceMixin)) ((xGeoFunc)))
              seq
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
                xspheroid.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xexpr1 xexpr2 xspheroid]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((xexpr1)) ((xexpr2)))
                        (((unsupported)).apply ((xspheroid)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xspheroid)) (((((xself).x_handle_param)).apply ((xspheroid)) ("spheroid") ((xbool)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                xas_postgresql.write
                  [xself xcompiler xconnection]
                    memory > xfunction
                    memory > xclone
                    memory > xexpr2
                    memory > xgeography
                    seq > @
                      (((unsupported)).apply)
                        xclone.write ((((xself).xcopy)).apply)
                        xfunction.write "None: is there a None literal in the EO language?"
                        xexpr2.write (((unsupported)).apply (((xclone).xsource_expressions)) (1))
                        xgeography.write ((((xself).xsource_is_geography)).apply)
                        ((((xexpr2).xoutput_field).xgeography).neq (xgeography)).if
                          (((xisinstance)).apply ((xexpr2)) ((xValue))).if
                            (((unsupported)).apply ((((xexpr2).xoutput_field).xgeography)) ((xgeography)))
                            (((unsupported)).apply ((((unsupported)).apply (((xclone).xsource_expressions)) (1))) ((((xCast)).apply ((xexpr2)) ((((unsupported)).apply ((xGeometryField)) ((((xexpr2).xoutput_field).xsrid)) ((xgeography)))))))
                        (((xgeography).not).and (((((xself).xgeo_field).xgeodetic)).apply ((xconnection)))).if
                          ((xself).xspheroid).if
                            seq
                              xfunction.write (((((xconnection).xops).xspatial_function_name)).apply ("DistanceSpheroid"))
                              bogusForceDataize.write (((((xclone).xsource_expressions).xappend)).apply ((((xValue)).apply ((((((xself).xgeo_field).xspheroid)).apply ((xconnection)))))))
                            xfunction.write (((((xconnection).xops).xspatial_function_name)).apply ("DistanceSphere"))
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply ((xDistance)) ((xclone))).xas_sql)) ((xcompiler)) ((xconnection)) ((xfunction)) ((((unsupported)).apply ((xextra_context)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xextra_context)) ("template"))) ("COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"))
                            (((unsupported)).apply ((((unsupported)).apply ((xextra_context)) ("spheroid"))) ((((xint)).apply ((((xbool)).apply (((xself).xspheroid)))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeomOutputGeoFunc)))
              xarity.write 1
            (((unsupported)).apply ((xGeomOutputGeoFunc)))
              xarity.write 1
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xTextField)).apply)
                x__init__.write
                  [xself xexpression xprecision]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((xexpression)))
                        (((unsupported)).apply ((xprecision)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xexpressions).xappend)).apply (((((xself).x_handle_param)).apply ((xprecision)) ("precision") ((xint)))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                xas_mysql.write
                  [xself xcompiler xconnection]
                    memory > xclone
                    seq > @
                      (((unsupported)).apply)
                        xclone.write ((((xself).xcopy)).apply)
                        ((((xlen)).apply (((xclone).xsource_expressions))).less 2).if
                          bogusForceDataize.write (((((xclone).xsource_expressions).xappend)).apply ((((xValue)).apply (100))))
                        (((unsupported)).apply (((((xclone).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xFloatField)).apply)
                xarity.write 2
                xfunction.write ""
                xarg_joiner.write " <-> "
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              seq
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeoFuncMixin)) ((xTransform)) (((xBaseSpatialField).xregister_lookup)))
              seq
                xlookup_name.write "isvalid"
                xoutput_field.write (((xBooleanField)).apply)
                xas_oracle.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((((xsuper)).apply).xas_oracle)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                        (((unsupported)).apply ((((unsupported)).apply (("CASE %s WHEN 'TRUE' THEN 1 ELSE 0 END".mod (xsql))) ((xparams)))))
            (((unsupported)).apply ((xDistanceResultMixin)) ((xOracleToleranceMixin)) ((xGeoFunc)))
              seq
                x__init__.write
                  [xself xexpr1 xspheroid]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xspheroid)) ((xspheroid)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xexpr1)) ((((unsupported)).apply ((xextra)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        ((((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).and ((((xconnection).xfeatures).xsupports_length_geodetic).not)).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("This backend doesn't support Length on geodetic fields"))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                xas_postgresql.write
                  [xself xcompiler xconnection]
                    memory > xfunction
                    memory > xclone
                    memory > xdim
                    seq > @
                      (((unsupported)).apply)
                        xclone.write ((((xself).xcopy)).apply)
                        xfunction.write "None: is there a None literal in the EO language?"
                        ((((xself).xsource_is_geography)).apply).if
                          bogusForceDataize.write (((((xclone).xsource_expressions).xappend)).apply ((((xValue)).apply (((xself).xspheroid)))))
                          (((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).if
                            seq
                              xfunction.write (((((xconnection).xops).xspatial_function_name)).apply ("LengthSpheroid"))
                              bogusForceDataize.write (((((xclone).xsource_expressions).xappend)).apply ((((xValue)).apply ((((((xself).xgeo_field).xspheroid)).apply ((xconnection)))))))
                            seq
                              xdim.write (((xmin)).apply ((((unsupported)).apply (((xf).xdim)) ((xf)) (((((xself).xget_source_fields)).apply)) ((xf)))))
                              ((xdim).greater 2).if
                                xfunction.write (((xconnection).xops).xlength3d)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply ((xLength)) ((xclone))).xas_sql)) ((xcompiler)) ((xconnection)) ((xfunction)) ((((unsupported)).apply ((xextra_context)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xfunction
                    seq > @
                      (((unsupported)).apply)
                        xfunction.write "None: is there a None literal in the EO language?"
                        (((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).if
                          xfunction.write (((xself).xspheroid).if "GeodesicLength" "GreatCircleLength")
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ((xfunction)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xFloatField)).apply)
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply ((xGeomOutputGeoFunc)))
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xIntegerField)).apply)
                xarity.write 1
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xIntegerField)).apply)
                xarity.write 1
            (((unsupported)).apply ((xGeoFunc)))
              seq
                xoutput_field.write (((xIntegerField)).apply)
                xarity.write 1
            (((unsupported)).apply ((xDistanceResultMixin)) ((xOracleToleranceMixin)) ((xGeoFunc)))
              seq
                xarity.write 1
                xas_postgresql.write
                  [xself xcompiler xconnection]
                    memory > xfunction
                    memory > xdim
                    seq > @
                      (((unsupported)).apply)
                        xfunction.write "None: is there a None literal in the EO language?"
                        ((((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).and (((((xself).xsource_is_geography)).apply).not)).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("ST_Perimeter cannot use a non-projected non-geography field."))))
                        xdim.write (((xmin)).apply ((((unsupported)).apply (((xf).xdim)) ((xf)) (((((xself).xget_source_fields)).apply)))))
                        ((xdim).greater 2).if
                          xfunction.write (((xconnection).xops).xperimeter3d)
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ((xfunction)) ((((unsupported)).apply ((xextra_context)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((((xself).xgeo_field).xgeodetic)).apply ((xconnection))).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("Perimeter cannot use a non-projected field."))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              xarity.write 1
            (((unsupported)).apply ((xGeoFunc)))
              xarity.write 1
            (((unsupported)).apply ((xSQLiteDecimalToFloatMixin)) ((xGeomOutputGeoFunc)))
              x__init__.write
                [xself xexpression xx xy xz]
                  memory > xexpressions
                  seq > @
                    (((unsupported)).apply)
                      xexpressions.write (((unsupported)).apply ((xexpression)) (((((xself).x_handle_param)).apply ((xx)) ("x") ((xNUMERIC_TYPES)))) (((((xself).x_handle_param)).apply ((xy)) ("y") ((xNUMERIC_TYPES)))))
                      ((xz).neq 0.0).if
                        bogusForceDataize.write ((((xexpressions).xappend)).apply (((((xself).x_handle_param)).apply ((xz)) ("z") ((xNUMERIC_TYPES)))))
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
            (((unsupported)).apply ((xSQLiteDecimalToFloatMixin)) ((xGeomOutputGeoFunc)))
              x__init__.write
                [xself xexpression]
                  memory > xnargs
                  memory > xexpressions
                  seq > @
                    (((unsupported)).apply)
                      xnargs.write (((xlen)).apply ((xargs)))
                      xexpressions.write (((unsupported)).apply ((xexpression)))
                      (((unsupported)).apply ((xnargs)) ((((unsupported)).apply (1) (2)))).if
                        bogusForceDataize.write ((((xexpressions).xextend)).apply ((((unsupported)).apply (((((xself).x_handle_param)).apply ((xarg)) ("") ((xNUMERIC_TYPES)))) ((xarg)) ((xargs)))))
                        ((xnargs).eq 4).if
                          (((unsupported)).apply ((xexpressions)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).x_handle_param)).apply ((xarg)) ("") ((xNUMERIC_TYPES)))) ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (2))))))))) ((((unsupported)).apply ((((unsupported)).apply (((((xself).x_handle_param)).apply ((xarg)) ("") ((xNUMERIC_TYPES)))) ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (0) (2))))))))))))
                          (((unsupported)).apply ((((xValueError)).apply ("Must provide 1, 2, or 4 arguments to `SnapToGrid`."))))
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              seq
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))
            (((unsupported)).apply ((xGeomOutputGeoFunc)))
              x__init__.write
                [xself xexpression xsrid]
                  memory > xexpressions
                  seq > @
                    (((unsupported)).apply)
                      xexpressions.write (((unsupported)).apply ((xexpression)) (((((xself).x_handle_param)).apply ((xsrid)) ("srid") ((xint)))))
                      (((unsupported)).apply ("output_field") ((xextra))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("output_field"))) ((((unsupported)).apply ((xGeometryField)) ((xsrid)))))
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
            (((unsupported)).apply ((xScale)))
              xas_sqlite.write
                [xself xcompiler xconnection]
                  memory > xclone
                  seq > @
                    (((unsupported)).apply)
                      xclone.write ((((xself).xcopy)).apply)
                      ((((xlen)).apply (((xself).xsource_expressions))).less 4).if
                        bogusForceDataize.write (((((xclone).xsource_expressions).xappend)).apply ((((xValue)).apply (0))))
                      (((unsupported)).apply (((((((xsuper)).apply ((xTranslate)) ((xclone))).xas_sqlite)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xOracleToleranceMixin)) ((xGeomOutputGeoFunc)))
              seq
                xarity.write 2
                xgeom_param_pos.write (((unsupported)).apply (0) (1))