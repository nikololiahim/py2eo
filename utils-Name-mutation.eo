memory > xdjango
memory > xsetting
memory > xInterfaceError
memory > xNotSupportedError
memory > xissubclass
memory > xargs
memory > xgetattr
memory > xIntegrityError
memory > xisinstance
memory > xImportError
memory > xAttributeError
memory > xhints
memory > ximport_module
memory > ximport_string
memory > xstr
memory > xconn
memory > xrouter
memory > xb
memory > xvalue
memory > xError
memory > xBaseConnectionHandler
memory > x_
memory > xalias
memory > xdj_exc_type
memory > xDatabaseError
memory > xrepr
memory > xsettings
memory > xException
memory > xr
memory > xpkgutil
memory > xOperationalError
memory > xsuper
memory > xInternalError
memory > xsorted
memory > xispkg
memory > xProgrammingError
memory > xname
memory > xe_user
memory > xmap
memory > xImproperlyConfigured
memory > xkwargs
memory > xmodel
memory > xDataError
memory > xkey
[] > utils
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdb_for_read
        memory > x__call__
        memory > xdb_for_write
        memory > xsettings_name
        memory > xallow_relation
        memory > x__exit__
        memory > x__enter__
        memory > xcreate_connection
        memory > xDJANGO_VERSION_PICKLE_KEY2
        memory > xallow_migrate_model
        memory > xDEFAULT_DB_ALIAS
        memory > xclose_all
        memory > xdatabases
        memory > xload_backend
        memory > xallow_migrate
        memory > xrouters
        memory > x__init__
        memory > xget_migratable_models
        memory > x_router_func
        memory > xconfigure_settings
        memory > xthread_critical
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xDEFAULT_DB_ALIAS.write "default"
            xDJANGO_VERSION_PICKLE_KEY2.write "_django_version"
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xError)))
            (((unsupported)).apply ((xError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply ((xDatabaseError)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xwrapper]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xwrapper)) ((xwrapper)))
                x__enter__.write
                  [xself]
                    seq > @
                x__exit__.write
                  [xself xexc_type xexc_value xtraceback]
                    memory > xdb_exc_type
                    memory > xdj_exc_value
                    seq > @
                      seq
                        (((unsupported)).apply ((xexc_type)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xdj_exc_type)) ((((unsupported)).apply ((xDataError)) ((xOperationalError)) ((xIntegrityError)) ((xInternalError)) ((xProgrammingError)) ((xNotSupportedError)) ((xDatabaseError)) ((xInterfaceError)) ((xError)))))
                          seq
                            xdb_exc_type.write (((xgetattr)).apply ((((xself).xwrapper).xDatabase)) (((xdj_exc_type).x__name__)))
                            (((xissubclass)).apply ((xexc_type)) ((xdb_exc_type))).if
                              seq
                                xdj_exc_value.write (((xdj_exc_type)).apply ((((unsupported)).apply (((xexc_value).xargs)))))
                                (((unsupported)).apply ((xdj_exc_type)) ((((unsupported)).apply ((xDataError)) ((xIntegrityError))))).if
                                  (((unsupported)).apply ((((xself).xwrapper).xerrors_occurred)) (TRUE))
                                (((unsupported)).apply (((((xdj_exc_value).xwith_traceback)).apply ((xtraceback)))) ((xexc_value)))
                x__call__.write
                  [xself xfunc]
                    memory > xinner
                    seq > @
                      seq
                        xinner.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xself)))
                                  (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply ((xinner)))
            xload_backend.write
              [xbackend_name]
                memory > xbackend_reprs
                memory > xbuiltin_backends
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xbackend_name).eq "django.db.backends.postgresql_psycopg2").if
                      xbackend_name.write "django.db.backends.postgresql"
                    (((unsupported)).apply ((xImportError)))
                      (((unsupported)).apply ((((ximport_module)).apply (("%s.base".mod (xbackend_name))))))
                      seq
                        (((unsupported)).apply)
                        xbuiltin_backends.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((x_)) ((xname)) ((xispkg)))) (((((xpkgutil).xiter_modules)).apply (((((xdjango).xdb).xbackends).x__path__)))) (((xispkg).and (((unsupported)).apply ((xname)) ((((unsupported)).apply ("base") ("dummy")))))))
                        (((unsupported)).apply ((xbackend_name)) ((((unsupported)).apply (("django.db.backends.%s".mod (xb))) ((xb)) ((xbuiltin_backends))))).if
                          seq
                            xbackend_reprs.write (((xmap)).apply ((xrepr)) ((((xsorted)).apply ((xbuiltin_backends)))))
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply (("%r isn't an available database backend or couldn't be imported. Check the above exception. To use one of the built-in backends, use 'django.db.backends.XXX', where XXX is one of:n    %s".mod (((unsupported)).apply ((xbackend_name)) ((((", ".xjoin)).apply ((xbackend_reprs))))))))) ((xe_user)))
                          (((unsupported)).apply)
            (((unsupported)).apply ((xBaseConnectionHandler)))
              seq
                xsettings_name.write "DATABASES"
                xthread_critical.write TRUE
                xconfigure_settings.write
                  [xself xdatabases]
                    memory > xdefault_test_settings
                    memory > xtest_settings
                    seq > @
                      seq
                        xdatabases.write ((((((xsuper)).apply).xconfigure_settings)).apply ((xdatabases)))
                        ((xdatabases).eq (((unsupported)).apply)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((xDEFAULT_DB_ALIAS)))) ((((unsupported)).apply ("ENGINE") ("django.db.backends.dummy"))))
                          (((unsupported)).apply ((xDEFAULT_DB_ALIAS)) ((xdatabases))).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("You must define a '{DEFAULT_DB_ALIAS}' database."))))
                            ((((unsupported)).apply ((xdatabases)) ((xDEFAULT_DB_ALIAS))).eq (((unsupported)).apply)).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdatabases)) ((xDEFAULT_DB_ALIAS)))) ("ENGINE"))) ("django.db.backends.dummy"))
                        (((unsupported)).apply ((xconn)) (((((xdatabases).xvalues)).apply)))
                          seq
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("ATOMIC_REQUESTS") (FALSE))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("AUTOCOMMIT") (TRUE))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("ENGINE") ("django.db.backends.dummy"))
                            (((((unsupported)).apply ((xconn)) ("ENGINE")).eq "django.db.backends.").or ((((unsupported)).apply ((xconn)) ("ENGINE")).not)).if
                              (((unsupported)).apply ((((unsupported)).apply ((xconn)) ("ENGINE"))) ("django.db.backends.dummy"))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("CONN_MAX_AGE") (0))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("CONN_HEALTH_CHECKS") (FALSE))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("OPTIONS") ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xconn).xsetdefault)).apply ("TIME_ZONE") ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((xsetting)) ((((unsupported)).apply ("NAME") ("USER") ("PASSWORD") ("HOST") ("PORT"))))
                              bogusForceDataize.write ((((xconn).xsetdefault)).apply ((xsetting)) (""))
                            xtest_settings.write ((((xconn).xsetdefault)).apply ("TEST") ((((unsupported)).apply)))
                            xdefault_test_settings.write (((unsupported)).apply ((((unsupported)).apply ("CHARSET") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("COLLATION") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("MIGRATE") (TRUE))) ((((unsupported)).apply ("MIRROR") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("NAME") ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((xdefault_test_settings)))
                              bogusForceDataize.write ((((xtest_settings).xsetdefault)).apply ((xkey)) ((xvalue)))
                        (((unsupported)).apply ((xdatabases)))
                xdatabases.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsettings)))
                xcreate_connection.write
                  [xself xalias]
                    memory > xbackend
                    memory > xdb
                    seq > @
                      seq
                        xdb.write (((unsupported)).apply (((xself).xsettings)) ((xalias)))
                        xbackend.write (((xload_backend)).apply ((((unsupported)).apply ((xdb)) ("ENGINE"))))
                        (((unsupported)).apply (((((xbackend).xDatabaseWrapper)).apply ((xdb)) ((xalias)))))
                xclose_all.write
                  [xself]
                    memory > xconnection
                    seq > @
                      (((unsupported)).apply ((xalias)) ((xself)))
                        seq
                          (((unsupported)).apply ((xAttributeError)))
                            xconnection.write (((xgetattr)).apply (((xself).x_connections)) ((xalias)))
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xconnection).xclose)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xrouters]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_routers)) ((xrouters)))
                xrouters.write
                  [xself]
                    memory > xrouter
                    memory > xrouters
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_routers)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).x_routers)) (((xsettings).xDATABASE_ROUTERS)))
                        xrouters.write (((unsupported)).apply)
                        (((unsupported)).apply ((xr)) (((xself).x_routers)))
                          seq
                            (((xisinstance)).apply ((xr)) ((xstr))).if
                              xrouter.write (((((ximport_string)).apply ((xr)))).apply)
                              xrouter.write (xr)
                            bogusForceDataize.write ((((xrouters).xappend)).apply ((xrouter)))
                        (((unsupported)).apply ((xrouters)))
                x_router_func.write
                  [xaction]
                    memory > x_route_db
                    seq > @
                      seq
                        x_route_db.write
                          [xself xmodel]
                            memory > xchosen_db
                            memory > xmethod
                            memory > xinstance
                            seq > @
                              (((unsupported)).apply)
                                xchosen_db.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xrouter)) (((xself).xrouters)))
                                  (((unsupported)).apply ((xAttributeError)))
                                    xmethod.write (((xgetattr)).apply ((xrouter)) ((xaction)))
                                    seq
                                      xchosen_db.write (((xmethod)).apply ((xmodel)) ((((unsupported)).apply ((xhints)))))
                                      (xchosen_db).if
                                        (((unsupported)).apply ((xchosen_db)))
                                xinstance.write ((((xhints).xget)).apply ("instance"))
                                ((((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).and (((xinstance).x_state).xdb)).if
                                  (((unsupported)).apply ((((xinstance).x_state).xdb)))
                                (((unsupported)).apply ((xDEFAULT_DB_ALIAS)))
                        (((unsupported)).apply ((x_route_db)))
                xdb_for_read.write (((x_router_func)).apply ("db_for_read"))
                xdb_for_write.write (((x_router_func)).apply ("db_for_write"))
                xallow_relation.write
                  [xself xobj1 xobj2]
                    memory > xmethod
                    memory > xallow
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xrouter)) (((xself).xrouters)))
                          (((unsupported)).apply ((xAttributeError)))
                            xmethod.write ((xrouter).xallow_relation)
                            seq
                              xallow.write (((xmethod)).apply ((xobj1)) ((xobj2)) ((((unsupported)).apply ((xhints)))))
                              (((unsupported)).apply ((xallow)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((xallow)))
                        (((unsupported)).apply (((((xobj1).x_state).xdb).eq (((xobj2).x_state).xdb))))
                xallow_migrate.write
                  [xself xdb xapp_label]
                    memory > xmethod
                    memory > xallow
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xrouter)) (((xself).xrouters)))
                          seq
                            (((unsupported)).apply ((xAttributeError)))
                              xmethod.write ((xrouter).xallow_migrate)
                              (((unsupported)).apply)
                            xallow.write (((xmethod)).apply ((xdb)) ((xapp_label)) ((((unsupported)).apply ((xhints)))))
                            (((unsupported)).apply ((xallow)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((xallow)))
                        (((unsupported)).apply (TRUE))
                xallow_migrate_model.write
                  [xself xdb xmodel]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xallow_migrate)) ((xdb)) ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xmodel_name)) ((xmodel)))))
                xget_migratable_models.write
                  [xself xapp_config xdb xinclude_auto_created]
                    memory > xmodels
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xmodels.write (((unsupported)).apply (((xapp_config).xget_models)) ((xinclude_auto_created)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel)) ((xmodel)) ((xmodels)) (((((xself).xallow_migrate_model)).apply ((xdb)) ((xmodel)))))))