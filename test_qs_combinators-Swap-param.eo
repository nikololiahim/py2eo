memory > xReservedName
memory > xOuterRef
memory > xcontext
memory > xrange
memory > xcombinator
memory > xconnection
memory > xDatabaseError
memory > xoperation
memory > xskipUnlessDBFeature
memory > xCelebrity
memory > xlen
memory > xTypeError
memory > xqs
memory > xoperator_
memory > xSubquery
memory > xlist
memory > xTestCase
memory > xAuthor
memory > xIntegerField
memory > xNumber
memory > xreversed
memory > xValue
memory > xExtraInfo
memory > xoperator
memory > xNotSupportedError
memory > xF
memory > xExists
memory > xi
memory > xoperator_func
memory > xCaptureQueriesContext
memory > xexpected_result
memory > xgetattr
[] > test_qs_combinators
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_get_difference
        memory > xtest_exists_difference
        memory > xtest_exists_union_empty_result
        memory > xtest_union_in_subquery_related_outerref
        memory > xtest_combining_multiple_models
        memory > xtest_union_distinct
        memory > xtest_simple_union
        memory > xtest_ordering_subqueries
        memory > xtest_union_multiple_models_with_values_list_and_order
        memory > xtest_ordering_by_f_expression_and_alias
        memory > xtest_get_intersection
        memory > xtest_unsupported_intersection_raises_db_error
        memory > xtest_union_with_two_annotated_values_list
        memory > xtest_union_with_values_list_and_order_on_annotation
        memory > xtest_union_with_values_list_on_annotated_and_unannotated
        memory > xtest_simple_intersection
        memory > xtest_order_by_same_type
        memory > xtest_ordering_by_f_expression
        memory > xtest_get_with_filters_unsupported_on_combined_qs
        memory > xtest_empty_qs_union_with_ordered_qs
        memory > xtest_union_none
        memory > xtest_intersection_with_values
        memory > xtest_union_with_values
        memory > xtest_difference_with_empty_qs
        memory > xtest_order_raises_on_non_selected_column
        memory > xtest_exists_intersection
        memory > xsetUpTestData
        memory > xtest_count_intersection
        memory > xtest_difference_with_values
        memory > xtest_exists_union
        memory > xtest_intersection_with_empty_qs
        memory > xtest_count_difference
        memory > xtest_limits
        memory > xtest_count_union
        memory > xtest_qs_with_subcompound_qs
        memory > xtest_union_multiple_models_with_values_list_and_order_by_extra_select
        memory > xtest_union_with_empty_qs
        memory > xtest_ordering_by_alias
        memory > xtest_operator_on_combined_qs_error
        memory > xtest_unsupported_ordering_slicing_raises_db_error
        memory > xtest_union_with_values_list_and_order
        memory > xtest_unsupported_operations_on_combined_qs
        memory > xassertNumbersEqual
        memory > xtest_ordering
        memory > xtest_count_union_empty_result
        memory > xtest_simple_difference
        memory > xtest_get_union
        memory > xtest_union_with_extra_and_values_list
        memory > xtest_union_in_subquery
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)) ((((xskipUnlessDBFeature)).apply ("supports_select_union"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xNumber).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNumber)) ((xi)) ((10.sub (xi))))) ((xi)) ((((xrange)).apply (10))))))
                xassertNumbersEqual.write
                  [xself xqueryset xexpected_numbers xordered]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((xordered)) (((((xoperator).xattrgetter)).apply ("num"))) ((xexpected_numbers)) ((xqueryset)))
                xtest_simple_union.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (8))
                        xqs3.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        (((unsupported)).apply (((xself).xassertNumbersEqual)) (((((xqs1).xunion)).apply ((xqs2)) ((xqs3)))) ((((unsupported)).apply (0) (1) (5) (8) (9))) (FALSE))
                xtest_simple_intersection.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs3.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (4) (6))
                        (((unsupported)).apply (((xself).xassertNumbersEqual)) (((((xqs1).xintersection)).apply ((xqs2)) ((xqs3)))) ((((unsupported)).apply (5))) (FALSE))
                xtest_intersection_with_values.write
                  [xself]
                    memory > xqs1
                    memory > xreserved_name
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("a") (2))
                        xqs1.write (((((xReservedName).xobjects).xall)).apply)
                        xreserved_name.write ((((((((((xqs1).xintersection)).apply ((xqs1))).xvalues)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("name"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("order"))) (2))
                        xreserved_name.write ((((((((((xqs1).xintersection)).apply ((xqs1))).xvalues_list)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("a") (2))))
                xtest_simple_difference.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (4))
                        (((unsupported)).apply (((xself).xassertNumbersEqual)) (((((xqs1).xdifference)).apply ((xqs2)))) ((((unsupported)).apply (5))) (FALSE))
                xtest_union_distinct.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xall)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((unsupported)).apply (((xqs1).xunion)) ((xqs2)) (TRUE))))))) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply (((((xqs1).xunion)).apply ((xqs2)))))))) (10))
                xtest_union_none.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (8))
                        xqs3.write ((((xqs1).xunion)).apply ((xqs2)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((xqs3).xnone)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertNumbersEqual)) ((xqs3)) ((((unsupported)).apply (0) (1) (8) (9))) (FALSE))
                xtest_intersection_with_empty_qs.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xnone)).apply)
                        xqs3.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xintersection)).apply ((xqs2)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xintersection)).apply ((xqs3)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xintersection)).apply ((xqs1)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xintersection)).apply ((xqs1)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xintersection)).apply ((xqs2)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xintersection)).apply ((xqs3)))))) (0))
                xtest_difference_with_empty_qs.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xnone)).apply)
                        xqs3.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xdifference)).apply ((xqs2)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xdifference)).apply ((xqs3)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xdifference)).apply ((xqs1)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xdifference)).apply ((xqs1)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xdifference)).apply ((xqs2)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xdifference)).apply ((xqs3)))))) (0))
                xtest_difference_with_values.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    memory > xreserved_name
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("a") (2))
                        xqs1.write (((((xReservedName).xobjects).xall)).apply)
                        xqs2.write (((((xReservedName).xobjects).xnone)).apply)
                        xreserved_name.write ((((((((((xqs1).xdifference)).apply ((xqs2))).xvalues)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("name"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("order"))) (2))
                        xreserved_name.write ((((((((((xqs1).xdifference)).apply ((xqs2))).xvalues_list)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("a") (2))))
                xtest_union_with_empty_qs.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xnone)).apply)
                        xqs3.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xunion)).apply ((xqs2)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xunion)).apply ((xqs1)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs1).xunion)).apply ((xqs3)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xunion)).apply ((xqs1)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xunion)).apply ((xqs1)) ((xqs1)) ((xqs1)))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply (((xqs2).xunion)) ((xqs1)) ((xqs1)) (TRUE))))) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs2).xunion)).apply ((xqs2)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xqs3).xunion)).apply ((xqs3)))))) (0))
                xtest_empty_qs_union_with_ordered_qs.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((((xNumber).xobjects).xorder_by)).apply ("num"))
                        xqs2.write (((((((((((xNumber).xobjects).xnone)).apply).xunion)).apply ((xqs1))).xorder_by)).apply ("num"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xqs1)))) ((((xlist)).apply ((xqs2)))))
                xtest_limits.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xall)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((unsupported)).apply (((((xqs1).xunion)).apply ((xqs2)))) ((((unsupported)).apply (2))))))))) (2))
                xtest_ordering.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) (3))
                        bogusForceDataize.write ((((xself).xassertNumbersEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("-num"))) ((((unsupported)).apply (3) (2) (1) (0))))
                xtest_ordering_by_alias.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xvalues)) ((((xF)).apply ("num"))))
                        xqs2.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) (3)).xvalues)) ((((xF)).apply ("num"))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("-alias"))) ((((unsupported)).apply (3) (2) (1) (0))) (((((xoperator).xitemgetter)).apply ("alias"))))
                xtest_ordering_by_f_expression.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) (3))
                        bogusForceDataize.write ((((xself).xassertNumbersEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply (((((((xF)).apply ("num")).xdesc)).apply)))) ((((unsupported)).apply (3) (2) (1) (0))))
                xtest_ordering_by_f_expression_and_alias.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xvalues)) ((((xF)).apply ("other_num"))))
                        xqs2.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) (3)).xvalues)) ((((xF)).apply ("other_num"))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply (((((((xF)).apply ("alias")).xdesc)).apply)))) ((((unsupported)).apply (10) (9) (8) (7))) (((((xoperator).xitemgetter)).apply ("alias"))))
                        (((unsupported)).apply ((((xNumber).xobjects).xcreate)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ((((unsupported)).apply (((((xF)).apply ("alias")).xdesc)) (TRUE))))) ((((unsupported)).apply (10) (9) (8) (7) ("None: is there a None literal in the EO language?"))) (((((xoperator).xitemgetter)).apply ("alias"))))
                xtest_union_with_values.write
                  [xself]
                    memory > xqs1
                    memory > xreserved_name
                    seq > @
                      seq
                        (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("a") (2))
                        xqs1.write (((((xReservedName).xobjects).xall)).apply)
                        xreserved_name.write ((((((((((xqs1).xunion)).apply ((xqs1))).xvalues)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("name"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ("order"))) (2))
                        xreserved_name.write ((((((((((xqs1).xunion)).apply ((xqs1))).xvalues_list)).apply ("name") ("order") ("id")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreserved_name)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("a") (2))))
                        xreserved_name.write ((((((((((xqs1).xunion)).apply ((xqs1))).xvalues_list)).apply ("order")).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreserved_name)) ((((unsupported)).apply (2))))
                xtest_union_with_two_annotated_values_list.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write ((((((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xannotate)) ((((xValue)).apply (0) ((((xIntegerField)).apply))))).xvalues_list)).apply ("num") ("count"))
                        xqs2.write ((((((unsupported)).apply (((((unsupported)).apply ((((((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2)).xvalues)).apply ("pk")).xannotate)) ((((xF)).apply ("num")))).xannotate)) ((((xValue)).apply (1) ((((xIntegerField)).apply))))).xvalues_list)).apply ("num") ("count"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xqs1).xunion)).apply ((xqs2)))) ((((unsupported)).apply ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (2) (1))))))
                xtest_union_with_extra_and_values_list.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write ((((((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xextra)) ((((unsupported)).apply ("count") (0)))).xvalues_list)).apply ("num") ("count"))
                        xqs2.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2)).xextra)) ((((unsupported)).apply ("count") (1))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xqs1).xunion)).apply ((xqs2)))) ((((unsupported)).apply ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (2) (1))))))
                xtest_union_with_values_list_on_annotated_and_unannotated.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("rn1") (1))
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xannotate)) ((((xExists)).apply ((((unsupported)).apply ((((xReservedName).xobjects).xfilter)) ((((xOuterRef)).apply ("num")))))))).xfilter)) (TRUE))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (9))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply ((((((xqs1).xunion)).apply ((xqs2))).xvalues_list)) ("num") (TRUE))) ((((unsupported)).apply (1) (9))))
                xtest_union_with_values_list_and_order.write
                  [xself]
                    memory > xunion_qs
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        bogusForceDataize.write (((((xReservedName).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xReservedName)) ("rn1") (7))) ((((unsupported)).apply ((xReservedName)) ("rn2") (5))) ((((unsupported)).apply ((xReservedName)) ("rn0") (6))) ((((unsupported)).apply ((xReservedName)) ("rn9") ((1.neg)))))))
                        xqs1.write (((unsupported)).apply ((((xReservedName).xobjects).xfilter)) (6))
                        xqs2.write (((unsupported)).apply ((((xReservedName).xobjects).xfilter)) (5))
                        xunion_qs.write ((((xqs1).xunion)).apply ((xqs2)))
                        (((unsupported)).apply ((((unsupported)).apply ((xqs)) ((xexpected_result)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((((xunion_qs).xorder_by)).apply ("-pk")).xvalues_list)) ("order") (TRUE))) ((((unsupported)).apply ((1.neg)) (6) (5) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((((((xunion_qs).xorder_by)).apply ("pk")).xvalues_list)) ("order") (TRUE))) ((((unsupported)).apply (7) (5) (6) ((1.neg)))))) ((((unsupported)).apply (((((((unsupported)).apply (((xunion_qs).xvalues_list)) ("order") (TRUE)).xorder_by)).apply ("-pk"))) ((((unsupported)).apply ((1.neg)) (6) (5) (7))))) ((((unsupported)).apply (((((((unsupported)).apply (((xunion_qs).xvalues_list)) ("order") (TRUE)).xorder_by)).apply ("pk"))) ((((unsupported)).apply (7) (5) (6) ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((((((xunion_qs).xorder_by)).apply ("-name") ("pk")).xvalues_list)) ("order") (TRUE))) ((((unsupported)).apply ((1.neg)) (5) (7) (6))))) ((((unsupported)).apply (((((((unsupported)).apply (((xunion_qs).xvalues_list)) ("order") (TRUE)).xorder_by)).apply ("-name") ("pk"))) ((((unsupported)).apply ((1.neg)) (5) (7) (6))))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xqs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xqs)))) ((xexpected_result)))
                xtest_union_with_values_list_and_order_on_annotation.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xannotate)) ((((xValue)).apply ((1.neg)))) ((((xF)).apply ("annotation")))).xfilter)) (6))
                        xqs2.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xannotate)) ((((xValue)).apply (2))) ((((xF)).apply ("annotation")))).xfilter)) (5))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("annotation") ("num")).xvalues_list)) ("num") (TRUE))) ((((unsupported)).apply (6) (7) (8) (9) (0) (1) (2) (3) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply (((((xF)).apply ("annotation")).mul (((xF)).apply ("multiplier")))) ("num")).xvalues)).apply ("num"))) ((((unsupported)).apply (6) (7) (8) (9) (0) (1) (2) (3) (4) (5))) (((((xoperator).xitemgetter)).apply ("num"))))
                xtest_union_multiple_models_with_values_list_and_order.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    memory > xreserved_name
                    seq > @
                      seq
                        xreserved_name.write (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("rn1") (0))
                        xqs1.write (((((xCelebrity).xobjects).xall)).apply)
                        xqs2.write (((((xReservedName).xobjects).xall)).apply)
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("name")).xvalues_list)) ("pk") (TRUE))) ((((unsupported)).apply (((xreserved_name).xpk)))))
                xtest_union_multiple_models_with_values_list_and_order_by_extra_select.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    memory > xreserved_name
                    seq > @
                      seq
                        xreserved_name.write (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("rn1") (0))
                        xqs1.write (((unsupported)).apply ((((xCelebrity).xobjects).xextra)) ((((unsupported)).apply ("extra_name") ("name"))))
                        xqs2.write (((unsupported)).apply ((((xReservedName).xobjects).xextra)) ((((unsupported)).apply ("extra_name") ("name"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("extra_name")).xvalues_list)) ("pk") (TRUE))) ((((unsupported)).apply (((xreserved_name).xpk)))))
                xtest_union_in_subquery.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        bogusForceDataize.write (((((xReservedName).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xReservedName)) ("rn1") (8))) ((((unsupported)).apply ((xReservedName)) ("rn2") (1))) ((((unsupported)).apply ((xReservedName)) ("rn3") (5))))))
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (7) ((((xOuterRef)).apply ("order"))))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) ((((xOuterRef)).apply ("order"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xReservedName).xobjects).xannotate)) ((((xSubquery)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xvalues)).apply ("num")))))).xfilter)) (FALSE)).xvalues_list)) ("order") (TRUE))) ((((unsupported)).apply (8) (1))))
                xtest_union_in_subquery_related_outerref.write
                  [xself]
                    memory > xqs
                    memory > xe3
                    memory > xe1
                    memory > xqs1
                    memory > xe2
                    memory > xqs2
                    seq > @
                      seq
                        xe1.write (((unsupported)).apply ((((xExtraInfo).xobjects).xcreate)) (7) ("e3"))
                        xe2.write (((unsupported)).apply ((((xExtraInfo).xobjects).xcreate)) (5) ("e2"))
                        xe3.write (((unsupported)).apply ((((xExtraInfo).xobjects).xcreate)) (1) ("e1"))
                        bogusForceDataize.write (((((xAuthor).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xAuthor)) ("a1") (1) ((xe1)))) ((((unsupported)).apply ((xAuthor)) ("a2") (3) ((xe2)))) ((((unsupported)).apply ((xAuthor)) ("a3") (2) ((xe3)))))))
                        xqs1.write (((unsupported)).apply (((((((xExtraInfo).xobjects).xorder_by)).apply).xfilter)) ((((xOuterRef)).apply ("num"))))
                        xqs2.write (((unsupported)).apply (((((((xExtraInfo).xobjects).xorder_by)).apply).xfilter)) ((((xOuterRef)).apply ("extra__value"))))
                        xqs.write (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubquery)).apply ((((unsupported)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xvalues)).apply ("info"))) ((((unsupported)).apply (1)))))))).xfilter)) (FALSE)).xvalues_list)) ("name") (TRUE))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xqs)) ((((unsupported)).apply ("a1") ("a2"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xqs)) ((((unsupported)).apply ("a1") ("a2"))))
                xtest_count_union.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write ((((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xvalues)).apply ("num"))
                        xqs2.write ((((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2) (3)).xvalues)).apply ("num"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xcount)).apply)) (4))
                xtest_count_union_empty_result.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xqs).xunion)).apply ((xqs))).xcount)).apply)) (0))
                xtest_count_difference.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (10))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xqs1).xdifference)).apply ((xqs2))).xcount)).apply)) (1))
                xtest_count_intersection.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xqs1).xintersection)).apply ((xqs2))).xcount)).apply)) (1))
                xtest_exists_union.write
                  [xself]
                    memory > xcaptured_queries
                    memory > xqs1
                    memory > xcaptured_sql
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        (((unsupported)).apply ((((xCaptureQueriesContext)).apply ((xconnection)))) ((xcontext)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xexists)).apply)) (TRUE))
                        xcaptured_queries.write ((xcontext).xcaptured_queries)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcaptured_queries)))) (1))
                        xcaptured_sql.write (((unsupported)).apply ((((unsupported)).apply ((xcaptured_queries)) (0))) ("sql"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((((xconnection).xops).xquote_name)).apply (((((xNumber).x_meta).xpk).xcolumn)))) ((xcaptured_sql)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcaptured_sql).xcount)).apply ((((((xconnection).xops).xlimit_offset_sql)).apply ("None: is there a None literal in the EO language?") (1))))) (((((xconnection).xfeatures).xsupports_slicing_ordering_in_compound).if 3 1)))
                xtest_exists_union_empty_result.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs).xunion)).apply ((xqs))).xexists)).apply)) (FALSE))
                xtest_exists_intersection.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs1).xintersection)).apply ((xqs1))).xexists)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs1).xintersection)).apply ((xqs2))).xexists)).apply)) (FALSE))
                xtest_exists_difference.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (5))
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (3))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs1).xdifference)).apply ((xqs2))).xexists)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xqs2).xdifference)).apply ((xqs1))).xexists)).apply)) (TRUE))
                xtest_get_union.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xqs).xunion)).apply ((xqs))).xget)).apply).xnum)) (2))
                xtest_get_difference.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xexclude)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xqs1).xdifference)).apply ((xqs2))).xget)).apply).xnum)) (2))
                xtest_get_intersection.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((unsupported)).apply ((((xNumber).xobjects).xfilter)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xqs1).xintersection)).apply ((xqs2))).xget)).apply).xnum)) (2))
                xtest_ordering_subqueries.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((unsupported)).apply ((((((xNumber).xobjects).xorder_by)).apply ("num"))) ((((unsupported)).apply (2))))
                        xqs2.write (((unsupported)).apply ((((((xNumber).xobjects).xorder_by)).apply ("-num"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertNumbersEqual)).apply ((((unsupported)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("-num"))) ((((unsupported)).apply (4))))) ((((unsupported)).apply (9) (8) (1) (0))))
                xtest_unsupported_ordering_slicing_raises_db_error.write
                  [xself]
                    memory > xqs1
                    memory > xqs3
                    memory > xmsg
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xall)).apply)
                        xqs3.write (((((xNumber).xobjects).xall)).apply)
                        xmsg.write "LIMIT/OFFSET not allowed in subqueries of compound statements"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply (((((xqs1).xunion)).apply ((((unsupported)).apply ((xqs2)) ((((unsupported)).apply (10))))))))
                        xmsg.write "ORDER BY not allowed in subqueries of compound statements"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xorder_by)).apply ("id")).xunion)).apply ((xqs2)))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply (((((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("id")).xunion)).apply ((xqs3)))))
                xtest_unsupported_intersection_raises_db_error.write
                  [xself]
                    memory > xqs1
                    memory > xmsg
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xall)).apply)
                        xmsg.write "intersection is not supported on this database backend"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply (((((xqs1).xintersection)).apply ((xqs2)))))
                xtest_combining_multiple_models.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      seq
                        (((unsupported)).apply ((((xReservedName).xobjects).xcreate)) ("99 little bugs") (99))
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1)).xvalues_list)) ("num") (TRUE))
                        xqs2.write (((((xReservedName).xobjects).xvalues_list)).apply ("order"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("num"))))) ((((unsupported)).apply (1) (99))))
                xtest_order_raises_on_non_selected_column.write
                  [xself]
                    memory > xqs1
                    memory > xmsg
                    memory > xqs2
                    seq > @
                      seq
                        xqs1.write (((unsupported)).apply (((((unsupported)).apply (((((((xNumber).xobjects).xfilter)).apply).xannotate)) ((((xValue)).apply (1) ((((xIntegerField)).apply))))).xvalues)) ("annotation") ((((xF)).apply ("num"))))
                        xqs2.write ((((((((xNumber).xobjects).xfilter)).apply).xvalues)).apply ("id") ("num"))
                        bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("annotation"))))
                        bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("num2"))))
                        xmsg.write "ORDER BY term does not match any column in the result set"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("id"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ("num"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply ((((xF)).apply ("num"))))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseError)) ((xmsg)))))
                          bogusForceDataize.write (((xlist)).apply ((((((((xqs1).xunion)).apply ((xqs2))).xorder_by)).apply (((((((xF)).apply ("num")).xdesc)).apply)))))
                        bogusForceDataize.write (((xlist)).apply ((((((((xqs2).xunion)).apply ((xqs1))).xorder_by)).apply ("num"))))
                xtest_qs_with_subcompound_qs.write
                  [xself]
                    memory > xqs1
                    memory > xqs2
                    seq > @
                      (((unsupported)).apply)
                        xqs1.write (((((xNumber).xobjects).xall)).apply)
                        xqs2.write (((((xNumber).xobjects).xintersection)).apply ((((unsupported)).apply ((((xNumber).xobjects).xfilter)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xqs1).xdifference)).apply ((xqs2))).xcount)).apply)) (2))
                xtest_order_by_same_type.write
                  [xself]
                    memory > xunion
                    memory > xqs
                    memory > xnumbers
                    seq > @
                      seq
                        xqs.write (((((xNumber).xobjects).xall)).apply)
                        xunion.write ((((xqs).xunion)).apply ((xqs)))
                        xnumbers.write (((xlist)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertNumbersEqual)).apply (((((xunion).xorder_by)).apply ("num"))) ((xnumbers)))
                        bogusForceDataize.write ((((xself).xassertNumbersEqual)).apply (((((xunion).xorder_by)).apply ("other_num"))) ((((xreversed)).apply ((xnumbers)))))
                xtest_unsupported_operations_on_combined_qs.write
                  [xself]
                    memory > xqs
                    memory > xcombinators
                    memory > xmsg
                    memory > xobj
                    seq > @
                      seq
                        xqs.write (((((xNumber).xobjects).xall)).apply)
                        xmsg.write "Calling QuerySet.%s() after %s() is not supported."
                        xcombinators.write (((unsupported)).apply ("union"))
                        (((xconnection).xfeatures).xsupports_select_difference).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("difference"))
                        (((xconnection).xfeatures).xsupports_select_intersection).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("intersection"))
                        (((unsupported)).apply ((xcombinator)) ((xcombinators)))
                          seq
                            (((unsupported)).apply ((xoperation)) ((((unsupported)).apply ("alias") ("annotate") ("defer") ("delete") ("distinct") ("exclude") ("extra") ("filter") ("only") ("prefetch_related") ("select_related") ("update"))))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcombinator)) ((xoperation)))))
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) (((xmsg).mod (((unsupported)).apply ((xoperation)) ((xcombinator))))))))
                                  bogusForceDataize.write (((((xgetattr)).apply ((((((xgetattr)).apply ((xqs)) ((xcombinator)))).apply ((xqs)))) ((xoperation)))).apply)
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) (((xmsg).mod (((unsupported)).apply ("contains") ((xcombinator))))))))
                              seq
                                xobj.write (((((xNumber).xobjects).xfirst)).apply)
                                bogusForceDataize.write ((((((((xgetattr)).apply ((xqs)) ((xcombinator)))).apply ((xqs))).xcontains)).apply ((xobj)))
                xtest_get_with_filters_unsupported_on_combined_qs.write
                  [xself]
                    memory > xqs
                    memory > xcombinators
                    memory > xmsg
                    seq > @
                      seq
                        xqs.write (((((xNumber).xobjects).xall)).apply)
                        xmsg.write "Calling QuerySet.get(...) with filters after %s() is not supported."
                        xcombinators.write (((unsupported)).apply ("union"))
                        (((xconnection).xfeatures).xsupports_select_difference).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("difference"))
                        (((xconnection).xfeatures).xsupports_select_intersection).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("intersection"))
                        (((unsupported)).apply ((xcombinator)) ((xcombinators)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcombinator)))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) (((xmsg).mod (xcombinator))))))
                              (((unsupported)).apply (((((((xgetattr)).apply ((xqs)) ((xcombinator)))).apply ((xqs))).xget)) (2))
                xtest_operator_on_combined_qs_error.write
                  [xself]
                    memory > xoperators
                    memory > xqs
                    memory > xcombinators
                    memory > xcombined_qs
                    memory > xmsg
                    seq > @
                      seq
                        xqs.write (((((xNumber).xobjects).xall)).apply)
                        xmsg.write "Cannot use %s operator with combined queryset."
                        xcombinators.write (((unsupported)).apply ("union"))
                        (((xconnection).xfeatures).xsupports_select_difference).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("difference"))
                        (((xconnection).xfeatures).xsupports_select_intersection).if
                          bogusForceDataize.write ((((xcombinators).xappend)).apply ("intersection"))
                        xoperators.write (((unsupported)).apply ((((unsupported)).apply ("|") (((xoperator).xor_)))) ((((unsupported)).apply ("&") (((xoperator).xand_)))) ((((unsupported)).apply ("^") (((xoperator).xxor)))))
                        (((unsupported)).apply ((xcombinator)) ((xcombinators)))
                          seq
                            xcombined_qs.write (((((xgetattr)).apply ((xqs)) ((xcombinator)))).apply ((xqs)))
                            (((unsupported)).apply ((((unsupported)).apply ((xoperator_)) ((xoperator_func)))) ((xoperators)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcombinator)))))
                                seq
                                  (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xmsg).mod (xoperator_))))))
                                    bogusForceDataize.write (((xoperator_func)).apply ((xqs)) ((xcombined_qs)))
                                  (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) (((xmsg).mod (xoperator_))))))
                                    bogusForceDataize.write (((xoperator_func)).apply ((xcombined_qs)) ((xqs)))