memory > xThings
memory > xfield
memory > xImportError
memory > xuuid
memory > xTestCase
memory > xrange
memory > xError
memory > xModel2
memory > xconnection
memory > xi
memory > xtuple
memory > xThingWithIterableChoices
memory > xlazy
memory > xmodels
memory > xchoice_max_length
memory > xDatabaseValidation
memory > xModel
memory > xiter
memory > xskipUnlessDBFeature
memory > xname
memory > xThingItem
memory > xget_docs_version
memory > xnow
memory > xmodel
memory > xfield_name
memory > xdict
memory > xisolate_apps
memory > xSimpleTestCase
[] > test_ordinary_fields
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_upload_to_callable_not_checked
        memory > xtest_upload_to_starts_with_slash
        memory > xtest_fix_default_value_tz
        memory > xtest_str_default_value
        memory > x_
        memory > xtest_choices_named_group_bad_structure
        memory > xtest_auto_now_and_auto_now_add_raise_error
        memory > xtest_negative_max_length
        memory > xtest_choices_named_group
        memory > xtest_missing_max_length
        memory > xtest_pillow_installed
        memory > xtest_fix_default_value
        memory > xtest_bad_db_index_value
        memory > xtest_bad_validators
        memory > xtest_choices_named_group_non_pairs
        memory > xtest_valid_default
        memory > xtest_invalid_default
        memory > xtest_bad_values_of_max_digits_and_decimal_places
        memory > xtest_db_collation_required_db_features
        memory > xtest_choices_in_max_length
        memory > xtest_valid_case
        memory > xtest_negative_max_digits_and_decimal_places
        memory > xtest_valid_default_value
        memory > xtest_forbidden_files_and_folders
        memory > xtest_db_collation
        memory > xtest_non_iterable_choices
        memory > xtest_iterable_of_iterable_choices
        memory > xtest_valid_field
        memory > xtest_max_length_warning
        memory > xtest_choices_named_group_lazy
        memory > xtest_choices_containing_non_pairs
        memory > xtest_valid_default_case
        memory > xtest_choices_containing_lazy
        memory > xtest_primary_key
        memory > xtest_non_iterable_choices_two_letters
        memory > xmaxDiff
        memory > xDjangoWarning
        memory > xtest_str_max_length_type
        memory > xtest_lazy_choices
        memory > xtest_str_max_length_value
        memory > xtest_bad_max_length_value
        memory > xtest_decimal_places_greater_than_max_digits
        memory > xtest_required_attributes
        memory > xtest_valid_default_none
        memory > xtest_valid_callable_default
        memory > xtest_too_long_char_field_under_mysql
        memory > xtest_non_nullable_blank
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_valid_case.write
                  [xself]
                    memory > xfield
                    memory > xid2
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xid2.write (((unsupported)).apply (((xmodels).xAutoField)) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("id"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_primary_key.write
                  [xself]
                    memory > xfield
                    memory > xanother
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((unsupported)).apply (((xmodels).xAutoField)) (FALSE))
                            xanother.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("AutoFields must set primary_key=True.") ((xfield)) ("fields.E100"))))))
                xtest_max_length_warning.write
                  [xself]
                    memory > xfield
                    memory > xauto
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xauto.write (((unsupported)).apply (((xmodels).xAutoField)) (TRUE) (2))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("auto"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) (("'max_length' is ignored when used with %s.".mod (((xfield).x__class__).x__name__))) ("Remove 'max_length' from field") ((xfield)) ("fields.W122"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_valid_default_value.write
                  [xself]
                    memory > xfield
                    memory > xfield1
                    memory > xfield2
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield1.write (((unsupported)).apply (((xmodels).xBinaryField)) ("test"))
                            xfield2.write (((unsupported)).apply (((xmodels).xBinaryField)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xfield_name)) ((((unsupported)).apply ("field1") ("field2"))))
                          seq
                            xfield.write (((((xModel).x_meta).xget_field)).apply ((xfield_name)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_str_default_value.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xBinaryField)) ("test"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("BinaryField's default cannot be a string. Use bytes content instead.") ((xfield)) ("fields.E170"))))))
            (((unsupported)).apply ((xTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_valid_field.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (255) ((((unsupported)).apply ((((unsupported)).apply ("1") ("item1"))) ((((unsupported)).apply ("2") ("item2"))))) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_missing_max_length.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write ((((xmodels).xCharField)).apply)
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("CharFields must define a 'max_length' attribute.") ((xfield)) ("fields.E120"))))))
                xtest_negative_max_length.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) ((1.neg)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'max_length' must be a positive integer.") ((xfield)) ("fields.E121"))))))
                xtest_bad_max_length_value.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'max_length' must be a positive integer.") ((xfield)) ("fields.E121"))))))
                xtest_str_max_length_value.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) ("20"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'max_length' must be a positive integer.") ((xfield)) ("fields.E121"))))))
                xtest_str_max_length_type.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'max_length' must be a positive integer.") ((xfield)) ("fields.E121"))))))
                xtest_non_iterable_choices.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'choices' must be an iterable (e.g., a list or tuple).") ((xfield)) ("fields.E004"))))))
                xtest_non_iterable_choices_two_letters.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ("ab"))))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'choices' must be an iterable containing (actual value, human readable name) tuples.") ((xfield)) ("fields.E005"))))))
                xtest_iterable_of_iterable_choices.write
                  [xself]
                    memory > xthing
                    memory > x__len__
                    memory > x__init__
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xvalue xdisplay]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                                    (((unsupported)).apply (((xself).xdisplay)) ((xdisplay)))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply (((xself).xvalue)) (((xself).xdisplay)))))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (2))
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply ((((xThingItem)).apply (1) (2))) ((((xThingItem)).apply (3) (4))))))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xthing.write (((unsupported)).apply (((xmodels).xCharField)) (100) (TRUE) ((((xThings)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xThingWithIterableChoices).x_meta).xget_field)).apply ("thing")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_choices_containing_non_pairs.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xIntegerField)) ((((unsupported)).apply (0))))
                        (((unsupported)).apply ((xmodel)) ((((unsupported)).apply ((xModel)) ((xModel2)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply (((xmodel).x__name__)))))
                            seq
                              xfield.write (((((xmodel).x_meta).xget_field)).apply ("field"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'choices' must be an iterable containing (actual value, human readable name) tuples.") ((xfield)) ("fields.E005"))))))
                xtest_choices_containing_lazy.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply ("1") ((((x_)).apply ("1"))))) ((((unsupported)).apply ("2") ((((x_)).apply ("2"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_lazy_choices.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((((xlazy)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) ("1"))) ((((unsupported)).apply (2) ("2"))))))) ((xtuple)))).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_choices_named_group.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply ("knights") ((((unsupported)).apply ((((unsupported)).apply ("L") ("Lancelot"))) ((((unsupported)).apply ("G") ("Galahad"))))))) ((((unsupported)).apply ("wizards") ((((unsupported)).apply ((((unsupported)).apply ("T") ("Tim the Enchanter"))))))) ((((unsupported)).apply ("R") ("Random character"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_choices_named_group_non_pairs.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply ("knights") ((((unsupported)).apply ((((unsupported)).apply ("L") ("Lancelot") ("Du Lac"))))))))))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'choices' must be an iterable containing (actual value, human readable name) tuples.") ((xfield)) ("fields.E005"))))))
                xtest_choices_named_group_bad_structure.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply ("knights") ((((unsupported)).apply ((((unsupported)).apply ("Noble") ((((unsupported)).apply ((((unsupported)).apply ("G") ("Galahad"))))))) ((((unsupported)).apply ("Combative") ((((unsupported)).apply ((((unsupported)).apply ("L") ("Lancelot"))))))))))))))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'choices' must be an iterable containing (actual value, human readable name) tuples.") ((xfield)) ("fields.E005"))))))
                xtest_choices_named_group_lazy.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply ((((unsupported)).apply ((((x_)).apply ("knights"))) ((((unsupported)).apply ((((unsupported)).apply ("L") ((((x_)).apply ("Lancelot"))))) ((((unsupported)).apply ("G") ((((x_)).apply ("Galahad"))))))))) ((((unsupported)).apply ("R") ((((x_)).apply ("Random character"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_choices_in_max_length.write
                  [xself]
                    memory > xfield
                    memory > xgroup
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((unsupported)).apply (((xmodels).xCharField)) (2) ((((unsupported)).apply ((((unsupported)).apply ("ABC") ("Value Too Long!"))) ((((unsupported)).apply ("OK") ("Good"))))))
                            xgroup.write (((unsupported)).apply (((xmodels).xCharField)) (2) ((((unsupported)).apply ((((unsupported)).apply ("Nested") ((((unsupported)).apply ((((unsupported)).apply ("OK") ("Good"))) ((((unsupported)).apply ("Longer") ("Longer"))))))) ((((unsupported)).apply ("Grouped") ((((unsupported)).apply ((((unsupported)).apply ("Bad") ("Bad"))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xchoice_max_length)))) ((((unsupported)).apply ((((unsupported)).apply ("field") (3))) ((((unsupported)).apply ("group") (6))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xname)))))
                            seq
                              xfield.write (((((xModel).x_meta).xget_field)).apply ((xname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) (("'max_length' is too small to fit the longest value in 'choices' (%d characters).".mod (xchoice_max_length))) ((xfield)) ("fields.E009"))))))
                xtest_bad_db_index_value.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'db_index' must be None, True or False.") ((xfield)) ("fields.E006"))))))
                xtest_bad_validators.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (10) ((((unsupported)).apply (TRUE))))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("All 'validators' must be callable.") ("validators[0] (True) isn't a function or instance of a validator class.") ((xfield)) ("fields.E008"))))))
                xtest_too_long_char_field_under_mysql.write
                  [xself]
                    memory > xfield
                    memory > xvalidator
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (TRUE) (256))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        xvalidator.write (((unsupported)).apply ((xDatabaseValidation)) ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvalidator).xcheck_field)).apply ((xfield)))) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) (("%s may not allow unique CharFields to have a max_length > 255.".mod ((xconnection).xdisplay_name))) (("See: https://docs.djangoproject.com/en/%s/ref/databases/#mysql-character-fields".mod (((xget_docs_version)).apply))) ((xfield)) ("mysql.W003"))))))
                xtest_db_collation.write
                  [xself]
                    memory > xfield
                    memory > xexpected
                    memory > xerror
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xCharField)) (100) ("anything"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        xerror.write (((unsupported)).apply ((xError)) (("%s does not support a database collation on CharFields.".mod ((xconnection).xdisplay_name))) ("fields.E190") ((xfield)))
                        xexpected.write ((((xconnection).xfeatures).xsupports_collation_on_charfield).if (((unsupported)).apply) (((unsupported)).apply ((xerror))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) (((xself).xdatabases)))) ((xexpected)))
                xtest_db_collation_required_db_features.write
                  [xself]
                    memory > xrequired_db_features
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((unsupported)).apply (((xmodels).xCharField)) (100) ("anything"))
                            (((unsupported)).apply)
                              xrequired_db_features.write (((unsupported)).apply ("supports_collation_on_charfield"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) (((xself).xdatabases)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_auto_now_and_auto_now_add_raise_error.write
                  [xself]
                    memory > xfield
                    memory > xexpected
                    memory > xfield2
                    memory > xchecks
                    memory > xfield3
                    memory > xfield0
                    memory > xfield1
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield0.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE) (TRUE) ((xnow)))
                            xfield1.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE) (FALSE) ((xnow)))
                            xfield2.write (((unsupported)).apply (((xmodels).xDateTimeField)) (FALSE) (TRUE) ((xnow)))
                            xfield3.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE) (TRUE) ("None: is there a None literal in the EO language?"))
                        xexpected.write (((unsupported)).apply)
                        xchecks.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (4))))
                          seq
                            xfield.write (((((xModel).x_meta).xget_field)).apply (("field%d".mod (xi))))
                            bogusForceDataize.write ((((xexpected).xappend)).apply ((((unsupported)).apply ((xError)) ("The options auto_now, auto_now_add, and default are mutually exclusive. Only one of these options may be present.") ((xfield)) ("fields.E160"))))
                            bogusForceDataize.write ((((xchecks).xextend)).apply (((((xfield).xcheck)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xchecks)) ((xexpected)))
                xtest_fix_default_value.write
                  [xself]
                    memory > xerrors
                    memory > xfield_now
                    memory > xfield_dt
                    memory > xfield_d
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield_dt.write (((unsupported)).apply (((xmodels).xDateField)) ((((xnow)).apply)))
                            xfield_d.write (((unsupported)).apply (((xmodels).xDateField)) (((((((xnow)).apply).xdate)).apply)))
                            xfield_now.write (((unsupported)).apply (((xmodels).xDateField)) ((xnow)))
                        xfield_dt.write (((((xModel).x_meta).xget_field)).apply ("field_dt"))
                        xfield_d.write (((((xModel).x_meta).xget_field)).apply ("field_d"))
                        xfield_now.write (((((xModel).x_meta).xget_field)).apply ("field_now"))
                        xerrors.write ((((xfield_dt).xcheck)).apply)
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xfield_d).xcheck)).apply)))
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xfield_now).xcheck)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((xfield_dt)) ("fields.W161"))) ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((xfield_d)) ("fields.W161"))))))
                xtest_fix_default_value_tz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xtest_fix_default_value)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_fix_default_value.write
                  [xself]
                    memory > xerrors
                    memory > xfield_now
                    memory > xfield_dt
                    memory > xfield_d
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield_dt.write (((unsupported)).apply (((xmodels).xDateTimeField)) ((((xnow)).apply)))
                            xfield_d.write (((unsupported)).apply (((xmodels).xDateTimeField)) (((((((xnow)).apply).xdate)).apply)))
                            xfield_now.write (((unsupported)).apply (((xmodels).xDateTimeField)) ((xnow)))
                        xfield_dt.write (((((xModel).x_meta).xget_field)).apply ("field_dt"))
                        xfield_d.write (((((xModel).x_meta).xget_field)).apply ("field_d"))
                        xfield_now.write (((((xModel).x_meta).xget_field)).apply ("field_now"))
                        xerrors.write ((((xfield_dt).xcheck)).apply)
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xfield_d).xcheck)).apply)))
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xfield_now).xcheck)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((xfield_dt)) ("fields.W161"))) ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((xfield_d)) ("fields.W161"))))))
                xtest_fix_default_value_tz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xtest_fix_default_value)).apply)
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_required_attributes.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write ((((xmodels).xDecimalField)).apply)
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("DecimalFields must define a 'decimal_places' attribute.") ((xfield)) ("fields.E130"))) ((((unsupported)).apply ((xError)) ("DecimalFields must define a 'max_digits' attribute.") ((xfield)) ("fields.E132"))))))
                xtest_negative_max_digits_and_decimal_places.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xDecimalField)) ((1.neg)) ((1.neg)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'decimal_places' must be a non-negative integer.") ((xfield)) ("fields.E131"))) ((((unsupported)).apply ((xError)) ("'max_digits' must be a positive integer.") ((xfield)) ("fields.E133"))))))
                xtest_bad_values_of_max_digits_and_decimal_places.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xDecimalField)) ("bad") ("bad"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'decimal_places' must be a non-negative integer.") ((xfield)) ("fields.E131"))) ((((unsupported)).apply ((xError)) ("'max_digits' must be a positive integer.") ((xfield)) ("fields.E133"))))))
                xtest_decimal_places_greater_than_max_digits.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xDecimalField)) (9) (10))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'max_digits' must be greater or equal to 'decimal_places'.") ((xfield)) ("fields.E134"))))))
                xtest_valid_field.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xDecimalField)) (10) (10))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_valid_default_case.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write ((((xmodels).xFileField)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_valid_case.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xFileField)) ("somewhere"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_primary_key.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xFileField)) (FALSE) ("somewhere"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("'primary_key' is not a valid argument for a FileField.") ((xfield)) ("fields.E201"))))))
                xtest_upload_to_starts_with_slash.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xFileField)) ("/somewhere"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("FileField's 'upload_to' argument must be a relative path, not an absolute path.") ((xfield)) ("fields.E202") ("Remove the leading slash."))))))
                xtest_upload_to_callable_not_checked.write
                  [xself]
                    memory > xfield
                    memory > xcallable
                    seq > @
                      seq
                        xcallable.write
                          [xinstance xfilename]
                            seq > @
                              (((unsupported)).apply (("/".add (xfilename))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xFileField)) ((xcallable)))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_forbidden_files_and_folders.write
                [xself]
                  memory > xfield
                  seq > @
                    seq
                      (((unsupported)).apply (((xmodels).xModel)))
                        xfield.write (((unsupported)).apply (((xmodels).xFilePathField)) (FALSE) (FALSE))
                      xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("FilePathFields must have either 'allow_files' or 'allow_folders' set to True.") ((xfield)) ("fields.E140"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_non_nullable_blank.write
                [xself]
                  memory > xfield
                  seq > @
                    seq
                      (((unsupported)).apply (((xmodels).xModel)))
                        xfield.write (((unsupported)).apply (((xmodels).xGenericIPAddressField)) (FALSE) (TRUE))
                      xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ("GenericIPAddressFields cannot have blank=True if null=False, as blank values are stored as nulls.") ((xfield)) ("fields.E150"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_pillow_installed.write
                [xself]
                  memory > xpillow_installed
                  memory > xfield
                  memory > xerrors
                  memory > xexpected
                  seq > @
                    seq
                      (((unsupported)).apply ((xImportError)))
                        (((unsupported)).apply)
                        xpillow_installed.write FALSE
                        xpillow_installed.write TRUE
                      (((unsupported)).apply (((xmodels).xModel)))
                        xfield.write (((unsupported)).apply (((xmodels).xImageField)) ("somewhere"))
                      xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                      xerrors.write ((((xfield).xcheck)).apply)
                      xexpected.write ((xpillow_installed).if (((unsupported)).apply) (((unsupported)).apply ((((unsupported)).apply ((xError)) ("Cannot use ImageField because Pillow is not installed.") ("Get Pillow at https://pypi.org/project/Pillow/ or run command \"python -m pip install Pillow\".") ((xfield)) ("fields.E210")))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((xexpected)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_max_length_warning.write
                [xself]
                  memory > xpositivesmallinteger
                  memory > xinteger
                  memory > xbiginteger
                  memory > xpositiveinteger
                  memory > xsmallinteger
                  memory > xpositivebiginteger
                  seq > @
                    seq
                      (((unsupported)).apply (((xmodels).xModel)))
                        seq
                          xinteger.write (((unsupported)).apply (((xmodels).xIntegerField)) (2))
                          xbiginteger.write (((unsupported)).apply (((xmodels).xBigIntegerField)) (2))
                          xsmallinteger.write (((unsupported)).apply (((xmodels).xSmallIntegerField)) (2))
                          xpositiveinteger.write (((unsupported)).apply (((xmodels).xPositiveIntegerField)) (2))
                          xpositivebiginteger.write (((unsupported)).apply (((xmodels).xPositiveBigIntegerField)) (2))
                          xpositivesmallinteger.write (((unsupported)).apply (((xmodels).xPositiveSmallIntegerField)) (2))
                      (((unsupported)).apply ((xfield)) ((((((xModel).x_meta).xget_fields)).apply)))
                        seq
                          ((xfield).xauto_created).if
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xfield).xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) (("'max_length' is ignored when used with %s.".mod (((xfield).x__class__).x__name__))) ("Remove 'max_length' from field") ((xfield)) ("fields.W122"))))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_fix_default_value.write
                  [xself]
                    memory > xfield_now
                    memory > xfield_tz
                    memory > xfield_dt
                    memory > xerrors
                    memory > xfields
                    memory > xnames
                    memory > xfield_t
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield_dt.write (((unsupported)).apply (((xmodels).xTimeField)) ((((xnow)).apply)))
                            xfield_t.write (((unsupported)).apply (((xmodels).xTimeField)) (((((((xnow)).apply).xtime)).apply)))
                            xfield_tz.write (((unsupported)).apply (((xmodels).xTimeField)) (((((((xnow)).apply).xtimetz)).apply)))
                            xfield_now.write (((unsupported)).apply (((xmodels).xDateField)) ((xnow)))
                        xnames.write (((unsupported)).apply ("field_dt") ("field_t") ("field_tz") ("field_now"))
                        xfields.write (((unsupported)).apply ((((((xModel).x_meta).xget_field)).apply ((xname)))) ((xname)) ((xnames)))
                        xerrors.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfield)) ((xfields)))
                          bogusForceDataize.write ((((xerrors).xextend)).apply (((((xfield).xcheck)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xerrors)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((((unsupported)).apply ((xfields)) (0))) ("fields.W161"))) ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((((unsupported)).apply ((xfields)) (1))) ("fields.W161"))) ((((unsupported)).apply ((xDjangoWarning)) ("Fixed default value provided.") ("It seems you set a fixed date / time / datetime value as default for this field. This may not be what you want. If you want to have the current date as default, use `django.utils.timezone.now`") ((((unsupported)).apply ((xfields)) (2))) ("fields.W161"))))))
                xtest_fix_default_value_tz.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xtest_fix_default_value)).apply)
            (((unsupported)).apply ((xTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              seq
                xtest_max_length_warning.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    memory > xfield_type
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          xvalue.write (((unsupported)).apply (((xmodels).xTextField)) (TRUE))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("value"))
                        xfield_type.write ((((xfield).xdb_type)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) (((xself).xdatabases)))) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) (("%s does not support a database index on %s columns.".mod (((unsupported)).apply (((xconnection).xdisplay_name)) ((xfield_type))))) ("An index won't be created. Silence this warning if you don't care about it.") ((xfield)) ("fields.W162"))))))
                xtest_db_collation.write
                  [xself]
                    memory > xfield
                    memory > xexpected
                    memory > xerror
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xTextField)) ("anything"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        xerror.write (((unsupported)).apply ((xError)) (("%s does not support a database collation on TextFields.".mod ((xconnection).xdisplay_name))) ("fields.E190") ((xfield)))
                        xexpected.write ((((xconnection).xfeatures).xsupports_collation_on_textfield).if (((unsupported)).apply) (((unsupported)).apply ((xerror))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) (((xself).xdatabases)))) ((xexpected)))
                xtest_db_collation_required_db_features.write
                  [xself]
                    memory > xrequired_db_features
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfield.write (((unsupported)).apply (((xmodels).xTextField)) ("anything"))
                            (((unsupported)).apply)
                              xrequired_db_features.write (((unsupported)).apply ("supports_collation_on_textfield"))
                        xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) (((xself).xdatabases)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_choices_named_group.write
                [xself]
                  memory > xfield
                  seq > @
                    seq
                      (((unsupported)).apply (((xmodels).xModel)))
                        xfield.write (((unsupported)).apply (((xmodels).xUUIDField)) ((((unsupported)).apply ((((unsupported)).apply ("knights") ((((unsupported)).apply ((((unsupported)).apply (((((xuuid).xUUID)).apply ("5c859437-d061-4847-b3f7-e6b78852f8c8"))) ("Lancelot"))) ((((unsupported)).apply (((((xuuid).xUUID)).apply ("c7853ec1-2ea3-4359-b02d-b54e8f1bcee2"))) ("Galahad"))))))) ((((unsupported)).apply (((((xuuid).xUUID)).apply ("25d405be-4895-4d50-9b2e-d6695359ce47"))) ("Other"))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))) ((((xskipUnlessDBFeature)).apply ("supports_json_field"))))
              seq
                xtest_invalid_default.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xDjangoWarning)) ("JSONField default should be a callable instead of an instance so that it's not shared between all field instances.") ("Use a callable instead, e.g., use `dict` instead of `{}`.") ((((((xModel).x_meta).xget_field)).apply ("field"))) ("fields.E010"))))))
                xtest_valid_default.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_valid_default_none.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))
                xtest_valid_callable_default.write
                  [xself]
                    memory > xfield
                    memory > xcallable_default
                    seq > @
                      seq
                        xcallable_default.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("it") ("works"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ((xcallable_default)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xModel).x_meta).xget_field)).apply ("field")).xcheck)).apply)) ((((unsupported)).apply)))