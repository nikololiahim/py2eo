memory > xreverse
memory > xadmin
memory > xPerson
memory > xCustomField
memory > xfields
memory > xTestDataMixin
memory > xoutput
memory > xsettings
memory > xutils
memory > xmodels
memory > xDescriptionLackingField
memory > xAttributeError
memory > xCompany
memory > xAdminDocsTestCase
memory > xAdminDocViewTests
memory > xpath
memory > xfpath
memory > xget_return_data_type
memory > xSite
memory > xpattern
memory > xsys
memory > xoverride_settings
memory > xinclude
memory > xSimpleLazyObject
memory > xunittest
memory > xsimplify_regex
memory > xcaptured_stderr
memory > xlen
memory > xviews
memory > xSimpleTestCase
[] > test_views
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_namespaced_view_detail
        memory > xtest_custom_fields
        memory > xtest_methods_with_arguments_display_arguments_default_value
        memory > xtest_no_sites_framework
        memory > xtest_field_name
        memory > xtest_templatefilter_index
        memory > xtest_model_detail_title
        memory > xtest_view_detail_as_method
        memory > xtest_model_index
        memory > xtest_view_index_with_method
        memory > xtest_instance_of_cached_property_methods_are_displayed
        memory > xtest_view_index
        memory > xtest_bookmarklets
        memory > xtest_view_detail_illegal_import
        memory > xtest_model_docstring_renders_correctly
        memory > xdescription
        memory > xtest_template_detail
        memory > xtest_index
        memory > xsetUp
        memory > xtest_methods_with_multiple_arguments_display_arguments
        memory > xtest_model_not_found
        memory > xtest_simplify_regex
        memory > xtest_view_detail
        memory > xtest_missing_docutils
        memory > xtest_methods_with_arguments
        memory > xtest_method_excludes
        memory > xtest_instance_of_property_methods_are_displayed
        memory > xtest_callable_urlconf
        memory > xtest_model_with_many_to_one
        memory > xtest_builtin_fields
        memory > xtest_template_detail_path_traversal
        memory > xtest_templatetag_index
        memory > xtest_method_data_types
        memory > xtest_app_not_found
        memory > xtest_model_with_no_backward_relations_render_only_relevant_fields
        memory > xtest_methods_with_arguments_display_arguments
        memory > xtest_descriptions_render_correctly
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xTestDataMixin)) ((xAdminDocsTestCase)) (((((xunittest).xskipUnless)).apply (((xutils).xdocutils_is_available)) ("no docutils installed."))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xclient).xforce_login)).apply (((xself).xsuperuser)))
                xtest_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-docroot"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h1>Documentation</h1>") (TRUE))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<h1 id=\"site-name\"><a href=\"/admin/\">Django administration</a></h1>"))
                        bogusForceDataize.write (((((xself).xclient).xlogout)).apply)
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ((((xreverse)).apply ("django-admindocs-docroot"))) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<input type=\"hidden\" name=\"next\" value=\"/admindocs/\">") (TRUE))
                xtest_bookmarklets.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-bookmarklets"))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("/admindocs/views/"))
                xtest_templatetag_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-tags"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3 id=\"built_in-extends\">extends</h3>") (TRUE))
                xtest_templatefilter_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-filters"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3 id=\"built_in-first\">first</h3>") (TRUE))
                xtest_view_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-views-index"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3><a href=\"/admindocs/views/django.contrib.admindocs.views.BaseAdminDocsView/\">/admindocs/</a></h3>") (TRUE))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Views by namespace test"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Name: <code>test:func</code>."))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3><a href=\"/admindocs/views/admin_docs.views.XViewCallableObject/\">/xview/callable_object_without_xview/</a></h3>") (TRUE))
                xtest_view_index_with_method.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-views-index"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3><a href=\"/admindocs/views/django.contrib.admin.sites.AdminSite.index/\">/admin/</a></h3>") (TRUE))
                xtest_view_detail.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      seq
                        xurl.write (((unsupported)).apply ((xreverse)) ("django-admindocs-views-detail") ((((unsupported)).apply ("django.contrib.admindocs.views.BaseAdminDocsView"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Base view for admindocs views."))
                xtest_namespaced_view_detail.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        xurl.write (((unsupported)).apply ((xreverse)) ("django-admindocs-views-detail") ((((unsupported)).apply ("admin_docs.views.XViewClass"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<h1>admin_docs.views.XViewClass</h1>"))
                xtest_view_detail_illegal_import.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      seq
                        xurl.write (((unsupported)).apply ((xreverse)) ("django-admindocs-views-detail") ((((unsupported)).apply ("urlpatterns_reverse.nonimported_module.view"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("urlpatterns_reverse.nonimported_module") (((xsys).xmodules)))
                xtest_view_detail_as_method.write
                  [xself]
                    memory > xresponse
                    memory > xurl
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xurl.write (((unsupported)).apply ((xreverse)) ("django-admindocs-views-detail") ((((unsupported)).apply ("django.contrib.admin.sites.AdminSite.index"))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
                xtest_model_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-models-index"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h2 id=\"app-auth\">Authentication and Authorization (django.contrib.auth)</h2>") (TRUE))
                xtest_template_detail.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-templates") ((((unsupported)).apply ("admin_doc/template_detail.html"))))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h1>Template: <q>admin_doc/template_detail.html</q></h1>") (TRUE))
                xtest_missing_docutils.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply (((xutils).xdocutils_is_available)) (FALSE))
                        (((unsupported)).apply)
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-docroot"))))
                            (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<h3>The admin documentation system requires Python’s <a href=\"https://docutils.sourceforge.io/\">docutils</a> library.</h3><p>Please ask your administrators to install <a href=\"https://docutils.sourceforge.io/\">docutils</a>.</p>") (TRUE))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("<h1 id=\"site-name\"><a href=\"/admin/\">Django administration</a></h1>"))
                          (((unsupported)).apply (((xutils).xdocutils_is_available)) (TRUE))
                xtest_no_sites_framework.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((((((xSite).xobjects).xall)).apply).xdelete)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xsettings).xSITE_ID)))))
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-views-index"))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("View documentation"))
                xtest_callable_urlconf.write
                  [xself]
                    memory > xresponse
                    memory > xurlpatterns
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xurlpatterns.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((xpath)).apply ("admin/doc/") ((((xinclude)).apply ("django.contrib.admindocs.urls"))))) ((((xpath)).apply ("admin/") ((((xadmin).xsite).xurls)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((xSimpleLazyObject)).apply ((xurlpatterns)))))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-views-index"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (200))
            (((unsupported)).apply ((xTestDataMixin)) ((xAdminDocsTestCase)) (((((xunittest).xskipUnless)).apply (((xutils).xdocutils_is_available)) ("no docutils installed."))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xclient).xforce_login)).apply (((xself).xsuperuser)))
                xtest_template_detail_path_traversal.write
                  [xself]
                    memory > xcases
                    memory > xresponse
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ("/etc/passwd") ("../passwd"))
                        (((unsupported)).apply ((xfpath)) ((xcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfpath)))))
                            seq
                              xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-templates") ((((unsupported)).apply ((xfpath)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (400))
            (((unsupported)).apply ((xAdminDocViewTests)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ((((unsupported)).apply ("NAME") ("ONE") ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("APP_DIRS") (TRUE))) ((((unsupported)).apply ("NAME") ("TWO") ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("APP_DIRS") (TRUE))))))) (((((xunittest).xskipUnless)).apply (((xutils).xdocutils_is_available)) ("no docutils installed."))))
              seq
                xtest_templatefilter_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-filters"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<title>Template filters</title>") (TRUE))
                xtest_templatetag_index.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((xreverse)).apply ("django-admindocs-tags"))))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<title>Template tags</title>") (TRUE))
            (((unsupported)).apply ((xTestDataMixin)) ((xAdminDocsTestCase)) (((((xunittest).xskipUnless)).apply (((xutils).xdocutils_is_available)) ("no docutils installed."))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xforce_login)).apply (((xself).xsuperuser)))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) (((xself).xdocutils_stderr)))
                          (((unsupported)).apply (((xself).xresponse)) ((((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-models-detail") ((((unsupported)).apply ("admin_docs") ("Person"))))))))
                xtest_method_excludes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>get_full_name</td>"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply (((xself).xresponse)) ("<td>_get_full_name</td>"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply (((xself).xresponse)) ("<td>add_image</td>"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply (((xself).xresponse)) ("<td>delete_image</td>"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply (((xself).xresponse)) ("<td>set_status</td>"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply (((xself).xresponse)) ("<td>save_changes</td>"))
                xtest_methods_with_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<h3>Methods with arguments</h3>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>rename_company</td>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>dummy_function</td>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>suffix_company_name</td>"))
                xtest_methods_with_arguments_display_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>new_name</td>"))
                xtest_methods_with_arguments_display_arguments_default_value.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>suffix=&#x27;ltd&#x27;</td>"))
                xtest_methods_with_multiple_arguments_display_arguments.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>baz, rox, *some_args, **some_kwargs</td>"))
                xtest_instance_of_property_methods_are_displayed.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>a_property</td>"))
                xtest_instance_of_cached_property_methods_are_displayed.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>a_cached_property</td>"))
                xtest_method_data_types.write
                  [xself]
                    memory > xcompany
                    memory > xperson
                    seq > @
                      seq
                        xcompany.write (((unsupported)).apply ((((xCompany).xobjects).xcreate)) ("Django"))
                        xperson.write (((unsupported)).apply ((((xPerson).xobjects).xcreate)) ("Human") ("User") ((xcompany)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_return_data_type)).apply ((((xperson).xget_status_count).x__name__)))) ("Integer"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_return_data_type)).apply ((((xperson).xget_groups_list).x__name__)))) ("List"))
                xtest_descriptions_render_correctly.write
                  [xself]
                    memory > xmarkup
                    memory > xout
                    memory > xlink
                    memory > xcompany_markup
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>first name - The person's first name</td>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<td>last name - The person's last name</td>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<p>Get the full name of the person</p>"))
                        xlink.write "<a class=\"reference external\" href=\"/admindocs/models/%s/\">%s</a>"
                        xmarkup.write "<p>the related %s object</p>"
                        xcompany_markup.write ((xmarkup).mod ((xlink).mod (((unsupported)).apply ("admin_docs.company") ("admin_docs.Company"))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ((xcompany_markup)))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) (("%sn - place of work".mod (xcompany_markup))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) (("number of related %s objects".mod ((xlink).mod (((unsupported)).apply ("admin_docs.group") ("admin_docs.Group"))))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) (("all related %s objects".mod ((xlink).mod (((unsupported)).apply ("admin_docs.group") ("admin_docs.Group"))))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<p>&quot;raw&quot; directive disabled.</p>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) (".. raw:: htmln    :file: admin_docs/evilfile.txt"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("<p>&quot;include&quot; directive disabled.</p>"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) (".. include:: admin_docs/evilfile.txt"))
                        xout.write (((((xself).xdocutils_stderr).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"raw\" directive disabled") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"include\" directive disabled") ((xout)))
                xtest_model_with_many_to_one.write
                  [xself]
                    memory > xresponse
                    memory > xlink
                    seq > @
                      seq
                        xlink.write "<a class=\"reference external\" href=\"/admindocs/models/%s/\">%s</a>"
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-models-detail") ((((unsupported)).apply ("admin_docs") ("company"))))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) (("number of related %s objects".mod ((xlink).mod (((unsupported)).apply ("admin_docs.person") ("admin_docs.Person"))))))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) (("all related %s objects".mod ((xlink).mod (((unsupported)).apply ("admin_docs.person") ("admin_docs.Person"))))))
                xtest_model_with_no_backward_relations_render_only_relevant_fields.write
                  [xself]
                    memory > xresponse
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-models-detail") ((((unsupported)).apply ("admin_docs") ("family"))))))
                        xfields.write (((((xresponse).xcontext_data).xget)).apply ("fields"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xfields)))) (2))
                xtest_model_docstring_renders_correctly.write
                  [xself]
                    memory > xmodel_body
                    memory > xsubheading
                    memory > xsummary
                    memory > xbody
                    seq > @
                      seq
                        xsummary.write "<h2 class=\"subhead\"><p>Stores information about a person, related to <a class=\"reference external\" href=\"/admindocs/models/myapp.company/\">myapp.Company</a>.</p></h2>"
                        xsubheading.write "<p><strong>Notes</strong></p>"
                        xbody.write "<p>Use <tt class=\"docutils literal\">save_changes()</tt> when saving this object.</p>"
                        xmodel_body.write "<dl class=\"docutils\"><dt><tt class=\"docutils literal\">company</tt></dt><dd>Field storing <a class=\"reference external\" href=\"/admindocs/models/myapp.company/\">myapp.Company</a> where the person works.</dd></dl>"
                        bogusForceDataize.write ((((xself).xassertContains)).apply (((xself).xresponse)) ("DESCRIPTION"))
                        (((unsupported)).apply (((xself).xassertContains)) (((xself).xresponse)) ((xsummary)) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) (((xself).xresponse)) ((xsubheading)) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) (((xself).xresponse)) ((xbody)) (TRUE))
                        (((unsupported)).apply (((xself).xassertContains)) (((xself).xresponse)) ((xmodel_body)) (TRUE))
                xtest_model_detail_title.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertContains)) (((xself).xresponse)) ("<h1>admin_docs.Person</h1>") (TRUE))
                xtest_app_not_found.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-models-detail") ((((unsupported)).apply ("doesnotexist") ("Person"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("exception"))) ("App 'doesnotexist' not found"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_model_not_found.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ((((unsupported)).apply ((xreverse)) ("django-admindocs-models-detail") ((((unsupported)).apply ("admin_docs") ("doesnotexist"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("exception"))) ("Model 'doesnotexist' not found in app 'admin_docs'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
            (((unsupported)).apply (((xmodels).xField)))
              xdescription.write "A custom field type"
            (((unsupported)).apply (((xmodels).xField)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_field_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                        bogusForceDataize.write ((((xviews).xget_readable_field_data_type)).apply ("NotAField"))
                xtest_builtin_fields.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xviews).xget_readable_field_data_type)).apply (((((xfields).xBooleanField)).apply)))) ("Boolean (Either True or False)"))
                xtest_custom_fields.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xviews).xget_readable_field_data_type)).apply ((((xCustomField)).apply)))) ("A custom field type"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xviews).xget_readable_field_data_type)).apply ((((xDescriptionLackingField)).apply)))) ("Field of type: DescriptionLackingField"))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_simplify_regex.write
                [xself]
                  memory > xtests
                  seq > @
                    seq
                      xtests.write (((unsupported)).apply ((((unsupported)).apply ("^(?P<a>w-)/b/(?P<c>w-)/$") ("/<a>/b/<c>/"))) ((((unsupported)).apply ("^(?P<a>w-)/b/(?P<c>w-)$") ("/<a>/b/<c>"))) ((((unsupported)).apply ("^(?P<a>w-)/b/(?P<c>w-)") ("/<a>/b/<c>"))) ((((unsupported)).apply ("^(?P<a>w-)/b/(w-)$") ("/<a>/b/<var>"))) ((((unsupported)).apply ("^(?P<a>w-)/b/(w-)") ("/<a>/b/<var>"))) ((((unsupported)).apply ("^(?P<a>w-)/b/((x|y)w-)$") ("/<a>/b/<var>"))) ((((unsupported)).apply ("^(?P<a>w-)/b/((x|y)w-)") ("/<a>/b/<var>"))) ((((unsupported)).apply ("^(?P<a>(x|y))/b/(?P<c>w-)$") ("/<a>/b/<c>"))) ((((unsupported)).apply ("^(?P<a>(x|y))/b/(?P<c>w-)") ("/<a>/b/<c>"))) ((((unsupported)).apply ("^(?P<a>(x|y))/b/(?P<c>w-)ab") ("/<a>/b/<c>ab"))) ((((unsupported)).apply ("^(?P<a>(x|y)((|)))/b/(?P<c>w-)ab") ("/<a>/b/<c>ab"))) ((((unsupported)).apply ("^a(?:w-)b") ("/ab"))) ((((unsupported)).apply ("^a(?:(x|y))") ("/a"))) ((((unsupported)).apply ("^(?:w-(?:w-))a") ("/a"))) ((((unsupported)).apply ("^a(?:w-)/b(?:w-)") ("/a/b"))) ((((unsupported)).apply ("(?P<a>w-)/b/(?:w-)c(?:w-)") ("/<a>/b/c"))) ((((unsupported)).apply ("(?P<a>w-)/b/(w-)/(?:w-)c(?:w-)") ("/<a>/b/<var>/c"))) ((((unsupported)).apply ("^a") ("/a"))) ((((unsupported)).apply ("^^a") ("/a"))) ((((unsupported)).apply ("^^^a") ("/a"))) ((((unsupported)).apply ("a$") ("/a"))) ((((unsupported)).apply ("a$$") ("/a"))) ((((unsupported)).apply ("a$$$") ("/a"))) ((((unsupported)).apply ("a?") ("/a"))) ((((unsupported)).apply ("a??") ("/a"))) ((((unsupported)).apply ("a???") ("/a"))) ((((unsupported)).apply ("a*") ("/a"))) ((((unsupported)).apply ("a**") ("/a"))) ((((unsupported)).apply ("a***") ("/a"))) ((((unsupported)).apply ("a-") ("/a"))) ((((unsupported)).apply ("a--") ("/a"))) ((((unsupported)).apply ("a---") ("/a"))) ((((unsupported)).apply ("Aa") ("/a"))) ((((unsupported)).apply ("AAa") ("/a"))) ((((unsupported)).apply ("AAAa") ("/a"))) ((((unsupported)).apply ("aZ") ("/a"))) ((((unsupported)).apply ("aZZ") ("/a"))) ((((unsupported)).apply ("aZZZ") ("/a"))) ((((unsupported)).apply ("ba") ("/a"))) ((((unsupported)).apply ("bba") ("/a"))) ((((unsupported)).apply ("bbba") ("/a"))) ((((unsupported)).apply ("aB") ("/a"))) ((((unsupported)).apply ("aBB") ("/a"))) ((((unsupported)).apply ("aBBB") ("/a"))) ((((unsupported)).apply ("^a/?$") ("/a/"))) ((((unsupported)).apply ("AaZ") ("/a"))) ((((unsupported)).apply ("baB") ("/a"))) ((((unsupported)).apply ("^a") ("/^a"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("a$") ("/a$"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("a?") ("/a?"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("a*") ("/a*"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("a-") ("/a-"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/Aa"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/aZ"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("^a?$") ("/a?"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("^a?$") ("/a?$"))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ("/a\\\\\\\\"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("^b(?P<slug>w-)B/(w-)?") ("/<slug>/<var>"))) ((((unsupported)).apply ("^A(?P<slug>w-)Z") ("/<slug>"))))
                      (((unsupported)).apply ((((unsupported)).apply ((xpattern)) ((xoutput)))) ((xtests)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpattern)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsimplify_regex)).apply ((xpattern)))) ((xoutput)))