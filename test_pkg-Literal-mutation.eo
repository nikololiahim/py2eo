memory > xlist
memory > xmodulename
memory > xlocals
memory > xexec
memory > xt2
memory > xtempfile
memory > xopen
memory > xt5
memory > x__name__
memory > xt6
memory > xc
memory > xtextwrap
memory > xsubsub
memory > xset
memory > xt8
memory > xcontents
memory > xf
memory > xt3
memory > xsys
memory > xsub
memory > xglobals
memory > xos
memory > xdir
memory > xt7
memory > xname
memory > xunittest
[] > test_pkg
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_1
        memory > xfixdir
        memory > xtest_2
        memory > xtest_3
        memory > xtest_7
        memory > xmkhier
        memory > xsetUp
        memory > xcleanout
        memory > xrun_code
        memory > xtest_4
        memory > xtearDown
        memory > xtest_5
        memory > xtest_8
        memory > xtest_6
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xcleanout.write
              [xroot]
                memory > xfullname
                memory > xnames
                seq > @
                  seq
                    xnames.write ((((xos).xlistdir)).apply ((xroot)))
                    (((unsupported)).apply ((xname)) ((xnames)))
                      seq
                        xfullname.write (((((xos).xpath).xjoin)).apply ((xroot)) ((xname)))
                        ((((((xos).xpath).xisdir)).apply ((xfullname))).and ((((((xos).xpath).xislink)).apply ((xfullname))).not)).if
                          bogusForceDataize.write (((xcleanout)).apply ((xfullname)))
                          bogusForceDataize.write ((((xos).xremove)).apply ((xfullname)))
                    bogusForceDataize.write ((((xos).xrmdir)).apply ((xroot)))
            xfixdir.write
              [xlst]
                seq > @
                  seq
                    (((unsupported)).apply ("__builtins__") ((xlst))).if
                      bogusForceDataize.write ((((xlst).xremove)).apply ("__builtins__"))
                    (((unsupported)).apply ("__initializing__") ((xlst))).if
                      bogusForceDataize.write ((((xlst).xremove)).apply ("__initializing__"))
                    (((unsupported)).apply ((xlst)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xroot)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xpkgname)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xsyspath)) ((((xlist)).apply (((xsys).xpath)))))
                        (((unsupported)).apply (((xself).xmodules_to_cleanup)) ((((xset)).apply)))
                xtearDown.write
                  [xself]
                    memory > xmodules
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))) (((xself).xsyspath)))
                        (((unsupported)).apply ((xmodulename)) (((xself).xmodules_to_cleanup)))
                          (((unsupported)).apply ((xmodulename)) (((xsys).xmodules))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xmodulename)))))))))
                        ((xself).xroot).if
                          bogusForceDataize.write (((xcleanout)).apply (((xself).xroot)))
                        ((xself).xpkgname).if
                          seq
                            xmodules.write (((unsupported)).apply ((xname)) ((xname)) (((xsys).xmodules)) ((((unsupported)).apply (((xself).xpkgname)) (((((xname).xsplit)).apply ("."))))))
                            (((unsupported)).apply ((xname)) ((xmodules)))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))))))))
                xrun_code.write
                  [xself xcode]
                    seq > @
                      bogusForceDataize.write (((xexec)).apply (((((xtextwrap).xdedent)).apply ((xcode)))) ((((xglobals)).apply)) ((((unsupported)).apply ("self") ((xself)))))
                xmkhier.write
                  [xself xdescr]
                    memory > xroot
                    memory > xfullname
                    memory > xcomps
                    seq > @
                      seq
                        xroot.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write (((((xsys).xpath).xinsert)).apply (0) ((xroot)))
                        ((((((xos).xpath).xisdir)).apply ((xroot))).not).if
                          bogusForceDataize.write ((((xos).xmkdir)).apply ((xroot)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xcontents)))) ((xdescr)))
                          seq
                            xcomps.write ((((xname).xsplit)).apply)
                            bogusForceDataize.write (((((xself).xmodules_to_cleanup).xadd)).apply ((((".".xjoin)).apply ((xcomps)))))
                            xfullname.write (xroot)
                            (((unsupported)).apply ((xc)) ((xcomps)))
                              xfullname.write (((((xos).xpath).xjoin)).apply ((xfullname)) ((xc)))
                            (((unsupported)).apply ((xcontents)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xos).xmkdir)).apply ((xfullname)))
                              (((unsupported)).apply ((((xopen)).apply ((xfullname)) ("w"))) ((xf)))
                                seq
                                  bogusForceDataize.write ((((xf).xwrite)).apply ((xcontents)))
                                  (((((xcontents).xendswith)).apply ("n")).not).if
                                    bogusForceDataize.write ((((xf).xwrite)).apply ("n"))
                        (((unsupported)).apply (((xself).xroot)) ((xroot)))
                        (((unsupported)).apply (((xself).xpkgname)) ((((unsupported)).apply ((((unsupported)).apply ((xdescr)) (0))) (0))))
                xtest_1.write
                  [xself]
                    memory > xhier
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t1") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t1 __init__.py") (""))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                xtest_2.write
                  [xself]
                    memory > xhier
                    memory > xs
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t2") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t2 __init__.py") ("'doc for t2'"))) ((((unsupported)).apply ("t2 sub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t2 sub __init__.py") (""))) ((((unsupported)).apply ("t2 sub subsub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t2 sub subsub __init__.py") ("spam = 1"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt2).x__name__)) ("t2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xt2).xsub).x__name__)) ("t2.sub"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt2).xsub).xsubsub).x__name__)) ("t2.sub.subsub"))
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xrun_code)).apply ((xs)))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsub).x__name__)) ("t2.sub"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsubsub).x__name__)) ("t2.sub.subsub"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsub).xsubsub).x__name__)) ("t2.sub.subsub"))
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply ("spam") ("sub") ("subsub") ("t2"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xlocals)).apply)) ("name"))) (("Failed to import %s".mod (xname))))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt2).x__name__)) ("t2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xt2).xsub).x__name__)) ("t2.sub"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt2).xsub).xsubsub).x__name__)) ("t2.sub.subsub"))
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xrun_code)).apply ((xs)))
                xtest_3.write
                  [xself]
                    memory > xhier
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t3") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t3 __init__.py") (""))) ((((unsupported)).apply ("t3 sub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t3 sub __init__.py") (""))) ((((unsupported)).apply ("t3 sub subsub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t3 sub subsub __init__.py") ("spam = 1"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt3).x__name__)) ("t3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xt3).xsub).x__name__)) ("t3.sub"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt3).xsub).xsubsub).x__name__)) ("t3.sub.subsub"))
                xtest_4.write
                  [xself]
                    memory > xhier
                    memory > xs
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t4.py") ("raise RuntimeError('Shouldnt load t4.py')"))) ((((unsupported)).apply ("t4") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t4 __init__.py") (""))) ((((unsupported)).apply ("t4 sub.py") ("raise RuntimeError('Shouldnt load sub.py')"))) ((((unsupported)).apply ("t4 sub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t4 sub __init__.py") (""))) ((((unsupported)).apply ("t4 sub subsub.py") ("raise RuntimeError('Shouldnt load subsub.py')"))) ((((unsupported)).apply ("t4 sub subsub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t4 sub subsub __init__.py") ("spam = 1"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xrun_code)).apply ((xs)))
                xtest_5.write
                  [xself]
                    memory > xhier
                    memory > xs
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t5") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t5 __init__.py") ("import t5.foo"))) ((((unsupported)).apply ("t5 string.py") ("spam = 1"))) ((((unsupported)).apply ("t5 foo.py") ("from . import string; assert string.spam == 1"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xrun_code)).apply ((xs)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply ((xt5)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__path__") ("__spec__") ("foo") ("string") ("t5"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply (((xt5).xfoo)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__spec__") ("string"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply (((xt5).xstring)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__spec__") ("spam"))))
                xtest_6.write
                  [xself]
                    memory > xhier
                    memory > xs
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t6") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t6 __init__.py") ("__all__ = ['spam', 'ham', 'eggs']"))) ((((unsupported)).apply ("t6 spam.py") (""))) ((((unsupported)).apply ("t6 ham.py") (""))) ((((unsupported)).apply ("t6 eggs.py") (""))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply ((xt6)))))) ((((unsupported)).apply ("__all__") ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__path__") ("__spec__"))))
                        xs.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xrun_code)).apply ((xs)))
                xtest_7.write
                  [xself]
                    memory > xtas
                    memory > xham
                    memory > xsubsubsub
                    memory > xsubpar
                    memory > xhier
                    seq > @
                      seq
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t7.py") (""))) ((((unsupported)).apply ("t7") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t7 __init__.py") (""))) ((((unsupported)).apply ("t7 sub.py") ("raise RuntimeError('Shouldnt load sub.py')"))) ((((unsupported)).apply ("t7 sub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t7 sub __init__.py") (""))) ((((unsupported)).apply ("t7 sub .py") ("raise RuntimeError('Shouldnt load subsub.py')"))) ((((unsupported)).apply ("t7 sub subsub") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("t7 sub subsub __init__.py") ("spam = 1"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply ((((unsupported)).apply ((xt7)) ((xsub)) ((xsubsub)))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply ((xtas)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__path__") ("__spec__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xt7)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply ((xsubpar)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__path__") ("__spec__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xt7)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xsub)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfixdir)).apply ((((xdir)).apply ((xsubsubsub)))))) ((((unsupported)).apply ("__cached__") ("__doc__") ("__file__") ("__loader__") ("__name__") ("__package__") ("__path__") ("__spec__") ("spam"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xt7)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xsub)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xsubsub)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xham)) (1))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xt7)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xsub)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xsubsub)))
                xtest_8.write
                  [xself]
                    memory > xhier
                    seq > @
                      (((unsupported)).apply)
                        xhier.write (((unsupported)).apply ((((unsupported)).apply ("t8") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((("t8 __init__".add ((xos).xextsep)).add "py")) ("'doc for t8'"))))
                        bogusForceDataize.write ((((xself).xmkhier)).apply ((xhier)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt8).x__doc__)) ("doc for t8"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)