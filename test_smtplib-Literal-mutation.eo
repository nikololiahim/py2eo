memory > xAttributeError
memory > xmessage
memory > xsmtplib
memory > xsocket
memory > xuser_email
memory > xx
memory > xstderr
memory > xuser
memory > x__name__
memory > xMySimSMTPChannel
memory > xcm
memory > xk
memory > xthreading
memory > xSimSMTPServer
memory > xenumerate
memory > xthreading_cleanup
memory > xsmtp
memory > xValueError
memory > xSimSMTPChannel
memory > xerrno
memory > xsmtpd
memory > xconn
memory > xerror
memory > xio
memory > xjoin_thread
memory > xemail
memory > xpassword
memory > xmembers
memory > xmechanism
memory > xselect
memory > xEmailMessage
memory > x_
memory > xtextwrap
memory > xhashed_pass
memory > xkw
memory > xprint
memory > xmock_socket
memory > xrepr
memory > xre
memory > xSimSMTPAUTHInitialResponseChannel
memory > xw
memory > xException
memory > xr
memory > xbase64
memory > xlistname
memory > xhasattr
memory > xcode
memory > xtime
memory > xsuper
memory > xsupport
memory > xsys
memory > xbytes
memory > xm
memory > xhmac
memory > xargs
memory > xOSError
memory > xhashlib
memory > xresponse
memory > xgetattr
memory > xMock
memory > xUnicodeEncodeError
memory > xSimSMTPAUTHInitialResponseServer
memory > xe
memory > xHOST
memory > xname
memory > xunittest
memory > xasyncore
memory > xResponseException
memory > xn
memory > xaddr
memory > xaddr_spec
memory > xthreading_setup
memory > xSimSMTPUTF8Server
memory > xlen
[] > test_smtplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_with_statement_QUIT_failure
        memory > xtest_debuglevel_2
        memory > xserver
        memory > xhandle_error
        memory > xtest_send_message_error_on_non_ascii_addrs_if_no_smtputf8
        memory > xtestSendMessageWithMailOptions
        memory > xtest_send_unicode_with_SMTPUTF8_via_sendmail
        memory > xsmtp_DATA
        memory > xhandle_expt
        memory > xtestAUTH_PLAIN_initial_response_login
        memory > xtestNonnumericPort
        memory > xsmtp_EHLO
        memory > xsmtp_AUTH
        memory > xtest_send_message_uses_smtputf8_if_addrs_non_ascii
        memory > x_auth_cram_md5
        memory > xtestAUTH_BUGGY
        memory > xadd_feature
        memory > xtestTimeoutValue
        memory > xEXPECTED_RESPONSE
        memory > xtestBasic2
        memory > xdisconnect
        memory > xencode_base64
        memory > xtestEXPNNotImplemented
        memory > xtestAUTH_LOGIN_initial_response_ok
        memory > xsmtp_RSET
        memory > xsmtp_QUIT
        memory > xtestLocalHostName
        memory > xrcpt_response
        memory > xtestAUTH_PLAIN_initial_response_auth
        memory > xtestSendMessageWithSpecifiedAddresses
        memory > xtest_421_from_mail_cmd
        memory > xtest_with_statement
        memory > xsmtp_EXPN
        memory > x_decode_base64
        memory > xtestEHLO
        memory > xtest_quit_resets_greeting
        memory > xtestSendMessageMultipleResentRaises
        memory > xtestAUTH_CRAM_MD5
        memory > xsim_users
        memory > xtestSendNullSender
        memory > xtest_421_from_rcpt_cmd
        memory > xdebugging_server
        memory > xtestSockAttributeExists
        memory > xrcpt_count
        memory > xhandle_accepted
        memory > xtest_auth_function
        memory > xtestQuoteData
        memory > xtestBasic1
        memory > xtestHELP
        memory > xtestTimeoutNone
        memory > xtestEXPN
        memory > xtestRSET
        memory > xsetUp
        memory > xsmtp_MAIL
        memory > xAUTH
        memory > xtestSecondHELO
        memory > xtestAUTH_LOGIN_initial_response_notok
        memory > xMSG_END
        memory > x_auth_buggy
        memory > xtest_421_from_data_cmd
        memory > xsmtp_VRFY
        memory > xsim_lists
        memory > xtestSourceAddress
        memory > xtestSendMessageWithMultipleFrom
        memory > xtestSendMessageWithSomeAddresses
        memory > xtestELHO
        memory > xtestAUTH_PLAIN
        memory > xtestVRFY
        memory > x_auth_plain
        memory > xdata_response
        memory > xtestAUTH_LOGIN
        memory > xquit_response
        memory > x_authenticated
        memory > xfound_terminator
        memory > xrespdata
        memory > xtestSend
        memory > xmaxDiff
        memory > xtest_send_unicode_with_SMTPUTF8_via_low_level_API
        memory > xtestSendMessageWithAddresses
        memory > xtest_send_unicode_without_SMTPUTF8
        memory > xtestNotConnected
        memory > xauthenticated_user
        memory > xsmtp_RCPT
        memory > x__init__
        memory > xtestLineTooLong
        memory > xtestSendNeedingDotQuote
        memory > xtestBasic
        memory > xtest__rest_from_mail_cmd
        memory > xtest_test_server_supports_extensions
        memory > xprocess_message
        memory > xtestSendMessage
        memory > xmail_response
        memory > xtestSendBinary
        memory > xget_output_without_xpeer
        memory > xtestAUTH_multiple
        memory > xtestSendMessageResent
        memory > xtestFailingHELO
        memory > xtestTimeoutDefault
        memory > xtearDown
        memory > xtestNOOP
        memory > xsim_cram_md5_challenge
        memory > xtest_debuglevel
        memory > xchannel_class
        memory > xrset_count
        memory > xtest_name_field_not_included_in_envelop_addresses
        memory > xMSG_BEGIN
        memory > xsim_auth
        memory > x_auth_login
        memory > xtest_smtputf8_NotSupportedError_if_no_server_support
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((xsys).xplatform).eq "darwin").if
              seq
                xhandle_expt.write
                  [xself]
                    seq > @
                (((unsupported)).apply ((((xsmtpd).xSMTPChannel).xhandle_expt)) ((xhandle_expt)))
            xserver.write
              [xevt xbuf xserv]
                memory > xn
                memory > xsent
                seq > @
                  seq
                    bogusForceDataize.write ((((xserv).xlisten)).apply)
                    bogusForceDataize.write ((((xevt).xset)).apply)
                    (((unsupported)).apply (((xsocket).xtimeout)))
                      (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserv).xaccept)).apply)))
                      seq
                        xn.write 500
                        while.
                          ((xbuf).and ((xn).greater 0))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)) ((xe)))) (((((xselect).xselect)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xconn)))) ((((unsupported)).apply)))))
                                (xw).if
                                  seq
                                    xsent.write ((((xconn).xsend)).apply ((xbuf)))
                                    xbuf.write (((unsupported)).apply ((xbuf)) ((((unsupported)).apply ((xsent)))))
                                (((unsupported)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xconn).xclose)).apply)
                      seq
                        bogusForceDataize.write ((((xserv).xclose)).apply)
                        bogusForceDataize.write ((((xevt).xset)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtplib).xsocket)) ((xmock_socket)))
                        (((unsupported)).apply (((xself).xport)) (26))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsmtplib).xsocket)) ((xsocket)))
                xtestQuoteData.write
                  [xself]
                    memory > xexpected
                    memory > xteststr
                    seq > @
                      seq
                        xteststr.write "abcn.jklrfoorn..blue"
                        xexpected.write "abcrn..jklrnfoorn...blue"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((((xsmtplib).xquotedata)).apply ((xteststr)))))
                xtestBasic1.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        xsmtp.write ((((xsmtplib).xSMTP)).apply ((xHOST)) (((xself).xport)))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestSourceAddress.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ((((unsupported)).apply ("127.0.0.1") (19876))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xsource_address)) ((((unsupported)).apply ("127.0.0.1") (19876))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestBasic2.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        xsmtp.write ((((xsmtplib).xSMTP)).apply (("%s:%s".mod (((unsupported)).apply ((xHOST)) (((xself).xport))))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestLocalHostName.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("testhost"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xlocal_hostname)) ("testhost"))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestTimeoutDefault.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmock_socket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xmock_socket).xsetdefaulttimeout)).apply (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmock_socket).xgetdefaulttimeout)).apply)) (30))
                        (((unsupported)).apply)
                          xsmtp.write ((((xsmtplib).xSMTP)).apply ((xHOST)) (((xself).xport)))
                          bogusForceDataize.write ((((xmock_socket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsmtp).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestTimeoutNone.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((xsmtp).xsock).xgettimeout)).apply)))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestTimeoutValue.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hola mundo"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsmtp).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtest_debuglevel.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hello world"))
                        xsmtp.write ((((xsmtplib).xSMTP)).apply)
                        bogusForceDataize.write ((((xsmtp).xset_debuglevel)).apply (1))
                        (((unsupported)).apply (((((xsupport).xcaptured_stderr)).apply)) ((xstderr)))
                          bogusForceDataize.write ((((xsmtp).xconnect)).apply ((xHOST)) (((xself).xport)))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                        xexpected.write ((((xre).xcompile)).apply ("^connect:") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xstderr).xgetvalue)).apply)) ((xexpected)))
                xtest_debuglevel_2.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("220 Hello world"))
                        xsmtp.write ((((xsmtplib).xSMTP)).apply)
                        bogusForceDataize.write ((((xsmtp).xset_debuglevel)).apply (2))
                        (((unsupported)).apply (((((xsupport).xcaptured_stderr)).apply)) ((xstderr)))
                          bogusForceDataize.write ((((xsmtp).xconnect)).apply ((xHOST)) (((xself).xport)))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                        xexpected.write ((((xre).xcompile)).apply ("^d{2}:d{2}:d{2}.d{6} connect: ") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xstderr).xgetvalue)).apply)) ((xexpected)))
            xdebugging_server.write
              [xserv xserv_evt xclient_evt]
                memory > xn
                memory > xpoll_fun
                seq > @
                  seq
                    bogusForceDataize.write ((((xserv_evt).xset)).apply)
                    (((unsupported)).apply (((xsocket).xtimeout)))
                      seq
                        (((xhasattr)).apply ((xselect)) ("poll")).if
                          xpoll_fun.write ((xasyncore).xpoll2)
                          xpoll_fun.write ((xasyncore).xpoll)
                        xn.write 1001
                        while.
                          (((xasyncore).xsocket_map).and ((xn).greater 0))
                          [unused]
                            seq > @
                              seq
                                bogusForceDataize.write (((xpoll_fun)).apply (0.01) (((xasyncore).xsocket_map)))
                                ((((xclient_evt).xis_set)).apply).if
                                  seq
                                    bogusForceDataize.write ((((xserv).xclose)).apply)
                                    (((unsupported)).apply)
                                (((unsupported)).apply ((xn)) (2))
                      seq
                        (((((xclient_evt).xis_set)).apply).not).if
                          seq
                            bogusForceDataize.write ((((xtime).xsleep)).apply (0.5))
                            bogusForceDataize.write ((((xserv).xclose)).apply)
                        bogusForceDataize.write ((((xasyncore).xclose_all)).apply)
                        bogusForceDataize.write ((((xserv_evt).xset)).apply)
            xMSG_BEGIN.write "---------- MESSAGE FOLLOWS ----------n"
            xMSG_END.write "------------ END MESSAGE ------------n"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xserv_args
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xthread_key)) ((((xthreading_setup)).apply)))
                        (((unsupported)).apply (((xself).xreal_getfqdn)) (((xsocket).xgetfqdn)))
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xmock_socket).xgetfqdn)))
                        (((unsupported)).apply (((xself).xold_stdout)) (((xsys).xstdout)))
                        (((unsupported)).apply (((xself).xoutput)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xoutput)))
                        (((unsupported)).apply (((xself).xserv_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xclient_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xold_DEBUGSTREAM)) (((xsmtpd).xDEBUGSTREAM)))
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xserv)) ((((unsupported)).apply (((xsmtpd).xDebuggingServer)) ((((unsupported)).apply ((xHOST)) (0))) ((((unsupported)).apply ("nowhere") ((1.neg)))) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xhost)) (((xself).xport)))) ((((unsupported)).apply (((((((xself).xserv).xsocket).xgetsockname)).apply)) ((((unsupported)).apply (2))))))
                        xserv_args.write (((unsupported)).apply (((xself).xserv)) (((xself).xserv_evt)) (((xself).xclient_evt)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xdebugging_server)) ((xserv_args)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xclear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xself).xreal_getfqdn)))
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((xjoin_thread)).apply (((xself).xthread)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xold_stdout)))
                        bogusForceDataize.write (((((xsmtpd).xDEBUGSTREAM).xclose)).apply)
                        (((unsupported)).apply (((xsmtpd).xDEBUGSTREAM)) (((xself).xold_DEBUGSTREAM)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))))
                        bogusForceDataize.write ((((xself).xdoCleanups)).apply)
                        bogusForceDataize.write (((xthreading_cleanup)).apply ((((unsupported)).apply (((xself).xthread_key)))))
                xget_output_without_xpeer.write
                  [xself]
                    memory > xtest_output
                    seq > @
                      seq
                        xtest_output.write (((((xself).xoutput).xgetvalue)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xre).xsub)) ("(.*?)^X-Peer:s*S+n(.*)") ("12") ((xtest_output)) ((((xre).xMULTILINE).or ((xre).xDOTALL))))))
                xtestBasic.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestSourceAddress.write
                  [xself]
                    memory > xsmtp
                    memory > xsrc_port
                    seq > @
                      seq
                        xsrc_port.write ((((xsupport).xfind_unused_port)).apply)
                        (((unsupported)).apply ((xOSError)))
                          seq
                            xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) (((xself).xhost)) (((xself).xport)) ("localhost") (3) ((((unsupported)).apply (((xself).xhost)) ((xsrc_port)))))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xsource_address)) ((((unsupported)).apply (((xself).xhost)) ((xsrc_port)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xlocal_hostname)) ("localhost"))
                            bogusForceDataize.write ((((xsmtp).xquit)).apply)
                          seq
                            (((xe).xerrno).eq ((xerrno).xEADDRINUSE)).if
                              bogusForceDataize.write ((((xself).xskipTest)).apply (("couldn't bind to source port %d".mod (xsrc_port))))
                            (((unsupported)).apply)
                xtestNOOP.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xexpected.write (((unsupported)).apply (250) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xnoop)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestRSET.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xexpected.write (((unsupported)).apply (250) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xrset)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestELHO.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xexpected.write (((unsupported)).apply (250) ("nSIZE 33554432nHELP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xehlo)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestEXPNNotImplemented.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xexpected.write (((unsupported)).apply (502) ("EXPN not implemented"))
                        bogusForceDataize.write ((((xsmtp).xputcmd)).apply ("EXPN"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xgetreply)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestVRFY.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xexpected.write (((unsupported)).apply (252) (("Cannot VRFY user, but will accept message ".add "and attempt delivery")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xvrfy)).apply ("nobody@nowhere.com"))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xverify)).apply ("nobody@nowhere.com"))) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestSecondHELO.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xhelo)).apply)
                        xexpected.write (((unsupported)).apply (503) ("Duplicate HELO/EHLO"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xhelo)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestHELP.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xhelp)).apply)) (("Supported commands: EHLO HELO MAIL ".add "RCPT DATA RSET NOOP QUIT VRFY")))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestSend.write
                  [xself]
                    memory > xmexpect
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write "A test message"
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ("Sally") ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) ((xm)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xoutput).xgetvalue)).apply)) ((xmexpect)))
                xtestSendBinary.write
                  [xself]
                    memory > xmexpect
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write "A test message"
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ("Sally") ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xdecode)).apply ("ascii"))) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xoutput).xgetvalue)).apply)) ((xmexpect)))
                xtestSendNeedingDotQuote.write
                  [xself]
                    memory > xmexpect
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write ".A testn.mes.sage."
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ("Sally") ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) ((xm)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xoutput).xgetvalue)).apply)) ((xmexpect)))
                xtestSendNullSender.write
                  [xself]
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xsender
                    memory > xm
                    seq > @
                      seq
                        xm.write "A test message"
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("<>") ("Sally") ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) ((xm)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xoutput).xgetvalue)).apply)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: <>$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                xtestSendMessage.write
                  [xself]
                    memory > xtest_output
                    memory > xmexpect
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        (((unsupported)).apply (((xsmtp).xsend_message)) ((xm)) ("John") ("Sally"))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                xtestSendMessageWithAddresses.write
                  [xself]
                    memory > xto_addr
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xtest_output
                    memory > xsender
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("foo@bar.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("CC"))) ("Sally, Fred"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Bcc"))) ("John Root <root@localhost>, \"Dinsdale\" <warped@silly.walks.com>"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ("Bcc"))) ("John Root <root@localhost>, \"Dinsdale\" <warped@silly.walks.com>"))
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("Bcc"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: foo@bar.com$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                        (((unsupported)).apply ((xaddr)) ((((unsupported)).apply ("John") ("Sally") ("Fred") ("root@localhost") ("warped@silly.walks.com"))))
                          seq
                            xto_addr.write ((((xre).xcompile)).apply (((("^recips: .*'{}'.*$".xformat)).apply ((xaddr)))) (((xre).xMULTILINE)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xto_addr)))
                xtestSendMessageWithSomeAddresses.write
                  [xself]
                    memory > xto_addr
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xtest_output
                    memory > xsender
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("foo@bar.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John, Dinsdale"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: foo@bar.com$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                        (((unsupported)).apply ((xaddr)) ((((unsupported)).apply ("John") ("Dinsdale"))))
                          seq
                            xto_addr.write ((((xre).xcompile)).apply (((("^recips: .*'{}'.*$".xformat)).apply ((xaddr)))) (((xre).xMULTILINE)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xto_addr)))
                xtestSendMessageWithSpecifiedAddresses.write
                  [xself]
                    memory > xto_addr
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xtest_output
                    memory > xsender
                    memory > xm
                    memory > xrecip
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("foo@bar.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John, Dinsdale"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        (((unsupported)).apply (((xsmtp).xsend_message)) ((xm)) ("joe@example.com") ("foo@example.net"))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: joe@example.com$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                        (((unsupported)).apply ((xaddr)) ((((unsupported)).apply ("John") ("Dinsdale"))))
                          seq
                            xto_addr.write ((((xre).xcompile)).apply (((("^recips: .*'{}'.*$".xformat)).apply ((xaddr)))) (((xre).xMULTILINE)))
                            bogusForceDataize.write ((((xself).xassertNotRegex)).apply ((xdebugout)) ((xto_addr)))
                        xrecip.write ((((xre).xcompile)).apply ("^recips: .*'foo@example.net'.*$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xrecip)))
                xtestSendMessageWithMultipleFrom.write
                  [xself]
                    memory > xto_addr
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xtest_output
                    memory > xsender
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("Bernard, Bianca"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Sender"))) ("the_rescuers@Rescue-Aid-Society.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John, Dinsdale"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: the_rescuers@Rescue-Aid-Society.com$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                        (((unsupported)).apply ((xaddr)) ((((unsupported)).apply ("John") ("Dinsdale"))))
                          seq
                            xto_addr.write ((((xre).xcompile)).apply (((("^recips: .*'{}'.*$".xformat)).apply ((xaddr)))) (((xre).xMULTILINE)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xto_addr)))
                xtestSendMessageResent.write
                  [xself]
                    memory > xto_addr
                    memory > xsmtp
                    memory > xdebugout
                    memory > xmexpect
                    memory > xtest_output
                    memory > xsender
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("foo@bar.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("CC"))) ("Sally, Fred"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Bcc"))) ("John Root <root@localhost>, \"Dinsdale\" <warped@silly.walks.com>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Date"))) ("Thu, 1 Jan 1970 17:42:00 +0000"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-From"))) ("holy@grail.net"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-To"))) ("Martha <my_mom@great.cooker.com>, Jeff"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Bcc"))) ("doe@losthope.net"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xm)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xoutput).xflush)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("Bcc"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Bcc"))))))))
                        xtest_output.write ((((xself).xget_output_without_xpeer)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ("X-Peer"))))))))
                        xmexpect.write ("%s%sn%s".mod (((unsupported)).apply ((xMSG_BEGIN)) (((((xm).xas_string)).apply)) ((xMSG_END))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_output)) ((xmexpect)))
                        xdebugout.write (((((xsmtpd).xDEBUGSTREAM).xgetvalue)).apply)
                        xsender.write ((((xre).xcompile)).apply ("^sender: holy@grail.net$") (((xre).xMULTILINE)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xsender)))
                        (((unsupported)).apply ((xaddr)) ((((unsupported)).apply ("my_mom@great.cooker.com") ("Jeff") ("doe@losthope.net"))))
                          seq
                            xto_addr.write ((((xre).xcompile)).apply (((("^recips: .*'{}'.*$".xformat)).apply ((xaddr)))) (((xre).xMULTILINE)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xdebugout)) ((xto_addr)))
                xtestSendMessageMultipleResentRaises.write
                  [xself]
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write ((((((xemail).xmime).xtext).xMIMEText)).apply ("A test message"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("From"))) ("foo@bar.com"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("To"))) ("John"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("CC"))) ("Sally, Fred"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Bcc"))) ("John Root <root@localhost>, \"Dinsdale\" <warped@silly.walks.com>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Date"))) ("Thu, 1 Jan 1970 17:42:00 +0000"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-From"))) ("holy@grail.net"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-To"))) ("Martha <my_mom@great.cooker.com>, Jeff"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Bcc"))) ("doe@losthope.net"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-Date"))) ("Thu, 2 Jan 1970 17:42:00 +0000"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-To"))) ("holy@grail.net"))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ("Resent-From"))) ("Martha <my_mom@great.cooker.com>, Jeff"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xm)))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtestNotConnected.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write ((((xsmtplib).xSMTP)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPServerDisconnected)) (((xsmtp).xehlo)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPServerDisconnected)) (((xsmtp).xsend)) ("test msg"))
                xtestNonnumericPort.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xsmtplib).xSMTP)) ("localhost") ("bogus"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xsmtplib).xSMTP)) ("localhost:bogus"))
                xtestSockAttributeExists.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsmtplib).xSMTP)).apply)) ((xsmtp)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xsmtp).xsock)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmsg)) ((((xEmailMessage)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmsg)) ("From"))) ("Páolo <főo@bar.com>"))
                        (((unsupported)).apply (((xself).xsmtp)) (((((xsmtplib).xSMTP)).apply)))
                        (((unsupported)).apply ((((xself).xsmtp).xehlo)) ((((unsupported)).apply ((xMock)) ((((unsupported)).apply (200) ("OK"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xsmtp).xhas_extn)) ((((xself).xsmtp).xsendmail)))) ((((unsupported)).apply ((((xMock)).apply)) ((((xMock)).apply)))))
                xtestSendMessage.write
                  [xself]
                    memory > xexpected_mail_options
                    seq > @
                      seq
                        xexpected_mail_options.write (((unsupported)).apply ("SMTPUTF8") ("BODY=8BITMIME"))
                        bogusForceDataize.write (((((xself).xsmtp).xsend_message)).apply (((xself).xmsg)))
                        bogusForceDataize.write (((((xself).xsmtp).xsend_message)).apply (((xself).xmsg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xsmtp).xsendmail).xcall_args_list)) (0))) (0))) (3))) ((xexpected_mail_options)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xsmtp).xsendmail).xcall_args_list)) (1))) (0))) (3))) ((xexpected_mail_options)))
                xtestSendMessageWithMailOptions.write
                  [xself]
                    memory > xexpected_mail_options
                    memory > xmail_options
                    seq > @
                      seq
                        xmail_options.write (((unsupported)).apply ("STARTTLS"))
                        xexpected_mail_options.write (((unsupported)).apply ("STARTTLS") ("SMTPUTF8") ("BODY=8BITMIME"))
                        bogusForceDataize.write (((((xself).xsmtp).xsend_message)).apply (((xself).xmsg)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((xmail_options)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmail_options)) ((((unsupported)).apply ("STARTTLS"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).xsmtp).xsendmail).xcall_args_list)) (0))) (0))) (3))) ((xexpected_mail_options)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtplib).xsocket)) ((xmock_socket)))
                        bogusForceDataize.write ((((xmock_socket).xreply_with)).apply ("199 no hello for you!"))
                        (((unsupported)).apply (((xself).xold_stdout)) (((xsys).xstdout)))
                        (((unsupported)).apply (((xself).xoutput)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xoutput)))
                        (((unsupported)).apply (((xself).xport)) (26))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsmtplib).xsocket)) ((xsocket)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xold_stdout)))
                xtestFailingHELO.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPConnectError)) (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xrespdata.write (("250 OK".add ((".".mul ((xsmtplib).x_MAXLINE)).mul 2)).add "n")
                xsetUp.write
                  [xself]
                    memory > xservargs
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xthread_key)) ((((xthreading_setup)).apply)))
                        (((unsupported)).apply (((xself).xold_stdout)) (((xsys).xstdout)))
                        (((unsupported)).apply (((xself).xoutput)) (((((xio).xStringIO)).apply)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xoutput)))
                        (((unsupported)).apply (((xself).xevt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (15))
                        (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply (((xself).xsock)))))
                        xservargs.write (((unsupported)).apply (((xself).xevt)) (((xself).xrespdata)) (((xself).xsock)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xserver)) ((xservargs)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xevt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xevt).xclear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevt).xwait)).apply)
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xold_stdout)))
                        bogusForceDataize.write (((xjoin_thread)).apply (((xself).xthread)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))))
                        bogusForceDataize.write ((((xself).xdoCleanups)).apply)
                        bogusForceDataize.write (((xthreading_cleanup)).apply ((((unsupported)).apply (((xself).xthread_key)))))
                xtestLineTooLong.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPResponseException)) (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
            xsim_users.write (((unsupported)).apply ("Mr.A@somewhere.com") ("John A") ("Ms.B@xn--fo-fka.com") ("Sally B") ("Mrs.C@somewhereesle.com") ("Ruth C"))
            xsim_auth.write (((unsupported)).apply ("Mr.A@somewhere.com") ("somepassword"))
            xsim_cram_md5_challenge.write "PENCeUxFREJoU0NnbmhNWitOMjNGNndAZWx3b29kLmlubm9zb2Z0LmNvbT4="
            xsim_lists.write (((unsupported)).apply ("list-1") ((((unsupported)).apply ("Mr.A@somewhere.com") ("Mrs.C@somewhereesle.com"))) ("list-2") ((((unsupported)).apply ("Ms.B@xn--fo-fka.com"))))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply (((xsmtpd).xSMTPChannel)))
              seq
                xquit_response.write "None: is there a None literal in the EO language?"
                xmail_response.write "None: is there a None literal in the EO language?"
                xrcpt_response.write "None: is there a None literal in the EO language?"
                xdata_response.write "None: is there a None literal in the EO language?"
                xrcpt_count.write 1
                xrset_count.write 1
                xdisconnect.write 1
                xAUTH.write 100
                xauthenticated_user.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xextra_features]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_extrafeatures)) (((("".xjoin)).apply ((((unsupported)).apply (((("250-{0}rn".xformat)).apply ((xx)))) ((xx)) ((xextra_features)))))))
                        bogusForceDataize.write ((((((xsuper)).apply ((xSimSMTPChannel)) ((xself))).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                xfound_terminator.write
                  [xself]
                    memory > xline
                    seq > @
                      seq
                        (((xself).xsmtp_state).eq ((xself).xAUTH)).if
                          seq
                            xline.write (((((xself).x_emptystring).xjoin)).apply (((xself).xreceived_lines)))
                            (((unsupported)).apply ((xprint)) ("Data:") ((((xrepr)).apply ((xline)))) (((xsmtpd).xDEBUGSTREAM)))
                            (((unsupported)).apply (((xself).xreceived_lines)) ((((unsupported)).apply)))
                            (((unsupported)).apply ((xResponseException)))
                              bogusForceDataize.write ((((xself).xauth_object)).apply ((xline)))
                              seq
                                (((unsupported)).apply (((xself).xsmtp_state)) (((xself).xCOMMAND)))
                                bogusForceDataize.write ((((xself).xpush)).apply (("%s %s".mod (((unsupported)).apply (((xe).xsmtp_code)) (((xe).xsmtp_error))))))
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xfound_terminator)).apply)
                xsmtp_AUTH.write
                  [xself xarg]
                    memory > xauth_object_name
                    memory > xargs
                    seq > @
                      seq
                        (((xself).xseen_greeting).not).if
                          seq
                            bogusForceDataize.write ((((xself).xpush)).apply ("503 Error: send EHLO first"))
                            (((unsupported)).apply)
                        ((((xself).xextended_smtp).not).or (((unsupported)).apply ("AUTH") (((xself).x_extrafeatures)))).if
                          seq
                            bogusForceDataize.write ((((xself).xpush)).apply ("500 Error: command \"AUTH\" not recognized"))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xauthenticated_user)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xself).xpush)).apply ("503 Bad sequence of commands: already authenticated"))
                            (((unsupported)).apply)
                        xargs.write ((((xarg).xsplit)).apply)
                        (((unsupported)).apply ((((xlen)).apply ((xargs)))) ((((unsupported)).apply (1) (2)))).if
                          seq
                            bogusForceDataize.write ((((xself).xpush)).apply ("501 Syntax: AUTH <mechanism> [initial-response]"))
                            (((unsupported)).apply)
                        xauth_object_name.write ("_auth_%s".mod (((((((((unsupported)).apply ((xargs)) (0)).xlower)).apply).xreplace)).apply ("-") ("_")))
                        (((unsupported)).apply ((xAttributeError)))
                          (((unsupported)).apply (((xself).xauth_object)) ((((xgetattr)).apply ((xself)) ((xauth_object_name)))))
                          seq
                            bogusForceDataize.write ((((xself).xpush)).apply (((("504 Command parameter not implemented: unsupported  authentication mechanism {!r}".xformat)).apply ((xauth_object_name)))))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsmtp_state)) (((xself).xAUTH)))
                        bogusForceDataize.write ((((xself).xauth_object)).apply ((((((xlen)).apply ((xargs))).eq 2).if (((unsupported)).apply ((xargs)) (1)) "None: is there a None literal in the EO language?")))
                x_authenticated.write
                  [xself xuser xvalid]
                    seq > @
                      seq
                        (xvalid).if
                          seq
                            (((unsupported)).apply (((xself).xauthenticated_user)) ((xuser)))
                            bogusForceDataize.write ((((xself).xpush)).apply ("235 Authentication Succeeded"))
                          bogusForceDataize.write ((((xself).xpush)).apply ("535 Authentication credentials invalid"))
                        (((unsupported)).apply (((xself).xsmtp_state)) (((xself).xCOMMAND)))
                x_decode_base64.write
                  [xself xstring]
                    seq > @
                      (((unsupported)).apply ((((((((xbase64).xdecodebytes)).apply (((((xstring).xencode)).apply ("ascii")))).xdecode)).apply ("utf-8"))))
                x_auth_plain.write
                  [xself xarg]
                    memory > xlogpass
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xarg)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush)).apply ("334 "))
                          seq
                            xlogpass.write ((((xself).x_decode_base64)).apply ((xarg)))
                            (((unsupported)).apply ((xValueError)))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xuser)) ((xpassword)))) (((((xlogpass).xsplit)).apply ("0"))))
                              seq
                                bogusForceDataize.write ((((xself).xpush)).apply (((("535 Splitting response {!r} into user and password failed: {}".xformat)).apply ((xlogpass)) ((xe)))))
                                (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).x_authenticated)).apply ((xuser)) (((xpassword).eq (((unsupported)).apply ((xsim_auth)) (1)))))
                x_auth_login.write
                  [xself xarg]
                    memory > xpassword
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xarg)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush)).apply ("334 VXNlcm5hbWU6"))
                          ((((xhasattr)).apply ((xself)) ("_auth_login_user")).not).if
                            seq
                              (((unsupported)).apply (((xself).x_auth_login_user)) (((((xself).x_decode_base64)).apply ((xarg)))))
                              bogusForceDataize.write ((((xself).xpush)).apply ("334 UGFzc3dvcmQ6"))
                            seq
                              xpassword.write ((((xself).x_decode_base64)).apply ((xarg)))
                              bogusForceDataize.write ((((xself).x_authenticated)).apply (((xself).x_auth_login_user)) (((xpassword).eq (((unsupported)).apply ((xsim_auth)) (1)))))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_auth_login_user)))))))
                x_auth_buggy.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xpush)).apply ("334 QnVHZ1liVWdHeQ=="))
                x_auth_cram_md5.write
                  [xself xarg]
                    memory > xvalid_hashed_pass
                    memory > xlogpass
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xarg)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpush)).apply (((("334 {}".xformat)).apply ((xsim_cram_md5_challenge)))))
                          seq
                            xlogpass.write ((((xself).x_decode_base64)).apply ((xarg)))
                            (((unsupported)).apply ((xValueError)))
                              (((unsupported)).apply ((((unsupported)).apply ((xuser)) ((xhashed_pass)))) (((((xlogpass).xsplit)).apply)))
                              seq
                                bogusForceDataize.write ((((xself).xpush)).apply (((("535 Splitting response {!r} into user and password failed: {}".xformat)).apply ((xlogpass)) ((xe)))))
                                (((unsupported)).apply (FALSE))
                            xvalid_hashed_pass.write (((((((xhmac).xHMAC)).apply (((((((unsupported)).apply ((xsim_auth)) (1)).xencode)).apply ("ascii"))) ((((((((xself).x_decode_base64)).apply ((xsim_cram_md5_challenge))).xencode)).apply ("ascii"))) ("md5")).xhexdigest)).apply)
                            bogusForceDataize.write ((((xself).x_authenticated)).apply ((xuser)) (((xhashed_pass).eq (xvalid_hashed_pass))))
                xsmtp_EHLO.write
                  [xself xarg]
                    memory > xresp
                    seq > @
                      seq
                        xresp.write "250-testhostrn250-EXPNrn250-SIZE 20000000rn250-STARTTLSrn250-DELIVERBYrn"
                        xresp.write (((xresp).add ((xself).x_extrafeatures)).add "250 HELP")
                        bogusForceDataize.write ((((xself).xpush)).apply ((xresp)))
                        (((unsupported)).apply (((xself).xseen_greeting)) ((xarg)))
                        (((unsupported)).apply (((xself).xextended_smtp)) (TRUE))
                xsmtp_VRFY.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply ((xarg)) ((xsim_users))).if
                        bogusForceDataize.write ((((xself).xpush)).apply (("250 %s %s".mod (((unsupported)).apply ((((unsupported)).apply ((xsim_users)) ((xarg)))) (((((xsmtplib).xquoteaddr)).apply ((xarg))))))))
                        bogusForceDataize.write ((((xself).xpush)).apply (("550 No such user: %s".mod (xarg))))
                xsmtp_EXPN.write
                  [xself xarg]
                    memory > xlist_name
                    memory > xquoted_addr
                    memory > xuser_list
                    seq > @
                      seq
                        xlist_name.write ((((xarg).xlower)).apply)
                        (((unsupported)).apply ((xlist_name)) ((xsim_lists))).if
                          seq
                            xuser_list.write (((unsupported)).apply ((xsim_lists)) ((xlist_name)))
                            (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xuser_email)))) ((((xenumerate)).apply ((xuser_list)))))
                              seq
                                xquoted_addr.write ((((xsmtplib).xquoteaddr)).apply ((xuser_email)))
                                ((xn).less ((((xlen)).apply ((xuser_list))).sub 1)).if
                                  bogusForceDataize.write ((((xself).xpush)).apply (("250-%s %s".mod (((unsupported)).apply ((((unsupported)).apply ((xsim_users)) ((xuser_email)))) ((xquoted_addr))))))
                                  bogusForceDataize.write ((((xself).xpush)).apply (("250 %s %s".mod (((unsupported)).apply ((((unsupported)).apply ((xsim_users)) ((xuser_email)))) ((xquoted_addr))))))
                          bogusForceDataize.write ((((xself).xpush)).apply ("550 No access for you!"))
                xsmtp_QUIT.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply (((xself).xquit_response)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((((xsuper)).apply ((xSimSMTPChannel)) ((xself))).xsmtp_QUIT)).apply ((xarg)))
                        seq
                          bogusForceDataize.write ((((xself).xpush)).apply (((xself).xquit_response)))
                          bogusForceDataize.write ((((xself).xclose_when_done)).apply)
                xsmtp_MAIL.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply (((xself).xmail_response)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((((xsuper)).apply).xsmtp_MAIL)).apply ((xarg)))
                        seq
                          bogusForceDataize.write ((((xself).xpush)).apply (((xself).xmail_response)))
                          ((xself).xdisconnect).if
                            bogusForceDataize.write ((((xself).xclose_when_done)).apply)
                xsmtp_RCPT.write
                  [xself xarg]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrcpt_response)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((((xsuper)).apply).xsmtp_RCPT)).apply ((xarg)))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xrcpt_count)) (2))
                        bogusForceDataize.write ((((xself).xpush)).apply ((((unsupported)).apply (((xself).xrcpt_response)) ((((xself).xrcpt_count).sub 1)))))
                xsmtp_RSET.write
                  [xself xarg]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrset_count)) (2))
                        bogusForceDataize.write ((((((xsuper)).apply).xsmtp_RSET)).apply ((xarg)))
                xsmtp_DATA.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply (((xself).xdata_response)) ("None: is there a None literal in the EO language?")).if
                        bogusForceDataize.write ((((((xsuper)).apply).xsmtp_DATA)).apply ((xarg)))
                        bogusForceDataize.write ((((xself).xpush)).apply (((xself).xdata_response)))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply (((xsmtpd).xSMTPServer)))
              seq
                xchannel_class.write (xSimSMTPChannel)
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_extra_features)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_addresses)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xsmtpd).xSMTPServer).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                xhandle_accepted.write
                  [xself xconn xaddr]
                    seq > @
                      (((unsupported)).apply (((xself).x_SMTPchannel)) ((((unsupported)).apply (((xself).xchannel_class)) (((xself).x_extra_features)) ((xself)) ((xconn)) ((xaddr)) (((xself).x_decode_data)))))
                xprocess_message.write
                  [xself xpeer xmailfrom xrcpttos xdata]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_addresses)) ("from"))) ((xmailfrom)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_addresses)) ("tos"))) ((xrcpttos)))
                xadd_feature.write
                  [xself xfeature]
                    seq > @
                      bogusForceDataize.write (((((xself).x_extra_features).xappend)).apply ((xfeature)))
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xserv_args
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xthread_key)) ((((xthreading_setup)).apply)))
                        (((unsupported)).apply (((xself).xreal_getfqdn)) (((xsocket).xgetfqdn)))
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xmock_socket).xgetfqdn)))
                        (((unsupported)).apply (((xself).xserv_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xclient_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xserv)) ((((unsupported)).apply ((xSimSMTPServer)) ((((unsupported)).apply ((xHOST)) (0))) ((((unsupported)).apply ("nowhere") ((1.neg)))) (TRUE))))
                        (((unsupported)).apply (((xself).xport)) ((((unsupported)).apply (((((((xself).xserv).xsocket).xgetsockname)).apply)) (1))))
                        xserv_args.write (((unsupported)).apply (((xself).xserv)) (((xself).xserv_evt)) (((xself).xclient_evt)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xdebugging_server)) ((xserv_args)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xclear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xself).xreal_getfqdn)))
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((xjoin_thread)).apply (((xself).xthread)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))))
                        bogusForceDataize.write ((((xself).xdoCleanups)).apply)
                        bogusForceDataize.write (((xthreading_cleanup)).apply ((((unsupported)).apply (((xself).xthread_key)))))
                xtestBasic.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestEHLO.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected_features
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xesmtp_features)) ((((unsupported)).apply)))
                        xexpected_features.write (((unsupported)).apply ("expn") ("") ("size") ("20000000") ("starttls") ("") ("deliverby") ("") ("help") (""))
                        bogusForceDataize.write ((((xsmtp).xehlo)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsmtp).xesmtp_features)) ((xexpected_features)))
                        (((unsupported)).apply ((xk)) ((xexpected_features)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsmtp).xhas_extn)).apply ((xk)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xsmtp).xhas_extn)).apply ("unsupported-feature"))))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestVRFY.write
                  [xself]
                    memory > xexpected_known
                    memory > xsmtp
                    memory > xu
                    memory > xexpected_unknown
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        (((unsupported)).apply ((((unsupported)).apply ((xaddr_spec)) ((xname)))) (((((xsim_users).xitems)).apply)))
                          seq
                            xexpected_known.write (((unsupported)).apply (250) ((((xbytes)).apply (("%s %s".mod (((unsupported)).apply ((xname)) (((((xsmtplib).xquoteaddr)).apply ((xaddr_spec))))))) ("ascii"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xvrfy)).apply ((xaddr_spec)))) ((xexpected_known)))
                        xu.write "nobody@nowhere.com"
                        xexpected_unknown.write (((unsupported)).apply (550) ((((("No such user: %s".mod (xu)).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xvrfy)).apply ((xu)))) ((xexpected_unknown)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestEXPN.write
                  [xself]
                    memory > xu
                    memory > xsmtp
                    memory > xusers
                    memory > xexpected_known
                    memory > xexpected_unknown
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        (((unsupported)).apply ((((unsupported)).apply ((xlistname)) ((xmembers)))) (((((xsim_lists).xitems)).apply)))
                          seq
                            xusers.write (((unsupported)).apply)
                            (((unsupported)).apply ((xm)) ((xmembers)))
                              bogusForceDataize.write ((((xusers).xappend)).apply (("%s %s".mod (((unsupported)).apply ((((unsupported)).apply ((xsim_users)) ((xm)))) (((((xsmtplib).xquoteaddr)).apply ((xm))))))))
                            xexpected_known.write (((unsupported)).apply (250) ((((xbytes)).apply (((("n".xjoin)).apply ((xusers)))) ("ascii"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xexpn)).apply ((xlistname)))) ((xexpected_known)))
                        xu.write "PSU-Members-List"
                        xexpected_unknown.write (((unsupported)).apply (550) ("No access for you!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xexpn)).apply ((xu)))) ((xexpected_unknown)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtestAUTH_PLAIN.write
                  [xself]
                    memory > xsmtp
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH PLAIN"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        xresp.write ((((xsmtp).xlogin)).apply ((((unsupported)).apply ((xsim_auth)) (0))) ((((unsupported)).apply ((xsim_auth)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestAUTH_LOGIN.write
                  [xself]
                    memory > xsmtp
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH LOGIN"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        xresp.write ((((xsmtp).xlogin)).apply ((((unsupported)).apply ((xsim_auth)) (0))) ((((unsupported)).apply ((xsim_auth)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestAUTH_LOGIN_initial_response_ok.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH LOGIN"))
                        (((unsupported)).apply ((((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))) ((xsmtp)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsmtp).xuser)) (((xsmtp).xpassword)))) ((xsim_auth)))
                            bogusForceDataize.write ((((xsmtp).xehlo)).apply ("test_auth_login"))
                            xresp.write (((unsupported)).apply (((xsmtp).xauth)) ("LOGIN") (((xsmtp).xauth_login)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                xtestAUTH_LOGIN_initial_response_notok.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH LOGIN"))
                        (((unsupported)).apply ((((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))) ((xsmtp)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsmtp).xuser)) (((xsmtp).xpassword)))) ((xsim_auth)))
                            bogusForceDataize.write ((((xsmtp).xehlo)).apply ("test_auth_login"))
                            xresp.write (((unsupported)).apply (((xsmtp).xauth)) ("LOGIN") (((xsmtp).xauth_login)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                xtestAUTH_BUGGY.write
                  [xself]
                    memory > xsmtp
                    memory > xexpect
                    memory > xauth_buggy
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH BUGGY"))
                        xauth_buggy.write
                          [xchallenge]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("BuGgYbUgGy") ((xchallenge)))
                                (((unsupported)).apply ("0"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsmtp).xuser)) (((xsmtp).xpassword)))) ((xsim_auth)))
                            bogusForceDataize.write ((((xsmtp).xehlo)).apply ("test_auth_buggy"))
                            xexpect.write "^Server AUTH mechanism infinite loop.*"
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xsmtplib).xSMTPException)) ((xexpect)))) ((xcm)))
                              (((unsupported)).apply (((xsmtp).xauth)) ("BUGGY") ((xauth_buggy)) (FALSE))
                          bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestAUTH_CRAM_MD5.write
                  [xself]
                    memory > xsmtp
                    memory > xresp
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH CRAM-MD5"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        xresp.write ((((xsmtp).xlogin)).apply ((((unsupported)).apply ((xsim_auth)) (0))) ((((unsupported)).apply ((xsim_auth)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestAUTH_multiple.write
                  [xself]
                    memory > xsmtp
                    memory > xresp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH BOGUS PLAIN LOGIN CRAM-MD5"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        xresp.write ((((xsmtp).xlogin)).apply ((((unsupported)).apply ((xsim_auth)) (0))) ((((unsupported)).apply ((xsim_auth)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtest_auth_function.write
                  [xself]
                    memory > xsmtp
                    memory > xsupported
                    memory > xresp
                    memory > xmethod
                    seq > @
                      seq
                        xsupported.write (((unsupported)).apply ("PLAIN") ("LOGIN"))
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xhashlib).xmd5)).apply)
                          bogusForceDataize.write ((((xsupported).xadd)).apply ("CRAM-MD5"))
                        (((unsupported)).apply ((xmechanism)) ((xsupported)))
                          bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply (((("AUTH {}".xformat)).apply ((xmechanism)))))
                        (((unsupported)).apply ((xmechanism)) ((xsupported)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmechanism)))))
                            seq
                              xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                              bogusForceDataize.write ((((xsmtp).xehlo)).apply ("foo"))
                              (((unsupported)).apply ((((unsupported)).apply (((xsmtp).xuser)) (((xsmtp).xpassword)))) ((((unsupported)).apply ((((unsupported)).apply ((xsim_auth)) (0))) ((((unsupported)).apply ((xsim_auth)) (1))))))
                              xmethod.write ("auth_".add (((((((xmechanism).xlower)).apply).xreplace)).apply ("-") ("_")))
                              xresp.write ((((xsmtp).xauth)).apply ((xmechanism)) ((((xgetattr)).apply ((xsmtp)) ((xmethod)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresp)) ((((unsupported)).apply (235) ("Authentication Succeeded"))))
                              bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtest_quit_resets_greeting.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xmessage)))) (((((xsmtp).xehlo)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (250))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("size") (((xsmtp).xesmtp_features)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("size") (((xsmtp).xesmtp_features)))
                        bogusForceDataize.write ((((xsmtp).xconnect)).apply ((xHOST)) (((xself).xport)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("size") (((xsmtp).xesmtp_features)))
                        bogusForceDataize.write ((((xsmtp).xehlo_or_helo_if_needed)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("size") (((xsmtp).xesmtp_features)))
                        bogusForceDataize.write ((((xsmtp).xquit)).apply)
                xtest_with_statement.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsmtplib).xSMTP)).apply ((xHOST)) (((xself).xport)))) ((xsmtp)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xmessage)))) (((((xsmtp).xnoop)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (250))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPServerDisconnected)) (((xsmtp).xsend)) ("foo"))
                        (((unsupported)).apply (((((xsmtplib).xSMTP)).apply ((xHOST)) (((xself).xport)))) ((xsmtp)))
                          bogusForceDataize.write ((((xsmtp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xsmtplib).xSMTPServerDisconnected)) (((xsmtp).xsend)) ("foo"))
                xtest_with_statement_QUIT_failure.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPResponseException)))) ((xerror)))
                          (((unsupported)).apply (((((xsmtplib).xSMTP)).apply ((xHOST)) (((xself).xport)))) ((xsmtp)))
                            seq
                              bogusForceDataize.write ((((xsmtp).xnoop)).apply)
                              (((unsupported)).apply (((((xself).xserv).x_SMTPchannel).xquit_response)) ("421 QUIT FAILED"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xerror).xexception).xsmtp_code)) (421))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xerror).xexception).xsmtp_error)) ("QUIT FAILED"))
                xtest__rest_from_mail_cmd.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xnoop)).apply)
                        (((unsupported)).apply (((((xself).xserv).x_SMTPchannel).xmail_response)) ("451 Requested action aborted"))
                        (((unsupported)).apply (((((xself).xserv).x_SMTPchannel).xdisconnect)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPSenderRefused)))))
                          bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ("Sally") ("test message"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xsmtp).xsock)))
                xtest_421_from_mail_cmd.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xnoop)).apply)
                        (((unsupported)).apply (((((xself).xserv).x_SMTPchannel).xmail_response)) ("421 closing connection"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPSenderRefused)))))
                          bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ("Sally") ("test message"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xsmtp).xsock)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xserv).x_SMTPchannel).xrset_count)) (0))
                xtest_421_from_rcpt_cmd.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xnoop)).apply)
                        (((unsupported)).apply (((((xself).xserv).x_SMTPchannel).xrcpt_response)) ((((unsupported)).apply ("250 accepted") ("421 closing"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPRecipientsRefused)))) ((xr)))
                          bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John") ((((unsupported)).apply ("Sally") ("Frank") ("George"))) ("test message"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xsmtp).xsock)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xserv).x_SMTPchannel).xrset_count)) (0))
                        bogusForceDataize.write ((((xself).xassertDictEqual)).apply ((((unsupported)).apply ((((xr).xexception).xargs)) (0))) ((((unsupported)).apply ("Frank") ((((unsupported)).apply (421) ("closing"))))))
                xtest_421_from_data_cmd.write
                  [xself]
                    memory > xsmtp
                    memory > xfound_terminator
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimSMTPChannel)))
                          xfound_terminator.write
                            [xself]
                              seq > @
                                (((xself).xsmtp_state).eq ((xself).xDATA)).if
                                  bogusForceDataize.write ((((xself).xpush)).apply ("421 closing"))
                                  bogusForceDataize.write ((((((xsuper)).apply).xfound_terminator)).apply)
                        (((unsupported)).apply ((((xself).xserv).xchannel_class)) ((xMySimSMTPChannel)))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xnoop)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPDataError)))))
                          bogusForceDataize.write ((((xsmtp).xsendmail)).apply ("John@foo.org") ((((unsupported)).apply ("Sally@foo.org"))) ("test message"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xsmtp).xsock)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xserv).x_SMTPchannel).xrcpt_count)) (0))
                xtest_smtputf8_NotSupportedError_if_no_server_support.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xehlo)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsmtp).xdoes_esmtp)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xsmtp).xhas_extn)).apply ("smtputf8"))))
                        (((unsupported)).apply (((xself).xassertRaises)) (((xsmtplib).xSMTPNotSupportedError)) (((xsmtp).xsendmail)) ("John") ("Sally") ("") ((((unsupported)).apply ("BODY=8BITMIME") ("SMTPUTF8"))))
                        (((unsupported)).apply (((xself).xassertRaises)) (((xsmtplib).xSMTPNotSupportedError)) (((xsmtp).xmail)) ("John") ((((unsupported)).apply ("BODY=8BITMIME") ("SMTPUTF8"))))
                xtest_send_unicode_without_SMTPUTF8.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) (((xsmtp).xsendmail)) ("Alice") ("Böb") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) (((xsmtp).xmail)) ("Älice"))
                xtest_send_message_error_on_non_ascii_addrs_if_no_smtputf8.write
                  [xself]
                    memory > xsmtp
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xEmailMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("From"))) ("Páolo <főo@bar.com>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("To"))) ("Dinsdale"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("Subject"))) ("Nudge nudge, wink, wink u1F609"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xsmtplib).xSMTPNotSupportedError)))))
                          bogusForceDataize.write ((((xsmtp).xsend_message)).apply ((xmsg)))
                xtest_name_field_not_included_in_envelop_addresses.write
                  [xself]
                    memory > xsmtp
                    memory > xmessage
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        xmessage.write (((xEmailMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ("From"))) ((((((xemail).xutils).xformataddr)).apply ((((unsupported)).apply ("Michaël") ("michael@example.com"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ("To"))) ((((((xemail).xutils).xformataddr)).apply ((((unsupported)).apply ("René") ("rene@example.com"))))))
                        bogusForceDataize.write ((((xself).xassertDictEqual)).apply (((((xsmtp).xsend_message)).apply ((xmessage)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xserv).x_addresses)) ("from"))) ("michael@example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xserv).x_addresses)) ("tos"))) ((((unsupported)).apply ("rene@example.com"))))
            (((unsupported)).apply ((xSimSMTPServer)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_extra_features)) ((((unsupported)).apply ("SMTPUTF8") ("8BITMIME"))))
                        bogusForceDataize.write (((((xsmtpd).xSMTPServer).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                xhandle_accepted.write
                  [xself xconn xaddr]
                    seq > @
                      (((unsupported)).apply (((xself).x_SMTPchannel)) ((((unsupported)).apply (((xself).xchannel_class)) (((xself).x_extra_features)) ((xself)) ((xconn)) ((xaddr)) (((xself).x_decode_data)) (((xself).xenable_SMTPUTF8)))))
                xprocess_message.write
                  [xself xpeer xmailfrom xrcpttos xdata xmail_options xrcpt_options]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xlast_peer)) ((xpeer)))
                        (((unsupported)).apply (((xself).xlast_mailfrom)) ((xmailfrom)))
                        (((unsupported)).apply (((xself).xlast_rcpttos)) ((xrcpttos)))
                        (((unsupported)).apply (((xself).xlast_message)) ((xdata)))
                        (((unsupported)).apply (((xself).xlast_mail_options)) ((xmail_options)))
                        (((unsupported)).apply (((xself).xlast_rcpt_options)) ((xrcpt_options)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xserv_args
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xthread_key)) ((((xthreading_setup)).apply)))
                        (((unsupported)).apply (((xself).xreal_getfqdn)) (((xsocket).xgetfqdn)))
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xmock_socket).xgetfqdn)))
                        (((unsupported)).apply (((xself).xserv_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xclient_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xserv)) ((((unsupported)).apply ((xSimSMTPUTF8Server)) ((((unsupported)).apply ((xHOST)) (0))) ((((unsupported)).apply ("nowhere") ((1.neg)))) (FALSE) (TRUE))))
                        (((unsupported)).apply (((xself).xport)) ((((unsupported)).apply (((((((xself).xserv).xsocket).xgetsockname)).apply)) (1))))
                        xserv_args.write (((unsupported)).apply (((xself).xserv)) (((xself).xserv_evt)) (((xself).xclient_evt)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xdebugging_server)) ((xserv_args)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xclear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xself).xreal_getfqdn)))
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((xjoin_thread)).apply (((xself).xthread)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))))
                        bogusForceDataize.write ((((xself).xdoCleanups)).apply)
                        bogusForceDataize.write (((xthreading_cleanup)).apply ((((unsupported)).apply (((xself).xthread_key)))))
                xtest_test_server_supports_extensions.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xehlo)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsmtp).xdoes_esmtp)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsmtp).xhas_extn)).apply ("smtputf8"))))
                xtest_send_unicode_with_SMTPUTF8_via_sendmail.write
                  [xself]
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write ((("¡a test message containing unicode!".xencode)).apply ("utf-8"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        (((unsupported)).apply (((xsmtp).xsendmail)) ("Jőhn") ("Sálly") ((xm)) ((((unsupported)).apply ("BODY=8BITMIME") ("SMTPUTF8"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_mailfrom)) ("Jőhn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpttos)) ((((unsupported)).apply ("Sálly"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_message)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("BODY=8BITMIME") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SMTPUTF8") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpt_options)) ((((unsupported)).apply)))
                xtest_send_unicode_with_SMTPUTF8_via_low_level_API.write
                  [xself]
                    memory > xsmtp
                    memory > xm
                    seq > @
                      seq
                        xm.write ((("¡a test message containing unicode!".xencode)).apply ("utf-8"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xsmtp).xehlo)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xsmtp).xmail)) ("Jő") ((((unsupported)).apply ("BODY=8BITMIME") ("SMTPUTF8"))))) ((((unsupported)).apply (250) ("OK"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xrcpt)).apply ("János"))) ((((unsupported)).apply (250) ("OK"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xdata)).apply ((xm)))) ((((unsupported)).apply (250) ("OK"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_mailfrom)) ("Jő"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpttos)) ((((unsupported)).apply ("János"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_message)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("BODY=8BITMIME") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SMTPUTF8") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpt_options)) ((((unsupported)).apply)))
                xtest_send_message_uses_smtputf8_if_addrs_non_ascii.write
                  [xself]
                    memory > xsmtp
                    memory > xexpected
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xEmailMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("From"))) ("Páolo <főo@bar.com>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("To"))) ("Dinsdale"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ("Subject"))) ("Nudge nudge, wink, wink u1F609"))
                        bogusForceDataize.write ((((xmsg).xset_content)).apply ("oh là là, know what I mean, know what I mean?nn"))
                        xexpected.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (3))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsmtp).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsmtp).xsend_message)).apply ((xmsg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_mailfrom)) ("főo@bar.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpttos)) ((((unsupported)).apply ("Dinsdale"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xserv).xlast_message).xdecode)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("BODY=8BITMIME") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SMTPUTF8") ((((xself).xserv).xlast_mail_options)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xserv).xlast_rcpt_options)) ((((unsupported)).apply)))
            xEXPECTED_RESPONSE.write (((unsupported)).apply ((xencode_base64)) ("0psu0doesnotexist") (""))
            (((unsupported)).apply ((xSimSMTPChannel)))
              xsmtp_AUTH.write
                [xself xarg]
                  memory > xargs
                  seq > @
                    seq
                      xargs.write ((((xarg).xsplit)).apply)
                      (((((((unsupported)).apply ((xargs)) (0)).xlower)).apply).eq "plain").if
                        ((((xlen)).apply ((xargs))).eq 2).if
                          ((((unsupported)).apply ((xargs)) (1)).eq (xEXPECTED_RESPONSE)).if
                            seq
                              bogusForceDataize.write ((((xself).xpush)).apply ("235 Ok"))
                              (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xpush)).apply ("571 Bad authentication"))
            (((unsupported)).apply ((xSimSMTPServer)))
              xchannel_class.write (xSimSMTPAUTHInitialResponseChannel)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xserv_args
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xthread_key)) ((((xthreading_setup)).apply)))
                        (((unsupported)).apply (((xself).xreal_getfqdn)) (((xsocket).xgetfqdn)))
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xmock_socket).xgetfqdn)))
                        (((unsupported)).apply (((xself).xserv_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xclient_evt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xserv)) ((((unsupported)).apply ((xSimSMTPAUTHInitialResponseServer)) ((((unsupported)).apply ((xHOST)) (0))) ((((unsupported)).apply ("nowhere") ((1.neg)))) (TRUE))))
                        (((unsupported)).apply (((xself).xport)) ((((unsupported)).apply (((((((xself).xserv).xsocket).xgetsockname)).apply)) (1))))
                        xserv_args.write (((unsupported)).apply (((xself).xserv)) (((xself).xserv_evt)) (((xself).xclient_evt)))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xdebugging_server)) ((xserv_args)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xclear)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsocket).xgetfqdn)) (((xself).xreal_getfqdn)))
                        bogusForceDataize.write (((((xself).xclient_evt).xset)).apply)
                        bogusForceDataize.write (((((xself).xserv_evt).xwait)).apply)
                        bogusForceDataize.write (((xjoin_thread)).apply (((xself).xthread)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))))
                        bogusForceDataize.write ((((xself).xdoCleanups)).apply)
                        bogusForceDataize.write (((xthreading_cleanup)).apply ((((unsupported)).apply (((xself).xthread_key)))))
                xtestAUTH_PLAIN_initial_response_login.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH PLAIN"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        bogusForceDataize.write ((((xsmtp).xlogin)).apply ("psu") ("doesnotexist"))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                xtestAUTH_PLAIN_initial_response_auth.write
                  [xself]
                    memory > xsmtp
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xadd_feature)).apply ("AUTH PLAIN"))
                        xsmtp.write (((unsupported)).apply (((xsmtplib).xSMTP)) ((xHOST)) (((xself).xport)) ("localhost") (15))
                        (((unsupported)).apply (((xsmtp).xuser)) ("psu"))
                        (((unsupported)).apply (((xsmtp).xpassword)) ("doesnotexist"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcode)) ((xresponse)))) (((((xsmtp).xauth)).apply ("plain") (((xsmtp).xauth_plain)))))
                        bogusForceDataize.write ((((xsmtp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (235))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)