memory > xcompiler
memory > xrelease
memory > xterse
memory > xpy2
memory > xinfo
memory > xversion
memory > xf
memory > xnode
memory > xrevision
memory > xaliased
memory > xcpid
memory > xplatform
memory > xprocessor
memory > xscm
memory > xexpected
memory > xdata
memory > xall
memory > xbuildno
memory > xmac_ver
memory > xsystem
memory > xoutput
memory > xsts
memory > xopen
memory > xexpected_terse
memory > xversion_tag
memory > xany
memory > xenviron
memory > xbuilddate
memory > xhasattr
memory > xbranch
memory > xsys_platform
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xmock
memory > xos
memory > x_winapi
memory > xinput
memory > xmachine
memory > xname
memory > xunittest
memory > xline
memory > xlen
memory > xpy
memory > xfp
memory > x__name__
[] > test_platform
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_platform
        memory > xtest_machine
        memory > xtest_mac_ver
        memory > xtest_win32_ver
        memory > xtest_processor
        memory > xtest_uname
        memory > xtest_libc_ver
        memory > xtest_uname_win32_ARCHITEW6432
        memory > xclear_caches
        memory > xtest_sys_version
        memory > xtest_release
        memory > xtest_java_ver
        memory > xtest_macos
        memory > xtest_architecture_via_symlink
        memory > xtest_system
        memory > xtearDown
        memory > xtest_system_alias
        memory > xtest_architecture
        memory > xtest_mac_ver_with_fork
        memory > xtest_version
        memory > xtest_node
        memory > xtest__comparable_version
        memory > xsetUp
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xclear_caches.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xplatform).x_platform_cache).xclear)).apply)
                        bogusForceDataize.write (((((xplatform).x_sys_version_cache).xclear)).apply)
                        (((unsupported)).apply (((xplatform).x_uname_cache)) ("None: is there a None literal in the EO language?"))
                xtest_architecture.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xarchitecture)).apply)
                xtest_architecture_via_symlink.write
                  [xself]
                    memory > xcmd
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xPythonSymlink)).apply)) ((xpy2)))
                          seq
                            xcmd.write (((unsupported)).apply ("-c") ("import platform; print(platform.architecture())"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xpy).xcall_real)).apply ((((unsupported)).apply ((xcmd)))))) (((((xpy).xcall_link)).apply ((((unsupported)).apply ((xcmd)))))))
                xtest_platform.write
                  [xself]
                    memory > xres
                    seq > @
                      (((unsupported)).apply ((xaliased)) ((((unsupported)).apply (FALSE) (TRUE))))
                        (((unsupported)).apply ((xterse)) ((((unsupported)).apply (FALSE) (TRUE))))
                          xres.write ((((xplatform).xplatform)).apply ((xaliased)) ((xterse)))
                xtest_system.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xsystem)).apply)
                xtest_node.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xnode)).apply)
                xtest_release.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xrelease)).apply)
                xtest_version.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xversion)).apply)
                xtest_machine.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xmachine)).apply)
                xtest_processor.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xprocessor)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsave_version)) (((xsys).xversion)))
                        (((unsupported)).apply (((xself).xsave_git)) (((xsys).x_git)))
                        (((unsupported)).apply (((xself).xsave_platform)) (((xsys).xplatform)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsys).xversion)) (((xself).xsave_version)))
                        (((unsupported)).apply (((xsys).x_git)) (((xself).xsave_git)))
                        (((unsupported)).apply (((xsys).xplatform)) (((xself).xsave_platform)))
                xtest_sys_version.write
                  [xself]
                    memory > xsys_versions
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xinput)) ((xoutput)))) ((((unsupported)).apply ((((unsupported)).apply ("2.4.3 (#1, Jun 21 2006, 13:54:21) n[GCC 3.3.4 (pre 3.3.5 20040809)]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("1") ("Jun 21 2006 13:54:21") ("GCC 3.3.4 (pre 3.3.5 20040809)"))))) ((((unsupported)).apply ("IronPython 1.0.60816 on .NET 2.0.50727.42") ((((unsupported)).apply ("IronPython") ("1.0.60816") ("") ("") ("") ("") (".NET 2.0.50727.42"))))) ((((unsupported)).apply ("IronPython 1.0 (1.0.61005.1977) on .NET 2.0.50727.42") ((((unsupported)).apply ("IronPython") ("1.0.0") ("") ("") ("") ("") (".NET 2.0.50727.42"))))) ((((unsupported)).apply ("2.4.3 (truncation, date, t) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("date t") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation, date, ) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("date") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation, date,) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("date") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation, date) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("date") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation, d) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("d") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation, ) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation,) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("") ("GCC"))))) ((((unsupported)).apply ("2.4.3 (truncation) n[GCC]") ((((unsupported)).apply ("CPython") ("2.4.3") ("") ("") ("truncation") ("") ("GCC"))))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xversion)) ((xbranch)) ((xrevision)) ((xbuildno)) ((xbuilddate)) ((xcompiler)))) (((((xplatform).x_sys_version)).apply ((xinput)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((xversion)) ("") ("") ((xbuildno)) ((xbuilddate)) ((xcompiler)))) ((xoutput)))
                        xsys_versions.write (((unsupported)).apply ((((unsupported)).apply ("2.6.1 (r261:67515, Dec  6 2008, 15:26:00) n[GCC 4.0.1 (Apple Computer, Inc. build 5370)]") ((((unsupported)).apply ("CPython") ("tags/r261") ("67515"))) (((xself).xsave_platform)))) ((((unsupported)).apply ("CPython") ("2.6.1") ("tags/r261") ("67515") ((((unsupported)).apply ("r261:67515") ("Dec  6 2008 15:26:00"))) ("GCC 4.0.1 (Apple Computer, Inc. build 5370)"))) ((((unsupported)).apply ("IronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053") ("None: is there a None literal in the EO language?") ("cli"))) ((((unsupported)).apply ("IronPython") ("2.0.0") ("") ("") ((((unsupported)).apply ("") (""))) (".NET 2.0.50727.3053"))) ((((unsupported)).apply ("2.6.1 (IronPython 2.6.1 (2.6.10920.0) on .NET 2.0.50727.1433)") ("None: is there a None literal in the EO language?") ("cli"))) ((((unsupported)).apply ("IronPython") ("2.6.1") ("") ("") ((((unsupported)).apply ("") (""))) (".NET 2.0.50727.1433"))) ((((unsupported)).apply ("2.7.4 (IronPython 2.7.4 (2.7.0.40) on Mono 4.0.30319.1 (32-bit))") ("None: is there a None literal in the EO language?") ("cli"))) ((((unsupported)).apply ("IronPython") ("2.7.4") ("") ("") ((((unsupported)).apply ("") (""))) ("Mono 4.0.30319.1 (32-bit)"))) ((((unsupported)).apply ("2.5 (trunk:6107, Mar 26 2009, 13:02:18) n[Java HotSpot(TM) Client VM (\"Apple Computer, Inc.\")]") ((((unsupported)).apply ("Jython") ("trunk") ("6107"))) ("java1.5.0_16"))) ((((unsupported)).apply ("Jython") ("2.5.0") ("trunk") ("6107") ((((unsupported)).apply ("trunk:6107") ("Mar 26 2009"))) ("java1.5.0_16"))) ((((unsupported)).apply ("2.5.2 (63378, Mar 26 2009, 18:03:29)n[PyPy 1.0.0]") ((((unsupported)).apply ("PyPy") ("trunk") ("63378"))) (((xself).xsave_platform)))) ((((unsupported)).apply ("PyPy") ("2.5.2") ("trunk") ("63378") ((((unsupported)).apply ("63378") ("Mar 26 2009"))) (""))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xversion_tag)) ((xscm)) ((xsys_platform)))) ((xinfo)))) (((((xsys_versions).xitems)).apply)))
                          seq
                            (((unsupported)).apply (((xsys).xversion)) ((xversion_tag)))
                            (((unsupported)).apply ((xscm)) ("None: is there a None literal in the EO language?")).if
                              (((xhasattr)).apply ((xsys)) ("_git")).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).x_git)))))))
                              (((unsupported)).apply (((xsys).x_git)) ((xscm)))
                            (((unsupported)).apply ((xsys_platform)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply (((xsys).xplatform)) ((xsys_platform)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_implementation)).apply)) ((((unsupported)).apply ((xinfo)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_version)).apply)) ((((unsupported)).apply ((xinfo)) (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_branch)).apply)) ((((unsupported)).apply ((xinfo)) (2))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_revision)).apply)) ((((unsupported)).apply ((xinfo)) (3))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_build)).apply)) ((((unsupported)).apply ((xinfo)) (4))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xpython_compiler)).apply)) ((((unsupported)).apply ((xinfo)) (5))))
                xtest_system_alias.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xsystem_alias)).apply (((((xplatform).xsystem)).apply)) (((((xplatform).xrelease)).apply)) (((((xplatform).xversion)).apply)))
                xtest_uname.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xplatform).xuname)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xany)).apply ((xres)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (0))) (((xres).xsystem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (1))) (((xres).xnode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (2))) (((xres).xrelease)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (3))) (((xres).xversion)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (4))) (((xres).xmachine)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (5))) (((xres).xprocessor)))
                xtest_uname_win32_ARCHITEW6432.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenviron)))
                            seq
                              (((unsupported)).apply ("PROCESSOR_ARCHITEW6432") ((xenviron))).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("PROCESSOR_ARCHITEW6432"))))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("PROCESSOR_ARCHITECTURE"))) ("foo"))
                              (((unsupported)).apply (((xplatform).x_uname_cache)) ("None: is there a None literal in the EO language?"))
                              (((unsupported)).apply ((((unsupported)).apply ((xsystem)) ((xnode)) ((xrelease)) ((xversion)) ((xmachine)) ((xprocessor)))) (((((xplatform).xuname)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmachine)) ("foo"))
                              (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("PROCESSOR_ARCHITEW6432"))) ("bar"))
                              (((unsupported)).apply (((xplatform).x_uname_cache)) ("None: is there a None literal in the EO language?"))
                              (((unsupported)).apply ((((unsupported)).apply ((xsystem)) ((xnode)) ((xrelease)) ((xversion)) ((xmachine)) ((xprocessor)))) (((((xplatform).xuname)).apply)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmachine)) ("bar"))
                          (((unsupported)).apply (((xplatform).x_uname_cache)) ("None: is there a None literal in the EO language?"))
                xtest_java_ver.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xplatform).xjava_ver)).apply)
                        (((xsys).xplatform).eq "java").if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((xres)))))
                xtest_win32_ver.write
                  [xself]
                    memory > xres
                    seq > @
                      xres.write ((((xplatform).xwin32_ver)).apply)
                xtest_mac_ver.write
                  [xself]
                    memory > xoutput
                    memory > xlen_diff
                    memory > xresult_list
                    memory > xexpect_list
                    memory > xreal_ver
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xplatform).xmac_ver)).apply)
                        ((((((xplatform).xuname)).apply).xsystem).eq "Darwin").if
                          seq
                            xoutput.write (((unsupported)).apply (((xsubprocess).xcheck_output)) ((((unsupported)).apply ("sw_vers"))) (TRUE))
                            (((unsupported)).apply ((xline)) (((((xoutput).xsplitlines)).apply)))
                              ((((xline).xstartswith)).apply ("ProductVersion:")).if
                                seq
                                  xreal_ver.write (((unsupported)).apply ((((((((xline).xstrip)).apply).xsplit)).apply)) ((1.neg)))
                                  (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xfail)).apply ("failed to parse sw_vers output: {output!r}"))
                            xresult_list.write ((((((unsupported)).apply ((xres)) (0)).xsplit)).apply ("."))
                            xexpect_list.write ((((xreal_ver).xsplit)).apply ("."))
                            xlen_diff.write ((((xlen)).apply ((xresult_list))).sub (((xlen)).apply ((xexpect_list))))
                            ((xlen_diff).greater 0).if
                              bogusForceDataize.write ((((xexpect_list).xextend)).apply (((((unsupported)).apply ("0")).mul (xlen_diff))))
                            ((xresult_list).neq (((unsupported)).apply ("10") ("16"))).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult_list)) ((xexpect_list)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (1))) ((((unsupported)).apply ("") ("") (""))))
                            (((xsys).xbyteorder).eq "little").if
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xres)) (2))) ((((unsupported)).apply ("i386") ("x86_64") ("arm64"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xres)) (2))) ("PowerPC"))
                xtest_mac_ver_with_fork.write
                  [xself]
                    memory > xpid
                    memory > xinfo
                    seq > @
                      (((unsupported)).apply)
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          seq
                            xinfo.write ((((xplatform).xmac_ver)).apply)
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcpid)) ((xsts)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcpid)) ((xpid)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsts)) (0))
                xtest_libc_ver.write
                  [xself]
                    memory > xexecutable
                    memory > xchunksize
                    memory > xfilename
                    seq > @
                      seq
                        ((((((xos).xpath).xisdir)).apply (((xsys).xexecutable))).and (((((xos).xpath).xexists)).apply ((((xsys).xexecutable).add ".exe")))).if
                          xexecutable.write (((xsys).xexecutable).add ".exe")
                          ((((xsys).xplatform).eq "win32").and ((((((xos).xpath).xexists)).apply (((xsys).xexecutable))).not)).if
                            seq
                              (((unsupported)).apply)
                              xexecutable.write ((((x_winapi).xGetModuleFileName)).apply (0))
                            xexecutable.write ((xsys).xexecutable)
                        bogusForceDataize.write ((((xplatform).xlibc_ver)).apply ((xexecutable)))
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("os.confstr") (TRUE) ("mock 1.0"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xlibc_ver)).apply)) ((((unsupported)).apply ("mock") ("1.0"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ("__libc_init") ((((unsupported)).apply ("libc") (""))))) ((((unsupported)).apply ("GLIBC_2.9") ((((unsupported)).apply ("glibc") ("2.9"))))) ((((unsupported)).apply ("libc.so.1.2.5") ((((unsupported)).apply ("libc") ("1.2.5"))))) ((((unsupported)).apply ("libc_pthread.so.1.2.5") ((((unsupported)).apply ("libc") ("1.2.5_pthread"))))) ((((unsupported)).apply ("") ((((unsupported)).apply ("") (""))))))))
                              seq
                                (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("wb"))) ((xfp)))
                                  seq
                                    bogusForceDataize.write ((((xfp).xwrite)).apply (("[xxx%sxxx]".mod (xdata))))
                                    bogusForceDataize.write ((((xfp).xflush)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xplatform).xlibc_ver)) ((xfilename)))) ((xexpected)))
                        xchunksize.write 16384
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("wb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply (("x".mul ((xchunksize).sub 10))))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("GLIBC_1.23.40GLIBC_1.90GLIBC_1.210"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xplatform).xlibc_ver)) ((xfilename)) ((xchunksize)))) ((((unsupported)).apply ("glibc") ("1.23.4"))))
                xtest__comparable_version.write
                  [xself]
                    memory > xV
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xV)).apply ("1.2.3"))) ((((xV)).apply ("1.2.3"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2.3"))) ((((xV)).apply ("1.2.10"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xV)).apply ("1.2.3.4"))) ((((xV)).apply ("1_2-3+4"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2spam"))) ((((xV)).apply ("1.2dev"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2dev"))) ((((xV)).apply ("1.2alpha"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2dev"))) ((((xV)).apply ("1.2a"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2alpha"))) ((((xV)).apply ("1.2beta"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2a"))) ((((xV)).apply ("1.2b"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2beta"))) ((((xV)).apply ("1.2c"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2b"))) ((((xV)).apply ("1.2c"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2c"))) ((((xV)).apply ("1.2RC"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2c"))) ((((xV)).apply ("1.2rc"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2RC"))) ((((xV)).apply ("1.2.0"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2rc"))) ((((xV)).apply ("1.2.0"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2.0"))) ((((xV)).apply ("1.2pl"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2.0"))) ((((xV)).apply ("1.2p"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.5.1"))) ((((xV)).apply ("1.5.2b2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("3.10a"))) ((((xV)).apply ("161"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xV)).apply ("8.02"))) ((((xV)).apply ("8.02"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("3.4j"))) ((((xV)).apply ("1996.07.12"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("3.1.1.6"))) ((((xV)).apply ("3.2.pl0"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("2g6"))) ((((xV)).apply ("11g"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("0.9"))) ((((xV)).apply ("2.2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2"))) ((((xV)).apply ("1.2.1"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.1"))) ((((xV)).apply ("1.2.2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.1"))) ((((xV)).apply ("1.2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2.1"))) ((((xV)).apply ("1.2.2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.2"))) ((((xV)).apply ("1.2.2"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("0.4"))) ((((xV)).apply ("0.4.0"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("1.13++"))) ((((xV)).apply ("5.5.kw"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xV)).apply ("0.960923"))) ((((xV)).apply ("2.2beta29"))))
                xtest_macos.write
                  [xself]
                    memory > xarch
                    memory > xuname
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).xclear_caches)))
                        xuname.write (((unsupported)).apply ("Darwin") ("hostname") ("17.7.0") ("Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64") ("x86_64") ("i386"))
                        xarch.write (((unsupported)).apply ("64bit") (""))
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xplatform)) ("uname") ((xuname)))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xplatform)) ("architecture") ((xarch)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xmac_ver)) ((xexpected_terse)) ((xexpected)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("") ("") (""))) ("Darwin-17.7.0") ("Darwin-17.7.0-x86_64-i386-64bit"))) ((((unsupported)).apply ((((unsupported)).apply ("10.13.6") ((((unsupported)).apply ("") ("") (""))) ("x86_64"))) ("macOS-10.13.6") ("macOS-10.13.6-x86_64-i386-64bit"))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xplatform)) ("mac_ver") ((xmac_ver)))))
                              seq
                                bogusForceDataize.write ((((xself).xclear_caches)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xplatform).xplatform)) (1))) ((xexpected_terse)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xplatform).xplatform)).apply)) ((xexpected)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)