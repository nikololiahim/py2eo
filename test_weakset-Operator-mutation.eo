memory > xc
memory > xlist
memory > xStopIteration
memory > xKeyError
memory > xi
memory > xtuple
memory > xid
memory > xiter
memory > xRefCycle
memory > xC
memory > xth
memory > xu
memory > xfrozenset
memory > xstr
memory > xq
memory > xrange
memory > xH
memory > xFoo
memory > xtype
memory > xstring
memory > xset
memory > xrepr
memory > xint
memory > xgc
memory > xdir
memory > xunittest
memory > xelem
memory > xhash
memory > xnext
memory > xWeakSet
memory > xlen
memory > xdict
memory > xTypeError
memory > xmethod
memory > x__name__
memory > xa
[] > test_weakset
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_ne
        memory > xtest_isdisjoint
        memory > xtest_repr
        memory > xtest_subclass_with_custom_hash
        memory > xtest_contains
        memory > x__init__
        memory > xtest_len
        memory > xtest_methods
        memory > xtest_sub_and_super
        memory > xtest_inplace_on_self
        memory > xtest_eq
        memory > xtest_weak_destroy_while_iterating
        memory > xtest_and
        memory > xtest_weak_destroy_and_mutate_while_iterating
        memory > xtest_union
        memory > xtest_lt
        memory > xtest_constructor_identity
        memory > xtest_gc
        memory > xtest_len_cycles
        memory > xtest_gt
        memory > xtest_update
        memory > xtest_new_or_init
        memory > xtest_hash
        memory > xtest_ixor
        memory > xustr
        memory > xtest_add
        memory > xtest_init
        memory > xtest_pop
        memory > xtest_intersection_update
        memory > xsetUp
        memory > xtest_remove
        memory > xtest_difference_update
        memory > xtest_len_race
        memory > xtest_difference
        memory > xtest_discard
        memory > xtest_or
        memory > xtest_copy
        memory > xtest_symmetric_difference_update
        memory > xtest_sub
        memory > xtest_ior
        memory > xtest_iand
        memory > xtest_xor
        memory > xtest_symmetric_difference
        memory > xtest_clear
        memory > xtest_isub
        memory > xtest_intersection
        memory > xtest_update_set
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              x__init__.write
                [xself]
                  seq > @
                    (((unsupported)).apply (((xself).xcycle)) ((xself)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xitems)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ((((unsupported)).apply ("a") ("b") ("c"))))))
                        (((unsupported)).apply (((xself).xitems2)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ((((unsupported)).apply ("x") ("y") ("z"))))))
                        (((unsupported)).apply (((xself).xab_items)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ("ab"))))
                        (((unsupported)).apply (((xself).xabcde_items)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ("abcde"))))
                        (((unsupported)).apply (((xself).xdef_items)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ("def"))))
                        (((unsupported)).apply (((xself).xab_weakset)) ((((xWeakSet)).apply (((xself).xab_items)))))
                        (((unsupported)).apply (((xself).xabcde_weakset)) ((((xWeakSet)).apply (((xself).xabcde_items)))))
                        (((unsupported)).apply (((xself).xdef_weakset)) ((((xWeakSet)).apply (((xself).xdef_items)))))
                        (((unsupported)).apply (((xself).xletters)) ((((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) (((xstring).xascii_letters)))))
                        (((unsupported)).apply (((xself).xs)) ((((xWeakSet)).apply (((xself).xitems)))))
                        (((unsupported)).apply (((xself).xd)) (((((xdict).xfromkeys)).apply (((xself).xitems)))))
                        (((unsupported)).apply (((xself).xobj)) ((((xustr)).apply ("F"))))
                        (((unsupported)).apply (((xself).xfs)) ((((xWeakSet)).apply ((((unsupported)).apply (((xself).xobj)))))))
                xtest_methods.write
                  [xself]
                    memory > xweaksetmethods
                    seq > @
                      seq
                        xweaksetmethods.write (((xdir)).apply ((xWeakSet)))
                        (((unsupported)).apply ((xmethod)) ((((xdir)).apply ((xset)))))
                          seq
                            (((xmethod).eq "test_c_api").or ((((xmethod).xstartswith)).apply ("_"))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xmethod)) ((xweaksetmethods)) (("WeakSet missing method ".sub (xmethod))))
                xtest_new_or_init.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xWeakSet)) ((((unsupported)).apply)) (2))
                xtest_len.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xs)))) ((((xlen)).apply (((xself).xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xfs)))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xobj)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xfs)))) (0))
                xtest_contains.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) (((xself).xs)))) ((((unsupported)).apply ((xc)) (((xself).xd)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (1) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xobj)) (((xself).xfs)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xobj)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xustr)).apply ("F"))) (((xself).xfs)))
                xtest_union.write
                  [xself]
                    memory > xx
                    memory > xc
                    memory > xu
                    seq > @
                      seq
                        xu.write (((((xself).xs).xunion)).apply (((xself).xitems2)))
                        (((unsupported)).apply ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) ((xu)))) (((((unsupported)).apply ((xc)) (((xself).xd))).or (((unsupported)).apply ((xc)) (((xself).xitems2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((((xWeakSet)).apply (((xself).xitems)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xu)))) ((xWeakSet)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xunion)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xC)) ((((unsupported)).apply ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xlist)) ((xtuple)))))
                          seq
                            xx.write (((xWeakSet)).apply ((((xself).xitems).sub ((xself).xitems2))))
                            xc.write (((xC)).apply (((xself).xitems2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xs).xunion)).apply ((xc)))) ((xx)))
                            (((unsupported)).apply ((((unsupported)).apply ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xu)))) (((((xlen)).apply (((xself).xitems))).sub (((xlen)).apply (((xself).xitems2))))))
                        bogusForceDataize.write (((((xself).xitems2).xpop)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xu)))) (((((xlen)).apply (((xself).xitems))).sub (((xlen)).apply (((xself).xitems2))))))
                xtest_or.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xunion)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).or (((xset)).apply (((xself).xitems2))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).or (((xfrozenset)).apply (((xself).xitems2))))) ((xi)))
                xtest_intersection.write
                  [xself]
                    memory > xi
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xWeakSet)).apply (((xself).xletters)))
                        xi.write ((((xs).xintersection)).apply (((xself).xitems2)))
                        (((unsupported)).apply ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) ((xi)))) (((((unsupported)).apply ((xc)) (((xself).xitems2))).and (((unsupported)).apply ((xc)) (((xself).xletters))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xWeakSet)).apply (((xself).xletters)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xi)))) ((xWeakSet)))
                        (((unsupported)).apply ((xC)) ((((unsupported)).apply ((xset)) ((xfrozenset)) (((xdict).xfromkeys)) ((xlist)) ((xtuple)))))
                          seq
                            xx.write (((xWeakSet)).apply ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xi).xintersection)).apply ((((xC)).apply (((xself).xitems)))))) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xi)))) ((((xlen)).apply (((xself).xitems2)))))
                        bogusForceDataize.write (((((xself).xitems2).xpop)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xi)))) ((((xlen)).apply (((xself).xitems2)))))
                xtest_isdisjoint.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xs).xisdisjoint)).apply ((((xWeakSet)).apply (((xself).xitems2)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xself).xs).xisdisjoint)).apply ((((xWeakSet)).apply (((xself).xletters))))).not)))
                xtest_and.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xintersection)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).and (((xset)).apply (((xself).xitems2))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).and (((xfrozenset)).apply (((xself).xitems2))))) ((xi)))
                xtest_difference.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xdifference)).apply (((xself).xitems2)))
                        (((unsupported)).apply ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) ((xi)))) (((((unsupported)).apply ((xc)) (((xself).xd))).and (((unsupported)).apply ((xc)) (((xself).xitems2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((((xWeakSet)).apply (((xself).xitems)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xi)))) ((xWeakSet)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xdifference)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_sub.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xdifference)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).sub (((xset)).apply (((xself).xitems2))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xs).sub (((xfrozenset)).apply (((xself).xitems2))))) ((xi)))
                xtest_symmetric_difference.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xsymmetric_difference)).apply (((xself).xitems2)))
                        (((unsupported)).apply ((xc)) (((xself).xletters)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xc)) ((xi)))) ((((unsupported)).apply ((((unsupported)).apply ((xc)) (((xself).xd)))) ((((unsupported)).apply ((xc)) (((xself).xitems2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((((xWeakSet)).apply (((xself).xitems)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xi)))) ((xWeakSet)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xsymmetric_difference)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xi)))) (((((xlen)).apply (((xself).xitems))).sub (((xlen)).apply (((xself).xitems2))))))
                        bogusForceDataize.write (((((xself).xitems2).xpop)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xi)))) (((((xlen)).apply (((xself).xitems))).sub (((xlen)).apply (((xself).xitems2))))))
                xtest_xor.write
                  [xself]
                    memory > xi
                    seq > @
                      seq
                        xi.write (((((xself).xs).xsymmetric_difference)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xs)) ((((xset)).apply (((xself).xitems2)))))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xself).xs)) ((((xfrozenset)).apply (((xself).xitems2)))))) ((xi)))
                xtest_sub_and_super.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xab_weakset).leq ((xself).xabcde_weakset))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xabcde_weakset).leq ((xself).xabcde_weakset))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xabcde_weakset).geq ((xself).xab_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xabcde_weakset).leq ((xself).xdef_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xabcde_weakset).geq ((xself).xdef_weakset))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xset)).apply ("a")).xissubset)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xset)).apply ("abc")).xissuperset)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((xset)).apply ("a")).xissubset)).apply ("cbs"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((xset)).apply ("cbs")).xissuperset)).apply ("a"))))
                xtest_lt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xab_weakset).less ((xself).xabcde_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xabcde_weakset).less ((xself).xdef_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xab_weakset).less ((xself).xab_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xWeakSet)).apply).less (((xWeakSet)).apply))))
                xtest_gt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xabcde_weakset).greater ((xself).xab_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xabcde_weakset).greater ((xself).xdef_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xab_weakset).greater ((xself).xab_weakset))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xWeakSet)).apply).greater (((xWeakSet)).apply))))
                xtest_gc.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xWeakSet)).apply ((((unsupported)).apply ((((xFoo)).apply)) ((xi)) ((((xrange)).apply (1000))))))
                        (((unsupported)).apply ((xelem)) ((xs)))
                          seq
                            (((unsupported)).apply (((xelem).xcycle)) ((xs)))
                            (((unsupported)).apply (((xelem).xsub)) ((xelem)))
                            (((unsupported)).apply (((xelem).xset)) ((((xWeakSet)).apply ((((unsupported)).apply ((xelem)))))))
                xtest_subclass_with_custom_hash.write
                  [xself]
                    memory > xs
                    memory > x__hash__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xWeakSet)))
                          x__hash__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xint)).apply (((((xid)).apply ((xself))).and 2147483647)))))
                        xs.write (((xH)).apply)
                        xf.write (((xset)).apply)
                        bogusForceDataize.write ((((xf).xadd)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xs)) ((xf)))
                        bogusForceDataize.write ((((xf).xremove)).apply ((xs)))
                        bogusForceDataize.write ((((xf).xadd)).apply ((xs)))
                        bogusForceDataize.write ((((xf).xdiscard)).apply ((xs)))
                xtest_init.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xWeakSet)).apply)
                        bogusForceDataize.write ((((xs).x__init__)).apply (((xself).xitems)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) (((xself).xs)))
                        bogusForceDataize.write ((((xs).x__init__)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xWeakSet)).apply (((xself).xitems2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xs).x__init__)) ((xs)) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xs).x__init__)) (1))
                xtest_constructor_identity.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xs.write (((xWeakSet)).apply (((xself).xitems)))
                        xt.write (((xWeakSet)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xs)))) ((((xid)).apply ((xt)))))
                xtest_hash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) (((xself).xs)))
                xtest_clear.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((((xWeakSet)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xself).xs)))) (0))
                xtest_copy.write
                  [xself]
                    memory > xdup
                    seq > @
                      seq
                        xdup.write (((((xself).xs).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((xdup)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply (((xself).xs)))) ((((xid)).apply ((xdup)))))
                xtest_add.write
                  [xself]
                    memory > xx
                    memory > xdup
                    seq > @
                      seq
                        xx.write (((xustr)).apply ("Q"))
                        bogusForceDataize.write (((((xself).xs).xadd)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xx)) (((xself).xs)))
                        xdup.write (((((xself).xs).xcopy)).apply)
                        bogusForceDataize.write (((((xself).xs).xadd)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xs)) ((xdup)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xadd)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).xfs).xadd)).apply ((((xFoo)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply (((xself).xfs))).eq 1)))
                        bogusForceDataize.write (((((xself).xfs).xadd)).apply (((xself).xobj)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply (((xself).xfs))).eq 1)))
                xtest_remove.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((xustr)).apply ("a"))
                        bogusForceDataize.write (((((xself).xs).xremove)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xx)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((xself).xs).xremove)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xremove)) ((((unsupported)).apply)))
                xtest_discard.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xq)))) ((((unsupported)).apply ((((xustr)).apply ("a"))) ((((xustr)).apply ("Q"))))))
                        bogusForceDataize.write (((((xself).xs).xdiscard)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xa)) (((xself).xs)))
                        bogusForceDataize.write (((((xself).xs).xdiscard)).apply ((xq)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xdiscard)) ((((unsupported)).apply)))
                xtest_pop.write
                  [xself]
                    memory > xelem
                    seq > @
                      seq
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply (((xself).xs)))))))
                          seq
                            xelem.write (((((xself).xs).xpop)).apply)
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xelem)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((xself).xs).xpop)))
                xtest_update.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xupdate)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xupdate)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_update_set.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xs).xupdate)).apply ((((xset)).apply (((xself).xitems2)))))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                xtest_ior.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xs)) ((((xset)).apply (((xself).xitems2)))))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                xtest_intersection_update.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xintersection_update)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          ((((unsupported)).apply ((xc)) (((xself).xitems2))).and (((unsupported)).apply ((xc)) (((xself).xitems)))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xintersection_update)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_iand.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xs)) ((((xset)).apply (((xself).xitems2)))))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          ((((unsupported)).apply ((xc)) (((xself).xitems2))).and (((unsupported)).apply ((xc)) (((xself).xitems)))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                xtest_difference_update.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xdifference_update)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          ((((unsupported)).apply ((xc)) (((xself).xitems))).and (((unsupported)).apply ((xc)) (((xself).xitems2)))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xdifference_update)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xsymmetric_difference_update)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_isub.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xs)) ((((xset)).apply (((xself).xitems2)))))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          ((((unsupported)).apply ((xc)) (((xself).xitems))).and (((unsupported)).apply ((xc)) (((xself).xitems2)))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                xtest_symmetric_difference_update.write
                  [xself]
                    memory > xretval
                    seq > @
                      seq
                        xretval.write (((((xself).xs).xsymmetric_difference_update)).apply (((xself).xitems2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          (((unsupported)).apply ((((unsupported)).apply ((xc)) (((xself).xitems)))) ((((unsupported)).apply ((xc)) (((xself).xitems2))))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xs).xsymmetric_difference_update)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_ixor.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xs)) ((((xset)).apply (((xself).xitems2)))))
                        (((unsupported)).apply ((xc)) ((((xself).xitems).sub ((xself).xitems2))))
                          (((unsupported)).apply ((((unsupported)).apply ((xc)) (((xself).xitems)))) ((((unsupported)).apply ((xc)) (((xself).xitems2))))).if
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xc)) (((xself).xs)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xc)) (((xself).xs)))
                xtest_inplace_on_self.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((((xself).xs).xcopy)).apply)
                        (((unsupported)).apply ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) (((xself).xs)))
                        (((unsupported)).apply ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) (((xself).xs)))
                        (((unsupported)).apply ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xWeakSet)).apply)))
                        xt.write (((((xself).xs).xcopy)).apply)
                        (((unsupported)).apply ((xt)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xWeakSet)).apply)))
                xtest_eq.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xs).eq ((xself).xs))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xs).eq (((xWeakSet)).apply (((xself).xitems))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xs).eq (((xset)).apply (((xself).xitems))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xs).eq (((xlist)).apply (((xself).xitems))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xs).eq (((xtuple)).apply (((xself).xitems))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xs).eq (((xWeakSet)).apply ((((unsupported)).apply ((xFoo))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xs).eq 1)))
                xtest_ne.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xs).neq (((xset)).apply (((xself).xitems))))))
                        xs1.write (((xWeakSet)).apply)
                        xs2.write (((xWeakSet)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xs1).neq (xs2))))
                xtest_weak_destroy_while_iterating.write
                  [xself]
                    memory > xs
                    memory > xitems
                    memory > xit
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) ((((unsupported)).apply ("a") ("b") ("c"))))
                        xs.write (((xWeakSet)).apply ((xitems)))
                        xit.write (((xiter)).apply ((xs)))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xitems)) ((1.neg)))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xlen)).apply ((((xlist)).apply ((xit)))))) ((((unsupported)).apply ((((xlen)).apply ((xitems)))) (((((xlen)).apply ((xitems))).sub 1)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((((xlen)).apply ((xitems)))))
                xtest_weak_destroy_and_mutate_while_iterating.write
                  [xself]
                    memory > xt
                    memory > xs
                    memory > xtestcontext
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply ((((xustr)).apply ((xc)))) ((xc)) (((xstring).xascii_letters)))
                        xs.write (((xWeakSet)).apply ((xitems)))
                        xtestcontext.write
                          []
                            memory > xit
                            memory > xyielded
                            memory > xu
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                  seq
                                    xit.write (((xiter)).apply ((xs)))
                                    xyielded.write (((xustr)).apply ((((xstr)).apply ((((xnext)).apply ((xit)))))))
                                    xu.write (((xustr)).apply ((((xstr)).apply (((((xitems).xpop)).apply)))))
                                    ((xyielded).eq (xu)).if
                                      bogusForceDataize.write (((xnext)).apply ((xit)))
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                                    (((unsupported)).apply ((xu)))
                                  xit.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((xu)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xu)) ((xs)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((xu)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xs).xremove)) ((xu)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xu)) ((xs)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((xu)))
                          bogusForceDataize.write ((((xs).xadd)).apply ((xu)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xu)) ((xs)))
                        xt.write ((((xs).xcopy)).apply)
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((xu)))
                          bogusForceDataize.write ((((xs).xupdate)).apply ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((((xlen)).apply ((xt)))))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((xu)))
                          bogusForceDataize.write ((((xs).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (0))
                xtest_len_cycles.write
                  [xself]
                    memory > xn1
                    memory > xit
                    memory > xitems
                    memory > xs
                    memory > xn2
                    memory > xN
                    seq > @
                      seq
                        xN.write 20
                        xitems.write (((unsupported)).apply ((((xRefCycle)).apply)) ((xi)) ((((xrange)).apply ((xN)))))
                        xs.write (((xWeakSet)).apply ((xitems)))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)))))
                        xit.write (((xiter)).apply ((xs)))
                        (((unsupported)).apply ((xStopIteration)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xn1.write (((xlen)).apply ((xs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xn2.write (((xlen)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xn1)) ((((unsupported)).apply (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn2)) (0))
                xtest_len_race.write
                  [xself]
                    memory > xn1
                    memory > xit
                    memory > xitems
                    memory > xs
                    memory > xn2
                    memory > xN
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xgc).xset_threshold)) ((((unsupported)).apply (((((xgc).xget_threshold)).apply)))))
                        (((unsupported)).apply ((xth)) ((((xrange)).apply (1) (100))))
                          seq
                            xN.write 20
                            bogusForceDataize.write ((((xgc).xcollect)).apply (0))
                            bogusForceDataize.write ((((xgc).xset_threshold)).apply ((xth)) ((xth)) ((xth)))
                            xitems.write (((unsupported)).apply ((((xRefCycle)).apply)) ((xi)) ((((xrange)).apply ((xN)))))
                            xs.write (((xWeakSet)).apply ((xitems)))
                            (((unsupported)).apply ((((unsupported)).apply ((xitems)))))
                            xit.write (((xiter)).apply ((xs)))
                            (((unsupported)).apply ((xStopIteration)))
                              bogusForceDataize.write (((xnext)).apply ((xit)))
                            xn1.write (((xlen)).apply ((xs)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                            xn2.write (((xlen)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xn1)) (0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xn1)) ((xN)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xn2)) (0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xn2)) ((xn1)))
                xtest_repr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xrepr)).apply (((xself).xs))).eq (((xrepr)).apply ((((xself).xs).xdata))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)