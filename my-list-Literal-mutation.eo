+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > my-list
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xmyLi
      seq > @
        stdout "my-list\n"
        write.
          xmyLi
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e1
                cage > e5
                cage > lhs1
                cage > xc
                cage > e4
                cage > e3
                cage > xlst
                cage > e2
                cage > xco
                seq > @
                  stdout "xmyLi\n"
                  write.
                    xc
                    []
                      newUID.apply 0 > xid
                      [] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            cage > xhead
                            cage > xtail
                            xc > xclass
                            seq > initFields
                              xhead.write "None: is there a None literal in the EO language?"
                              xtail.write "None: is there a None literal in the EO language?"
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  write.
                    xco
                    []
                      [xheadNotCopied xtailNotCopied] > apply
                        [stackUp] > @
                          cage > tmp
                          cage > toReturn
                          xheadNotCopied' > xhead
                          xtailNotCopied' > xtail
                          cage > xo
                          cage > e0
                          seq > @
                            stdout "xco\n"
                            xhead.<
                            xtail.<
                            tmp.write (goto ((((xc)).apply).@))
                            (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                            (e0).write (tmp.result)
                            ((e0).<)
                            mkCopy (e0) > tmp9
                            (xo).write (tmp9.copy)
                            mkCopy (xhead) > tmp10
                            ((xo).xhead).write (tmp10.copy)
                            mkCopy (xtail) > tmp11
                            ((xo).xtail).write (tmp11.copy)
                            toReturn.write ((xo))
                            stackUp.forward (return toReturn)
                            123
                  (xlst).write ("None: is there a None literal in the EO language?")
                  tmp.write (goto ((((xco)).apply (1) ((xlst))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp12
                  (xlst).write (tmp12.copy)
                  tmp.write (goto ((((xco)).apply (2) ((xlst))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e2).write (tmp.result)
                  ((e2).<)
                  mkCopy (e2) > tmp13
                  (xlst).write (tmp13.copy)
                  mkCopy (xlst.xtail) > tmp14
                  (e3).write (tmp14.copy)
                  ((e3).<)
                  mkCopy (e3.xhead) > tmp15
                  (e4).write (tmp15.copy)
                  ((e4).<)
                  (lhs1).write (1)
                  [] > tmp16
                    memory > dddata
                    dddata.write (((e4).eq (lhs1))) > @
                  (e5).write (tmp16.dddata)
                  ((e5).<)
                  toReturn.write ((e5))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmyLi)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @