memory > xenumerate
memory > xOperationWriter
memory > xvalue
memory > x_
memory > xoperation_string
memory > xarg
memory > xoperation
memory > xserializer_factory
memory > xdependency
memory > xexisting_dirs
memory > xmodule_dir
memory > xmissing_dirs
memory > xImportError
memory > xSerializer
memory > xget_func_args
memory > xlist
memory > xget_version
memory > xoperation_imports
memory > xValueError
memory > ximport_module
memory > xapps
memory > xMigrationWriter
memory > xarg_string
memory > xmigrations
memory > xopen
memory > xset
memory > xre
memory > xmissing_dir
memory > xi
memory > xtuple
memory > xarg_imports
memory > xsorted
memory > xkey_string
memory > xargs
memory > xmigrations_package_name
memory > xos
memory > xmigrations_package_basename
memory > xitem
memory > xgetattr
memory > xname
memory > xindentation2
memory > xkwargs
memory > xnow
memory > xisinstance
memory > xMigrationLoader
memory > xline
memory > xlen
memory > xdict
memory > xkey_imports
memory > xmaybe_app_name
memory > xkey
[] > writer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xfilename
        memory > xserialize
        memory > xMIGRATION_TEMPLATE
        memory > xMIGRATION_HEADER_TEMPLATE
        memory > xunindent
        memory > xas_string
        memory > xpath
        memory > xfeed
        memory > xrender
        memory > xunregister_serializer
        memory > xindent
        memory > xbasedir
        memory > xregister_serializer
        memory > x__init__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xoperation xindentation]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xoperation)) ((xoperation)))
                        (((unsupported)).apply (((xself).xbuff)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xindentation)) ((xindentation2)))
                xserialize.write
                  [xself]
                    memory > xarg_name
                    memory > xarg_value
                    memory > ximports
                    memory > xi
                    memory > xoperation_args
                    memory > x_write
                    seq > @
                      seq
                        x_write.write
                          [x_arg_name x_arg_value]
                            memory > xargs
                            seq > @
                              ((((unsupported)).apply ((x_arg_name)) ((((xself).xoperation).xserialization_expand_args))).and (((xisinstance)).apply ((x_arg_value)) ((((unsupported)).apply ((xlist)) ((xtuple)) ((xdict)))))).if
                                (((xisinstance)).apply ((x_arg_value)) ((xdict))).if
                                  seq
                                    bogusForceDataize.write ((((xself).xfeed)).apply (("%s={".mod (x_arg_name))))
                                    bogusForceDataize.write ((((xself).xindent)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((x_arg_value).xitems)).apply)))
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xkey_string)) ((xkey_imports)))) (((((xMigrationWriter).xserialize)).apply ((xkey)))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xarg_string)) ((xarg_imports)))) (((((xMigrationWriter).xserialize)).apply ((xvalue)))))
                                        xargs.write ((((xarg_string).xsplitlines)).apply)
                                        ((((xlen)).apply ((xargs))).greater 1).if
                                          seq
                                            bogusForceDataize.write ((((xself).xfeed)).apply (("%s: %s".mod (((unsupported)).apply ((xkey_string)) ((((unsupported)).apply ((xargs)) (0)))))))
                                            (((unsupported)).apply ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (1) ((1.neg)))))))
                                              bogusForceDataize.write ((((xself).xfeed)).apply ((xarg)))
                                            bogusForceDataize.write ((((xself).xfeed)).apply (("%s,".mod (((unsupported)).apply ((xargs)) ((1.neg))))))
                                          bogusForceDataize.write ((((xself).xfeed)).apply (("%s: %s,".mod (((unsupported)).apply ((xkey_string)) ((xarg_string))))))
                                        bogusForceDataize.write ((((ximports).xupdate)).apply ((xkey_imports)))
                                        bogusForceDataize.write ((((ximports).xupdate)).apply ((xarg_imports)))
                                    bogusForceDataize.write ((((xself).xunindent)).apply)
                                    bogusForceDataize.write ((((xself).xfeed)).apply ("},"))
                                  seq
                                    bogusForceDataize.write ((((xself).xfeed)).apply (("%s=[".mod (x_arg_name))))
                                    bogusForceDataize.write ((((xself).xindent)).apply)
                                    (((unsupported)).apply ((xitem)) ((x_arg_value)))
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xarg_string)) ((xarg_imports)))) (((((xMigrationWriter).xserialize)).apply ((xitem)))))
                                        xargs.write ((((xarg_string).xsplitlines)).apply)
                                        ((((xlen)).apply ((xargs))).greater 1).if
                                          seq
                                            (((unsupported)).apply ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply ((1.neg)))))))
                                              bogusForceDataize.write ((((xself).xfeed)).apply ((xarg)))
                                            bogusForceDataize.write ((((xself).xfeed)).apply (("%s,".mod (((unsupported)).apply ((xargs)) ((1.neg))))))
                                          bogusForceDataize.write ((((xself).xfeed)).apply (("%s,".mod (xarg_string))))
                                        bogusForceDataize.write ((((ximports).xupdate)).apply ((xarg_imports)))
                                    bogusForceDataize.write ((((xself).xunindent)).apply)
                                    bogusForceDataize.write ((((xself).xfeed)).apply ("],"))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xarg_string)) ((xarg_imports)))) (((((xMigrationWriter).xserialize)).apply ((x_arg_value)))))
                                  xargs.write ((((xarg_string).xsplitlines)).apply)
                                  ((((xlen)).apply ((xargs))).greater 1).if
                                    seq
                                      bogusForceDataize.write ((((xself).xfeed)).apply (("%s=%s".mod (((unsupported)).apply ((x_arg_name)) ((((unsupported)).apply ((xargs)) (0)))))))
                                      (((unsupported)).apply ((xarg)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (1) ((1.neg)))))))
                                        bogusForceDataize.write ((((xself).xfeed)).apply ((xarg)))
                                      bogusForceDataize.write ((((xself).xfeed)).apply (("%s,".mod (((unsupported)).apply ((xargs)) ((1.neg))))))
                                    bogusForceDataize.write ((((xself).xfeed)).apply (("%s=%s,".mod (((unsupported)).apply ((x_arg_name)) ((xarg_string))))))
                                  bogusForceDataize.write ((((ximports).xupdate)).apply ((xarg_imports)))
                        ximports.write (((xset)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xargs)) ((xkwargs)))) ((((((xself).xoperation).xdeconstruct)).apply)))
                        xoperation_args.write (((xget_func_args)).apply ((((xself).xoperation).x__init__)))
                        ((((xgetattr)).apply ((xmigrations)) ((xname)) ("None: is there a None literal in the EO language?")).eq (((xself).xoperation).x__class__)).if
                          bogusForceDataize.write ((((xself).xfeed)).apply (("migrations.%s(".mod (xname))))
                          seq
                            bogusForceDataize.write ((((ximports).xadd)).apply (("import %s".mod ((((xself).xoperation).x__class__).x__module__))))
                            bogusForceDataize.write ((((xself).xfeed)).apply (("%s.%s(".mod (((unsupported)).apply (((((xself).xoperation).x__class__).x__module__)) ((xname))))))
                        bogusForceDataize.write ((((xself).xindent)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xarg)))) ((((xenumerate)).apply ((xargs)))))
                          seq
                            xarg_value.write (xarg)
                            xarg_name.write (((unsupported)).apply ((xoperation_args)) ((xi)))
                            bogusForceDataize.write (((x_write)).apply ((xarg_name)) ((xarg_value)))
                        xi.write (((xlen)).apply ((xargs)))
                        (((unsupported)).apply ((xarg_name)) ((((unsupported)).apply ((xoperation_args)) ((((unsupported)).apply ((xi)))))))
                          (((unsupported)).apply ((xarg_name)) ((xkwargs))).if
                            seq
                              xarg_value.write (((unsupported)).apply ((xkwargs)) ((xarg_name)))
                              bogusForceDataize.write (((x_write)).apply ((xarg_name)) ((xarg_value)))
                        bogusForceDataize.write ((((xself).xunindent)).apply)
                        bogusForceDataize.write ((((xself).xfeed)).apply ("),"))
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xrender)).apply)) ((ximports)))))
                xindent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xindentation)) (1))
                xunindent.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xindentation)) (1))
                xfeed.write
                  [xself xline]
                    seq > @
                      bogusForceDataize.write (((((xself).xbuff).xappend)).apply (((" ".mul (((xself).xindentation).mul 4)).add (xline))))
                xrender.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("n".xjoin)).apply (((xself).xbuff)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xmigration xinclude_header]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmigration)) ((xmigration)))
                        (((unsupported)).apply (((xself).xinclude_header)) ((xinclude_header)))
                        (((unsupported)).apply (((xself).xneeds_manual_porting)) (FALSE))
                xas_string.write
                  [xself]
                    memory > xoperations
                    memory > xitems
                    memory > xmigration_imports
                    memory > xdependencies
                    memory > ximports
                    memory > xsorted_imports
                    seq > @
                      seq
                        unsupported
                        xitems.write (((unsupported)).apply ("replaces_str") ("") ("initial_str") (""))
                        ximports.write (((xset)).apply)
                        xoperations.write (((unsupported)).apply)
                        (((unsupported)).apply ((xoperation)) ((((xself).xmigration).xoperations)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xoperation_string)) ((xoperation_imports)))) (((((((xOperationWriter)).apply ((xoperation))).xserialize)).apply)))
                            bogusForceDataize.write ((((ximports).xupdate)).apply ((xoperation_imports)))
                            bogusForceDataize.write ((((xoperations).xappend)).apply ((xoperation_string)))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("operations"))) (((xoperations).if (((("n".xjoin)).apply ((xoperations))).add "n") "")))
                        xdependencies.write (((unsupported)).apply)
                        (((unsupported)).apply ((xdependency)) ((((xself).xmigration).xdependencies)))
                          ((((unsupported)).apply ((xdependency)) (0)).eq "__setting__").if
                            seq
                              bogusForceDataize.write ((((xdependencies).xappend)).apply (("        migrations.swappable_dependency(settings.%s),".mod (((unsupported)).apply ((xdependency)) (1)))))
                              bogusForceDataize.write ((((ximports).xadd)).apply ("from django.conf import settings"))
                            bogusForceDataize.write ((((xdependencies).xappend)).apply (("        %s,".mod (((unsupported)).apply (((((xself).xserialize)).apply ((xdependency)))) (0)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("dependencies"))) (((xdependencies).if (((("n".xjoin)).apply ((xdependencies))).add "n") "")))
                        xmigration_imports.write (((xset)).apply)
                        (((unsupported)).apply ((xline)) ((((xlist)).apply ((ximports)))))
                          ((((xre).xmatch)).apply ("^import (.*).d+[^s]*$") ((xline))).if
                            seq
                              bogusForceDataize.write ((((xmigration_imports).xadd)).apply (((((((unsupported)).apply (((((xline).xsplit)).apply ("import"))) (1)).xstrip)).apply)))
                              bogusForceDataize.write ((((ximports).xremove)).apply ((xline)))
                              (((unsupported)).apply (((xself).xneeds_manual_porting)) (TRUE))
                        (((unsupported)).apply ("from django.db import models") ((ximports))).if
                          seq
                            bogusForceDataize.write ((((ximports).xdiscard)).apply ("from django.db import models"))
                            bogusForceDataize.write ((((ximports).xadd)).apply ("from django.db import migrations, models"))
                          bogusForceDataize.write ((((ximports).xadd)).apply ("from django.db import migrations"))
                        xsorted_imports.write (((unsupported)).apply ((xsorted)) ((ximports)) ((((unsupported)).apply ((((unsupported)).apply (((((xi).xsplit)).apply)) (1))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("imports"))) (((ximports).if (((("n".xjoin)).apply ((xsorted_imports))).add "n") "")))
                        (xmigration_imports).if
                          (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("imports"))) (("nn# Functions from the following migrations need manual copying.n# Move them and any dependencies into this file, then update then# RunPython operations to refer to the local versions:n# %s".mod ((("n# ".xjoin)).apply ((((xsorted)).apply ((xmigration_imports))))))))
                        (((xself).xmigration).xreplaces).if
                          (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("replaces_str"))) (("n    replaces = %sn".mod (((unsupported)).apply (((((xself).xserialize)).apply ((((xself).xmigration).xreplaces)))) (0)))))
                        ((xself).xinclude_header).if
                          (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("migration_header"))) (((xMIGRATION_HEADER_TEMPLATE).mod (((unsupported)).apply ("version") ((((xget_version)).apply)) ("timestamp") (((((((xnow)).apply).xstrftime)).apply ("%Y-%m-%d %H:%M")))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("migration_header"))) (""))
                        (((xself).xmigration).xinitial).if
                          (((unsupported)).apply ((((unsupported)).apply ((xitems)) ("initial_str"))) ("n    initial = Truen"))
                        (((unsupported)).apply (((xMIGRATION_TEMPLATE).mod (xitems))))
                xbasedir.write
                  [xself]
                    memory > xmigrations_module
                    memory > xbase_dir
                    memory > xbase_module
                    memory > xfinal_dir
                    memory > xapp_config
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmigrations_package_name)) ((x_)))) (((((xMigrationLoader).xmigrations_module)).apply ((((xself).xmigration).xapp_label)))))
                        (((unsupported)).apply ((xmigrations_package_name)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xValueError)).apply (("Django can't create migrations for app '%s' because migrations have been disabled via the MIGRATION_MODULES setting.".mod (((xself).xmigration).xapp_label))))))
                        (((unsupported)).apply ((xImportError)))
                          xmigrations_module.write (((ximport_module)).apply ((xmigrations_package_name)))
                          (((unsupported)).apply ((xValueError)))
                            (((unsupported)).apply ((((xmodule_dir)).apply ((xmigrations_module)))))
                        xapp_config.write ((((xapps).xget_app_config)).apply ((((xself).xmigration).xapp_label)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmaybe_app_name)) ((x_)) ((xmigrations_package_basename)))) (((((xmigrations_package_name).xrpartition)).apply ("."))))
                        (((xapp_config).xname).eq (xmaybe_app_name)).if
                          (((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xapp_config).xpath)) ((xmigrations_package_basename)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xexisting_dirs)) ((xmissing_dirs)))) ((((unsupported)).apply (((((xmigrations_package_name).xsplit)).apply ("."))) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xexisting_dirs)))
                          seq
                            bogusForceDataize.write ((((xmissing_dirs).xinsert)).apply (0) (((((xexisting_dirs).xpop)).apply ((1.neg)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xImportError)) ((xValueError)))))
                              xbase_module.write (((ximport_module)).apply ((((".".xjoin)).apply ((xexisting_dirs)))))
                              (((unsupported)).apply)
                              (((unsupported)).apply ((xValueError)))
                                xbase_dir.write (((xmodule_dir)).apply ((xbase_module)))
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                          (((unsupported)).apply ((((xValueError)).apply (("Could not locate an appropriate location to create migrations package %s. Make sure the toplevel package exists and can be imported.".mod (xmigrations_package_name))))))
                        xfinal_dir.write (((((xos).xpath).xjoin)).apply ((xbase_dir)) ((((unsupported)).apply ((xmissing_dirs)))))
                        (((unsupported)).apply (((xos).xmakedirs)) ((xfinal_dir)) (TRUE))
                        (((unsupported)).apply ((xmissing_dir)) ((xmissing_dirs)))
                          seq
                            xbase_dir.write (((((xos).xpath).xjoin)).apply ((xbase_dir)) ((xmissing_dir)))
                            (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xbase_dir)) ("__init__.py"))) ("w"))))
                        (((unsupported)).apply ((xfinal_dir)))
                xfilename.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s.py".mod (((xself).xmigration).xname))))
                xpath.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xos).xpath).xjoin)).apply (((xself).xbasedir)) (((xself).xfilename)))))
                xserialize.write
                  [xcls xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xserializer_factory)).apply ((xvalue))).xserialize)).apply)))
                xregister_serializer.write
                  [xcls xtype_ xserializer]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xSerializer).xregister)).apply ((xtype_)) ((xserializer)))
                xunregister_serializer.write
                  [xcls xtype_]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xSerializer).xunregister)).apply ((xtype_)))
            xMIGRATION_HEADER_TEMPLATE.write (((unsupported)).apply)
            xMIGRATION_TEMPLATE.write (((unsupported)).apply)