memory > xmark_safe
memory > xobject
memory > xSimpleTestCase
memory > xslice_filter
[] > test_slice
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_index_integer
        memory > xtest_range
        memory > xtest_index
        memory > xtest_zero_length
        memory > xtest_fail_silently
        memory > xtest_slice02
        memory > xtest_slice01
        memory > xtest_range_multiple
        memory > xtest_range_step
        memory > xtest_negative_index
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_slice01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("slice01") ((((unsupported)).apply ("a") ("a&b") ("b") ((((xmark_safe)).apply ("a&b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("&amp;b &b") ((xoutput)))
                xtest_slice02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("slice02") ((((unsupported)).apply ("a") ("a&b") ("b") ((((xmark_safe)).apply ("a&b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("&b &b"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_zero_length.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("0"))) (""))
                xtest_index.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("1"))) ("a"))
                xtest_index_integer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") (1))) ("a"))
                xtest_negative_index.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("-1"))) ("abcdef"))
                xtest_range.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("1:2"))) ("b"))
                xtest_range_multiple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("1:3"))) ("bc"))
                xtest_range_step.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ("abcdefg") ("0::2"))) ("aceg"))
                xtest_fail_silently.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((xobject)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xslice_filter)).apply ((xobj)) ("0::2"))) ((xobj)))