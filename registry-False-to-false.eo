memory > xthreading
memory > xfalse
memory > xAppConfig
memory > xRuntimeError
memory > xValueError
memory > xlabel
memory > xwarnings
memory > xmore_models
memory > xApps
memory > xRuntimeWarning
memory > xany
memory > xsys
memory > xsorted
memory > xLookupError
memory > xac
memory > x__name__
memory > xcount
memory > xlist
memory > xmodel_keys
memory > xKeyError
memory > xentry
memory > xAppRegistryNotReady
memory > xset
memory > xsettings
memory > xhasattr
memory > xCounter
memory > xdefaultdict
memory > xpartial
memory > xfunction
memory > xapp_config
memory > xname
memory > xImproperlyConfigured
memory > xmodel
memory > xlen
memory > xdict
memory > xnext_model
memory > xisinstance
[] > registry
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xset_available_apps
        memory > xget_containing_app_config
        memory > xis_installed
        memory > xpopulate
        memory > xdo_pending_operations
        memory > xunset_available_apps
        memory > xregister_model
        memory > xget_swappable_settings_name
        memory > xget_models
        memory > xcheck_models_ready
        memory > xcheck_apps_ready
        memory > xget_model
        memory > xset_installed_apps
        memory > xget_app_configs
        memory > xunset_installed_apps
        memory > xlazy_model_operation
        memory > xclear_cache
        memory > xget_app_config
        memory > xapps
        memory > x__init__
        memory > xget_registered_model
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xinstalled_apps]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xinstalled_apps)) ("None: is there a None literal in the EO language?")).and (((xhasattr)).apply ((((unsupported)).apply (((xsys).xmodules)) ((x__name__)))) ("apps"))).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("You must supply an installed_apps argument."))))
                        (((unsupported)).apply (((xself).xall_models)) ((((xdefaultdict)).apply ((xdict)))))
                        (((unsupported)).apply (((xself).xapp_configs)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xstored_app_configs)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xapps_ready)) (((xself).xmodels_ready)) (((xself).xready)) ((xfalse)))
                        (((unsupported)).apply (((xself).xready_event)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).x_lock)) (((((xthreading).xRLock)).apply)))
                        (((unsupported)).apply (((xself).xloading)) ((xfalse)))
                        (((unsupported)).apply (((xself).x_pending_operations)) ((((xdefaultdict)).apply ((xlist)))))
                        (((unsupported)).apply ((xinstalled_apps)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xpopulate)).apply ((xinstalled_apps)))
                xpopulate.write
                  [xself xinstalled_apps]
                    memory > xapp_config
                    memory > xcounts
                    memory > xduplicates
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xself).xready).if
                          (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_lock)))
                          seq
                            ((xself).xready).if
                              (((unsupported)).apply)
                            ((xself).xloading).if
                              (((unsupported)).apply ((((xRuntimeError)).apply ("populate() isn't reentrant"))))
                            (((unsupported)).apply (((xself).xloading)) (TRUE))
                            (((unsupported)).apply ((xentry)) ((xinstalled_apps)))
                              seq
                                (((xisinstance)).apply ((xentry)) ((xAppConfig))).if
                                  xapp_config.write (xentry)
                                  xapp_config.write ((((xAppConfig).xcreate)).apply ((xentry)))
                                (((unsupported)).apply (((xapp_config).xlabel)) (((xself).xapp_configs))).if
                                  (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Application labels aren't unique, duplicates: %s".mod ((xapp_config).xlabel))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xapp_configs)) (((xapp_config).xlabel)))) ((xapp_config)))
                                (((unsupported)).apply (((xapp_config).xapps)) ((xself)))
                            xcounts.write (((xCounter)).apply ((((unsupported)).apply (((xapp_config).xname)) ((xapp_config)) ((((((xself).xapp_configs).xvalues)).apply)))))
                            xduplicates.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xcount)))) (((((xcounts).xmost_common)).apply)) (((xcount).greater 1)))
                            (xduplicates).if
                              (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Application names aren't unique, duplicates: %s".mod (((", ".xjoin)).apply ((xduplicates))))))))
                            (((unsupported)).apply (((xself).xapps_ready)) (TRUE))
                            (((unsupported)).apply ((xapp_config)) ((((((xself).xapp_configs).xvalues)).apply)))
                              bogusForceDataize.write ((((xapp_config).ximport_models)).apply)
                            bogusForceDataize.write ((((xself).xclear_cache)).apply)
                            (((unsupported)).apply (((xself).xmodels_ready)) (TRUE))
                            (((unsupported)).apply ((xapp_config)) (((((xself).xget_app_configs)).apply)))
                              bogusForceDataize.write ((((xapp_config).xready)).apply)
                            (((unsupported)).apply (((xself).xready)) (TRUE))
                            bogusForceDataize.write (((((xself).xready_event).xset)).apply)
                xcheck_apps_ready.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).xapps_ready).not).if
                          seq
                            (((unsupported)).apply)
                            unsupported
                            (((unsupported)).apply ((((xAppRegistryNotReady)).apply ("Apps aren't loaded yet."))))
                xcheck_models_ready.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).xmodels_ready).not).if
                          (((unsupported)).apply ((((xAppRegistryNotReady)).apply ("Models aren't loaded yet."))))
                xget_app_configs.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xcheck_apps_ready)).apply)
                        (((unsupported)).apply ((((((xself).xapp_configs).xvalues)).apply)))
                xget_app_config.write
                  [xself xapp_label]
                    memory > xmessage
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_apps_ready)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xapp_configs)) ((xapp_label)))))
                          seq
                            xmessage.write ("No installed app with label '%s'.".mod (xapp_label))
                            (((unsupported)).apply ((xapp_config)) (((((xself).xget_app_configs)).apply)))
                              (((xapp_config).xname).eq (xapp_label)).if
                                seq
                                  (((unsupported)).apply ((xmessage)) ((" Did you mean '%s'?".mod ((xapp_config).xlabel))))
                                  (((unsupported)).apply)
                            (((unsupported)).apply ((((xLookupError)).apply ((xmessage)))))
                xget_models.write
                  [xself xinclude_auto_created xinclude_swapped]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_models_ready)).apply)
                        xresult.write (((unsupported)).apply)
                        (((unsupported)).apply ((xapp_config)) ((((((xself).xapp_configs).xvalues)).apply)))
                          bogusForceDataize.write ((((xresult).xextend)).apply (((((xapp_config).xget_models)).apply ((xinclude_auto_created)) ((xinclude_swapped)))))
                        (((unsupported)).apply ((xresult)))
                xget_model.write
                  [xself xapp_label xmodel_name xrequire_ready]
                    memory > xapp_config
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (xrequire_ready).if
                          bogusForceDataize.write ((((xself).xcheck_models_ready)).apply)
                          bogusForceDataize.write ((((xself).xcheck_apps_ready)).apply)
                        (((unsupported)).apply ((xmodel_name)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) (((((xapp_label).xsplit)).apply ("."))))
                        xapp_config.write ((((xself).xget_app_config)).apply ((xapp_label)))
                        (((xrequire_ready).not).and (((unsupported)).apply (((xapp_config).xmodels)) ("None: is there a None literal in the EO language?"))).if
                          bogusForceDataize.write ((((xapp_config).ximport_models)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xapp_config).xget_model)) ((xmodel_name)) ((xrequire_ready)))))
                xregister_model.write
                  [xself xapp_label xmodel]
                    memory > xapp_models
                    memory > xmodel_name
                    seq > @
                      seq
                        xmodel_name.write (((xmodel).x_meta).xmodel_name)
                        xapp_models.write (((unsupported)).apply (((xself).xall_models)) ((xapp_label)))
                        (((unsupported)).apply ((xmodel_name)) ((xapp_models))).if
                          ((((xmodel).x__name__).eq ((((unsupported)).apply ((xapp_models)) ((xmodel_name))).x__name__)).and (((xmodel).x__module__).eq ((((unsupported)).apply ((xapp_models)) ((xmodel_name))).x__module__))).if
                            (((unsupported)).apply (((xwarnings).xwarn)) (("Model '%s.%s' was already registered. Reloading models is not advised as it can lead to inconsistencies, most notably with related models.".mod (((unsupported)).apply ((xapp_label)) ((xmodel_name))))) ((xRuntimeWarning)) (2))
                            (((unsupported)).apply ((((xRuntimeError)).apply (("Conflicting '%s' models in application '%s': %s and %s.".mod (((unsupported)).apply ((xmodel_name)) ((xapp_label)) ((((unsupported)).apply ((xapp_models)) ((xmodel_name)))) ((xmodel))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_models)) ((xmodel_name)))) ((xmodel)))
                        bogusForceDataize.write ((((xself).xdo_pending_operations)).apply ((xmodel)))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xis_installed.write
                  [xself xapp_name]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_apps_ready)).apply)
                        (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply ((((xac).xname).eq (xapp_name))) ((xac)) ((((((xself).xapp_configs).xvalues)).apply)))))))
                xget_containing_app_config.write
                  [xself xobject_name]
                    memory > xsubpath
                    memory > xcandidates
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_apps_ready)).apply)
                        xcandidates.write (((unsupported)).apply)
                        (((unsupported)).apply ((xapp_config)) ((((((xself).xapp_configs).xvalues)).apply)))
                          ((((xobject_name).xstartswith)).apply (((xapp_config).xname))).if
                            seq
                              xsubpath.write (((unsupported)).apply ((xobject_name)) ((((unsupported)).apply ((((xlen)).apply (((xapp_config).xname)))))))
                              (((xsubpath).eq "").or ((((unsupported)).apply ((xsubpath)) (0)).eq ".")).if
                                bogusForceDataize.write ((((xcandidates).xappend)).apply ((xapp_config)))
                        (xcandidates).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsorted)) ((xcandidates)) ((((unsupported)).apply (((((xlen)).apply (((xac).xname))).neg)))))) (0))))
                xget_registered_model.write
                  [xself xapp_label xmodel_name]
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodel.write ((((((unsupported)).apply (((xself).xall_models)) ((xapp_label))).xget)).apply (((((xmodel_name).xlower)).apply)))
                        (((unsupported)).apply ((xmodel)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xLookupError)).apply (("Model '%s.%s' not registered.".mod (((unsupported)).apply ((xapp_label)) ((xmodel_name))))))))
                        (((unsupported)).apply ((xmodel)))
                xget_swappable_settings_name.write
                  [xself xto_string]
                    memory > xswapped
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xto_string.write ((((xto_string).xlower)).apply)
                        (((unsupported)).apply ((xmodel)) ((((unsupported)).apply (((xself).xget_models)) (TRUE))))
                          seq
                            xswapped.write (((xmodel).x_meta).xswapped)
                            ((xswapped).and (((((xswapped).xlower)).apply).eq (xto_string))).if
                              (((unsupported)).apply ((((xmodel).x_meta).xswappable)))
                            ((((xmodel).x_meta).xswappable).and ((((xmodel).x_meta).xlabel_lower).eq (xto_string))).if
                              (((unsupported)).apply ((((xmodel).x_meta).xswappable)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xset_available_apps.write
                  [xself xavailable]
                    memory > xinstalled
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xavailable.write (((xset)).apply ((xavailable)))
                        xinstalled.write (((unsupported)).apply (((xapp_config).xname)) ((xapp_config)) (((((xself).xget_app_configs)).apply)))
                        (((((xavailable).xissubset)).apply ((xinstalled))).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("Available apps isn't a subset of installed apps, extra apps: %s".mod (((", ".xjoin)).apply (((xavailable).sub (xinstalled)))))))))
                        bogusForceDataize.write (((((xself).xstored_app_configs).xappend)).apply (((xself).xapp_configs)))
                        (((unsupported)).apply (((xself).xapp_configs)) ((((unsupported)).apply ((xlabel)) ((xapp_config)) ((((unsupported)).apply ((xlabel)) ((xapp_config)))) ((((((xself).xapp_configs).xitems)).apply)) ((((unsupported)).apply (((xapp_config).xname)) ((xavailable)))))))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xunset_available_apps.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xapp_configs)) ((((((xself).xstored_app_configs).xpop)).apply)))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xset_installed_apps.write
                  [xself xinstalled]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xready).not).if
                          (((unsupported)).apply ((((xAppRegistryNotReady)).apply ("App registry isn't ready yet."))))
                        bogusForceDataize.write (((((xself).xstored_app_configs).xappend)).apply (((xself).xapp_configs)))
                        (((unsupported)).apply (((xself).xapp_configs)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xapps_ready)) (((xself).xmodels_ready)) (((xself).xloading)) (((xself).xready)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                        bogusForceDataize.write ((((xself).xpopulate)).apply ((xinstalled)))
                xunset_installed_apps.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xapp_configs)) ((((((xself).xstored_app_configs).xpop)).apply)))
                        (((unsupported)).apply (((xself).xapps_ready)) (((xself).xmodels_ready)) (((xself).xready)) (TRUE))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xclear_cache.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xget_models).xcache_clear)).apply)
                        ((xself).xready).if
                          (((unsupported)).apply ((xapp_config)) ((((((xself).xapp_configs).xvalues)).apply)))
                            (((unsupported)).apply ((xmodel)) ((((unsupported)).apply (((xapp_config).xget_models)) (TRUE))))
                              bogusForceDataize.write (((((xmodel).x_meta).x_expire_cache)).apply)
                xlazy_model_operation.write
                  [xself xfunction]
                    memory > xapply_next_model
                    memory > xmodel_class
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xmodel_keys).not).if
                          bogusForceDataize.write (((xfunction)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xnext_model)) ((((unsupported)).apply ((xmore_models)))))) ((xmodel_keys)))
                            xapply_next_model.write
                              [xmodel]
                                memory > xnext_function
                                seq > @
                                  seq
                                    xnext_function.write (((xpartial)).apply (((xapply_next_model).xfunc)) ((xmodel)))
                                    bogusForceDataize.write ((((xself).xlazy_model_operation)).apply ((xnext_function)) ((((unsupported)).apply ((xmore_models)))))
                            (((unsupported)).apply (((xapply_next_model).xfunc)) ((xfunction)))
                            (((unsupported)).apply ((xLookupError)))
                              xmodel_class.write ((((xself).xget_registered_model)).apply ((((unsupported)).apply ((xnext_model)))))
                              bogusForceDataize.write ((((((unsupported)).apply (((xself).x_pending_operations)) ((xnext_model))).xappend)).apply ((xapply_next_model)))
                              bogusForceDataize.write (((xapply_next_model)).apply ((xmodel_class)))
                xdo_pending_operations.write
                  [xself xmodel]
                    memory > xkey
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xkey.write (((unsupported)).apply ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xmodel_name)))
                        (((unsupported)).apply ((xfunction)) ((((((xself).x_pending_operations).xpop)).apply ((xkey)) ((((unsupported)).apply)))))
                          bogusForceDataize.write (((xfunction)).apply ((xmodel)))
            xapps.write (((unsupported)).apply ((xApps)) ("None: is there a None literal in the EO language?"))