memory > xTemplateSyntaxError
memory > xMultipleLocaleActivationBlockTranslateTests
memory > xtemplate
memory > xTranslationBlockTranslateTagTests
memory > xTokenType
memory > xrepr
memory > xLocal
memory > xmark_safe
memory > xargs
memory > xToken
memory > xSimpleTestCase
memory > xContext
memory > xinspect
memory > xBlockTranslateNode
memory > xtrans_real
memory > xtranslation
memory > xTemplate
memory > xpartial
memory > xMiscTests
memory > xname
memory > xMultipleLocaleActivationTestCase
memory > xsetup_func
memory > xkwargs
[] > test_blocktranslate
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_i18n19
        memory > xtest_variable_twice
        memory > xtest_bad_placeholder_1
        memory > xtest_i18n27
        memory > xtest_i18n21
        memory > xget_template
        memory > xtest_i18n39
        memory > xtest_i18n17
        memory > xtest_legacyi18n17
        memory > xtest_i18n34_3
        memory > xtest_legacyi18n07
        memory > xtest_count_not_number
        memory > xtest_legacyi18n27
        memory > xtest_i18n41
        memory > xtest_template_tags_pgettext
        memory > xtest_with_block
        memory > xtest_percent_formatting_in_blocktranslate
        memory > xtest_with_for
        memory > xtest_i18n08
        memory > xtest_multiple_locale_direct_switch_btrans
        memory > xtest_multiple_locale_btrans
        memory > xlibraries
        memory > xtest_i18n34
        memory > xbase_setup
        memory > xtest_no_args_with
        memory > xtest_i18n04
        memory > xtest_i18n05
        memory > xtest_legacyi18n26
        memory > xtest_i18n26
        memory > xtest_plural_bad_syntax
        memory > xtest_i18n37
        memory > xtest_repr
        memory > xtest_multiple_locale_deactivate_btrans
        memory > xtest_legacyi18n04
        memory > xtest_bad_placeholder_2
        memory > xtest_count
        memory > xtest_blocktrans_tag_using_a_string_that_looks_like_str_fmt
        memory > xtag_name
        memory > xtest_legacyi18n18
        memory > xtest_i18n03
        memory > xtest_single_locale_activation
        memory > xtest_legacyi18n08
        memory > xtest_i18n40
        memory > xtest_blocktrans_syntax_error_missing_assignment
        memory > xtest_i18n28
        memory > xtest_i18n34_2
        memory > xtest_percent_in_translatable_block
        memory > xtest_legacyi18n28
        memory > xsetup
        memory > xtest_i18n18
        memory > xtest_i18n07
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xsetup.write
              [xtemplates]
                memory > xblocktrans_setup
                memory > xdecorator
                memory > xtags
                memory > xblocktranslate_setup
                seq > @
                  (((unsupported)).apply)
                    xblocktranslate_setup.write (((xbase_setup)).apply ((xtemplates)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                    xblocktrans_setup.write (((xbase_setup)).apply ((((unsupported)).apply ((xname)) ((((((((xtemplate).xreplace)).apply ("{% blocktranslate ") ("{% blocktrans ")).xreplace)).apply ("{% endblocktranslate %}") ("{% endblocktrans %}"))) ((((unsupported)).apply ((xname)) ((xtemplate)))) (((((xtemplates).xitems)).apply)))))
                    xtags.write (((unsupported)).apply ("blocktrans") ((xblocktrans_setup)) ("blocktranslate") ((xblocktranslate_setup)))
                    xdecorator.write
                      [xfunc]
                        memory > xinner
                        seq > @
                          seq
                            xinner.write
                              [xself]
                                memory > xsignature
                                seq > @
                                  (((unsupported)).apply)
                                    xsignature.write ((((xinspect).xsignature)).apply ((xfunc)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xtag_name)) ((xsetup_func)))) (((((xtags).xitems)).apply)))
                                      (((unsupported)).apply ("tag_name") (((xsignature).xparameters))).if
                                        bogusForceDataize.write (((((xsetup_func)).apply ((((unsupported)).apply ((xpartial)) ((xfunc)) ((xtag_name)))))).apply ((xself)))
                                        bogusForceDataize.write (((((xsetup_func)).apply ((xfunc)))).apply ((xself)))
                            (((unsupported)).apply ((xinner)))
                    (((unsupported)).apply ((xdecorator)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xlibraries.write (((unsupported)).apply ("i18n") ("django.templatetags.i18n"))
                xtest_i18n03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n03") ((((unsupported)).apply ("anton") ("Å"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Å"))
                xtest_i18n04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n04") ((((unsupported)).apply ("anton") ("Å"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("å"))
                xtest_legacyi18n04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n04") ((((unsupported)).apply ("anton") ("Å"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("å"))
                xtest_i18n05.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n05") ((((unsupported)).apply ("anton") ("yyy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("xxxyyyxxx"))
                xtest_i18n07.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n07") ((((unsupported)).apply ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("singular"))
                xtest_legacyi18n07.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n07") ((((unsupported)).apply ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("singular"))
                xtest_i18n08.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n08") ((((unsupported)).apply ("number") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("2 plural"))
                xtest_legacyi18n08.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n08") ((((unsupported)).apply ("number") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("2 plural"))
                xtest_i18n17.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n17") ((((unsupported)).apply ("anton") ("α & β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α &amp; β"))
                xtest_i18n18.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n18") ((((unsupported)).apply ("anton") ("α & β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α &amp; β"))
                xtest_i18n19.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n19") ((((unsupported)).apply ("andrew") ("a & b"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("a &amp; b"))
                xtest_i18n21.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n21") ((((unsupported)).apply ("andrew") ((((xmark_safe)).apply ("a & b"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("a & b"))
                xtest_legacyi18n17.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n17") ((((unsupported)).apply ("anton") ("α & β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α &amp; β"))
                xtest_legacyi18n18.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n18") ((((unsupported)).apply ("anton") ("α & β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α &amp; β"))
                xtest_i18n26.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n26") ((((unsupported)).apply ("myextra_field") ("test") ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("singular test"))
                xtest_legacyi18n26.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n26") ((((unsupported)).apply ("myextra_field") ("test") ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("singular test"))
                xtest_i18n27.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("ru"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n27") ((((unsupported)).apply ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("1 u0440u0435u0437u0443u043bu044cu0442u0430u0442"))
                xtest_legacyi18n27.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("ru"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n27") ((((unsupported)).apply ("number") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("1 u0440u0435u0437u0443u043bu044cu0442u0430u0442"))
                xtest_i18n28.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n28") ((((unsupported)).apply ("anton") ("α") ("berta") ("β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α + β"))
                xtest_legacyi18n28.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("legacyi18n28") ((((unsupported)).apply ("anton") ("α") ("berta") ("β"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("α + β"))
                xtest_i18n34.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n34"))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("INVALID"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                xtest_i18n34_2.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n34_2"))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("INVALID"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                xtest_i18n34_3.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n34_3") ((((unsupported)).apply ("anton") ("xcexb1"))))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("INVALID"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                xtest_i18n37.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n37"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("Error: Seite nicht gefunden"))
                xtest_i18n39.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n39"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (">Seite nicht gefunden<"))
                xtest_i18n40.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n40"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                xtest_i18n41.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xoutput.write (((((xself).xengine).xrender_to_string)).apply ("i18n41"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (">Error: Seite nicht gefunden<"))
                xtest_blocktrans_syntax_error_missing_assignment.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("No argument provided to the '{}' tag for the asvar option.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_blocktrans_tag_using_a_string_that_looks_like_str_fmt.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("%s"))
                xtest_with_block.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("'{}' doesn't allow other block tags (seen 'block b') inside it".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_with_for.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'{tag_name}' doesn't allow other block tags (seen 'for b in [1, 2, 3]') inside it"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_variable_twice.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ("The 'with' option was specified more than once"))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template") ((((unsupported)).apply ("foo") ("bar"))))
                xtest_no_args_with.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("\"with\" in '{}' tag needs at least one keyword argument.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template"))
                xtest_count.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("\"count\" in '{}' tag expected exactly one keyword argument.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template") ((((unsupported)).apply ("a") ((((unsupported)).apply (1) (2) (3))))))
                xtest_count_not_number.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("'counter' argument to '{}' tag must be a number.".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template") ((((unsupported)).apply ("num") ("1"))))
                xtest_plural_bad_syntax.write
                  [xself xtag_name]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write ((("'{}' doesn't allow other block tags inside it".xformat)).apply ((xtag_name)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("template") ((((unsupported)).apply ("var") ((((unsupported)).apply (1) (2) (3))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtag_name.write "blocktranslate"
                xget_template.write
                  [xself xtemplate_string]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply ((((((((xtemplate_string).xreplace)).apply ("{{% blocktranslate ") (((("{{% {}".xformat)).apply (((xself).xtag_name))))).xreplace)).apply ("{{% endblocktranslate %}}") (((("{{% end{} %}}".xformat)).apply (((xself).xtag_name)))))))))
                xtest_template_tags_pgettext.write
                  [xself]
                    memory > xt
                    memory > xmsg
                    memory > xrendered
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xtrans_real).x_active)) ((((xLocal)).apply)))
                        (((unsupported)).apply (((xtrans_real).x_translations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"nonexistent\" %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("May"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"month name\" %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"verb\" %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context message_context %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("month name"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context message_context %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("verb"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context message_context|lower %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("MONTH NAME"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Mai"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context message_context|lower %}May{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("message_context") ("VERB"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Kann"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate count number=1 context \"super search\" %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("1 Super-Ergebnis"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate count number=2 context \"super search\" %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("2 Super-Ergebnisse"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"other super search\" count number=1 %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("1 anderen Super-Ergebnis"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"other super search\" count number=2 %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("2 andere Super-Ergebnisse"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate with num_comments=5 context \"comment count\" %}There are {{ num_comments }} comments{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Es gibt 5 Kommentare"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate with num_comments=5 context \"other comment count\" %}There are {{ num_comments }} comments{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Andere: Es gibt 5 Kommentare"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate trimmed %}nnTherent are 5  nn   commentsn{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("There are 5 comments"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate with num_comments=5 context \"comment count\" trimmed %}nnThere are  tn  t {{ num_comments }} commentsnn{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("Es gibt 5 Kommentare"))
                            xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context \"other super search\" count number=2 trimmed %}n{{ number }} super n result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("2 andere Super-Ergebnisse"))
                            xmsg.write "Unknown argument for 'blocktranslate' tag: %r."
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) (((xmsg).mod "month=\"May\"")))))
                              bogusForceDataize.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context with month=\"May\" %}{{ month }}{% endblocktranslate %}"))
                            xmsg.write ("\"context\" in %r tag expected exactly one argument.".mod "blocktranslate")
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                              bogusForceDataize.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate context %}{% endblocktranslate %}"))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                              bogusForceDataize.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate count number=2 context %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktranslate %}"))
                xtest_bad_placeholder_1.write
                  [xself]
                    memory > xt
                    memory > xrendered
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          seq
                            xt.write (((xTemplate)).apply ("{% load i18n %}{% blocktranslate %}My name is {{ person }}.{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("person") ("James"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("My name is James."))
                xtest_bad_placeholder_2.write
                  [xself]
                    memory > xt
                    memory > xrendered
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          seq
                            xt.write (((xTemplate)).apply ("{% load i18n %}{% blocktranslate %}My other name is {{ person }}.{% endblocktranslate %}"))
                            xrendered.write ((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("person") ("James"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrendered)) ("My other name is James."))
            (((unsupported)).apply ((xTranslationBlockTranslateTagTests)))
              xtag_name.write "blocktrans"
            (((unsupported)).apply ((xMultipleLocaleActivationTestCase)))
              seq
                xtag_name.write "blocktranslate"
                xget_template.write
                  [xself xtemplate_string]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply ((((((((xtemplate_string).xreplace)).apply ("{{% blocktranslate ") (((("{{% {}".xformat)).apply (((xself).xtag_name))))).xreplace)).apply ("{{% endblocktranslate %}}") (((("{{% end{} %}}".xformat)).apply (((xself).xtag_name)))))))))
                xtest_single_locale_activation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("fr"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}Yes{% endblocktranslate %}")).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Oui"))
                xtest_multiple_locale_btrans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply (((xself).x_old_language)))) (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_deactivate_btrans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtranslation).xoverride)) ("de") (TRUE))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
                xtest_multiple_locale_direct_switch_btrans.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          xt.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("nl"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt).xrender)).apply ((((xContext)).apply ((((unsupported)).apply)))))) ("Nee"))
            (((unsupported)).apply ((xMultipleLocaleActivationBlockTranslateTests)))
              xtag_name.write "blocktrans"
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtag_name.write "blocktranslate"
                xget_template.write
                  [xself xtemplate_string]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply ((((((((xtemplate_string).xreplace)).apply ("{{% blocktranslate ") (((("{{% {}".xformat)).apply (((xself).xtag_name))))).xreplace)).apply ("{{% endblocktranslate %}}") (((("{{% end{} %}}".xformat)).apply (((xself).xtag_name)))))))))
                xtest_percent_in_translatable_block.write
                  [xself]
                    memory > xt_plur
                    memory > xt_sing
                    seq > @
                      (((unsupported)).apply)
                        xt_sing.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}The result was {{ percent }}%{% endblocktranslate %}"))
                        xt_plur.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate count num as number %}{{ percent }}% represents {{ num }} object{% plural %}{{ percent }}% represents {{ num }} objects{% endblocktranslate %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_sing).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("percent") (42))))))) ("Das Ergebnis war 42%"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_plur).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("percent") (42) ("num") (1))))))) ("42% stellt 1 Objekt dar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_plur).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("percent") (42) ("num") (4))))))) ("42% stellt 4 Objekte dar"))
                xtest_percent_formatting_in_blocktranslate.write
                  [xself]
                    memory > xt_plur
                    memory > xt_sing
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xt_sing.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate %}There are %(num_comments)s comments{% endblocktranslate %}"))
                        xt_plur.write ((((xself).xget_template)).apply ("{% load i18n %}{% blocktranslate count num as number %}%(percent)s% represents {{ num }} object{% plural %}%(percent)s% represents {{ num }} objects{% endblocktranslate %}"))
                        (((unsupported)).apply (((((xtranslation).xoverride)).apply ("de"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_sing).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("num_comments") (42))))))) ("There are %(num_comments)s comments"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_plur).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("percent") (42) ("num") (1))))))) ("%(percent)s% represents 1 object"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xt_plur).xrender)).apply ((((xContext)).apply ((((unsupported)).apply ("percent") (42) ("num") (4))))))) ("%(percent)s% represents 4 objects"))
            (((unsupported)).apply ((xMiscTests)))
              xtag_name.write "blocktrans"
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_repr.write
                [xself]
                  memory > xblock_translate_node
                  seq > @
                    seq
                      xblock_translate_node.write (((unsupported)).apply ((xBlockTranslateNode)) ((((unsupported)).apply)) ((((unsupported)).apply ((((xToken)).apply (((xTokenType).xTEXT)) ("content"))) ((((xToken)).apply (((xTokenType).xVAR)) ("variable"))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xblock_translate_node)))) ("<BlockTranslateNode: extra_context={} singular=[<Text token: \"content...\">, <Var token: \"variable...\">] plural=None>"))